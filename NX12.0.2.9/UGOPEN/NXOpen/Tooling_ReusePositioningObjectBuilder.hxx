#ifndef NXOpen_TOOLING_REUSEPOSITIONINGOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_REUSEPOSITIONINGOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ReusePositioningObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/Tooling_QuickDatumCsysBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ReusePositioningObjectBuilder;
    }
    class Builder;
    class CoordinateSystem;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Point;
    class ScCollector;
    class Section;
    class Sketch;
    namespace Tooling
    {
        class QuickDatumCsysBuilder;
    }
    namespace Tooling
    {
        class _ReusePositioningObjectBuilderBuilder;
        class ReusePositioningObjectBuilderImpl;
        /** Represents a @link NXOpen::Tooling::ReusePositioningObjectBuilder NXOpen::Tooling::ReusePositioningObjectBuilder@endlink   <br> Use the @link NXOpen::Tooling::ReusableObjectManager NXOpen::Tooling::ReusableObjectManager@endlink  class to create a ReusePositioningObjectBuilder.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ReusePositioningObjectBuilder : public NXOpen::Builder
        {
            /** the dialog layout options */
            public: enum DialogOptions
            {
                DialogOptionsFromToolbar/** dialog from toolbar */,
                DialogOptionsFromDialog/** called by other dialog */,
                DialogOptionsImportPart/** import template part */,
                DialogOptionsToolingTemplate/** tooling template part */,
                DialogOptionsFromExpression/** dialog from expression */
            };

            /** the positioning types */
            public: enum Types
            {
                TypesPatternLinear/** linear type*/,
                TypesPatternCircular/** circular type*/,
                TypesImportedData/** imported data type*/,
                TypesEditSketch/** edit sketch type*/,
                TypesEditMode/** dialog edit mode*/ = 9,
                TypesQuickCsys/** quick datum csys mode*/ = 7,
                TypesOffsetCsysPattern/** offset csys pattern mode*/,
                TypesPlanarPattern/** planar type*/ = 4,
                TypesNonPlanarPattern/** non planar type*/,
                TypesCurvePattern/** non planar curve type*/
            };

            /** the positioning sub types */
            public: enum SubTypes
            {
                SubTypesPlanarPatternLinear/** linear type*/,
                SubTypesPlanarPatternCircular/** circular type*/,
                SubTypesEditSketch/** general type*/,
                SubTypesNonPlanarPattern/** edit sketch type*/,
                SubTypesNonPlanarGeneral/** general type*/
            };

            /** trim to each other within section type enum. */
            public: enum CurveTrim
            {
                CurveTrimNone/** no trimming */,
                CurveTrimWithinSection/** allow trimming */
            };

            /** extend to face edges type enum. */
            public: enum CurveExtendToFace
            {
                CurveExtendToFaceNone/** no extentsion */,
                CurveExtendToFaceBoundary/** extend till face boundary */
            };

            private: ReusePositioningObjectBuilderImpl * m_reusepositioningobjectbuilder_impl;
            private: friend class  _ReusePositioningObjectBuilderBuilder;
            protected: ReusePositioningObjectBuilder();
            public: ~ReusePositioningObjectBuilder();
            /**Returns  the initial paste location. This is mainly used to define default paste location of sketch objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d InitialPasteLocation
            (
            );
            /**Sets  the initial paste location. This is mainly used to define default paste location of sketch objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialPasteLocation
            (
                const NXOpen::Point3d & dropLocation /** The drop location coordinates in absolute */
            );
            /**Returns  the option specifying whether to use one-pick position method for drag/drop 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseOnePickPositionMethod
            (
            );
            /**Sets  the option specifying whether to use one-pick position method for drag/drop 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseOnePickPositionMethod
            (
                bool useOnePickPositionMethod /** Flag indicating whether to use one pick position method or not */
            );
            /**Returns  an option that indicates whether to use face center as location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFaceCenterAsLocation
            (
            );
            /**Sets  an option that indicates whether to use face center as location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseFaceCenterAsLocation
            (
                bool useFaceCenter /** Flag indicating whether to use face center or not */
            );
            /**Returns  the feature group created after reuse paste 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * EditFeatureGroup
            (
            );
            /**Sets  the feature group created after reuse paste 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditFeatureGroup
            (
                NXOpen::Features::Feature * featureGroup /** Repositioning feature group */
            );
            /**Returns  the origin of dynamic csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d DynamicCsysOrigin
            (
            );
            /**Sets  the origin of dynamic csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicCsysOrigin
            (
                const NXOpen::Point3d & origin /** Origin of dynamic csys */
            );
            /**Returns  the orientation of dynamic csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 DynamicCsysOrientation
            (
            );
            /**Sets  the orientation of dynamic csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicCsysOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Orientation of dynamic csys */
            );
            /**Returns  the drop face required for reattach sketch when using one-pick position method  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * DropObject
            (
            );
            /**Sets  the drop face required for reattach sketch when using one-pick position method  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDropObject
            (
                NXOpen::NXObject * face /** Drop face or point */
            );
            /**Returns  the imported sketch  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Sketch * ImportedSketch
            (
            );
            /**Sets  the imported sketch  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportedSketch
            (
                NXOpen::Sketch * sketch /** Imported sketch */
            );
            /**Returns  the library name that is used for the positioning object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LibraryName
            (
            );
            /**Sets  the library name that is used for the positioning object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLibraryName
            (
                const NXString & libraryName /** Library name */
            );
            /**Sets  the library name that is used for the positioning object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetLibraryName
            (
                const char * libraryName /** Library name */
            );
            /** Imports given part file to current work part 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void LoadPart
            (
                const NXString & partFileName /** Part file name without path */
            );
            /** Imports given part file to current work part 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void LoadPart
            (
                const char * partFileName /** Part file name without path */
            );
            /** Moves the body to the selected point and orientation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void RepositionBody
            (
                const NXOpen::Point3d & target /** Destination point */,
                const NXOpen::Matrix3x3 & orient /** Orientation */,
                bool twoPickPositionMode /** Flag specifying whether to reposition the body based on active sketch plane when using two pick position method to drop the body. If True, reposition the body, else, do nothing. */,
                bool onlyMovePoints /** Flag specifying whether to move the whole sketch or just the sketch points. If True, reposition the sketch points, else, reposition the whole sketch. */
            );
            /** Creates new sketch on drop face and location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateSketch
            (
                NXOpen::NXObject * dropFace /** tag of drop face of point */,
                const NXOpen::Point3d & position /** Destination point */
            );
            /** Gets sketch tag from feature set 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSketchFromFeatureSet
            (
            );
            /** Delete point from sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void DeletePoint
            (
                NXOpen::Point * point /** tag of delete point */
            );
            /** Edits point from sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EditPoint
            (
                NXOpen::Point * point /** tag of delete point */,
                double value /** value point coordinates */,
                bool isXValue /** is the value x or y coordinate */
            );
            /** Edits point from sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EditPoint
            (
                NXOpen::Point * point /** tag of delete point */,
                double xvalue /** value point x coordinates */,
                double yvalue /** value point y coordinates */
            );
            /** Adds points to sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void AddPoints
            (
            );
            /** Create a point, then add it to sketch  @return  point tag 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AddPoint
            (
                const NXOpen::Point3d & pointCoords /** point coordinates */
            );
            /** Creates point pattern in sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePointInSketch
            (
            );
            /**Returns  the offset value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OffsetValue
            (
            );
            /**Sets  the offset value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetValue
            (
                const NXString & offsetValue /** offsetvalue */ 
            );
            /**Sets  the offset value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetOffsetValue
            (
                const char * offsetValue /** offsetvalue */ 
            );
            /**Returns  the row number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RowNumber
            (
            );
            /**Sets  the row number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRowNumber
            (
                const NXString & rowNumber /** rownumber */ 
            );
            /**Sets  the row number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetRowNumber
            (
                const char * rowNumber /** rownumber */ 
            );
            /**Returns  the column number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ColumnNumber
            (
            );
            /**Sets  the column number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColumnNumber
            (
                const NXString & columnNumber /** columnnumber */ 
            );
            /**Sets  the column number of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetColumnNumber
            (
                const char * columnNumber /** columnnumber */ 
            );
            /**Returns  the length value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Length
            (
            );
            /**Sets  the length value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLength
            (
                const NXString & length /** length */ 
            );
            /**Sets  the length value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetLength
            (
                const char * length /** length */ 
            );
            /**Returns  the width value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Width
            (
            );
            /**Sets  the width value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWidth
            (
                const NXString & width /** width */ 
            );
            /**Sets  the width value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetWidth
            (
                const char * width /** width */ 
            );
            /**Returns  the distribution mode of pattern point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Distribution
            (
            );
            /**Sets  the distribution mode of pattern point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDistribution
            (
                bool isSymmetrical /** issymmetrical */ 
            );
            /**Returns  the angle value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Angle
            (
            );
            /**Sets  the angle value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngle
            (
                const NXString & angle /** angle */ 
            );
            /**Sets  the angle value of pattern
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetAngle
            (
                const char * angle /** angle */ 
            );
            /**Returns  the imported data file name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DataFile
            (
            );
            /**Sets  the imported data file name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDataFile
            (
                const NXString & dataFileName /** Data file name */
            );
            /**Sets  the imported data file name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetDataFile
            (
                const char * dataFileName /** Data file name */
            );
            /**Returns  the positioning object type that is from pattern or imported data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusePositioningObjectBuilder::Types Type
            (
            );
            /**Sets  the positioning object type that is from pattern or imported data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::ReusePositioningObjectBuilder::Types type /** type */ 
            );
            /** Gets attributes from feature set  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetFeatureSetAttributes
            (
            );
            /** Sets points in sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointsInSketch
            (
            );
            /** Gets the point coordinates  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetNonStandardPoints
            (
                std::vector<NXOpen::Point3d> & points /** points */ 
            );
            /**  Set the point coordinates 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonStandardPoints
            (
                const std::vector<NXOpen::Point3d> & points /** points */ ,
                bool isAbsolute /** Flag indicating whether the points is absolute or not */
            );
            /**Returns  the part sketch point section 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SketchPoint
            (
            );
            /** Sets the sketch to be active 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSketchActive
            (
                NXOpen::Sketch * sketch /** sketch */ 
            );
            /**Returns  the dialog option type that is from toolbar or others 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusePositioningObjectBuilder::DialogOptions DialogOption
            (
            );
            /**Sets  the dialog option type that is from toolbar or others 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDialogOption
            (
                NXOpen::Tooling::ReusePositioningObjectBuilder::DialogOptions options /** options */ 
            );
            /**Returns  an option that indicates whether to use project point if associative point is not in the same plane as sketch 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool UseProjectPoint
            (
            );
            /**Sets  an option that indicates whether to use project point if associative point is not in the same plane as sketch 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetUseProjectPoint
            (
                bool useProjectPoint /** Flag indicating whether to use project point or not */
            );
            /**Returns  the new added point  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * NewPoint
            (
            );
            /**Sets  the new added point  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNewPoint
            (
                NXOpen::Point * point /** New added point tag */
            );
            /**Returns  the positioning object sub type that is from pattern or imported data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusePositioningObjectBuilder::SubTypes SubType
            (
            );
            /**Sets  the positioning object sub type that is from pattern or imported data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSubType
            (
                NXOpen::Tooling::ReusePositioningObjectBuilder::SubTypes type /** type */ 
            );
            /**Returns  the start U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StartingUValue
            (
            );
            /**Sets  the start U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStartingUValue
            (
                const NXString & startUValue /** startuvalue */ 
            );
            /**Sets  the start U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetStartingUValue
            (
                const char * startUValue /** startuvalue */ 
            );
            /**Returns  the start V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StartingVValue
            (
            );
            /**Sets  the start V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStartingVValue
            (
                const NXString & startVValue /** startvvalue */ 
            );
            /**Sets  the start V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetStartingVValue
            (
                const char * startVValue /** startvvalue */ 
            );
            /**Returns  the end U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EndingUValue
            (
            );
            /**Sets  the end U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEndingUValue
            (
                const NXString & endUValue /** enduvalue */ 
            );
            /**Sets  the end U value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetEndingUValue
            (
                const char * endUValue /** enduvalue */ 
            );
            /**Returns  the end V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EndingVValue
            (
            );
            /**Sets  the end V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEndingVValue
            (
                const NXString & endVValue /** endvvalue */ 
            );
            /**Sets  the end V value of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetEndingVValue
            (
                const char * endVValue /** endvvalue */ 
            );
            /**Sets  the u percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUPercentage
            (
                const NXString & uPercentage /** upercentage */ 
            );
            /**Sets  the u percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetUPercentage
            (
                const char * uPercentage /** upercentage */ 
            );
            /**Returns  the u percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UPercentage
            (
            );
            /**Sets  the v percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVPercentage
            (
                const NXString & vPercentage /** vpercentage */ 
            );
            /**Sets  the v percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetVPercentage
            (
                const char * vPercentage /** vpercentage */ 
            );
            /**Returns  the v percentage of non planar face pattern
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString VPercentage
            (
            );
            /**Sets  the percentage value of curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurvePercentage
            (
                const NXString & curvePercentage /** curvepercentage */ 
            );
            /**Sets  the percentage value of curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetCurvePercentage
            (
                const char * curvePercentage /** curvepercentage */ 
            );
            /**Returns  the percentage value of curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CurvePercentage
            (
            );
            /**Sets  the flag of the selected curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedCurve
            (
                bool selected /** selected */ 
            );
            /**Returns  the flag of the selected curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelectedCurve
            (
            );
            /** Create a point on the non-planar face/curve  @return  point tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AddPointOnNonPlanar
            (
                const NXOpen::Point3d & pointCoords /** point coordinates */
            );
            /** Edits point on the planar face/curve  @return  point tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EditPointOnPlanar
            (
                NXOpen::Point * point /** tag of delete point */,
                double value /** value point U,V or percentage on the curve */,
                bool isUValue /** is the value U or V, or percentage on the curve */
            );
            /** Creates datum csys pattern on non planar face/curve 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateCsysOnNonPlanar
            (
            );
            /** Edits point on the planar face/curve  @return  point tag 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EditPointOnPlanar
            (
                NXOpen::Point * point /** tag of delete point */,
                double uValue /** value point U,V or percentage on the curve */,
                double vValue /** value point U,V or percentage on the curve */
            );
            /** Sets the trim option for curve option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimToFaceEdgesOption
            (
                bool trimToFaceEdges /** trim to face edges */ 
            );
            /**Returns  the trim option for curve option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool TrimToFaceEdgesOption
            (
            );
            /** Sets the extend option for curve operation. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtendToFaceEdgesOption
            (
                NXOpen::Tooling::ReusePositioningObjectBuilder::CurveExtendToFace extendToFaceEdges /** extend to face edges */ 
            );
            /**Returns  the extend option for curve operation. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusePositioningObjectBuilder::CurveExtendToFace ExtendToFaceEdgesOption
            (
            );
            /** Trim curve status accroding to the trim option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void TrimCurveFaceEdges
            (
                bool trimToFaceEdges /** Whether the update the curve face edges when trim option turn on/off */
            );
            /** Extend curve status accroding to the extend option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void ExtendCurveFaceEdges
            (
                bool extendToFaceEdges /** Whether the update the curve face edges when extend option turn on/off */
            );
            /** Set base face for section 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBaseFaceForSection
            (
                NXOpen::ScCollector * collTag /** Base face collector tag */
            );
            /** Flip offset curve direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void FlipOffsetCurveDirection
            (
            );
            /** Offset curve on the face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void OffsetCurveOnFace
            (
                const NXString & offsetValue /** offset value */
            );
            /** Offset curve on the face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void OffsetCurveOnFace
            (
                const char * offsetValue /** offset value */
            );
            /**Sets  the multiple face for non planar face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMultipleFaceCollector
            (
                NXOpen::ScCollector * collTag /** mutiple face collector tag */
            );
            /**Returns  the multiple face for non planar face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MultipleFaceCollector
            (
            );
            /** Free OCF applicaion data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void FreeOcfApplicationData
            (
            );
            /** Sets the selected curve for non planar face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedCurveCollector
            (
                NXOpen::Section * section /** the selected curve section tag */
            );
            /**Returns  the selected curve for non planar face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelectedCurveCollector
            (
            );
            /**Returns  the quick CSYS data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::QuickDatumCsysBuilder * QuickCsysData
            (
            );
            /**Sets  the quick CSYS data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetQuickCsysData
            (
                NXOpen::Tooling::QuickDatumCsysBuilder * quickCsysData /** Quick Csys builder data */
            );
            /**Returns  the seed datum CSYS 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * SeedDatumCsys
            (
            );
            /**Sets  the seed datum CSYS 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSeedDatumCsys
            (
                NXOpen::CoordinateSystem * seedCsys /** Seed datum CSYS tag */
            );
            /**Returns  the offset datum CSYS 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * OffsetDatumCsys
            (
            );
            /**Sets  the offset datum CSYS 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetDatumCsys
            (
                NXOpen::Features::Feature * offsetCsys /** Offset datum CSYS feature tag */
            );
            /**Returns  the offset datum CSYS from quick csys 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * OffsetCsysFromQuick
            (
            );
            /**Sets  the offset datum CSYS from quick csys 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetCsysFromQuick
            (
                NXOpen::CoordinateSystem * offsetCsysFromQuick /** Offset CSYS from quick csys mode */
            );
            /**Returns  the referenced CSYS pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ReferenceCsysPattern
            (
            );
            /**Sets  the referenced CSYS pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferenceCsysPattern
            (
                NXOpen::NXObject * referCsysPattern /** Reference CSYS pattern tag */
            );
            /** Get the offset datum CSYS pattern  @return  Offset CSYS pattern from quick csys mode 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetOffsetCsysPattern
            (
            );
            /** Gets all the datum CSYS tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAllDatumCsys
            (
                std::vector<NXOpen::CoordinateSystem *> & datumCsys /** csys tags */
            );
            /** Find the seed CSYS tag from pattern  @return  Seed csys tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * FindSeedCsysFromPattern
            (
                NXOpen::NXObject * csysPattern /** Selected csys pattern tag */
            );
            /** Get all CSYS tags from positioning feature set 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void GetCsysFromFeatureSet
            (
            );
            /** Create offset CSYS from seed CSYS  @return  Offset csys feature tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * CreateOffsetCsysFromSeed
            (
            );
            /** Update quick CSYS pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateQuickCsysPattern
            (
            );
            /** Update datum CSYS when switch the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateDatumCsysByType
            (
            );
            /** Deselected the edge or non planar face 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void DeselectNonPlanarObject
            (
                const std::vector<NXOpen::NXObject *> & delselectedObjs /** Edge or non planar face */
            );
            /**Sets  the flag of the selected non-planar face
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedNonPlanarFace
            (
                bool selected /** selected */ 
            );
            /**Returns  the flag of the selected non-planar face
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelectedNonPlanarFace
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
