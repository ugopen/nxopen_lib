#ifndef NXOpen_GEOMETRICUTILITIES_SELECTDIVIDINGOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SELECTDIVIDINGOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SelectDividingObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SelectDividingObjectBuilder;
    }
    class Expression;
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    class Section;
    class SelectDisplayableObjectList;
    namespace GeometricUtilities
    {
        class _SelectDividingObjectBuilderBuilder;
        class SelectDividingObjectBuilderImpl;
        /** Represents the dividing tool block for dividing face
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  SelectDividingObjectBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents the Dividing Tool types*/
            public: enum ToolType
            {
                ToolTypeObject/** object */ ,
                ToolTypeLineByTwoPoints/** line by two points */ ,
                ToolTypeOffsetCurveInFace/** offset curve in face */ ,
                ToolTypeIsoparametricCurve/** isoparametric curve */ 
            };

            /** Represents the direction of isoparametric curve*/
            public: enum IsoparametricDirectionType
            {
                IsoparametricDirectionTypeU/** u */ ,
                IsoparametricDirectionTypeV/** v */ 
            };

            private: SelectDividingObjectBuilderImpl * m_selectdividingobjectbuilder_impl;
            private: friend class  _SelectDividingObjectBuilderBuilder;
            protected: SelectDividingObjectBuilder();
            public: ~SelectDividingObjectBuilder();
            /**Returns  the tool option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SelectDividingObjectBuilder::ToolType ToolOption
            (
            );
            /**Sets  the tool option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolOption
            (
                NXOpen::GeometricUtilities::SelectDividingObjectBuilder::ToolType toolOption /** tooloption */ 
            );
            /**Returns  the dividing objects list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * DividingObjectsList
            (
            );
            /**Returns  the start point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the end point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the end point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /**Returns  the curves to offset 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CurvesToOffset
            (
            );
            /**Returns  the offset distance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetDistance
            (
            );
            /**Returns  the offset direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool OffsetDirection
            (
            );
            /**Sets  the offset direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOffsetDirection
            (
                bool offsetDirection /** offsetdirection */ 
            );
            /**Returns  the iso parameter point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /**Returns  the isoparametric direction  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SelectDividingObjectBuilder::IsoparametricDirectionType IsoparametricDirection
            (
            );
            /**Sets  the isoparametric direction  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIsoparametricDirection
            (
                NXOpen::GeometricUtilities::SelectDividingObjectBuilder::IsoparametricDirectionType isoprametricDirection /** isoprametricdirection */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
