#ifndef NXOpen_CAM_INSPECTIONUVGRIDBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONUVGRIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionUVGridBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/CAM_InspectionMoveBuilder.hxx>
#include <NXOpen/CAM_InspectionPathBuilder.hxx>
#include <NXOpen/CAM_InspectionMoveBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionUVGridBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class InspectionMoveBuilder;
    }
    class Direction;
    class NXObject;
    namespace CAM
    {
        class _InspectionUVGridBuilderBuilder;
        class InspectionUVGridBuilderImpl;
        /** Represents the builder for the CMM Inspection UV Grid sub-operation.  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionMoveCollection::CreateInspectionUvgridBuilder  NXOpen::CAM::InspectionMoveCollection::CreateInspectionUvgridBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionUVGridBuilder : public NXOpen::CAM::InspectionMoveBuilder
        {
            /** the start point mode */
            public: enum StartPointType
            {
                StartPointTypeNearest/** Nearest point */,
                StartPointTypeUminVmin/** Umin - Vmin */,
                StartPointTypeUmaxVmin/** Umax - Vmin */,
                StartPointTypeUminVmax/** Umin - Vmax */,
                StartPointTypeUmaxVmax/** Umax - Vmax */
            };

            /** the method for determining the axis for a sphere */
            public: enum SphereAxisType
            {
                SphereAxisTypeAlignWithProbe/** Align with probe axis */,
                SphereAxisTypeSelectDirection/** User specified direction */,
                SphereAxisTypeSetupZAxis/** Z-axis stored in Setup */
            };

            private: InspectionUVGridBuilderImpl * m_inspectionuvgridbuilder_impl;
            private: friend class  _InspectionUVGridBuilderBuilder;
            protected: InspectionUVGridBuilder();
            public: ~InspectionUVGridBuilder();
            /**Returns  the number of points in U 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumberOfUPoints
            (
            );
            /**Returns  the number of points in V 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumberOfVPoints
            (
            );
            /**Returns  the start value in U 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartU
            (
            );
            /**Returns  the end value in U 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndU
            (
            );
            /**Returns  the start value in V 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartV
            (
            );
            /**Returns  the end value in V 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndV
            (
            );
            /**Returns  the start distance value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartUDist
            (
            );
            /**Returns  the end distance value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndUDist
            (
            );
            /**Returns  the start distance value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartVDist
            (
            );
            /**Returns  the end distance value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndVDist
            (
            );
            /**Returns  the start degrees value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartUDeg
            (
            );
            /**Returns  the end degrees value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndUDeg
            (
            );
            /**Returns  the start degrees value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartVDeg
            (
            );
            /**Returns  the end degrees value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndVDeg
            (
            );
            /**Returns  the start sweep value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartUSweep
            (
            );
            /**Returns  the sweep value in U 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndUSweep
            (
            );
            /**Returns  the start sweep value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartVSweep
            (
            );
            /**Returns  the sweep value in V 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndVSweep
            (
            );
            /**Returns  the start U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes StartUMode
            (
            );
            /**Sets  the start U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartUMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes EndUMode
            (
            );
            /**Sets  the end U mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndUMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the start V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes StartVMode
            (
            );
            /**Sets  the start V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartVMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes EndVMode
            (
            );
            /**Sets  the end V mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEndVMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the approach distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ApproachDist
            (
            );
            /**Returns  the retract distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * RetractDist
            (
            );
            /**Returns  the search distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * SearchDist
            (
            );
            /**Returns  the start point mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionUVGridBuilder::StartPointType StartPointMode
            (
            );
            /**Sets  the start point mode 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartPointMode
            (
                NXOpen::CAM::InspectionUVGridBuilder::StartPointType startMode /** startmode */ 
            );
            /**Returns  the path point sequence optimization setting 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionPathBuilder::SequenceType SequenceOptimization
            (
            );
            /**Sets  the path point sequence optimization setting 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSequenceOptimization
            (
                NXOpen::CAM::InspectionPathBuilder::SequenceType sequenceOpt /** sequenceopt */ 
            );
            /**Returns  the method for determining the axis for a sphere 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionUVGridBuilder::SphereAxisType SphereAxisMethod
            (
            );
            /**Sets  the method for determining the axis for a sphere 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSphereAxisMethod
            (
                NXOpen::CAM::InspectionUVGridBuilder::SphereAxisType method /** method */ 
            );
            /**Returns  the sphere axis vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SphereAxisVector
            (
            );
            /**Sets  the sphere axis vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSphereAxisVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the flag to use feature collision avoidance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFeatureCollisionAvoidance
            (
            );
            /**Sets  the flag to use feature collision avoidance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUseFeatureCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to use part collision avoidance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePartCollisionAvoidance
            (
            );
            /**Sets  the flag to use part collision avoidance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUsePartCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to align with machine axes 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignMachineAxes
            (
            );
            /**Sets  the flag to align with machine axes 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignMachineAxes
            (
                bool flag /** flag */ 
            );
            /**Returns  the number of valid points created for the UV Grid 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfValidPoints
            (
            );
            /**Sets  the number of valid points created for the UV Grid 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNumberOfValidPoints
            (
                int numPoints /** numpoints */ 
            );
            /**Returns  the point sequence mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes PointSequenceMode
            (
            );
            /**Sets  the point sequence mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes ptSeqMode /** ptseqmode */ 
            );
            /**Returns  the point sequence start location 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes PointSequenceStart
            (
            );
            /**Sets  the point sequence start location 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceStart
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes ptSeqStart /** ptseqstart */ 
            );
            /**Returns  the point sequence start direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes PointSequenceDirection
            (
            );
            /**Sets  the point sequence start direction 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceDirection
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes ptSeqDir /** ptseqdir */ 
            );
            /**Returns  the depth method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMoveBuilder::DepthMethodTypes DepthMethod
            (
            );
            /**Sets  the depth method 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDepthMethod
            (
                NXOpen::CAM::InspectionMoveBuilder::DepthMethodTypes method /** method */ 
            );
            /**Returns  the depth distance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double DepthDistance
            (
            );
            /**Sets  the depth distance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDepthDistance
            (
                double distance /** distance */ 
            );
            /** Flag indicating whether layout changed. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLayoutChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether point coverage changed. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointCoverageChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether approach distance changed. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAppDistChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether retract distance changed. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRetDistChanged
            (
                bool flag /** flag */ 
            );
            /** Flag indicating whether point sequence changed. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceChanged
            (
                bool flag /** flag */ 
            );
            /**Returns  the measured geometry 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * MeasuredGeometry
            (
            );
            /**Sets  the measured geometry 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMeasuredGeometry
            (
                NXOpen::NXObject * face /** face */ 
            );
            /** Copy point grid parameters 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CopyAttributes
            (
                NXOpen::CAM::InspectionUVGridBuilder * target /** target */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
