#ifndef NXOpen_CAE_LAMINATESPREADSHEETREPORTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_LAMINATESPREADSHEETREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateSpreadsheetReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_LaminateElementFilterBuilder.hxx>
#include <NXOpen/CAE_LaminatePlyFilterBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LaminateSpreadsheetReportBuilder;
    }
    class Builder;
    namespace CAE
    {
        class LaminateElementFilterBuilder;
    }
    namespace CAE
    {
        class LaminatePlyFilterBuilder;
    }
    namespace CAE
    {
        class _LaminateSpreadsheetReportBuilderBuilder;
        class LaminateSpreadsheetReportBuilderImpl;
        /** Represents a @link NXOpen::CAE::LaminateSpreadsheetReport NXOpen::CAE::LaminateSpreadsheetReport@endlink  builder  <br> There is no kf creator.  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LaminateSpreadsheetReportBuilder : public NXOpen::Builder
        {
            /** Coordinate system to use for ply stresses, ply failure indices, ply strength 
                        ratios and ply margins of safety calculation. */
            public: enum CoordinateSystemType
            {
                CoordinateSystemTypePly/** Ply coordinate system */,
                CoordinateSystemTypeLaminate/** Laminate coordinate system */
            };

            /** Failure indices mode. NXLC can compute in-plane ply 
                        failure indices and/or interlaminar failure indices */
            public: enum FailureModeType
            {
                FailureModeTypeInPlanePly/** Ply failure index */,
                FailureModeTypeInterlaminar/** Bonding failure index */,
                FailureModeTypeBoth/** Both failure index type */
            };

            /** Result enveloping rules. When there is more than one solutions or loadcases, 
                        defines which result to keep and display in the graphical report */
            public: enum EnvelopeRule
            {
                EnvelopeRuleMaxMin/** Keep minimum and maximum values */,
                EnvelopeRuleMin/** Keep minimum values */,
                EnvelopeRuleMax/** Keep maximum values */,
                EnvelopeRuleAbsMax/** Keep maximum absolute values */,
                EnvelopeRuleAbsMin/** Keep minimum absolute values */
            };

            /** Filtering rule for the spreadsheet post report */
            public: enum FilteringType
            {
                FilteringTypeNone/** Don't filter any values */,
                FilteringTypeStressXX/** Filter values based on Stress XX component */,
                FilteringTypeStressYY/** Filter values based on Stress YY component */,
                FilteringTypeStressZZ/** Filter values based on Stress ZZ component */,
                FilteringTypeStressXY/** Filter values based on Stress XY component */,
                FilteringTypeStressZX/** Filter values based on Stress ZX component */,
                FilteringTypeStressYZ/** Filter values based on Stress YZ component */,
                FilteringTypeStressMaxP/** Filter values based on the maximum principal stress */,
                FilteringTypeStressMinP/** Filter values based on the minimum principal stress */,
                FilteringTypeStressMaxS/** Filter values based on the maximum shear stress */,
                FilteringTypeStrainXX/** Filter values based on Strain XX component */,
                FilteringTypeStrainYY/** Filter values based on Strain YY component */,
                FilteringTypeStrainZZ/** Filter values based on Strain ZZ component */,
                FilteringTypeStrainXY/** Filter values based on Strain XY component */,
                FilteringTypeStrainZX/** Filter values based on Strain ZX component */,
                FilteringTypeStrainYZ/** Filter values based on Strain YZ component */,
                FilteringTypeStrainMaxP/** Filter values based on the maximum principal strain */,
                FilteringTypeStrainMinP/** Filter values based on the minimum principal strain */,
                FilteringTypeStrainMaxS/** Filter values based on the maximum shear strain */,
                FilteringTypePlyFailureIndex/** Filter values based on the ply failure index */,
                FilteringTypePlyStrengthRatio/** Filter values based on the ply strength ratio */,
                FilteringTypePlyMarginofSafety/** Filter values based on the ply margin of safety */,
                FilteringTypeBondFailureIndex/** Filter values based on the bonding failure index */,
                FilteringTypeBondStrengthRatio/** Filter values based on the bonding strength ratio */,
                FilteringTypeBondMarginofSafety/** Filter values based on the bonding margin of safety */
            };

            /** The type of threshold used to filter results. */
            public: enum ThreshType
            {
                ThreshTypeAboveTreshold/** Filter out results above the specified value */,
                ThreshTypeBelowTreshold/** Filter out results below the specified value */
            };

            /** Sorting rule for the spreadsheet post report */
            public: enum SortingType
            {
                SortingTypeElementId/** Sort results using the element id */,
                SortingTypePlyId/** Sort results using the ply id */,
                SortingTypeStressXX/** Sort results using the stress XX component */,
                SortingTypeStressYY/** Sort results using the stress YY component */,
                SortingTypeStressZZ/** Sort results using the stress ZZ component */,
                SortingTypeStressXY/** Sort results using the stress XY component */,
                SortingTypeStressZX/** Sort results using the stress ZX component */,
                SortingTypeStressYZ/** Sort results using the stress YZ component */,
                SortingTypeStressMaxP/** Sort results using the maximum principal stress */,
                SortingTypeStressMinP/** Sort results using the minimum principal stress */,
                SortingTypeStressMaxS/** Sort results using the maximum shear stress */,
                SortingTypeStrainXX/** Sort results using the strain XX component */,
                SortingTypeStrainYY/** Sort results using the strain XX component */,
                SortingTypeStrainZZ/** Sort results using the strain XX component */,
                SortingTypeStrainXY/** Sort results using the strain XX component */,
                SortingTypeStrainZX/** Sort results using the strain XX component */,
                SortingTypeStrainYZ/** Sort results using the strain XX component */,
                SortingTypeStrainMaxP/** Sort results using the maximum principal strain */,
                SortingTypeStrainMinP/** Sort results using the minimum principal strain */,
                SortingTypeStrainMaxS/** Sort results using the maximum shear strain */,
                SortingTypePlyFailureIndex/** Sort results based on the ply failure index */,
                SortingTypePlyStrengthRatio/** Sort results based on the ply strength ratio */,
                SortingTypePlyMarginofSafety/** Sort results based on the ply margin of safety */,
                SortingTypeBondFailureIndex/** Sort results based on the bonding failure index */,
                SortingTypeBondStrengthRatio/** Sort results based on the bonding strength ratio */,
                SortingTypeBondMarginofSafety/** Sort results based on the bonding margin of safety */
            };

            /** Sorting order : acending or descending */
            public: enum SortOrderType
            {
                SortOrderTypeAscending/** Sort ascending */,
                SortOrderTypeDescending/** Sort descending */
            };

            /** Solver input type */
            public: enum SolverInputType
            {
                SolverInputTypeShellStress/** Use the solver shell stress resultants */,
                SolverInputTypePlyStress/** Use the solver ply stresses */
            };

            /** Element-Nodal option */
            public: enum ElemNodalOptionType
            {
                ElemNodalOptionTypeElemental/** Average element-nodal results per element */,
                ElemNodalOptionTypeNodal/** Keep element-nodal results */
            };

            private: LaminateSpreadsheetReportBuilderImpl * m_laminatespreadsheetreportbuilder_impl;
            private: friend class  _LaminateSpreadsheetReportBuilderBuilder;
            protected: LaminateSpreadsheetReportBuilder();
            public: ~LaminateSpreadsheetReportBuilder();
            /**Returns  the name of the spreadsheet report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the spreadsheet report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the spreadsheet report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the solver input 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInputType SolverInput
            (
            );
            /**Sets  the solver input 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSolverInput
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInputType solverInput /** solverinput */ 
            );
            /**Returns  the solver shell stress resultant 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput instead.") bool SolverShellResultant
            (
            );
            /**Sets  the solver shell stress resultant 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput instead.") void SetSolverShellResultant
            (
                bool solverShellResultant /** solvershellresultant */ 
            );
            /**Returns  the state of the ply stress calculation at the bottom of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PlyBottom
            (
            );
            /**Sets  the state of the ply stress calculation at the bottom of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyBottom
            (
                bool plyBottom /** plybottom */ 
            );
            /**Returns  the state of the ply stress calculation at the middle of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PlyMiddle
            (
            );
            /**Sets  the state of the ply stress calculation at the middle of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyMiddle
            (
                bool plyMiddle /** plymiddle */ 
            );
            /**Returns  the state of the ply stress calculation at the top of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PlyTop
            (
            );
            /**Sets  the state of the ply stress calculation at the top of each ply 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyTop
            (
                bool plyTop /** plytop */ 
            );
            /**Returns  the solver ply stresses 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::CAE::LaminateSpreadsheetReportBuilder::SolverInput instead.") bool SolverPlyStress
            (
            );
            /**Sets  the solver ply stresses 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::CAE::LaminateSpreadsheetReportBuilder::SetSolverInput instead.") void SetSolverPlyStress
            (
                bool solverPlyStress /** solverplystress */ 
            );
            /**Returns  the shell stress resultant Fx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantFx
            (
            );
            /**Sets  the shell stress resultant Fx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantFx
            (
                bool shellResultantFx /** shellresultantfx */ 
            );
            /**Returns  the shell stress resultant Fy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantFy
            (
            );
            /**Sets  the shell stress resultant Fy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantFy
            (
                bool shellResultantFy /** shellresultantfy */ 
            );
            /**Returns  the shell stress resultant Fxy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantFxy
            (
            );
            /**Sets  the shell stress resultant Fxy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantFxy
            (
                bool shellResultantFxy /** shellresultantfxy */ 
            );
            /**Returns  the shell stress resultant Mx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantMx
            (
            );
            /**Sets  the shell stress resultant Mx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantMx
            (
                bool shellResultantMx /** shellresultantmx */ 
            );
            /**Returns  the shell stress resultant My component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantMy
            (
            );
            /**Sets  the shell stress resultant My component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantMy
            (
                bool shellResultantMy /** shellresultantmy */ 
            );
            /**Returns  the shell stress resultant Mxy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantMxy
            (
            );
            /**Sets  the shell stress resultant Mxy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantMxy
            (
                bool shellResultantMxy /** shellresultantmxy */ 
            );
            /**Returns  the shell stress resultant Qx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantQx
            (
            );
            /**Sets  the shell stress resultant Qx component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantQx
            (
                bool shellResultantQx /** shellresultantqx */ 
            );
            /**Returns  the shell stress resultant Qy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShellResultantQy
            (
            );
            /**Sets  the shell stress resultant Qy component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetShellResultantQy
            (
                bool shellResultantQy /** shellresultantqy */ 
            );
            /**Returns  the ply stresses output control 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressOutput
            (
            );
            /**Sets  the ply stresses output control 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressOutput
            (
                bool plyStressOutput /** plystressoutput */ 
            );
            /**Returns  the ply stresses summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule PlyStressRule
            (
            );
            /**Sets  the ply stresses summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressRule
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule plyStressRule /** plystressrule */ 
            );
            /**Returns  the ply strains output control 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStrainOutput
            (
            );
            /**Sets  the ply strains output control 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStrainOutput
            (
                bool plyStrainOutput /** plystrainoutput */ 
            );
            /**Returns  the ply strains summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule PlyStrainRule
            (
            );
            /**Sets  the ply strains summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStrainRule
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule plyStrainRule /** plystrainrule */ 
            );
            /**Returns  the ply stress and/or strain XX component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressXX
            (
            );
            /**Sets  the ply stress and/or strain XX component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressXX
            (
                bool plyStressXX /** plystressxx */ 
            );
            /**Returns  the ply stress and/or strain YY component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressYY
            (
            );
            /**Sets  the ply stress and/or strain YY component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressYY
            (
                bool plyStressYY /** plystressyy */ 
            );
            /**Returns  the ply stress and/or strain ZZ component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressZZ
            (
            );
            /**Sets  the ply stress and/or strain ZZ component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressZZ
            (
                bool plyStressZZ /** plystresszz */ 
            );
            /**Returns  the ply stress and/or strain XY component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressXY
            (
            );
            /**Sets  the ply stress and/or strain XY component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressXY
            (
                bool plyStressXY /** plystressxy */ 
            );
            /**Returns  the ply stress and/or strain YZ component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressYZ
            (
            );
            /**Sets  the ply stress and/or strain YZ component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressYZ
            (
                bool plyStressYZ /** plystressyz */ 
            );
            /**Returns  the ply stress and/or strain ZX component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressZX
            (
            );
            /**Sets  the ply stress and/or strain ZX component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressZX
            (
                bool plyStressZX /** plystresszx */ 
            );
            /**Returns  the ply maximum principal stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressMaxP
            (
            );
            /**Sets  the ply maximum principal stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressMaxP
            (
                bool plyStressMaxP /** plystressmaxp */ 
            );
            /**Returns  the ply minimum principal stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressMinP
            (
            );
            /**Sets  the ply minimum principal stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressMinP
            (
                bool plyStressMinP /** plystressminp */ 
            );
            /**Returns  the ply maximum shear stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool PlyStressMaxS
            (
            );
            /**Sets  the ply maximum shear stress and/or strain 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressMaxS
            (
                bool plyStressMaxS /** plystressmaxs */ 
            );
            /**Returns  the ply stresses and strains coordinate system 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::CoordinateSystemType PlyStressCoordSys
            (
            );
            /**Sets  the ply stresses and strains coordinate system 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetPlyStressCoordSys
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::CoordinateSystemType plyStressCoordSys /** plystresscoordsys */ 
            );
            /**Returns  the failure index 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FailureIndex
            (
            );
            /**Sets  the failure index 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetFailureIndex
            (
                bool failureIndex /** failureindex */ 
            );
            /**Returns  the failure index summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule FailureIndexRule
            (
            );
            /**Sets  the failure index summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetFailureIndexRule
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule failureIndexRule /** failureindexrule */ 
            );
            /**Returns  the strength ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool StrengthRatio
            (
            );
            /**Sets  the strength ratio 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetStrengthRatio
            (
                bool strengthRatio /** strengthratio */ 
            );
            /**Returns  the strength ratio summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule StrengthRatioRule
            (
            );
            /**Sets  the strength ratio summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetStrengthRatioRule
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule strengthRatioRule /** strengthratiorule */ 
            );
            /**Returns  the margin of safety 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SafetyMargin
            (
            );
            /**Sets  the margin of safety 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSafetyMargin
            (
                bool safetyMargin /** safetymargin */ 
            );
            /**Returns  the strength ratio summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule SafetyMarginRule
            (
            );
            /**Sets  the strength ratio summary table enveloping rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSafetyMarginRule
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::EnvelopeRule safetyMarginRule /** safetymarginrule */ 
            );
            /**Returns  the failure mode 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::FailureModeType FailureMode
            (
            );
            /**Sets  the failure mode 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetFailureMode
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::FailureModeType failureMode /** failuremode */ 
            );
            /**Returns  the safety factor 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SafetyFactor
            (
            );
            /**Sets  the safety factor 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSafetyFactor
            (
                double safetyFactor /** safetyfactor */ 
            );
            /**Returns  the detailed output display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DetailedOutput
            (
            );
            /**Sets  the detailed output display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetDetailedOutput
            (
                bool detailedOutput /** detailedoutput */ 
            );
            /**Returns  the filter type to use for detailed output 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::FilteringType FilterType
            (
            );
            /**Sets  the filter type to use for detailed output 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetFilterType
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::FilteringType filterType /** filtertype */ 
            );
            /**Returns  the filtering threshold type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::ThreshType ThresholdType
            (
            );
            /**Sets  the filtering threshold type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetThresholdType
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::ThreshType thresholdType /** thresholdtype */ 
            );
            /**Returns  the filtering threshold value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double ThresholdValue
            (
            );
            /**Sets  the filtering threshold value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetThresholdValue
            (
                double thresholdValue /** thresholdvalue */ 
            );
            /**Returns  the absolute value filtering option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AbsValueFilter
            (
            );
            /**Sets  the absolute value filtering option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetAbsValueFilter
            (
                bool absValueFilter /** absvaluefilter */ 
            );
            /**Returns  the sorting criteria 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::SortingType SortType
            (
            );
            /**Sets  the sorting criteria 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSortType
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::SortingType sortType /** sorttype */ 
            );
            /**Returns  the sorting order 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::SortOrderType SortOrder
            (
            );
            /**Sets  the sorting order 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetSortOrder
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::SortOrderType sortOrder /** sortorder */ 
            );
            /**Returns  the absolute value sorting option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AbsValueSort
            (
            );
            /**Sets  the absolute value sorting option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetAbsValueSort
            (
                bool absValueSort /** absvaluesort */ 
            );
            /**Returns  the element filter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateElementFilterBuilder * ElementFilter
            (
            );
            /**Returns  the ply filter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminatePlyFilterBuilder * PlyFilter
            (
            );
            /**Returns  the solver input 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateSpreadsheetReportBuilder::ElemNodalOptionType ElemNodalOption
            (
            );
            /**Sets  the solver input 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SetElemNodalOption
            (
                NXOpen::CAE::LaminateSpreadsheetReportBuilder::ElemNodalOptionType elemNodalOption /** elemnodaloption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
