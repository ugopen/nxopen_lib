#ifndef NXOpen_MOTION_DRIVERMOTIONSDATA_HXX_INCLUDED
#define NXOpen_MOTION_DRIVERMOTIONSDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_DriverMotionsData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_DriverOperation.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class DriverMotionsData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Motion
    {
        class DriverOperation;
    }
    namespace Motion
    {
        class _DriverMotionsDataBuilder;
        class DriverMotionsDataImpl;
        /** Represents a @link NXOpen::Motion::DriverMotionsData NXOpen::Motion::DriverMotionsData@endlink  
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  DriverMotionsData : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Driver Rotation type */
            public: enum DriverRotationType
            {
                DriverRotationTypeSuccessive/** Rotations are applied to the rotated link (as defined by previous rotations)*/,
                DriverRotationTypeFixed/** Rotations are applied to the original position of the link*/
            };

            /** Driver Data Type */
            public: enum DriverDataType
            {
                DriverDataTypeDisplacement/** Displacement */,
                DriverDataTypeVelocity/** Velocity */,
                DriverDataTypeAcceleration/** Acceleration */
            };

            private: DriverMotionsDataImpl * m_drivermotionsdata_impl;
            private: friend class  _DriverMotionsDataBuilder;
            protected: DriverMotionsData();
            public: ~DriverMotionsData();
            /**Returns  the driver data type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverMotionsData::DriverDataType DataType
            (
            );
            /**Sets  the driver data type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDataType
            (
                NXOpen::Motion::DriverMotionsData::DriverDataType dataType /** datatype */ 
            );
            /**Returns  the rotation around the x axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * RotationX
            (
            );
            /**Returns  the rotation around the y axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * RotationY
            (
            );
            /**Returns  the rotation around the z axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * RotationZ
            (
            );
            /**Returns  the type of the rotations applied on the link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverMotionsData::DriverRotationType RotationType
            (
            );
            /**Sets  the type of the rotations applied on the link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRotationType
            (
                NXOpen::Motion::DriverMotionsData::DriverRotationType rotationType /** rotationtype */ 
            );
            /**Returns  the translation on the x axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * TranslationX
            (
            );
            /**Returns  the translation on the y axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * TranslationY
            (
            );
            /**Returns  the translation on the z axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::DriverOperation * TranslationZ
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
