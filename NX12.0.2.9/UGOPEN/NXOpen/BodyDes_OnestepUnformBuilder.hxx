#ifndef NXOpen_BODYDES_ONESTEPUNFORMBUILDER_HXX_INCLUDED
#define NXOpen_BODYDES_ONESTEPUNFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BodyDes_OnestepUnformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_bodydes_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace BodyDes
    {
        class OnestepUnformBuilder;
    }
    class Body;
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    class SelectBodyList;
    class TaggedObject;
    namespace BodyDes
    {
        class _OnestepUnformBuilderBuilder;
        class OnestepUnformBuilderImpl;
        /**
            Represents a @link NXOpen::BodyDes::OnestepUnformBuilder NXOpen::BodyDes::OnestepUnformBuilder@endlink . This allows the creation of an Onestep Unform.
             <br> To create a new instance of this class, use @link NXOpen::BodyDes::OnestepUnformCollection::CreateOnestepBuilder  NXOpen::BodyDes::OnestepUnformCollection::CreateOnestepBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_BODYDESEXPORT  OnestepUnformBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The process types of onestep unform. */
            public: enum Process
            {
                ProcessEntireUnform/**entire */,
                ProcessIntermediateUnform/**intermediate */,
                ProcessAdvancedUnform/**spring back */,
                ProcessTrimLine/**trim line */
            };

            /** The object types of onestep unform. */
            public: enum Object
            {
                ObjectSolid/**solid */,
                ObjectFace/**face */
            };

            /** The constraints of onestep unform. */
            public: enum Constraint
            {
                ConstraintCurveToCurve/**Curve to Curve Constraint, used for intermediate unform only */,
                ConstraintPointToPoint/**Point to Point Constraint, used for complete unform only*/,
                ConstraintCurveAlongCurve/**Curve along Curve Constraint, used for complete unform only */
            };

            /** The part types of onestep unform. */
            public: enum Part
            {
                PartWithAddendum/**part with addendum */,
                PartWithoutAddendum/**part without addendum */
            };

            /** The surface types of onestep unform. */
            public: enum Surface
            {
                SurfaceInner/**Onestep solver will offset inner surface and enlarge it*/,
                SurfaceMiddle/**Onestep solver will not offset middle surface */,
                SurfaceOuter/**Onestep solver will offset outer surface and shrink it */
            };

            /** The 2-D mesh element type of onestep unform. */
            public: enum MeshElement
            {
                MeshElementTriangle/**Generate 2D triangle mesh element*/,
                MeshElementQuadrate/**Generate 2D quadrate mesh element*/
            };

            /** The solver convergency level of onestep unform. */
            public: enum Convergency
            {
                ConvergencyLow/**Onestep solver convergency level is low*/,
                ConvergencyMedium/**Onestep solver convergency level is medium*/,
                ConvergencyHigh/**Onestep solver convergency level is high*/
            };

            /** The mode of display springback. */
            public: enum DisplaySpringbackMode
            {
                DisplaySpringbackModeDisplacement/**Onestep display springback mode is displacement*/,
                DisplaySpringbackModeAlongx/**Onestep display springback mode is along X*/,
                DisplaySpringbackModeAlongy/**Onestep display springback mode is along Y*/,
                DisplaySpringbackModeAlongz/**Onestep display springback mode is along Z*/
            };

            /** The Onesetp unfold mode of onestep unform. */
            public: enum UnfoldMode
            {
                UnfoldModeComplete/** Onestep unfold mode is complete */,
                UnfoldModeIntermediate/** Onestep unfold mode is intermediate */,
                UnfoldModeTrimline/** Onestep unfold mode is trimline*/,
                UnfoldModeUnknown/** Onestep unfold mode is unknown */
            };

            private: OnestepUnformBuilderImpl * m_onestepunformbuilder_impl;
            private: friend class  _OnestepUnformBuilderBuilder;
            protected: OnestepUnformBuilder();
            public: ~OnestepUnformBuilder();
            /**Returns  the process type for onestep unform. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Process ProcessType
            (
            );
            /**Sets  the process type for onestep unform. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetProcessType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Process processType /** processtype */ 
            );
            /**Returns  the object type for onestep unform. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Object ObjectType
            (
            );
            /**Sets  the object type for onestep unform. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetObjectType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Object objectType /** objecttype */ 
            );
            /**Returns  the unfold solid regions which are a group of faces user chooses to unform. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * UnfoldSolidRegion
            (
            );
            /**Returns  the solid body to unform. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Body * UnfoldSolid
            (
            );
            /**Sets  the solid body to unform. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetUnfoldSolid
            (
                NXOpen::Body * unfoldSolidTag /** unfoldsolidtag */ 
            );
            /**Returns  the unform region which is a group of faces user chooses to unform. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * UnformRegion
            (
            );
            /**Returns  the unform section which includes a group of user selected points or curves. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * UnformSection
            (
            );
            /**Sets  the unform section which includes a group of user selected points or curves. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetUnformSection
            (
                NXOpen::Section * unformsection /** unformsection */ 
            );
            /**Returns  the target region which is a group of faces user chooses to unfrom to. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetRegion
            (
            );
            /**Returns  the constraint type for intermediate unform or complete unform. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Constraint ConstraintType
            (
            );
            /**Sets  the constraint type for intermediate unform or complete unform. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetConstraintType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Constraint constraintType /** constrainttype */ 
            );
            /**Returns  the first match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * MatchPointOne
            (
            );
            /**Sets  the first match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMatchPointOne
            (
                NXOpen::Point * matchPointOne /** matchpointone */ 
            );
            /**Returns  the second match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * MatchPointTwo
            (
            );
            /**Sets  the second match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMatchPointTwo
            (
                NXOpen::Point * matchPointTwo /** matchpointtwo */ 
            );
            /**Returns  the third match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * MatchPointThree
            (
            );
            /**Sets  the third match point for spring back calculation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMatchPointThree
            (
                NXOpen::Point * matchPointThree /** matchpointthree */ 
            );
            /**Returns  the part type for onestep unform. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Part PartType
            (
            );
            /**Sets  the part type for onestep unform. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetPartType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Part partType /** parttype */ 
            );
            /**Returns  the binder region which is a group of faces user chooses as holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BinderRegion
            (
            );
            /**Returns  the pressure on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Pressure
            (
            );
            /**Sets  the pressure on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetPressure
            (
                double pressure /** pressure */ 
            );
            /**Returns  the force on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Force
            (
            );
            /**Sets  the force on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetForce
            (
                double force /** force */ 
            );
            /**Returns  the force strength on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ForceStrength
            (
            );
            /**Sets  the force strength on blank holder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetForceStrength
            (
                double forceStrength /** forcestrength */ 
            );
            /**Returns  the boundary which is a group of edges user chooses to apply on equivalent force. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PartBoundary
            (
            );
            /**Returns  the draw direction used to define the normal of unform base plane. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction used to define the normal of unform base plane. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the surface type used to determine offset direction. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Surface SurfaceType
            (
            );
            /**Sets  the surface type used to determine offset direction. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSurfaceType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Surface surfaceType /** surfacetype */ 
            );
            /**Returns  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool InferThickness
            (
            );
            /**Sets  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetInferThickness
            (
                bool inferThickness /** inferthickness */ 
            );
            /**Returns  the thickness of sheet metal model. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Thickness
            (
            );
            /**Sets  the thickness of sheet metal model. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetThickness
            (
                double thickness /** thickness */ 
            );
            /** Create FEM 2-D meshes based on the unform region surfaces and the target region surfaces.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void Mesh
            (
            );
            /** Starts solver to calculate. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void Calculation
            (
            );
            /** Gets Thickness. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetThickness
            (
                std::vector<double> & thickness /** thickness */ 
            );
            /** Constructs solver to prepare the data. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void Constructor
            (
                int tOnestepSolverType /** tonestepsolvertype */ 
            );
            /** Destructs solver to release the data. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void Destructor
            (
            );
            /** Gets the solver calculation type.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: int GetSolverType
            (
            );
            /** Sets the unform draw direction. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetDrawDirection
            (
                int tdx /** tdx */ ,
                int tdy /** tdy */ ,
                int tdz /** tdz */ 
            );
            /** Sets the blank thickness. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetBlankThickness
            (
                double thickness /** thickness */ 
            );
            /** Gets the reference node ID.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: int GetRefNode
            (
            );
            /** Sets the unform surface type. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSurfaceType
            (
                int tOnestepSolverSurfaceType /** tonestepsolversurfacetype */ 
            );
            /** Gets the minimum node ID.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: int GetMinNodeID
            (
            );
            /** Sets the node IDs on the free edges (non-constrainted boundary edges). 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetNodeIDsOnFreeEdge
            (
                const std::vector<int> & index /** index */ ,
                const std::vector<int> & nids /** nids */ 
            );
            /** Gets the node IDs on the free edges (non-constrainted boundary edges). 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetNodeIdsOnFreeEdge
            (
                std::vector<int> & index /** index */ ,
                std::vector<int> & nodeIdentifications /** nodeidentifications */ 
            );
            /** Gets the mesh element data. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetMeshes
            (
                std::vector<double> & vnode /** vnode */ ,
                std::vector<int> & constraintId /** constraint id */ ,
                std::vector<int> & element /** element */ 
            );
            /** Gets the blank result nodes. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetBlankShape
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Gets the strain result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetStrain
            (
                std::vector<double> & strains /** strains */ 
            );
            /** Gets the stress result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetStress
            (
                std::vector<double> & stress /** stress */ 
            );
            /** Gets the springbrack result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetSpringbackShape
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Gets the top surface stress result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetTopSurfaceStress
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Gets the top surface strain result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetTopSurfaceStrain
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Gets the bottom surface stress result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetBottomSurfaceStress
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Gets the bottom surface strain result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetBottomSurfaceStrain
            (
                std::vector<double> & nodes /** nodes */ 
            );
            /** Checks whether the result is available or not.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void IsResultExist
            (
            );
            /** Sets the boundary condition information.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetBorderInfo
            (
                const std::vector<NXOpen::TaggedObject *> & edgeTags /** Objects to be checked*/,
                const std::vector<int> & nids /** nids */ ,
                const std::vector<int> & groupInfo /** groupinfo */ 
            );
            /** Updates the mesh elements to solver.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void UpdateInputMeshDataToSolver
            (
            );
            /** Gets the boundary loop IDs.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void GetBorderLoops
            (
                std::vector<int> & index /** index */ ,
                std::vector<int> & nodeIdentifications /** nodeidentifications */ 
            );
            /** Register the callback to solver.
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void OnestepUnformRegisterProjectCallback
            (
            );
            /** Displays profile result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void DisplayProfile
            (
                bool readResultFromFeature /** readresultfromfeature */ 
            );
            /** Creates unform sheet body result. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void CreateSheetBody
            (
                bool readResultFromFeature /** readresultfromfeature */ 
            );
            /** Sets thickness result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultThickness
            (
                const std::vector<double> & thickness /** thickness */ 
            );
            /** Sets strain result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultStrain
            (
                const std::vector<double> & strain /** strain */ 
            );
            /** Sets stress result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultStress
            (
                const std::vector<double> & stress /** stress */ 
            );
            /** Sets springback result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultSpringBack
            (
                const std::vector<double> & springback /** springback */ 
            );
            /** Sets blank shape result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultBlankShape
            (
                const std::vector<double> & blankshape /** blankshape */ 
            );
            /** Sets profile node ID result. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultNodesIdsOnProfile
            (
                const std::vector<int> & nids /** nids */ 
            );
            /** Sets total number of node on each profile. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultNodesNumEachProfileCurve
            (
                const std::vector<int> & indexs /** indexs */ 
            );
            /** Sets reference node ID. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetResultRefNodeId
            (
                int resultRefNodeId /** resultrefnodeid */ 
            );
            /** Set constraint information. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetConstraintInformation
            (
                bool noCommonEdges /** nocommonedges */ ,
                const std::vector<int> & revisedDirU /** reviseddiru */ ,
                const std::vector<int> & revisedDirT /** reviseddirt */ ,
                const std::vector<int> & index /** index */ ,
                const std::vector<int> & constraintType /** constrainttype */ ,
                const std::vector<int> & cacNumsUnform /** cacnumsunform */ ,
                const std::vector<int> & cacNumsTarget /** cacnumstarget */ ,
                const std::vector<NXOpen::TaggedObject *> & consCurveFromUnform /** Objects to be checked*/,
                const std::vector<NXOpen::TaggedObject *> & consCurveFromTarget /** Objects to be checked*/,
                const std::vector<NXOpen::Point *> & consPointFromUnform /** Objects to be checked*/,
                const std::vector<NXOpen::Point *> & consPointFromTarget /** Objects to be checked*/,
                const std::vector<double> & startPtOfConsCrvsUnform /** startptofconscrvsunform */ ,
                const std::vector<double> & startPtOfConsCrvsTarget /** startptofconscrvstarget */ 
            );
            /** Set advanced constraint information. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAdvancedConstraintInformation
            (
                int advancedConstraintPartType /** advancedconstraintparttype */ ,
                const std::vector<NXOpen::TaggedObject *> & blankHolderWithAddendumBinderRegion /** Objects to be checked*/,
                const std::vector<NXOpen::TaggedObject *> & blankHolderWithoutAddendumBoundaryOfPart /** Objects to be checked*/,
                double blankHolderWithAddendumPressure /** blankholderwithaddendumpressure */ ,
                double blankHolderWithAddendumForce /** blankholderwithaddendumforce */ ,
                double blankHolderWithoutAddendumTension /** blankholderwithoutaddendumtension */ ,
                double blankHolderWithoutAddendumForce /** blankholderwithoutaddendumforce */ ,
                double blankHolderWithoutAddendumForceStrength /** blankholderwithoutaddendumforcestrength */ ,
                const std::vector<NXOpen::TaggedObject *> & drawbeadTag /** Objects to be checked*/,
                const std::vector<double> & drawbeadTtension /** drawbeadttension */ ,
                const std::vector<double> & drawbeadNtension /** drawbeadntension */ ,
                const std::vector<double> & drawbeadForceStrength /** drawbeadforcestrength */ 
            );
            /**Returns  the material property elasticity(E) which enables a material to return to its original shape and dimension. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyE
            (
            );
            /**Sets  the material property elasticity(E) which enables a material to return to its original shape and dimension. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyE
            (
                double materialPropertyE /** materialpropertye */ 
            );
            /**Returns  the density of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyDensity
            (
            );
            /**Sets  the density of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyDensity
            (
                double materialPropertyDensity /** materialpropertydensity */ 
            );
            /**Returns  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyPoisson
            (
            );
            /**Sets  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyPoisson
            (
                double materialPropertyPoisson /** materialpropertypoisson */ 
            );
            /**Returns  the yield stress of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyYieldStress
            (
            );
            /**Sets  the yield stress of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyYieldStress
            (
                double materialPropertyYieldStress /** materialpropertyyieldstress */ 
            );
            /**Returns  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyN
            (
            );
            /**Sets  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyN
            (
                double materialPropertyN /** materialpropertyn */ 
            );
            /**Returns  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyInitialStrain
            (
            );
            /**Sets  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyInitialStrain
            (
                double materialPropertyInitialStrain /** materialpropertyinitialstrain */ 
            );
            /**Returns  the friction of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyF
            (
            );
            /**Sets  the friction of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyF
            (
                double materialPropertyF /** materialpropertyf */ 
            );
            /**Returns  the K(Strength Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyK
            (
            );
            /**Sets  the K(Strength Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyK
            (
                double materialPropertyK /** materialpropertyk */ 
            );
            /**Returns  the r0(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR0
            (
            );
            /**Sets  the r0(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyR0
            (
                double materialPropertyR0 /** materialpropertyr0 */ 
            );
            /**Returns  the r45(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR45
            (
            );
            /**Sets  the r45(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyR45
            (
                double materialPropertyR45 /** materialpropertyr45 */ 
            );
            /**Returns  the r90(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MaterialPropertyR90
            (
            );
            /**Sets  the r90(Anisotropy Coefficient) of material. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMaterialPropertyR90
            (
                double materialPropertyR90 /** materialpropertyr90 */ 
            );
            /**Returns  the 2-D mesh element type, either triangle or quadrate element.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::MeshElement MeshElementType
            (
            );
            /**Sets  the 2-D mesh element type, either triangle or quadrate element.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshElementType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::MeshElement meshElementType /** meshelementtype */ 
            );
            /**Returns  the option to indicate whether or not to unform the profile to the other side on the target body. 
                     This option is appliable only in case the following conditions are all satisfied: entire unform to separate target body, Curve to Curve constraint on inner edges.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSide
            (
            );
            /**Sets  the option to indicate whether or not to unform the profile to the other side on the target body. 
                     This option is appliable only in case the following conditions are all satisfied: entire unform to separate target body, Curve to Curve constraint on inner edges.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReverseSide
            (
                bool reverseSide /** reverseside */ 
            );
            /**Returns  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool InferElementSize
            (
            );
            /**Sets  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetInferElementSize
            (
                bool inforElementSize /** inforelementsize */ 
            );
            /**Returns  the 2-D element size for mesh. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshElementSize
            (
            );
            /**Sets  the 2-D element size for mesh. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshElementSize
            (
                double meshElementSize /** meshelementsize */ 
            );
            /**Returns  the option to split quadrate element to triangle element when creating meshes. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshSplitQuad
            (
            );
            /**Sets  the option to split quadrate element to triangle element when creating meshes. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshSplitQuad
            (
                bool meshSplitQuad /** meshsplitquad */ 
            );
            /**Returns  the maximum warp for meshing. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshMaxWarp
            (
            );
            /**Sets  the maximum warp for meshing. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshMaxWarp
            (
                double meshMaxWarp /** meshmaxwarp */ 
            );
            /**Returns  the maximum Jacobian for mesh elements. It is used to control the element shape and quality. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshMaxJacobian
            (
            );
            /**Sets  the maximum Jacobian for mesh elements. It is used to control the element shape and quality. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshMaxJacobian
            (
                double meshMaxJacobian /** meshmaxjacobian */ 
            );
            /**Returns  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshAttemptMapping
            (
            );
            /**Sets  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshAttemptMapping
            (
                bool meshAttemptMapping /** meshattemptmapping */ 
            );
            /**Returns  the variation of mesh element size. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int MeshSizeVariation
            (
            );
            /**Sets  the variation of mesh element size. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshSizeVariation
            (
                int meshSizeVariation /** meshsizevariation */ 
            );
            /**Returns  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MeshProcessFillet
            (
            );
            /**Sets  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshProcessFillet
            (
                bool meshProcessFillet /** meshprocessfillet */ 
            );
            /**Returns  the value of small feature for mesh setting
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshSmallFeature
            (
            );
            /**Sets  the value of small feature for mesh setting
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetMeshSmallFeature
            (
                double meshSmallFeature /** meshsmallfeature */ 
            );
            /**Returns  the convergency level of onestep solver. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Convergency SolverConvergencyLevel
            (
            );
            /**Sets  the convergency level of onestep solver. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverConvergencyLevel
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Convergency solverConvergencyLevel /** solverconvergencylevel */ 
            );
            /**Returns the maximum number of iteration steps in onestep solver. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int SolverMaxIterationSteps
            (
            );
            /**Sets the maximum number of iteration steps in onestep solver. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverMaxIterationSteps
            (
                int solverMaxIterationSteps /** solvermaxiterationsteps */ 
            );
            /**Returns  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SolverSaveAnalysisResultsIntoFeature
            (
            );
            /**Sets  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverSaveAnalysisResultsIntoFeature
            (
                bool solverSaveAnalysisResultsIntoFeature /** solversaveanalysisresultsintofeature */ 
            );
            /**Returns  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SolverJoinOutputCurves
            (
            );
            /**Sets  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverJoinOutputCurves
            (
                bool solverJoinOutputCurves /** solverjoinoutputcurves */ 
            );
            /**Returns  the option to do springback calculation in onestep solver.
                    If it is true, the onestep solver will do springback calculation. If it is false, the solver will not do springback calculation.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolverDoSpringbackCalculation
            (
            );
            /**Sets  the option to do springback calculation in onestep solver.
                    If it is true, the onestep solver will do springback calculation. If it is false, the solver will not do springback calculation.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverDoSpringbackCalculation
            (
                bool solverDoSpringbackCalculation /** solverdospringbackcalculation */ 
            );
            /**Returns  the option for springback display. 
                    If it is true, it will display springback in absolution 3D distance, or projecte in x/y/z directions.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::DisplaySpringbackMode SolverDisplaySpringbackMode
            (
            );
            /**Sets  the option for springback display. 
                    If it is true, it will display springback in absolution 3D distance, or projecte in x/y/z directions.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetSolverDisplaySpringbackMode
            (
                NXOpen::BodyDes::OnestepUnformBuilder::DisplaySpringbackMode solverDisplaySpringbackMode /** solverdisplayspringbackmode */ 
            );
            /**Returns  the option to display thickness information in report.
                    If it is true, the thickness information will be displayed in report. If it is false, the report will not display thickness information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplayThickness
            (
            );
            /**Sets  the option to display thickness information in report.
                    If it is true, the thickness information will be displayed in report. If it is false, the report will not display thickness information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplayThickness
            (
                bool reportDisplayThickness /** reportdisplaythickness */ 
            );
            /**Returns  the option to display stress in report.
                    If it is true, the stress information will be displayed in report. If it is false, the report will not display stress information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplayStress
            (
            );
            /**Sets  the option to display stress in report.
                    If it is true, the stress information will be displayed in report. If it is false, the report will not display stress information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplayStress
            (
                bool reportDisplayStress /** reportdisplaystress */ 
            );
            /**Returns  the option to display strain in report.
                    If it is true, the report will display strain information. If it is false, the report will not display strain information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplayStrain
            (
            );
            /**Sets  the option to display strain in report.
                    If it is true, the report will display strain information. If it is false, the report will not display strain information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplayStrain
            (
                bool reportDisplayStrain /** reportdisplaystrain */ 
            );
            /**Returns  the option to display springback result in report.
                    If it is true, the report will display springback result. If it is false, the springback will not be displayed.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplaySpringback
            (
            );
            /**Sets  the option to display springback result in report.
                    If it is true, the report will display springback result. If it is false, the springback will not be displayed.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplaySpringback
            (
                bool reportDisplaySpringback /** reportdisplayspringback */ 
            );
            /**Returns  the option to display result flatten shape in report.
                    If it is true, the report will display the flatten shape result. If it is false, the flatten shape will not be displayed in report.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplayFlattenShape
            (
            );
            /**Sets  the option to display result flatten shape in report.
                    If it is true, the report will display the flatten shape result. If it is false, the flatten shape will not be displayed in report.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplayFlattenShape
            (
                bool reportDisplayFlattenShape /** reportdisplayflattenshape */ 
            );
            /**Returns  the option to control view while creating screen image in report.
                    If it is true, customer can control the view when capturing the screen image. If it is false, default view will be used in report.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportDisplayViewControl
            (
            );
            /**Sets  the option to control view while creating screen image in report.
                    If it is true, customer can control the view when capturing the screen image. If it is false, default view will be used in report.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetReportDisplayViewControl
            (
                bool reportDisplayViewControl /** reportdisplayviewcontrol */ 
            );
            /**Returns  the onestep unfold mode. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::UnfoldMode UnfoldModeType
            (
            );
            /**Sets  the onestep unfold mode. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetUnfoldModeType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::UnfoldMode unfoldModeType /** unfoldmodetype */ 
            );
            /**Returns  the tolerance to find contact points. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ContactPointsTolerance
            (
            );
            /**Sets  the tolerance to find contact points. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetContactPointsTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** Gets the element node IDs where the product face meshes and addendum faces mesh are contacting within the given tolerance.  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetContactNodeIds
            (
            );
            /**Returns  the point where the thickness direction is defined for trimline. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TrimlinePoint
            (
            );
            /**Sets  the point where the thickness direction is defined for trimline. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetTrimlinePoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the thickness direction used to define the direction of product thickness at the specific point in trimline.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ThicknessDirection
            (
            );
            /**Sets  the thickness direction used to define the direction of product thickness at the specific point in trimline.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void SetThicknessDirection
            (
                NXOpen::Direction * thicknessDirection /** thicknessdirection */ 
            );
            /** Sets the offset faces when the object type is body.  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: bool SetFacesOnOffsetSheet
            (
                NXOpen::Body * unfoldBody /** unfoldbody */ 
            );
            /** Deletes the offset body when the object type is body. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR nx_general_packaging ("NX General Packaging") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
            public: void DeleteOffsetSheetBody
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
