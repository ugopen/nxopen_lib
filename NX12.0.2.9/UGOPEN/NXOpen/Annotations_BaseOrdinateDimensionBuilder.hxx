#ifndef NXOpen_ANNOTATIONS_BASEORDINATEDIMENSIONBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASEORDINATEDIMENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseOrdinateDimensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AppendedTextBuilder.hxx>
#include <NXOpen/Annotations_OrdinateBaselineBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseOrdinateDimensionBuilder;
    }
    namespace Annotations
    {
        class AppendedTextBuilder;
    }
    namespace Annotations
    {
        class OrdinateBaselineBuilder;
    }
    namespace Annotations
    {
        class OrdinateMargin;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _BaseOrdinateDimensionBuilderBuilder;
        class BaseOrdinateDimensionBuilderImpl;
        /** Represents a @link NXOpen::Annotations::OrdinateDimension NXOpen::Annotations::OrdinateDimension@endlink  builder  <br> This is an abstract class and cannot be instantiated.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseOrdinateDimensionBuilder : public NXOpen::Builder
        {
            /** the type of dimension being created */
            public: enum Types
            {
                TypesSingleDimension/** singular dimension */,
                TypesMultipleDimension/** group or set of dimensions */
            };

            private: BaseOrdinateDimensionBuilderImpl * m_baseordinatedimensionbuilder_impl;
            private: friend class  _BaseOrdinateDimensionBuilderBuilder;
            protected: BaseOrdinateDimensionBuilder();
            public: ~BaseOrdinateDimensionBuilder();
            /**Returns  the ordinate origin 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * OrdinateOrigin
            (
            );
            /**Returns  the second associativities 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * SecondAssociativities
            (
            );
            /**Returns  the auto ordinate associativities 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * AutoAssociativities
            (
            );
            /**Returns  the allow duplicates 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowDuplicates
            (
            );
            /**Sets  the allow duplicates 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAllowDuplicates
            (
                bool allowDuplicates /** allowduplicates */ 
            );
            /**Returns  the resposition existing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool RespositionExisting
            (
            );
            /**Sets  the resposition existing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRespositionExisting
            (
                bool respositionExisting /** respositionexisting */ 
            );
            /**Returns  the baseline 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateBaselineBuilder * Baseline
            (
            );
            /**Returns  the origin 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the style 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the inherit 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * Inherit
            (
            );
            /**Returns  the type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseOrdinateDimensionBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Annotations::BaseOrdinateDimensionBuilder::Types type /** type */ 
            );
            /**Returns  the horizontal inferred margin location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d HorizontalInferredMarginLocation
            (
            );
            /**Sets  the horizontal inferred margin location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalInferredMarginLocation
            (
                const NXOpen::Point3d & location /** location */ 
            );
            /**Returns  the vertical inferred margin location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d VerticalInferredMarginLocation
            (
            );
            /**Sets  the vertical inferred margin location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalInferredMarginLocation
            (
                const NXOpen::Point3d & location /** location */ 
            );
            /**Returns  the active horizontal margin(defined or inferred) where horizontal dimension will be automatically placed.
                        A margin can be created using @link NXOpen::Annotations::OrdinateMarginCollection NXOpen::Annotations::OrdinateMarginCollection@endlink .
                        If NULL, must set a HorizontalInferredMarginLocation which will be used to place dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateMargin * ActiveHorizontalMargin
            (
            );
            /**Sets  the active horizontal margin(defined or inferred) where horizontal dimension will be automatically placed.
                        A margin can be created using @link NXOpen::Annotations::OrdinateMarginCollection NXOpen::Annotations::OrdinateMarginCollection@endlink .
                        If NULL, must set a HorizontalInferredMarginLocation which will be used to place dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetActiveHorizontalMargin
            (
                NXOpen::Annotations::OrdinateMargin * margin /** margin */ 
            );
            /**Returns  the active vertical margin(defined or inferred) where horizontal dimension will be automatically placed.
                         A margin can be created using @link NXOpen::Annotations::OrdinateMarginCollection NXOpen::Annotations::OrdinateMarginCollection@endlink .
                        If NULL, must set a VerticalInferredMarginLocation which will be used to place dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OrdinateMargin * ActiveVerticalMargin
            (
            );
            /**Sets  the active vertical margin(defined or inferred) where horizontal dimension will be automatically placed.
                         A margin can be created using @link NXOpen::Annotations::OrdinateMarginCollection NXOpen::Annotations::OrdinateMarginCollection@endlink .
                        If NULL, must set a VerticalInferredMarginLocation which will be used to place dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetActiveVerticalMargin
            (
                NXOpen::Annotations::OrdinateMargin * margin /** margin */ 
            );
            /**Returns  the appended text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AppendedTextBuilder * AppendedText
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
