#ifndef NXOpen_CAE_CONNECTIONS_COMPOSER_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_COMPOSER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Composer.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_ComposerData.hxx>
#include <NXOpen/CAE_Connections_ConnectionDBData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class Composer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ComposerData;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ConnectionDBData;
        }
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    class CoordinateSystem;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _ComposerBuilder;
            class ComposerImpl;
            /** Composer. Use this interface to set/get properties and parameters of the composer.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Composer : public NXOpen::TaggedObject
            {
                private: ComposerImpl * m_composer_impl;
                private: friend class  _ComposerBuilder;
                protected: Composer();
                public: ~Composer();
                /** ReadAssemblyFromExcel  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void ReadAssemblyDefinition
                (
                    const NXString & filePath /** filepath */ 
                );
                /** ReadAssemblyFromExcel  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void ReadAssemblyDefinition
                (
                    const char * filePath /** filepath */ 
                );
                /** WriteAssemblyFromExcel  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void WriteAssemblyDefinition
                (
                    const NXString & filePath /** filepath */ 
                );
                /** WriteAssemblyFromExcel  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void WriteAssemblyDefinition
                (
                    const char * filePath /** filepath */ 
                );
                /** ReadConnectionsDB  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void ReadConnectionsDB
                (
                    const NXString & filePath /** filepath */ 
                );
                /** ReadConnectionsDB  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void ReadConnectionsDB
                (
                    const char * filePath /** filepath */ 
                );
                /** GetMeshPartFromPID  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void GetMeshPartFromPID
                (
                    NXOpen::TaggedObject * pid /** pid */ ,
                    std::vector<NXOpen::TaggedObject *> & meshParts /** meshparts */ 
                );
                /** GetAxisFromAlias  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void GetAxisFromAlias
                (
                    const NXString & axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CoordinateSystem *> & axes /** axes */ 
                );
                /** GetAxisFromAlias  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void GetAxisFromAlias
                (
                    const char * axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CoordinateSystem *> & axes /** axes */ 
                );
                /** GetGroupFromAlias  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void GetGroupFromAlias
                (
                    const NXString & axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & groups /** groups */ 
                );
                /** GetGroupFromAlias  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void GetGroupFromAlias
                (
                    const char * axisAlias /** axisalias */ ,
                    std::vector<NXOpen::CAE::SelectionRecipe *> & groups /** groups */ 
                );
                /** CheckAssemblyConnections   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: std::vector<NXString> CheckAssemblyConnections
                (
                );
                /** CheckAssemblyDocumentConnections   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: std::vector<NXString> CheckAssemblyDocumentConnections
                (
                );
                /**Returns  the composer data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComposerData * ComposerData
                (
                );
                /**Sets  the composer data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetComposerData
                (
                    NXOpen::CAE::Connections::ComposerData * composerData /** composerdata */ 
                );
                /**Returns  the connection db data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ConnectionDBData * ConnectionDBData
                (
                );
                /**Sets  the connection db data  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetConnectionDBData
                (
                    NXOpen::CAE::Connections::ConnectionDBData * connectionDBData /** connectiondbdata */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
