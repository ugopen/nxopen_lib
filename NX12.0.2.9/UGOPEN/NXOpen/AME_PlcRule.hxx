#ifndef NXOpen_AME_PLCRULE_HXX_INCLUDED
#define NXOpen_AME_PLCRULE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcRule.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseNode.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcRule;
    }
    namespace AME
    {
        class AMEBaseNode;
    }
    namespace AME
    {
        class _PlcRuleBuilder;
        class PlcRuleImpl;
        /** PlcRule Journaling class  <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcRule : public NXOpen::AME::AMEBaseNode
        {
            /** replace or insert rule Type. Do not edit this enum! */
            public: enum Type
            {
                TypeSymbolicReference/** symbolic reference */ ,
                TypeConstantValue/** constant value */ ,
                TypeVariable/** variable */ ,
                TypeLocalValue/** local value */ ,
                TypeLocalVariable/** local variable */ ,
                TypeConstantText/** constant text */ ,
                TypeCall/** call */ ,
                TypeSystemGlobalCall/** system global call */ ,
                TypeSystemLocalCall/** system local call */ ,
                TypeSystemFunctionCall/** system function call */ ,
                TypeUserLocalCall/** user local call */ ,
                TypeMethod/** method */ ,
                TypePlaceholderVariable/** placeholder variable */ ,
                TypePlaceholderSymbolicReference/** placeholder symbolic reference */ ,
                TypePlaceholderConstantValue/** placeholder constant value */ ,
                TypeOperatorAnd/** operator and */ ,
                TypeOperatorOr/** operator or */ ,
                TypeNone/** none */ 
            };

            /** type which discribed the context object */
            public: enum RefObjectType
            {
                RefObjectTypeStatement/** statement */ ,
                RefObjectTypeCompileunit/** compileunit */ ,
                RefObjectTypeOperand/** operand */ ,
                RefObjectTypeNone/** none */ 
            };

            /** type which defined wich object has to be replaced */
            public: enum ReplacementType
            {
                ReplacementTypeReplace/** replace */ ,
                ReplacementTypeInsert/** insert */ ,
                ReplacementTypeNone/** none */ 
            };

            private: PlcRuleImpl * m_plcrule_impl;
            private: friend class  _PlcRuleBuilder;
            protected: PlcRule();
            public: ~PlcRule();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
