#ifndef NXOpen_AME_AMEMANAGER_HXX_INCLUDED
#define NXOpen_AME_AMEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AMEManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseNode.hxx>
#include <NXOpen/AME_AMEEngObject.hxx>
#include <NXOpen/AME_AMEEngineeringObjectLabel.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_AMEGroup.hxx>
#include <NXOpen/AME_AMEGroupFolder.hxx>
#include <NXOpen/AME_AMEQuery.hxx>
#include <NXOpen/AME_AccessorEvaluatorBuilder.hxx>
#include <NXOpen/AME_AncestorEvaluatorBuilder.hxx>
#include <NXOpen/AME_ApplicationBuilder.hxx>
#include <NXOpen/AME_AspectNavigatorPreferencesBuilder.hxx>
#include <NXOpen/AME_AspectNode.hxx>
#include <NXOpen/AME_AspectPrefixBuilder.hxx>
#include <NXOpen/AME_AssignAspectBuilder.hxx>
#include <NXOpen/AME_AssignSubnetBuilder.hxx>
#include <NXOpen/AME_AssignTemplateToProductBuilder.hxx>
#include <NXOpen/AME_AssignTypeBuilder.hxx>
#include <NXOpen/AME_BreakTemplateBuilder.hxx>
#include <NXOpen/AME_BulkConnectionBuilder.hxx>
#include <NXOpen/AME_BulkEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_CabinetDesignBuilder.hxx>
#include <NXOpen/AME_CallMethodRuleBuilder.hxx>
#include <NXOpen/AME_ChildrenEvaluatorBuilder.hxx>
#include <NXOpen/AME_ConfigureResultTableBuilder.hxx>
#include <NXOpen/AME_ConnectToLibraryItemBuilder.hxx>
#include <NXOpen/AME_ConnectedObjectsEvaluatorBuilder.hxx>
#include <NXOpen/AME_CreateEngObjectDefinitionBuilder.hxx>
#include <NXOpen/AME_CreateMethodBuilder.hxx>
#include <NXOpen/AME_CreatePmiNoteBuilder.hxx>
#include <NXOpen/AME_CreateProductBuilder.hxx>
#include <NXOpen/AME_CreateTemplateBuilder.hxx>
#include <NXOpen/AME_CreateTemplateDefinitionBuilder.hxx>
#include <NXOpen/AME_DefineAspectBuilder.hxx>
#include <NXOpen/AME_DocumentStructureBuilder.hxx>
#include <NXOpen/AME_EditAnnotationBuilder.hxx>
#include <NXOpen/AME_EditClauseBuilder.hxx>
#include <NXOpen/AME_EditEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_EditOrderBuilder.hxx>
#include <NXOpen/AME_EditQueryBuilder.hxx>
#include <NXOpen/AME_ElectricalAnnotationSettingsBuilder.hxx>
#include <NXOpen/AME_ElectricalConnectionSettingsBuilder.hxx>
#include <NXOpen/AME_EngineeringObjectBuilder.hxx>
#include <NXOpen/AME_EngineeringObjectDefinitionLabelBuilder.hxx>
#include <NXOpen/AME_EplanImportProjectTemplateBuilder.hxx>
#include <NXOpen/AME_EplanProjectGenerationBuilder.hxx>
#include <NXOpen/AME_EplanProjectTemplateAndStructureBuilder.hxx>
#include <NXOpen/AME_EplanSettingsBuilder.hxx>
#include <NXOpen/AME_EplanStructureIdentifierOrderBuilder.hxx>
#include <NXOpen/AME_EvaluatorCopyToBuilder.hxx>
#include <NXOpen/AME_ExportEClassMappingBuilder.hxx>
#include <NXOpen/AME_ExpressionEvaluator.hxx>
#include <NXOpen/AME_ExtractAttributeBuilder.hxx>
#include <NXOpen/AME_FindByConditionEvaluatorBuilder.hxx>
#include <NXOpen/AME_FormSheetBuilder.hxx>
#include <NXOpen/AME_FormSheetObject.hxx>
#include <NXOpen/AME_FormSheetSettingsBuilder.hxx>
#include <NXOpen/AME_FragmentBuilder.hxx>
#include <NXOpen/AME_FunctionCallInstanceBuilder.hxx>
#include <NXOpen/AME_GeneralAnnotationSettingsBuilder.hxx>
#include <NXOpen/AME_GeneralConnectionSettingsBuilder.hxx>
#include <NXOpen/AME_GenerateReportsBuilder.hxx>
#include <NXOpen/AME_GlobalSelectionBuilder.hxx>
#include <NXOpen/AME_GroupBuilder.hxx>
#include <NXOpen/AME_ImportEClassMappingBuilder.hxx>
#include <NXOpen/AME_ImportEClassProductBuilder.hxx>
#include <NXOpen/AME_ImportEClassSchemaBuilder.hxx>
#include <NXOpen/AME_ImportEplanPageMacroBuilder.hxx>
#include <NXOpen/AME_ImportGlobalMappingBuilder.hxx>
#include <NXOpen/AME_ImportHWXmlBuilder.hxx>
#include <NXOpen/AME_InsertObjectBuilder.hxx>
#include <NXOpen/AME_InstanceDataBlockBuilder.hxx>
#include <NXOpen/AME_InstantiateTemplateBulkBuilder.hxx>
#include <NXOpen/AME_InterfaceMemberPort.hxx>
#include <NXOpen/AME_InterruptionPointBuilder.hxx>
#include <NXOpen/AME_LayoutDefinitionBuilder.hxx>
#include <NXOpen/AME_LineDesignerMappingBuilder.hxx>
#include <NXOpen/AME_LinkSymbolToDeviceTypeBuilder.hxx>
#include <NXOpen/AME_LoadLineDesignerBuilder.hxx>
#include <NXOpen/AME_Manage2dSymbolsBuilder.hxx>
#include <NXOpen/AME_Manage3DModelsBuilder.hxx>
#include <NXOpen/AME_ManageEclassMappingBuilder.hxx>
#include <NXOpen/AME_ManageObjectTypeBuilder.hxx>
#include <NXOpen/AME_MapToExistingObjectBuilder.hxx>
#include <NXOpen/AME_MountingInterfaceBuilder.hxx>
#include <NXOpen/AME_MultiValueObjectsPort.hxx>
#include <NXOpen/AME_NamingRuleSettingsBuilder.hxx>
#include <NXOpen/AME_ObjectEvaluatorBuilder.hxx>
#include <NXOpen/AME_OperandRuleBuilder.hxx>
#include <NXOpen/AME_OperatorRuleBuilder.hxx>
#include <NXOpen/AME_OpticalAnnotationSettingsBuilder.hxx>
#include <NXOpen/AME_OpticalConnectionSettingsBuilder.hxx>
#include <NXOpen/AME_OrderAspectsBuilder.hxx>
#include <NXOpen/AME_PageBuilder.hxx>
#include <NXOpen/AME_PageNamingBuilder.hxx>
#include <NXOpen/AME_ParameterRuleBuilder.hxx>
#include <NXOpen/AME_ParentEvaluatorBuilder.hxx>
#include <NXOpen/AME_PlaceAutomationBuilder.hxx>
#include <NXOpen/AME_PlcBlock.hxx>
#include <NXOpen/AME_PlcCodePosition.hxx>
#include <NXOpen/AME_PlcInterfaceVariableBuilder.hxx>
#include <NXOpen/AME_PlcMemoryAreaBuilder.hxx>
#include <NXOpen/AME_PlcMethod.hxx>
#include <NXOpen/AME_PlcMethodBuilder.hxx>
#include <NXOpen/AME_PlcRule.hxx>
#include <NXOpen/AME_PlcSymbolBuilder.hxx>
#include <NXOpen/AME_PlcSymbolsEvaluatorBuilder.hxx>
#include <NXOpen/AME_PlcVendorSymbolBuilder.hxx>
#include <NXOpen/AME_PortBuilder.hxx>
#include <NXOpen/AME_PortConnectionBuilder.hxx>
#include <NXOpen/AME_PortEvaluatorBuilder.hxx>
#include <NXOpen/AME_PortsManagerBuilder.hxx>
#include <NXOpen/AME_ProductDefinition.hxx>
#include <NXOpen/AME_ProductMatchingRulesBuilder.hxx>
#include <NXOpen/AME_ProductSelectionBuilder.hxx>
#include <NXOpen/AME_ProductSelectionDetailsBuilder.hxx>
#include <NXOpen/AME_ProjectEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_PropertyEvaluatorBuilder.hxx>
#include <NXOpen/AME_QueryBuilder.hxx>
#include <NXOpen/AME_QueryClause.hxx>
#include <NXOpen/AME_QueryFolder.hxx>
#include <NXOpen/AME_ReportTemplateBuilder.hxx>
#include <NXOpen/AME_ReportsSettingsBuilder.hxx>
#include <NXOpen/AME_SaveToLibraryBuilder.hxx>
#include <NXOpen/AME_SchematicSymbolConfigurationBuilder.hxx>
#include <NXOpen/AME_SelectAndHighlightBuilder.hxx>
#include <NXOpen/AME_ShowHideObjectsBuilder.hxx>
#include <NXOpen/AME_Snap3DModelsBuilder.hxx>
#include <NXOpen/AME_SubnetBuilder.hxx>
#include <NXOpen/AME_SymbolAnnotationBuilder.hxx>
#include <NXOpen/AME_SymbolAnnotationSettingsBuilder.hxx>
#include <NXOpen/AME_SymbolAuthoringBuilder.hxx>
#include <NXOpen/AME_TCSavedQueriesBuilder.hxx>
#include <NXOpen/AME_TeeJunctionBuilder.hxx>
#include <NXOpen/AME_TiaPortalProjectSettingsBuilder.hxx>
#include <NXOpen/AME_TiaProjectItemBuilder.hxx>
#include <NXOpen/AME_TransferFileDataBuilder.hxx>
#include <NXOpen/AME_TypeMappingListBuilder.hxx>
#include <NXOpen/AME_UnloadLineDesignerBuilder.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AMEManager;
    }
    class Session;
    namespace AME
    {
        class AMEBaseNode;
    }
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class AMEEngineeringObjectLabel;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace AME
    {
        class AMEGroup;
    }
    namespace AME
    {
        class AMEGroupFolder;
    }
    namespace AME
    {
        class AMEQuery;
    }
    namespace AME
    {
        class AccessorEvaluatorBuilder;
    }
    namespace AME
    {
        class AncestorEvaluatorBuilder;
    }
    namespace AME
    {
        class ApplicationBuilder;
    }
    namespace AME
    {
        class AspectNavigatorPreferencesBuilder;
    }
    namespace AME
    {
        class AspectNode;
    }
    namespace AME
    {
        class AspectPrefixBuilder;
    }
    namespace AME
    {
        class AssignAspectBuilder;
    }
    namespace AME
    {
        class AssignSubnetBuilder;
    }
    namespace AME
    {
        class AssignTemplateToProductBuilder;
    }
    namespace AME
    {
        class AssignTypeBuilder;
    }
    namespace AME
    {
        class BreakTemplateBuilder;
    }
    namespace AME
    {
        class BulkConnectionBuilder;
    }
    namespace AME
    {
        class BulkEngineeringObjectBuilder;
    }
    namespace AME
    {
        class CabinetDesignBuilder;
    }
    namespace AME
    {
        class CallMethodRuleBuilder;
    }
    namespace AME
    {
        class ChildrenEvaluatorBuilder;
    }
    namespace AME
    {
        class ConfigureResultTableBuilder;
    }
    namespace AME
    {
        class ConnectToLibraryItemBuilder;
    }
    namespace AME
    {
        class ConnectedObjectsEvaluatorBuilder;
    }
    namespace AME
    {
        class CreateEngObjectDefinitionBuilder;
    }
    namespace AME
    {
        class CreateMethodBuilder;
    }
    namespace AME
    {
        class CreatePmiNoteBuilder;
    }
    namespace AME
    {
        class CreateProductBuilder;
    }
    namespace AME
    {
        class CreateTemplateBuilder;
    }
    namespace AME
    {
        class CreateTemplateDefinitionBuilder;
    }
    namespace AME
    {
        class DefineAspectBuilder;
    }
    namespace AME
    {
        class DocumentStructureBuilder;
    }
    namespace AME
    {
        class EditAnnotationBuilder;
    }
    namespace AME
    {
        class EditClauseBuilder;
    }
    namespace AME
    {
        class EditEngineeringObjectBuilder;
    }
    namespace AME
    {
        class EditOrderBuilder;
    }
    namespace AME
    {
        class EditQueryBuilder;
    }
    namespace AME
    {
        class ElectricalAnnotationSettingsBuilder;
    }
    namespace AME
    {
        class ElectricalConnectionSettingsBuilder;
    }
    namespace AME
    {
        class EngineeringObjectBuilder;
    }
    namespace AME
    {
        class EngineeringObjectDefinitionLabelBuilder;
    }
    namespace AME
    {
        class EplanImportProjectTemplateBuilder;
    }
    namespace AME
    {
        class EplanProjectGenerationBuilder;
    }
    namespace AME
    {
        class EplanProjectTemplateAndStructureBuilder;
    }
    namespace AME
    {
        class EplanSettingsBuilder;
    }
    namespace AME
    {
        class EplanStructureIdentifierOrderBuilder;
    }
    namespace AME
    {
        class EvaluatorCopyToBuilder;
    }
    namespace AME
    {
        class ExportEClassMappingBuilder;
    }
    namespace AME
    {
        class ExpressionEvaluator;
    }
    namespace AME
    {
        class ExtractAttributeBuilder;
    }
    namespace AME
    {
        class FindByConditionEvaluatorBuilder;
    }
    namespace AME
    {
        class FormSheetBuilder;
    }
    namespace AME
    {
        class FormSheetObject;
    }
    namespace AME
    {
        class FormSheetSettingsBuilder;
    }
    namespace AME
    {
        class FragmentBuilder;
    }
    namespace AME
    {
        class FunctionCallInstanceBuilder;
    }
    namespace AME
    {
        class GeneralAnnotationSettingsBuilder;
    }
    namespace AME
    {
        class GeneralConnectionSettingsBuilder;
    }
    namespace AME
    {
        class GenerateReportsBuilder;
    }
    namespace AME
    {
        class GlobalSelectionBuilder;
    }
    namespace AME
    {
        class GroupBuilder;
    }
    namespace AME
    {
        class IEngObject;
    }
    namespace AME
    {
        class INodeObject;
    }
    namespace AME
    {
        class ImportEClassMappingBuilder;
    }
    namespace AME
    {
        class ImportEClassProductBuilder;
    }
    namespace AME
    {
        class ImportEClassSchemaBuilder;
    }
    namespace AME
    {
        class ImportEplanPageMacroBuilder;
    }
    namespace AME
    {
        class ImportGlobalMappingBuilder;
    }
    namespace AME
    {
        class ImportHWXmlBuilder;
    }
    namespace AME
    {
        class ImportNode;
    }
    namespace AME
    {
        class InsertObjectBuilder;
    }
    namespace AME
    {
        class InstanceDataBlockBuilder;
    }
    namespace AME
    {
        class InstantiateTemplateBulkBuilder;
    }
    namespace AME
    {
        class InterfaceMemberPort;
    }
    namespace AME
    {
        class InterruptionPointBuilder;
    }
    namespace AME
    {
        class LayoutDefinitionBuilder;
    }
    namespace AME
    {
        class LineDesignerMappingBuilder;
    }
    namespace AME
    {
        class LinkSymbolToDeviceTypeBuilder;
    }
    namespace AME
    {
        class LoadLineDesignerBuilder;
    }
    namespace AME
    {
        class Manage2dSymbolsBuilder;
    }
    namespace AME
    {
        class Manage3DModelsBuilder;
    }
    namespace AME
    {
        class ManageEclassMappingBuilder;
    }
    namespace AME
    {
        class ManageObjectTypeBuilder;
    }
    namespace AME
    {
        class MapToExistingObjectBuilder;
    }
    namespace AME
    {
        class MountingInterfaceBuilder;
    }
    namespace AME
    {
        class MultiValueObjectsPort;
    }
    namespace AME
    {
        class NamingRuleSettingsBuilder;
    }
    namespace AME
    {
        class ObjectEvaluatorBuilder;
    }
    namespace AME
    {
        class OperandRuleBuilder;
    }
    namespace AME
    {
        class OperatorRuleBuilder;
    }
    namespace AME
    {
        class OpticalAnnotationSettingsBuilder;
    }
    namespace AME
    {
        class OpticalConnectionSettingsBuilder;
    }
    namespace AME
    {
        class OrderAspectsBuilder;
    }
    namespace AME
    {
        class PageBuilder;
    }
    namespace AME
    {
        class PageNamingBuilder;
    }
    namespace AME
    {
        class ParameterRuleBuilder;
    }
    namespace AME
    {
        class ParentEvaluatorBuilder;
    }
    namespace AME
    {
        class PlaceAutomationBuilder;
    }
    namespace AME
    {
        class PlcBlock;
    }
    namespace AME
    {
        class PlcCodePosition;
    }
    namespace AME
    {
        class PlcInterfaceVariableBuilder;
    }
    namespace AME
    {
        class PlcMemoryAreaBuilder;
    }
    namespace AME
    {
        class PlcMethod;
    }
    namespace AME
    {
        class PlcMethodBuilder;
    }
    namespace AME
    {
        class PlcSymbolBuilder;
    }
    namespace AME
    {
        class PlcSymbolsEvaluatorBuilder;
    }
    namespace AME
    {
        class PlcVendorSymbolBuilder;
    }
    namespace AME
    {
        class PortBuilder;
    }
    namespace AME
    {
        class PortConnectionBuilder;
    }
    namespace AME
    {
        class PortEvaluatorBuilder;
    }
    namespace AME
    {
        class PortsManagerBuilder;
    }
    namespace AME
    {
        class ProductDefinition;
    }
    namespace AME
    {
        class ProductMatchingRulesBuilder;
    }
    namespace AME
    {
        class ProductSelectionBuilder;
    }
    namespace AME
    {
        class ProductSelectionDetailsBuilder;
    }
    namespace AME
    {
        class ProjectEngineeringObjectBuilder;
    }
    namespace AME
    {
        class PropertyEvaluatorBuilder;
    }
    namespace AME
    {
        class QueryBuilder;
    }
    namespace AME
    {
        class QueryClause;
    }
    namespace AME
    {
        class QueryFolder;
    }
    namespace AME
    {
        class ReportTemplateBuilder;
    }
    namespace AME
    {
        class ReportsSettingsBuilder;
    }
    namespace AME
    {
        class SaveToLibraryBuilder;
    }
    namespace AME
    {
        class SchematicSymbolConfigurationBuilder;
    }
    namespace AME
    {
        class SelectAndHighlightBuilder;
    }
    namespace AME
    {
        class ShowHideObjectsBuilder;
    }
    namespace AME
    {
        class Snap3DModelsBuilder;
    }
    namespace AME
    {
        class SubnetBuilder;
    }
    namespace AME
    {
        class SymbolAnnotationBuilder;
    }
    namespace AME
    {
        class SymbolAnnotationSettingsBuilder;
    }
    namespace AME
    {
        class SymbolAuthoringBuilder;
    }
    namespace AME
    {
        class TCSavedQueriesBuilder;
    }
    namespace AME
    {
        class TeeJunctionBuilder;
    }
    namespace AME
    {
        class TiaPortalProjectSettingsBuilder;
    }
    namespace AME
    {
        class TiaProjectItemBuilder;
    }
    namespace AME
    {
        class TransferFileDataBuilder;
    }
    namespace AME
    {
        class TypeMappingListBuilder;
    }
    namespace AME
    {
        class UnloadLineDesignerBuilder;
    }
    class NXObject;
    class Part;
    namespace AME
    {
        class AMEManagerImpl;
        /** Represents a manager of automation designer objects  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AMEManager
        {
            /** the status of paste operation */
            public: enum PasteStatus
            {
                PasteStatusSuccessful/** successful */ ,
                PasteStatusNoValidObjectToPaste/** no valid object to paste */ ,
                PasteStatusNameUnderParentExists/** name under parent exists */ ,
                PasteStatusAdditionalObjectsInvolved/** additional objects involved */ 
            };

            /** the deletion type */
            public: enum DeleteType
            {
                DeleteTypeDeleteObject/** delete object */ ,
                DeleteTypeDeleteTemplate/** delete template */ ,
                DeleteTypeRemoveLastAspect/** remove last aspect */ ,
                DeleteTypeDeleteSymbolicRepresentation/** delete symbolic representation */ 
            };

            /** Type of PLC Station */
            public: enum CreateStationType
            {
                CreateStationTypeCentral/** central */ ,
                CreateStationTypeDio/** dio */ 
            };

            private: AMEManagerImpl * m_amemanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AMEManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static AMEManager* theAMEManager;
            /** Returns the AMEManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static AMEManager* GetAMEManager(NXOpen::Session *owner);
            public: ~AMEManager();
            /** Creates a builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ApplicationBuilder * CreateApplicationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Return the application builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ApplicationBuilder * GetApplicationBuilder
            (
            );
            /** Creates a  global selection builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GlobalSelectionBuilder * CreateGlobalSelectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Delete the AME aspect node object and the connected EO as well as all children in all aspects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteSingleAspect
            (
                NXOpen::AME::AspectNode * obj /** obj */ 
            );
            /** Unassign the Plc Block to from a PLC
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnassignPlcblock
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Change the instance data block to single / global instance
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MakeInstanceDbGlobal
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Change the instance data block to multiple instance
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MakeMultipleInstanceDb
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Submit the delete of EOs 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SubmitEngObjectDelete
            (
            );
            /** Submit the delete of Query Objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SubmitQueryObjectDelete
            (
            );
            /** Creates an HWXml import builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportHWXmlBuilder * CreateImportHwxmlBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates a @link NXOpen::AME::TiaProjectItemBuilder NXOpen::AME::TiaProjectItemBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TiaProjectItemBuilder * CreateTiaprojectItemBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a port builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortBuilder * CreatePortBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * parent /** parent */,
                NXOpen::NXObject * port /** port to edit. Is NULL in create Mode */
            );
            /** Creates a port builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortConnectionBuilder * CreatePortConnectionBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * port /** port */ 
            );
            /** Creates a @link NXOpen::AME::PlcSymbolBuilder NXOpen::AME::PlcSymbolBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcSymbolBuilder * CreatePlcSymbolBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * node /** node to edit can be NULL */
            );
            /** Creates an EplanSettingsBuilder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanSettingsBuilder * CreateEplanSettingsBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * node /** node to edit can be NULL */
            );
            /** Creates an EplanProjectTemplateAndStructureBuilder  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanProjectTemplateAndStructureBuilder * CreateEplanProjectTemplateAndStructureBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ImportEplanPageMacroBuilder NXOpen::AME::ImportEplanPageMacroBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportEplanPageMacroBuilder * CreateImportEplanPageMacroBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates an TiaPortalSettingsBuilder  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TiaPortalProjectSettingsBuilder * CreateTiaPortalProjectSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Delete the AME object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteObject
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Creates a @link NXOpen::AME::EngineeringObjectBuilder NXOpen::AME::EngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectBuilder * CreateEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::AssignAspectBuilder NXOpen::AME::AssignAspectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AssignAspectBuilder * CreateAssignAspectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EditEngineeringObjectBuilder NXOpen::AME::EditEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditEngineeringObjectBuilder * CreateEditEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEEngObject * editObject /** editobject */ 
            );
            /** Change the parent of a node in navigator
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeParent
            (
                NXOpen::NXObject * obj /** obj */ ,
                NXOpen::NXObject * newParent /** newparent */ 
            );
            /** Change the name of the node
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeName
            (
                NXOpen::AME::INodeObject * obj /** obj */ ,
                const NXString & text /** text */ 
            );
            /** Change the name of the node
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeName
            (
                NXOpen::AME::INodeObject * obj /** obj */ ,
                const char * text /** text */ 
            );
            /** Change the description of the node 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeDescription
            (
                NXOpen::AME::INodeObject * obj /** obj */ ,
                const NXString & text /** text */ 
            );
            /** Change the description of the node 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeDescription
            (
                NXOpen::AME::INodeObject * obj /** obj */ ,
                const char * text /** text */ 
            );
            /** Change the description of an Engineering Object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeEngineeringObjectDescription
            (
                NXOpen::AME::IEngObject * eoTag /** eotag */ ,
                const NXString & text /** text */ 
            );
            /** Change the description of an Engineering Object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeEngineeringObjectDescription
            (
                NXOpen::AME::IEngObject * eoTag /** eotag */ ,
                const char * text /** text */ 
            );
            /** Creates a builder for the EPLAN project generation dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanProjectGenerationBuilder * CreateEplanProjectGenerationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Copies objects on the clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CopyObjects
            (
                const std::vector<NXOpen::AME::INodeObject *> & objectsToCopy /** objectstocopy */ 
            );
            /** Cuts objects and places them on the clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CutObjects
            (
                const std::vector<NXOpen::AME::INodeObject *> & objectsToCut /** objectstocut */ 
            );
            /** Pastes objects from the clipboard under given parent  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEManager::PasteStatus PasteObjects
            (
                NXOpen::AME::INodeObject * parent /** parent */ ,
                std::vector<NXOpen::AME::INodeObject *> & copiedObjects /** copiedobjects */ 
            );
            /** Clears clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ClearClipboard
            (
            );
            /** Creates a builder for the Set Naming Rules dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::NamingRuleSettingsBuilder * CreateNamingRuleSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a builder for the aspect navigator preferences dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectNavigatorPreferencesBuilder * CreateAspectNavigatorPreferencesBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::LineDesignerMappingBuilder NXOpen::AME::LineDesignerMappingBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LineDesignerMappingBuilder * CreateLineDesignerMappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Apply naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ApplyNamingRule
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Apply naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetNaming
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Creates a @link NXOpen::AME::CreateTemplateBuilder NXOpen::AME::CreateTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateTemplateBuilder * CreateTemplateBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::OrderAspectsBuilder NXOpen::AME::OrderAspectsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OrderAspectsBuilder * CreateOrderAspectsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::GroupBuilder NXOpen::AME::GroupBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GroupBuilder * CreateGroupBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEGroup * group /** group */ 
            );
            /** Creates a @link NXOpen::AME::CreatePmiNoteBuilder NXOpen::AME::CreatePmiNoteBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreatePmiNoteBuilder * CreatePmiNoteBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Unload of template or definition project  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnloadProject
            (
                NXOpen::NXObject * project /** project */ 
            );
            /** Reload of project 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ReloadProject
            (
                NXOpen::NXObject * project /** project */ 
            );
            /** Creates a @link NXOpen::AME::PlcMethodBuilder NXOpen::AME::PlcMethodBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcMethodBuilder * CreatePlcMethodBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcMethod * method /** method */ 
            );
            /** Creates a @link NXOpen::AME::AMEGroupFolder NXOpen::AME::AMEGroupFolder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEGroupFolder * CreateGroupFolder
            (
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates a @link NXOpen::AME::QueryFolder NXOpen::AME::QueryFolder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryFolder * CreateQueryFolder
            (
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates an instance data block builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstanceDataBlockBuilder * CreateInstanceDataBlockBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcBlock * node /** node to edit can be not NULL */,
                NXOpen::AME::InstanceDataBlockBuilder::CreateMode mode /** create idb from aspect or library */
            );
            /** Creates an function call instance builder  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FunctionCallInstanceBuilder * CreateFunctionCallInstanceBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcBlock * node /** node to edit can be not NULL */
            );
            /** Creates a @link NXOpen::AME::BreakTemplateBuilder NXOpen::AME::BreakTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BreakTemplateBuilder * CreateBreakTemplateBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEEngObject * engObj /** engobj */ 
            );
            /** Create Show/Hide Objects Builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ShowHideObjectsBuilder * CreateShowHideObjectsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EplanImportProjectTemplateBuilder NXOpen::AME::EplanImportProjectTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanImportProjectTemplateBuilder * CreateEplanImportProjectTemplateBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Updates the collaboration context 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateCollaborationContext
            (
            );
            /** Unmap a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                bool keepTypeMapped /** keeptypemapped */ 
            );
            /** Unmap a template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapTemplate
            (
                const NXString & templateId /** templateid */ 
            );
            /** Unmap a template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnmapTemplate
            (
                const char * templateId /** templateid */ 
            );
            /** Map a LD object to an eo 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                NXOpen::AME::IEngObject * eo /** eo */ 
            );
            /** Map a LD object to a template
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapLdObjectToTemplate
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                NXOpen::NXObject * tc /** tc */ 
            );
            /** Delete a Broken EO - LD Mapping Link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteBrokenEoLinkToLdObject
            (
                NXOpen::AME::IEngObject * engObj /** engobj */ 
            );
            /** Delete a Broken template - LD Mapping Link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteBrokenTemplateLinkToLdObject
            (
                NXOpen::NXObject * tc /** tc */ 
            );
            /** Create an eo and map it to a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateEngineeringObjectAndMapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ 
            );
            /** Upgrade all the instance mappings of the project to the new loaded revision
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpgradeMappingsRevision
            (
            );
            /** Creates a Map To Existing Builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MapToExistingObjectBuilder * CreateMapToExistingObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Set the objects to be deleted
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetObjectsToBeDeleted
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                NXOpen::AME::AMEManager::DeleteType deleteType /** deletetype */ 
            );
            /** Set the delete option
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDeleteConditionalObject
            (
                bool deleteOption /** deleteoption */ 
            );
            /** Start to delete
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DoDelete
            (
            );
            /** Start to delete with update
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DoDeleteWithUpdate
            (
            );
            /** End of the delete
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteEnd
            (
            );
            /** Creates an extract attribute builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ExtractAttributeBuilder * CreateExtractAttributeBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ProjectEngineeringObjectBuilder NXOpen::AME::ProjectEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProjectEngineeringObjectBuilder * CreateProjectEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SelectAndHighlightBuilder NXOpen::AME::SelectAndHighlightBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAndHighlightBuilder * SelectAndHighlightBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a ports manager builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortsManagerBuilder * CreatePortsManagerBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * portsContainer /** portscontainer */ 
            );
            /** Removes an engineering object from a group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveFromGroup
            (
                NXOpen::AME::AMEGroup * group /** group */ ,
                NXOpen::AME::IEngObject * eoTag /** eotag */ 
            );
            /** Unloads a part even if modified
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnloadPart
            (
                NXOpen::NXObject * partTag /** parttag */ 
            );
            /** Creates a @link NXOpen::AME::TransferFileDataBuilder NXOpen::AME::TransferFileDataBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TransferFileDataBuilder * CreateTransferFileDataBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ImportNode * importNodeTag /** importnodetag */ 
            );
            /** Update all the node's name based on the naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateAllNames
            (
            );
            /** Creates a @link NXOpen::AME::EngineeringObjectDefinitionLabelBuilder NXOpen::AME::EngineeringObjectDefinitionLabelBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectDefinitionLabelBuilder * CreateEngineeringObjectDefinitionLabelBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::CreateEngObjectDefinitionBuilder NXOpen::AME::CreateEngObjectDefinitionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateEngObjectDefinitionBuilder * CreateEngObjectDefinitionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::CreateTemplateDefinitionBuilder NXOpen::AME::CreateTemplateDefinitionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateTemplateDefinitionBuilder * CreateTemplateDefinitionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::CreateProductBuilder NXOpen::AME::CreateProductBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateProductBuilder * CreateProductBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::DefineAspectBuilder NXOpen::AME::DefineAspectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::DefineAspectBuilder * DefineAspectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SaveToLibraryBuilder NXOpen::AME::SaveToLibraryBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SaveToLibraryBuilder * CreateSaveToLibraryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Moves an Engineering Object Label 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveLabel
            (
                NXOpen::AME::AMEEngineeringObjectLabel * label /** label */ ,
                const NXOpen::Point3d & targetPosition /** targetposition */ 
            );
            /** Creates an Engineering Object Label  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEEngineeringObjectLabel * CreateLabel
            (
                NXOpen::AME::AMEEngObject * eo /** eo */ ,
                const NXOpen::Point3d & targetPosition /** targetposition */ 
            );
            /** Creates a @link NXOpen::AME::PageBuilder NXOpen::AME::PageBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageBuilder * CreatePageBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Deletes an Engineering Object Label 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteLabel
            (
                NXOpen::AME::AMEEngineeringObjectLabel * label /** label */ 
            );
            /** Creates a @link NXOpen::AME::ParameterRuleBuilder NXOpen::AME::ParameterRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ParameterRuleBuilder * CreateParameterRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::MultiValueObjectsPort * mvoPort /** mvoport */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ ,
                NXOpen::AME::MultiValueObjectsPort::JaAmeValueObjectUsageType usageType /** usagetype */ 
            );
            /** Creates a @link NXOpen::AME::OperandRuleBuilder NXOpen::AME::OperandRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OperandRuleBuilder * CreateOperandRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcCodePosition * editedRule /** editedrule */ ,
                NXOpen::AME::PlcBlock * block /** block */ ,
                int indexOfCompileUnit /** indexofcompileunit */ ,
                int indexOfStatement /** indexofstatement */ ,
                int innerIndexOfOperand /** innerindexofoperand */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ 
            );
            /** Creates a @link NXOpen::AME::CallMethodRuleBuilder NXOpen::AME::CallMethodRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CallMethodRuleBuilder * CreateCallMethodRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcCodePosition * editedRule /** editedrule */ ,
                NXOpen::AME::PlcBlock * block /** block */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ ,
                NXOpen::AME::PlcRule::RefObjectType refObjectType /** refobjecttype */ ,
                NXOpen::AME::PlcRule::ReplacementType replacementType /** replacementtype */ ,
                int compileUnitIndex /** compileunitindex */ ,
                int startIndex /** startindex */ ,
                int endIndex /** endindex */ 
            );
            /** Establish the children 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EstablishChildren
            (
                NXOpen::NXObject * parent /** parent */ 
            );
            /** Creates a @link NXOpen::AME::TypeMappingListBuilder NXOpen::AME::TypeMappingListBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TypeMappingListBuilder * CreateTypeMappingListBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::LoadLineDesignerBuilder NXOpen::AME::LoadLineDesignerBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LoadLineDesignerBuilder * CreateLoadLineDesignerBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::UnloadLineDesignerBuilder NXOpen::AME::UnloadLineDesignerBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::UnloadLineDesignerBuilder * CreateUnloadLineDesignerBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::PageNamingBuilder NXOpen::AME::PageNamingBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageNamingBuilder * CreatePageNamingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::DocumentStructureBuilder NXOpen::AME::DocumentStructureBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::DocumentStructureBuilder * CreateDocumentStructureBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::FragmentBuilder NXOpen::AME::FragmentBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FragmentBuilder * CreateFragmentBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Locks/unlocks the template
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void LockTemplate
            (
                bool lock /** lock */ 
            );
            /** Creates a @link NXOpen::AME::BulkConnectionBuilder NXOpen::AME::BulkConnectionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BulkConnectionBuilder * CreateBulkConnectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Validate if object is modifiable
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ValidateForModification
            (
                NXOpen::NXObject * objectTag /** objecttag */ 
            );
            /**Creates a @link NXOpen::AME::QueryBuilder NXOpen::AME::QueryBuilder@endlink  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryBuilder * CreateQueryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::BulkEngineeringObjectBuilder NXOpen::AME::BulkEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BulkEngineeringObjectBuilder * CreateBulkEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::PlcInterfaceVariableBuilder NXOpen::AME::PlcInterfaceVariableBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcInterfaceVariableBuilder * CreatePlcInterfaceVariableBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * node /** node */ 
            );
            /** Moves Navigator nodes under same parent 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveNavigatorNodes
            (
                NXOpen::AME::INodeObject * obj /** obj */ ,
                const std::vector<NXOpen::AME::INodeObject *> & nodesToMove /** nodestomove */ 
            );
            /** Creates a @link NXOpen::AME::EditClauseBuilder NXOpen::AME::EditClauseBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder * CreateEditClauseBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ ,
                NXOpen::AME::QueryClause * queryClause /** queryclause */ 
            );
            /** Creates a @link NXOpen::AME::AspectPrefixBuilder NXOpen::AME::AspectPrefixBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectPrefixBuilder * CreateAspectPrefixBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EditQueryBuilder NXOpen::AME::EditQueryBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditQueryBuilder * CreateEditQueryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::TCSavedQueriesBuilder NXOpen::AME::TCSavedQueriesBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TCSavedQueriesBuilder * CreateEditQueryScopeBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ ,
                NXOpen::AME::QueryClause * queryClause /** queryclause */ 
            );
            /** Creates a @link NXOpen::AME::ProductMatchingRulesBuilder NXOpen::AME::ProductMatchingRulesBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductMatchingRulesBuilder * CreateProductMatchingRulesBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ProductSelectionBuilder NXOpen::AME::ProductSelectionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductSelectionBuilder * CreateProductSelectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ProductSelectionDetailsBuilder NXOpen::AME::ProductSelectionDetailsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductSelectionDetailsBuilder * CreateProductSelectionDetailsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Loads the Product Defintion @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductDefinition * LoadProductDefinition
            (
                const NXString & reusePartName /** reusepartname */ 
            );
            /** Loads the Product Defintion @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::AME::ProductDefinition * LoadProductDefinition
            (
                const char * reusePartName /** reusepartname */ 
            );
            /** Gets the file Path from full specification  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetPartFilepath
            (
                const NXString & reusePartName /** reusepartname */ 
            );
            /** Gets the file Path from full specification  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXString GetPartFilepath
            (
                const char * reusePartName /** reusepartname */ 
            );
            /** Loads connected Engineering objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void LoadConnectedEos
            (
                const std::vector<NXOpen::AME::IEngObject *> & objects /** objects */ 
            );
            /** Set the target to be edited, target can be Type or Template, targetID is the DB id from the Teamcenter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Part * EditTarget
            (
                const NXString & targetID /** targetid */ 
            );
            /** Set the target to be edited, target can be Type or Template, targetID is the DB id from the Teamcenter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Part * EditTarget
            (
                const char * targetID /** targetid */ 
            );
            /** Hide/Show a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void HideShowLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                bool hide /** hide */ 
            );
            /** Creates a @link NXOpen::AME::LinkSymbolToDeviceTypeBuilder NXOpen::AME::LinkSymbolToDeviceTypeBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LinkSymbolToDeviceTypeBuilder * CreateLinkSymbolToDeviceTypeBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::LayoutDefinitionBuilder NXOpen::AME::LayoutDefinitionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LayoutDefinitionBuilder * CreateLayoutDefinitionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ReportTemplateBuilder NXOpen::AME::ReportTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ReportTemplateBuilder * CreateReportTemplateBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ReportsSettingsBuilder NXOpen::AME::ReportsSettingsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ReportsSettingsBuilder * CreateReportsSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::GenerateReportsBuilder NXOpen::AME::GenerateReportsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GenerateReportsBuilder * CreateGenerateReportsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SchematicSymbolConfigurationBuilder NXOpen::AME::SchematicSymbolConfigurationBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SchematicSymbolConfigurationBuilder * CreateSchematicSymbolConfigurationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::Manage3DModelsBuilder NXOpen::AME::Manage3DModelsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Manage3DModelsBuilder * CreateManage3dmodelsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::Manage2dSymbolsBuilder NXOpen::AME::Manage2dSymbolsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Manage2dSymbolsBuilder * CreateManage2dSymbolsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::GeneralAnnotationSettingsBuilder NXOpen::AME::GeneralAnnotationSettingsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GeneralAnnotationSettingsBuilder * CreateGeneralAnnotationSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::GeneralConnectionSettingsBuilder NXOpen::AME::GeneralConnectionSettingsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GeneralConnectionSettingsBuilder * CreateGeneralConnectionSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ElectricalConnectionSettingsBuilder NXOpen::AME::ElectricalConnectionSettingsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ElectricalConnectionSettingsBuilder * CreateElectricalConnectionSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ElectricalAnnotationSettingsBuilder NXOpen::AME::ElectricalAnnotationSettingsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ElectricalAnnotationSettingsBuilder * CreateElectricalAnnotationSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ManageEclassMappingBuilder NXOpen::AME::ManageEclassMappingBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ManageEclassMappingBuilder * CreateManageEclassmappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ImportEClassProductBuilder NXOpen::AME::ImportEClassProductBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportEClassProductBuilder * CreateImportEclassProductBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::OpticalConnectionSettingsBuilder NXOpen::AME::OpticalConnectionSettingsBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OpticalConnectionSettingsBuilder * CreateOpticalConnectionSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ManageObjectTypeBuilder NXOpen::AME::ManageObjectTypeBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ManageObjectTypeBuilder * CreateManageObjectTypeBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::OpticalAnnotationSettingsBuilder NXOpen::AME::OpticalAnnotationSettingsBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OpticalAnnotationSettingsBuilder * CreateOpticalAnnotationSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::PlaceAutomationBuilder NXOpen::AME::PlaceAutomationBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlaceAutomationBuilder * CreatePlaceAutomationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::AssignTypeBuilder NXOpen::AME::AssignTypeBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AssignTypeBuilder * CreateAssignTypeBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::MountingInterfaceBuilder NXOpen::AME::MountingInterfaceBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MountingInterfaceBuilder * CreateMountingInterfaceBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a object of plc central station  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::AME::AMEBaseNode *> CreatePlcStation
            (
                const NXString & text /** text */ ,
                NXOpen::AME::AMEManager::CreateStationType stationType /** stationtype */ 
            );
            /** Creates a object of plc central station  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            std::vector<NXOpen::AME::AMEBaseNode *> CreatePlcStation
            (
                const char * text /** text */ ,
                NXOpen::AME::AMEManager::CreateStationType stationType /** stationtype */ 
            );
            /** Creates a @link NXOpen::AME::ImportEClassSchemaBuilder NXOpen::AME::ImportEClassSchemaBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportEClassSchemaBuilder * CreateImportEclassSchemaBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Entering an eClass environment  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Part * EnterEclassEnv
            (
            );
            /** Exports tia to external tool  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ExportTiaProject
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & selectedStations /** selectedstations */ ,
                const NXString & fullPath /** fullpath */ ,
                bool isExistingProject /** isexistingproject */ ,
                bool openInTia /** openintia */ ,
                bool compileInTia /** compileintia */ ,
                bool sendWithSwAndTags /** sendwithswandtags */ ,
                bool sendWithDistributedIOs /** sendwithdistributedios */ ,
                bool ignoreConfigureError /** ignoreconfigureerror */ 
            );
            /** Exports tia to external tool  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXString ExportTiaProject
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & selectedStations /** selectedstations */ ,
                const char * fullPath /** fullpath */ ,
                bool isExistingProject /** isexistingproject */ ,
                bool openInTia /** openintia */ ,
                bool compileInTia /** compileintia */ ,
                bool sendWithSwAndTags /** sendwithswandtags */ ,
                bool sendWithDistributedIOs /** sendwithdistributedios */ ,
                bool ignoreConfigureError /** ignoreconfigureerror */ 
            );
            /** Set the host name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetHostName
            (
                const NXString & hostName /** hostname */ 
            );
            /** Set the host name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetHostName
            (
                const char * hostName /** hostname */ 
            );
            /** Creates a connect to library item builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ConnectToLibraryItemBuilder * ConnectToLibraryItemBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::InterfaceMemberPort * imPort /** node to edit may not be NULL */
            );
            /** Creates a object of plc rack under provided station  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEBaseNode * CreatePlcRack
            (
                NXOpen::NXObject * stationTag /** stationtag */ ,
                const NXString & text /** text */ 
            );
            /** Creates a object of plc rack under provided station  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::AME::AMEBaseNode * CreatePlcRack
            (
                NXOpen::NXObject * stationTag /** stationtag */ ,
                const char * text /** text */ 
            );
            /** Creates a @link NXOpen::AME::CabinetDesignBuilder NXOpen::AME::CabinetDesignBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CabinetDesignBuilder * CreateCabinetDesignBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ObjectEvaluatorBuilder NXOpen::AME::ObjectEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ObjectEvaluatorBuilder * CreateObjectEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * objectEvaluator /** objectevaluator */ 
            );
            /** Creates a @link NXOpen::AME::AccessorEvaluatorBuilder NXOpen::AME::AccessorEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AccessorEvaluatorBuilder * CreateAccessorEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * accessorEvaluator /** accessorevaluator */ 
            );
            /** Creates a @link NXOpen::AME::ParentEvaluatorBuilder NXOpen::AME::ParentEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ParentEvaluatorBuilder * CreateParentEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * parentEvaluator /** parentevaluator */ 
            );
            /** Creates a @link NXOpen::AME::ChildrenEvaluatorBuilder NXOpen::AME::ChildrenEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ChildrenEvaluatorBuilder * CreateChildrenEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * childrenEvaluator /** childrenevaluator */ 
            );
            /** Creates a @link NXOpen::AME::PlcSymbolsEvaluatorBuilder NXOpen::AME::PlcSymbolsEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcSymbolsEvaluatorBuilder * CreatePlcSymbolsEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * plcSymbolsEvaluator /** plcsymbolsevaluator */ 
            );
            /** Creates a @link NXOpen::AME::PortEvaluatorBuilder NXOpen::AME::PortEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortEvaluatorBuilder * CreatePortEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * portEvaluator /** portevaluator */ 
            );
            /** Creates a @link NXOpen::AME::ConnectedObjectsEvaluatorBuilder NXOpen::AME::ConnectedObjectsEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ConnectedObjectsEvaluatorBuilder * CreateConnectedObjectsEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * connectedObjectsEvaluator /** connectedobjectsevaluator */ 
            );
            /** Creates a @link NXOpen::AME::AncestorEvaluatorBuilder NXOpen::AME::AncestorEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AncestorEvaluatorBuilder * CreateAncestorEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * ancestorEvaluator /** ancestorevaluator */ 
            );
            /** Creates a @link NXOpen::AME::PropertyEvaluatorBuilder NXOpen::AME::PropertyEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PropertyEvaluatorBuilder * CreatePropertyEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * propertyEvaluator /** propertyevaluator */ 
            );
            /** Creates a @link NXOpen::AME::PlcVendorSymbolBuilder NXOpen::AME::PlcVendorSymbolBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcVendorSymbolBuilder * CreatePlcVendorSymbolBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * memoryAreaTag /** memoryareatag */ 
            );
            /** Creates a @link NXOpen::AME::FormSheetSettingsBuilder NXOpen::AME::FormSheetSettingsBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FormSheetSettingsBuilder * CreateFormSheetSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SubnetBuilder NXOpen::AME::SubnetBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SubnetBuilder * CreateSubnetBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::AssignSubnetBuilder NXOpen::AME::AssignSubnetBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AssignSubnetBuilder * CreateAssignSubnetBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::PlcMemoryAreaBuilder NXOpen::AME::PlcMemoryAreaBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcMemoryAreaBuilder * CreatePlcMemoryAreaBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * memoryArea /** node to edit can be NULL */
            );
            /** Creates a @link NXOpen::AME::InsertObjectBuilder NXOpen::AME::InsertObjectBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InsertObjectBuilder * CreateInsertObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::AssignTemplateToProductBuilder NXOpen::AME::AssignTemplateToProductBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AssignTemplateToProductBuilder * CreateAssignTemplateToProductBuilder
            (
                NXOpen::AME::ProductDefinition * productDef /** productdef */ 
            );
            /** Creates a @link NXOpen::AME::EditAnnotationBuilder NXOpen::AME::EditAnnotationBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditAnnotationBuilder * CreateEditAnnotationBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEExtendedObject * extObject /** extobject */ 
            );
            /** Creates a @link NXOpen::AME::ImportGlobalMappingBuilder NXOpen::AME::ImportGlobalMappingBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportGlobalMappingBuilder * CreateImportGlobalMappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ConfigureResultTableBuilder NXOpen::AME::ConfigureResultTableBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ConfigureResultTableBuilder * CreateConfigureResultTableBuilder
            (
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ 
            );
            /** Close AME project
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CloseAmeProject
            (
            );
            /** Creates a @link NXOpen::AME::Snap3DModelsBuilder NXOpen::AME::Snap3DModelsBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Snap3DModelsBuilder * CreateSnap3dmodelsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EvaluatorCopyToBuilder NXOpen::AME::EvaluatorCopyToBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EvaluatorCopyToBuilder * CreateEvaluatorCopyToBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::TeeJunctionBuilder NXOpen::AME::TeeJunctionBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TeeJunctionBuilder * CreateTeeJunctionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Create plc user constants under provided node 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateUserConstants
            (
                NXOpen::AME::AMEBaseNode * parent /** parent */ ,
                std::vector<NXOpen::AME::AMEBaseNode *> & newObjects /** newobjects */ 
            );
            /** Creates a @link NXOpen::AME::SymbolAuthoringBuilder NXOpen::AME::SymbolAuthoringBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAuthoringBuilder * CreateSymbolAuthoringBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SymbolAnnotationBuilder NXOpen::AME::SymbolAnnotationBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAnnotationBuilder * CreateSymbolAnnotationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::InterruptionPointBuilder NXOpen::AME::InterruptionPointBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InterruptionPointBuilder * CreateInterruptionPointBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEExtendedObject * interruptionPoint /** interruptionpoint */ 
            );
            /** Creates a @link NXOpen::AME::ExportEClassMappingBuilder NXOpen::AME::ExportEClassMappingBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ExportEClassMappingBuilder * CreateExportEclassMappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::ImportEClassMappingBuilder NXOpen::AME::ImportEClassMappingBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportEClassMappingBuilder * CreateImportEclassMappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::SymbolAnnotationSettingsBuilder NXOpen::AME::SymbolAnnotationSettingsBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAnnotationSettingsBuilder * CreateSymbolAnnotationSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EplanStructureIdentifierOrderBuilder NXOpen::AME::EplanStructureIdentifierOrderBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanStructureIdentifierOrderBuilder * CreateEplanStructureIdentifierOrderBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::AME::EditOrderBuilder NXOpen::AME::EditOrderBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditOrderBuilder * CreateEditOrderBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * portContainer /** portcontainer */ 
            );
            /** Creates a @link NXOpen::AME::FormSheetBuilder NXOpen::AME::FormSheetBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FormSheetBuilder * CreateFormSheetBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::FormSheetObject * formSheetObject /** formsheetobject */ 
            );
            /** Creates a @link NXOpen::AME::OperatorRuleBuilder NXOpen::AME::OperatorRuleBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OperatorRuleBuilder * CreateOperatorRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcCodePosition * editedRule /** editedrule */ ,
                NXOpen::AME::PlcBlock * block /** block */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ ,
                NXOpen::AME::PlcRule::RefObjectType refObjectType /** refobjecttype */ ,
                NXOpen::AME::PlcRule::ReplacementType replacementType /** replacementtype */ ,
                int startIndex /** startindex */ ,
                int endIndex /** endindex */ ,
                int compileUnitIndex /** compileunitindex */ 
            );
            /** Creates memory areas and memory records for given product definition
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ConfigureMemoryAreas
            (
                NXOpen::NXObject * obj /** obj */ ,
                std::vector<NXOpen::AME::AMEBaseNode *> & newObjects /** newobjects */ 
            );
            /** Creates a @link NXOpen::AME::InstantiateTemplateBulkBuilder NXOpen::AME::InstantiateTemplateBulkBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstantiateTemplateBulkBuilder * CreateInstantiateTemplateBulkBuilder
            (
                NXOpen::Part * part /** part */ ,
                const NXString & reusePartName /** reusepartname */ 
            );
            /** Creates a @link NXOpen::AME::InstantiateTemplateBulkBuilder NXOpen::AME::InstantiateTemplateBulkBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::AME::InstantiateTemplateBulkBuilder * CreateInstantiateTemplateBulkBuilder
            (
                NXOpen::Part * part /** part */ ,
                const char * reusePartName /** reusepartname */ 
            );
            /** Creates a @link AME::CreateMethodBuilder AME::CreateMethodBuilder@endlink   @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateMethodBuilder * CreateMethodBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::FindByConditionEvaluatorBuilder AME::FindByConditionEvaluatorBuilder@endlink   @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FindByConditionEvaluatorBuilder * CreateFindByConditionEvaluatorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ExpressionEvaluator * conditionEvaluator /** conditionevaluator */ 
            );
            /** Delete a @link AME::ExpressionEvaluator AME::ExpressionEvaluator@endlink  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteExpressionEvaluatornode
            (
                NXOpen::AME::ExpressionEvaluator * evaluator /** evaluator */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
