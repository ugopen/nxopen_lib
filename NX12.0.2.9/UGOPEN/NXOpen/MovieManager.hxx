#ifndef NXOpen_MOVIEMANAGER_HXX_INCLUDED
#define NXOpen_MOVIEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MovieManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MovieSettingsBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MovieManager;
    class UI;
    class MovieSettingsBuilder;
    class MovieManagerImpl;
    /** Represents a @link MovieManager MovieManager@endlink  class. This class is used 
        for recording movies.
     <br> To obtain an instance of this class, refer to @link NXOpen::UI  NXOpen::UI @endlink  <br> 
     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENUICPPEXPORT  MovieManager
    {
        private: MovieManagerImpl * m_moviemanager_impl;
        private: NXOpen::UI* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit MovieManager(NXOpen::UI *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~MovieManager();
        /** Creates a @link MovieSettingsBuilder MovieSettingsBuilder@endlink   @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MovieSettingsBuilder * CreateMovieSettingsBuilder
        (
        );
        /** Starts movie recording 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void Start
        (
            const NXString & filename /** Filename of the movie to be createed */,
            bool userFrames /** If true, user will provide frames through @link MovieManager::CaptureFrame MovieManager::CaptureFrame@endlink . If false, system generates frames */
        );
        /** Starts movie recording 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void Start
        (
            const char * filename /** Filename of the movie to be createed */,
            bool userFrames /** If true, user will provide frames through @link MovieManager::CaptureFrame MovieManager::CaptureFrame@endlink . If false, system generates frames */
        );
        /** Pauses movie recording 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void Pause
        (
        );
        /** Resumes movie recording 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void Resume
        (
        );
        /** Stops movie recording 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void End
        (
        );
        /** Use this method to capture a frame at a specified point. This is used when the
                movie recording was started with true as the second parameter of @link MovieManager::Start MovieManager::Start@endlink 
            
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void CaptureFrame
        (
        );
        /** Sets the movie playback speed. Movie may not play appropriately at a very high rate (few hundreds).
            In such cases a lower value could be set. Recommendation is to use a value less than 100 fps.
            
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPlaybackSpeed
        (
            int fps /** Specifies the playback speed of the movie in frames per second.*/
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
