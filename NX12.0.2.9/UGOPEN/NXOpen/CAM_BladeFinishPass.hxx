#ifndef NXOpen_CAM_BLADEFINISHPASS_HXX_INCLUDED
#define NXOpen_CAM_BLADEFINISHPASS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BladeFinishPass.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BladeFinishPass;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _BladeFinishPassBuilder;
        class BladeFinishPassImpl;
        /** Represents a blade finish pass builder 
         <br>  Created in NX12.0.2.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BladeFinishPass : public NXOpen::TaggedObject
        {
            /** types for finish passes */
            public: enum BladeFinishPassesType
            {
                BladeFinishPassesTypeNone/** none */,
                BladeFinishPassesTypeLeftAndRight/** left and right */,
                BladeFinishPassesTypeLeft/** left */,
                BladeFinishPassesTypeRight/** right */
            };

            /** types for finish passes output */
            public: enum FinishPassesOutputType
            {
                FinishPassesOutputTypeInfillsOnly/** infills only */,
                FinishPassesOutputTypeFinishPassesOnly/** finish passes only */,
                FinishPassesOutputTypeInfillsAndFinishPasses/** infills and finish passes */
            };

            /** types for multiple depths */
            public: enum FinishPassesMultipleDepthsType
            {
                FinishPassesMultipleDepthsTypeNone/** none */,
                FinishPassesMultipleDepthsTypeAlongToolAxis/** along tool axis */,
                FinishPassesMultipleDepthsTypeAlongContact/** along contact */
            };

            private: BladeFinishPassImpl * m_bladefinishpass_impl;
            private: friend class  _BladeFinishPassBuilder;
            protected: BladeFinishPass();
            public: ~BladeFinishPass();
            /**Returns  the finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeFinishPass::BladeFinishPassesType FinishPasses
            (
            );
            /**Sets  the finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFinishPasses
            (
                NXOpen::CAM::BladeFinishPass::BladeFinishPassesType finishPassesType /** the finish passes */
            );
            /**Returns  the output type 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeFinishPass::FinishPassesOutputType OutputType
            (
            );
            /**Sets  the output type 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputType
            (
                NXOpen::CAM::BladeFinishPass::FinishPassesOutputType outputType /** the output type */
            );
            /**Returns  the side stock offset 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * SideStockOffset
            (
            );
            /**Returns  the number of finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: int NumberOfFinishPasses
            (
            );
            /**Sets  the number of finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfFinishPasses
            (
                int noOfFinishPasses /** the number of finish passes */
            );
            /**Returns  the axial shift for finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double AxialShiftForFinishPasses
            (
            );
            /**Sets  the axial shift for finish passes 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialShiftForFinishPasses
            (
                double axialShift /** the axial shift for finish passes */
            );
            /**Returns  the multiple depths 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BladeFinishPass::FinishPassesMultipleDepthsType MultipleDepths
            (
            );
            /**Sets  the multiple depths 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultipleDepths
            (
                NXOpen::CAM::BladeFinishPass::FinishPassesMultipleDepthsType multipleDepths /** the multiple depths */
            );
            /**Returns  the number of depths 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: int NumberOfDepths
            (
            );
            /**Sets  the number of depths 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfDepths
            (
                int numberOfDepths /** the number of depths */
            );
            /**Returns  the apply stock offset on both sides toggle 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool ApplyStockOffsetOnBothSides
            (
            );
            /**Sets  the apply stock offset on both sides toggle 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApplyStockOffsetOnBothSides
            (
                bool applyStockOffsetOnBothSides /** the apply stock offset toggle */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
