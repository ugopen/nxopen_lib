#ifndef NXOpen_CAE_POSTSCENARIOTYPES_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOTYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
         /** A complex number 
         <br>  Created in NX11.0.0.  <br>  
        */

        struct Complex
        {
            public: /** real */ double Real;
            public: /** imag */ double Imag;
            public: Complex() :
                Real(),
                Imag()
            {
            }
            /** Constructor for the Complex struct. */ 
            public: Complex(double realInitial /** real */ , 
                    double imagInitial /** imag */ ) :
                Real(realInitial),
                Imag(imagInitial)
            {
            }
        };

        /** The data type of a CAE.PostScenarioVariant Value */
        enum PostScenarioVariantType
        {
            PostScenarioVariantTypeUnary/** an empty value */,
            PostScenarioVariantTypeBoolean/** a boolean value */,
            PostScenarioVariantTypeInteger/** an integer number */,
            PostScenarioVariantTypeDouble/** a real number */,
            PostScenarioVariantTypeComplex/** a complex number */,
            PostScenarioVariantTypeString/** an ASCII character string */,
            PostScenarioVariantTypeUnicodeString/** a Unicode UTF-8 character string */,
            PostScenarioVariantTypeVector3d/** a 3D vector */,
            PostScenarioVariantTypeComponent/** a component */,
            PostScenarioVariantTypeModeDescription/** a mode number and frequency */
        };

        /** Components of vectors or tensors. */
        enum PostScenarioVariantComponent
        {
            PostScenarioVariantComponentMagnitude/** request the magnitude of a 3D vector */,
            PostScenarioVariantComponentScalar/** represents that the data is scalar */,
            PostScenarioVariantComponentX/** X component of a 3D vector */,
            PostScenarioVariantComponentY/** Y component of a 3D vector */,
            PostScenarioVariantComponentZ/** Z component of a 3D vector */,
            PostScenarioVariantComponentXx/** XX component of a tensor */,
            PostScenarioVariantComponentYy/** YY component of a tensor */,
            PostScenarioVariantComponentZz/** ZZ component of a tensor */,
            PostScenarioVariantComponentXy/** XY component of a tensor */,
            PostScenarioVariantComponentXz/** XZ component of a tensor */,
            PostScenarioVariantComponentYx/** YX component of a tensor */,
            PostScenarioVariantComponentYz/** YZ component of a tensor */,
            PostScenarioVariantComponentZx/** ZX component of a tensor */,
            PostScenarioVariantComponentZy/** ZY component of a tensor */
        };

         /** Mode description */

        struct PostScenarioModeDescription
        {
            public: /** number */ int Number;
            public: /** frequency */ double Frequency;
            public: PostScenarioModeDescription() :
                Number(),
                Frequency()
            {
            }
            /** Constructor for the PostScenarioModeDescription struct. */ 
            public: PostScenarioModeDescription(int numberInitial /** number */ , 
                    double frequencyInitial /** frequency */ ) :
                Number(numberInitial),
                Frequency(frequencyInitial)
            {
            }
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
