#ifndef NXOpen_ROUTING_TRANSFORMPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_TRANSFORMPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_TransformPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class TransformPathBuilder;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class NXObject;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class _TransformPathBuilderBuilder;
        class TransformPathBuilderImpl;
        /**
                Builder for the "Transform Path" operation.  Allows the user to perform
                either a "Transform" or "Copy" of Routing objects.
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateTransformPathBuilder  NXOpen::Routing::RouteManager::CreateTransformPathBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Transform.DeltaEnum </td> <td> 
         
        ReferenceWcsWorkPart </td> </tr> 

        <tr><td> 
         
        Transform.DeltaXc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Transform.DeltaYc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Transform.DeltaZc.Value </td> <td> 
         
        0.0 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  TransformPathBuilder : public NXOpen::Builder
        {
            /** Tranform operation to perform. */
            public: enum TransformOption
            {
                TransformOptionMoveOriginal/** Move the selected entities. */,
                TransformOptionCopyOriginal/** Copy the selected entities. */
            };

            /** Specifies what attributes to copy during Transform Path */
            public: enum CopyAttributes
            {
                CopyAttributesDefaults/** Copy Attributes as per defaults. */,
                CopyAttributesUserSpecified/** Copy Attributes as per user defined. */
            };

            private: TransformPathBuilderImpl * m_transformpathbuilder_impl;
            private: friend class  _TransformPathBuilderBuilder;
            protected: TransformPathBuilder();
            public: ~TransformPathBuilder();
            /**Returns  the path selection.  Stores the objects to be transformed or copied. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * PathSelection
            (
            );
            /**Returns  the selection which is used to choose the object from which source object attributes
                        should be copied when copying attributes during a Transform Path operation.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * AttributeReferenceSelection
            (
            );
            /**Returns  the motion or transform.  The transformation to apply to the selected or
                        copied objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::ModlMotion * Transform
            (
            );
            /**Returns  the operation to perform during the commit method.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::TransformPathBuilder::TransformOption MoveOrCopyOption
            (
            );
            /**Sets  the operation to perform during the commit method.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMoveOrCopyOption
            (
                NXOpen::Routing::TransformPathBuilder::TransformOption moveOption /** move option */ 
            );
            /**Returns  the number of copies to create in the commit method for the option
                        @link Routing::TransformPathBuilder::TransformOptionCopyOriginal Routing::TransformPathBuilder::TransformOptionCopyOriginal@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int NumberOfCopies
            (
            );
            /**Sets  the number of copies to create in the commit method for the option
                        @link Routing::TransformPathBuilder::TransformOptionCopyOriginal Routing::TransformPathBuilder::TransformOptionCopyOriginal@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetNumberOfCopies
            (
                int numberOfCopies /** number of copies */ 
            );
            /**Returns  a message stating whether or not to move the selected segments with extension segments. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MoveWithExtensionSegments
            (
            );
            /**Sets  the method indicates whether connected parts get copied or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCopyConnectedParts
            (
                bool copyConnectedParts /** copy connected parts */ 
            );
            /**Returns  the method indicates whether connected parts get copied or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool CopyConnectedParts
            (
            );
            /**Sets  a message stating whether or not to move the selected segments with extension segments. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMoveWithExtensionSegments
            (
                bool moveWithExtSeg /** move with ext seg */ 
            );
            /**Returns  the flag that indicates whether or not to check for duplicate segments after the copy or transform.
                        It applies only to segments and not to control points. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool CheckForDuplicates
            (
            );
            /**Sets  the flag that indicates whether or not to check for duplicate segments after the copy or transform.
                        It applies only to segments and not to control points. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCheckForDuplicates
            (
                bool checkForDups /** check for dups */ 
            );
            /** Begin a drag operation.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StartDrag
            (
            );
            /** Drag the selected objects by the given translation and rotation.  Only
                        call after invoking the @link Routing::TransformPathBuilder::StartDrag Routing::TransformPathBuilder::StartDrag@endlink 
                        method.  After finished dragging, call
                        @link Routing::TransformPathBuilder::StopDrag Routing::TransformPathBuilder::StopDrag@endlink .
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DragByTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied.*/,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** End a drag operation.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StopDrag
            (
            );
            /** Destroys all preview objects associated with this operation.  Caller must
                       call update to complete the deletion of the preview objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DestroyAllPreviewObjects
            (
            );
            /** Sets the transform to use for the copy operation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCopyTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied.*/,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** Gets the set of objects created for the "ith" copy during the
                        commit method.  The 0th element is the original set of objects
                        to copy.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetIthSetOfObjects
            (
                int ith /** Which set of copy objects
                                                                                    to retrieve, must be in
                                                                                    the range 0 to the number
                                                                                    of copies minus 1. */,
                std::vector<NXOpen::NXObject *> & objects /** Copied objects. */
            );
            /** Detaches the selected path ends from the connected routing segments.
                        The detached path can be attached back to the previously connected routing
                        segments by using @link Routing::TransformPathBuilder::AttachSelectedPath Routing::TransformPathBuilder::AttachSelectedPath@endlink 
                      
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DetachSelectedPath
            (
            );
            /** Attaches the selected path back to the path it was originally
                        attached to before the call to @link Routing::TransformPathBuilder::DetachSelectedPath Routing::TransformPathBuilder::DetachSelectedPath@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AttachSelectedPath
            (
            );
            /**Returns  the flag that indicates whether or not to transform. across the assemblies 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool AcrossAssemblies
            (
            );
            /**Sets  the flag that indicates whether or not to transform. across the assemblies 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAcrossAssemblies
            (
                bool acrossAssemblies /** across assemblies */ 
            );
            /** Remove object from transform object list of builder as per list updated by
                         @link Routing::TransformPathBuilder::UpdateConnectedPartList Routing::TransformPathBuilder::UpdateConnectedPartList@endlink 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveConnectedPartsInBuilder
            (
            );
            /** Add object in transform object list of builder as per list updated by
                         @link Routing::TransformPathBuilder::UpdateConnectedPartList Routing::TransformPathBuilder::UpdateConnectedPartList@endlink 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddConnectedPartsInBuilder
            (
            );
            /** Update connected part list in builder as per selection or deselection of object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateConnectedPartList
            (
                const std::vector<NXOpen::NXObject *> & selectedObject /** Routing objects (segments, control
                                                                                               points, components, etc.) to transform */,
                const std::vector<NXOpen::NXObject *> & deselectedObject /** Routing objects (segments, control
                                                                                               points, components, etc.) to transform */
            );
            /** Adds selected objects into vector during selection 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateSelObjectsVector
            (
            );
            /** Sets collision object during the preview 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCollisionObject
            (
                NXOpen::NXObject * object /** Routing object */
            );
            /** Get attributes to be copied.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetCopiedAttributes
            (
            );
            /** Set attributes to be copied. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCopiedAttributes
            (
                NXOpen::Routing::CharacteristicList * charxData /** charx data */ 
            );
            /** Get attributes to be omitted.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetOmittedAttributes
            (
            );
            /** Set attributes to be omitted. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetOmittedAttributes
            (
                NXOpen::Routing::CharacteristicList * charxData /** charx data */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
