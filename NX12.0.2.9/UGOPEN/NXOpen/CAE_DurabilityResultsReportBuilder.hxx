#ifndef NXOpen_CAE_DURABILITYRESULTSREPORTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYRESULTSREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityResultsReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurabilityResultsReportBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _DurabilityResultsReportBuilderBuilder;
        class DurabilityResultsReportBuilderImpl;
        /** Represents the builder for reporting the durability results.  <br> To create a new instance of this class, use @link NXOpen::CAE::DurabilityManager::CreateDurabilityResultsReportBuilder  NXOpen::CAE::DurabilityManager::CreateDurabilityResultsReportBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        EventDamage </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EventLife </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FailureIndex </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FatigueSafetyFactor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MarginSafety </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StrengthSafetyFactor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseEvents </td> <td> 
         
        Active </td> </tr> 

        <tr><td> 
         
        UseHighlight </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurabilityResultsReportBuilder : public NXOpen::Builder
        {
            /** the event report options enum.*/
            public: enum UseEventsEnum
            {
                UseEventsEnumActive/** active */ ,
                UseEventsEnumAll/** all */ 
            };

            private: DurabilityResultsReportBuilderImpl * m_durabilityresultsreportbuilder_impl;
            private: friend class  _DurabilityResultsReportBuilderBuilder;
            protected: DurabilityResultsReportBuilder();
            public: ~DurabilityResultsReportBuilder();
            /**Returns  the use events pop-up menu 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurabilityResultsReportBuilder::UseEventsEnum UseEvents
            (
            );
            /**Sets  the use events pop-up menu 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetUseEvents
            (
                NXOpen::CAE::DurabilityResultsReportBuilder::UseEventsEnum useEvents /** useevents */ 
            );
            /**Returns  the strength safety factor toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool StrengthSafetyFactor
            (
            );
            /**Sets  the strength safety factor toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetStrengthSafetyFactor
            (
                bool strengthSafetyFactor /** strengthsafetyfactor */ 
            );
            /**Returns  the margin safety toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool MarginSafety
            (
            );
            /**Sets  the margin safety toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMarginSafety
            (
                bool marginSafety /** marginsafety */ 
            );
            /**Returns  the fatigue safety factor toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool FatigueSafetyFactor
            (
            );
            /**Sets  the fatigue safety factor toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetFatigueSafetyFactor
            (
                bool fatigueSafetyFactor /** fatiguesafetyfactor */ 
            );
            /**Returns  the failure index toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool FailureIndex
            (
            );
            /**Sets  the failure index toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetFailureIndex
            (
                bool failureIndex /** failureindex */ 
            );
            /**Returns  the event damage toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool EventDamage
            (
            );
            /**Sets  the event damage toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEventDamage
            (
                bool eventDamage /** eventdamage */ 
            );
            /**Returns  the event life toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool EventLife
            (
            );
            /**Sets  the event life toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEventLife
            (
                bool eventLife /** eventlife */ 
            );
            /**Returns  the free face indicator. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool FreeFaceIndicator
            (
            );
            /**Sets  the free face indicator. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetFreeFaceIndicator
            (
                bool freeFaceIndicator /** freefaceindicator */ 
            );
            /**Returns  the principal axis stability. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool PrincipalAxisStability
            (
            );
            /**Sets  the principal axis stability. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetPrincipalAxisStability
            (
                bool principalAxisStability /** principalaxisstability */ 
            );
            /**Returns  the load proportionality. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool LoadProportionality
            (
            );
            /**Sets  the load proportionality. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetLoadProportionality
            (
                bool loadProportionality /** loadproportionality */ 
            );
            /**Returns  the use highlight toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool UseHighlight
            (
            );
            /**Sets  the use highlight toggle 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetUseHighlight
            (
                bool useHighlight /** usehighlight */ 
            );
            /** Export durability results to a csv file. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void ExportResultsToCsv
            (
                const NXString & csvFilename /** durability report will be written-out to this file. */
            );
            /** Export durability results to a csv file. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            void ExportResultsToCsv
            (
                const char * csvFilename /** durability report will be written-out to this file. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
