#ifndef NXOpen_MECHATRONICS_CAMPROFILEBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_CAMPROFILEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_CamProfileBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class CamProfileBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class CamProfile;
    }
    class NXObject;
    namespace Mechatronics
    {
        class _CamProfileBuilderBuilder;
        class CamProfileBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::CamProfile NXOpen::Mechatronics::CamProfile@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::CamProfileCollection::CreateCamProfileBuilder  NXOpen::Mechatronics::CamProfileCollection::CreateCamProfileBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  CamProfileBuilder : public NXOpen::Builder
        {
            /** The master value unit indicates which type master joint is. */
            public: enum MasterValueUnit
            {
                MasterValueUnitLinear/** Linear */,
                MasterValueUnitRotary/** Rotary */,
                MasterValueUnitTime/** Time   */
            };

            /** Indicates which cyclic type should be take.The type of Cam Profile can be switched between non-cyclic,
                     cyclic and relative cyclic*/
            public: enum ProfileCyclicType
            {
                ProfileCyclicTypeRelativeCyclic/** In Relative Cyclic Cam Profiles the start point and 
                                                                                      end point of the profile do not necessarily have to be
                                                                                      equal. */,
                ProfileCyclicTypeCyclic/** In Cyclic Cam Profiles the points at the beginning
                                                                                      and the end of the Master Axis range need to be identical
                                                                                      with respect to Slave Axis value, slope and curve.*/,
                ProfileCyclicTypeNonCyclic/** Non-cyclic Cam Profiles are defined only in  
                                                                                      the defined master axis range. Exceeding this range
                                                                                      will cause an error.*/
            };

            /** The master value unit indicates which type master joint is. */
            public: enum SlaveValueUnit
            {
                SlaveValueUnitLinearPosition/** Linear Position */,
                SlaveValueUnitRotaryPosition/** Rotary Position */,
                SlaveValueUnitLinearSpeed/** Linear Speed    */,
                SlaveValueUnitRotarySpeed/** Rotary Speed    */
            };

             /** Contains segment information of a motion segment */
            public:
            struct Element
            {
                public: /** segment id                     */int Id;
                public: /** segment name                   */NXString SegmentName;
                public: /** segment type                   */int SegmentType;
                public: /** curve type                     */int CurveType;
                public: /** point slope                    */double Slope;
                public: /** point curvature                */double Curvature;
                public: /** segment master min             */double MasterMin;
                public: /** segment master max             */double MasterMax;
                public: /** segment slave min              */double SlaveMin;
                public: /** segment slave max              */double SlaveMax;
                public: /** segment nomalize lower define range */double Xn1;
                public: /** segment nomalize higher define range*/double Xn2;
                public: /** segment polynomial coefficient */double A0;
                public: /** segment polynomial coefficient */double A1;
                public: /** segment polynomial coefficient */double A2;
                public: /** segment polynomial coefficient */double A3;
                public: /** segment polynomial coefficient */double A4;
                public: /** segment polynomial coefficient */double A5;
                public: /** segment polynomial coefficient */double A6;
                public: /** segment polynomial coefficient */double Amplitude;
                public: /** segment polynomial coefficient */double AngularFrequency;
                public: /** segment polynomial coefficient */double Phase;
                public: /** if the segment slope equal with the previous segment*/bool SlopeEqualPrev;
                public: /** if the segment slope equal with the next segment*/bool SlopeEqualNext;
                public: /** if the segment curvature equal with the previous segment*/bool CurveEqualPrev;
                public: /** if the segment curvature equal with the next segment*/bool CurveEqualNext;
                public: /** segment slope of upper end */double Slope2;
                public: /** segment jerk */double Jerk;
                public: /** traversal segments type*/int FormulaType;
                public: /** traversal segment turning point factor */double LambdaValue;
                public: /** traversal segment optimization type of traverse type*/int OptimizeType;
                public: /** segment minimum slave value in normalized range*/double YnMin;
                public: /** segment maximum slave value in normalized range*/double YnMax;
                public: Element() :
                    Id(),
                    SegmentName(),
                    SegmentType(),
                    CurveType(),
                    Slope(),
                    Curvature(),
                    MasterMin(),
                    MasterMax(),
                    SlaveMin(),
                    SlaveMax(),
                    Xn1(),
                    Xn2(),
                    A0(),
                    A1(),
                    A2(),
                    A3(),
                    A4(),
                    A5(),
                    A6(),
                    Amplitude(),
                    AngularFrequency(),
                    Phase(),
                    SlopeEqualPrev(),
                    SlopeEqualNext(),
                    CurveEqualPrev(),
                    CurveEqualNext(),
                    Slope2(),
                    Jerk(),
                    FormulaType(),
                    LambdaValue(),
                    OptimizeType(),
                    YnMin(),
                    YnMax()
                {
                }
                /** Constructor for the Element struct. */ 
                public: Element(int idInitial /** segment id                     */, 
                        const NXString &segmentNameInitial /** segment name                   */, 
                        int segmentTypeInitial /** segment type                   */, 
                        int curveTypeInitial /** curve type                     */, 
                        double slopeInitial /** point slope                    */, 
                        double curvatureInitial /** point curvature                */, 
                        double masterMinInitial /** segment master min             */, 
                        double masterMaxInitial /** segment master max             */, 
                        double slaveMinInitial /** segment slave min              */, 
                        double slaveMaxInitial /** segment slave max              */, 
                        double xn1Initial /** segment nomalize lower define range */, 
                        double xn2Initial /** segment nomalize higher define range*/, 
                        double a0Initial /** segment polynomial coefficient */, 
                        double a1Initial /** segment polynomial coefficient */, 
                        double a2Initial /** segment polynomial coefficient */, 
                        double a3Initial /** segment polynomial coefficient */, 
                        double a4Initial /** segment polynomial coefficient */, 
                        double a5Initial /** segment polynomial coefficient */, 
                        double a6Initial /** segment polynomial coefficient */, 
                        double amplitudeInitial /** segment polynomial coefficient */, 
                        double angularFrequencyInitial /** segment polynomial coefficient */, 
                        double phaseInitial /** segment polynomial coefficient */, 
                        bool slopeEqualPrevInitial /** if the segment slope equal with the previous segment*/, 
                        bool slopeEqualNextInitial /** if the segment slope equal with the next segment*/, 
                        bool curveEqualPrevInitial /** if the segment curvature equal with the previous segment*/, 
                        bool curveEqualNextInitial /** if the segment curvature equal with the next segment*/, 
                        double slope2Initial /** segment slope of upper end */, 
                        double jerkInitial /** segment jerk */, 
                        int formulaTypeInitial /** traversal segments type*/, 
                        double lambdaValueInitial /** traversal segment turning point factor */, 
                        int optimizeTypeInitial /** traversal segment optimization type of traverse type*/, 
                        double ynMinInitial /** segment minimum slave value in normalized range*/, 
                        double ynMaxInitial /** segment maximum slave value in normalized range*/) :
                    Id(idInitial),
                    SegmentName(segmentNameInitial),
                    SegmentType(segmentTypeInitial),
                    CurveType(curveTypeInitial),
                    Slope(slopeInitial),
                    Curvature(curvatureInitial),
                    MasterMin(masterMinInitial),
                    MasterMax(masterMaxInitial),
                    SlaveMin(slaveMinInitial),
                    SlaveMax(slaveMaxInitial),
                    Xn1(xn1Initial),
                    Xn2(xn2Initial),
                    A0(a0Initial),
                    A1(a1Initial),
                    A2(a2Initial),
                    A3(a3Initial),
                    A4(a4Initial),
                    A5(a5Initial),
                    A6(a6Initial),
                    Amplitude(amplitudeInitial),
                    AngularFrequency(angularFrequencyInitial),
                    Phase(phaseInitial),
                    SlopeEqualPrev(slopeEqualPrevInitial),
                    SlopeEqualNext(slopeEqualNextInitial),
                    CurveEqualPrev(curveEqualPrevInitial),
                    CurveEqualNext(curveEqualNextInitial),
                    Slope2(slope2Initial),
                    Jerk(jerkInitial),
                    FormulaType(formulaTypeInitial),
                    LambdaValue(lambdaValueInitial),
                    OptimizeType(optimizeTypeInitial),
                    YnMin(ynMinInitial),
                    YnMax(ynMaxInitial)
                {
                }
            };

            private: CamProfileBuilderImpl * m_camprofilebuilder_impl;
            private: friend class  _CamProfileBuilderBuilder;
            protected: CamProfileBuilder();
            public: ~CamProfileBuilder();
            /**Returns  the cam profile name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the cam profile name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the cam profile name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the minimum master value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * MasterMinimum
            (
            );
            /**Returns  the maximum master value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * MasterMaximum
            (
            );
            /**Returns  the type of master joint 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::CamProfileBuilder::MasterValueUnit MasterUnit
            (
            );
            /**Sets  the type of master joint 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMasterUnit
            (
                NXOpen::Mechatronics::CamProfileBuilder::MasterValueUnit masterUnit /** masterunit */ 
            );
            /**Returns  the minimum slave  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SlaveMinimum
            (
            );
            /**Returns  the maximum slave value. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SlaveMaximum
            (
            );
            /**Returns  the type of slave joint or slave controller 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::CamProfileBuilder::SlaveValueUnit SlaveUnit
            (
            );
            /**Sets  the type of slave joint or slave controller 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSlaveUnit
            (
                NXOpen::Mechatronics::CamProfileBuilder::SlaveValueUnit slaveUnit /** slaveunit */ 
            );
            /**Returns  the cyclic type of a cam profile
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::CamProfileBuilder::ProfileCyclicType CyclicType
            (
            );
            /**Sets  the cyclic type of a cam profile
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCyclicType
            (
                NXOpen::Mechatronics::CamProfileBuilder::ProfileCyclicType cyclicType /** cyclictype */ 
            );
            /**Returns   the indicator that a cam profile is designed for a electronic cam 
             <br>  @deprecated Deprecated in NX10.0.0.  Set the boolean using @link Mechatronics::CamProfileBuilder::CheckingG2Continuity Mechatronics::CamProfileBuilder::CheckingG2Continuity@endlink  to query or edit it. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Set the boolean using Mechatronics::CamProfileBuilder::CheckingG2Continuity to query or edit it.") bool IsForElecCam
            (
            );
            /**Sets   the indicator that a cam profile is designed for a electronic cam 
             <br>  @deprecated Deprecated in NX10.0.0.  Set the boolean using @link Mechatronics::CamProfileBuilder::SetCheckingG2Continuity Mechatronics::CamProfileBuilder::SetCheckingG2Continuity@endlink  to query or edit it. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Set the boolean using Mechatronics::CamProfileBuilder::SetCheckingG2Continuity to query or edit it.") void SetForElecCam
            (
                bool isForElecCam /** isforeleccam */ 
            );
            /**Returns  the indicator that a cam profile should check G2 continuous or not 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool CheckingG2Continuity
            (
            );
            /**Sets  the indicator that a cam profile should check G2 continuous or not 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCheckingG2Continuity
            (
                bool checking /** checking */ 
            );
            /** Find the element index.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int FindElementIndex
            (
                const NXOpen::Mechatronics::CamProfileBuilder::Element & element /** element */ 
            );
            /** Add element to builder. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void AddElement
            (
                NXOpen::NXObject * part /** part */ ,
                const NXOpen::Mechatronics::CamProfileBuilder::Element & element /** element */ 
            );
            /** Edit the specific element of builder. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void EditElement
            (
                int index /**The element index */,
                NXOpen::NXObject * part /** part */ ,
                const NXOpen::Mechatronics::CamProfileBuilder::Element & element /** element */ 
            );
            /** Remove element by index. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void RemoveElementByIndex
            (
                int index /** index */ 
            );
            /** Clear elements . 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void ClearElements
            (
            );
            /** Set segment table. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSegmentTable
            (
                NXOpen::Mechatronics::CamProfile * segmentTableObject /** segmenttableobject */ 
            );
            /** Ask segment element.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::CamProfileBuilder::Element AskElementByIndex
            (
                int index /** index */ 
            );
            /** Ask segments length.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int AskElementsLength
            (
            );
            /** Switch segments table object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SwitchSegmentTable
            (
                NXOpen::Mechatronics::CamProfile * segmentTableObject /** segmenttableobject */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
