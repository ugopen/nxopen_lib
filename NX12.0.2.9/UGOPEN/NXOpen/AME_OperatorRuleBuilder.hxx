#ifndef NXOpen_AME_OPERATORRULEBUILDER_HXX_INCLUDED
#define NXOpen_AME_OPERATORRULEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_OperatorRuleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ConditionsBuilder.hxx>
#include <NXOpen/AME_ObjectConnectionDetailBuilder.hxx>
#include <NXOpen/AME_PlcRule.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class OperatorRuleBuilder;
    }
    namespace AME
    {
        class ConditionsBuilder;
    }
    namespace AME
    {
        class ObjectConnectionDetailBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _OperatorRuleBuilderBuilder;
        class OperatorRuleBuilderImpl;
        /** OperatorRule Dialog  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateOperatorRuleBuilder  NXOpen::AME::AMEManager::CreateOperatorRuleBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  OperatorRuleBuilder : public NXOpen::Builder
        {
            /** Enum of negation value */
            public: enum NegationValue
            {
                NegationValueFalse/** false */ ,
                NegationValueTrue/** true */ 
            };

            /** Enum of parameter type */
            public: enum ParameterType
            {
                ParameterTypeInput/** input */ ,
                ParameterTypeOutput/** output */ 
            };

            private: OperatorRuleBuilderImpl * m_operatorrulebuilder_impl;
            private: friend class  _OperatorRuleBuilderBuilder;
            protected: OperatorRuleBuilder();
            public: ~OperatorRuleBuilder();
            /**Returns  the OperatorType 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcRule::Type OperatorType
            (
            );
            /**Sets  the OperatorType 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetOperatorType
            (
                NXOpen::AME::PlcRule::Type operatorType /** operatortype */ 
            );
            /**Returns  the rule name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString RuleName
            (
            );
            /**Sets  the rule name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetRuleName
            (
                const NXString & ruleName /** rulename */ 
            );
            /**Sets  the rule name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetRuleName
            (
                const char * ruleName /** rulename */ 
            );
            /**Returns  the conditions block
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ConditionsBuilder * Conditions
            (
            );
            /**Returns  the Select Parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcRule::Type ParameterRuleType
            (
            );
            /**Sets  the Select Parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetParameterRuleType
            (
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ 
            );
            /**Returns  the Object Selection for Global Variable
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * Port
            (
            );
            /**Returns  the Variable component
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ObjectConnectionDetailBuilder * ObjectConnectionDetail
            (
            );
            /**Returns  the Negation of parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OperatorRuleBuilder::NegationValue Negation
            (
            );
            /**Sets  the Negation of parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNegation
            (
                NXOpen::AME::OperatorRuleBuilder::NegationValue negation /** negation */ 
            );
            /** Create new parameter @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * CreateParameter
            (
                NXOpen::AME::OperatorRuleBuilder::ParameterType parameterType /** parametertype */ ,
                int atIndex /** atindex */ 
            );
            /** Update existing parameter @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * UpdateParameter
            (
                NXOpen::AME::OperatorRuleBuilder::ParameterType parameterType /** parametertype */ ,
                int index /** index */ 
            );
            /** Deletes parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteParameter
            (
                NXOpen::AME::OperatorRuleBuilder::ParameterType parameterType /** parametertype */ ,
                int index /** index */ 
            );
            /** Move existing parameter
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveParameter
            (
                NXOpen::AME::OperatorRuleBuilder::ParameterType parameterType /** parametertype */ ,
                int moveFromIndex /** movefromindex */ ,
                int moveToIndex /** movetoindex */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
