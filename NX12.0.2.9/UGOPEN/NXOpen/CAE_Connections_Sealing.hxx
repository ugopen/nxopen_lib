#ifndef NXOpen_CAE_CONNECTIONS_SEALING_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_SEALING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Sealing.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_CoordinatesSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_CurveLocation.hxx>
#include <NXOpen/CAE_Connections_FeEdgesLocation.hxx>
#include <NXOpen/CAE_Connections_Location.hxx>
#include <NXOpen/CAE_Connections_NodeSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_PointSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/CAE_FEElemEdge.hxx>
#include <NXOpen/CAE_FENode.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Connections_IConnection.hxx>
#include <NXOpen/CAE_Connections_ICsys.hxx>
#include <NXOpen/CAE_Connections_IFlangesContainer.hxx>
#include <NXOpen/CAE_Connections_ILineDiscretization.hxx>
#include <NXOpen/CAE_Connections_ILineOffset.hxx>
#include <NXOpen/CAE_Connections_ILocationsContainer.hxx>
#include <NXOpen/CAE_Connections_ILocationsWithDiscretizationContainer.hxx>
#include <NXOpen/CAE_Connections_IStiffness.hxx>
#include <NXOpen/CAE_Connections_ITolerance.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class Sealing;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        namespace Connections
        {
            class CoordinatesSeriesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class CurveLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class FeEdgesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IConnection;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ICsys;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IFlangesContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILineDiscretization;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILineOffset;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsWithDiscretizationContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStiffness;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ITolerance;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class Location;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodeSeriesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class PointSeriesLocation;
        }
    }
    namespace CAE
    {
        class FEElemEdge;
    }
    namespace CAE
    {
        class FENode;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    class IBaseCurve;
    class INXObject;
    class Point;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _SealingBuilder;
            class SealingImpl;
            /**  Sealing connection. Use this interface to set/get properties and parameters of the spot weld connection.   <br> To obtain an instance of this object use the connection creators on the @link CAE::Connections::Folder CAE::Connections::Folder@endlink   <br> 
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Sealing : public NXOpen::CAE::Connections::IConnection, public virtual NXOpen::CAE::Connections::ITolerance, public virtual NXOpen::CAE::Connections::IFlangesContainer, public virtual NXOpen::CAE::Connections::ILocationsContainer, public virtual NXOpen::CAE::Connections::ILineOffset, public virtual NXOpen::CAE::Connections::ILineDiscretization, public virtual NXOpen::CAE::Connections::IStiffness, public virtual NXOpen::CAE::Connections::ICsys, public virtual NXOpen::CAE::Connections::ILocationsWithDiscretizationContainer
            {
                private: SealingImpl * m_sealing_impl;
                private: friend class  _SealingBuilder;
                protected: Sealing();
                public: ~Sealing();
                /**Returns  the target type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool WithOrientation
                (
                );
                /**Sets  the target type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetWithOrientation
                (
                    bool orientation /** Orientation flag */
                );
                /**Returns  the maximum distance from definition point to center of support element 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxDistCGToElemCG
                (
                );
                /**Returns  the maximum normal distance from definition point to center of element 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxNormalDistCGToFlanges
                (
                );
                /**Returns  the maximum angle of normals with the projection surface 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxAngleBetweenNormals
                (
                );
                /**Returns  the projection tolerance 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ProjectTolerance
                (
                );
                /** Gets entities from flange. These can be meshes, elements, groups.  @return  Flange entities 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetFlangeEntities
                (
                    int flangeIndex /** flangeindex */ 
                );
                /** Add entities to flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                );
                /** Remove entities from flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                );
                /**Returns  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int NumberOfFlanges
                (
                );
                /**Sets  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetNumberOfFlanges
                (
                    int numberOfFlanges /** numberofflanges */ 
                );
                /** Retrieve the max number of flanges supported by this connection  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual int GetMaxNumberOfFlanges
                (
                );
                /** Retrieve the minimmum number of flanges supported by this connection  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual int GetMinNumberOfFlanges
                (
                );
                /** Get a node location to connection location list  @return  The location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::Location * GetLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The location index */
                );
                /** Remove a location from connection location list 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The location index */
                );
                /** Get a node location to connection location list  @return  The number of locations 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int GetNumberOfLocations
                (
                    int indexOfDefinition /** The index of definition  */
                );
                /** Convert a location to coordinates. The location is given by its index  @return  The created coordinates type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::Location * ConvertLocationToCoordinatesType
                (
                    int indexOfDefinition /** The index of definition  */,
                    int index /** The location index */
                );
                /** Gets the number of line offset definitions  @return  The number of definitions 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int GetNumberOfDefinitions
                (
                );
                /** Move the location by number of positions  @return  The operation result 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool MoveLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The index of location */,
                    int numberOfPositions /** The number of positions to move the location */
                );
                /** Gets the line offset vector  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Direction * GetOffsetVector
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ 
                );
                /** Sets the line offset vector 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetOffsetVector
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ ,
                    NXOpen::Direction * offsetvector /** offsetvector */ 
                );
                /** Gets the line offset distance  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * GetOffsetDistance
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ 
                );
                /**Returns  the usage of original nodes of connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseOriginalNodesOfConnection
                (
                );
                /**Sets  the usage of original nodes of connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseOriginalNodesOfConnection
                (
                    bool use /** use */ 
                );
                /**Returns  the usage of max length stepype 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseMaxLengthStep
                (
                );
                /**Sets  the usage of max length stepype 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseMaxLengthStep
                (
                    bool use /** use */ 
                );
                /**Returns  the line Discretization distance from start 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * DistanceFromStart
                (
                );
                /**Returns  the line Discretization distance to end 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * DistanceToEnd
                (
                );
                /**Returns  the line Discretization length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * LengthStep
                (
                );
                /**Returns  the line Discretization max length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxLengthStep
                (
                );
                /**Returns  the X stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * XStiffnessConstant
                (
                );
                /**Returns  the Y stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * YStiffnessConstant
                (
                );
                /**Returns  the Z stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ZStiffnessConstant
                (
                );
                /**Returns  the RX stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RxStiffnessConstant
                (
                );
                /**Returns  the RY stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RyStiffnessConstant
                (
                );
                /**Returns  the RZ stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RzStiffnessConstant
                (
                );
                /**Returns  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::CsysType CsysType
                (
                );
                /**Sets  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsysType
                (
                    NXOpen::CAE::Connections::CsysType csysType /** csystype */ 
                );
                /**Returns  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CoordinateSystem * Csys
                (
                );
                /**Sets  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsys
                (
                    NXOpen::CoordinateSystem * csys /** csys */ 
                );
                /** Gets supported csys types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::CsysType> GetSupportedCsysTypes
                (
                );
                /** Adds a series of nodes location to connection location list  @return  The node series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::NodeSeriesLocation * AddLocationSeriesOfNodes
                (
                    int indexOfDefinition /** The index of definition  */,
                    const std::vector<NXOpen::CAE::FENode *> & nodes /** Nodes used for location */
                );
                /** Adds a series of points location to connection location list  @return  The point series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::PointSeriesLocation * AddLocationSeriesOfPoints
                (
                    int indexOfDefinition /** The index of definition  */,
                    const std::vector<NXOpen::Point *> & points /** Points used for location */
                );
                /** Adds a series of coordinates location to connection location list  @return  The coord series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::CoordinatesSeriesLocation * AddLocationSeriesOfCoordinates
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    const std::vector<NXOpen::Point3d> & coordinates /** The location coordinates */
                );
                /** Adds a curve location to connection location list  @return  The created curve type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::CurveLocation * AddLocationCurve
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    NXOpen::IBaseCurve * curve /** Curve used for location creation */
                );
                /** Adds Fe Edges to connection location list  @return  The created edge group type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::FeEdgesLocation * AddLocationFeEdges
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    const std::vector<NXOpen::CAE::FEElemEdge *> & edges /** Edges used for location */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
