#ifndef NXOpen_CAM_CUTTEREXPORT_HXX_INCLUDED
#define NXOpen_CAM_CUTTEREXPORT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CutterExport.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CutterExport;
    }
    namespace CAM
    {
        class _CutterExportBuilder;
        class CutterExportImpl;
        /** Represents Cutter Export Builder 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CutterExport : public NXOpen::TaggedObject
        {
            /** the save flag options*/
            public: enum SaveFlags
            {
                SaveFlagsReplace/** Replace the one exist in tool library */,
                SaveFlagsCreateNew/** Create a new entry in tool library */
            };

            /** the holder export status*/
            public: enum HolderExportStatus
            {
                HolderExportStatusOk/** Holder has been export successfully */,
                HolderExportStatusUnchanged/** Holder in library unchanged*/,
                HolderExportStatusUndefined/** Holder is not defined */,
                HolderExportStatusUntried/** Holder export didn't happen */,
                HolderExportStatusFail/** Holder export failed */
            };

            /** the trackpoint export status*/
            public: enum TrackpointExportStatus
            {
                TrackpointExportStatusOk/** Trackpoint has been export successfully */,
                TrackpointExportStatusUnchanged/** Trackpoint in library unchanged */,
                TrackpointExportStatusUndefined/** Trackpoint is not defined */,
                TrackpointExportStatusUntried/** Trackpoint export didn't happen */,
                TrackpointExportStatusFail/** Trackpoint export failed */
            };

            private: CutterExportImpl * m_cutterexport_impl;
            private: friend class  _CutterExportBuilder;
            protected: CutterExport();
            public: ~CutterExport();
            /**Returns  the export type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutterExport::SaveFlags SaveFlag
            (
            );
            /**Sets  the export type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveFlag
            (
                NXOpen::CAM::CutterExport::SaveFlags saveFlag /** The export type */
            );
            /**Returns  the export type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutterExport::SaveFlags HolderSaveFlag
            (
            );
            /**Sets  the export type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHolderSaveFlag
            (
                NXOpen::CAM::CutterExport::SaveFlags saveFlag /** The export type */
            );
            /**Returns  the target class for exporting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TargetClass
            (
            );
            /**Sets  the target class for exporting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetClass
            (
                const NXString & targetClass /** The target class */
            );
            /**Sets  the target class for exporting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetTargetClass
            (
                const char * targetClass /** The target class */
            );
            /**Returns  the libref of the export cutter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Libref
            (
            );
            /**Sets  the libref of the export cutter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLibref
            (
                const NXString & libref /** The libref */
            );
            /**Sets  the libref of the export cutter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetLibref
            (
                const char * libref /** The libref */
            );
            /**Returns  the libref of the export holder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString HolderLibref
            (
            );
            /**Sets  the libref of the export holder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHolderLibref
            (
                const NXString & libref /** The libref */
            );
            /**Sets  the libref of the export holder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetHolderLibref
            (
                const char * libref /** The libref */
            );
            /** The flag indicate export status of holder  @return  The holder export status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutterExport::HolderExportStatus GetHolderExportStatus
            (
            );
            /** The flag indicate export status of trackpoint  @return  The trackpoint export status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutterExport::TrackpointExportStatus GetTrackpointExportStatus
            (
            );
            /** The attributes and values 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttributeAndValue
            (
                std::vector<NXString> & attributes /** The attributes */,
                std::vector<NXString> & values /** The values */
            );
            /** The cutter export entry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void Export
            (
            );
            /** The holder export entry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportHolder
            (
            );
            /** The valid target classes of the cutter @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetValidTargetClasses
            (
                NXOpen::CAM::CutterExport::SaveFlags saveFlag /** saveflag */ ,
                const NXString & replaceLibref /** replacelibref */ 
            );
            /** The valid target classes of the cutter @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetValidTargetClasses
            (
                NXOpen::CAM::CutterExport::SaveFlags saveFlag /** saveflag */ ,
                const char * replaceLibref /** replacelibref */ 
            );
            /** The valid attributes, target class in the builder
                    needs to be set before this method is called @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetValidAttributes
            (
                const NXString & targetClass /** targetclass */ 
            );
            /** The valid attributes, target class in the builder
                    needs to be set before this method is called @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetValidAttributes
            (
                const char * targetClass /** targetclass */ 
            );
            /** The valid values of certain attribute
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetValidValuesOfAttribute
            (
                const NXString & attr /** attr */ ,
                std::vector<NXString> & valueIds /** valueids */ ,
                std::vector<NXString> & valueTexts /** valuetexts */ 
            );
            /** The valid values of certain attribute
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void GetValidValuesOfAttribute
            (
                const char * attr /** attr */ ,
                std::vector<NXString> & valueIds /** valueids */ ,
                std::vector<NXString> & valueTexts /** valuetexts */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
