#ifndef NXOpen_ASSEMBLIES_CLEARANCESET_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_CLEARANCESET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ClearanceSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_ClearanceAnalysisBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ClearanceSet;
    }
    class DisplayableObject;
    class NXObject;
    namespace Assemblies
    {
        class _ClearanceSetBuilder;
        class ClearanceSetImpl;
        /** Represents @link NXOpen::Assemblies::ClearanceSet NXOpen::Assemblies::ClearanceSet@endlink . Input to this class can be PSM facet objects.
          <br> Currently we don't support KF at this time.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ClearanceSet : public NXOpen::NXObject
        {
            /** Specify whether to reanalyze out-of-date excluded pairs. */
            public: enum ReanalyzeOutOfDateExcludedPairs
            {
                ReanalyzeOutOfDateExcludedPairsCustomerDefault/** customer default */ ,
                ReanalyzeOutOfDateExcludedPairsTrue/** true */ ,
                ReanalyzeOutOfDateExcludedPairsFalse/** false */ 
            };

            /** Specify the job aborted status */
            public: enum JobStatus
            {
                JobStatusNotAborted/** not aborted */ ,
                JobStatusAbortedByUser/** aborted by user */ ,
                JobStatusAbortedOnError/** aborted on error */ 
            };

            /** Specify the dataset copy mode */
            public: enum CopyMode
            {
                CopyModeNoResults/** no results */ ,
                CopyModeResults/** results */ ,
                CopyModeInterfBodies/** interf bodies */ 
            };

            /** The analysis method to use when reanalyzing a pair. */
            public: enum ReanalyzePairCalculationMethod
            {
                ReanalyzePairCalculationMethodUseStoredMethod/** Use the clearance set's defined analysis method. */,
                ReanalyzePairCalculationMethodLightweight/** lightweight */ ,
                ReanalyzePairCalculationMethodExactIfLoaded/** exact if loaded */ ,
                ReanalyzePairCalculationMethodExact/** exact */ 
            };

            /** Specify the type of interference */
            public: enum InterferenceType
            {
                InterferenceTypeSoft/** soft */ ,
                InterferenceTypeTouch/** touch */ ,
                InterferenceTypeHard/** hard */ ,
                InterferenceTypeCont1In2/** cont1in2 */ ,
                InterferenceTypeCont2In1/** cont2in1 */ ,
                InterferenceTypeNoInterference/** no interference */ 
            };

            /** The result of penetration depth calculation */
            public: enum PenetrationDepthResult
            {
                PenetrationDepthResultNotAttempted/** not attempted */ ,
                PenetrationDepthResultSuccess/** success */ ,
                PenetrationDepthResultNoClash/** no clash */ ,
                PenetrationDepthResultTouching/** touching */ ,
                PenetrationDepthResultBothSheets/** both sheets */ ,
                PenetrationDepthResultUnspecifiedError/** unspecified error */ 
            };

            /** Specify the status of the interference */
            public: enum InterferenceStatus
            {
                InterferenceStatusUndetermined/** undetermined */ ,
                InterferenceStatusResolved/** resolved */ ,
                InterferenceStatusIrrelevant/** irrelevant */ ,
                InterferenceStatusPending/** pending */ 
            };

             /** Summary of the most recent Clearance Analysis results */
            public:
            struct Summary
            {
                public: /** The starting time of the last
                                                           analysis run (in seconds since
                                                           00:00:00 1/1/1970.
                                                        */int StartTime;
                public: /** The ending time of the last
                                                           analysis run (in seconds since
                                                           00:00:00 1/1/1970.
                                                        */int EndTime;
                public: /** the total analysis time (in secs.) */int RunTime;
                public: /** The version of this analysis run.
                                                           This is a positive number.
                                                        */int Version;
                public: /** The analysis mode.  One of
                                                                                   @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeLightweight NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeLightweight@endlink ,
                                                                                   @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExactifLoaded NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExactifLoaded@endlink ,
                                                                                   @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExact NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExact@endlink .
                                                                               */NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodType AnalysisMode;
                public: /** Number of collections analyzed.
                                                           Can be either 1 or 2.
                                                        */int NumCollections;
                public: /** The number of objects in collection 1.   */int NumCollection1;
                public: /** The number of objects in collection 2.   */int NumCollection2;
                public: /** The number of pairs built from
                                                           the object collections.
                                                        */int NumPairs;
                public: /** The number of pairs that were
                                                           excluded from analysis, either
                                                           due to exclusion rules or
                                                           explicit pair exclusion.
                                                        */int NumExcludedPairs;
                public: /** The number of pairs that had
                                                           changed since the previous
                                                           clearance analysis.
                                                        */int NumChangedPairs;
                public: /** The number of objects that had
                                                           changed since the previous
                                                           clearance analysis.
                                                        */int NumChangedObjs;
                public: /** The total number of pairs that
                                                           underwent analysis.
                                                        */int NumCheckedPairs;
                public: /** The total number of new hard
                                                           interferences.
                                                        */int NumNewHard;
                public: /** The total number of new soft
                                                           interferences.
                                                        */int NumNewSoft;
                public: /** The total number of new touching
                                                           interferences.
                                                        */int NumNewTouching;
                public: /** The total number of new containment
                                                           interferences.
                                                        */int NumNewContainment;
                public: /** The total number of new
                                                           interferences.
                                                        */int NumNewAllInterf;
                public: /** The total number of hard
                                                           interferences.
                                                        */int NumHard;
                public: /** The total number of soft
                                                           interferences.
                                                        */int NumSoft;
                public: /** The total number of touching
                                                           interferences.
                                                        */int NumTouching;
                public: /** The total number of containment
                                                           interferences.
                                                        */int NumContainment;
                public: /** The total number of interferences. */int NumAllInterf;
                public: /** Indicates if the analysis was
                                                                                   aborted.  Valid values are
                                                                                   @link NXOpen::Assemblies::ClearanceSet::JobStatusNotAborted NXOpen::Assemblies::ClearanceSet::JobStatusNotAborted@endlink ,
                                                                                   @link NXOpen::Assemblies::ClearanceSet::JobStatusAbortedByUser NXOpen::Assemblies::ClearanceSet::JobStatusAbortedByUser@endlink  and
                                                                                   @link NXOpen::Assemblies::ClearanceSet::JobStatusAbortedOnError NXOpen::Assemblies::ClearanceSet::JobStatusAbortedOnError@endlink .
                                                                                */NXOpen::Assemblies::ClearanceSet::JobStatus JobStatus;
                public: /** The number of assembly zones used
                                                           by the analysis (batch only).
                                                        */int NumZones;
                public: Summary() :
                    StartTime(),
                    EndTime(),
                    RunTime(),
                    Version(),
                    AnalysisMode((NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodType)0),
                    NumCollections(),
                    NumCollection1(),
                    NumCollection2(),
                    NumPairs(),
                    NumExcludedPairs(),
                    NumChangedPairs(),
                    NumChangedObjs(),
                    NumCheckedPairs(),
                    NumNewHard(),
                    NumNewSoft(),
                    NumNewTouching(),
                    NumNewContainment(),
                    NumNewAllInterf(),
                    NumHard(),
                    NumSoft(),
                    NumTouching(),
                    NumContainment(),
                    NumAllInterf(),
                    JobStatus((NXOpen::Assemblies::ClearanceSet::JobStatus)0),
                    NumZones()
                {
                }
                /** Constructor for the Summary struct. */ 
                public: Summary(int startTimeInitial /** The starting time of the last
                                                                   analysis run (in seconds since
                                                                   00:00:00 1/1/1970.
                                                                */, 
                        int endTimeInitial /** The ending time of the last
                                                                   analysis run (in seconds since
                                                                   00:00:00 1/1/1970.
                                                                */, 
                        int runTimeInitial /** the total analysis time (in secs.) */, 
                        int versionInitial /** The version of this analysis run.
                                                                   This is a positive number.
                                                                */, 
                        NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodType analysisModeInitial /** The analysis mode.  One of
                                                                                           @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeLightweight NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeLightweight@endlink ,
                                                                                           @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExactifLoaded NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExactifLoaded@endlink ,
                                                                                           @link NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExact NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodTypeExact@endlink .
                                                                                       */, 
                        int numCollectionsInitial /** Number of collections analyzed.
                                                                   Can be either 1 or 2.
                                                                */, 
                        int numCollection1Initial /** The number of objects in collection 1.   */, 
                        int numCollection2Initial /** The number of objects in collection 2.   */, 
                        int numPairsInitial /** The number of pairs built from
                                                                   the object collections.
                                                                */, 
                        int numExcludedPairsInitial /** The number of pairs that were
                                                                   excluded from analysis, either
                                                                   due to exclusion rules or
                                                                   explicit pair exclusion.
                                                                */, 
                        int numChangedPairsInitial /** The number of pairs that had
                                                                   changed since the previous
                                                                   clearance analysis.
                                                                */, 
                        int numChangedObjsInitial /** The number of objects that had
                                                                   changed since the previous
                                                                   clearance analysis.
                                                                */, 
                        int numCheckedPairsInitial /** The total number of pairs that
                                                                   underwent analysis.
                                                                */, 
                        int numNewHardInitial /** The total number of new hard
                                                                   interferences.
                                                                */, 
                        int numNewSoftInitial /** The total number of new soft
                                                                   interferences.
                                                                */, 
                        int numNewTouchingInitial /** The total number of new touching
                                                                   interferences.
                                                                */, 
                        int numNewContainmentInitial /** The total number of new containment
                                                                   interferences.
                                                                */, 
                        int numNewAllInterfInitial /** The total number of new
                                                                   interferences.
                                                                */, 
                        int numHardInitial /** The total number of hard
                                                                   interferences.
                                                                */, 
                        int numSoftInitial /** The total number of soft
                                                                   interferences.
                                                                */, 
                        int numTouchingInitial /** The total number of touching
                                                                   interferences.
                                                                */, 
                        int numContainmentInitial /** The total number of containment
                                                                   interferences.
                                                                */, 
                        int numAllInterfInitial /** The total number of interferences. */, 
                        NXOpen::Assemblies::ClearanceSet::JobStatus jobStatusInitial /** Indicates if the analysis was
                                                                                           aborted.  Valid values are
                                                                                           @link NXOpen::Assemblies::ClearanceSet::JobStatusNotAborted NXOpen::Assemblies::ClearanceSet::JobStatusNotAborted@endlink ,
                                                                                           @link NXOpen::Assemblies::ClearanceSet::JobStatusAbortedByUser NXOpen::Assemblies::ClearanceSet::JobStatusAbortedByUser@endlink  and
                                                                                           @link NXOpen::Assemblies::ClearanceSet::JobStatusAbortedOnError NXOpen::Assemblies::ClearanceSet::JobStatusAbortedOnError@endlink .
                                                                                        */, 
                        int numZonesInitial /** The number of assembly zones used
                                                                   by the analysis (batch only).
                                                                */) :
                    StartTime(startTimeInitial),
                    EndTime(endTimeInitial),
                    RunTime(runTimeInitial),
                    Version(versionInitial),
                    AnalysisMode(analysisModeInitial),
                    NumCollections(numCollectionsInitial),
                    NumCollection1(numCollection1Initial),
                    NumCollection2(numCollection2Initial),
                    NumPairs(numPairsInitial),
                    NumExcludedPairs(numExcludedPairsInitial),
                    NumChangedPairs(numChangedPairsInitial),
                    NumChangedObjs(numChangedObjsInitial),
                    NumCheckedPairs(numCheckedPairsInitial),
                    NumNewHard(numNewHardInitial),
                    NumNewSoft(numNewSoftInitial),
                    NumNewTouching(numNewTouchingInitial),
                    NumNewContainment(numNewContainmentInitial),
                    NumNewAllInterf(numNewAllInterfInitial),
                    NumHard(numHardInitial),
                    NumSoft(numSoftInitial),
                    NumTouching(numTouchingInitial),
                    NumContainment(numContainmentInitial),
                    NumAllInterf(numAllInterfInitial),
                    JobStatus(jobStatusInitial),
                    NumZones(numZonesInitial)
                {
                }
            };

            private: ClearanceSetImpl * m_clearanceset_impl;
            private: friend class  _ClearanceSetBuilder;
            protected: ClearanceSet();
            public: ~ClearanceSet();
            /** Perform an analysis on this clearance set with option to specify whether
                    out-of-date excluded pairs will be reanalyzed. You can specify to use the
                    Customer Default setting, or you can specify a true or false option to override
                    the Customer Default. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void PerformAnalysis
            (
                NXOpen::Assemblies::ClearanceSet::ReanalyzeOutOfDateExcludedPairs reanalyzeOption /** reanalyzeoption */ 
            );
            /** Reanalyze a set of interferences using the specified analysis method.  The interferences
                    must be specified using two parallel arrays: the objects in the first interference should
                    be given in the first elements of the arrays, the objects in the second interference should
                    be given in the second elements of the arrays, etc. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReanalyzePairs
            (
                const std::vector<NXOpen::DisplayableObject *> & firstObjects /** The first object of each interference.  Must be the same size as secondObjects. */,
                const std::vector<NXOpen::DisplayableObject *> & secondObjects /** The second object of each interference.  Must be the same size as firstObjects. */,
                NXOpen::Assemblies::ClearanceSet::ReanalyzePairCalculationMethod calculationMethod /** calculationmethod */ 
            );
            /** Construct interference geometry for a set of hard interferences.  The interferences
                    must be specified using two parallel arrays: the objects in the first interference should
                    be given in the first elements of the arrays, the objects in the second interference should
                    be given in the second elements of the arrays, etc. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void CreateInterferenceGeometry
            (
                const std::vector<NXOpen::DisplayableObject *> & firstObjects /** The first object of each interference.  Must be the same size as secondObjects. */,
                const std::vector<NXOpen::DisplayableObject *> & secondObjects /** The second object of each interference.  Must be the same size as firstObjects. */
            );
            /** Calculate penetration depth for a set of hard interferences.  The interferences
                    must be specified using two parallel arrays: the objects in the first interference should
                    be given in the first elements of the arrays, the objects in the second interference should
                    be given in the second elements of the arrays, etc. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void CalculatePenetrationDepth
            (
                const std::vector<NXOpen::DisplayableObject *> & firstObjects /** The first object of each interference.  Must be the same size as secondObjects. */,
                const std::vector<NXOpen::DisplayableObject *> & secondObjects /** The second object of each interference.  Must be the same size as firstObjects. */
            );
            /** Delete this clearance set 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Delete
            (
            );
            /** Gets the version of a clearance analysis dataset. The version indicates
                    how many times clearance analysis has been run on a data set. If the
                    version is zero, then the analysis has never been run.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetVersion
            (
            );
            /** Inquires the data associated with a given pair of interfering objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetInterferenceData
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */,
                NXOpen::Assemblies::ClearanceSet::InterferenceType* type /** the interference type */,
                bool* newInterference /** the flag for new interference */,
                std::vector<NXOpen::DisplayableObject *> & interfBodies /** the list of interference bodies */,
                NXOpen::Point3d* point1 /** a point on the first object */,
                NXOpen::Point3d* point2 /** a point on the second object */,
                NXString* text /** text associated with the interference */,
                int* interfNum /** a unique number for the interference */,
                int* config /** the configuration index */,
                int* depthResult /** result status of penetration depth calculation */,
                double* depth /** depth of penetration */,
                NXOpen::Vector3d* direction /** a unit vector indicating the direction of penetration */,
                NXOpen::Point3d* minPoint /** the points on the interference region at the extremes of depth */,
                NXOpen::Point3d* maxPoint /** the points on the interference region at the extremes of depth */
            );
            /** Inquires a summary of the results of the most recent clearance analysis run. 
                    The @link NXOpen::Assemblies::ClearanceSet::Summary NXOpen::Assemblies::ClearanceSet::Summary@endlink  structure is 
                    filled with analysis statistics, including numbers of objects, number of pairs,
                    number of checked pairs, and number of interferences of each type. If
                    clearance analysis has never been run on the data set, an error is
                    returned.  @return  the summary structure 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ClearanceSet::Summary GetResults
            (
            );
            /** Inquires the number of interferences stored in a clearance analysis
                    data set. If clearance analysis has never been run on the data set, an
                    error is returned.  @return  the number of interferences associated with the dataset 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetNumberOfInterferences
            (
            );
            /** Deletes the interference for a given object pair. Both objects must be
                    members of the given data set. If the object pair does not refer to an
                    existing interference, an error is returned. All data associated with the
                    interference is deleted. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteInterference
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */
            );
            /** Inquires if an object pair has changed since the last analysis run. Both
                    objects must be solid bodies or facet models that are members of the
                    clearance analysis data set. If either object has changed since the last
                    analysis run, then isChanged is returned as TRUE. If no analysis has
                    been run on either of the objects, TRUE is returned.  @return  Has this pair changed since the last analysis run? 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetIsPairChanged
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */
            );
            /** Cycles the interference in a clearance analysis data set. Interferences
                    are stored as object pairs. Start the cycling using NULL as the
                    input values for both object1 and object2. This routine passes back the
                    tags of the objects that define the next interference. NULL
                    returned for either object indicates the end of the cycling. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetNextInterference
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair of the current interference */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair of the current interference */,
                NXOpen::DisplayableObject ** nextObject1 /** the first object in the pair of the next interference */,
                NXOpen::DisplayableObject ** nextObject2 /** the second object in the pair of the next interference */
            );
            /** Makes a copy of a dataset.  You must supply a unique name.  There are three
                    modes in which to copy the dataset: @link NXOpen::Assemblies::ClearanceSet::CopyModeNoResults NXOpen::Assemblies::ClearanceSet::CopyModeNoResults@endlink  
                    only copies the setup data.  The version of the new dataset is set to zero (meaning clearance analysis 
                    has not been run);  @link NXOpen::Assemblies::ClearanceSet::CopyModeResults NXOpen::Assemblies::ClearanceSet::CopyModeResults@endlink  makes a copy of the current 
                    analysis results, but not the interference bodies; @link NXOpen::Assemblies::ClearanceSet::CopyModeInterfBodies NXOpen::Assemblies::ClearanceSet::CopyModeInterfBodies@endlink  
                    makes a complete copy of the results. The name must  be less than MAX_LINE_SIZE characters long  @return  the dataset that is copied 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ClearanceSet * Copy
            (
                const NXString & name /** the name of the new dataset */,
                NXOpen::Assemblies::ClearanceSet::CopyMode mode /** copy mode */
            );
            /** Makes a copy of a dataset.  You must supply a unique name.  There are three
                    modes in which to copy the dataset: @link NXOpen::Assemblies::ClearanceSet::CopyModeNoResults NXOpen::Assemblies::ClearanceSet::CopyModeNoResults@endlink  
                    only copies the setup data.  The version of the new dataset is set to zero (meaning clearance analysis 
                    has not been run);  @link NXOpen::Assemblies::ClearanceSet::CopyModeResults NXOpen::Assemblies::ClearanceSet::CopyModeResults@endlink  makes a copy of the current 
                    analysis results, but not the interference bodies; @link NXOpen::Assemblies::ClearanceSet::CopyModeInterfBodies NXOpen::Assemblies::ClearanceSet::CopyModeInterfBodies@endlink  
                    makes a complete copy of the results. The name must  be less than MAX_LINE_SIZE characters long  @return  the dataset that is copied 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Assemblies::ClearanceSet * Copy
            (
                const char * name /** the name of the new dataset */,
                NXOpen::Assemblies::ClearanceSet::CopyMode mode /** copy mode */
            );
            /** Associates a text string to an interfering object pair. Both objects must
                    be members of the given dataset. If the object pair does not refer to
                    an existing interference, an error is returned. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetInterferenceText
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */,
                const NXString & text /** the name of the new dataset */
            );
            /** Associates a text string to an interfering object pair. Both objects must
                    be members of the given dataset. If the object pair does not refer to
                    an existing interference, an error is returned. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetInterferenceText
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */,
                const char * text /** the name of the new dataset */
            );
            /** Detects whether a clearance set was defined with settings which are obsolete/no longer supported.  For example,
                    prior to NX 9.0, an optional setting "ignore mated pairs" was available.  Existing results may still be read
                    from a clearance set with obsolete settings, but the next time analysis is performed, the obsolete settings
                    will be removed and all existing results cleared.
                    Optionally, this method can perform any required cleanup now, instead of waiting until the next analysis.  @return  whether the clearance set contains obsolete settings 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool DetectObsoleteSettings
            (
                bool doCleanupNow /** whether cleanup should be performed now */
            );
            /** Deletes all interference results stored in this clearance set. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteAllInterferences
            (
            );
            /** Inquires the status associated with a given pair of interfering objects. 
                    The status is only retrieved if an interference exists between the two objects.  @return  the current status of the interference 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ClearanceSet::InterferenceStatus GetInterferenceStatus
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */
            );
            /** Set the status associated with a given pair of interfering objects. 
                    The status is only filled if an interference exists between the two objects. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetInterferenceStatus
            (
                NXOpen::DisplayableObject * object1 /** the first object in the pair */,
                NXOpen::DisplayableObject * object2 /** the second object in the pair */,
                NXOpen::Assemblies::ClearanceSet::InterferenceStatus status /** the new status of the interference */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
