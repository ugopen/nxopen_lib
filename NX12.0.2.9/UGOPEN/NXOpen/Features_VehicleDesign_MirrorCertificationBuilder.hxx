#ifndef NXOpen_FEATURES_VEHICLEDESIGN_MIRRORCERTIFICATIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_MIRRORCERTIFICATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_MirrorCertificationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class MirrorCertificationBuilder;
        }
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXColor;
    class Point;
    class ScCollector;
    class Section;
    class SelectNXObjectList;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _MirrorCertificationBuilderBuilder;
            class MirrorCertificationBuilderImpl;
            /**
                     A @link NXOpen::Features::VehicleDesign::MirrorCertificationBuilder NXOpen::Features::VehicleDesign::MirrorCertificationBuilder@endlink  used to create or edit
                    a vehicle design @link NXOpen::Features::VehicleDesign::MirrorCertification NXOpen::Features::VehicleDesign::MirrorCertification@endlink  feature.
                     <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateMirrorCertificationBuilder  NXOpen::Features::VehicleDesignCollection::CreateMirrorCertificationBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            AllowHeadAndEyeRotation </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            ConvexRadius.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            DeviateFromStandard </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            DriverSideStandard </td> <td> 
             
            UsaCanadaFmvss111Cmvsss111 </td> </tr> 

            <tr><td> 
             
            EyeMethod </td> <td> 
             
            MaximumDistance </td> </tr> 

            <tr><td> 
             
            EyePointMethod </td> <td> 
             
            ByHipPoint </td> </tr> 

            <tr><td> 
             
            EyellipsePercentile </td> <td> 
             
            Percentile95 </td> </tr> 

            <tr><td> 
             
            GenerateValidationLogFile </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            InfiniteDistance.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            InsideStandard </td> <td> 
             
            UsaCanadaFmvss111Cmvsss111 </td> </tr> 

            <tr><td> 
             
            InstructionFieldPosition </td> <td> 
             
            OnTargetWall </td> </tr> 

            <tr><td> 
             
            InstructionFieldType </td> <td> 
             
            Triangle </td> </tr> 

            <tr><td> 
             
            Location </td> <td> 
             
            Inside </td> </tr> 

            <tr><td> 
             
            MirrorOrientation </td> <td> 
             
            AutoRotation </td> </tr> 

            <tr><td> 
             
            MirrorType </td> <td> 
             
            Planar </td> </tr> 

            <tr><td> 
             
            PassengerSideStandard </td> <td> 
             
            UsaCanadaFmvss111Cmvsss111 </td> </tr> 

            <tr><td> 
             
            RotatedAngleY.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            RotatedAngleZ.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowRays </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            ShowVisionCone </td> <td> 
             
            None </td> </tr> 

            <tr><td> 
             
            TargetDistance.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            TargetDistanceFar.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            TargetWidthAngular.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            TargetWidthLength.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            TargetWidthLengthFar.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            UseEyeFrom </td> <td> 
             
            WorkPart </td> </tr> 

            <tr><td> 
             
            UseLoadingSpecifiedByStandard </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            ViewValidationResults </td> <td> 
             
            0 </td> </tr> 

            </table>  

             <br>  Created in NX9.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  MirrorCertificationBuilder : public NXOpen::Features::FeatureBuilder
            {
                /**Used to indicate the mirror location. */
                public: enum LocationType
                {
                    LocationTypeInside/** Represents the inside location */,
                    LocationTypeDriverSide/** Represents the driver side location */,
                    LocationTypePassengerSide/** passenger side */ 
                };

                /**Used to indicate the standard for the inside mirror. */
                public: enum InsideStandardsType
                {
                    InsideStandardsTypeUsaCanadaFmvss111Cmvsss111/** Represents USA - Canada : FMVSS111 - CMVSSS111 standard */,
                    InsideStandardsTypeEurope200397EcEcer4602/** Represents Europe : 2003/97/EC - ECE R46.02 standard */,
                    InsideStandardsTypeJapanArticle44Trias29Trias39/** Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard */,
                    InsideStandardsTypeAustraliaAdr1402/** Represents Australia : ADR 14/02 standard */,
                    InsideStandardsTypeSaudiArabiaGulfStatesSsa770771Gs421442/** Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard */,
                    InsideStandardsTypeChinaGb150842006/** china gb150842006 */ 
                };

                /**Used to indicate the standard for the driver mirror. */
                public: enum DriverSideStandardsType
                {
                    DriverSideStandardsTypeUsaCanadaFmvss111Cmvsss111/** Represents USA - Canada : FMVSS111 - CMVSSS111 standard */,
                    DriverSideStandardsTypeEuropeM1n1ClassiiiMirror200397EcEcer4602/** Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard */,
                    DriverSideStandardsTypeEurope71127EuEcer4601Superceded/** Represents Europe : 71/127/EU - ECE R46.01 (Superceded ) standard */,
                    DriverSideStandardsTypeJapanArticle44Trias29Trias39/** Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard */,
                    DriverSideStandardsTypeAustraliaAdr1402/** Represents Australia : ADR 14/02 standard */,
                    DriverSideStandardsTypeSaudiArabiaGulfStatesSsa770771Gs421442/** Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard */,
                    DriverSideStandardsTypeChinaGb150842006/** china gb150842006 */ 
                };

                /**Used to indicate the standard for the passenger mirror. */
                public: enum PassengerSideStandardsType
                {
                    PassengerSideStandardsTypeUsaCanadaFmvss111Cmvsss111/** Represents USA - Canada : FMVSS111 - CMVSSS111 standard */,
                    PassengerSideStandardsTypeEuropeM1n1ClassiiiMirror200397EcEcer4602/** Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard */,
                    PassengerSideStandardsTypeEuropeM1n1Only71127EuEcer4601Superceded/** Represents Europe (M1/N1 only) : 71/127/EU - ECE R46.01 (Superceded ) standard */,
                    PassengerSideStandardsTypeEuropeNotM1n171127EuEcer4601Superceded/** Represents Europe (Not M1/N1) : 71/127/EU - ECE R46.01 : (Superceded ) standard */,
                    PassengerSideStandardsTypeJapanArticle44Trias29Trias39/** Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard */,
                    PassengerSideStandardsTypeAustraliaAdr1402/** Represents Australia : ADR 14/02 standard */,
                    PassengerSideStandardsTypeSaudiArabiaGulfStatesSsa770771Gs421442/** Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard */,
                    PassengerSideStandardsTypeChinaM1n1OnlyGb150842006/** Represents China (M1/N1 only) : GB 15084 - 2006 standard */,
                    PassengerSideStandardsTypeChinaNotM1n1Gb150842006/** Represents China (Not M1/N1) : GB 15084 - 2006 standard */
                };

                /**Used to indicate the method to define the eye point. */
                public: enum EyePointMethodType
                {
                    EyePointMethodTypeByEceVisionPointsFeature/** Represents using ECE Vision Point feature to get eye point */,
                    EyePointMethodTypeByHipPoint/** Represents using Hip Point to calculate the eye point */
                };

                /**Used to indicate what part the eye is from. */
                public: enum EyeFromOptionType
                {
                    EyeFromOptionTypeWorkPart/** Represents eyellipse feature is from work part */,
                    EyeFromOptionTypeRootPart/** Represents eyellipse feature is from root part */,
                    EyeFromOptionTypeOtherComponent/** Represents eyellipse feature is from the other component Part */
                };

                /**Used to indicate the eyellipse percentile that is used in mirror certification. */
                public: enum EyellipsePercentileType
                {
                    EyellipsePercentileTypePercentile95/** Represents 95 Percentile eyellipse will be used for mirror certification */,
                    EyellipsePercentileTypePercentile99/** Represents 99 Percentile eyellipse will be used for mirror certification */
                };

                /**Used to indicate the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot. */
                public: enum EyeMethodType
                {
                    EyeMethodTypeMaximumDistance/** Represents using the maximum distance */,
                    EyeMethodTypeMinimumDistance/** Represents using the minimum distance */,
                    EyeMethodTypeMeanDistance/** Represents using the mean distance */
                };

                /**Used to indicate the mirror surface type. */
                public: enum MirrorSurfaceType
                {
                    MirrorSurfaceTypePlanar/** Represents the planar mirror surface */,
                    MirrorSurfaceTypeSpherical/** Represents the spherical mirror surface  */
                };

                /**Used to indicate the method to rotate mirror. */
                public: enum MirrorOrientationType
                {
                    MirrorOrientationTypeAutoRotation/** Represents that the mirror will be rotated automatically */,
                    MirrorOrientationTypeInteractiveAdjustment/** Represents that the mirror will be rotated interactively */
                };

                /**Used to indicate the postion where the instruction field will be. */
                public: enum InstructionFieldPositionType
                {
                    InstructionFieldPositionTypeOnTargetWall/** Represents that the instrucition field is on target wall */,
                    InstructionFieldPositionTypeOnRoadSurface/** Represents that the instrucition field is on road surface */
                };

                /**Used to indicate the shape type of the instruction field. */
                public: enum InstructionFieldsType
                {
                    InstructionFieldsTypeTriangle/** Represents that the triangle Instruction field will be created */,
                    InstructionFieldsTypeRectangle/** Represents that the rectangle Instruction field will be created */
                };

                /**Used to indicate what vision cone will be shown. */
                public: enum ShowVisionConeType
                {
                    ShowVisionConeTypeNone/** Represents the vision cones aren't shown */,
                    ShowVisionConeTypeAll/** Represents both of Eye-Mirror and Mirror Target vision cones are shown */,
                    ShowVisionConeTypeEyeToMirror/** Represents only Eye-Mirror vision cone is shown */,
                    ShowVisionConeTypeMirrorToTarget/** Represents only Mirror-Target vision cone is shown */
                };

                private: MirrorCertificationBuilderImpl * m_mirrorcertificationbuilder_impl;
                private: friend class  _MirrorCertificationBuilderBuilder;
                protected: MirrorCertificationBuilder();
                public: ~MirrorCertificationBuilder();
                /**Returns  the mirror location. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::LocationType Location
                (
                );
                /**Sets  the mirror location. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLocation
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::LocationType location /** location */ 
                );
                /**Returns  the standard for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InsideStandardsType InsideStandard
                (
                );
                /**Sets  the standard for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetInsideStandard
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InsideStandardsType insideStandard /** insidestandard */ 
                );
                /**Returns  the standard for the driver side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::DriverSideStandardsType DriverSideStandard
                (
                );
                /**Sets  the standard for the driver side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDriverSideStandard
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::DriverSideStandardsType driverSideStandard /** driversidestandard */ 
                );
                /**Returns  the standard for passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::PassengerSideStandardsType PassengerSideStandard
                (
                );
                /**Sets  the standard for passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPassengerSideStandard
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::PassengerSideStandardsType passengerSideStandard /** passengersidestandard */ 
                );
                /**Returns  the flag to indicate if the loading specified by the standard will be used. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UseLoadingSpecifiedByStandard
                (
                );
                /**Sets  the flag to indicate if the loading specified by the standard will be used. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseLoadingSpecifiedByStandard
                (
                    bool useLoadingSpecifiedByStandard /** useloadingspecifiedbystandard */ 
                );
                /**Returns  the loading applied to the vehicle for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Loading
                (
                );
                /**Sets  the loading applied to the vehicle for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLoading
                (
                    const NXString & loading /** loading */ 
                );
                /**Sets  the loading applied to the vehicle for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetLoading
                (
                    const char * loading /** loading */ 
                );
                /**Returns  the method to define the eye point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyePointMethodType EyePointMethod
                (
                );
                /**Sets  the method to define the eye point. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyePointMethod
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyePointMethodType eyePointMethod /** eyepointmethod */ 
                );
                /**Returns  the part that the eye is from. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyeFromOptionType UseEyeFrom
                (
                );
                /**Sets  the part that the eye is from. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseEyeFrom
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyeFromOptionType useEyeFrom /** useeyefrom */ 
                );
                /**Returns  the component part that contains the eye. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Assemblies::SelectComponent * EyeComponent
                (
                );
                /**Returns  the eyellipse feature name used for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Eyellipse
                (
                );
                /**Sets  the eyellipse feature name used for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyellipse
                (
                    const NXString & eyellipse /** eyellipse */ 
                );
                /**Sets  the eyellipse feature name used for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetEyellipse
                (
                    const char * eyellipse /** eyellipse */ 
                );
                /**Returns  the eyellipse percentile that will be used for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyellipsePercentileType EyellipsePercentile
                (
                );
                /**Sets  the eyellipse percentile that will be used for mirror certification. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyellipsePercentile
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyellipsePercentileType eyellipsePercentile /** eyellipsepercentile */ 
                );
                /**Returns  the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyeMethodType EyeMethod
                (
                );
                /**Sets  the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyeMethod
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::EyeMethodType eyeMethod /** eyemethod */ 
                );
                /**Returns  the hip point of the driver. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * HipPoint
                (
                );
                /**Sets  the hip point of the driver. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetHipPoint
                (
                    NXOpen::Point * hipPoint /** hippoint */ 
                );
                /**Returns  the indication if the head and eye rotation is allowed. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool AllowHeadAndEyeRotation
                (
                );
                /**Sets  the indication if the head and eye rotation is allowed. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetAllowHeadAndEyeRotation
                (
                    bool allowHeadAndEyeRotation /** allowheadandeyerotation */ 
                );
                /**Returns  the mirror surface type, planar or spherical. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::MirrorSurfaceType MirrorType
                (
                );
                /**Sets  the mirror surface type, planar or spherical. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetMirrorType
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::MirrorSurfaceType mirrorType /** mirrortype */ 
                );
                /**Returns  the convex radius of the spherial mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ConvexRadius
                (
                );
                /**Returns  the face that represents the closed mirror profile. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * MirrorSurface
                (
                );
                /**Returns  the facet body that represents the closed mirror profile. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * MirrorFacetBodies
                (
                );
                /**Returns  the mirror orientation method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::MirrorOrientationType MirrorOrientation
                (
                );
                /**Sets  the mirror orientation method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetMirrorOrientation
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::MirrorOrientationType mirrorOrientation /** mirrororientation */ 
                );
                /**Returns  the pivot point about which the mirror rotates. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PivotPoint
                (
                );
                /**Sets  the pivot point about which the mirror rotates. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPivotPoint
                (
                    NXOpen::Point * pivotPoint /** pivotpoint */ 
                );
                /**Returns  the prime point representing the highest inboard point on the mirror, which defines the horizontal ray (in side view) parallel to vehicle centerline (in top view).
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PrimePoint
                (
                );
                /**Sets  the prime point representing the highest inboard point on the mirror, which defines the horizontal ray (in side view) parallel to vehicle centerline (in top view).
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPrimePoint
                (
                    NXOpen::Point * primePoint /** primepoint */ 
                );
                /**Returns  the rotated angle about Z axis. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * RotatedAngleZ
                (
                );
                /**Returns  the rotated angle about Y axis. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * RotatedAngleY
                (
                );
                /**Returns  the bezel curve representing the inside perimeter of the closed protective cover (or shell) around a mirror and must be a closed loop of curves. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Section * BezelCurve
                (
                );
                /**Returns  the face that represents the mirror surface at driver side. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * DriverSideMirrorFace
                (
                );
                /**Returns  the facet body that represents the mirror surface at driver side. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * DriverSideFacetBodies
                (
                );
                /**Returns  the ground wide point representing the widest position of the vehicle body at the ground level. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * GroundWidePoint
                (
                );
                /**Sets  the ground wide point representing the widest position of the vehicle body at the ground level. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetGroundWidePoint
                (
                    NXOpen::Point * groundWidePoint /** groundwidepoint */ 
                );
                /**Returns  the wheel protrusion point used to calculate close targets near the rear axle centerline. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * WheelProtrusionPoint
                (
                );
                /**Sets  the wheel protrusion point used to calculate close targets near the rear axle centerline. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWheelProtrusionPoint
                (
                    NXOpen::Point * wheelProtrusionPoint /** wheelprotrusionpoint */ 
                );
                /**Returns  the backlite windshield face representing the rear window (backlite) day light opening (DLO). 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * BackliteWindshieldFace
                (
                );
                /**Returns  the backlite windshield facet body representing the rear window (backlite) day light opening (DLO). 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * BackliteWindshieldFacetBodies
                (
                );
                /**Returns  the faces representing the restrictions between the eye and the mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * EyeMirrorRestrictions
                (
                );
                /**Returns  the facet bodies representing the restrictions between the eye and the mirror. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * EyeMirrorRestrictionsFacetBodies
                (
                );
                /**Returns  the faces representing the restrictions between the mirror and the target plane. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * MirrorTargetRestrictions
                (
                );
                /**Returns  the facet body representing the restrictions between the mirror and the target plane. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * MirrorTargetRestrictionsFacetBodies
                (
                );
                /**Returns  the indication if the target values are deviated from standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool DeviateFromStandard
                (
                );
                /**Sets  the indication if the target values are deviated from standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDeviateFromStandard
                (
                    bool deviateFromStandard /** deviatefromstandard */ 
                );
                /**Returns  the target distance to the eye behind the vehicle, which is defined in the standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TargetDistance
                (
                );
                /**Returns  the target width at the target distance position, which is defined in the standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TargetWidthLength
                (
                );
                /**Returns  the target vision angle, which is defined in the standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TargetWidthAngular
                (
                );
                /**Returns  the far target distance to the eye behind the vehicle, which is defined in the standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TargetDistanceFar
                (
                );
                /**Returns  the target width at the far target distance position, which is defined in the standard. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * TargetWidthLengthFar
                (
                );
                /**Returns  the instruction field position, on wall or road. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InstructionFieldPositionType InstructionFieldPosition
                (
                );
                /**Sets  the instruction field position, on wall or road. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetInstructionFieldPosition
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InstructionFieldPositionType instructionFieldPosition /** instructionfieldposition */ 
                );
                /**Returns  the instruction field type, triangle or rectangle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InstructionFieldsType InstructionFieldType
                (
                );
                /**Sets  the instruction field type, triangle or rectangle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetInstructionFieldType
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::InstructionFieldsType instructionFieldType /** instructionfieldtype */ 
                );
                /**Returns  the infinite distance to the eye behind the vehicle. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * InfiniteDistance
                (
                );
                /**Returns  the indication if the vision cone is shown. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::ShowVisionConeType ShowVisionCone
                (
                );
                /**Sets  the indication if the vision cone is shown. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowVisionCone
                (
                    NXOpen::Features::VehicleDesign::MirrorCertificationBuilder::ShowVisionConeType showVisionCone /** showvisioncone */ 
                );
                /**Returns  the indication if the vision rays are created. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowRays
                (
                );
                /**Sets  the indication if the vision rays are created. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowRays
                (
                    bool showRays /** showrays */ 
                );
                /**Returns  the indication if the packaging validation gadget is invoked to view the results. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ViewValidationResults
                (
                );
                /**Sets  the indication if the packaging validation gadget is invoked to view the results. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetViewValidationResults
                (
                    bool viewValidationResults /** viewvalidationresults */ 
                );
                /**Returns  the indication if the validation log file is generated. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GenerateValidationLogFile
                (
                );
                /**Sets  the indication if the validation log file is generated. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetGenerateValidationLogFile
                (
                    bool generateValidationLogFile /** generatevalidationlogfile */ 
                );
                /**Returns  the color applied to the general output geometries. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * GeneralColor
                (
                );
                /**Sets  the color applied to the general output geometries. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetGeneralColor
                (
                    NXOpen::NXColor * generalColor /** generalcolor */ 
                );
                /**Returns  the color applied to the left eye vision geometries for the driver or passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * LeftEyeColor
                (
                );
                /**Sets  the color applied to the left eye vision geometries for the driver or passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLeftEyeColor
                (
                    NXOpen::NXColor * leftEyeColor /** lefteyecolor */ 
                );
                /**Returns  the color applied to the right eye vision geometries for the driver or passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * RightEyeColor
                (
                );
                /**Sets  the color applied to the right eye vision geometries for the driver or passenger side mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRightEyeColor
                (
                    NXOpen::NXColor * rightEyeColor /** righteyecolor */ 
                );
                /**Returns  the color applied to the left eye up-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * LeftEyeUpColor
                (
                );
                /**Sets  the color applied to the left eye up-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLeftEyeUpColor
                (
                    NXOpen::NXColor * leftEyeUpColor /** lefteyeupcolor */ 
                );
                /**Returns  the color applied to the left eye down-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * LeftEyeDownColor
                (
                );
                /**Sets  the color applied to the left eye down-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLeftEyeDownColor
                (
                    NXOpen::NXColor * leftEyeDownColor /** lefteyedowncolor */ 
                );
                /**Returns  the color applied to the right eye up-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * RightEyeUpColor
                (
                );
                /**Sets  the color applied to the right eye up-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRightEyeUpColor
                (
                    NXOpen::NXColor * rightEyeUpColor /** righteyeupcolor */ 
                );
                /**Returns  the color applied to the right eye down-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * RightEyeDownColor
                (
                );
                /**Sets  the color applied to the right eye down-vision geometries for the inside mirror. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRightEyeDownColor
                (
                    NXOpen::NXColor * rightEyeDownColor /** righteyedowncolor */ 
                );
                /** Gets the user remarks with the feature.  @return  
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetUserRemarks
                (
                );
                /** Sets the user remarks with the feature. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUserRemarks
                (
                    const std::vector<NXString> & userRemarks /** userremarks */ 
                );
                /** Create a point according to Base Data SGRP expressions  @return  
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * CreatePointWithBaseDataSGRPExpression
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
