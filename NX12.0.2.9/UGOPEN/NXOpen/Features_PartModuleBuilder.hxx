#ifndef NXOpen_FEATURES_PARTMODULEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PARTMODULEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PartModuleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_PartModuleReferencesBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class PartModuleBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class PartModuleReferencesBuilder;
    }
    namespace Features
    {
        class _PartModuleBuilderBuilder;
        class PartModuleBuilderImpl;
        /** Represents a @link NXOpen::Features::PartModule NXOpen::Features::PartModule@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreatePartModuleBuilder  NXOpen::Features::FeatureCollection::CreatePartModuleBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  PartModuleBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: PartModuleBuilderImpl * m_partmodulebuilder_impl;
            private: friend class  _PartModuleBuilderBuilder;
            protected: PartModuleBuilder();
            public: ~PartModuleBuilder();
            /**Returns  the part module input references.
                      <br> 
                     This API is now deprecated.
                     Please use @link GeometricUtilities::PartModuleInputBuilder::InputReferences GeometricUtilities::PartModuleInputBuilder::InputReferences@endlink  instead.
                      <br> 
                     
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link GeometricUtilities::PartModuleInputBuilder::InputReferences GeometricUtilities::PartModuleInputBuilder::InputReferences@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Please use GeometricUtilities::PartModuleInputBuilder::InputReferences instead.") NXOpen::GeometricUtilities::PartModuleReferencesBuilder * InputReferences
            (
            );
            /**Returns  the part module name 
                     <br> 
                    This API is now deprecated.
                    Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead.
                     <br> 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Please use Features::PartModuleBuilder::Name1 instead.") NXString Name
            (
            );
            /**Sets  the part module name 
                     <br> 
                    This API is now deprecated.
                    Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead.
                     <br> 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Please use Features::PartModuleBuilder::Name1 instead.") void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the part module name 
                     <br> 
                    This API is now deprecated.
                    Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead.
                     <br> 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link Features::PartModuleBuilder::Name1 Features::PartModuleBuilder::Name1@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the part module name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name1
            (
            );
            /**Sets  the part module name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetName1
            (
                const NXString & name /** name */ 
            );
            /**Sets  the part module name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            void SetName1
            (
                const char * name /** name */ 
            );
            /**Returns  the option indicating whether only part module contents are to be shown. If true, only displayable objects in the part module will be shown. Else, no action is taken.
                      <br> 
                     This API is now deprecated.
                     Please use @link NXOpen::Features::PartModule::ShowOnly NXOpen::Features::PartModule::ShowOnly@endlink  instead.
                      <br> 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link NXOpen::Features::PartModule::ShowOnly NXOpen::Features::PartModule::ShowOnly@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Please use NXOpen::Features::PartModule::ShowOnly instead.") bool ShowOnlyPartModule
            (
            );
            /**Sets  the option indicating whether only part module contents are to be shown. If true, only displayable objects in the part module will be shown. Else, no action is taken.
                      <br> 
                     This API is now deprecated.
                     Please use @link NXOpen::Features::PartModule::ShowOnly NXOpen::Features::PartModule::ShowOnly@endlink  instead.
                      <br> 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Please use @link NXOpen::Features::PartModule::ShowOnly NXOpen::Features::PartModule::ShowOnly@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Please use NXOpen::Features::PartModule::ShowOnly instead.") void SetShowOnlyPartModule
            (
                bool showOnly /** showonly */ 
            );
            /**Returns  the option indicating whether part module is to be activated. If true, the part module will be activated, else, part module will be deactivated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ActivatePartModule
            (
            );
            /**Sets  the option indicating whether part module is to be activated. If true, the part module will be activated, else, part module will be deactivated 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetActivatePartModule
            (
                bool activate /** activate */ 
            );
            /**Returns  a flag indicating if part module is a design group. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: bool IsDesignGroup
            (
            );
            /**Sets  a flag indicating if part module is a design group. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : usr_defined_features ("USER DEFINED FEATURES") */
            public: void SetDesignGroup
            (
                bool isDesignGroup /** isdesigngroup */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
