#ifndef NXOpen_AME_INTERRUPTIONPOINTBUILDER_HXX_INCLUDED
#define NXOpen_AME_INTERRUPTIONPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_InterruptionPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_PageObject.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class InterruptionPointBuilder;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace AME
    {
        class PageObject;
    }
    class Builder;
    namespace AME
    {
        class _InterruptionPointBuilderBuilder;
        class InterruptionPointBuilderImpl;
        /** Represents builder for  AME::DB::InterruptionPoint  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateInterruptionPointBuilder  NXOpen::AME::AMEManager::CreateInterruptionPointBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  InterruptionPointBuilder : public NXOpen::Builder
        {
            /** Represents Interruption Point Variant type */
            public: enum Variant
            {
                VariantA/** a */ ,
                VariantB/** b */ ,
                VariantC/** c */ ,
                VariantD/** d */ ,
                VariantE/** e */ ,
                VariantF/** f */ ,
                VariantG/** g */ ,
                VariantH/** h */ 
            };

            private: InterruptionPointBuilderImpl * m_interruptionpointbuilder_impl;
            private: friend class  _InterruptionPointBuilderBuilder;
            protected: InterruptionPointBuilder();
            public: ~InterruptionPointBuilder();
            /**Returns  the interrupt point variant 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::AME::InterruptionPointBuilder::Variant InterruptionPointVariant
            (
            );
            /**Sets  the interrupt point variant 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetInterruptionPointVariant
            (
                NXOpen::AME::InterruptionPointBuilder::Variant interruptionPointVariant /** interruptionpointvariant */ 
            );
            /** Set the interruption point type to star source 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetStarSource
            (
                bool starSource /** starsource */ 
            );
            /**Returns  the interruption point name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString InterruptionPointName
            (
            );
            /**Sets  the interruption point name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetInterruptionPointName
            (
                const NXString & interruptionPointName /** interruptionpointname */ 
            );
            /**Sets  the interruption point name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetInterruptionPointName
            (
                const char * interruptionPointName /** interruptionpointname */ 
            );
            /** Set the destination interruption point to link to 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDestinationInterruptionPoint
            (
                NXOpen::AME::AMEExtendedObject * interruptionPoint /** interruptionpoint */ 
            );
            /** Set node location of Interruption Point on page. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetInterruptionPointLocation
            (
                const NXOpen::Point2d & point /** point */ ,
                NXOpen::AME::PageObject * pageObject /** pageobject */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
