#ifndef NXOpen_CAM_FEATURERECOGNITIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_FEATURERECOGNITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeatureRecognitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ManualFeatureBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class FeatureRecognitionBuilder;
    }
    class Builder;
    namespace CAM
    {
        class CAMFeature;
    }
    namespace CAM
    {
        class ManualFeatureBuilder;
    }
    namespace CAM
    {
        class ManualFeatureBuilderList;
    }
    class Direction;
    class DisplayableObject;
    class Face;
    class Point;
    class ScCollector;
    namespace CAM
    {
        class _FeatureRecognitionBuilderBuilder;
        class FeatureRecognitionBuilderImpl;
        /** Represents a FeatureRecognition Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSetup::CreateFeatureRecognitionBuilder  NXOpen::CAM::CAMSetup::CreateFeatureRecognitionBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  FeatureRecognitionBuilder : public NXOpen::Builder
        {
            /** the type of feature search */
            public: enum RecognitionEnum
            {
                RecognitionEnumIdentify/** Feature Identification from modeling features */,
                RecognitionEnumParametric/** Parametric Feature Recognition */,
                RecognitionEnumLegacy/** Legacy Hole Feature Recognition */,
                RecognitionEnumGeneric/** Legacy Face and Pocket Feature Recognition */,
                RecognitionEnumManual/** Manual Feature Recognition */
            };

            /** the geometry search type */
            public: enum GeometrySearch
            {
                GeometrySearchWorkpiece/** Search for features in workpiece */,
                GeometrySearchAllGeometry/** Search for features in all geometry */,
                GeometrySearchSelected/** Search for features in user-selected geometry */
            };

            private: FeatureRecognitionBuilderImpl * m_featurerecognitionbuilder_impl;
            private: friend class  _FeatureRecognitionBuilderBuilder;
            protected: FeatureRecognitionBuilder();
            public: ~FeatureRecognitionBuilder();
            /**Returns  the type of feature search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeatureRecognitionBuilder::RecognitionEnum RecognitionType
            (
            );
            /**Sets  the type of feature search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRecognitionType
            (
                NXOpen::CAM::FeatureRecognitionBuilder::RecognitionEnum recognitionType /** recognition type */ 
            );
            /** Returns the geometry search  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::DisplayableObject *> GetSearchGeometry
            (
            );
            /** Sets the geometry to search 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSearchGeometry
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
            );
            /**Returns  the method of geometry search 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeatureRecognitionBuilder::GeometrySearch GeometrySearchType
            (
            );
            /**Sets  the method of geometry search 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetGeometrySearchType
            (
                NXOpen::CAM::FeatureRecognitionBuilder::GeometrySearch geometrySearch /** geometry search */ 
            );
            /**Returns  the machining access direction vector 
             <br>  @deprecated Deprecated in NX8.5.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  This functionality is no longer supported.") NXOpen::Direction * VecDirection
            (
            );
            /**Sets  the machining access direction vector 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link CAM::FeatureRecognitionBuilder::SetMachiningAccessDirection CAM::FeatureRecognitionBuilder::SetMachiningAccessDirection@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use CAM::FeatureRecognitionBuilder::SetMachiningAccessDirection instead.") void SetVecDirection
            (
                NXOpen::Direction * vecDirection /** vecdirection */ 
            );
            /** Set the machining access direction to exact or approximate vectors 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMachiningAccessDirection
            (
                const std::vector<NXOpen::Direction *> & vecDirections /** vecdirections */ ,
                double dTolerance /** dtolerance */ 
            );
            /** Set the machining access direction to toward or away from an axis defined by a point and a vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMachiningAccessDirection
            (
                NXOpen::Point * tagPoint /** tagpoint */ ,
                NXOpen::Direction * tagAxis /** tagaxis */ ,
                bool bIsTowardAxis /** bistowardaxis */ 
            );
            /** Set the machining access direction to toward or away from a point 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMachiningAccessDirection
            (
                NXOpen::Point * focalPt /** focalpt */ ,
                bool bIsTowardPt /** bistowardpt */ 
            );
            /**Returns  the limited set of faces to search in 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * LimitFaces
            (
            );
            /**Returns  the floor faces 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FloorFaces
            (
            );
            /**Returns  the flag indicating whether the feature name will be used as feature type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseFeatureNameAsType
            (
            );
            /**Sets  the flag indicating whether the feature name will be used as feature type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseFeatureNameAsType
            (
                bool useFeatureNameAsType /** use feature name as type */ 
            );
            /**Returns  the flag indicating whether features will get a color assigned if their faces have a unique color that is different from the body color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssignColor
            (
            );
            /**Sets  the flag indicating whether features will get a color assigned if their faces have a unique color that is different from the body color 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssignColor
            (
                bool assignColor /** assign color */ 
            );
            /**Returns  the flag indicating whether features will get attributes added of enclosed modeling features 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool AddCadFeatureAttributes
            (
            );
            /**Sets  the flag indicating whether features will get attributes added of enclosed modeling features 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetAddCadFeatureAttributes
            (
                bool addCadAttributes /** add cad attributes */ 
            );
            /**Returns  the flag indicating whether features will be mapped to other features if possible 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MapFeatures
            (
            );
            /**Sets  the flag indicating whether features will be mapped to other features if possible 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMapFeatures
            (
                bool mapFeatures /** map features */ 
            );
            /** Finds manufacturing features  @return  The found features
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAM::CAMFeature *> FindFeatures
            (
            );
            /**Returns  the flag indicating if mapping is enabled. Only when a valid mapping module is loaded 
                        the feature mapper is enabled
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool FeatureMapperEnabled
            (
            );
            /** Returns the found features  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAM::CAMFeature *> GetFoundFeatures
            (
            );
            /** Sets the feature types used by the recognizer 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFeatureTypes
            (
                std::vector<NXString> & featureTypes /** feature types */ 
            );
            /** Gets the registered feature types 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void GetRegisteredFeatureTypes
            (
                std::vector<NXString> & featureTypes /** feature types */ 
            );
            /** Creates a new manual feature builder  @return  feature builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ManualFeatureBuilder * CreateManualFeatureBuilder
            (
            );
            /**Returns  the manual feature builder list
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ManualFeatureBuilderList * LstManualFeatures
            (
            );
            /** Creates a feature based on name, floor and wall faces  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CAMFeature * MakeFeature
            (
                const NXString & featureName /** name of new feature */,
                const std::vector<NXOpen::Face *> & faces /** floor faces of new feature */,
                const std::vector<NXOpen::Face *> & wallFaces /** wall faces of new feature */,
                bool deleteFeatures /** Deletes previous found features */
            );
            /** Creates a feature based on name, floor and wall faces  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::CAMFeature * MakeFeature
            (
                const char * featureName /** name of new feature */,
                const std::vector<NXOpen::Face *> & faces /** floor faces of new feature */,
                const std::vector<NXOpen::Face *> & wallFaces /** wall faces of new feature */,
                bool deleteFeatures /** Deletes previous found features */
            );
            /** Deletes a manufacturing feature that was created through this builder instance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteFeature
            (
                NXOpen::CAM::CAMFeature * feature /** feature */ 
            );
            /**Returns  the flag indicating whether found features are checked agains existing features. If this
                        flag is set then features are recognized even if they match existing features.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IgnoreExistingFeatures
            (
            );
            /**Sets  the flag indicating whether found features are checked agains existing features. If this
                        flag is set then features are recognized even if they match existing features.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIgnoreExistingFeatures
            (
                bool ignoreExistingFeatures /** ignore existing features */ 
            );
            /** Gets the modeling feature types from the bodies currently set in this builder
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetModelingFeatureTypes
            (
                std::vector<NXString> & featureTypes /** feature types */ 
            );
            /**Returns  the flag indicating whether to ignore warnings while finding features.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IgnoreWarnings
            (
            );
            /**Sets  the flag indicating whether to ignore warnings while finding features.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIgnoreWarnings
            (
                bool ignoreWarnings /** ignore warnings */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
