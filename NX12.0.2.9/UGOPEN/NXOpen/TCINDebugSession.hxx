#ifndef NXOpen_TCINDEBUGSESSION_HXX_INCLUDED
#define NXOpen_TCINDEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     TCINDebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_DesignElementBuilder.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/DateItemBuilder.hxx>
#include <NXOpen/FileNew.hxx>
#include <NXOpen/PDMDebugSession.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class TCINDebugSession;
    class DebugSession;
    class TCINDebugSessionImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX TCIN Autotest.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::DebugSession  NXOpen::DebugSession @endlink  <br> 
     <br>  Created in NX12.0.2.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  TCINDebugSession
    {
         
        public:
        struct AttributeInput
        {
            public: /** attributetitle */ NXString AttributeTitle;
            public: /** attributecategory */ NXString AttributeCategory;
            public: /** attributetype */ NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions AttributeType;
            public: /** isnewattribute */ bool IsNewAttribute;
            public: /** isarray */ bool IsArray;
            public: /** comma separated list of bool*/NXString BoolValues;
            public: /** comma separated list of int */NXString IntValues;
            public: /** comma separated list of number*/NXString NumberValues;
            public: /** comma separated list string*/NXString StringValues;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString DateValues;
            public: AttributeInput() :
                AttributeTitle(),
                AttributeCategory(),
                AttributeType((NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions)0),
                IsNewAttribute(),
                IsArray(),
                BoolValues(),
                IntValues(),
                NumberValues(),
                StringValues(),
                DateValues()
            {
            }
            /** Constructor for the AttributeInput struct. */ 
            public: AttributeInput(const NXString &attributeTitleInitial /** attributetitle */ , 
                    const NXString &attributeCategoryInitial /** attributecategory */ , 
                    NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions attributeTypeInitial /** attributetype */ , 
                    bool isNewAttributeInitial /** isnewattribute */ , 
                    bool isArrayInitial /** isarray */ , 
                    const NXString &boolValuesInitial /** comma separated list of bool*/, 
                    const NXString &intValuesInitial /** comma separated list of int */, 
                    const NXString &numberValuesInitial /** comma separated list of number*/, 
                    const NXString &stringValuesInitial /** comma separated list string*/, 
                    const NXString &dateValuesInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */) :
                AttributeTitle(attributeTitleInitial),
                AttributeCategory(attributeCategoryInitial),
                AttributeType(attributeTypeInitial),
                IsNewAttribute(isNewAttributeInitial),
                IsArray(isArrayInitial),
                BoolValues(boolValuesInitial),
                IntValues(intValuesInitial),
                NumberValues(numberValuesInitial),
                StringValues(stringValuesInitial),
                DateValues(dateValuesInitial)
            {
            }
        };

         /**  @brief 
                 <rsamant> 17-Apr-2012
                 Flags indicating which fields of the TestUtils_customDECreationInput_s structure are being populated
                 Note: This should be in snyc with TestUtils_customDECreationInput_s
                 

          */
        public:
        struct TestUtilsCustomDECreationInputFlags
        {
            public: /** tc9crlocal */ bool Tc9CrLocal;
            public: /** tc9crstring */ bool Tc9CrString;
            public: /** tc9crchar */ bool Tc9CrChar;
            public: /** tc9crbool */ bool Tc9CrBool;
            public: /** tc9crdouble */ bool Tc9CrDouble;
            public: /** tc9crlongstr */ bool Tc9CrLongStr;
            public: /** tc9crlovc */ bool Tc9CrLOVc;
            public: /** tc9crlove */ bool Tc9CrLOVe;
            public: /** mdl0logical designator */ bool Mdl0logicalDesignator;
            public: /** tc9crlovsint */ bool Tc9CrLOVsInt;
            public: /** tc9crlovr */ bool Tc9CrLOVr;
            public: /** tc9crint */ bool Tc9CrInt;
            public: /** tc9crlovs */ bool Tc9CrLOVs;
            public: /** tc9crlovsdate */ bool Tc9CrLOVsDate;
            public: /** tc9crdate */ bool Tc9CrDate;
            public: /** tc9prequired */ bool Tc9PRequired;
            public: /** tc9crcharvla */ bool Tc9CrCharVLA;
            public: TestUtilsCustomDECreationInputFlags() :
                Tc9CrLocal(),
                Tc9CrString(),
                Tc9CrChar(),
                Tc9CrBool(),
                Tc9CrDouble(),
                Tc9CrLongStr(),
                Tc9CrLOVc(),
                Tc9CrLOVe(),
                Mdl0logicalDesignator(),
                Tc9CrLOVsInt(),
                Tc9CrLOVr(),
                Tc9CrInt(),
                Tc9CrLOVs(),
                Tc9CrLOVsDate(),
                Tc9CrDate(),
                Tc9PRequired(),
                Tc9CrCharVLA()
            {
            }
            /** Constructor for the TestUtilsCustomDECreationInputFlags struct. */ 
            public: TestUtilsCustomDECreationInputFlags(bool tc9CrLocalInitial /** tc9crlocal */ , 
                    bool tc9CrStringInitial /** tc9crstring */ , 
                    bool tc9CrCharInitial /** tc9crchar */ , 
                    bool tc9CrBoolInitial /** tc9crbool */ , 
                    bool tc9CrDoubleInitial /** tc9crdouble */ , 
                    bool tc9CrLongStrInitial /** tc9crlongstr */ , 
                    bool tc9CrLOVcInitial /** tc9crlovc */ , 
                    bool tc9CrLOVeInitial /** tc9crlove */ , 
                    bool mdl0logicalDesignatorInitial /** mdl0logical designator */ , 
                    bool tc9CrLOVsIntInitial /** tc9crlovsint */ , 
                    bool tc9CrLOVrInitial /** tc9crlovr */ , 
                    bool tc9CrIntInitial /** tc9crint */ , 
                    bool tc9CrLOVsInitial /** tc9crlovs */ , 
                    bool tc9CrLOVsDateInitial /** tc9crlovsdate */ , 
                    bool tc9CrDateInitial /** tc9crdate */ , 
                    bool tc9PRequiredInitial /** tc9prequired */ , 
                    bool tc9CrCharVLAInitial /** tc9crcharvla */ ) :
                Tc9CrLocal(tc9CrLocalInitial),
                Tc9CrString(tc9CrStringInitial),
                Tc9CrChar(tc9CrCharInitial),
                Tc9CrBool(tc9CrBoolInitial),
                Tc9CrDouble(tc9CrDoubleInitial),
                Tc9CrLongStr(tc9CrLongStrInitial),
                Tc9CrLOVc(tc9CrLOVcInitial),
                Tc9CrLOVe(tc9CrLOVeInitial),
                Mdl0logicalDesignator(mdl0logicalDesignatorInitial),
                Tc9CrLOVsInt(tc9CrLOVsIntInitial),
                Tc9CrLOVr(tc9CrLOVrInitial),
                Tc9CrInt(tc9CrIntInitial),
                Tc9CrLOVs(tc9CrLOVsInitial),
                Tc9CrLOVsDate(tc9CrLOVsDateInitial),
                Tc9CrDate(tc9CrDateInitial),
                Tc9PRequired(tc9PRequiredInitial),
                Tc9CrCharVLA(tc9CrCharVLAInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 17-Apr-2012
               Structure to hold data related to custom DE creation. Initialize corresponding flags to TRUE in
               TestUtils_customDECreationInputFlags_s if the fields have data
               Note: This should be in snyc with TestUtils_customDECreationInputFlags_s
                 

          */
        public:
        struct TestUtilsCustomDECreationInput
        {
            public: /** flags */ NXOpen::TCINDebugSession::TestUtilsCustomDECreationInputFlags Flags;
            public: /** tc9crlocal */ NXString Tc9CrLocal;
            public: /** tc9crstring */ NXString Tc9CrString;
            public: /** tc9crchar */ NXString Tc9CrChar;
            public: /** tc9crbool */ bool Tc9CrBool;
            public: /** tc9crdouble */ double Tc9CrDouble;
            public: /** tc9crlongstr */ NXString Tc9CrLongStr;
            public: /** comma separated list */NXString Tc9CrLOVc;
            public: /** comma separated list */NXString Tc9CrLOVe;
            public: /** mdl0logical designator */ NXString Mdl0logicalDesignator;
            public: /** comma separated list */NXString Tc9CrLOVsInt;
            public: /** comma separated list */NXString Tc9CrLOVr;
            public: /** tc9crint */ int Tc9CrInt;
            public: /** comma separated list */NXString Tc9CrLOVs;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString Tc9CrLOVsDate;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString Tc9CrDate;
            public: /** tc9prequired */ NXString Tc9PRequired;
            public: /** comma separated list */NXString Tc9CrCharVLA;
            public: TestUtilsCustomDECreationInput() :
                Flags(),
                Tc9CrLocal(),
                Tc9CrString(),
                Tc9CrChar(),
                Tc9CrBool(),
                Tc9CrDouble(),
                Tc9CrLongStr(),
                Tc9CrLOVc(),
                Tc9CrLOVe(),
                Mdl0logicalDesignator(),
                Tc9CrLOVsInt(),
                Tc9CrLOVr(),
                Tc9CrInt(),
                Tc9CrLOVs(),
                Tc9CrLOVsDate(),
                Tc9CrDate(),
                Tc9PRequired(),
                Tc9CrCharVLA()
            {
            }
            /** Constructor for the TestUtilsCustomDECreationInput struct. */ 
            public: TestUtilsCustomDECreationInput(const NXOpen::TCINDebugSession::TestUtilsCustomDECreationInputFlags &flagsInitial /** flags */ , 
                    const NXString &tc9CrLocalInitial /** tc9crlocal */ , 
                    const NXString &tc9CrStringInitial /** tc9crstring */ , 
                    const NXString &tc9CrCharInitial /** tc9crchar */ , 
                    bool tc9CrBoolInitial /** tc9crbool */ , 
                    double tc9CrDoubleInitial /** tc9crdouble */ , 
                    const NXString &tc9CrLongStrInitial /** tc9crlongstr */ , 
                    const NXString &tc9CrLOVcInitial /** comma separated list */, 
                    const NXString &tc9CrLOVeInitial /** comma separated list */, 
                    const NXString &mdl0logicalDesignatorInitial /** mdl0logical designator */ , 
                    const NXString &tc9CrLOVsIntInitial /** comma separated list */, 
                    const NXString &tc9CrLOVrInitial /** comma separated list */, 
                    int tc9CrIntInitial /** tc9crint */ , 
                    const NXString &tc9CrLOVsInitial /** comma separated list */, 
                    const NXString &tc9CrLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &tc9CrDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &tc9PRequiredInitial /** tc9prequired */ , 
                    const NXString &tc9CrCharVLAInitial /** comma separated list */) :
                Flags(flagsInitial),
                Tc9CrLocal(tc9CrLocalInitial),
                Tc9CrString(tc9CrStringInitial),
                Tc9CrChar(tc9CrCharInitial),
                Tc9CrBool(tc9CrBoolInitial),
                Tc9CrDouble(tc9CrDoubleInitial),
                Tc9CrLongStr(tc9CrLongStrInitial),
                Tc9CrLOVc(tc9CrLOVcInitial),
                Tc9CrLOVe(tc9CrLOVeInitial),
                Mdl0logicalDesignator(mdl0logicalDesignatorInitial),
                Tc9CrLOVsInt(tc9CrLOVsIntInitial),
                Tc9CrLOVr(tc9CrLOVrInitial),
                Tc9CrInt(tc9CrIntInitial),
                Tc9CrLOVs(tc9CrLOVsInitial),
                Tc9CrLOVsDate(tc9CrLOVsDateInitial),
                Tc9CrDate(tc9CrDateInitial),
                Tc9PRequired(tc9PRequiredInitial),
                Tc9CrCharVLA(tc9CrCharVLAInitial)
            {
            }
        };

         /**  @brief 
               <rsamant> 17-Apr-2012
               Flags indicating which fields of the TestUtils_customItemCreationInput_s structure are being populated
               Note: This should be in snyc with TestUtils_customItemCreationInput_s
             

          */
        public:
        struct TestUtilsCustomItemCreationInputFlags
        {
            public: /** iprequired */ bool IPRequired;
            public: /** imprequired */ bool IMPRequired;
            public: /** irwoprequired */ bool IRWOPRequired;
            public: /** irmprequired */ bool IRMPRequired;
            public: /** imcpbool */ bool IMCPBool;
            public: /** imcpcharvla */ bool IMCPCharVLA;
            public: /** ipchar */ bool IPChar;
            public: /** ipdate */ bool IPDate;
            public: /** ipdouble */ bool IPDouble;
            public: /** ipint */ bool IPInt;
            public: /** iplocal */ bool IPLocal;
            public: /** iplongstr */ bool IPLongStr;
            public: /** iplovc */ bool IPLOVc;
            public: /** iplove */ bool IPLOVe;
            public: /** iplovs */ bool IPLOVs;
            public: /** iplovsdate */ bool IPLOVsDate;
            public: /** iplovsint */ bool IPLOVsInt;
            public: /** ipstring */ bool IPString;
            public: /** immcpbool */ bool IMMCPBool;
            public: /** impchar */ bool IMPChar;
            public: /** impdate */ bool IMPDate;
            public: /** impdouble */ bool IMPDouble;
            public: /** impint */ bool IMPInt;
            public: /** implocal */ bool IMPLocal;
            public: /** implongstr */ bool IMPLongStr;
            public: /** implovc */ bool IMPLOVc;
            public: /** implovsdate */ bool IMPLOVsDate;
            public: /** impstring */ bool IMPString;
            public: /** imwopcharvla */ bool IMWOPCharVLA;
            public: /** imwoplovs */ bool IMWOPLOVs;
            public: /** ircrbool */ bool IRCrBool;
            public: /** ircrchar */ bool IRCrChar;
            public: /** ircrcharvla */ bool IRCrCharVLA;
            public: /** ircrdate */ bool IRCrDate;
            public: /** ircrint */ bool IRCrInt;
            public: /** ircrlovc */ bool IRCrLOVc;
            public: /** ircrlovr */ bool IRCrLOVr;
            public: /** ircrlovs */ bool IRCrLOVs;
            public: /** ircrlovsdate */ bool IRCrLOVsDate;
            public: /** ircrlovsint */ bool IRCrLOVsInt;
            public: /** ircrstring */ bool IRCrString;
            public: /** irmccrlocal */ bool IRMCCrLocal;
            public: /** irmcplocal */ bool IRMCPLocal;
            public: /** irpbool */ bool IRPBool;
            public: /** irpchar */ bool IRPChar;
            public: /** irpcharvla */ bool IRPCharVLA;
            public: /** irpdate */ bool IRPDate;
            public: /** irpint */ bool IRPInt;
            public: /** irplovc */ bool IRPLOVc;
            public: /** irplove */ bool IRPLOVe;
            public: /** irplovr */ bool IRPLOVr;
            public: /** irplovs */ bool IRPLOVs;
            public: /** irplovsdate */ bool IRPLOVsDate;
            public: /** irplovsint */ bool IRPLOVsInt;
            public: /** irpstring */ bool IRPString;
            public: /** irwocrlongstr */ bool IRWOCrLongStr;
            public: /** irwocrlove */ bool IRWOCrLOVe;
            public: /** irmmcpstring */ bool IRMMCPString;
            public: /** irmpchar */ bool IRMPChar;
            public: /** irmpdate */ bool IRMPDate;
            public: /** irmpdouble */ bool IRMPDouble;
            public: /** irmpint */ bool IRMPInt;
            public: /** irmplocal */ bool IRMPLocal;
            public: /** irmplove */ bool IRMPLOVe;
            public: /** irmplovs */ bool IRMPLOVs;
            public: /** irmplovsdate */ bool IRMPLOVsDate;
            public: /** irmplovsint */ bool IRMPLOVsInt;
            public: /** irmwopbool */ bool IRMWOPBool;
            public: TestUtilsCustomItemCreationInputFlags() :
                IPRequired(),
                IMPRequired(),
                IRWOPRequired(),
                IRMPRequired(),
                IMCPBool(),
                IMCPCharVLA(),
                IPChar(),
                IPDate(),
                IPDouble(),
                IPInt(),
                IPLocal(),
                IPLongStr(),
                IPLOVc(),
                IPLOVe(),
                IPLOVs(),
                IPLOVsDate(),
                IPLOVsInt(),
                IPString(),
                IMMCPBool(),
                IMPChar(),
                IMPDate(),
                IMPDouble(),
                IMPInt(),
                IMPLocal(),
                IMPLongStr(),
                IMPLOVc(),
                IMPLOVsDate(),
                IMPString(),
                IMWOPCharVLA(),
                IMWOPLOVs(),
                IRCrBool(),
                IRCrChar(),
                IRCrCharVLA(),
                IRCrDate(),
                IRCrInt(),
                IRCrLOVc(),
                IRCrLOVr(),
                IRCrLOVs(),
                IRCrLOVsDate(),
                IRCrLOVsInt(),
                IRCrString(),
                IRMCCrLocal(),
                IRMCPLocal(),
                IRPBool(),
                IRPChar(),
                IRPCharVLA(),
                IRPDate(),
                IRPInt(),
                IRPLOVc(),
                IRPLOVe(),
                IRPLOVr(),
                IRPLOVs(),
                IRPLOVsDate(),
                IRPLOVsInt(),
                IRPString(),
                IRWOCrLongStr(),
                IRWOCrLOVe(),
                IRMMCPString(),
                IRMPChar(),
                IRMPDate(),
                IRMPDouble(),
                IRMPInt(),
                IRMPLocal(),
                IRMPLOVe(),
                IRMPLOVs(),
                IRMPLOVsDate(),
                IRMPLOVsInt(),
                IRMWOPBool()
            {
            }
            /** Constructor for the TestUtilsCustomItemCreationInputFlags struct. */ 
            public: TestUtilsCustomItemCreationInputFlags(bool iPRequiredInitial /** iprequired */ , 
                    bool iMPRequiredInitial /** imprequired */ , 
                    bool iRWOPRequiredInitial /** irwoprequired */ , 
                    bool iRMPRequiredInitial /** irmprequired */ , 
                    bool iMCPBoolInitial /** imcpbool */ , 
                    bool iMCPCharVLAInitial /** imcpcharvla */ , 
                    bool iPCharInitial /** ipchar */ , 
                    bool iPDateInitial /** ipdate */ , 
                    bool iPDoubleInitial /** ipdouble */ , 
                    bool iPIntInitial /** ipint */ , 
                    bool iPLocalInitial /** iplocal */ , 
                    bool iPLongStrInitial /** iplongstr */ , 
                    bool iPLOVcInitial /** iplovc */ , 
                    bool iPLOVeInitial /** iplove */ , 
                    bool iPLOVsInitial /** iplovs */ , 
                    bool iPLOVsDateInitial /** iplovsdate */ , 
                    bool iPLOVsIntInitial /** iplovsint */ , 
                    bool iPStringInitial /** ipstring */ , 
                    bool iMMCPBoolInitial /** immcpbool */ , 
                    bool iMPCharInitial /** impchar */ , 
                    bool iMPDateInitial /** impdate */ , 
                    bool iMPDoubleInitial /** impdouble */ , 
                    bool iMPIntInitial /** impint */ , 
                    bool iMPLocalInitial /** implocal */ , 
                    bool iMPLongStrInitial /** implongstr */ , 
                    bool iMPLOVcInitial /** implovc */ , 
                    bool iMPLOVsDateInitial /** implovsdate */ , 
                    bool iMPStringInitial /** impstring */ , 
                    bool iMWOPCharVLAInitial /** imwopcharvla */ , 
                    bool iMWOPLOVsInitial /** imwoplovs */ , 
                    bool iRCrBoolInitial /** ircrbool */ , 
                    bool iRCrCharInitial /** ircrchar */ , 
                    bool iRCrCharVLAInitial /** ircrcharvla */ , 
                    bool iRCrDateInitial /** ircrdate */ , 
                    bool iRCrIntInitial /** ircrint */ , 
                    bool iRCrLOVcInitial /** ircrlovc */ , 
                    bool iRCrLOVrInitial /** ircrlovr */ , 
                    bool iRCrLOVsInitial /** ircrlovs */ , 
                    bool iRCrLOVsDateInitial /** ircrlovsdate */ , 
                    bool iRCrLOVsIntInitial /** ircrlovsint */ , 
                    bool iRCrStringInitial /** ircrstring */ , 
                    bool iRMCCrLocalInitial /** irmccrlocal */ , 
                    bool iRMCPLocalInitial /** irmcplocal */ , 
                    bool iRPBoolInitial /** irpbool */ , 
                    bool iRPCharInitial /** irpchar */ , 
                    bool iRPCharVLAInitial /** irpcharvla */ , 
                    bool iRPDateInitial /** irpdate */ , 
                    bool iRPIntInitial /** irpint */ , 
                    bool iRPLOVcInitial /** irplovc */ , 
                    bool iRPLOVeInitial /** irplove */ , 
                    bool iRPLOVrInitial /** irplovr */ , 
                    bool iRPLOVsInitial /** irplovs */ , 
                    bool iRPLOVsDateInitial /** irplovsdate */ , 
                    bool iRPLOVsIntInitial /** irplovsint */ , 
                    bool iRPStringInitial /** irpstring */ , 
                    bool iRWOCrLongStrInitial /** irwocrlongstr */ , 
                    bool iRWOCrLOVeInitial /** irwocrlove */ , 
                    bool iRMMCPStringInitial /** irmmcpstring */ , 
                    bool iRMPCharInitial /** irmpchar */ , 
                    bool iRMPDateInitial /** irmpdate */ , 
                    bool iRMPDoubleInitial /** irmpdouble */ , 
                    bool iRMPIntInitial /** irmpint */ , 
                    bool iRMPLocalInitial /** irmplocal */ , 
                    bool iRMPLOVeInitial /** irmplove */ , 
                    bool iRMPLOVsInitial /** irmplovs */ , 
                    bool iRMPLOVsDateInitial /** irmplovsdate */ , 
                    bool iRMPLOVsIntInitial /** irmplovsint */ , 
                    bool iRMWOPBoolInitial /** irmwopbool */ ) :
                IPRequired(iPRequiredInitial),
                IMPRequired(iMPRequiredInitial),
                IRWOPRequired(iRWOPRequiredInitial),
                IRMPRequired(iRMPRequiredInitial),
                IMCPBool(iMCPBoolInitial),
                IMCPCharVLA(iMCPCharVLAInitial),
                IPChar(iPCharInitial),
                IPDate(iPDateInitial),
                IPDouble(iPDoubleInitial),
                IPInt(iPIntInitial),
                IPLocal(iPLocalInitial),
                IPLongStr(iPLongStrInitial),
                IPLOVc(iPLOVcInitial),
                IPLOVe(iPLOVeInitial),
                IPLOVs(iPLOVsInitial),
                IPLOVsDate(iPLOVsDateInitial),
                IPLOVsInt(iPLOVsIntInitial),
                IPString(iPStringInitial),
                IMMCPBool(iMMCPBoolInitial),
                IMPChar(iMPCharInitial),
                IMPDate(iMPDateInitial),
                IMPDouble(iMPDoubleInitial),
                IMPInt(iMPIntInitial),
                IMPLocal(iMPLocalInitial),
                IMPLongStr(iMPLongStrInitial),
                IMPLOVc(iMPLOVcInitial),
                IMPLOVsDate(iMPLOVsDateInitial),
                IMPString(iMPStringInitial),
                IMWOPCharVLA(iMWOPCharVLAInitial),
                IMWOPLOVs(iMWOPLOVsInitial),
                IRCrBool(iRCrBoolInitial),
                IRCrChar(iRCrCharInitial),
                IRCrCharVLA(iRCrCharVLAInitial),
                IRCrDate(iRCrDateInitial),
                IRCrInt(iRCrIntInitial),
                IRCrLOVc(iRCrLOVcInitial),
                IRCrLOVr(iRCrLOVrInitial),
                IRCrLOVs(iRCrLOVsInitial),
                IRCrLOVsDate(iRCrLOVsDateInitial),
                IRCrLOVsInt(iRCrLOVsIntInitial),
                IRCrString(iRCrStringInitial),
                IRMCCrLocal(iRMCCrLocalInitial),
                IRMCPLocal(iRMCPLocalInitial),
                IRPBool(iRPBoolInitial),
                IRPChar(iRPCharInitial),
                IRPCharVLA(iRPCharVLAInitial),
                IRPDate(iRPDateInitial),
                IRPInt(iRPIntInitial),
                IRPLOVc(iRPLOVcInitial),
                IRPLOVe(iRPLOVeInitial),
                IRPLOVr(iRPLOVrInitial),
                IRPLOVs(iRPLOVsInitial),
                IRPLOVsDate(iRPLOVsDateInitial),
                IRPLOVsInt(iRPLOVsIntInitial),
                IRPString(iRPStringInitial),
                IRWOCrLongStr(iRWOCrLongStrInitial),
                IRWOCrLOVe(iRWOCrLOVeInitial),
                IRMMCPString(iRMMCPStringInitial),
                IRMPChar(iRMPCharInitial),
                IRMPDate(iRMPDateInitial),
                IRMPDouble(iRMPDoubleInitial),
                IRMPInt(iRMPIntInitial),
                IRMPLocal(iRMPLocalInitial),
                IRMPLOVe(iRMPLOVeInitial),
                IRMPLOVs(iRMPLOVsInitial),
                IRMPLOVsDate(iRMPLOVsDateInitial),
                IRMPLOVsInt(iRMPLOVsIntInitial),
                IRMWOPBool(iRMWOPBoolInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 17-Apr-2012
             Structure with fields needed for custom item creation. Initialize corresponding flags to TRUE in
             TestUtils_customItemCreationInputFlags_s if the fields have data
             Note: This should be in snyc with TestUtils_customItemCreationInputFlags_s
             

          */
        public:
        struct TestUtilsCustomItemCreationInput
        {
            public: /** flags */ NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags Flags;
            public: /** iprequired */ NXString IPRequired;
            public: /** imprequired */ NXString IMPRequired;
            public: /** irwoprequired */ NXString IRWOPRequired;
            public: /** irmprequired */ NXString IRMPRequired;
            public: /** imcpbool */ bool IMCPBool;
            public: /** comma separated list */NXString IMCPCharVLA;
            public: /** ipchar */ NXString IPChar;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString IPDate;
            public: /** ipdouble */ double IPDouble;
            public: /** ipint */ int IPInt;
            public: /** iplocal */ NXString IPLocal;
            public: /** iplongstr */ NXString IPLongStr;
            public: /** comma separated list */NXString IPLOVc;
            public: /** comma separated list */NXString IPLOVe;
            public: /** comma separated list */NXString IPLOVs;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString IPLOVsDate;
            public: /** comma separated list */NXString IPLOVsInt;
            public: /** ipstring */ NXString IPString;
            public: /** immcpbool */ bool IMMCPBool;
            public: /** impchar */ NXString IMPChar;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString IMPDate;
            public: /** impdouble */ double IMPDouble;
            public: /** impint */ int IMPInt;
            public: /** implocal */ NXString IMPLocal;
            public: /** implongstr */ NXString IMPLongStr;
            public: /** comma separated list */NXString IMPLOVc;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString IMPLOVsDate;
            public: /** impstring */ NXString IMPString;
            public: /** comma separated list */NXString IMWOPCharVLA;
            public: /** comma separated list */NXString IMWOPLOVs;
            public: /** ircrbool */ bool IRCrBool;
            public: /** ircrchar */ NXString IRCrChar;
            public: /** comma separated list */NXString IRCrCharVLA;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString IRCrDate;
            public: /** ircrint */ int IRCrInt;
            public: /** comma separated list */NXString IRCrLOVc;
            public: /** comma separated list */NXString IRCrLOVr;
            public: /** comma separated list */NXString IRCrLOVs;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString IRCrLOVsDate;
            public: /** comma separated list */NXString IRCrLOVsInt;
            public: /** ircrstring */ NXString IRCrString;
            public: /** irmccrlocal */ NXString IRMCCrLocal;
            public: /** irmcplocal */ NXString IRMCPLocal;
            public: /** irpbool */ bool IRPBool;
            public: /** irpchar */ NXString IRPChar;
            public: /** comma separated list */NXString IRPCharVLA;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString IRPDate;
            public: /** irpint */ int IRPInt;
            public: /** comma separated list */NXString IRPLOVc;
            public: /** comma separated list */NXString IRPLOVe;
            public: /** comma separated list */NXString IRPLOVr;
            public: /** comma separated list */NXString IRPLOVs;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString IRPLOVsDate;
            public: /** comma separated list */NXString IRPLOVsInt;
            public: /** irpstring */ NXString IRPString;
            public: /** irwocrlongstr */ NXString IRWOCrLongStr;
            public: /** comma separated list */NXString IRWOCrLOVe;
            public: /** irmmcpstring */ NXString IRMMCPString;
            public: /** irmpchar */ NXString IRMPChar;
            public: /** DD-Mmm-YYYY-hh::mm::ss */NXString IRMPDate;
            public: /** irmpdouble */ double IRMPDouble;
            public: /** irmpint */ int IRMPInt;
            public: /** irmplocal */ NXString IRMPLocal;
            public: /** comma separated list */NXString IRMPLOVe;
            public: /** comma separated list */NXString IRMPLOVs;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString IRMPLOVsDate;
            public: /** comma separated list */NXString IRMPLOVsInt;
            public: /** irmwopbool */ bool IRMWOPBool;
            public: TestUtilsCustomItemCreationInput() :
                Flags(),
                IPRequired(),
                IMPRequired(),
                IRWOPRequired(),
                IRMPRequired(),
                IMCPBool(),
                IMCPCharVLA(),
                IPChar(),
                IPDate(),
                IPDouble(),
                IPInt(),
                IPLocal(),
                IPLongStr(),
                IPLOVc(),
                IPLOVe(),
                IPLOVs(),
                IPLOVsDate(),
                IPLOVsInt(),
                IPString(),
                IMMCPBool(),
                IMPChar(),
                IMPDate(),
                IMPDouble(),
                IMPInt(),
                IMPLocal(),
                IMPLongStr(),
                IMPLOVc(),
                IMPLOVsDate(),
                IMPString(),
                IMWOPCharVLA(),
                IMWOPLOVs(),
                IRCrBool(),
                IRCrChar(),
                IRCrCharVLA(),
                IRCrDate(),
                IRCrInt(),
                IRCrLOVc(),
                IRCrLOVr(),
                IRCrLOVs(),
                IRCrLOVsDate(),
                IRCrLOVsInt(),
                IRCrString(),
                IRMCCrLocal(),
                IRMCPLocal(),
                IRPBool(),
                IRPChar(),
                IRPCharVLA(),
                IRPDate(),
                IRPInt(),
                IRPLOVc(),
                IRPLOVe(),
                IRPLOVr(),
                IRPLOVs(),
                IRPLOVsDate(),
                IRPLOVsInt(),
                IRPString(),
                IRWOCrLongStr(),
                IRWOCrLOVe(),
                IRMMCPString(),
                IRMPChar(),
                IRMPDate(),
                IRMPDouble(),
                IRMPInt(),
                IRMPLocal(),
                IRMPLOVe(),
                IRMPLOVs(),
                IRMPLOVsDate(),
                IRMPLOVsInt(),
                IRMWOPBool()
            {
            }
            /** Constructor for the TestUtilsCustomItemCreationInput struct. */ 
            public: TestUtilsCustomItemCreationInput(const NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags &flagsInitial /** flags */ , 
                    const NXString &iPRequiredInitial /** iprequired */ , 
                    const NXString &iMPRequiredInitial /** imprequired */ , 
                    const NXString &iRWOPRequiredInitial /** irwoprequired */ , 
                    const NXString &iRMPRequiredInitial /** irmprequired */ , 
                    bool iMCPBoolInitial /** imcpbool */ , 
                    const NXString &iMCPCharVLAInitial /** comma separated list */, 
                    const NXString &iPCharInitial /** ipchar */ , 
                    const NXString &iPDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    double iPDoubleInitial /** ipdouble */ , 
                    int iPIntInitial /** ipint */ , 
                    const NXString &iPLocalInitial /** iplocal */ , 
                    const NXString &iPLongStrInitial /** iplongstr */ , 
                    const NXString &iPLOVcInitial /** comma separated list */, 
                    const NXString &iPLOVeInitial /** comma separated list */, 
                    const NXString &iPLOVsInitial /** comma separated list */, 
                    const NXString &iPLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &iPLOVsIntInitial /** comma separated list */, 
                    const NXString &iPStringInitial /** ipstring */ , 
                    bool iMMCPBoolInitial /** immcpbool */ , 
                    const NXString &iMPCharInitial /** impchar */ , 
                    const NXString &iMPDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    double iMPDoubleInitial /** impdouble */ , 
                    int iMPIntInitial /** impint */ , 
                    const NXString &iMPLocalInitial /** implocal */ , 
                    const NXString &iMPLongStrInitial /** implongstr */ , 
                    const NXString &iMPLOVcInitial /** comma separated list */, 
                    const NXString &iMPLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &iMPStringInitial /** impstring */ , 
                    const NXString &iMWOPCharVLAInitial /** comma separated list */, 
                    const NXString &iMWOPLOVsInitial /** comma separated list */, 
                    bool iRCrBoolInitial /** ircrbool */ , 
                    const NXString &iRCrCharInitial /** ircrchar */ , 
                    const NXString &iRCrCharVLAInitial /** comma separated list */, 
                    const NXString &iRCrDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    int iRCrIntInitial /** ircrint */ , 
                    const NXString &iRCrLOVcInitial /** comma separated list */, 
                    const NXString &iRCrLOVrInitial /** comma separated list */, 
                    const NXString &iRCrLOVsInitial /** comma separated list */, 
                    const NXString &iRCrLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &iRCrLOVsIntInitial /** comma separated list */, 
                    const NXString &iRCrStringInitial /** ircrstring */ , 
                    const NXString &iRMCCrLocalInitial /** irmccrlocal */ , 
                    const NXString &iRMCPLocalInitial /** irmcplocal */ , 
                    bool iRPBoolInitial /** irpbool */ , 
                    const NXString &iRPCharInitial /** irpchar */ , 
                    const NXString &iRPCharVLAInitial /** comma separated list */, 
                    const NXString &iRPDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    int iRPIntInitial /** irpint */ , 
                    const NXString &iRPLOVcInitial /** comma separated list */, 
                    const NXString &iRPLOVeInitial /** comma separated list */, 
                    const NXString &iRPLOVrInitial /** comma separated list */, 
                    const NXString &iRPLOVsInitial /** comma separated list */, 
                    const NXString &iRPLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &iRPLOVsIntInitial /** comma separated list */, 
                    const NXString &iRPStringInitial /** irpstring */ , 
                    const NXString &iRWOCrLongStrInitial /** irwocrlongstr */ , 
                    const NXString &iRWOCrLOVeInitial /** comma separated list */, 
                    const NXString &iRMMCPStringInitial /** irmmcpstring */ , 
                    const NXString &iRMPCharInitial /** irmpchar */ , 
                    const NXString &iRMPDateInitial /** DD-Mmm-YYYY-hh::mm::ss */, 
                    double iRMPDoubleInitial /** irmpdouble */ , 
                    int iRMPIntInitial /** irmpint */ , 
                    const NXString &iRMPLocalInitial /** irmplocal */ , 
                    const NXString &iRMPLOVeInitial /** comma separated list */, 
                    const NXString &iRMPLOVsInitial /** comma separated list */, 
                    const NXString &iRMPLOVsDateInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */, 
                    const NXString &iRMPLOVsIntInitial /** comma separated list */, 
                    bool iRMWOPBoolInitial /** irmwopbool */ ) :
                Flags(flagsInitial),
                IPRequired(iPRequiredInitial),
                IMPRequired(iMPRequiredInitial),
                IRWOPRequired(iRWOPRequiredInitial),
                IRMPRequired(iRMPRequiredInitial),
                IMCPBool(iMCPBoolInitial),
                IMCPCharVLA(iMCPCharVLAInitial),
                IPChar(iPCharInitial),
                IPDate(iPDateInitial),
                IPDouble(iPDoubleInitial),
                IPInt(iPIntInitial),
                IPLocal(iPLocalInitial),
                IPLongStr(iPLongStrInitial),
                IPLOVc(iPLOVcInitial),
                IPLOVe(iPLOVeInitial),
                IPLOVs(iPLOVsInitial),
                IPLOVsDate(iPLOVsDateInitial),
                IPLOVsInt(iPLOVsIntInitial),
                IPString(iPStringInitial),
                IMMCPBool(iMMCPBoolInitial),
                IMPChar(iMPCharInitial),
                IMPDate(iMPDateInitial),
                IMPDouble(iMPDoubleInitial),
                IMPInt(iMPIntInitial),
                IMPLocal(iMPLocalInitial),
                IMPLongStr(iMPLongStrInitial),
                IMPLOVc(iMPLOVcInitial),
                IMPLOVsDate(iMPLOVsDateInitial),
                IMPString(iMPStringInitial),
                IMWOPCharVLA(iMWOPCharVLAInitial),
                IMWOPLOVs(iMWOPLOVsInitial),
                IRCrBool(iRCrBoolInitial),
                IRCrChar(iRCrCharInitial),
                IRCrCharVLA(iRCrCharVLAInitial),
                IRCrDate(iRCrDateInitial),
                IRCrInt(iRCrIntInitial),
                IRCrLOVc(iRCrLOVcInitial),
                IRCrLOVr(iRCrLOVrInitial),
                IRCrLOVs(iRCrLOVsInitial),
                IRCrLOVsDate(iRCrLOVsDateInitial),
                IRCrLOVsInt(iRCrLOVsIntInitial),
                IRCrString(iRCrStringInitial),
                IRMCCrLocal(iRMCCrLocalInitial),
                IRMCPLocal(iRMCPLocalInitial),
                IRPBool(iRPBoolInitial),
                IRPChar(iRPCharInitial),
                IRPCharVLA(iRPCharVLAInitial),
                IRPDate(iRPDateInitial),
                IRPInt(iRPIntInitial),
                IRPLOVc(iRPLOVcInitial),
                IRPLOVe(iRPLOVeInitial),
                IRPLOVr(iRPLOVrInitial),
                IRPLOVs(iRPLOVsInitial),
                IRPLOVsDate(iRPLOVsDateInitial),
                IRPLOVsInt(iRPLOVsIntInitial),
                IRPString(iRPStringInitial),
                IRWOCrLongStr(iRWOCrLongStrInitial),
                IRWOCrLOVe(iRWOCrLOVeInitial),
                IRMMCPString(iRMMCPStringInitial),
                IRMPChar(iRMPCharInitial),
                IRMPDate(iRMPDateInitial),
                IRMPDouble(iRMPDoubleInitial),
                IRMPInt(iRMPIntInitial),
                IRMPLocal(iRMPLocalInitial),
                IRMPLOVe(iRMPLOVeInitial),
                IRMPLOVs(iRMPLOVsInitial),
                IRMPLOVsDate(iRMPLOVsDateInitial),
                IRMPLOVsInt(iRMPLOVsIntInitial),
                IRMWOPBool(iRMWOPBoolInitial)
            {
            }
        };

         /**  @brief 
                 <rsamant> 17-Apr-2012
                 Flags indicating which attributes are being set in custom workset creation
                 

          */
        public:
        struct TestUtilsCustomWorksetCreationInputFlags
        {
            public: /** flags */ NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags Flags;
            public: TestUtilsCustomWorksetCreationInputFlags() :
                Flags()
            {
            }
            /** Constructor for the TestUtilsCustomWorksetCreationInputFlags struct. */ 
            public: TestUtilsCustomWorksetCreationInputFlags(const NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags &flagsInitial /** flags */ ) :
                Flags(flagsInitial)
            {
            }
        };

         /**  @brief 
                 <rsamant> 17-Apr-2012
                 Structure for creating custom workset
                 

          */
        public:
        struct TestUtilsCustomWorksetCreationInput
        {
            public: /** worksettype */ NXString WorkSetType;
            public: /** worksetid */ NXString WorksetId;
            public: /** worksetrev */ NXString WorksetRev;
            public: /** templatename */ NXString TemplateName;
            public: /** worksetflags */ NXOpen::TCINDebugSession::TestUtilsCustomWorksetCreationInputFlags WorksetFlags;
            public: /** customitemcreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInput CustomItemCreationInput;
            public: TestUtilsCustomWorksetCreationInput() :
                WorkSetType(),
                WorksetId(),
                WorksetRev(),
                TemplateName(),
                WorksetFlags(),
                CustomItemCreationInput()
            {
            }
            /** Constructor for the TestUtilsCustomWorksetCreationInput struct. */ 
            public: TestUtilsCustomWorksetCreationInput(const NXString &workSetTypeInitial /** worksettype */ , 
                    const NXString &worksetIdInitial /** worksetid */ , 
                    const NXString &worksetRevInitial /** worksetrev */ , 
                    const NXString &templateNameInitial /** templatename */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomWorksetCreationInputFlags &worksetFlagsInitial /** worksetflags */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInput &customItemCreationInputInitial /** customitemcreationinput */ ) :
                WorkSetType(workSetTypeInitial),
                WorksetId(worksetIdInitial),
                WorksetRev(worksetRevInitial),
                TemplateName(templateNameInitial),
                WorksetFlags(worksetFlagsInitial),
                CustomItemCreationInput(customItemCreationInputInitial)
            {
            }
        };

         /**  @brief 
               < rsamant> 17-Apr-2012
                Flags indicating which attributes are being set in custom shape item creation
               

          */
        public:
        struct TestUtilsCustomShapeItemCreationInputFlags
        {
            public: /** flags */ NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags Flags;
            public: /** ircrdouble */ bool IRCrDouble;
            public: TestUtilsCustomShapeItemCreationInputFlags() :
                Flags(),
                IRCrDouble()
            {
            }
            /** Constructor for the TestUtilsCustomShapeItemCreationInputFlags struct. */ 
            public: TestUtilsCustomShapeItemCreationInputFlags(const NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags &flagsInitial /** flags */ , 
                    bool iRCrDoubleInitial /** ircrdouble */ ) :
                Flags(flagsInitial),
                IRCrDouble(iRCrDoubleInitial)
            {
            }
        };

         /**  @brief 
               <rsamant> 17-Apr-2012
               Structure for creating custom shape item type
               

          */
        public:
        struct TestUtilsCustomShapeItemCreationInput
        {
            public: /** itemtype */ NXString ItemType;
            public: /** itemid */ NXString ItemId;
            public: /** itemrev */ NXString ItemRev;
            public: /** templatename */ NXString TemplateName;
            public: /** ircrdouble */ double IRCrDouble;
            public: /** shapeitemflags */ NXOpen::TCINDebugSession::TestUtilsCustomShapeItemCreationInputFlags ShapeItemFlags;
            public: /** customitemcreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInput CustomItemCreationInput;
            public: TestUtilsCustomShapeItemCreationInput() :
                ItemType(),
                ItemId(),
                ItemRev(),
                TemplateName(),
                IRCrDouble(),
                ShapeItemFlags(),
                CustomItemCreationInput()
            {
            }
            /** Constructor for the TestUtilsCustomShapeItemCreationInput struct. */ 
            public: TestUtilsCustomShapeItemCreationInput(const NXString &itemTypeInitial /** itemtype */ , 
                    const NXString &itemIdInitial /** itemid */ , 
                    const NXString &itemRevInitial /** itemrev */ , 
                    const NXString &templateNameInitial /** templatename */ , 
                    double iRCrDoubleInitial /** ircrdouble */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomShapeItemCreationInputFlags &shapeItemFlagsInitial /** shapeitemflags */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInput &customItemCreationInputInitial /** customitemcreationinput */ ) :
                ItemType(itemTypeInitial),
                ItemId(itemIdInitial),
                ItemRev(itemRevInitial),
                TemplateName(templateNameInitial),
                IRCrDouble(iRCrDoubleInitial),
                ShapeItemFlags(shapeItemFlagsInitial),
                CustomItemCreationInput(customItemCreationInputInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 19-Oct-2011
             Structure to input data needed for Shape DE creation
             After the call to InitializeShapeDECreationInput(), only the fields marked "Required" have to assigned
             Rest of the fields are optional and defaults will be used if not specifically assigned
               

          */
        public:
        struct TestUtilsShapeDECreationInput
        {
            public: /** subsetname */ NXString SubsetName;
            public: /** designelementid */ NXString DesignElementId;
            public: /** deapp */ NXOpen::FileNewApplication DeApp;
            public: /** templatefilename */ NXString TemplateFileName;
            public: /** designelementname */ NXString DesignElementName;
            public: /** designelementdescription */ NXString DesignElementDescription;
            public: /** typetemplatestring */ NXString TypeTemplateString;
            public: /** referenceset */ NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType ReferenceSet;
            public: /** layer */ NXOpen::Assemblies::DesignElementBuilder::LayerOptionType Layer;
            public: /** iscustomde */ bool IsCustomDE;
            public: /** customdecreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput CustomDECreationInput;
            public: /** iscustomshapeitem */ bool IsCustomShapeItem;
            public: /** customshapeitemcreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomShapeItemCreationInput CustomShapeItemCreationInput;
            public: /** templatepresentationname */ NXString TemplatePresentationName;
            public: /** applicationname */ NXString ApplicationName;
            public: /** itemtype */ NXString ItemType;
            public: /** designelementtype */ NXString DesignElementType;
            public: /** designelementstate */ NXString DesignElementState;
            public: TestUtilsShapeDECreationInput() :
                SubsetName(),
                DesignElementId(),
                DeApp((NXOpen::FileNewApplication)0),
                TemplateFileName(),
                DesignElementName(),
                DesignElementDescription(),
                TypeTemplateString(),
                ReferenceSet((NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType)0),
                Layer((NXOpen::Assemblies::DesignElementBuilder::LayerOptionType)0),
                IsCustomDE(),
                CustomDECreationInput(),
                IsCustomShapeItem(),
                CustomShapeItemCreationInput(),
                TemplatePresentationName(),
                ApplicationName(),
                ItemType(),
                DesignElementType(),
                DesignElementState()
            {
            }
            /** Constructor for the TestUtilsShapeDECreationInput struct. */ 
            public: TestUtilsShapeDECreationInput(const NXString &subsetNameInitial /** subsetname */ , 
                    const NXString &designElementIdInitial /** designelementid */ , 
                    NXOpen::FileNewApplication deAppInitial /** deapp */ , 
                    const NXString &templateFileNameInitial /** templatefilename */ , 
                    const NXString &designElementNameInitial /** designelementname */ , 
                    const NXString &designElementDescriptionInitial /** designelementdescription */ , 
                    const NXString &typeTemplateStringInitial /** typetemplatestring */ , 
                    NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType referenceSetInitial /** referenceset */ , 
                    NXOpen::Assemblies::DesignElementBuilder::LayerOptionType layerInitial /** layer */ , 
                    bool isCustomDEInitial /** iscustomde */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput &customDECreationInputInitial /** customdecreationinput */ , 
                    bool isCustomShapeItemInitial /** iscustomshapeitem */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomShapeItemCreationInput &customShapeItemCreationInputInitial /** customshapeitemcreationinput */ , 
                    const NXString &templatePresentationNameInitial /** templatepresentationname */ , 
                    const NXString &applicationNameInitial /** applicationname */ , 
                    const NXString &itemTypeInitial /** itemtype */ , 
                    const NXString &designElementTypeInitial /** designelementtype */ , 
                    const NXString &designElementStateInitial /** designelementstate */ ) :
                SubsetName(subsetNameInitial),
                DesignElementId(designElementIdInitial),
                DeApp(deAppInitial),
                TemplateFileName(templateFileNameInitial),
                DesignElementName(designElementNameInitial),
                DesignElementDescription(designElementDescriptionInitial),
                TypeTemplateString(typeTemplateStringInitial),
                ReferenceSet(referenceSetInitial),
                Layer(layerInitial),
                IsCustomDE(isCustomDEInitial),
                CustomDECreationInput(customDECreationInputInitial),
                IsCustomShapeItem(isCustomShapeItemInitial),
                CustomShapeItemCreationInput(customShapeItemCreationInputInitial),
                TemplatePresentationName(templatePresentationNameInitial),
                ApplicationName(applicationNameInitial),
                ItemType(itemTypeInitial),
                DesignElementType(designElementTypeInitial),
                DesignElementState(designElementStateInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 19-Oct-2011
             Structure to input data needed for Promissory DE creation
             After the call to InitializePromissoryDECreationInput(), only the fields marked "Required" have to assigned
             Rest of the fields are optional and defaults will be used if not specifically assigned
               

          */
        public:
        struct TestUtilsPromissoryDECreationInput
        {
            public: /** subsetname */ NXString SubsetName;
            public: /** designelementid */ NXString DesignElementId;
            public: /** deapp */ NXOpen::FileNewApplication DeApp;
            public: /** templatefilename */ NXString TemplateFileName;
            public: /** designelementname */ NXString DesignElementName;
            public: /** designelementdescription */ NXString DesignElementDescription;
            public: /** typetemplatestring */ NXString TypeTemplateString;
            public: /** iscustomde */ bool IsCustomDE;
            public: /** customdecreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput CustomDECreationInput;
            public: /** templatepresentationname */ NXString TemplatePresentationName;
            public: /** applicationname */ NXString ApplicationName;
            public: /** itemtype */ NXString ItemType;
            public: /** designelementtype */ NXString DesignElementType;
            public: /** designelementstate */ NXString DesignElementState;
            public: TestUtilsPromissoryDECreationInput() :
                SubsetName(),
                DesignElementId(),
                DeApp((NXOpen::FileNewApplication)0),
                TemplateFileName(),
                DesignElementName(),
                DesignElementDescription(),
                TypeTemplateString(),
                IsCustomDE(),
                CustomDECreationInput(),
                TemplatePresentationName(),
                ApplicationName(),
                ItemType(),
                DesignElementType(),
                DesignElementState()
            {
            }
            /** Constructor for the TestUtilsPromissoryDECreationInput struct. */ 
            public: TestUtilsPromissoryDECreationInput(const NXString &subsetNameInitial /** subsetname */ , 
                    const NXString &designElementIdInitial /** designelementid */ , 
                    NXOpen::FileNewApplication deAppInitial /** deapp */ , 
                    const NXString &templateFileNameInitial /** templatefilename */ , 
                    const NXString &designElementNameInitial /** designelementname */ , 
                    const NXString &designElementDescriptionInitial /** designelementdescription */ , 
                    const NXString &typeTemplateStringInitial /** typetemplatestring */ , 
                    bool isCustomDEInitial /** iscustomde */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput &customDECreationInputInitial /** customdecreationinput */ , 
                    const NXString &templatePresentationNameInitial /** templatepresentationname */ , 
                    const NXString &applicationNameInitial /** applicationname */ , 
                    const NXString &itemTypeInitial /** itemtype */ , 
                    const NXString &designElementTypeInitial /** designelementtype */ , 
                    const NXString &designElementStateInitial /** designelementstate */ ) :
                SubsetName(subsetNameInitial),
                DesignElementId(designElementIdInitial),
                DeApp(deAppInitial),
                TemplateFileName(templateFileNameInitial),
                DesignElementName(designElementNameInitial),
                DesignElementDescription(designElementDescriptionInitial),
                TypeTemplateString(typeTemplateStringInitial),
                IsCustomDE(isCustomDEInitial),
                CustomDECreationInput(customDECreationInputInitial),
                TemplatePresentationName(templatePresentationNameInitial),
                ApplicationName(applicationNameInitial),
                ItemType(itemTypeInitial),
                DesignElementType(designElementTypeInitial),
                DesignElementState(designElementStateInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 19-Oct-2011
             Structure to input data needed for Reuse DE creation
             After the call to InitializeReuseDECreationInput(), only the fields marked "Required" have to assigned
             Rest of the fields are optional and defaults will be used if not specifically assigned
               

          */
        public:
        struct TestUtilsReuseDECreationInput
        {
            public: /** subsetname */ NXString SubsetName;
            public: /** parttouse */ NXString PartToUse;
            public: /** designelementid */ NXString DesignElementId;
            public: /** deapp */ NXOpen::FileNewApplication DeApp;
            public: /** templatefilename */ NXString TemplateFileName;
            public: /** designelementname */ NXString DesignElementName;
            public: /** designelementdescription */ NXString DesignElementDescription;
            public: /** typetemplatestring */ NXString TypeTemplateString;
            public: /** referenceset */ NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType ReferenceSet;
            public: /** layer */ NXOpen::Assemblies::DesignElementBuilder::LayerOptionType Layer;
            public: /** positionx */ double PositionX;
            public: /** positiony */ double PositionY;
            public: /** positionz */ double PositionZ;
            public: /** partalreadyloaded */ bool PartAlreadyLoaded;
            public: /** parthasnodataset */ bool PartHasNoDataset;
            public: /** iscustomde */ bool IsCustomDE;
            public: /** customdecreationinput */ NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput CustomDECreationInput;
            public: /** templatepresentationname */ NXString TemplatePresentationName;
            public: /** applicationname */ NXString ApplicationName;
            public: /** itemtype */ NXString ItemType;
            public: /** designelementtype */ NXString DesignElementType;
            public: /** designelementstate */ NXString DesignElementState;
            public: TestUtilsReuseDECreationInput() :
                SubsetName(),
                PartToUse(),
                DesignElementId(),
                DeApp((NXOpen::FileNewApplication)0),
                TemplateFileName(),
                DesignElementName(),
                DesignElementDescription(),
                TypeTemplateString(),
                ReferenceSet((NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType)0),
                Layer((NXOpen::Assemblies::DesignElementBuilder::LayerOptionType)0),
                PositionX(),
                PositionY(),
                PositionZ(),
                PartAlreadyLoaded(),
                PartHasNoDataset(),
                IsCustomDE(),
                CustomDECreationInput(),
                TemplatePresentationName(),
                ApplicationName(),
                ItemType(),
                DesignElementType(),
                DesignElementState()
            {
            }
            /** Constructor for the TestUtilsReuseDECreationInput struct. */ 
            public: TestUtilsReuseDECreationInput(const NXString &subsetNameInitial /** subsetname */ , 
                    const NXString &partToUseInitial /** parttouse */ , 
                    const NXString &designElementIdInitial /** designelementid */ , 
                    NXOpen::FileNewApplication deAppInitial /** deapp */ , 
                    const NXString &templateFileNameInitial /** templatefilename */ , 
                    const NXString &designElementNameInitial /** designelementname */ , 
                    const NXString &designElementDescriptionInitial /** designelementdescription */ , 
                    const NXString &typeTemplateStringInitial /** typetemplatestring */ , 
                    NXOpen::Assemblies::DesignElementBuilder::ReferenceSetType referenceSetInitial /** referenceset */ , 
                    NXOpen::Assemblies::DesignElementBuilder::LayerOptionType layerInitial /** layer */ , 
                    double positionXInitial /** positionx */ , 
                    double positionYInitial /** positiony */ , 
                    double positionZInitial /** positionz */ , 
                    bool partAlreadyLoadedInitial /** partalreadyloaded */ , 
                    bool partHasNoDatasetInitial /** parthasnodataset */ , 
                    bool isCustomDEInitial /** iscustomde */ , 
                    const NXOpen::TCINDebugSession::TestUtilsCustomDECreationInput &customDECreationInputInitial /** customdecreationinput */ , 
                    const NXString &templatePresentationNameInitial /** templatepresentationname */ , 
                    const NXString &applicationNameInitial /** applicationname */ , 
                    const NXString &itemTypeInitial /** itemtype */ , 
                    const NXString &designElementTypeInitial /** designelementtype */ , 
                    const NXString &designElementStateInitial /** designelementstate */ ) :
                SubsetName(subsetNameInitial),
                PartToUse(partToUseInitial),
                DesignElementId(designElementIdInitial),
                DeApp(deAppInitial),
                TemplateFileName(templateFileNameInitial),
                DesignElementName(designElementNameInitial),
                DesignElementDescription(designElementDescriptionInitial),
                TypeTemplateString(typeTemplateStringInitial),
                ReferenceSet(referenceSetInitial),
                Layer(layerInitial),
                PositionX(positionXInitial),
                PositionY(positionYInitial),
                PositionZ(positionZInitial),
                PartAlreadyLoaded(partAlreadyLoadedInitial),
                PartHasNoDataset(partHasNoDatasetInitial),
                IsCustomDE(isCustomDEInitial),
                CustomDECreationInput(customDECreationInputInitial),
                TemplatePresentationName(templatePresentationNameInitial),
                ApplicationName(applicationNameInitial),
                ItemType(itemTypeInitial),
                DesignElementType(designElementTypeInitial),
                DesignElementState(designElementStateInitial)
            {
            }
        };

         /**  @brief 
             <rsamant> 19-Oct-2011
             Structure to input data needed for subset creation
             After the call to InitializeSubsetCreationInput(), only the fields marked "Required" have to assigned
             Rest of the fields are optional and defaults will be used if not specifically assigned
               

          */
        public:
        struct TestUtilsSubsetCreationInput
        {
            public: /** collabdesignid */ NXString CollabDesignID;
            public: /** worksetname */ NXString WorksetName;
            public: /** subsetname */ NXString SubsetName;
            public: /** subsetdescription */ NXString SubsetDescription;
            public: /** subsetrevisionrule */ NXString SubsetRevisionRule;
            public: /** subsetseteffectivity */ bool SubsetSetEffectivity;
            public: /** subseteffectivityunitsrange */ NXString SubsetEffectivityUnitsRange;
            public: TestUtilsSubsetCreationInput() :
                CollabDesignID(),
                WorksetName(),
                SubsetName(),
                SubsetDescription(),
                SubsetRevisionRule(),
                SubsetSetEffectivity(),
                SubsetEffectivityUnitsRange()
            {
            }
            /** Constructor for the TestUtilsSubsetCreationInput struct. */ 
            public: TestUtilsSubsetCreationInput(const NXString &collabDesignIDInitial /** collabdesignid */ , 
                    const NXString &worksetNameInitial /** worksetname */ , 
                    const NXString &subsetNameInitial /** subsetname */ , 
                    const NXString &subsetDescriptionInitial /** subsetdescription */ , 
                    const NXString &subsetRevisionRuleInitial /** subsetrevisionrule */ , 
                    bool subsetSetEffectivityInitial /** subsetseteffectivity */ , 
                    const NXString &subsetEffectivityUnitsRangeInitial /** subseteffectivityunitsrange */ ) :
                CollabDesignID(collabDesignIDInitial),
                WorksetName(worksetNameInitial),
                SubsetName(subsetNameInitial),
                SubsetDescription(subsetDescriptionInitial),
                SubsetRevisionRule(subsetRevisionRuleInitial),
                SubsetSetEffectivity(subsetSetEffectivityInitial),
                SubsetEffectivityUnitsRange(subsetEffectivityUnitsRangeInitial)
            {
            }
        };

         
        public:
        struct TestUtilsAttributeInput
        {
            public: /** attributetitle */ NXString AttributeTitle;
            public: /** attributecategory */ NXString AttributeCategory;
            public: /** attributetype */ NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions AttributeType;
            public: /** isnewattribute */ bool IsNewAttribute;
            public: /** isarray */ bool IsArray;
            public: /** boolvalues */ NXString BoolValues;
            public: /** intvalues */ NXString IntValues;
            public: /** numbervalues */ NXString NumberValues;
            public: /** stringvalues */ NXString StringValues;
            public: /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */NXString DateValues;
            public: TestUtilsAttributeInput() :
                AttributeTitle(),
                AttributeCategory(),
                AttributeType((NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions)0),
                IsNewAttribute(),
                IsArray(),
                BoolValues(),
                IntValues(),
                NumberValues(),
                StringValues(),
                DateValues()
            {
            }
            /** Constructor for the TestUtilsAttributeInput struct. */ 
            public: TestUtilsAttributeInput(const NXString &attributeTitleInitial /** attributetitle */ , 
                    const NXString &attributeCategoryInitial /** attributecategory */ , 
                    NXOpen::AttributePropertiesBaseBuilder::DataTypeOptions attributeTypeInitial /** attributetype */ , 
                    bool isNewAttributeInitial /** isnewattribute */ , 
                    bool isArrayInitial /** isarray */ , 
                    const NXString &boolValuesInitial /** boolvalues */ , 
                    const NXString &intValuesInitial /** intvalues */ , 
                    const NXString &numberValuesInitial /** numbervalues */ , 
                    const NXString &stringValuesInitial /** stringvalues */ , 
                    const NXString &dateValuesInitial /** comma separated list of DD-Mmm-YYYY-hh::mm::ss */) :
                AttributeTitle(attributeTitleInitial),
                AttributeCategory(attributeCategoryInitial),
                AttributeType(attributeTypeInitial),
                IsNewAttribute(isNewAttributeInitial),
                IsArray(isArrayInitial),
                BoolValues(boolValuesInitial),
                IntValues(intValuesInitial),
                NumberValues(numberValuesInitial),
                StringValues(stringValuesInitial),
                DateValues(dateValuesInitial)
            {
            }
        };

         
        public:
        struct TestUtilsProjectInputS
        {
            public: /** projectname */ NXString ProjectName;
            public: /** assignmentstate */ NXOpen::Session::ProjectAssignmentObjectType AssignmentState;
            public: TestUtilsProjectInputS() :
                ProjectName(),
                AssignmentState((NXOpen::Session::ProjectAssignmentObjectType)0)
            {
            }
            /** Constructor for the TestUtilsProjectInputS struct. */ 
            public: TestUtilsProjectInputS(const NXString &projectNameInitial /** projectname */ , 
                    NXOpen::Session::ProjectAssignmentObjectType assignmentStateInitial /** assignmentstate */ ) :
                ProjectName(projectNameInitial),
                AssignmentState(assignmentStateInitial)
            {
            }
        };

        private: TCINDebugSessionImpl * m_tcindebugsession_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit TCINDebugSession(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~TCINDebugSession();
        /** Initialize test_utils_custom_d_e_creation_input_flags  @return  customDEreationInputFlags 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsCustomDECreationInputFlags InitializeCustomDECreationInputFlags
        (
        );
        /** Initialize test_utils_shape_d_e_creation_input  @return  shapeDECreationInput 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsShapeDECreationInput InitializeShapeDECreationInput
        (
        );
        /** Initialize promissory_d_e_creation_input  @return  promissoryDECreationInput 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsPromissoryDECreationInput InitializePromissoryDECreationInput
        (
        );
        /** Initialize reuse_d_e_creation_input  @return  reuseDECreationInput 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsReuseDECreationInput InitializeReuseDECreationInput
        (
        );
        /** Initialize subset_creation_input  @return  subsetCreationInput 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsSubsetCreationInput InitializeSubsetCreationInput
        (
        );
        /** Initialize test_utils_custom_d_e_creation_input_flags  @return  customShapeItemCreationInputFlags 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsCustomShapeItemCreationInputFlags InitializeCustomShapeItemCreationInputFlags
        (
        );
        /** Initialize test_utils_custom_d_e_creation_input_flags  @return  customWorksetCreationInputFlags 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsCustomWorksetCreationInputFlags InitializeCustomWorksetCreationInputFlags
        (
        );
        /** Initialize test_utils_custom_item_creation_input_flags  @return  customItemCreationInputFlags 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::TCINDebugSession::TestUtilsCustomItemCreationInputFlags InitializeCustomItemCreationInputFlags
        (
        );
        /** Set Flags on NxDump Utility 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetNxPartInfoFlags
        (
            const NXOpen::PDMDebugSession::NxPartInfoFlags & nxFlags /** NX Part Information Dump flags */
        );
        /** Get the default nxdump info flags  @return  NX Part Information Dump flags with default values 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::NxPartInfoFlags GetDefaultNxPartInfoFlags
        (
        );
        /** Get current nxdump info flags  @return  NX Part Information Dump flags with default values 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::NxPartInfoFlags GetCurrentNxPartInfoFlags
        (
        );
        /** Get the default dump info flags to default values  @return  Workset Information Dump flags with default values
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::WorksetInformationFlags GetDefaultWorksetInfoFlags
        (
        );
        /** Get the temporary export directory for input item    @return Temporary export directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXString GetTempExportDir
        (
            const NXString & partSpec /**Part spec */
        );
        /** Get the temporary export directory for input item    @return Temporary export directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        NXString GetTempExportDir
        (
            const char * partSpec /**Part spec */
        );
        /** Initialize test 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void InitializeTest
        (
            const NXString & testcaseName /** testcase name */
        );
        /** Initialize test 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void InitializeTest
        (
            const char * testcaseName /** testcase name */
        );
        /** Ask config rule  @return  config rule 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXString AskConfigRule
        (
        );
        /** Set config rule 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetConfigRule
        (
            const NXString & configRule /** config rule to set */
        );
        /** Set config rule 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetConfigRule
        (
            const char * configRule /** config rule to set */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewPart
        (
            const NXString & partName /** part name */,
            const NXString & itemType /** item type */,
            const NXString & itemRevType /** item rev type */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewPart
        (
            const char * partName /** part name */,
            const char * itemType /** item type */,
            const char * itemRevType /** item rev type */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewPart
        (
            const NXString & partName /** part name */,
            bool usingPartOperationBuilder /** usingPartOperationBuilder */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewPart
        (
            const char * partName /** part name */,
            bool usingPartOperationBuilder /** usingPartOperationBuilder */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateDrawingOfPart
        (
            const NXString & itemType /** itemType */,
            const NXString & masterPart /** masterPart */,
            const NXString & datasetName /** datasetName */,
            bool autoAssign /** autoAssign */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateDrawingOfPart
        (
            const char * itemType /** itemType */,
            const char * masterPart /** masterPart */,
            const char * datasetName /** datasetName */,
            bool autoAssign /** autoAssign */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateDrawingOfPart
        (
            const NXString & partName /** partName */,
            const NXString & revision /** revision */,
            const NXString & itemType /** itemType */,
            bool autoAssignDsName /** autoAssignDsName */,
            bool usingPartOperationBuilder /** usingPartOperationBuilder */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateDrawingOfPart
        (
            const char * partName /** partName */,
            const char * revision /** revision */,
            const char * itemType /** itemType */,
            bool autoAssignDsName /** autoAssignDsName */,
            bool usingPartOperationBuilder /** usingPartOperationBuilder */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateDrawingOfPartWithBlankTemplate
        (
            const NXString & partType /** partType */,
            const NXString & masterPart /** masterPart */,
            const NXString & datasetName /** datasetName */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateDrawingOfPartWithBlankTemplate
        (
            const char * partType /** partType */,
            const char * masterPart /** masterPart */,
            const char * datasetName /** datasetName */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateDrawingOfPartWithBlankTemplate
        (
            const NXString & partType /** partType */,
            const NXString & partName /** partName */,
            const NXString & revision /** revision */,
            bool usingPartoperationBuilder /** usingPartoperationBuilder */
        );
        /** Create drawing of part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateDrawingOfPartWithBlankTemplate
        (
            const char * partType /** partType */,
            const char * partName /** partName */,
            const char * revision /** revision */,
            bool usingPartoperationBuilder /** usingPartoperationBuilder */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateAltrepOfPart
        (
            const NXString & itemType /** itemType */,
            const NXString & masterPart /** masterPart */,
            const NXString & datasetName /** datasetName */,
            bool autoAssign /** autoAssign */
        );
        /** Create new part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateAltrepOfPart
        (
            const char * itemType /** itemType */,
            const char * masterPart /** masterPart */,
            const char * datasetName /** datasetName */,
            bool autoAssign /** autoAssign */
        );
        /** Add block to current work part
                with hardcoded dimensions (0.0, 0.0, 0.0, 100, 100, 100) 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void AddBlock
        (
        );
        /** Add block to current work part
                with provided dimensions 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void AddBlock
        (
            double originX /** originX */,
            double originY /** originY */,
            double originZ /** originZ */,
            double length /** length */,
            double width /** width */,
            double height /** height */
        );
        /** Edit existing block feature
                with provided dimensions 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void EditParametersOfBlock
        (
            const NXString & blockFeatureName /** existing feature name */,
            double originX /** originX */,
            double originY /** originY */,
            double originZ /** originZ */,
            double length /** length */,
            double width /** width */,
            double height /** height */
        );
        /** Edit existing block feature
                with provided dimensions 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void EditParametersOfBlock
        (
            const char * blockFeatureName /** existing feature name */,
            double originX /** originX */,
            double originY /** originY */,
            double originZ /** originZ */,
            double length /** length */,
            double width /** width */,
            double height /** height */
        );
        /** Set load options 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetLoadOption
        (
            const NXString & componentToLoad /** componentToLoad */,
            bool partialLoad /** partialLoad */,
            bool interPart /** interPart */,
            bool allowSubstitute /** allowSubstitute */
        );
        /** Set load options 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetLoadOption
        (
            const char * componentToLoad /** componentToLoad */,
            bool partialLoad /** partialLoad */,
            bool interPart /** interPart */,
            bool allowSubstitute /** allowSubstitute */
        );
        /** Create new workset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewWorkset
        (
            const NXString & workSetType /** workset type */,
            const NXString & worksetId /** workset id */,
            const NXString & worksetRev /** workset revsion id */,
            const NXString & tempFileName /** template filename */,
            const NXString & defaultFolderLoc /** folder location */
        );
        /** Create new workset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewWorkset
        (
            const char * workSetType /** workset type */,
            const char * worksetId /** workset id */,
            const char * worksetRev /** workset revsion id */,
            const char * tempFileName /** template filename */,
            const char * defaultFolderLoc /** folder location */
        );
        /** Create new workset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewWorkset
        (
            const NXString & workSetType /** workset type */,
            const NXString & worksetId /** workset id */,
            const NXString & worksetRev /** workset revsion id */,
            const NXString & tempFileName /** template filename */
        );
        /** Create new workset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewWorkset
        (
            const char * workSetType /** workset type */,
            const char * worksetId /** workset id */,
            const char * worksetRev /** workset revsion id */,
            const char * tempFileName /** template filename */
        );
        /** Create new subset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewSubset
        (
            const NXString & collabDesignID /** collaborative design id */,
            const NXString & worksetName /** workset name */,
            const NXString & subsetName /** subset name */,
            const NXString & subsetDescription /** subset description */,
            const NXString & subsetRevisionRule /** subset revision rule, default "Any Status; Working" */,
            bool subsetSetEffectivity /** use effectivity? */
        );
        /** Create new subset 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewSubset
        (
            const char * collabDesignID /** collaborative design id */,
            const char * worksetName /** workset name */,
            const char * subsetName /** subset name */,
            const char * subsetDescription /** subset description */,
            const char * subsetRevisionRule /** subset revision rule, default "Any Status; Working" */,
            bool subsetSetEffectivity /** use effectivity? */
        );
        /** Set subset as workpart 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetSubsetAsWorkPart
        (
            const NXString & subsetName /** subsetName  */
        );
        /** Set subset as workpart 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetSubsetAsWorkPart
        (
            const char * subsetName /** subsetName  */
        );
        /** Create new shape design element 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewShapeDesignElement
        (
            const NXString & subsetName /** subset of open part that design element will go in, if no name provided then first one found will be used */,
            const NXString & designElementId /** design element id */,
            const NXString & designElementName /** design element name */,
            const NXString & designElementDescription /** design element description */
        );
        /** Create new shape design element 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewShapeDesignElement
        (
            const char * subsetName /** subset of open part that design element will go in, if no name provided then first one found will be used */,
            const char * designElementId /** design element id */,
            const char * designElementName /** design element name */,
            const char * designElementDescription /** design element description */
        );
        /** Create new shape design element 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewShapeDesignElement
        (
            const NXOpen::TCINDebugSession::TestUtilsShapeDECreationInput & shapeDECreationInput /** shapeDECreationInput */
        );
        /** Finalize test 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void FinalizeTest
        (
            const NXString & testcaseName /** testcase name */
        );
        /** Finalize test 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void FinalizeTest
        (
            const char * testcaseName /** testcase name */
        );
        /** Print load options and other useful things 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintLoadOptions
        (
        );
        /** Open a part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void OpenPart
        (
            const NXString & encodedName /** part to open */
        );
        /** Open a part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void OpenPart
        (
            const char * encodedName /** part to open */
        );
        /** Set display part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetDisplayPart
        (
            const NXString & encodedName /** part to set as display part */
        );
        /** Set display part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetDisplayPart
        (
            const char * encodedName /** part to set as display part */
        );
        /** Set work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetWorkPart
        (
            const NXString & encodedName /** part to set as work part */
        );
        /** Set work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetWorkPart
        (
            const char * encodedName /** part to set as work part */
        );
        /** Save work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SaveWorkPart
        (
        );
        /** Force save all 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ForceSaveAll
        (
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SaveWorkPartAs
        (
            const NXString & itemType /** item type */,
            const NXString & itemId /** item id */,
            const NXString & revId /** item rev id */,
            const NXString & fileType /** file type */,
            const NXString & fileName /** file name */
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SaveWorkPartAs
        (
            const char * itemType /** item type */,
            const char * itemId /** item id */,
            const char * revId /** item rev id */,
            const char * fileType /** file type */,
            const char * fileName /** file name */
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SaveWorkPartAs
        (
            const NXString & newItemId /** newItemId */,
            const NXString & newRevId /** newRevId */,
            const NXString & newItemName /** newItemName */,
            const NXString & operationType /** OperationTypeNone/OperationTypeCreate/OperationTypeRevise/OperationTypeSaveAs/OperationTypeSave/OperationTypeDelete */
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SaveWorkPartAs
        (
            const char * newItemId /** newItemId */,
            const char * newRevId /** newRevId */,
            const char * newItemName /** newItemName */,
            const char * operationType /** OperationTypeNone/OperationTypeCreate/OperationTypeRevise/OperationTypeSaveAs/OperationTypeSave/OperationTypeDelete */
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SaveWorkPartAsWithOption
        (
            const NXString & itemType /** item type */,
            const NXString & itemId /** item id */,
            const NXString & revId /** item rev id */,
            const NXString & fileType /** file type */,
            const NXString & fileName /** file name */,
            const NXString & saveAsOption /** saveAsOption */
        );
        /** Save work part as 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SaveWorkPartAsWithOption
        (
            const char * itemType /** item type */,
            const char * itemId /** item id */,
            const char * revId /** item rev id */,
            const char * fileType /** file type */,
            const char * fileName /** file name */,
            const char * saveAsOption /** saveAsOption */
        );
        /** Close all parts 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CloseAllParts
        (
        );
        /** Close single part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ClosePart
        (
            const NXString & encodedName /** part to close */,
            bool closeAllChildren /** close all children? */
        );
        /** Close single part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ClosePart
        (
            const char * encodedName /** part to close */,
            bool closeAllChildren /** close all children? */
        );
        /** Print NXPart Information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNxpartInformation
        (
            const NXString & encodedName /** part to list */,
            bool printTableEntry /** list the table entry as well */,
            int levels /** levels to list */
        );
        /** Print NXPart Information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintNxpartInformation
        (
            const char * encodedName /** part to list */,
            bool printTableEntry /** list the table entry as well */,
            int levels /** levels to list */
        );
        /** Print TCPart Information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcpartInformation
        (
            const NXString & encodedName /** part to list */,
            int levels /** levels to list */,
            bool relations /** list relations as well */
        );
        /** Print TCPart Information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcpartInformation
        (
            const char * encodedName /** part to list */,
            int levels /** levels to list */,
            bool relations /** list relations as well */
        );
        /** Print Display Part Information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintDisplayPartInformation
        (
        );
        /** Initialize clone 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void InitializeClone
        (
            const NXString & operation /** operation class */
        );
        /** Initialize clone 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void InitializeClone
        (
            const char * operation /** operation class */
        );
        /** Set clone naming technique 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneNamingTechnique
        (
            const NXString & namingTech /** naming technique */
        );
        /** Set clone naming technique 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneNamingTechnique
        (
            const char * namingTech /** naming technique */
        );
        /** Set clone naming 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneNaming
        (
            const NXString & namingRule /** naming rule */,
            const NXString & base /** name to replace, can be ""  */,
            const NXString & str /** string to append,prepend, or replace with  */
        );
        /** Set clone naming 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneNaming
        (
            const char * namingRule /** naming rule */,
            const char * base /** name to replace, can be ""  */,
            const char * str /** string to append,prepend, or replace with  */
        );
        /** Set clone folder 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneFolder
        (
            const NXString & folderName /** folder name */
        );
        /** Set clone folder 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneFolder
        (
            const char * folderName /** folder name */
        );
        /** Set clone directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneDirectory
        (
            const NXString & directory /** fullpath directory */
        );
        /** Set clone directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneDirectory
        (
            const char * directory /** fullpath directory */
        );
        /** Set clone directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneOwner
        (
            const NXString & owner /** owner */
        );
        /** Set clone directory 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneOwner
        (
            const char * owner /** owner */
        );
        /** Set clone checkin boolean 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneCheckin
        (
            bool relations /** checkin boolean */
        );
        /** Set clone checkout boolean 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCloneCheckout
        (
            bool relations /** checkin boolean */,
            const NXString & comment /** owner */
        );
        /** Set clone checkout boolean 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCloneCheckout
        (
            bool relations /** checkin boolean */,
            const char * comment /** owner */
        );
        /** Finish clone 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void FinishClone
        (
        );
        /** Import assembly with with clone options already set and option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ImportAssemblyWithOptions
        (
            const NXString & asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */
        );
        /** Import assembly with with clone options already set and option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ImportAssemblyWithOptions
        (
            const char * asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */
        );
        /** Import assembly with clone options already set 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CloneAssemblyWithOptions
        (
            const NXString & asmName /** assembly name */
        );
        /** Import assembly with clone options already set 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CloneAssemblyWithOptions
        (
            const char * asmName /** assembly name */
        );
        /** Export assembly with clone options already set 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ExportAssemblyWithOptions
        (
            const NXString & asmName /** assembly name */
        );
        /** Export assembly with clone options already set 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ExportAssemblyWithOptions
        (
            const char * asmName /** assembly name */
        );
        /** Import assembly with option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ImportAssembly
        (
            const NXString & asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */
        );
        /** Import assembly with option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ImportAssembly
        (
            const char * asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */
        );
        /** Import assembly with option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ImportAssembly
        (
            const NXString & asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */,
            const NXString & namingRule /** naming rule */,
            const NXString & base /** name to replace, can be ""  */,
            const NXString & str /** string to append,prepend, or replace with  */
        );
        /** Import assembly with option to create new revision 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ImportAssembly
        (
            const char * asmName /** assembly name */,
            bool revUp /** whether or not to create new revision */,
            const char * namingRule /** naming rule */,
            const char * base /** name to replace, can be ""  */,
            const char * str /** string to append,prepend, or replace with  */
        );
        /** Export assembly 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ExportAssembly
        (
            const NXString & asmName /** assembly name */,
            const NXString & namingRule /** naming rule */,
            const NXString & base /** name to replace, can be ""  */,
            const NXString & str /** string to append,prepend, or replace with  */
        );
        /** Export assembly 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ExportAssembly
        (
            const char * asmName /** assembly name */,
            const char * namingRule /** naming rule */,
            const char * base /** name to replace, can be ""  */,
            const char * str /** string to append,prepend, or replace with  */
        );
        /** Export assembly 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ExportAssembly
        (
            const NXString & asmName /** assembly name */
        );
        /** Export assembly 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ExportAssembly
        (
            const char * asmName /** assembly name */
        );
        /** Export assembly  @return  full path including image name 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXString FindImageToRun
        (
            const NXString & imageName /** image name */
        );
        /** Export assembly  @return  full path including image name 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        NXString FindImageToRun
        (
            const char * imageName /** image name */
        );
        /** NxManger Refile 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void NxManagerRefile
        (
            const NXString & inputFile /** refile input file */,
            const NXString & logFile /** refile log file */
        );
        /** NxManger Refile 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void NxManagerRefile
        (
            const char * inputFile /** refile input file */,
            const char * logFile /** refile log file */
        );
        /** Set structure load option 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetStructureUpdateOnLoad
        (
            const NXString & synchroniseOnLoadType /** structure load option */
        );
        /** Set structure load option 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetStructureUpdateOnLoad
        (
            const char * synchroniseOnLoadType /** structure load option */
        );
        /** Sets reference sets for MCD 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetMCDRefSets
        (
        );
        /** Update structure 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void UpdateStructure
        (
            const NXString & encodedName /** part to update structure on */,
            int numLevels /** numLevels */
        );
        /** Update structure 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void UpdateStructure
        (
            const char * encodedName /** part to update structure on */,
            int numLevels /** numLevels */
        );
        /** Update root structure 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void UpdateRootStructure
        (
            int numLevels /** numLevels */
        );
        /** Set update structure on expand preference 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetExpandPreference
        (
            bool updateStructureOnExpand /** update structure on expand preference */
        );
        /** Set messagesInconsistentRevisionsType 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetMessagesInconsistentRevisions
        (
            const NXString & messagesInconsistentRevisionsType /** messagesInconsistentRevisionsType */
        );
        /** Set messagesInconsistentRevisionsType 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetMessagesInconsistentRevisions
        (
            const char * messagesInconsistentRevisionsType /** messagesInconsistentRevisionsType */
        );
        /** Set jtUpdateFromSource preference 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetJtUpdateFromSource
        (
            bool jtUpdateFromSource /** jtUpdateFromSource */
        );
        /** Add part to workpart 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void AddPartToWorkPart
        (
            const NXString & partToAdd /** partToAdd */,
            const NXString & refSetName /** refSetName */
        );
        /** Add part to workpart 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void AddPartToWorkPart
        (
            const char * partToAdd /** partToAdd */,
            const char * refSetName /** refSetName */
        );
        /** Validate all bodies in part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ValidateAllBodiesInPart
        (
            const NXString & validatePart /** validatePart */
        );
        /** Validate all bodies in part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ValidateAllBodiesInPart
        (
            const char * validatePart /** validatePart */
        );
        /** Set or remove reference only status based on status input flag 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetComponentReferenceOnlyStatus
        (
            const NXString & compName /** compName */,
            bool status /** status */
        );
        /** Set or remove reference only status based on status input flag 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetComponentReferenceOnlyStatus
        (
            const char * compName /** compName */,
            bool status /** status */
        );
        /** Open visual reporting 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void OpenVisualReporting
        (
        );
        /** Set current visual support from passed in definition file 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetCurrentVisualReport
        (
            const NXString & vrReportDefinitionFile /** vrReportDefinitionFile */
        );
        /** Set current visual support from passed in definition file 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetCurrentVisualReport
        (
            const char * vrReportDefinitionFile /** vrReportDefinitionFile */
        );
        /** Activate the current visual report 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ActivateCurrentVisualReport
        (
        );
        /** Create visual report 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateVisualReport
        (
            const NXString & vrpName /** vrpName */,
            const NXString & vrpDescription /** vrpDescription */,
            const NXString & vrpKeywords /** vrpKeywords */,
            const NXString & vrpPropertyType /** vrpPropertyType */,
            const NXString & vrpProperty /** vrpProperty */,
            bool vrpUnmatchedGroupEnabled /** vrpUnmatchedGroupEnabled */,
            const NXString & vrpLocation /** vrpLocation */
        );
        /** Create visual report 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateVisualReport
        (
            const char * vrpName /** vrpName */,
            const char * vrpDescription /** vrpDescription */,
            const char * vrpKeywords /** vrpKeywords */,
            const char * vrpPropertyType /** vrpPropertyType */,
            const char * vrpProperty /** vrpProperty */,
            bool vrpUnmatchedGroupEnabled /** vrpUnmatchedGroupEnabled */,
            const char * vrpLocation /** vrpLocation */
        );
        /** Create new master part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateNewMasterPart
        (
            const NXString & app /** app */,
            const NXString & partType /** partType */,
            const NXString & partName /** partName */,
            const NXString & revision /** revision */,
            const NXString & tempFileName /** tempFileName */
        );
        /** Create new master part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateNewMasterPart
        (
            const char * app /** app */,
            const char * partType /** partType */,
            const char * partName /** partName */,
            const char * revision /** revision */,
            const char * tempFileName /** tempFileName */
        );
        /** Print number of bodies and promoted features to the testcase xml 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void GetPromotedGeometryFeatureCount
        (
            const NXString & validatePart /** validatePart */
        );
        /** Print number of bodies and promoted features to the testcase xml 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void GetPromotedGeometryFeatureCount
        (
            const char * validatePart /** validatePart */
        );
        /** Apply effectivity and revision rule 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ApplyEffectivityAndRevisionRule
        (
            int effectivityValue /** effectivityValue */,
            const NXString & endItem /** endItem */,
            const NXString & dateEffValue /** dateEffValue */,
            const NXString & revisionRule /** revisionRule */
        );
        /** Apply effectivity and revision rule 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ApplyEffectivityAndRevisionRule
        (
            int effectivityValue /** effectivityValue */,
            const char * endItem /** endItem */,
            const char * dateEffValue /** dateEffValue */,
            const char * revisionRule /** revisionRule */
        );
        /** Print translation info for part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void DumpTranslationInfo
        (
            const NXString & inputFileName /** inputFileName */
        );
        /** Print translation info for part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void DumpTranslationInfo
        (
            const char * inputFileName /** inputFileName */
        );
        /** Print currently loaded components ref designator 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintRefDesignator
        (
        );
        /** Print currently loaded components suppressed state 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintIsSuppressed
        (
        );
        /** Print currently loaded components 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintComponents
        (
        );
        /** Run another NX session and run journal 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void RunAnotherNXSessionAndRunJournal
        (
            const NXString & testName /** testName */,
            const NXString & userName /** userName */,
            const NXString & userPswd /** userPswd */
        );
        /** Run another NX session and run journal 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void RunAnotherNXSessionAndRunJournal
        (
            const char * testName /** testName */,
            const char * userName /** userName */,
            const char * userPswd /** userPswd */
        );
        /** Print part load information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintPartLoadInfo
        (
        );
        /** Print NX workset information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNXWorksetInformation
        (
            const NXString & workset /** workset */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX workset information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintNXWorksetInformation
        (
            const char * workset /** workset */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX design element information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNXDesignElementInformation
        (
            const NXString & designElementName /** designElementName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX design element information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintNXDesignElementInformation
        (
            const char * designElementName /** designElementName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC navigator part item information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavPartItemInformation
        (
            const NXString & itemId /** itemId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator part item information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavPartItemInformation
        (
            const char * itemId /** itemId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator part item revision information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavPartItemRevInformation
        (
            const NXString & itemRevId /** itemRevId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator part item revision information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavPartItemRevInformation
        (
            const char * itemRevId /** itemRevId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator collaborative design information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavCollaborativeDesignInformation
        (
            const NXString & cdId /** cdId */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator collaborative design information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavCollaborativeDesignInformation
        (
            const char * cdId /** cdId */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator workset item  information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavWorksetItemInformation
        (
            const NXString & itemId /** itemId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator workset item  information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavWorksetItemInformation
        (
            const char * itemId /** itemId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator folder contents information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavFolderContentsInformation
        (
            const NXString & folderPath /** folderPath */,
            const NXString & detailLevel /** detailLevel */,
            const NXString & revOption /** revOption */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator folder contents information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavFolderContentsInformation
        (
            const char * folderPath /** folderPath */,
            const char * detailLevel /** detailLevel */,
            const char * revOption /** revOption */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator folder information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavFolderInformation
        (
            const NXString & folderPath /** folderPath */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator folder information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavFolderInformation
        (
            const char * folderPath /** folderPath */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator workset item revision information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcNavWorksetItemRevInformation
        (
            const NXString & itemRevId /** itemRevId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print TC navigator workset item revision information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcNavWorksetItemRevInformation
        (
            const char * itemRevId /** itemRevId */,
            bool expand /** flag to decide if the item is to be expanded for its contents */,
            std::vector<NXString> & propertiesToDump /** properties to dump */
        );
        /** Print NX design control element information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNXDesignControlElementInformation
        (
            const NXString & dceName /** dceName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX design control element information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintNXDesignControlElementInformation
        (
            const char * dceName /** dceName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX design feature information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNXDesignFeatureInformation
        (
            const NXString & dfName /** dfName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print NX design feature information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintNXDesignFeatureInformation
        (
            const char * dfName /** dfName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC collaborative design information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTCCollaborativeDesignInformation
        (
            const NXString & collaborativeDesignId /** collaborativeDesignId */
        );
        /** Print TC collaborative design information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTCCollaborativeDesignInformation
        (
            const char * collaborativeDesignId /** collaborativeDesignId */
        );
        /** Print TC partition information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTCPartitionInformation
        (
            const NXString & partitionId /** partitionId */
        );
        /** Print TC partition information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTCPartitionInformation
        (
            const char * partitionId /** partitionId */
        );
        /** Print TC design control information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTCDesignControlElementInformation
        (
            const NXString & designControlElementName /** designControlElementName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC design control information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTCDesignControlElementInformation
        (
            const char * designControlElementName /** designControlElementName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC design feature information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTCDesignFeatureInformation
        (
            const NXString & designFeatureName /** designFeatureName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC design feature information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTCDesignFeatureInformation
        (
            const char * designFeatureName /** designFeatureName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC workset information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTCWorksetInformation
        (
            const NXString & worksetName /** worksetName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print TC workset information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTCWorksetInformation
        (
            const char * worksetName /** worksetName */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** workset_information_flags */
        );
        /** Print workset comparison results information between NX and TC information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CompareWorksetInformationBetweenNXandTC
        (
            std::vector<NXString> & worksetNames /** worksetNames */
        );
        /** Create collaborative design 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void CreateCollaborativeDesign
        (
            const NXString & collaborativeDesignID /** collaborativeDesignID */,
            const NXString & collaborativeDesignName /** collaborativeDesignName */,
            const NXString & collaborativeDesignFolder /** collaborativeDesignFolder */
        );
        /** Create collaborative design 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void CreateCollaborativeDesign
        (
            const char * collaborativeDesignID /** collaborativeDesignID */,
            const char * collaborativeDesignName /** collaborativeDesignName */,
            const char * collaborativeDesignFolder /** collaborativeDesignFolder */
        );
        /** Set design element as work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetDEAsWorkPart
        (
            const NXString & subsetName /** subsetName */,
            const NXString & deSid /** DE_SID */
        );
        /** Set design element as work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetDEAsWorkPart
        (
            const char * subsetName /** subsetName */,
            const char * deSid /** DE_SID */
        );
        /** Set design element as work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void SetDEAsWorkPart
        (
            const NXString & part /** part */ ,
            const NXString & subsetName /** subsetName */,
            const NXString & deSid /** DE_SID */
        );
        /** Set design element as work part 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void SetDEAsWorkPart
        (
            const char * part /** part */ ,
            const char * subsetName /** subsetName */,
            const char * deSid /** DE_SID */
        );
        /** Print tc ecn information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintTcEcnInformation
        (
            const NXString & ecnName /** ecnName */
        );
        /** Print tc ecn information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void PrintTcEcnInformation
        (
            const char * ecnName /** ecnName */
        );
        /** Print sheets and descendents information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintSheetsAndDescendentsInformation
        (
        );
        /** Print NX sheets and descendents information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintNXSheetsAndDescendentsInformation
        (
        );
        /** Print file name mappings information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintFileNameMappingsInformation
        (
        );
        /** Print deltas information 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintDeltasInformation
        (
        );
        /** Print pending components 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintPendingComponents
        (
        );
        /** Translate component 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void TranslateComponent
        (
            const NXString & parentComponentName /** parentComponentName */,
            const NXString & componentName /** componentName */,
            const NXString & arrangementName /** arrangementName */,
            double x /** move in x position */,
            double y /** move in y position */,
            double z /** move in z position */
        );
        /** Translate component 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void TranslateComponent
        (
            const char * parentComponentName /** parentComponentName */,
            const char * componentName /** componentName */,
            const char * arrangementName /** arrangementName */,
            double x /** move in x position */,
            double y /** move in y position */,
            double z /** move in z position */
        );
        /** Dump soa xml to testcase jaformat xml 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void DumpSoaXml
        (
            const NXString & soaXmlStream /** soaXmlStream */
        );
        /** Dump soa xml to testcase jaformat xml 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void DumpSoaXml
        (
            const char * soaXmlStream /** soaXmlStream */
        );
        /** Function returns a formatted output date which will be in system locale @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXString FormatDateTimeToLocale
        (
            const NXString & dateToFormat /** datetoformat */ 
        );
        /** Function returns a formatted output date which will be in system locale @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        NXString FormatDateTimeToLocale
        (
            const char * dateToFormat /** datetoformat */ 
        );
        /** Given a date string in "%d-%b-%Y %H:%M:%S" format, returns the time string, day, month and year.
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void GetTimeString
        (
            const NXString & formattedDate /** formatteddate */ ,
            NXString* timeString /** time string */ ,
            NXOpen::DateItemBuilder::DayOfMonth* day /** day */ ,
            NXOpen::DateItemBuilder::MonthOfYear* month /** month */ ,
            NXString* year /** year */ 
        );
        /** Given a date string in "%d-%b-%Y %H:%M:%S" format, returns the time string, day, month and year.
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void GetTimeString
        (
            const char * formattedDate /** formatteddate */ ,
            NXString* timeString /** time string */ ,
            NXOpen::DateItemBuilder::DayOfMonth* day /** day */ ,
            NXOpen::DateItemBuilder::MonthOfYear* month /** month */ ,
            NXString* year /** year */ 
        );
        /** DisconnectTcForRescue 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void DisconnectTcForRescue
        (
        );
        /** CheckTcConnectionForRescue  @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: bool CheckTcConnectForRescue
        (
        );
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
