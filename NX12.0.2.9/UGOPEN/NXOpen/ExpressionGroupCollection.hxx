#ifndef NXOpen_EXPRESSIONGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_EXPRESSIONGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ExpressionGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ExpressionCollection.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ExpressionGroupCollection;
    class BasePart;
    class ExpressionGroup;
    class Expression;
    class ExpressionGroupCollectionImpl;
    /** Represents a collection of expressions groups.  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX10.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ExpressionGroupCollection : public NXOpen::TaggedObjectCollection
    {
        private: ExpressionGroupCollectionImpl * m_expressiongroupcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ExpressionGroupCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ExpressionGroupCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::ExpressionGroupCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::ExpressionGroup *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::ExpressionGroupCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::ExpressionGroupCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates an expression group  @return  the new expression group 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ExpressionGroup * Create
        (
            const NXString & name /** the name for the expression group. */
        );
        /** Creates an expression group  @return  the new expression group 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ExpressionGroup * Create
        (
            const char * name /** the name for the expression group. */
        );
        /** Changes the name of the expression group. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void Rename
        (
            NXOpen::ExpressionGroup * expressionGroup /** expression group to be renamed */,
            const NXString & newName /** new name of the expression group */
        );
        /** Changes the name of the expression group. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void Rename
        (
            NXOpen::ExpressionGroup * expressionGroup /** expression group to be renamed */,
            const char * newName /** new name of the expression group */
        );
        /** Finds the @link  NXOpen::ExpressionGroup   NXOpen::ExpressionGroup @endlink  with the given identifier as recorded in a journal.
            An object may not return the same value as its JournalIdentifier in different versions of
            the software. However newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general, this method
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Expression found 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ExpressionGroup * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found */
        );
        /** Finds the @link  NXOpen::ExpressionGroup   NXOpen::ExpressionGroup @endlink  with the given identifier as recorded in a journal.
            An object may not return the same value as its JournalIdentifier in different versions of
            the software. However newer versions of the software should find the same object when
            FindObject is passed older versions of its journal identifier. In general, this method
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Expression found 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::ExpressionGroup * FindObject
        (
            const char * journalIdentifier /** Identifier to be found */
        );
        /** Deletes an array of one or more expression groups. This method should be used when deleting an
                Expression group. DO NOT use the delete methods in Update.ja to delete expression groups 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void Delete
        (
            const std::vector<NXOpen::ExpressionGroup *> & expressionGroup /** array of expression groups to delete*/
        );
        /** Returns expression group "owner" of an expression.   @return expression group of expression 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ExpressionGroup * GetGroupOfExpression
        (
            NXOpen::Expression * expression /** the expression to query */
        );
        /** Make all expression groups visible
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAllGroupsVisible
        (
        );
        /**Sets  the active expression group 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetActive
        (
            NXOpen::ExpressionGroup * expressionGroup /** the expression group to make active*/
        );
        /**Returns  the active expression group 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ExpressionGroup * Active
        (
        );
        /** Return the default expression group  @return  the default expression group
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ExpressionGroup * GetDefault
        (
        );
        /** Returns an array of all expression groups in a part .   @return  array of  groupsexpression groups 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::ExpressionGroup *> GetAllExpressionGroupsInPart
        (
        );
        /** Returns whether or not expression group name is valid.   @return  the status of the name check. True if name is okay 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool CheckName
        (
            const NXString & name /** the name of the expression group to check. */
        );
        /** Returns whether or not expression group name is valid.   @return  the status of the name check. True if name is okay 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        bool CheckName
        (
            const char * name /** the name of the expression group to check. */
        );
        /** Exports the expressions in an expression group to a text file, or, if 'file_name' is NULL,
            list the expressions in the listing window. Throws an exception
            if there is any error.
             <br>  NOTE: if the file already exists, an exception is thrown and the
                   file is not overwritten. <br> 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ExportExpressionGroupsToFile
        (
            const std::vector<NXOpen::ExpressionGroup *> & expressionGroups /** expression groups */ ,
            const NXString & fileName /** File name specification to export expressions into. */,
            NXOpen::ExpressionCollection::SortType sortType /** How to sort the exported expressions */
        );
        /** Exports the expressions in an expression group to a text file, or, if 'file_name' is NULL,
            list the expressions in the listing window. Throws an exception
            if there is any error.
             <br>  NOTE: if the file already exists, an exception is thrown and the
                   file is not overwritten. <br> 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void ExportExpressionGroupsToFile
        (
            const std::vector<NXOpen::ExpressionGroup *> & expressionGroups /** expression groups */ ,
            const char * fileName /** File name specification to export expressions into. */,
            NXOpen::ExpressionCollection::SortType sortType /** How to sort the exported expressions */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
