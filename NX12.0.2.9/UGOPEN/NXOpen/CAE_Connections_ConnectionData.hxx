#ifndef NXOpen_CAE_CONNECTIONS_CONNECTIONDATA_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_CONNECTIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_ConnectionData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_CommonTypes.hxx>
#include <NXOpen/CAE_Connections_ComponentData.hxx>
#include <NXOpen/CAE_Connections_ConnectionDBItemData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class ConnectionData;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ComponentData;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ConnectionDBItemData;
        }
    }
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _ConnectionDataBuilder;
            class ConnectionDataImpl;
            /** Composer connection. Use this interface to set/get properties and parameters of the spot weld connection.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  ConnectionData : public NXOpen::TaggedObject
            {
                private: ConnectionDataImpl * m_connectiondata_impl;
                private: friend class  _ConnectionDataBuilder;
                protected: ConnectionData();
                public: ~ConnectionData();
                /**Returns  the connection type  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComposerConnectionType ConnectionType
                (
                );
                /**Sets  the connection type  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetConnectionType
                (
                    NXOpen::CAE::Connections::ComposerConnectionType type /** type */ 
                );
                /**Returns  the assembly name  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );
                /**Sets  the assembly name  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetName
                (
                    const NXString & name /** name */ 
                );
                /**Sets  the assembly name  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetName
                (
                    const char * name /** name */ 
                );
                /**Returns  the db item  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ConnectionDBItemData * DBItem
                (
                );
                /**Sets  the db item  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDBItem
                (
                    NXOpen::CAE::Connections::ConnectionDBItemData * dbItem /** dbitem */ 
                );
                /**Returns  the comp1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComponentData * Comp1
                (
                );
                /**Sets  the comp1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetComp1
                (
                    NXOpen::CAE::Connections::ComponentData * comp1 /** comp1 */ 
                );
                /**Returns  the comp2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComponentData * Comp2
                (
                );
                /**Sets  the comp2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetComp2
                (
                    NXOpen::CAE::Connections::ComponentData * comp2 /** comp2 */ 
                );
                /**Returns  the comp3  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Connections::ComponentData * Comp3
                (
                );
                /**Sets  the comp3  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetComp3
                (
                    NXOpen::CAE::Connections::ComponentData * comp3 /** comp3 */ 
                );
                /** Get point name coord1   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetPointNameCoord1
                (
                );
                /** Set point name coord1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPointNameCoord1
                (
                    const std::vector<NXString> & pointNameCoord1s /** pointnamecoord1s */ 
                );
                /** Get point name coord2   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetPointNameCoord2
                (
                );
                /** Set point name coord2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPointNameCoord2
                (
                    const std::vector<NXString> & pointNameCoord2s /** pointnamecoord2s */ 
                );
                /** Get point name coord3   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetPointNameCoord3
                (
                );
                /** Set point name coord3  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPointNameCoord3
                (
                    const std::vector<NXString> & pointNameCoord3s /** pointnamecoord3s */ 
                );
                /**Returns  the shank diameter  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double ShankDiameter
                (
                );
                /**Sets  the shank diameter  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetShankDiameter
                (
                    double shankDiameter /** shankdiameter */ 
                );
                /**Returns  the head diameter  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double HeadDiameter
                (
                );
                /**Sets  the head diameter  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetHeadDiameter
                (
                    double headDiameter /** headdiameter */ 
                );
                /** Get pID1s  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::TaggedObject *> GetPID1s
                (
                );
                /** Set pID1s 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPID1s
                (
                    const std::vector<NXOpen::TaggedObject *> & pID1s /** pid1s */ 
                );
                /** Get pID2s  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::TaggedObject *> GetPID2s
                (
                );
                /** Set pID2s 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPID2s
                (
                    const std::vector<NXOpen::TaggedObject *> & pID2s /** pid2s */ 
                );
                /** Get pID3s  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::TaggedObject *> GetPID3s
                (
                );
                /** Set pID3s 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPID3s
                (
                    const std::vector<NXOpen::TaggedObject *> & pID3s /** pid3s */ 
                );
                /**Returns  the maximum distance tolerance1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double MaximumDistanceTolerance1
                (
                );
                /**Sets  the maximum distance tolerance1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetMaximumDistanceTolerance1
                (
                    double maximumDistanceTolerance1 /** maximumdistancetolerance1 */ 
                );
                /**Returns  the maximum distance tolerance2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double MaximumDistanceTolerance2
                (
                );
                /**Sets  the maximum distance tolerance2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetMaximumDistanceTolerance2
                (
                    double maximumDistanceTolerance2 /** maximumdistancetolerance2 */ 
                );
                /**Returns  the search type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString SearchType1
                (
                );
                /**Sets  the search type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetSearchType1
                (
                    const NXString & searchType1 /** searchtype1 */ 
                );
                /**Sets  the search type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetSearchType1
                (
                    const char * searchType1 /** searchtype1 */ 
                );
                /**Returns  the search type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString SearchType2
                (
                );
                /**Sets  the search type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetSearchType2
                (
                    const NXString & searchType2 /** searchtype2 */ 
                );
                /**Sets  the search type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetSearchType2
                (
                    const char * searchType2 /** searchtype2 */ 
                );
                /**Returns  the expansion radius1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double ExpansionRadius1
                (
                );
                /**Sets  the expansion radius1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetExpansionRadius1
                (
                    double expansionRadius1 /** expansionradius1 */ 
                );
                /**Returns  the expansion radius2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double ExpansionRadius2
                (
                );
                /**Sets  the expansion radius2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetExpansionRadius2
                (
                    double expansionRadius2 /** expansionradius2 */ 
                );
                /**Returns  the expansion radius factor1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double ExpansionRadiusFactor1
                (
                );
                /**Sets  the expansion radius factor1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetExpansionRadiusFactor1
                (
                    double expansionRadiusFactor1 /** expansionradiusfactor1 */ 
                );
                /**Returns  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double ExpansionRadiusFactor2
                (
                );
                /**Sets  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetExpansionRadiusFactor2
                (
                    double expansionRadiusFactor2 /** expansionradiusfactor2 */ 
                );
                /**Returns  the flange type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString FlangeType1
                (
                );
                /**Sets  the flange type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetFlangeType1
                (
                    const NXString & flangeType1 /** flangetype1 */ 
                );
                /**Sets  the flange type1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetFlangeType1
                (
                    const char * flangeType1 /** flangetype1 */ 
                );
                /**Returns  the flange type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString FlangeType2
                (
                );
                /**Sets  the flange type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetFlangeType2
                (
                    const NXString & flangeType2 /** flangetype2 */ 
                );
                /**Sets  the flange type2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetFlangeType2
                (
                    const char * flangeType2 /** flangetype2 */ 
                );
                /**Returns  the expansion radius factor1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double FlangeSearchTolerance1
                (
                );
                /**Sets  the expansion radius factor1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetFlangeSearchTolerance1
                (
                    double flangeSearchTolerance1 /** flangesearchtolerance1 */ 
                );
                /**Returns  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double FlangeSearchTolerance2
                (
                );
                /**Sets  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetFlangeSearchTolerance2
                (
                    double flangeSearchTolerance2 /** flangesearchtolerance2 */ 
                );
                /** Gets axis.  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetAxis
                (
                );
                /** Sets axis. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetAxis
                (
                    const NXString & axis /** axis */ 
                );
                /** Sets axis. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetAxis
                (
                    const char * axis /** axis */ 
                );
                /**Returns  the dof1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof1
                (
                );
                /**Sets  the dof1 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof1
                (
                    bool name /** name */ 
                );
                /**Returns  the dof2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof2
                (
                );
                /**Sets  the dof2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof2
                (
                    bool name /** name */ 
                );
                /**Returns  the dof3 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof3
                (
                );
                /**Sets  the dof3 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof3
                (
                    bool name /** name */ 
                );
                /**Returns  the dof4 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof4
                (
                );
                /**Sets  the dof4 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof4
                (
                    bool name /** name */ 
                );
                /**Returns  the dof5 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof5
                (
                );
                /**Sets  the dof5 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof5
                (
                    bool name /** name */ 
                );
                /**Returns  the dof6 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Dof6
                (
                );
                /**Sets  the dof6 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetDof6
                (
                    bool name /** name */ 
                );
                /**Returns  the line part1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString LinePart1
                (
                );
                /**Sets  the line part1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetLinePart1
                (
                    const NXString & linePart /** linepart */ 
                );
                /**Sets  the line part1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetLinePart1
                (
                    const char * linePart /** linepart */ 
                );
                /**Returns  the line part2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString LinePart2
                (
                );
                /**Sets  the line part2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetLinePart2
                (
                    const NXString & linePart /** linepart */ 
                );
                /**Sets  the line part2  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                void SetLinePart2
                (
                    const char * linePart /** linepart */ 
                );
                /** Get line / FE edge recipe1   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetLineFEEdgeRecipe1
                (
                );
                /** Set line / FE edge recipe1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetLineFEEdgeRecipe1
                (
                    const std::vector<NXString> & lineFEEdgeRecipe1s /** linefeedgerecipe1s */ 
                );
                /** Get line / FE edge recipe2   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetLineFEEdgeRecipe2
                (
                );
                /** Set line / FE edge recipe1  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetLineFEEdgeRecipe2
                (
                    const std::vector<NXString> & lineFEEdgeRecipe2s /** linefeedgerecipe2s */ 
                );
                /**Returns  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: double LengthStep
                (
                );
                /**Sets  the expansion radius factor2 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetLengthStep
                (
                    double lengthStep /** lengthstep */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
