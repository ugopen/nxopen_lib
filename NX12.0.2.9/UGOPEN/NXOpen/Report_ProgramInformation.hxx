#ifndef NXOpen_REPORT_PROGRAMINFORMATION_HXX_INCLUDED
#define NXOpen_REPORT_PROGRAMINFORMATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_ProgramInformation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class ProgramInformation;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    namespace Report
    {
        class _ProgramInformationBuilder;
        class ProgramInformationImpl;
        /** Represents the program information for command automation. 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  ProgramInformation : public NXOpen::TaggedObject, public virtual NXOpen::INXObject
        {
            /** Represents the automation program. */
            public: enum LanguageType
            {
                LanguageTypeNone/** None language */,
                LanguageTypeCPlusplus/** C plus plus language */,
                LanguageTypeCSharp/** C sharp language  */,
                LanguageTypeVb/** Visual basic language  */,
                LanguageTypeJava/** Java language  */,
                LanguageTypePython/** Python language  */
            };

            private: ProgramInformationImpl * m_programinformation_impl;
            private: friend class  _ProgramInformationBuilder;
            protected: ProgramInformation();
            public: ~ProgramInformation();
            /**Returns  the automation program language. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::ProgramInformation::LanguageType Language
            (
            );
            /**Sets  the automation program language. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLanguage
            (
                NXOpen::Report::ProgramInformation::LanguageType languageType /** languagetype */ 
            );
            /**Returns  the automation program executer file.
                        CPlusplus language: the dll file,
                        CSharp language: the CS file or CS dll file,
                        Vb language: the VB file or VB dll file,
                        Java language: the Jar file,
                        Python language: the Py file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProgramFile
            (
            );
            /**Sets  the automation program executer file.
                        CPlusplus language: the dll file,
                        CSharp language: the CS file or CS dll file,
                        Vb language: the VB file or VB dll file,
                        Java language: the Jar file,
                        Python language: the Py file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProgramFile
            (
                const NXString & programFile /** the program file with full path */
            );
            /**Sets  the automation program executer file.
                        CPlusplus language: the dll file,
                        CSharp language: the CS file or CS dll file,
                        Vb language: the VB file or VB dll file,
                        Java language: the Jar file,
                        Python language: the Py file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetProgramFile
            (
                const char * programFile /** the program file with full path */
            );
            /**Returns  the program entry function name.
                        CPlusplus language: the function name is the exported function following required interface,
                        Java language: the function name is the exported java class name,
                        CSharp, Vb and Python language: the function name is "Main". 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FunctionName
            (
            );
            /**Sets  the program entry function name.
                        CPlusplus language: the function name is the exported function following required interface,
                        Java language: the function name is the exported java class name,
                        CSharp, Vb and Python language: the function name is "Main". 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFunctionName
            (
                const NXString & functionName /** functionname */ 
            );
            /**Sets  the program entry function name.
                        CPlusplus language: the function name is the exported function following required interface,
                        Java language: the function name is the exported java class name,
                        CSharp, Vb and Python language: the function name is "Main". 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetFunctionName
            (
                const char * functionName /** functionname */ 
            );
            /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                FindObject is passed older versions of its journal identifier. In general, this method 
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::INXObject * FindObject
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                FindObject is passed older versions of its journal identifier. In general, this method 
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::INXObject * FindObject
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
            /**Returns  the identifier that would be recorded in a journal for this object. 
                This may not be the same across different releases of the software. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString JournalIdentifier
            (
            );
            /**Returns  whether this object is an occurrence or not. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsOccurrence
            (
            );
            /**Returns  the prototype of this object if it is an occurrence. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::INXObject * Prototype
            (
            );
            /**Returns  the owning component, if this object is an occurrence. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Assemblies::Component * OwningComponent
            (
            );
            /**Returns  the owning part of this object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::BasePart * OwningPart
            (
            );
            /** Prints a representation of this object to the system log file.
                 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void Print
            (
            );
            /**Returns  the custom name of the object.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString Name
            (
            );
            /** Sets the custom name of the object.
                    NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                          If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetName
            (
                const NXString & name /** name */ 
            );
            /** Sets the custom name of the object.
                    NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                          If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            virtual void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
