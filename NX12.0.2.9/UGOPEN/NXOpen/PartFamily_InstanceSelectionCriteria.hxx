#ifndef NXOpen_PARTFAMILY_INSTANCESELECTIONCRITERIA_HXX_INCLUDED
#define NXOpen_PARTFAMILY_INSTANCESELECTIONCRITERIA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartFamily_InstanceSelectionCriteria.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/PartFamily_FamilyAttribute.hxx>
#include <NXOpen/PartFamily_Instance.hxx>
#include <NXOpen/PartFamily_Template.hxx>
#include <NXOpen/libnxopencpp_partfamily_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PartFamily
    {
        class InstanceSelectionCriteria;
    }
    namespace PartFamily
    {
        class FamilyAttribute;
    }
    namespace PartFamily
    {
        class Instance;
    }
    namespace PartFamily
    {
        class Template;
    }
    namespace PartFamily
    {
        class _InstanceSelectionCriteriaBuilder;
        class InstanceSelectionCriteriaImpl;
        /**
                Represents the selection criteria of a part family instance
             <br> Use @link NXOpen::Assemblies::Component::CreateEmptyPartFamilyInstanceSelectionCriteria NXOpen::Assemblies::Component::CreateEmptyPartFamilyInstanceSelectionCriteria@endlink  to get an instance of this class.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PARTFAMILYEXPORT  InstanceSelectionCriteria : public NXOpen::TaggedObject
        {
            private: InstanceSelectionCriteriaImpl * m_instanceselectioncriteria_impl;
            private: friend class  _InstanceSelectionCriteriaBuilder;
            protected: InstanceSelectionCriteria();
            public: ~InstanceSelectionCriteria();
            /**Returns  the @link NXOpen::PartFamily::Template NXOpen::PartFamily::Template@endlink  that corresponds to this criteria object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::PartFamily::Template * Family
            (
            );
            /**Returns  the @link NXOpen::PartFamily::Instance NXOpen::PartFamily::Instance@endlink  of criteria. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::PartFamily::Instance * Instance
            (
            );
            /** Obtains the criteria strings associated with this selection criteria.
                        Output "criteriaStringArray" would be an array of TEXT_pc_t with each element of the form for e.g. "p7 > 100",
                        where "p7" is the attribute, "100" the value and ">" the expression connecting both 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetCriteriaStrings
            (
                std::vector<NXString> & criteriaStringArray /** criteriastringarray */ 
            );
            /** Sets criteria on @link NXOpen::PartFamily::InstanceSelectionCriteria NXOpen::PartFamily::InstanceSelectionCriteria@endlink .
                        This criteria can be used while adding a part family member to assembly. 
                        Number of elements in "attributes" and "criteriaStringArray" should always match the "attributeCount".
                        "criteriaStringArray" has to be an array of TEXT_pc_t with each element of the form for e.g. "p7 >= 100",
                        where "p7" is the attribute, "100" the value and ">=" the expression connecting both 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPartFamilyInstanceSelectionCriteria
            (
                const std::vector<NXOpen::PartFamily::FamilyAttribute *> & attributes /** attributes */ ,
                std::vector<NXString> & criteriaStringArray /** criteriastringarray */ 
            );
            /** Sets criteria on @link NXOpen::PartFamily::InstanceSelectionCriteria NXOpen::PartFamily::InstanceSelectionCriteria@endlink .
                        This routine can be used when user wants to add a part family member to assembly directly using 
                        the "memberName" instead of using attribute criteria. This "memberName" will be ignored in case 
                        the InstenaceSelectionCriteria already has any valid attribute criteria or if the user adds a valid 
                        attribute criteria later on.
                        User could obtain valid "memberName" using @link NXOpen::PartFamily::Template::GetMembers NXOpen::PartFamily::Template::GetMembers@endlink .
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPartFamilyInstanceSelectionCriteria
            (
                const NXString & memberName /** membername */ 
            );
            /** Sets criteria on @link NXOpen::PartFamily::InstanceSelectionCriteria NXOpen::PartFamily::InstanceSelectionCriteria@endlink .
                        This routine can be used when user wants to add a part family member to assembly directly using 
                        the "memberName" instead of using attribute criteria. This "memberName" will be ignored in case 
                        the InstenaceSelectionCriteria already has any valid attribute criteria or if the user adds a valid 
                        attribute criteria later on.
                        User could obtain valid "memberName" using @link NXOpen::PartFamily::Template::GetMembers NXOpen::PartFamily::Template::GetMembers@endlink .
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetPartFamilyInstanceSelectionCriteria
            (
                const char * memberName /** membername */ 
            );
            /** Returns true if the selection criteria evaluates to a valid part family instance, false otherwise.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsValidPartFamilyInstanceSelectionCriteria
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
