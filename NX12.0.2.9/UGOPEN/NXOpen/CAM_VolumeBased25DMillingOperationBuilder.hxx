#ifndef NXOpen_CAM_VOLUMEBASED25DMILLINGOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_VOLUMEBASED25DMILLINGOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_VolumeBased25DMillingOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_Geometry.hxx>
#include <NXOpen/CAM_FaceMillingBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class VolumeBased25DMillingOperationBuilder;
    }
    namespace CAM
    {
        class FaceMillingBuilder;
    }
    namespace CAM
    {
        class Geometry;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _VolumeBased25DMillingOperationBuilderBuilder;
        class VolumeBased25DMillingOperationBuilderImpl;
        /** Represents a VolumeBased25DMillingOperation Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::OperationCollection::CreateVolumeBased25dMillingOperationBuilder  NXOpen::CAM::OperationCollection::CreateVolumeBased25dMillingOperationBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  VolumeBased25DMillingOperationBuilder : public NXOpen::CAM::FaceMillingBuilder
        {
            /** Available types for cut depths for cut method profile */
            public: enum CutDepthsType
            {
                CutDepthsTypeLevels/** cut depths type levels */,
                CutDepthsTypeRampByDepth/** cut depths type ramp by depth */,
                CutDepthsTypeRampByAngle/** cut depths type ramp by angle */
            };

            private: VolumeBased25DMillingOperationBuilderImpl * m_volumebased25dmillingoperationbuilder_impl;
            private: friend class  _VolumeBased25DMillingOperationBuilderBuilder;
            protected: VolumeBased25DMillingOperationBuilder();
            public: ~VolumeBased25DMillingOperationBuilder();
            /**Returns  the extend walls flag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ExtendWalls
            (
            );
            /**Sets  the extend walls flag 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetExtendWalls
            (
                bool flag /** the extend walls flag */
            );
            /**Returns  the blank geometry builder
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Geometry * BlankGeometry
            (
            );
            /**Returns  the wall blank thickness 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * WallBlankThickness
            (
            );
            /**Returns  the z-depth offset
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ZDepthOffset
            (
            );
            /**Sets  the exact positioning flag
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseExactPositioning
            (
                bool flag /**  the exact positioning flag */
            );
            /**Returns  the exact positioning flag
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseExactPositioning
            (
            );
            /**Sets  the follow non-vertical walls flag
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetFollowNonVerticalWalls
            (
                bool flag /**  the follow non-vertical walls flag */
            );
            /**Returns  the follow non-vertical walls flag
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FollowNonVerticalWalls
            (
            );
            /**Sets  the cut depths type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCutDepths
            (
                NXOpen::CAM::VolumeBased25DMillingOperationBuilder::CutDepthsType cutDepths /**  the cut depths type */
            );
            /**Returns  the cut depths type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::VolumeBased25DMillingOperationBuilder::CutDepthsType CutDepths
            (
            );
            /**Sets  the cleanup pass flag
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseCleanupPass
            (
                bool flag /**  the cleanup pass flag */
            );
            /**Returns  the cleanup pass flag
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCleanupPass
            (
            );
            /**Returns  the top offset 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * TopOffset
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
