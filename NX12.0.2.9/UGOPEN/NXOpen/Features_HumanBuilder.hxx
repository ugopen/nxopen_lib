#ifndef NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_HumanBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/HumanData.hxx>
#include <NXOpen/HumanHandsDialogBuilder.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class HumanBuilder;
    }
    class CoordinateSystem;
    namespace Features
    {
        class FeatureBuilder;
    }
    class HumanHandsDialogBuilder;
    class HumanPosturePrediction;
    class Point;
    namespace Features
    {
        class _HumanBuilderBuilder;
        class HumanBuilderImpl;
        /** Represents a human feature.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateHumanBuilder  NXOpen::Features::FeatureCollection::CreateHumanBuilder @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  HumanBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: HumanBuilderImpl * m_humanbuilder_impl;
            private: friend class  _HumanBuilderBuilder;
            protected: HumanBuilder();
            public: ~HumanBuilder();
            /** Sets human name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetName
            (
                const NXString & name /** Name of the human */
            );
            /** Sets human name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetName
            (
                const char * name /** Name of the human */
            );
            /**Returns  the human name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString Name
            (
            );
            /** Sets custom human figure file name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetCustomHumanFileName
            (
                const NXString & customFileName /** Figure file name if created from cloning */
            );
            /** Sets custom human figure file name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetCustomHumanFileName
            (
                const char * customFileName /** Figure file name if created from cloning */
            );
            /**Returns  the custom human figure file name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString CustomHumanFileName
            (
            );
            /** Sets human stature data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetStatureData
            (
                NXOpen::HumanData::StatureType statureType /** Flag for percentile stature in database or actual stature measure */,
                double stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType statureUnit /** Unit for stature                                                  */
            );
            /** Gets human stature data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetStatureData
            (
                NXOpen::HumanData::StatureType* statureType /** Flag for percentile stature in database or actual stature measure */,
                double* stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType* statureUnit /** Unit for stature                                                  */
            );
            /** Sets human weight data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetWeightData
            (
                NXOpen::HumanData::WeightType weightType /** Flag for percentile weight in database or actual weight value     */,
                double weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType weightUnit /** Unit for weight                                                   */
            );
            /** Gets human weight data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetWeightData
            (
                NXOpen::HumanData::WeightType* weightType /** Flag for percentile weight in database or actual weight value     */,
                double* weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType* weightUnit /** Unit for weight                                                   */
            );
            /** Sets human gender data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetGender
            (
                NXOpen::HumanData::GenderType gender /** Gender of the human */
            );
            /**Returns  the human gender data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::GenderType Gender
            (
            );
            /** Sets human appearance data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetAppearance
            (
                NXOpen::HumanData::AppearanceType appearance /** Appearance of the human */
            );
            /**Returns  the human appearance data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::AppearanceType Appearance
            (
            );
            /** Sets database for human 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetDatabase
            (
                NXOpen::HumanData::DatabaseType database /** Indicates database used for creating the human */
            );
            /**Returns  the database for human 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::DatabaseType Database
            (
            );
            /** Sets human position 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPosition
            (
                const NXOpen::Point3d & location /** Human global location  */
            );
            /**Returns  the human position 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d Position
            (
            );
            /** Sets human orientaion 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Human orientation matrix relative to the absolute coordinate
                                                                                             system. Must be orthonormal */
            );
            /**Returns  the human orientaion 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 Orientation
            (
            );
            /** Sets human stature data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionStatureData
            (
                const NXString & statureExpression /** Stature expression for custom stature input  */
            );
            /** Sets human stature data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetExpressionStatureData
            (
                const char * statureExpression /** Stature expression for custom stature input  */
            );
            /**Returns  the human stature data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionStatureData
            (
            );
            /** Sets human weight data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionWeightData
            (
                const NXString & weightExpression /** Weight expression for custom weight input  */
            );
            /** Sets human weight data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetExpressionWeightData
            (
                const char * weightExpression /** Weight expression for custom weight input  */
            );
            /**Returns  the human weight data using expression 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionWeightData
            (
            );
            /** Sets the reference point 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePoint
            (
                bool associative /** Flag for associative reference point */,
                NXOpen::HumanData::ReferencePointType referencePointType /** Type of reference point type */,
                NXOpen::Point * referencePoint /** Reference point */
            );
            /** Sets the reference point coordinates. A dumb point will be created according to input point coordinates
                        and set as reference point of human. The associative status of the reference will be set as FALSE. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePointCoordinates
            (
                const NXOpen::Point3d & referencePointCoordinates /** Reference point coordinates */
            );
            /**Returns  the reference point coordinates 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d ReferencePointCoordinates
            (
            );
            /** Sets the reference point type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePointType
            (
                NXOpen::HumanData::ReferencePointType referencePointType /** Type of reference point type */
            );
            /**Returns  the reference point type 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::ReferencePointType ReferencePointType
            (
            );
            /** Sets the hand shape data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandShapeData
            (
                int handType /** Left hand,right hand or both hands */,
                const NXString & handshapeName /** Name of hand shape in the list */,
                const NXString & neutralHandshapeName /** Name of neutral hand shape */,
                const NXString & handshapeLib /** Library of hand shape */,
                double handshapeValue /** Value for applying hand shape */
            );
            /** Sets the hand shape data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetHandShapeData
            (
                int handType /** Left hand,right hand or both hands */,
                const char * handshapeName /** Name of hand shape in the list */,
                const char * neutralHandshapeName /** Name of neutral hand shape */,
                const char * handshapeLib /** Library of hand shape */,
                double handshapeValue /** Value for applying hand shape */
            );
            /** Set joint limits 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointLimits
            (
                NXOpen::HumanData::JointType jointName /** Joint name */,
                double jointXLowerLimit /** X value of lower joint limit */,
                double jointXUpperLimit /** X value of upper joint limit */,
                double jointYLowerLimit /** Y value of lower joint limit */,
                double jointYUpperLimit /** Y value of upper joint limit */,
                double jointZLowerLimit /** Z value of lower joint limit */,
                double jointZUpperLimit /** Z value of upper joint limit */,
                bool isSymmetric /** Flag of adjust symmetrical joint */
            );
            /** Set joint data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointData
            (
                NXOpen::HumanData::JointType jointName /** Joint name */,
                double jointXValue /** X value for applying adjust joint */,
                double jointYValue /** Y value for applying adjust joint */,
                double jointZValue /** Z value for applying adjust joint */,
                bool isSymmetric /** Flag of adjust symmetrical joint */
            );
            /** Update human 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void DoUpdate
            (
                bool updatePosturePrediction /** Flag of update posture prediction */,
                bool updateReferencePoint /** Flag of update reference point */,
                bool updateReachZone /** Flag of update reach zone */
            );
            /** Set flag for reset posture 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetPosture
            (
            );
            /** Set segment data for segment scaling 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetSegmentScalingData
            (
                NXOpen::HumanData::SegmentScalingType segmentName /** Segment name                            */,
                double depthFactor /** Depth factor value for segment scaling   */,
                double breadthFactor /** Breadth factor value for segment scaling */,
                double lengthFactor /** Length factor value for segment scaling  */
            );
            /** Set flag for reset segment 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetSegment
            (
            );
            /** Set flag for show human skeleton 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetShowSkeleton
            (
                bool showSkeleton /** Flag for showing skeleton */
            );
            /** Set data for advanced scaling 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetAdvancedScalingData
            (
                NXOpen::HumanData::AdvancedScalingType dataName /** Advanced scaling data name  */,
                double dataValue /** Advanced scaling data value */
            );
            /** Export custom human file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomHumanFile
            (
                const NXString & humanFileName /** Custom human file name */
            );
            /** Export custom human file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void ExportCustomHumanFile
            (
                const char * humanFileName /** Custom human file name */
            );
            /** Export custom posture file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomPostureFile
            (
                const NXString & postureFileName /** Custom posture file name */
            );
            /** Export custom posture file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void ExportCustomPostureFile
            (
                const char * postureFileName /** Custom posture file name */
            );
            /** Load custom posture file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void LoadCustomPostureFile
            (
                const NXString & postureFileName /** Custom posture file name */
            );
            /** Load custom posture file 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void LoadCustomPostureFile
            (
                const char * postureFileName /** Custom posture file name */
            );
            /** Set posture data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPostureData
            (
                const NXString & postureName /** Posture name */,
                const NXString & postureLib /** Posture library */
            );
            /** Set posture data 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetPostureData
            (
                const char * postureName /** Posture name */,
                const char * postureLib /** Posture library */
            );
            /** Add hand shape library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddHandShapeLib
            (
                const NXString & handshapeLib /** Hand shape library name */
            );
            /** Add hand shape library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void AddHandShapeLib
            (
                const char * handshapeLib /** Hand shape library name */
            );
            /** Remove hand shape library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemoveHandShapeLib
            (
                const NXString & handshapeLib /** Hand shape library name */
            );
            /** Remove hand shape library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void RemoveHandShapeLib
            (
                const char * handshapeLib /** Hand shape library name */
            );
            /** Add posture library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddPostureLib
            (
                const NXString & postureLib /** Posture library name */
            );
            /** Add posture library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void AddPostureLib
            (
                const char * postureLib /** Posture library name */
            );
            /** Remove posture library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemovePostureLib
            (
                const NXString & postureLib /** Posture library name */
            );
            /** Remove posture library 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void RemovePostureLib
            (
                const char * postureLib /** Posture library name */
            );
            /**Returns  the type of inverse kinematics: dynamic drag or active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsType InverseKinematicsType
            (
            );
            /**Sets  the type of inverse kinematics: dynamic drag or active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsType
            (
                NXOpen::HumanData::InverseKinematicsType type /** the type of inverse kinematics */
            );
            /**Returns  the manipulated body parts for dynamic drag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsBodyParts BodyParts
            (
            );
            /**Sets  the manipulated body parts for dynamic drag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBodyParts
            (
                NXOpen::HumanData::InverseKinematicsBodyParts bodyParts /** the body parts of dynamic drag */
            );
            /**Returns  the status of lock wrist for dynamic drag of left hand or right hand. If true, the wrist will be locked when
                        dragging hands 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool LockWrist
            (
            );
            /**Sets  the status of lock wrist for dynamic drag of left hand or right hand. If true, the wrist will be locked when
                        dragging hands 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetLockWrist
            (
                bool lockWrist /** the flag of lock wrist of inverse kinematics */
            );
            /**Returns  the motion initiation joint for dynamic drag of left hand or right hand 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsInitJoint InitJoint
            (
            );
            /**Sets  the motion initiation joint for dynamic drag of left hand or right hand 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInitJoint
            (
                NXOpen::HumanData::InverseKinematicsInitJoint initJoint /** the motion initiation joint: waist or shoulder */
            );
            /**Returns  the status of follow foot move for dynamic drag of left foot or right foot. If true, human follows foot move to keep balance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool FollowFoot
            (
            );
            /**Sets  the status of follow foot move for dynamic drag of left foot or right foot. If true, human follows foot move to keep balance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetFollowFoot
            (
                bool followFoot /** the status of follow foot move */
            );
            /**Returns  the position of dynamic drag. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d InverseKinematicsPosition
            (
            );
            /**Sets  the position of dynamic drag. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsPosition
            (
                const NXOpen::Point3d & position /** dynamic drag global location */
            );
            /**Returns  the orientaion of dynamic drag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 InverseKinematicsOrientation
            (
            );
            /**Sets  the orientaion of dynamic drag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Inverse kinematics orientation matrix relative to
                                                                     the absolute coordinate system. Must be orthonormal */
            );
            /**Returns  the balance type of active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsBalanceType BalanceType
            (
            );
            /**Sets  the balance type of active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBalanceType
            (
                NXOpen::HumanData::InverseKinematicsBalanceType balanceType /** the balance type for active reach: allow step, no step or seated */
            );
            /**Returns  the head eye type of active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsHeadEyeType HeadEyeType
            (
            );
            /**Sets  the head eye type of active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHeadEyeType
            (
                NXOpen::HumanData::InverseKinematicsHeadEyeType headEyeType /** the head eye type for active reach: follow last defined or fixate */
            );
            /** Gets hand goal type for active reach  @return  hand goal type for active reach: point, csys or hand figure 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::HandGoalType GetHandGoalType
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */
            );
            /** Sets hand goal type for active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalType
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */,
                NXOpen::HumanData::HandGoalType goalType /** hand goal type for active reach: point, csys or hand figure */
            );
            /** Gets the allow normal status of hand goal for active reach  @return  the allow normal flag of hand goal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetHandGoalAllowNormal
            (
                NXOpen::HumanData::SideType side /** left side or right side            */
            );
            /** Sets the allow normal status of hand goal for active reach, if it is TRUE, use the palmcenter site with the target z axis normal
                        to define the hand orientation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalAllowNormal
            (
                NXOpen::HumanData::SideType side /** left side or right side            */,
                bool allowNormal /** the allow normal flag of hand goal */
            );
            /** Gets the allow rotate status of hand goal for active reach  @return  the allow rotate flag of hand goal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetHandGoalAllowRotate
            (
                NXOpen::HumanData::SideType side /** left side or right side            */
            );
            /** Sets the allow rotate status of hand for active reach, if it is TRUE, rotate the target z axis normal to the best guess
                        directions to define the hand orientation 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalAllowRotate
            (
                NXOpen::HumanData::SideType side /** left side or right side            */,
                bool allowRotate /** the allow rotate flag of hand goal */
            );
            /** Gets hand goal position for active reach, returns NULL if the hand goal type is not hand figure  @return  hand goal global location for active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d GetHandGoalPosition
            (
                NXOpen::HumanData::SideType side /** left side or right side                    */
            );
            /** Sets hand goal position for active reach, the hand goal type should be hand figure 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalPosition
            (
                NXOpen::HumanData::SideType side /** left side or right side   */,
                const NXOpen::Point3d & goalPosition /** hand goal global location */
            );
            /** Gets hand goal orientaion for active reach, returns NULL if the hand goal type is not hand figure or point  @return  hand goal orientation matrix
                                                                               relative to the absolute coordinate system. Must be orthonormal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 GetHandGoalOrientation
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */
            );
            /** Sets hand goal orientaion for active reach, the hand goal type should be hand figure or point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalOrientation
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */,
                const NXOpen::Matrix3x3 & goalOrientation /** hand goal orientation matrix
                                                                                       relative to the absolute coordinate system. Must be orthonormal */
            );
            /** Gets hand goal point for active reach, returns NULL if the hand goal type is not point  @return  the goal point          
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point * GetHandGoalPoint
            (
                NXOpen::HumanData::SideType side /** left side or right side */
            );
            /** Sets hand goal point for active reach, the hand goal type should be point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalPoint
            (
                NXOpen::HumanData::SideType side /** left side or right side */,
                NXOpen::Point * goalPoint /** the goal point          */
            );
            /** Gets hand goal csys for active reach, returns NULL if the hand goal type is not csys  @return  the goal csys           
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::CoordinateSystem * GetHandGoalCsys
            (
                NXOpen::HumanData::SideType side /** left side or right side */
            );
            /** Sets hand goal csys for active reach, the hand goal type should be set as csys 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalCsys
            (
                NXOpen::HumanData::SideType side /** left side or right side */,
                NXOpen::CoordinateSystem * goalCsys /** the goal csys           */
            );
            /** Gets barrier point for active reach, returns NULL if there is no barrier  @return  the barrier point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point * GetBarrierPoint
            (
            );
            /** Sets barrier point active reach, the human will be hold by the position of point in active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierPoint
            (
                NXOpen::Point * barrierPoint /** the barrier point */
            );
            /** Gets barrier normal dirrection for active reach, returns NULL if the there is no barrier  @return  the normal of barrier plane 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Vector3d GetBarrierNormal
            (
            );
            /** Sets barrier normal direction for active reach, the human will be hold by the position of point 
                        and orientaion of the barrier normal in active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierNormal
            (
                const NXOpen::Vector3d & barrierNormal /** the normal of barrier plane, use the arbitrary normal direction
                                                                     if normal is not set */
            );
            /** Gets barrier csys for active reach, returns NULL if there is no barrier  @return  the barrier csys 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::CoordinateSystem * GetBarrierCsys
            (
            );
            /** Sets barrier csys for active reach, the human will be hold by the position and orientaion of the csys in
                        active reach 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierCsys
            (
                NXOpen::CoordinateSystem * barrierCsys /** the goal csys */
            );
            /**Returns  the current study name of comfort analysis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString CurrentComfortStudyName
            (
            );
            /**Sets  the current study name of comfort analysis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetCurrentComfortStudyName
            (
                const NXString & studyName /** the current comfort study name */
            );
            /**Sets  the current study name of comfort analysis 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            void SetCurrentComfortStudyName
            (
                const char * studyName /** the current comfort study name */
            );
            /** Get the default body parts site CSYS display flag.  @return  the body site display flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetBodySiteDisplayFlag
            (
                NXOpen::HumanData::EditDisplayBodyParts bodyPart /** the body part of human     */
            );
            /** Set the default body parts site CSYS display flag. If true, then display the site CSYS of human default body parts. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBodySiteDisplayFlag
            (
                NXOpen::HumanData::EditDisplayBodyParts bodyPart /** the body part of human     */,
                bool displayFlag /** the body site display flag */
            );
            /** Get the segment site name of edit human display.  @return  the segment sites name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: std::vector<NXString> GetSegmentSitesName
            (
            );
            /** Set the segment site name of edit human display. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetSegmentSitesName
            (
                std::vector<NXString> & segmentSitesName /** the segment sites name */
            );
            /** Get the posture prediction object from human builder. Posture prediction should be done first before
                        get it from human builder  @return  @link HumanPosturePrediction HumanPosturePrediction@endlink  to be edited, NULL then no posture prediction has been done 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePrediction * GetPosturePrediction
            (
            );
            /** Creates a @link HumanHandsDialogBuilder HumanHandsDialogBuilder@endlink   @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : ug_human ("Human Modelling") */
            public: NXOpen::HumanHandsDialogBuilder * CreateHumanHandsDialogBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
