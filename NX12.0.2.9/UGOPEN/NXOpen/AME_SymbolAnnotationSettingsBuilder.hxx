#ifndef NXOpen_AME_SYMBOLANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_SYMBOLANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolAnnotationSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/TextColorFontWidthBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SymbolAnnotationSettingsBuilder;
    }
    class Builder;
    class TextColorFontWidthBuilder;
    namespace AME
    {
        class _SymbolAnnotationSettingsBuilderBuilder;
        class SymbolAnnotationSettingsBuilderImpl;
        /** JA class for the symbol settings <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateSymbolAnnotationSettingsBuilder  NXOpen::AME::AMEManager::CreateSymbolAnnotationSettingsBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SymbolAnnotationSettingsBuilder : public NXOpen::Builder
        {
            private: SymbolAnnotationSettingsBuilderImpl * m_symbolannotationsettingsbuilder_impl;
            private: friend class  _SymbolAnnotationSettingsBuilderBuilder;
            protected: SymbolAnnotationSettingsBuilder();
            public: ~SymbolAnnotationSettingsBuilder();
            /**  Reset to default setting
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetToDefault
            (
            );
            /**Returns  the symbol annotation text color font width 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::TextColorFontWidthBuilder * SymbolAnnotationTextCFW
            (
            );
            /**Sets  the symbol annotation text color font width 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationTextCFW
            (
                NXOpen::TextColorFontWidthBuilder * textColorFontWidth /** textcolorfontwidth */ 
            );
            /**Returns  the port annotation text color font width 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::TextColorFontWidthBuilder * PortAnnotationTextCFW
            (
            );
            /**Sets  the port annotation text color font width 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortAnnotationTextCFW
            (
                NXOpen::TextColorFontWidthBuilder * textColorFontWidth /** textcolorfontwidth */ 
            );
            /**Returns  the symbol annotation text height 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: double SymbolAnnotationHeight
            (
            );
            /**Sets  the symbol annotation text height 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationHeight
            (
                double textHeight /** textheight */ 
            );
            /**Returns  the port annotation text height 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: double PortAnnotationHeight
            (
            );
            /**Sets  the port annotation text height 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortAnnotationHeight
            (
                double textHeight /** textheight */ 
            );
            /**Returns  the symbol annotation text alignment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int SymbolAnnotationTextAlignment
            (
            );
            /**Sets  the symbol annotation text alignment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationTextAlignment
            (
                int alignment /** alignment */ 
            );
            /**Returns  whether the symbol annotation  text is overlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool SymbolAnnotationTextOverlined
            (
            );
            /**Sets  whether the symbol annotation  text is overlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationTextOverlined
            (
                bool overlined /** overlined */ 
            );
            /**Returns  whether the symbol annotation  text is underlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool SymbolAnnotationTextUnderlined
            (
            );
            /**Sets  whether the symbol annotation  text is underlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolAnnotationTextUnderlined
            (
                bool underlined /** underlined */ 
            );
            /**Returns  whether the symbol annotation  text is overlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool PortAnnotationTextOverlined
            (
            );
            /**Sets  whether the symbol annotation  text is overlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortAnnotationTextOverlined
            (
                bool overlined /** overlined */ 
            );
            /**Returns  whether the symbol annotation  text is underlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool PortAnnotationTextUnderlined
            (
            );
            /**Sets  whether the symbol annotation  text is underlined 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortAnnotationTextUnderlined
            (
                bool underlined /** underlined */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
