#ifndef NXOpen_ROUTING_STOCK_HXX_INCLUDED
#define NXOpen_ROUTING_STOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Stock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class Stock;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Body;
    class Curve;
    namespace Features
    {
        class Feature;
    }
    class INXObject;
    class NXObject;
    namespace Routing
    {
        class Anchor;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class CrossSection;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        class StockPort;
    }
    namespace Routing
    {
        /** Describes whether the stock profile is located at the first segment in the
                path or the last segment.  */
        enum ProfileFrom
        {
            ProfileFromStart/**  Profile is at the start of the first segment. */,
            ProfileFromEnd/**  Profile is at the end of the last segment. */
        };

        /** Describes whether the stock profile is flipped, see the user help documenation on Orient Stock.  */
        enum Flip
        {
            FlipNotFlipped/**  Profile is not flipped. */,
            FlipFlipped/**  Profile is flipped. */
        };

        /** Describes how the stock is used. */
        enum StockUse
        {
            StockUseLegacyStock/** Normal Legacy Stock. */,
            StockUseBundled/** Legacy Stock that was generated by the bundling algorithm */,
            StockUseStockAsComponent/** Stock as Component stock in the work part. */,
            StockUseStockInComponent/** Stock as Component stock in the component part. User
                                                                        should not modify this stock.  */,
            StockUseDeformed/** Stock has been deformed using the "Deform Component"
                                                                        functionality.  User should not modify this stock. */
        };

        /** Describes whether or not a component associated with a Stock as Compoents Stock has
                been renamed by the user with a permanent name using the ???
                method. */
        enum ComponentName
        {
            ComponentNameTemporary/** Component name is temporary, it has not been renamed. */,
            ComponentNamePermanent/** Component has been renamed by the user. */
        };

    }
    namespace Routing
    {
        class _StockBuilder;
        class StockImpl;
        /**

                    The @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object represents a material (such as as pipe or tube)
                    that covers a path of segments.  The material is defined in the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                    object.  @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  consists of a @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                    object, as well as references to at most one of the @link NXOpen::Routing::CrossSection NXOpen::Routing::CrossSection@endlink  and
                    @link NXOpen::Routing::Anchor NXOpen::Routing::Anchor@endlink  objects that are associated with that
                    @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink .

                 <br> 
                    A @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object may exist in one of two modes ; Legacy Stock or
                    Stock as Components Stock.  Legacy Stock is modeled as a sweep feature in the work part.  Stock
                    as Components Stock is modeled as a child component (of the work part) that contains a sweep
                    feature.  Legacy Stock and Stock as Components stock cannot exist in the same part file with
                    the exception of Bundled stock.
                 <br> 
                    Stock as Components Stock creates a component file, and creates a copy of itself inside of
                    that part file.  Segments, anchors, and all other necessary information are copied into
                    the component part file.  The stock inside of the component file should not be edited or
                    modified as it is completely controlled by the Stock as Component Stock in the work part.
                 <br> 
                 <br> 
                    @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object that have automatically been generated by the bundling
                    algorithm used for routing wires are Bundled stock.  Bundled stocks are always created as
                    Legacy Stocks (even in parts containing Stock as Component stocks).  Any @link NXOpen::Routing::StockData
                     NXOpen::Routing::StockData
                    @endlink  object that defines a bundled stock has a type of @link Routing::StockDataTypeBundled
                     Routing::StockDataTypeBundled
                    @endlink .  Editing the segments or the stock data of a Bundled stock may result in undefined
                    behavior.
                 <br> 
                    With the exception of stock style, there are no functional differences between the two
                    stock types.  Stock as Components Stock always uses the @link NXOpen::Routing::StockStyleDetailed NXOpen::Routing::StockStyleDetailed@endlink 
                    style (if available, otherwise it uses the @link NXOpen::Routing::StockStyleSimple NXOpen::Routing::StockStyleSimple@endlink  style) and
                    the stock's style cannot be changed.
                 <br> 
              <br> Creator not available in KF because transient objects are not supported.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  Stock : public NXOpen::NXObject, public virtual NXOpen::Routing::ICharacteristic
        {
            private: StockImpl * m_stock_impl;
            private: friend class  _StockBuilder;
            protected: Stock();
            public: ~Stock();
            /** Gets the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink .   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockData * GetStockData
            (
            );
            /** Sets the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink . After setting the StockData, the
                        caller must also make sure to set the CrossSection and Anchor so that the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink 
                        object only references objects associated with this @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink  object.
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockData
            (
                NXOpen::Routing::StockData * stockData /** stock data */ 
            );
            /** Gets the @link NXOpen::Routing::CrossSection NXOpen::Routing::CrossSection@endlink  that currently defines the profile for the stock.   @return  Returns NULL if this object is using stock style @link 
                                                         Routing::StockStyleNone 
                                                         Routing::StockStyleNone@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CrossSection * GetCrossSection
            (
            );
            /** Sets the @link NXOpen::Routing::CrossSection NXOpen::Routing::CrossSection@endlink . The given object must be one of the
                        @link NXOpen::Routing::CrossSection NXOpen::Routing::CrossSection@endlink  objects referenced by the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                        object that defines this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object.  @link NXOpen::Routing::Stock::SetStockStyle
                         NXOpen::Routing::Stock::SetStockStyle
                        @endlink  should be used (when possible) instead of this routine.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCrossSection
            (
                NXOpen::Routing::CrossSection * crossSection /** Must be referenced by the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                                                                associated with this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object. */
            );
            /** Gets the @link NXOpen::Routing::Anchor NXOpen::Routing::Anchor@endlink  that currently modifies the profile for the stock.   @return  Returns NULL if this object isn't using an @link NXOpen::Routing::Anchor
                                                   NXOpen::Routing::Anchor
                                                  @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Anchor * GetAnchor
            (
            );
            /** Sets the @link NXOpen::Routing::Anchor NXOpen::Routing::Anchor@endlink . The given object must be one of the
                        @link NXOpen::Routing::Anchor NXOpen::Routing::Anchor@endlink  objects referenced by the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                        object that defines this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAnchor
            (
                NXOpen::Routing::Anchor * anchor /** Must be referenced by the @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink 
                                                          associated with this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object. */
            );
            /** Gets the @link NXOpen::Routing::StockStyle NXOpen::Routing::StockStyle@endlink  of the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink .  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockStyle GetStockStyle
            (
            );
            /** Sets the @link NXOpen::Routing::StockStyle NXOpen::Routing::StockStyle@endlink  of the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink . This may
                        cause update to fire, and can be a time-consuming operation as it may require the building of a
                        new sweep feature.  When style is set to @link NXOpen::Routing::StockStyleNone NXOpen::Routing::StockStyleNone@endlink  this routine
                        deletes the stock sweep feature.  Only call on Legacy Stocks. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockStyle
            (
                NXOpen::Routing::StockStyle style /** style */ 
            );
            /** Gets the segments that the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  object is placed on top of.  @return   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Curve *> GetSegments
            (
            );
            /** Adds new segments to this object.  If the new segments (added to the old segments) do not form
                       a single continuous path, the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  will split so that there is a
                       copy of this object on each continuous path formed by the input segments. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddSegments
            (
                const std::vector<NXOpen::Curve *> & segments /**  List of segments to add.  Ignores any segments that
                                                                  are already referenced by this object. */
            );
            /** Removes segments from this object.  If the segments of this object (after removing the input
                       segments) do not form a single continuous path, the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  will split so
                       that there is a copy of this object on each continuous path.   This object will delete itself inside of
                       update if all segments are removed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveSegments
            (
                const std::vector<NXOpen::Curve *> & segments /**  List of segments to remove.  Ignores any segments that
                                                                  are not already referenced by this object. */
            );
            /** Gets the rotation angle applied to the profile.   @return  The angle in radians. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetRotationAngle
            (
            );
            /** Sets the rotation angle applied to the profile.  See the user help documentation on
                        Orient Stock for more information.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRotationAngle
            (
                double rotationAngle /** The angle in radians. Valid values are 0.0 to ( 2 * Pi ). */
            );
            /** Gets the twist angle applied to the profile.   @return  The angle in radians. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetTwistAngle
            (
            );
            /** Sets the twist angle applied to the profile.  See the user help documentation on
                        Orient Stock for more information.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetTwistAngle
            (
                double twistAngle /** The angle in radians. Valid values are 0.0 to ( 2 * Pi ). */
            );
            /** Gets the end that defines profile.   @return   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ProfileFrom GetProfileEnd
            (
            );
            /** Sets the end that defines profile.  See the user help documentation on
                        Orient Stock for more information.
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetProfileEnd
            (
                NXOpen::Routing::ProfileFrom profileEnd /** profile end */ 
            );
            /** Gets whether or not the profile is flipped.  @return   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Flip GetFlippedStatus
            (
            );
            /** Sets whether or not the profile is flipped. See the user help documentation on
                        Orient Stock for more information.
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFlippedStatus
            (
                NXOpen::Routing::Flip flipped /** flipped */ 
            );
            /** Returns the @link NXOpen::Routing::StockPort NXOpen::Routing::StockPort@endlink  at each end of the stock. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetPorts
            (
                NXOpen::Routing::StockPort ** startPort /** Port at the start of the first segment. */,
                NXOpen::Routing::StockPort ** endPort /** Port at the end of the last segment. */
            );
            /** Returns the use of the stock.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockUse GetStockUse
            (
            );
            /** Returns the sweep features that are created and controlled by this object.  For
                      Stock as Components stock, the features exist in a separate part file.  For Legacy Stock
                      the features exist in the same part as the input object.   @return  Sweep features.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Returns the @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  created and controlled by the stock for a
                       Stock as Components stock.  Only returns a component if the stock type is
                       @link Routing::StockUseStockAsComponent Routing::StockUseStockAsComponent@endlink .  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * GetComponent
            (
            );
            /** Returns whether or not the component associated with a Stock as Components Stock has a
                        permanent or temporary name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ComponentName GetNameStatus
            (
            );
            /** Returns the original length for a stock that has been deformed (it's use is
                      @link Routing::StockUseDeformed Routing::StockUseDeformed@endlink ).  This is the length of the original stock
                      in the component part at the time that the deformed stock was created.  @return  The original length in units of the original part file. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetOriginalLength
            (
            );
            /** Colors the solid bodies of the stock based on the COLOR characteristic specified in the
                        @link NXOpen::Routing::StockData NXOpen::Routing::StockData@endlink  of the stock.  The color string can contain
                        the name of a color, a hex string specifying the RGB values, a comma separated list of RGB integer values and
                        a simple integer specifying the color index directly. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ColorBodies
            (
            );
            /** Set the characteristics of the given stock's
                        component so that it has the same characteristics as the @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink  and its stock data. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SyncComponentAttrs
            (
                bool isNewPart /** Is the part new? */
            );
            /**Returns  the negate offsets flag of this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool NegateOffsetsFlag
            (
            );
            /**Sets  the negate offsets flag of this @link NXOpen::Routing::Stock NXOpen::Routing::Stock@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetNegateOffsetsFlag
            (
                bool offsetFlag /** offset flag */ 
            );
            /** Align stock to new rotation vector. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AlignStock
            (
                const NXOpen::Vector3d & vector /** Rotation vector. */
            );
            /** Renames the stock component part with given name
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RenameStockComponent
            (
                const NXString & partName /** Part name to be set */
            );
            /** Renames the stock component part with given name
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void RenameStockComponent
            (
                const char * partName /** Part name to be set */
            );
            /** Returns the solid bodies, if any, that are created and controlled by this object.  For
                      Stock as Components stock, the bodies exist in a separate part file.  For Legacy Stock
                      the bodies exist in the same part as the input object.   @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Body *> GetBodies
            (
            );
            /** For Routing Electrical application only, returns the @link Routing::Electrical::HarnessDevice Routing::Electrical::HarnessDevice@endlink 
                        that owns the wire or wires that make up a stock bundle.
                        Will return NULL if this stock is not a wire, cable, or shield bundle.
                     @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Electrical::HarnessDevice * GetHarnessDevice
            (
            );
            /** Is this stock a Space Reservation stock?.
                     @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsSpaceReservation
            (
            );
            /** Given stock and a feature of the stock, returns solid body, stock segments and path segments that produced the body.
                        Path segments are the visible segments over which the stock is created. Stock segments may be same as the 
                        path segments or those may be hidden segments created for the stock. In case of @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink 
                        stockSegments are hidden and path segments are visible. There may be many stock segments created on a single path segment in
                        that case. 
                        Usage: 1. Query features for a stock. If an overstock is applied on a path with a sharp corner, it may have created multiple features.
                               2.Call this method for every feature in a loop. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetBodySegmentMap
            (
                NXOpen::Features::Feature * feature /** Stock sweep feature. */,
                NXOpen::Body ** body /** Solid body of the stock sweep. */,
                std::vector<NXOpen::Curve *> & stockSegments /** Stock segments. Hidden segments in case of overstocks. */,
                std::vector<NXOpen::Curve *> & pathSegments /** Path segments. Same as stock segments for stock but visible path segments for overstock. */
            );
            /**  If the stock components are disconnected from the path in the assembly this method will connect them again with the path.   @return  True if stock component was disconnected from the assembly path and connection has been restored. False otherwise. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ConnectStockComponentWithAssemblyPath
            (
            );
            /** Get all of the characteristics values on the this object.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristics2 NXOpen::Routing::ICharacteristic::SetCharacteristics2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristics2 instead.") virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual int GetIntegerCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                int value /** value */ 
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual double GetRealCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                double value /** value */ 
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual NXString GetStringCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                const NXString & value /** value */ 
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                const char * value /** value */ 
            );
            /** Removes the input list of characteristics from this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
            /** Sets or creates an integer type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                int value /** New Value to be set on the Attribute */
            );
            /** Sets or creates an integer type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                int value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a double type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                double value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a double type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                double value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a string type type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                const NXString & value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a string type type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                const char * value /** New Value to be set on the Attribute */
            );
            /** Sets all attributes associated with the titles from the input list, 
                    creating new attributes for the ones that don't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit part attributes on the stock part. For legacy parts 
                    where the attributes are on the stock component, the attributes will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit attributes on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attributes will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create attributes on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristics2
            (
                NXOpen::Routing::CharacteristicList * values /** @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink  having the titles, types and values of Attributes to be set */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
