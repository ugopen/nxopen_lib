#ifndef NXOpen_CAM_TEACHING_HXX_INCLUDED
#define NXOpen_CAM_TEACHING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Teaching.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class Teaching;
    }
    class Builder;
    namespace CAM
    {
        class _TeachingBuilder;
        class TeachingImpl;
        /** Represents a Teaching Builder  <br> Abstract  <br> 
         <br>  Created in NX10.0.3.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  Teaching : public NXOpen::Builder
        {
            private: TeachingImpl * m_teaching_impl;
            private: friend class  _TeachingBuilder;
            protected: Teaching();
            public: ~Teaching();
            /** Adds a new class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void AddNewClass
            (
                const NXString & name /** name */ ,
                const NXString & packageName /** package name */ ,
                const NXString & superName /** super name */ 
            );
            /** Adds a new class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void AddNewClass
            (
                const char * name /** name */ ,
                const char * packageName /** package name */ ,
                const char * superName /** super name */ 
            );
            /** Removes a class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RemoveClass
            (
                const NXString & name /** name */ ,
                const NXString & packageName /** package name */ 
            );
            /** Removes a class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RemoveClass
            (
                const char * name /** name */ ,
                const char * packageName /** package name */ 
            );
            /** Renames a class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RenameClass
            (
                const NXString & name /** name */ ,
                const NXString & packageName /** package name */ ,
                const NXString & newName /** new name */ 
            );
            /** Renames a class 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RenameClass
            (
                const char * name /** name */ ,
                const char * packageName /** package name */ ,
                const char * newName /** new name */ 
            );
            /** Adds a new rule 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void AddNewRule
            (
                const NXString & name /** name */ 
            );
            /** Adds a new rule 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void AddNewRule
            (
                const char * name /** name */ 
            );
            /** Removes a rule 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RemoveRule
            (
            );
            /** Renames a rule 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void RenameRule
            (
                const NXString & newName /** new name */ 
            );
            /** Renames a rule 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void RenameRule
            (
                const char * newName /** new name */ 
            );
            /** Gets the selected rule path  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetRulePath
            (
            );
            /** Sets the selected rule path 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRulePath
            (
                const NXString & path /** path */ 
            );
            /** Sets the selected rule path 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetRulePath
            (
                const char * path /** path */ 
            );
            /** Gets the selected rule library path  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetRuleLibraryPath
            (
            );
            /** Sets the selected rule library path 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRuleLibraryPath
            (
                const NXString & path /** path */ 
            );
            /** Sets the selected rule library path 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetRuleLibraryPath
            (
                const char * path /** path */ 
            );
            /** Gets the selected rule priority  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: double GetRulePriority
            (
            );
            /** Sets the selected rule priority 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRulePriority
            (
                double priority /** priority */ 
            );
            /** Gets the rule conditions  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: NXString GetRuleCondition
            (
            );
            /** Sets the rule conditions 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            public: void SetRuleCondition
            (
                const NXString & condition /** condition */ 
            );
            /** Sets the rule conditions 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : fbm_author ("FBM Author") */
            void SetRuleCondition
            (
                const char * condition /** condition */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
