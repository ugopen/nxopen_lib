#ifndef NXOpen_MOTION_LMSSOLVERPROPERTY_HXX_INCLUDED
#define NXOpen_MOTION_LMSSOLVERPROPERTY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_LmsSolverProperty.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class LmsSolverProperty;
    }
    class Expression;
    namespace Motion
    {
        class _LmsSolverPropertyBuilder;
        class LmsSolverPropertyImpl;
        /** Represents a @link NXOpen::Motion::LmsSolverProperty NXOpen::Motion::LmsSolverProperty@endlink  
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  LmsSolverProperty : public NXOpen::TaggedObject
        {
            /** dynamic acceleration method */
            public: enum DynamicAccelerationMethods
            {
                DynamicAccelerationMethodsBanded/** banded */ ,
                DynamicAccelerationMethodsHarwell/** harwell */ ,
                DynamicAccelerationMethodsIterative/** iterative */ 
            };

            /** dynamic initial velocity method */
            public: enum DynamicInitialVelocityMethods
            {
                DynamicInitialVelocityMethodsQr/** qr */ ,
                DynamicInitialVelocityMethodsMoorePenrosePseudoinverse/** moore penrose pseudoinverse */ ,
                DynamicInitialVelocityMethodsMinimumKineticEnergy/** minimum kinetic energy */ 
            };

            /** static jacobian type */
            public: enum StaticJacobianTypes
            {
                StaticJacobianTypesExact/** exact */ ,
                StaticJacobianTypesFinite/** finite */ 
            };

            /** road height adjustment type */
            public: enum RoadHeightAdjustmentTypes
            {
                RoadHeightAdjustmentTypesNone/** none */ ,
                RoadHeightAdjustmentTypesRoad/** road */ ,
                RoadHeightAdjustmentTypesVehicle/** vehicle */ 
            };

            private: LmsSolverPropertyImpl * m_lmssolverproperty_impl;
            private: friend class  _LmsSolverPropertyBuilder;
            protected: LmsSolverProperty();
            public: ~LmsSolverProperty();
            /**Returns  the lu tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LuTolerance
            (
            );
            /**Returns  the assembly tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AssemblyTolerance
            (
            );
            /**Returns  the double array size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int DoubleArraySize
            (
            );
            /**Sets  the double array size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDoubleArraySize
            (
                int doubleArraySize /** doublearraysize */ 
            );
            /**Returns  the integer array size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int IntArraySize
            (
            );
            /**Sets  the integer array size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetIntArraySize
            (
                int intArraySize /** intarraysize */ 
            );
            /**Returns  the kinematic solution tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * KinematicSolutionTolerance
            (
            );
            /**Returns  the dynamic solution tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DynamicSolutionTolerance
            (
            );
            /**Returns  the dynamic max interation step 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DynamicMaxIntegrationStep
            (
            );
            /**Returns  the dynamic integration tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DynamicIntegrationTolerance
            (
            );
            /**Returns  the dynamic solver acceleration method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int DynamicSolverAccelerationMethod
            (
            );
            /**Sets  the dynamic solver acceleration method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicSolverAccelerationMethod
            (
                int dynamicSolverAccelerationMethod /** dynamicsolveraccelerationmethod */ 
            );
            /**Returns  the dynamic initial velocity method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int DynamicInitialVelocityMethod
            (
            );
            /**Sets  the dynamic initial velocity method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicInitialVelocityMethod
            (
                int dynamicInitialVelocityMethod /** dynamicinitialvelocitymethod */ 
            );
            /**Returns  the static solution tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticSolutionTolerance
            (
            );
            /**Returns  the static force tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticForceTolerance
            (
            );
            /**Returns  the static step size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticStepSize
            (
            );
            /**Returns  the static quasi iteration 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int StaticQuasiIteration
            (
            );
            /**Sets  the static quasi iteration 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticQuasiIteration
            (
                int staticQuasiIteration /** staticquasiiteration */ 
            );
            /**Returns  the static jacobian type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int StaticJacobianType
            (
            );
            /**Sets  the static jacobian type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticJacobianType
            (
                int staticJacobianType /** staticjacobiantype */ 
            );
            /**Returns  the road height adjustment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::LmsSolverProperty::RoadHeightAdjustmentTypes RoadHeightAdjustment
            (
            );
            /**Sets  the road height adjustment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRoadHeightAdjustment
            (
                NXOpen::Motion::LmsSolverProperty::RoadHeightAdjustmentTypes roadHeightAdjustment /** roadheightadjustment */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
