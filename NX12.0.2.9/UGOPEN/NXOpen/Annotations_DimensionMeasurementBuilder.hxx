#ifndef NXOpen_ANNOTATIONS_DIMENSIONMEASUREMENTBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONMEASUREMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionMeasurementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DimensionMeasurementBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class View;
    namespace Annotations
    {
        class _DimensionMeasurementBuilderBuilder;
        class DimensionMeasurementBuilderImpl;
        /**
            Represents a @link NXOpen::Annotations::DimensionMeasurementBuilder NXOpen::Annotations::DimensionMeasurementBuilder@endlink 
             <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DimensionMeasurementBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** measurement method for the dimensions */
            public: enum MeasurementMethod
            {
                MeasurementMethodInferred/** Inferred measurement direction (UI Only) */,
                MeasurementMethodHorizontal/** Horizontal measurement direction */,
                MeasurementMethodVertical/** Vertical measurement direction */,
                MeasurementMethodPointToPoint/** Point to point measurement direction */,
                MeasurementMethodPerpendicular/** Perpendicular measurement direction */,
                MeasurementMethodCylindrical/** Linear measurement method representing a diameter */,
                MeasurementMethodAngular/** Angular measurement type */,
                MeasurementMethodRadial/** Radial measurement type */,
                MeasurementMethodDiametral/** Diametral measurement type */,
                MeasurementMethodHoleCallout/** Hole Callout based measurement */
            };

            private: DimensionMeasurementBuilderImpl * m_dimensionmeasurementbuilder_impl;
            private: friend class  _DimensionMeasurementBuilderBuilder;
            protected: DimensionMeasurementBuilder();
            public: ~DimensionMeasurementBuilder();
            /**Returns  the measurement method for the size of the dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethod Method
            (
            );
            /**Sets  the measurement method for the size of the dimension 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetMethod
            (
                NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethod method /** method */ 
            );
            /**Returns  the measurement direction when using @link NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint@endlink   (optional) 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets  the measurement direction when using @link NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint@endlink   (optional) 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the measurement direction view when using @link NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint@endlink   (optional) 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * DirectionView
            (
            );
            /**Sets  the measurement direction view when using @link NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint NXOpen::Annotations::DimensionMeasurementBuilder::MeasurementMethodPointToPoint@endlink   (optional) 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetDirectionView
            (
                NXOpen::View * directionView /** directionview */ 
            );
            /**Returns  the measurement part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * PartOccurrence
            (
            );
            /**Sets  the measurement part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetPartOccurrence
            (
                NXOpen::Assemblies::Component * partOccurrence /** partoccurrence */ 
            );
            /**Returns  the activation of hole callout secondary dimension 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SecondaryCalloutActive
            (
            );
            /**Sets  the activation of hole callout secondary dimension 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondaryCalloutActive
            (
                bool secondaryCalloutActive /** secondarycalloutactive */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
