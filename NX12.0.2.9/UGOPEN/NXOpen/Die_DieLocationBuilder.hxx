#ifndef NXOpen_DIE_DIELOCATIONBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIELOCATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieLocationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class DieLocationBuilder;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Point;
    class SelectNXObject;
    namespace Die
    {
        class _DieLocationBuilderBuilder;
        class DieLocationBuilderImpl;
        /**
            Represents a @link NXOpen::Die::DieLocationBuilder NXOpen::Die::DieLocationBuilder@endlink . The Die 
            Location Item is a helper and identifies a single item in the
            @link NXOpen::Die::DieLocationBuilder NXOpen::Die::DieLocationBuilder@endlink . The item allows the user to
            fully specify a single location point for items such as hole center
            or clamping slot location. Note that a non-point is selected,
            such as a plane or coordinate system, the control point of the object
            will be used for the location.
             <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::CreateDieLocation  NXOpen::Die::DieCollection::CreateDieLocation @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  DieLocationBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** the options available for defining the location */
            public: enum LocationType
            {
                LocationTypeSelectLocation/** Select the point to be used. */,
                LocationTypeNewPoint/** Define the point to be used. */,
                LocationTypeNewCoordinateSystem/** Define a coordinate system to specify the location. */,
                LocationTypeNewVector/** Define a vector to specify the location. */,
                LocationTypeNewPlane/** Define a plane to specify the location. */
            };

            private: DieLocationBuilderImpl * m_dielocationbuilder_impl;
            private: friend class  _DieLocationBuilderBuilder;
            protected: DieLocationBuilder();
            public: ~DieLocationBuilder();
            /**Returns  the type of source that defined the location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLocationBuilder::LocationType InputType
            (
            );
            /**Sets  the type of source that defined the location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInputType
            (
                NXOpen::Die::DieLocationBuilder::LocationType inputType /** inputtype */ 
            );
            /**Returns  the selected location 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * Location
            (
            );
            /**Returns  the specified point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the specified point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the specified vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the specified vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the specified plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the specified plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the coordinate system origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d CoordinateSystemOrigin
            (
            );
            /**Sets  the coordinate system origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCoordinateSystemOrigin
            (
                const NXOpen::Point3d & coordinateSystemOrigin /** coordinatesystemorigin */ 
            );
            /**Returns  the coordinate system matrix 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 CoordinateSystemMatrix
            (
            );
            /**Sets  the coordinate system matrix 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCoordinateSystemMatrix
            (
                const NXOpen::Matrix3x3 & coordinateSystemMatrix /** coordinatesystemmatrix */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
