#ifndef NXOpen_TOOLDESIGNER_SELECTUNITDESIGNSBUILDER_HXX_INCLUDED
#define NXOpen_TOOLDESIGNER_SELECTUNITDESIGNSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ToolDesigner_SelectUnitDesignsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libtooldesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ToolDesigner
    {
        class SelectUnitDesignsBuilder;
    }
    class Builder;
    class SelectTaggedObjectList;
    class TaggedObject;
    namespace ToolDesigner
    {
        class _SelectUnitDesignsBuilderBuilder;
        class SelectUnitDesignsBuilderImpl;
        /** SelectUnitDesignsBuilder  <br> To create a new instance of this class, use @link NXOpen::ToolDesigner::ToolDesignerManager::CreateSelectUnitDesignsBuilder  NXOpen::ToolDesigner::ToolDesignerManager::CreateSelectUnitDesignsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SearchUnitsByEnum </td> <td> 
         
        Datums </td> </tr> 

        </table>  

         <br>  Created in NX12.0.1.  <br>  
        */
        class TOOLDESIGNEROPENCPPEXPORT  SelectUnitDesignsBuilder : public NXOpen::Builder
        {
            /** SearchUnitsBy */
            public: enum SearchUnitsBy
            {
                SearchUnitsByDatums/** datums */ ,
                SearchUnitsByName/** name */ ,
                SearchUnitsById/** id */ 
            };

            /** UnitDatumAssociatedState */
            public: enum AssociatedState
            {
                AssociatedStateAssociatedAndAssign/** associated and assign */ ,
                AssociatedStateAssociatedNotAssign/** associated not assign */ ,
                AssociatedStateNotAssociated/** not associated */ 
            };

            private: SelectUnitDesignsBuilderImpl * m_selectunitdesignsbuilder_impl;
            private: friend class  _SelectUnitDesignsBuilderBuilder;
            protected: SelectUnitDesignsBuilder();
            public: ~SelectUnitDesignsBuilder();
            /**Returns  the Unit Selection 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::SelectTaggedObjectList * InvisibleSelection
            (
            );
            /** CloneReplaceButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void CloneReplaceButton
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** RemoveUnitsButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void RemoveUnitsButton
            (
                const std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** AssociatedDatumsButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void AssociatedDatumsButton
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                const std::vector<NXOpen::TaggedObject *> & datums /** datums */ 
            );
            /**Returns  the search units by enum 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::ToolDesigner::SelectUnitDesignsBuilder::SearchUnitsBy SearchUnitsByEnum
            (
            );
            /**Sets  the search units by enum 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchUnitsByEnum
            (
                NXOpen::ToolDesigner::SelectUnitDesignsBuilder::SearchUnitsBy searchUnitsByEnum /** searchunitsbyenum */ 
            );
            /**Returns  the search units by string 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXString SearchUnitsByString
            (
            );
            /**Sets  the search units by string 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchUnitsByString
            (
                const NXString & searchUnitsByString /** searchunitsbystring */ 
            );
            /**Sets  the search units by string 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            void SetSearchUnitsByString
            (
                const char * searchUnitsByString /** searchunitsbystring */ 
            );
            /**Returns  the search units by datums selection 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::SelectTaggedObjectList * SearchUnitsByDatumsSelection
            (
            );
            /** SearchUnitsSelectAllDatumsButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SearchUnitsSelectAllDatumsButton
            (
            );
            /** SearchUnitsButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SearchUnitsButton
            (
            );
            /** SearchUnitsPrevButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SearchUnitsPrevButton
            (
            );
            /** SearchUnitsNextButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SearchUnitsNextButton
            (
            );
            /** CloneAddButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void CloneAddButton
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** AddButton 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void AddButton
            (
                const std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** Get Fixture Units Filtered 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetFixtureUnitsFiltered
            (
                std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** Get Station Datums  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool HasStationDatums
            (
            );
            /** Get Avilable Datums for Association 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetAvailableDatumForAssociation
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                std::vector<NXOpen::TaggedObject *> & datums /** datums */ 
            );
            /** Get Search Units by Datums 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetSearchUnitsByDatumsResults
            (
                std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** Get Search Units by Property 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetSearchUnitsByPropertyResults
            (
                std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** Get Cloned Unit Data  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool GetCloneUnitData
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                NXString* unitName /** unit name */ ,
                NXString* unitId /** unit id */ 
            );
            /** Is Unit in Clone Map  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool IsUnitInCloneMap
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** Set Cloned Unit Data  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool SetCloneUnitData
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                const NXString & unitName /** unit name */ ,
                const NXString & unitId /** unit id */ 
            );
            /** Set Cloned Unit Data  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            bool SetCloneUnitData
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                const char * unitName /** unit name */ ,
                const char * unitId /** unit id */ 
            );
            /** Get Associated Status of unit  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::ToolDesigner::SelectUnitDesignsBuilder::AssociatedState GetUnitAssociationState
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                bool* reusedInOtherStation /** reusedinotherstation */ 
            );
            /** Is Search Unit is blank  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool IsSearchUnitIsBlank
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** Is Search Unit Selected To Fixture  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool IsSearchUnitSelectedToFixture
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** Is Search Unit is blank 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void BlankSearchUnit
            (
                NXOpen::TaggedObject * unit /** unit */ ,
                bool blankState /** blank state */ 
            );
            /** Has Previous Search Results Page  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool HasPreviousSearchResultsPage
            (
            );
            /** Has Next Search Results Page  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool HasNextSearchReultsPage
            (
            );
            /** Get Current Search Results Page  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: int GetCurrentSearchResultsPage
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
