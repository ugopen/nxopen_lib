#ifndef NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
#define NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_WorkPlane.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class WorkPlane;
    }
    class NXObject;
    namespace Preferences
    {
        class _WorkPlaneBuilder;
        class WorkPlaneImpl;
        /** Represents the set of WorkPlanePreferences preferences applicable to part. Sets parameters for the 
        Graphics Window grid and the Work Plane Emphasis mode.  <br> An instance of this class can be obtained using @link Preferences::SessionPreferences::WorkPlane Preferences::SessionPreferences::WorkPlane@endlink 
              or @link Preferences::PartPreferences::Workplane Preferences::PartPreferences::Workplane@endlink   <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  WorkPlane : public NXOpen::NXObject
        {
            /** Describes whether the Grid type selected is Polar or Rectangular */
            public: enum Grid
            {
                GridPolar/** Polar Grid */,
                GridRectangular/** Rectangular Grid */
            };

             /** Grid size parameters */
            public:
            struct GridSize
            {
                public: /** Distance between major grid lines */double MajorGridSpacing;
                public: /** Number of minor lines between major grid lines */int MinorLinesPerMajor;
                public: /** Number of snap points between minor grid lines */int SnapPointsPerMinor;
                public: GridSize() :
                    MajorGridSpacing(),
                    MinorLinesPerMajor(),
                    SnapPointsPerMinor()
                {
                }
                /** Constructor for the GridSize struct. */ 
                public: GridSize(double majorGridSpacingInitial /** Distance between major grid lines */, 
                        int minorLinesPerMajorInitial /** Number of minor lines between major grid lines */, 
                        int snapPointsPerMinorInitial /** Number of snap points between minor grid lines */) :
                    MajorGridSpacing(majorGridSpacingInitial),
                    MinorLinesPerMajor(minorLinesPerMajorInitial),
                    SnapPointsPerMinor(snapPointsPerMinorInitial)
                {
                }
            };

             /** Nonuniform grid size parameters */
            public:
            struct NonuniformGridSize
            {
                public: /** XC axis grid parameters */NXOpen::Preferences::WorkPlane::GridSize XcGridSize;
                public: /** YC axis grid parameters */NXOpen::Preferences::WorkPlane::GridSize YcGridSize;
                public: NonuniformGridSize() :
                    XcGridSize(),
                    YcGridSize()
                {
                }
                /** Constructor for the NonuniformGridSize struct. */ 
                public: NonuniformGridSize(const NXOpen::Preferences::WorkPlane::GridSize &xcGridSizeInitial /** XC axis grid parameters */, 
                        const NXOpen::Preferences::WorkPlane::GridSize &ycGridSizeInitial /** YC axis grid parameters */) :
                    XcGridSize(xcGridSizeInitial),
                    YcGridSize(ycGridSizeInitial)
                {
                }
            };

             /** Polar grid size parameters */
            public:
            struct PolarGridSize
            {
                public: /** Radial grid circle parameters */NXOpen::Preferences::WorkPlane::GridSize RadialGridSize;
                public: /** Angular grid line parameters*/NXOpen::Preferences::WorkPlane::GridSize AngularGridSize;
                public: PolarGridSize() :
                    RadialGridSize(),
                    AngularGridSize()
                {
                }
                /** Constructor for the PolarGridSize struct. */ 
                public: PolarGridSize(const NXOpen::Preferences::WorkPlane::GridSize &radialGridSizeInitial /** Radial grid circle parameters */, 
                        const NXOpen::Preferences::WorkPlane::GridSize &angularGridSizeInitial /** Angular grid line parameters*/) :
                    RadialGridSize(radialGridSizeInitial),
                    AngularGridSize(angularGridSizeInitial)
                {
                }
            };

            private: WorkPlaneImpl * m_workplane_impl;
            private: friend class  _WorkPlaneBuilder;
            protected: WorkPlane();
            public: ~WorkPlane();
            /**Returns  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowGrid
            (
            );
            /**Sets  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowGrid
            (
                bool showGrid /** show grid */ 
            );
            /**Returns  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowLabels
            (
            );
            /**Sets  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowLabels
            (
                bool showLabels /** show labels */ 
            );
            /**Returns  the grid on top flag. If true displays the grid on top of other graphics in the scene.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GridOnTop
            (
            );
            /**Sets  the grid on top flag. If true displays the grid on top of other graphics in the scene.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridOnTop
            (
                bool gridOnTop /** grid on top */ 
            );
            /**Returns  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool SnapToGrid
            (
            );
            /**Sets  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSnapToGrid
            (
                bool snapToGrid /** snap to grid */ 
            );
            /**Returns  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool GridIsNonUniform
            (
            );
            /**Sets  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridIsNonUniform
            (
                bool gridIsNonUniform /** grid is non uniform */ 
            );
            /**Returns  the show major lines flag for rectangular grid   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool RectangularShowMajorLines
            (
            );
            /**Sets  the show major lines flag for rectangular grid   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularShowMajorLines
            (
                bool rectangularShowMajorLines /** rectangular show major lines */ 
            );
            /**Returns  the show major lines flag for polar grid   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool PolarShowMajorLines
            (
            );
            /**Sets  the show major lines flag for polar grid   
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPolarShowMajorLines
            (
                bool polarShowMajorLines /** polar show major lines */ 
            );
            /**Returns  the grid color. Specifies the color of grid.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int GridColor
            (
            );
            /**Sets  the grid color. Specifies the color of grid.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridColor
            (
                int gridColor /** grid color */ 
            );
            /**Returns  the grid type. It may be polar or rectangular  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::Grid GridType
            (
            );
            /**Sets  the grid type. It may be polar or rectangular  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridType
            (
                NXOpen::Preferences::WorkPlane::Grid gridType /** grid type */ 
            );
            /** Query the rectangular uniform grid size parameters.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::GridSize GetRectangularUniformGridSize
            (
            );
            /**  Set the rectangular uniform grid size parameters. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularUniformGridSize
            (
                const NXOpen::Preferences::WorkPlane::GridSize & gridSize /** grid size */ 
            );
            /** Query the rectangular nonuniform grid size parameters.   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::NonuniformGridSize GetRectangularNonuniformGridSize
            (
            );
            /**  Set the rectangular nonuniform grid size parameters. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularNonuniformGridSize
            (
                const NXOpen::Preferences::WorkPlane::NonuniformGridSize & nonuniformGridSize /** nonuniform grid size */ 
            );
            /** Query the polar grid size parameters.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::PolarGridSize GetPolarGridSize
            (
            );
            /**  Set the polar grid size parameters. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPolarGridSize
            (
                const NXOpen::Preferences::WorkPlane::PolarGridSize & polarGridSize /** polar grid size */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
