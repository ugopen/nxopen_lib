#ifndef NXOpen_CAM_BOUNDARYSETWIREEDM_HXX_INCLUDED
#define NXOpen_CAM_BOUNDARYSETWIREEDM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BoundarySetWireEDM.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_BoundaryMemberSetWireEDM.hxx>
#include <NXOpen/CAM_WedmCustomBoundaryDataBuilder.hxx>
#include <NXOpen/CAM_BoundarySet.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BoundarySetWireEDM;
    }
    namespace CAM
    {
        class BoundaryMemberSetWireEDM;
    }
    namespace CAM
    {
        class BoundarySet;
    }
    namespace CAM
    {
        class WedmCustomBoundaryDataBuilder;
    }
    class NXObject;
    class TaggedObject;
    namespace CAM
    {
        class _BoundarySetWireEDMBuilder;
        class BoundarySetWireEDMImpl;
        /** Represents a boundary set for wire EDM  <br> To create a new instance of this class, use @link NXOpen::CAM::Boundary::CreateBoundarySetWireEdm  NXOpen::CAM::Boundary::CreateBoundarySetWireEdm @endlink  <br> 
         <br>  Created in NX12.0.1.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BoundarySetWireEDM : public NXOpen::CAM::BoundarySet
        {
            private: BoundarySetWireEDMImpl * m_boundarysetwireedm_impl;
            private: friend class  _BoundarySetWireEDMBuilder;
            protected: BoundarySetWireEDM();
            public: ~BoundarySetWireEDM();
            /** Create an empty custom member data set for a wire EDM boundary @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::BoundaryMemberSetWireEDM * CreateBoundaryMemberSetWireEdm
            (
            );
            /**Returns  the flag whether this boundary has custom tolerances 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool CustomTolerances
            (
            );
            /**Sets  the flag whether this boundary has custom tolerances 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomTolerances
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the in tolerance value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: double InTolerance
            (
            );
            /**Sets  the in tolerance value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInTolerance
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the out tolerance value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: double OutTolerance
            (
            );
            /**Sets  the out tolerance value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutTolerance
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this boundary has custom stock activated 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool CustomStock
            (
            );
            /**Sets  the flag whether this boundary has custom stock activated 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomStock
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the stock value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: double Stock
            (
            );
            /**Sets  the stock value 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStock
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the flag whether this boundary has custom taper angle activated 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool CustomTaperAngle
            (
            );
            /**Sets  the flag whether this boundary has custom taper angle activated 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomTaperAngle
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the taper angle value 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double TaperAngle
            (
            );
            /**Sets  the taper angle value 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTaperAngle
            (
                double newValue /** newvalue */ 
            );
            /**Returns  the control points 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::WedmCustomBoundaryDataBuilder * ControlPoints
            (
            );
            /** Create a top face boundary 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void AddTopFace
            (
                NXOpen::TaggedObject * face /** the top face to create boundary*/,
                const NXOpen::Point3d & pickPoint /** the pick point on the top face to determine the closest edge */
            );
            /** Append faces to a side face boundary 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void AppendSideFaces
            (
                const std::vector<NXOpen::TaggedObject *> & faces /** the faces */,
                const NXOpen::Point3d & pickPoint /** the pick point on the side face */
            );
            /** Remove a face to a side face boundary 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveSideFace
            (
                NXOpen::TaggedObject * face /** the side face to be removed */
            );
            /** Add curves to the wireframe boundary 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void AppendCurvesToWireframe
            (
                const std::vector<NXOpen::NXObject *> & curves /** the curves */,
                const NXOpen::Point3d & pickPoint /** the pick point (start point on first member) */,
                const NXOpen::Matrix3x3 & matrix /** the view matrix */
            );
            /** Remove curves from the wireframe boundary 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveCurvesFromWireframe
            (
                const std::vector<NXOpen::NXObject *> & curves /** the curves */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
