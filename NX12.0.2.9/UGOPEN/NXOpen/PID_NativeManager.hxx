#ifndef NXOpen_PID_NATIVEMANAGER_HXX_INCLUDED
#define NXOpen_PID_NATIVEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_NativeManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PID_EquipmentBuilder.hxx>
#include <NXOpen/PID_NativeEquipment.hxx>
#include <NXOpen/PID_NativeOffSheetConnector.hxx>
#include <NXOpen/PID_NativePipe.hxx>
#include <NXOpen/PID_NativeSheet.hxx>
#include <NXOpen/PID_OffSheetConnectorBuilder.hxx>
#include <NXOpen/PID_PipeBuilder.hxx>
#include <NXOpen/PID_PortEquipmentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class NativeManager;
    }
    class Session;
    namespace PID
    {
        class EquipmentBuilder;
    }
    namespace PID
    {
        class NativeEquipment;
    }
    namespace PID
    {
        class NativeEquipmentBuilder;
    }
    namespace PID
    {
        class NativeFlowDirectionArrowBuilder;
    }
    namespace PID
    {
        class NativeOffSheetConnector;
    }
    namespace PID
    {
        class NativeOffSheetConnectorBuilder;
    }
    namespace PID
    {
        class NativePipe;
    }
    namespace PID
    {
        class NativePipeBuilder;
    }
    namespace PID
    {
        class NativePortEquipment;
    }
    namespace PID
    {
        class NativePortEquipmentBuilder;
    }
    namespace PID
    {
        class NativeSheet;
    }
    namespace PID
    {
        class NativeSheetCollection;
    }
    namespace PID
    {
        class OffSheetConnectorBuilder;
    }
    namespace PID
    {
        class PipeBuilder;
    }
    namespace PID
    {
        class PortEquipmentBuilder;
    }
    class Part;
    namespace PID
    {
        class NativeManagerImpl;

        /// \cond NX_NO_DOC 
        /** A manager to deal with all objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX12.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  NativeManager
        {
            private: NativeManagerImpl * m_nativemanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit NativeManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static NativeManager* theNativeManager;
            /** Returns the NativeManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static NativeManager* GetNativeManager(NXOpen::Session *owner);
            public: ~NativeManager();
            /** Creates a @link NXOpen::PID::EquipmentBuilder NXOpen::PID::EquipmentBuilder@endlink  in native mode.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::EquipmentBuilder * CreateEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::NativeEquipment * equipment /** @link NXOpen::PID::NativeEquipment NXOpen::PID::NativeEquipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::PortEquipmentBuilder NXOpen::PID::PortEquipmentBuilder@endlink  in native mode.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PortEquipmentBuilder * CreatePortEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::NativePortEquipment * portEquipment /** @link NXOpen::PID::NativePortEquipment NXOpen::PID::NativePortEquipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::PipeBuilder NXOpen::PID::PipeBuilder@endlink  in native mode.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PipeBuilder * CreatePipeBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::NativePipe * pipe /** @link PID::NativePipe PID::NativePipe@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::OffSheetConnectorBuilder NXOpen::PID::OffSheetConnectorBuilder@endlink .  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::OffSheetConnectorBuilder * CreateOffSheetConnectorBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::NativeOffSheetConnector * oscObject /** @link PID::NativeOffSheetConnector PID::NativeOffSheetConnector@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::NativeSheet NXOpen::PID::NativeSheet@endlink .  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::NativeSheet * CreateNativeSheet
            (
                NXOpen::Part * part /** the part that will own the sheet */
            );


            /** Returns the @link NXOpen::PID::NativeSheetCollection  NXOpen::PID::NativeSheetCollection @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativeSheetCollection *NativeSheets();
            /** Returns the @link NXOpen::PID::NativeEquipmentBuilder  NXOpen::PID::NativeEquipmentBuilder @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativeEquipmentBuilder *NativeEquipmentBuilder();
            /** Returns the @link NXOpen::PID::NativePortEquipmentBuilder  NXOpen::PID::NativePortEquipmentBuilder @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativePortEquipmentBuilder *NativePortEquipmentBuilder();
            /** Returns the @link NXOpen::PID::NativePipeBuilder  NXOpen::PID::NativePipeBuilder @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativePipeBuilder *NativePipeBuilder();
            /** Returns the @link NXOpen::PID::NativeOffSheetConnectorBuilder  NXOpen::PID::NativeOffSheetConnectorBuilder @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativeOffSheetConnectorBuilder *NativeOffSheetConnectorBuilder();
            /** Returns the @link NXOpen::PID::NativeFlowDirectionArrowBuilder  NXOpen::PID::NativeFlowDirectionArrowBuilder @endlink  belonging to this part 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PID::NativeFlowDirectionArrowBuilder *NativeFlowDirectionArrowBuilder();
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
