#ifndef NXOpen_AME_CONFIGURERESULTTABLEBUILDER_HXX_INCLUDED
#define NXOpen_AME_CONFIGURERESULTTABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ConfigureResultTableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ConfigureResultTableBuilder;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    namespace AME
    {
        class _ConfigureResultTableBuilderBuilder;
        class ConfigureResultTableBuilderImpl;
        /** Represents configure result table class builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateConfigureResultTableBuilder  NXOpen::AME::AMEManager::CreateConfigureResultTableBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ConfigureResultTableBuilder : public NXOpen::Builder
        {
            private: ConfigureResultTableBuilderImpl * m_configureresulttablebuilder_impl;
            private: friend class  _ConfigureResultTableBuilderBuilder;
            protected: ConfigureResultTableBuilder();
            public: ~ConfigureResultTableBuilder();
            /**Returns  the source object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObjectList * SourceObject
            (
            );
            /** The action to add properties 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Add
            (
                const NXString & groupName /** groupname */ ,
                const NXString & propertyName /** propertyname */ 
            );
            /** The action to add properties 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void Add
            (
                const char * groupName /** groupname */ ,
                const char * propertyName /** propertyname */ 
            );
            /** The action to move added column up 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveUp
            (
                const NXString & groupName /** groupname */ ,
                const NXString & propertyName /** propertyname */ 
            );
            /** The action to move added column up 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MoveUp
            (
                const char * groupName /** groupname */ ,
                const char * propertyName /** propertyname */ 
            );
            /** The action to move earlier added column 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Remove
            (
                const NXString & groupName /** groupname */ ,
                const NXString & propertyName /** propertyname */ 
            );
            /** The action to move earlier added column 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void Remove
            (
                const char * groupName /** groupname */ ,
                const char * propertyName /** propertyname */ 
            );
            /** The action to move added column down 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveDown
            (
                const NXString & groupName /** groupname */ ,
                const NXString & propertyName /** propertyname */ 
            );
            /** The action to move added column down 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MoveDown
            (
                const char * groupName /** groupname */ ,
                const char * propertyName /** propertyname */ 
            );
            /**Returns  the selected classification 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * SelectedClassification
            (
            );
            /** The visibility status of each column or group 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetVisibility
            (
                const NXString & groupName /** groupname */ ,
                const NXString & propertyName /** propertyname */ ,
                bool visibility /** visibility */ 
            );
            /** The visibility status of each column or group 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetVisibility
            (
                const char * groupName /** groupname */ ,
                const char * propertyName /** propertyname */ ,
                bool visibility /** visibility */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
