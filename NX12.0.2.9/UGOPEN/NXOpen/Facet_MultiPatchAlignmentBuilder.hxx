#ifndef NXOpen_FACET_MULTIPATCHALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_FACET_MULTIPATCHALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_MultiPatchAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class MultiPatchAlignmentBuilder;
    }
    class Builder;
    namespace Facet
    {
        class SelectFacetedBodyList;
    }
    namespace Facet
    {
        class _MultiPatchAlignmentBuilderBuilder;
        class MultiPatchAlignmentBuilderImpl;
        /** Aligns multiple facet bodies to one another without using reference points.  <br> To create a new instance of this class, use @link NXOpen::Facet::FacetedBodyCollection::CreateMultiPatchAlignmentBuilder  NXOpen::Facet::FacetedBodyCollection::CreateMultiPatchAlignmentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Iteration </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        MaximumCheckingDistance </td> <td> 
         
        10.0 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        Resolution </td> <td> 
         
        High </td> </tr> 

        <tr><td> 
         
        Tolerance </td> <td> 
         
        0.01 (millimeters part), 0.005 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  MultiPatchAlignmentBuilder : public NXOpen::Builder
        {
            /** Determines the number of facets used in the alignment. 
                        If you are importing an .AC file with image information, this option will 
                        control how many image pixels are used in the alignment. If the imported 
                        facet data does not have image information, the number of points being used 
                        for the alignment will be controlled. */
            public: enum ResolutionType
            {
                ResolutionTypeHigh/** Uses a high number of facets for the alignment. */,
                ResolutionTypeMedium/** Uses a medium number of facets for the alignment. */,
                ResolutionTypeLow/** Uses a low number of facets for the alignment. */
            };

            private: MultiPatchAlignmentBuilderImpl * m_multipatchalignmentbuilder_impl;
            private: friend class  _MultiPatchAlignmentBuilderBuilder;
            protected: MultiPatchAlignmentBuilder();
            public: ~MultiPatchAlignmentBuilder();
            /**Returns  the facet bodies to be aligned. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBodyList * AlignmentBodies
            (
            );
            /**Returns  an optional reference facet body with a location and orientation that will 
                        remain fixed, causing all of the other selected facet bodies to align with 
                        it. If you do not select a reference body, all of the selected facet bodies 
                        will align to each other, without a fixed location. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBodyList * ReferencePatches
            (
            );
            /**Returns  the type indicating number of facets to be used  in the alignment. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::MultiPatchAlignmentBuilder::ResolutionType Resolution
            (
            );
            /**Sets  the type indicating number of facets to be used  in the alignment. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetResolution
            (
                NXOpen::Facet::MultiPatchAlignmentBuilder::ResolutionType resolution /** resolution */ 
            );
            /**Returns  the precision of the alignment.
                        Alignment will complete when tolerance is met or the number of iterations has been reached. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the precision of the alignment.
                        Alignment will complete when tolerance is met or the number of iterations has been reached. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the distance facets may be from one another in order to be used 
                        in the alignment. Larger numbers slow the alignment process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double MaximumCheckingDistance
            (
            );
            /**Sets  the distance facets may be from one another in order to be used 
                        in the alignment. Larger numbers slow the alignment process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMaximumCheckingDistance
            (
                double maximumCheckingDistance /** maximumcheckingdistance */ 
            );
            /**Returns  the value indicating the number of times the alignment algorithm is applied. 
                        Many iterations improve alignment accuracy but take longer. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int Iteration
            (
            );
            /**Sets  the value indicating the number of times the alignment algorithm is applied. 
                        Many iterations improve alignment accuracy but take longer. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetIteration
            (
                int iteration /** iteration */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
