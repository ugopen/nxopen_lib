#ifndef NXOpen_FEATURES_SHEETMETAL_FLEXIBLECABLEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_FLEXIBLECABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_FlexibleCableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class FlexibleCableBuilder;
        }
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class FlexibleCableSegment;
        }
    }
    class Point;
    class TaggedObjectList;
    namespace Features
    {
        namespace SheetMetal
        {
            class _FlexibleCableBuilderBuilder;
            class FlexibleCableBuilderImpl;
            /** Represents a Flexible Cable feature builder.  <br> To create a new instance of this class, use @link NXOpen::Features::SheetMetal::SheetmetalManager::CreateFlexibleCableBuilder  NXOpen::Features::SheetMetal::SheetmetalManager::CreateFlexibleCableBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            ConductorCount </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            ConductorSpacing.Value </td> <td> 
             
            1 (millimeters part), 0.1 (inches part) </td> </tr> 

            <tr><td> 
             
            ConductorWidth.Value </td> <td> 
             
            2 (millimeters part), 0.2 (inches part) </td> </tr> 

            <tr><td> 
             
            CrossSectionWidth.Value </td> <td> 
             
            20 (millimeters part), 1 (inches part) </td> </tr> 

            <tr><td> 
             
            StrippingLength.Value </td> <td> 
             
            3 (millimeters part), 0.3 (inches part) </td> </tr> 

            <tr><td> 
             
            Thickness.Value </td> <td> 
             
            1 (millimeters part), 0.04 (inches part) </td> </tr> 

            </table>  

             <br>  Created in NX6.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  FlexibleCableBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** This enum represents the bend angle direction for the bend segment. First member of the cable is
                                always a planar segment. For this, the normal direction for bend angle is opposite to the
                                thickness direction. This convention continues untill a fold (bend type having nonzero
                                path adjustment angle) is placed. After this, the convention reverses, meaning the normal
                                direction for the bend angle is along the thickness direction. For each member, the thickness
                                direction signifies the material addition direction. This is an input for the entire cable at the
                                start.
                                */
                public: enum BendAngleDirectionOptions
                {
                    BendAngleDirectionOptionsReverseNormalDirection/** Bend angle reverse normal direction.*/,
                    BendAngleDirectionOptionsNormalDirection/** Bend angle normal direction. */
                };

                /** This enum represents the path adjustment angle direction for the bend segment. The cross
                                product of the cable direction and the bend angle direction determined using above
                                convention gives the right direction for the path adjustment angle. The left direction is
                                opposite to that. */
                public: enum PathAdjustmentAngleDirectionOptions
                {
                    PathAdjustmentAngleDirectionOptionsLeftDirection/** Path adjustment angle left direction. */,
                    PathAdjustmentAngleDirectionOptionsRightDirection/** Path adjustment angle right direction. */
                };

                /** Represents the Flexible Cable segment options. */
                public: enum SegmentTypeOptions
                {
                    SegmentTypeOptionsPlanar/** Planar cable segment. */,
                    SegmentTypeOptionsBend/** Bend cable segment. */
                };

                private: FlexibleCableBuilderImpl * m_flexiblecablebuilder_impl;
                private: friend class  _FlexibleCableBuilderBuilder;
                protected: FlexibleCableBuilder();
                public: ~FlexibleCableBuilder();
                /**Returns  the cable segment list. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::TaggedObjectList * SegmentList
                (
                );
                /**Returns  the start point. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Point * StartPoint
                (
                );
                /**Sets  the start point. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetStartPoint
                (
                    NXOpen::Point * startPoint /** startpoint */ 
                );
                /**Returns  the cable direction. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Direction * CableDirection
                (
                );
                /**Sets  the cable direction. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetCableDirection
                (
                    NXOpen::Direction * cableDirection /** cabledirection */ 
                );
                /**Returns  the thickness direction. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Direction * ThicknessDirection
                (
                );
                /**Sets  the thickness direction. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetThicknessDirection
                (
                    NXOpen::Direction * thicknessDirection /** thicknessdirection */ 
                );
                /**Returns  the thickness. 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * Thickness
                (
                );
                /**Returns  the cross section width. 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * CrossSectionWidth
                (
                );
                /**Returns  the conductor width. 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * ConductorWidth
                (
                );
                /**Returns  the conductor spacing. 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * ConductorSpacing
                (
                );
                /**Returns  the stripping length. 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * StrippingLength
                (
                );
                /**Returns  the count of conductors. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: int ConductorCount
                (
                );
                /**Sets  the count of conductors. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetConductorCount
                (
                    int noOfConductors /** Number of conductors of cable. */
                );
                /** Returns the index of cable segment.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: int GetIndexOfSegment
                (
                    NXOpen::Features::SheetMetal::FlexibleCableSegment * flexibleCableSegment /** @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink . */
                );
                /** Returns the cable segment at given index.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SheetMetal::FlexibleCableSegment * GetSegment
                (
                    int index /** Index of the required @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink . */
                );
                /** Deletes a cable segment at given index. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void DeleteSegment
                (
                    int index /** Index of the @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink  which needs to be deleted. */
                );
                /** Deletes all cable segments. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: void DeleteAllSegments
                (
                );
                /** Creates a new @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink  planar segment. This
                               can be either appended at the end, or inserted in between the list. This is decided by
                               the input index.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SheetMetal::FlexibleCableSegment * CreatePlanarSegment
                (
                    const NXString & length /** Length. */,
                    int segmentIndex /** Index. */
                );
                /** Creates a new @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink  planar segment. This
                               can be either appended at the end, or inserted in between the list. This is decided by
                               the input index.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                NXOpen::Features::SheetMetal::FlexibleCableSegment * CreatePlanarSegment
                (
                    const char * length /** Length. */,
                    int segmentIndex /** Index. */
                );
                /** Creates a new @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink  bend segment. This
                               can be either appended at the end, or inserted in between the list. This is decided by
                               the input index.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SheetMetal::FlexibleCableSegment * CreateBendSegment
                (
                    const NXString & bendAngle /** Bend angle. */,
                    const NXString & bendRadius /** Bend radius. */,
                    const NXString & pathAdjustmentAngle /** Path adjustment angle. */,
                    NXOpen::Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions bendAngleDirection /** @link Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions@endlink  */,
                    NXOpen::Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions pathAdjustmentAngleDirection /** @link Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions@endlink  */,
                    int segmentIndex /** Index. */
                );
                /** Creates a new @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink  bend segment. This
                               can be either appended at the end, or inserted in between the list. This is decided by
                               the input index.  @return  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                NXOpen::Features::SheetMetal::FlexibleCableSegment * CreateBendSegment
                (
                    const char * bendAngle /** Bend angle. */,
                    const char * bendRadius /** Bend radius. */,
                    const char * pathAdjustmentAngle /** Path adjustment angle. */,
                    NXOpen::Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions bendAngleDirection /** @link Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions Features::SheetMetal::FlexibleCableBuilder::BendAngleDirectionOptions@endlink  */,
                    NXOpen::Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions pathAdjustmentAngleDirection /** @link Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions Features::SheetMetal::FlexibleCableBuilder::PathAdjustmentAngleDirectionOptions@endlink  */,
                    int segmentIndex /** Index. */
                );
                /** Get the count of @link Features::SheetMetal::FlexibleCableSegment Features::SheetMetal::FlexibleCableSegment@endlink .  @return  Segment count. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_flexible_pcb ("NX Flexible PCB") */
                public: int GetSegmentCount
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
