#ifndef NXOpen_CAE_NODALFORCEREPORTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_NODALFORCEREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_NodalForceReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class NodalForceReportBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    class CoordinateSystem;
    class Point;
    namespace CAE
    {
        class _NodalForceReportBuilderBuilder;
        class NodalForceReportBuilderImpl;
        /** Nodal Force Report Builder <br> An instance of this class can not be obtained  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  NodalForceReportBuilder : public NXOpen::Builder
        {
            /** Loadcase definition method*/
            public: enum LoadcaseSelection
            {
                LoadcaseSelectionFirst/** first */ ,
                LoadcaseSelectionLast/** last */ ,
                LoadcaseSelectionSpecifyIndex/** specify index */ ,
                LoadcaseSelectionAll/** all */ 
            };

            /** CSys type definition*/
            public: enum CSType
            {
                CSTypeGlobal/** global */ ,
                CSTypeCartesian/** cartesian */ ,
                CSTypeCylindrical/** cylindrical */ ,
                CSTypeSpherical/** spherical */ 
            };

            /** Force type definition*/
            public: enum Force
            {
                ForceGridPoint/** grid point */ ,
                ForceReaction/** reaction */ ,
                ForceMpc/** mpc */ ,
                ForceApplied/** applied */ ,
                ForceGlue/** glue */ ,
                ForceContact/** contact */ 
            };

            private: NodalForceReportBuilderImpl * m_nodalforcereportbuilder_impl;
            private: friend class  _NodalForceReportBuilderBuilder;
            protected: NodalForceReportBuilder();
            public: ~NodalForceReportBuilder();
            /**Returns  the nfr name 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXString NfrName
            (
            );
            /**Sets  the nfr name 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetNfrName
            (
                const NXString & nfrName /** nfrname */ 
            );
            /**Sets  the nfr name 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void SetNfrName
            (
                const char * nfrName /** nfrname */ 
            );
            /**Returns  the force type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodalForceReportBuilder::Force ForceType
            (
            );
            /**Sets  the force type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetForceType
            (
                NXOpen::CAE::NodalForceReportBuilder::Force forceType /** forcetype */ 
            );
            /**Returns  the grid point force 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool GridPointForce
            (
            );
            /**Sets  the grid point force 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGridPointForce
            (
                bool gridPointForce /** gridpointforce */ 
            );
            /**Returns  the grid point reaction force
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool GridPointReactionForce
            (
            );
            /**Sets  the grid point reaction force
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGridPointReactionForce
            (
                bool gridPointReactionForce /** gridpointreactionforce */ 
            );
            /**Returns  the grid point applied force 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool GridPointAppliedForce
            (
            );
            /**Sets  the grid point applied force 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGridPointAppliedForce
            (
                bool gridPointAppliedForce /** gridpointappliedforce */ 
            );
            /**Returns  the grid point reaction force mpc 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool GridPointReactionForceMPC
            (
            );
            /**Sets  the grid point reaction force mpc 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetGridPointReactionForceMPC
            (
                bool gridPointReactionForceMPC /** gridpointreactionforcempc */ 
            );
            /**Returns  the loadcase setting 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodalForceReportBuilder::LoadcaseSelection LoadCaseType
            (
            );
            /**Sets  the loadcase setting 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetLoadCaseType
            (
                NXOpen::CAE::NodalForceReportBuilder::LoadcaseSelection loadcaseSetting /** loadcasesetting */ 
            );
            /**Returns  the loadcase index 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: int LoadCaseIndex
            (
            );
            /**Sets  the loadcase index 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetLoadCaseIndex
            (
                int loadcaseIndex /** loadcaseindex */ 
            );
            /**Returns  the all elems 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool AllElems
            (
            );
            /**Sets  the all elems 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAllElems
            (
                bool allElems /** allelems */ 
            );
            /**Returns  the select elements 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * ElemRefs
            (
            );
            /**Returns  the all nodes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool AllNodes
            (
            );
            /**Sets  the all nodes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAllNodes
            (
                bool allNodes /** allnodes */ 
            );
            /**Returns  the select nodes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * NodeRefs
            (
            );
            /**Returns  the reference point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * RefPoint
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetRefPoint
            (
                NXOpen::Point * refPoint /** refpoint */ 
            );
            /**Returns  the csys type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodalForceReportBuilder::CSType CSysType
            (
            );
            /**Sets  the csys type 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetCSysType
            (
                NXOpen::CAE::NodalForceReportBuilder::CSType cSysType /** csystype */ 
            );
            /**Returns  the csys 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * Csys
            (
            );
            /**Sets  the csys 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetCsys
            (
                NXOpen::CoordinateSystem * csys /** csys */ 
            );
            /**Returns  the add all forces and moments 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool AddAllForcesAndMoments
            (
            );
            /**Sets  the add all forces and moments 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAddAllForcesAndMoments
            (
                bool addAllForcesAndMoments /** addallforcesandmoments */ 
            );
            /**Returns  the deformation 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool Deformation
            (
            );
            /**Sets  the deformation 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetDeformation
            (
                bool deformation /** deformation */ 
            );
            /**Returns  the calculate moment about a point option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool CalculateMomentAboutPoint
            (
            );
            /**Sets  the calculate moment about a point option 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetCalculateMomentAboutPoint
            (
                bool calculateMomentAboutPoint /** calculatemomentaboutpoint */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
