#ifndef NXOpen_CAE_DURSPECIALISTBLOCKLOADEVENTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTBLOCKLOADEVENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistBlockLoadEventBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurSpecialistEvent.hxx>
#include <NXOpen/CAE_DurSpecialistLoadLengthBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistBlockLoadEventBuilder;
    }
    class Builder;
    namespace CAE
    {
        class DurSpecialistLoadLengthBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _DurSpecialistBlockLoadEventBuilderBuilder;
        class DurSpecialistBlockLoadEventBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Represents a @link NXOpen::CAE::DurSpecialistBlockLoadEvent NXOpen::CAE::DurSpecialistBlockLoadEvent@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::CAE::DurSpecialistLoadProviderCollection::CreateBlockLoadEventBuilder  NXOpen::CAE::DurSpecialistLoadProviderCollection::CreateBlockLoadEventBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistBlockLoadEventBuilder : public NXOpen::Builder
        {
            /** Represents the pattern of the block load */
            public: enum PatternType
            {
                PatternTypeSwelling/** between 0 and value */,
                PatternTypeAlternating/** between value and -value */,
                PatternTypeFree/** between two values */
            };

            private: DurSpecialistBlockLoadEventBuilderImpl * m_durspecialistblockloadeventbuilder_impl;
            private: friend class  _DurSpecialistBlockLoadEventBuilderBuilder;
            protected: DurSpecialistBlockLoadEventBuilder();
            public: ~DurSpecialistBlockLoadEventBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the pattern. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistBlockLoadEventBuilder::PatternType Pattern
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the pattern. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetPattern
            (
                NXOpen::CAE::DurSpecialistBlockLoadEventBuilder::PatternType type /** type */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the upper value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpperValue
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the lower value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LowerValue
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the start with lower value flag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool StartWithLower
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the start with lower value flag. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetStartWithLower
            (
                bool startWithLower /** startwithlower */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the load length. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistLoadLengthBuilder * LoadLength
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the selection criterion for update. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistEvent::UpdateCriterionType ModeSelection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the selection criterion for update. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetModeSelection
            (
                NXOpen::CAE::DurSpecialistEvent::UpdateCriterionType type /** type */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
