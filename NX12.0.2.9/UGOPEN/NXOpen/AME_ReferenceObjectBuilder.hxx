#ifndef NXOpen_AME_REFERENCEOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_AME_REFERENCEOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ReferenceObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ReferenceObjectBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Part;
    class SelectNXObject;
    namespace AME
    {
        class _ReferenceObjectBuilderBuilder;
        class ReferenceObjectBuilderImpl;
        /** Re-usable UI consist of a context and source selection 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ReferenceObjectBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** possible choices for source object selection */
            public: enum SourceSelectionType
            {
                SourceSelectionTypeContextObject/** context object */ ,
                SourceSelectionTypeSelectObject/** select object */ ,
                SourceSelectionTypeDetermineByExpression/** determine by expression */ 
            };

            private: ReferenceObjectBuilderImpl * m_referenceobjectbuilder_impl;
            private: friend class  _ReferenceObjectBuilderBuilder;
            protected: ReferenceObjectBuilder();
            public: ~ReferenceObjectBuilder();
            /**Returns  the selection for the object where the evaluator will be stored. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObject * ContextObject
            (
            );
            /**Returns  the selection type for the source object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ReferenceObjectBuilder::SourceSelectionType SourceTypeSelection
            (
            );
            /**Sets  the selection type for the source object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSourceTypeSelection
            (
                NXOpen::AME::ReferenceObjectBuilder::SourceSelectionType typeSelection /** typeselection */ 
            );
            /**Returns  the selection for the object where the evaluation will start. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObject * SourceObject
            (
            );
            /** Gets the source expression part.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Part * GetSourceExpressionPart
            (
            );
            /**Returns  the expression that will determine the source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Expression * SourceExpression
            (
            );
            /**Sets  the expression that will determine the source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSourceExpression
            (
                NXOpen::Expression * sourceExpression /** sourceexpression */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
