#ifndef NXOpen_WELD_JOINTITEMBUILDER_HXX_INCLUDED
#define NXOpen_WELD_JOINTITEMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_JointItemBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class JointItemBuilder;
    }
    class Curve;
    namespace Die
    {
        class DieLimitsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Routing
    {
        class SelectPort;
    }
    class ScCollector;
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    namespace Weld
    {
        class EdgePrepValuesBuilder;
    }
    namespace Weld
    {
        class _JointItemBuilderBuilder;
        class JointItemBuilderImpl;
        /** Used to create or edit a @link Weld::WeldJoint Weld::WeldJoint@endlink  feature.  <br> To create a new instance of this class, use @link NXOpen::Weld::WeldJointBuilder::NewItem  NXOpen::Weld::WeldJointBuilder::NewItem @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  JointItemBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: JointItemBuilderImpl * m_jointitembuilder_impl;
            private: friend class  _JointItemBuilderBuilder;
            protected: JointItemBuilder();
            public: ~JointItemBuilder();
            /**Returns  the collection of welding characteristics defined by attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsBuilder * WeldingCharacteristics
            (
            );
            /**Returns  the master edge of a T-joint weld. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MasterEdge
            (
            );
            /**Returns  the placement face of a T-joint weld. For example, on a profile it is the face that touches the plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PlacementFace
            (
            );
            /**Returns  the target face of a T-joint weld.  For example, the plate face that the profile lies on. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetFace
            (
            );
            /**Returns  the primary face of a butt weld. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PrimaryFace
            (
            );
            /**Returns  the backing face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BackingFace
            (
            );
            /**Returns  the secondary face of a butt weld. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondaryFace
            (
            );
            /**Returns  the primary edge of a butt weld. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PrimaryEdge
            (
            );
            /**Returns  the secondary edge of a butt weld. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondaryEdge
            (
            );
            /**Returns  the limits of the joint curve span. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * Limits
            (
            );
            /** Deletes the joint curve from the builder. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteCurve
            (
            );
            /**Returns  the indication to use the values of the callback to define the joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCallbackValues
            (
            );
            /**Sets  the indication to use the values of the callback to define the joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetUseCallbackValues
            (
                bool status /** status */ 
            );
            /** Read edge prep values set by the user plugin function.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::EdgePrepValuesBuilder * ReadEdgePrepValues
            (
            );
            /** Save edge prep values to the Welding Joint. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SaveEdgePrepValues
            (
                NXOpen::Weld::EdgePrepValuesBuilder * valuesBuilder /** valuesbuilder */ 
            );
            /**Returns  the weld type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int WeldType
            (
            );
            /**Sets  the weld type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetWeldType
            (
                int type /** type */ 
            );
            /**Returns  the joint curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * Curve
            (
            );
            /**Returns  the routing port. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Routing::SelectPort * RoutingObject
            (
            );
            /** Returns the engagement distance of the parent port of the pipe joint  @return  Engagement distance 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double GetPortEngagement
            (
            );
            /** Sets a message to display after callback processing ends 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetCallbackMessage
            (
                const NXString & message /** Message to display to user */
            );
            /** Sets a message to display after callback processing ends 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            void SetCallbackMessage
            (
                const char * message /** Message to display to user */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
