#ifndef NXOpen_DRAFTING_PRIMARYCONTENTITEMBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_PRIMARYCONTENTITEMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_PrimaryContentItemBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_drafting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drafting
    {
        class PrimaryContentItemBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drafting
    {
        class _PrimaryContentItemBuilderBuilder;
        class PrimaryContentItemBuilderImpl;
        /**
            Represents a @link NXOpen::Drafting::PrimaryContentItemBuilder NXOpen::Drafting::PrimaryContentItemBuilder@endlink .  This class is
            used to specify information pertaining to the primary content of a Drawing Booklet.
            Each instance represents a single drawing in a booklet.
             <br> To create a new instance of this class, use @link NXOpen::Drafting::AutomationManager::CreatePrimaryContentItemBuilder  NXOpen::Drafting::AutomationManager::CreatePrimaryContentItemBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAFTINGEXPORT  PrimaryContentItemBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PrimaryContentItemBuilderImpl * m_primarycontentitembuilder_impl;
            private: friend class  _PrimaryContentItemBuilderBuilder;
            protected: PrimaryContentItemBuilder();
            public: ~PrimaryContentItemBuilder();
            /**Returns  the content. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * Content
            (
            );
            /**Returns  the geometry template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GeometryTemplate
            (
            );
            /**Sets  the geometry template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            public: void SetGeometryTemplate
            (
                const NXString & geometryTemplate /** geometrytemplate */ 
            );
            /**Sets  the geometry template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            void SetGeometryTemplate
            (
                const char * geometryTemplate /** geometrytemplate */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
