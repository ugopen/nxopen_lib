#ifndef NXOpen_MOTION_PACKAGINGINTERFERENCEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_PACKAGINGINTERFERENCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PackagingInterferenceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_PackagingBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PackagingInterferenceBuilder;
    }
    class DisplayableObject;
    class Expression;
    namespace Motion
    {
        class PackagingBuilder;
    }
    namespace Motion
    {
        class _PackagingInterferenceBuilderBuilder;
        class PackagingInterferenceBuilderImpl;
        /** This the builder class to create or edit an Interference object. <br> To create a new instance of this class, use @link NXOpen::Motion::PackagingCollection::CreateInterferenceBuilder  NXOpen::Motion::PackagingCollection::CreateInterferenceBuilder @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PackagingInterferenceBuilder : public NXOpen::Motion::PackagingBuilder
        {
            /** Interference action type */
            public: enum Action
            {
                ActionHighlight/** Highlight interfering bodies. */,
                ActionCreateSolids/** Create solids of interference volumes. */,
                ActionShowIntersectionCurve/** Show intersection curve of interference volumes */
            };

            /** Interference calculation mode type */
            public: enum Mode
            {
                ModeFaceted/** Interference calculated by Faceted method.
                                                                                  Faceted is only allowed for action type of
                                                                                  @link  NXOpen::Motion::PackagingInterferenceBuilder::ActionCreateSolids   NXOpen::Motion::PackagingInterferenceBuilder::ActionCreateSolids @endlink . */,
                ModePreciseSolid/** Interference calculated by Precise Solid method. */
            };

            /** Interference solid reference frame type.  Only used for action type
                    of @link  NXOpen::Motion::PackagingInterferenceBuilder::ActionCreateSolids   NXOpen::Motion::PackagingInterferenceBuilder::ActionCreateSolids @endlink . */
            public: enum Frame
            {
                FrameAbsolute/** Interference solids positioned in absolute 
                                                                                  coordinate system. */,
                FrameFirstSet/** Interference solids positioned relative to 
                                                                                  interfering links in first set. */,
                FrameSecondSet/** Interference solids positioned relative to
                                                                                  interfering links in second set. */,
                FrameBothSets/** Interference solids positioned relative to
                                                                                  interfering links in both sets. */,
                FrameSelected/** Interference solids positioned relative to
                                                                                  user selected links. */
            };

            private: PackagingInterferenceBuilderImpl * m_packaginginterferencebuilder_impl;
            private: friend class  _PackagingInterferenceBuilderBuilder;
            protected: PackagingInterferenceBuilder();
            public: ~PackagingInterferenceBuilder();
            /** Gets the geometry list 2 of @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  object.
                    Interference can have one or two lists defined.  If the user
                    defines two lists, then interference checks will be done
                    between each object in list 1 against each object in list 2.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::DisplayableObject *> GetList2
            (
            );
            /** Sets the geometry list 2 of @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetList2
            (
                const std::vector<NXOpen::DisplayableObject *> & list2 /** list2 */ 
            );
            /**Returns  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  action type defined
                    at @link  NXOpen::Motion::PackagingInterferenceBuilder::Action   NXOpen::Motion::PackagingInterferenceBuilder::Action @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Action ActionType
            (
            );
            /**Sets  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  action type defined
                    at @link  NXOpen::Motion::PackagingInterferenceBuilder::Action   NXOpen::Motion::PackagingInterferenceBuilder::Action @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Action aType /** a type */ 
            );
            /**Returns  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  mode type defined
                    at @link  NXOpen::Motion::PackagingInterferenceBuilder::Mode   NXOpen::Motion::PackagingInterferenceBuilder::Mode @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Mode ModeType
            (
            );
            /**Sets  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  mode type defined
                    at @link  NXOpen::Motion::PackagingInterferenceBuilder::Mode   NXOpen::Motion::PackagingInterferenceBuilder::Mode @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetModeType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Mode mType /** m type */ 
            );
            /**Returns  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  frame type
                    defined at @link  NXOpen::Motion::PackagingInterferenceBuilder::Frame   NXOpen::Motion::PackagingInterferenceBuilder::Frame @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingInterferenceBuilder::Frame FrameType
            (
            );
            /**Sets  the @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  frame type
                    defined at @link  NXOpen::Motion::PackagingInterferenceBuilder::Frame   NXOpen::Motion::PackagingInterferenceBuilder::Frame @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrameType
            (
                NXOpen::Motion::PackagingInterferenceBuilder::Frame fType /** f type */ 
            );
            /** Returns @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  user selected relative links.
                    Only available when frame type is @link  NXOpen::Motion::PackagingInterferenceBuilder::FrameSelected   NXOpen::Motion::PackagingInterferenceBuilder::FrameSelected @endlink .  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::DisplayableObject *> GetRelativeLinks
            (
            );
            /** Sets @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  user selected relative links.
                    Only used when frame type is @link  NXOpen::Motion::PackagingInterferenceBuilder::FrameSelected   NXOpen::Motion::PackagingInterferenceBuilder::FrameSelected @endlink . 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRelativeLinks
            (
                const std::vector<NXOpen::DisplayableObject *> & links /** links */ 
            );
            /**Returns  the Stop_On_Event flag of @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StopOnEvent
            (
            );
            /**Sets  the Stop_On_Event flag of @link  NXOpen::Motion::PackagingInterference   NXOpen::Motion::PackagingInterference @endlink  object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStopOnEvent
            (
                bool stopOnEvent /** stop on event */ 
            );
            /**Returns  the clearance expression value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ClearanceExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
