#ifndef NXOpen_FEATURES_VEHICLEDESIGN_CLOSERANGEVISIBILITYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_CLOSERANGEVISIBILITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_CloseRangeVisibilityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_VehicleDesign_CloseRangeCameraListItemBuilder.hxx>
#include <NXOpen/Features_VehicleDesign_CloseRangeDemoCylinderListItemBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class CloseRangeVisibilityBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class CloseRangeCameraListItemBuilder;
        }
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class CloseRangeCameraListItemBuilderList;
        }
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class CloseRangeDemoCylinderListItemBuilder;
        }
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class CloseRangeDemoCylinderListItemBuilderList;
        }
    }
    class Point;
    class ScCollector;
    class Section;
    class SelectNXObjectList;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _CloseRangeVisibilityBuilderBuilder;
            class CloseRangeVisibilityBuilderImpl;
            /**
                The builder to create close range visibility feature.
                 <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateCloseRangeVisibilityBuilder  NXOpen::Features::VehicleDesignCollection::CreateCloseRangeVisibilityBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            CylinderHeight.Value </td> <td> 
             
            1000 (millimeters part), 40 (inches part) </td> </tr> 

            <tr><td> 
             
            CylinderRadius.Value </td> <td> 
             
            150 (millimeters part), 6 (inches part) </td> </tr> 

            <tr><td> 
             
            DistanceFromVehicle.Value </td> <td> 
             
            2000 (millimeters part), 78.7 (inches part) </td> </tr> 

            <tr><td> 
             
            DriverSideExtension.Value </td> <td> 
             
            700 (millimeters part), 27.5 (inches part) </td> </tr> 

            <tr><td> 
             
            EyePointOffsetType </td> <td> 
             
            NoOffset </td> </tr> 

            <tr><td> 
             
            EyePointType </td> <td> 
             
            Binocular </td> </tr> 

            <tr><td> 
             
            K1Coefficient.Value </td> <td> 
             
            0.292 </td> </tr> 

            <tr><td> 
             
            K2Coefficient.Value </td> <td> 
             
            203 (millimeters part), 7.99 (inches part) </td> </tr> 

            <tr><td> 
             
            MirrorRotationYAngle.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            MirrorRotationZAngle.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            PassengerSideExtension.Value </td> <td> 
             
            900 (millimeters part), 35.4 (inches part) </td> </tr> 

            <tr><td> 
             
            PathPositionType </td> <td> 
             
            Both </td> </tr> 

            <tr><td> 
             
            PositionMethod </td> <td> 
             
            TangentArea </td> </tr> 

            <tr><td> 
             
            PositionPath </td> <td> 
             
            BaseData </td> </tr> 

            <tr><td> 
             
            RequirementsControl </td> <td> 
             
            StandardDriven </td> </tr> 

            <tr><td> 
             
            RotateMirrorFace </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowBlindVolume </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowExtendedEyes </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowEyeLabels </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowEyePoints </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowPath </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowPathPoints </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowSightRays </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ShowTorsoLine </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            StepValue </td> <td> 
             
            0.5 </td> </tr> 

            <tr><td> 
             
            UseMirror </td> <td> 
             
            0 </td> </tr> 

            </table>  

             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  CloseRangeVisibilityBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** This enum represents the standard or user defined requirement options. */
                public: enum RequirementsControlType
                {
                    RequirementsControlTypeStandardDriven/** Standard driven type */,
                    RequirementsControlTypeUserDefined/** User defined type */
                };

                /** This enum represents the binocular or monocular eye position definition options. */
                public: enum EyePointTypes
                {
                    EyePointTypesBinocular/** Binocular type */,
                    EyePointTypesMonocular/** Monocular type */
                };

                /** This enum represents the eye position offset options. */
                public: enum EyePointOffsetTypes
                {
                    EyePointOffsetTypesNoOffset/** No offset */,
                    EyePointOffsetTypesAllOffsets/** All offsets */,
                    EyePointOffsetTypesForwardOffset/** Forward offset */,
                    EyePointOffsetTypesSidewaysOffset/** Sideways offset */,
                    EyePointOffsetTypesUpwardOffset/** Upward offset */
                };

                /** This enum represents the cylinder position path options. */
                public: enum PositionPaths
                {
                    PositionPathsBaseData/** Base data */,
                    PositionPathsVehicleObject/** Vehicle object */
                };

                /** This enum represents the cylinder position method options. */
                public: enum PositionMethods
                {
                    PositionMethodsTangentArea/** Tangent Area */,
                    PositionMethodsVehicleContact/** Vehicle contact */,
                    PositionMethodsFrontView/** Front view */
                };

                /** This enum represents the cylinder path position display options. */
                public: enum PathPositionTypes
                {
                    PathPositionTypesBoth/** Both top and bottom */,
                    PathPositionTypesTop/** Top */,
                    PathPositionTypesBottom/** Bottom */
                };

                private: CloseRangeVisibilityBuilderImpl * m_closerangevisibilitybuilder_impl;
                private: friend class  _CloseRangeVisibilityBuilderBuilder;
                protected: CloseRangeVisibilityBuilder();
                public: ~CloseRangeVisibilityBuilder();
                /**Returns  the requirements control types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::RequirementsControlType RequirementsControl
                (
                );
                /**Sets  the requirements control types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRequirementsControl
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::RequirementsControlType requirement /** requirement */ 
                );
                /**Returns  the standard types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString Standard
                (
                );
                /**Sets  the standard types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetStandard
                (
                    const NXString & standard /** standard */ 
                );
                /**Sets  the standard types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetStandard
                (
                    const char * standard /** standard */ 
                );
                /**Returns  the loading used in the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString Loading
                (
                );
                /**Sets  the loading used in the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLoading
                (
                    const NXString & loading /** loading */ 
                );
                /**Sets  the loading used in the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetLoading
                (
                    const char * loading /** loading */ 
                );
                /**Returns  the eye point types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::EyePointTypes EyePointType
                (
                );
                /**Sets  the eye point types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyePointType
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::EyePointTypes eyePointType /** eyepointtype */ 
                );
                /**Returns  the eye point offset types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::EyePointOffsetTypes EyePointOffsetType
                (
                );
                /**Sets  the eye point offset types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyePointOffsetType
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::EyePointOffsetTypes eyePointOffsetType /** eyepointoffsettype */ 
                );
                /**Returns  the indication if torso line will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowTorsoLine
                (
                );
                /**Sets  the indication if torso line will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowTorsoLine
                (
                    bool showTorsoLine /** showtorsoline */ 
                );
                /**Returns  the indication if eye points will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowEyePoints
                (
                );
                /**Sets  the indication if eye points will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowEyePoints
                (
                    bool showEyePoints /** showeyepoints */ 
                );
                /**Returns  the indication if eye labels will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowEyeLabels
                (
                );
                /**Sets  the indication if eye labels will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowEyeLabels
                (
                    bool showEyeLabels /** showeyelabels */ 
                );
                /**Returns  the indication if extended eyes will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowExtendedEyes
                (
                );
                /**Sets  the indication if extended eyes will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowExtendedEyes
                (
                    bool showExtendedEyes /** showextendedeyes */ 
                );
                /**Returns  the faces selection used to identify the vehicle window surfaces. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * WindowFaces
                (
                );
                /**Returns  the faces selection used to identify the vehicle window facet bodies. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * WindowFacetBodies
                (
                );
                /**Returns  the faces selection used to identify the vehicle obstruction surfaces. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * ObstructionFaces
                (
                );
                /**Returns  the faces selection used to identify the vehicle obstruction facet bodies. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * ObstructionFacetBodies
                (
                );
                /**Returns  the indication if the mirror will be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool UseMirror
                (
                );
                /**Sets  the indication if the mirror will be used. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseMirror
                (
                    bool useMirror /** usemirror */ 
                );
                /**Returns  the faces selection used to identify the mirror surfaces. Only valid when use mirror is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * MirrorFaces
                (
                );
                /**Returns  the facet selection used to identify the mirror facet bodies. Only valid when use mirror is checked. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * MirrorFacetBodies
                (
                );
                /**Returns  the curves selection used to identify the mirror boundary section. Only valid when use mirror is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Section * MirrorBoundary
                (
                );
                /**Returns  the indication if the mirror face will be rotated. Only valid when use mirror is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool RotateMirrorFace
                (
                );
                /**Sets  the indication if the mirror face will be rotated. Only valid when use mirror is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRotateMirrorFace
                (
                    bool rotateMirrorFace /** rotatemirrorface */ 
                );
                /**Returns  the mirror rotation point specified. Only valid when rotate mirror face is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * MirrorRotationPoint
                (
                );
                /**Sets  the mirror rotation point specified. Only valid when rotate mirror face is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetMirrorRotationPoint
                (
                    NXOpen::Point * mirrorRotationPoint /** mirrorrotationpoint */ 
                );
                /**Returns  the mirror rotation angle around vehicle Z axis. Only valid when rotate mirror face is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MirrorRotationZAngle
                (
                );
                /**Returns  the mirror rotation angle around vehicle Y axis after Z axis. Only valid when rotate mirror face is checked. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MirrorRotationYAngle
                (
                );
                /**Returns  the position path types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PositionPaths PositionPath
                (
                );
                /**Sets  the position path types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPositionPath
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PositionPaths positionPath /** positionpath */ 
                );
                /**Returns  the position method types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PositionMethods PositionMethod
                (
                );
                /**Sets  the position method types to define the close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPositionMethod
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PositionMethods positionMethod /** positionmethod */ 
                );
                /**Returns  the list of @link NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilder NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilder@endlink  defining the camera parameters. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilderList * CameraList
                (
                );
                /**Returns  the bodies selection used to identify vehicle bodies. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * VehicleBodies
                (
                );
                /**Returns  the bodies selection used to identify vehicle facet bodies. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectNXObjectList * VehicleFacetBodies
                (
                );
                /**Returns  the expression containing the value for the driver side extension. Only valid when position method equals to front view type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * DriverSideExtension
                (
                );
                /**Returns  the expression containing the value for the distance from vehicle. Only valid when position method equals to front view type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * DistanceFromVehicle
                (
                );
                /**Returns  the expression containing the value for the passenger side extension. Only valid when position method equals to front view type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * PassengerSideExtension
                (
                );
                /**Returns  the expression containing the value for the cylinder radius. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * CylinderRadius
                (
                );
                /**Returns  the expression containing the value for the cylinder height. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * CylinderHeight
                (
                );
                /**Returns  the step value to control the accurate for demo cylinder visibility and blind volume area calculation. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: double StepValue
                (
                );
                /**Sets  the step value to control the accurate for demo cylinder visibility and blind volume area calculation. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetStepValue
                (
                    double stepValue /** stepvalue */ 
                );
                /**Returns  the list of @link NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilder NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilder@endlink  defining the demo cylinder parameters. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilderList * DemoCylinderList
                (
                );
                /**Returns  the expression containing the value for the k2 coefficient used in blind volume checking. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * K2Coefficient
                (
                );
                /**Returns  the expression containing the value for the k1 coefficient used in blind volume checking. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * K1Coefficient
                (
                );
                /** Validate blind volume area from driver side view. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void ValidateBlindVolumes
                (
                );
                /**Returns  the indication if blind volume will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowBlindVolume
                (
                );
                /**Sets  the indication if blind volume will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowBlindVolume
                (
                    bool showBlindVolume /** showblindvolume */ 
                );
                /**Returns  the indication if blind volume sight rays will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowSightRays
                (
                );
                /**Sets  the indication if blind volume sight rays will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowSightRays
                (
                    bool showSightRays /** showsightrays */ 
                );
                /**Returns  the indication if demo cylinder path will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowPath
                (
                );
                /**Sets  the indication if demo cylinder path will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowPath
                (
                    bool showPath /** showpath */ 
                );
                /**Returns  the path position types used to define close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PathPositionTypes PathPositionType
                (
                );
                /**Sets  the path position types used to define close range visibility. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPathPositionType
                (
                    NXOpen::Features::VehicleDesign::CloseRangeVisibilityBuilder::PathPositionTypes pathPositionType /** pathpositiontype */ 
                );
                /**Returns  the indication if demo cylinder point position on path will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowPathPoints
                (
                );
                /**Sets  the indication if demo cylinder point position on path will be displayed. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowPathPoints
                (
                    bool showPathPoints /** showpathpoints */ 
                );
                /** Creates a @link NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilder NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilder@endlink   @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: NXOpen::Features::VehicleDesign::CloseRangeCameraListItemBuilder * CreateCameraListItemBuilder
                (
                );
                /** Creates a @link NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilder NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilder@endlink   @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: NXOpen::Features::VehicleDesign::CloseRangeDemoCylinderListItemBuilder * CreateDemoCylinderListItemBuilder
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
