#ifndef NXOpen_FEATURES_LATTICEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_LATTICEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_LatticeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class LatticeBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class Section;
    class SelectBodyList;
    class SelectDisplayableObjectList;
    class SelectFaceList;
    namespace Features
    {
        class _LatticeBuilderBuilder;
        class LatticeBuilderImpl;
        /**Represents a Features.Lattice builder <br> To create a new instance of this class, use @link NXOpen::Features::LatticeFeatureCollection::CreateLatticeBuilder  NXOpen::Features::LatticeFeatureCollection::CreateLatticeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CellTypeName </td> <td> 
         
        BiTriangle </td> </tr> 

        <tr><td> 
         
        EdgeLength.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        IsRandom </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsUniformCube </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LatticeType </td> <td> 
         
        UnitGraph </td> </tr> 

        <tr><td> 
         
        LatticeVersion </td> <td> 
         
        V1 </td> </tr> 

        <tr><td> 
         
        Layers </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MaxDeviation.Value </td> <td> 
         
        0.5 (millimeters part), 0.02 (inches part) </td> </tr> 

        <tr><td> 
         
        MaxEdgeLength.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        Offset.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Parameterization </td> <td> 
         
        Automatic </td> </tr> 

        <tr><td> 
         
        RemoveDanglingRods </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RemoveDisconnectedRods </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ReverseFaceDirection </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RodDiameter.Value </td> <td> 
         
        1 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeX.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeY.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeZ.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        TessellationFactor </td> <td> 
         
        0.5 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.2.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  LatticeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** @brief This enum represents the lattice types that are supported in NX. 

              
                       
                       SurfaceGraph and TetrahedronGraph are not currently supported.
                       */
            public: enum LatticeTypes
            {
                LatticeTypesUnitGraph/** unit graph */ ,
                LatticeTypesSurfaceGraph/** surface graph */ ,
                LatticeTypesTetrahedronGraph/** tetrahedron graph */ ,
                LatticeTypesConformalGraph/** conformal graph */ 
            };

            /** @brief This enum represents the parameterization types that are supported in conformal lattice. 

              */
            public: enum ParameterizationType
            {
                ParameterizationTypeAutomatic/** automatic */ ,
                ParameterizationTypePlanar/** planar */ ,
                ParameterizationTypeContour/** contour */ ,
                ParameterizationTypeCylindrical/** cylindrical */ 
            };

            /** @brief This enum represents the version of lattice behavior. 

              
                         
                        By setting this to V1, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX12.0.1.
                        */
            public: enum Version
            {
                VersionV1/** v1 */ ,
                VersionV2/** v2 */ 
            };

            private: LatticeBuilderImpl * m_latticebuilder_impl;
            private: friend class  _LatticeBuilderBuilder;
            protected: LatticeBuilder();
            public: ~LatticeBuilder();
            /**Returns  @brief the type of lattice that is going to be created. 

              
                       
                       For now, the only supported lattice types are: @link NXOpen::Features::LatticeBuilder::LatticeTypesUnitGraph NXOpen::Features::LatticeBuilder::LatticeTypesUnitGraph@endlink 
                       and @link NXOpen::Features::LatticeBuilder::LatticeTypesConformalGraph NXOpen::Features::LatticeBuilder::LatticeTypesConformalGraph@endlink .
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LatticeBuilder::LatticeTypes LatticeType
            (
            );
            /**Sets  @brief the type of lattice that is going to be created. 

              
                       
                       For now, the only supported lattice types are: @link NXOpen::Features::LatticeBuilder::LatticeTypesUnitGraph NXOpen::Features::LatticeBuilder::LatticeTypesUnitGraph@endlink 
                       and @link NXOpen::Features::LatticeBuilder::LatticeTypesConformalGraph NXOpen::Features::LatticeBuilder::LatticeTypesConformalGraph@endlink .
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLatticeType
            (
                NXOpen::Features::LatticeBuilder::LatticeTypes latticeType /** latticetype */ 
            );
            /**Returns the geometry that defines the boundary for conformal lattice type. This can be faces or sheet bodies.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * BaseFace
            (
            );
            /**Returns whether the conformal lattice will be generated on the other side of the face
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseFaceDirection
            (
            );
            /**Sets whether the conformal lattice will be generated on the other side of the face
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetReverseFaceDirection
            (
                bool reverseFaceDir /** reversefacedir */ 
            );
            /**Returns the solid bodies that define the boundary for unit lattice type.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * BoundaryBody
            (
            );
            /**Returns  @brief the name of the unit cell type. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXString CellTypeName
            (
            );
            /**Sets  @brief the name of the unit cell type. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetCellTypeName
            (
                const NXString & cellTypeName /** celltypename */ 
            );
            /**Sets  @brief the name of the unit cell type. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            void SetCellTypeName
            (
                const char * cellTypeName /** celltypename */ 
            );
            /**Returns whether the unit cell bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsUniformCube
            (
            );
            /**Sets whether the unit cell bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetUniformCube
            (
                bool uniformCube /** uniformcube */ 
            );
            /**Returns  the edge length of the unit cell bounding box, 
                         and effective only when the bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EdgeLength
            (
            );
            /**Returns the size of the unit cell bounding box in x axis, 
                         and effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeX
            (
            );
            /**Returns the size of the unit cell bounding box in y axis, 
                         and effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeY
            (
            );
            /**Returns  the size of the unit cell bounding box in z axis, 
                         and effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeZ
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns the maximum edge length used for re-meshing, to determine the redefinition size for the input triangle mesh
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxEdgeLength
            (
            );

            /// \endcond 
            /**Returns   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::LatticeBuilder::MaxDeviation Features::LatticeBuilder::MaxDeviation@endlink .
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsRandom
            (
            );
            /**Sets   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::LatticeBuilder::MaxDeviation Features::LatticeBuilder::MaxDeviation@endlink .
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRandom
            (
                bool random /** random */ 
            );
            /**Returns   @brief the maximum deviation that the vertices of the lattice graph will have. 

             
                         
                        The bigger the value of this property is, the more obvious bumps the lattice body will generate.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxDeviation
            (
            );
            /**Returns   @brief the number of unit cell layers stacked over each other. 

             
                         
                        The default is one layer only.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int Layers
            (
            );
            /**Sets   @brief the number of unit cell layers stacked over each other. 

             
                         
                        The default is one layer only.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLayers
            (
                int layers /** layers */ 
            );
            /**Returns   @brief the offset of the conformal lattice from the base face. 

             
                          
                         A negative offset will let the conformal lattice intersect with the base face ("into material").
                         A positive offset will move the conformal lattice away from the base face( "away from material"). 
                         Using a negative offset can ensure that the final lattice body will intersect with the base face, 
                         if that is required. The default offset is zero. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the diameter/thickness of the rods in the lattice graph
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RodDiameter
            (
            );
            /**Returns   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance, the tessellation factor is only a unitless factor. The actual tessellation tolerance 
                        will determined by 
                        (@link Features::LatticeBuilder::TessellationFactor Features::LatticeBuilder::TessellationFactor @endlink and @link Features::LatticeBuilder::SetTessellationFactor Features::LatticeBuilder::SetTessellationFactor @endlink ) X (@link Features::LatticeBuilder::RodDiameter Features::LatticeBuilder::RodDiameter@endlink )  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: double TessellationFactor
            (
            );
            /**Sets   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance, the tessellation factor is only a unitless factor. The actual tessellation tolerance 
                        will determined by 
                        (@link Features::LatticeBuilder::TessellationFactor Features::LatticeBuilder::TessellationFactor @endlink and @link Features::LatticeBuilder::SetTessellationFactor Features::LatticeBuilder::SetTessellationFactor @endlink ) X (@link Features::LatticeBuilder::RodDiameter Features::LatticeBuilder::RodDiameter@endlink )  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetTessellationFactor
            (
                double factor /** factor */ 
            );
            /**Returns  the origin where the unit cell patterning starts in the lattice creation
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d Origin
            (
            );
            /**Sets  the origin where the unit cell patterning starts in the lattice creation
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /**Returns   @brief the orientation matrix of unit cell patterning in the lattice creation.  

              
                        
                        The orientation matrix is defined relative to the WCS. 
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 Orientation
            (
            );
            /**Sets   @brief the orientation matrix of unit cell patterning in the lattice creation.  

              
                        
                        The orientation matrix is defined relative to the WCS. 
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & orientMtx /** orientmtx */ 
            );
            /**Returns   @brief whether to remove small disconnected lattice portions keeping just the largest body.  

             
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveDisconnectedRods
            (
            );
            /**Sets   @brief whether to remove small disconnected lattice portions keeping just the largest body.  

             
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRemoveDisconnectedRods
            (
                bool remove /** remove */ 
            );
            /**Returns   @brief whether to remove dangling rods from the lattice body. 
                        
                        The dangling rods are defined as the following: 
                        <ul>
                        <li>Connects at only one end to the lattice body</li> 
                        <li>Touches or intersects a face of the boundary body </li>
                        </ul>
                        The faces are (@link Features::LatticeBuilder::FilterToolFace Features::LatticeBuilder::FilterToolFace@endlink )
                        
                         

             
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveDanglingRods
            (
            );
            /**Sets   @brief whether to remove dangling rods from the lattice body. 
                        
                        The dangling rods are defined as the following: 
                        <ul>
                        <li>Connects at only one end to the lattice body</li> 
                        <li>Touches or intersects a face of the boundary body </li>
                        </ul>
                        The faces are (@link Features::LatticeBuilder::FilterToolFace Features::LatticeBuilder::FilterToolFace@endlink )
                        
                         

             
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRemoveDanglingRods
            (
                bool remove /** remove */ 
            );
            /**Returns the faces of the boundary body that the dangling rods connected to will be removed from the lattice body
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * FilterToolFace
            (
            );
            /**Returns  the UV mapping parameterization
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LatticeBuilder::ParameterizationType Parameterization
            (
            );
            /**Sets  the UV mapping parameterization
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetParameterization
            (
                NXOpen::Features::LatticeBuilder::ParameterizationType parameterization /** parameterization */ 
            );
            /**Returns  the orientation point1 of planar UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * OrientationPoint1
            (
            );
            /**Sets  the orientation point1 of planar UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientationPoint1
            (
                NXOpen::Point * orientationPoint1 /** orientationpoint1 */ 
            );
            /**Returns  the orientation point2 of planar UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * OrientationPoint2
            (
            );
            /**Sets  the orientation point2 of planar UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientationPoint2
            (
                NXOpen::Point * orientationPoint2 /** orientationpoint2 */ 
            );
            /**Returns  the split curve of cylindrical UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SplitCurve
            (
            );
            /**Returns  the contour point1 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint1
            (
            );
            /**Sets  the contour point1 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint1
            (
                NXOpen::Point * contourPt1 /** contourpt1 */ 
            );
            /**Returns  the contour point2 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint2
            (
            );
            /**Sets  the contour point2 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint2
            (
                NXOpen::Point * contourPt2 /** contourpt2 */ 
            );
            /**Returns  the contour point3 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint3
            (
            );
            /**Sets  the contour point3 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint3
            (
                NXOpen::Point * contourPt3 /** contourpt3 */ 
            );
            /**Returns  the contour point4 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint4
            (
            );
            /**Sets  the contour point4 of contour UV mapping
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint4
            (
                NXOpen::Point * contourPt4 /** contourpt4 */ 
            );
            /**Returns   @brief the lattice behavior version number 

             
                         
                        The default is V1. By setting this to default value, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX12.0.1. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LatticeBuilder::Version LatticeVersion
            (
            );
            /**Sets   @brief the lattice behavior version number 

             
                         
                        The default is V1. By setting this to default value, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX12.0.1. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLatticeVersion
            (
                NXOpen::Features::LatticeBuilder::Version version /** version */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
