#ifndef NXOpen_TOOLING_SIZEREXPORTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SIZEREXPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SIZERExportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SIZERExportBuilder;
    }
    class Builder;
    namespace Mechatronics
    {
        class PhysicsConstraint;
    }
    namespace Motion
    {
        class Graph;
    }
    namespace Motion
    {
        class MotionSolution;
    }
    namespace Tooling
    {
        class _SIZERExportBuilderBuilder;
        class SIZERExportBuilderImpl;
        /** Exports input parameters for motor selection to SIZER drive design to
                support the sizing, configuration, and selection of drive components.  <br> To create a new instance of this class, use @link NXOpen::Tooling::SIZERCollection::CreateExportBuilder  NXOpen::Tooling::SIZERCollection::CreateExportBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SIZERExportBuilder : public NXOpen::Builder
        {
            /** Represents the run mode. */
            public: enum RunMode
            {
                RunModeNone/** None Mode   */,
                RunModeMotion/** Motion Mode */,
                RunModeMcd/** MCD Mode    */
            };

             /** Defines the mechanical data in Motion mode. */
            public:
            struct MechanicalData
            {
                public: /** Unique ID                */int Id;
                public: /** Mechanical Name          */NXString Name;
                public: /** Motion solution          */NXOpen::Motion::MotionSolution * Solution;
                public: /** Torque graph in solution */NXOpen::Motion::Graph * TorqueGraph;
                public: /** Speed graph in solution  */NXOpen::Motion::Graph * SpeedGraph;
                public: /** Friction Torque value    */double FrictionTorque;
                public: /** System Efficiency value  */double SystemEfficiency;
                public: /** Load Inertia value       */double LoadInertia;
                public: /** Additional Inertia value */double AdditionalInertia;
                public: MechanicalData() :
                    Id(),
                    Name(),
                    Solution(),
                    TorqueGraph(),
                    SpeedGraph(),
                    FrictionTorque(),
                    SystemEfficiency(),
                    LoadInertia(),
                    AdditionalInertia()
                {
                }
                /** Constructor for the MechanicalData struct. */ 
                public: MechanicalData(int idInitial /** Unique ID                */, 
                        const NXString &nameInitial /** Mechanical Name          */, 
                        NXOpen::Motion::MotionSolution * solutionInitial /** Motion solution          */, 
                        NXOpen::Motion::Graph * torqueGraphInitial /** Torque graph in solution */, 
                        NXOpen::Motion::Graph * speedGraphInitial /** Speed graph in solution  */, 
                        double frictionTorqueInitial /** Friction Torque value    */, 
                        double systemEfficiencyInitial /** System Efficiency value  */, 
                        double loadInertiaInitial /** Load Inertia value       */, 
                        double additionalInertiaInitial /** Additional Inertia value */) :
                    Id(idInitial),
                    Name(nameInitial),
                    Solution(solutionInitial),
                    TorqueGraph(torqueGraphInitial),
                    SpeedGraph(speedGraphInitial),
                    FrictionTorque(frictionTorqueInitial),
                    SystemEfficiency(systemEfficiencyInitial),
                    LoadInertia(loadInertiaInitial),
                    AdditionalInertia(additionalInertiaInitial)
                {
                }
            };

             /** Defines the mechanical data in MCD mode. */
            public:
            struct MCDMechanicalData
            {
                public: /** Unique ID                    */int Id;
                public: /** Mechanical Name              */NXString Name;
                public: /** Axis Control                 */NXOpen::Mechatronics::PhysicsConstraint * AxisControl;
                public: /** Logical Reference Designator */NXString ReferenceDesignator;
                public: /** Friction Torque value        */double FrictionTorque;
                public: /** System Efficiency value      */double SystemEfficiency;
                public: /** Load Inertia value           */double LoadInertia;
                public: /** Additional Inertia value     */double AdditionalInertia;
                public: MCDMechanicalData() :
                    Id(),
                    Name(),
                    AxisControl(),
                    ReferenceDesignator(),
                    FrictionTorque(),
                    SystemEfficiency(),
                    LoadInertia(),
                    AdditionalInertia()
                {
                }
                /** Constructor for the MCDMechanicalData struct. */ 
                public: MCDMechanicalData(int idInitial /** Unique ID                    */, 
                        const NXString &nameInitial /** Mechanical Name              */, 
                        NXOpen::Mechatronics::PhysicsConstraint * axisControlInitial /** Axis Control                 */, 
                        const NXString &referenceDesignatorInitial /** Logical Reference Designator */, 
                        double frictionTorqueInitial /** Friction Torque value        */, 
                        double systemEfficiencyInitial /** System Efficiency value      */, 
                        double loadInertiaInitial /** Load Inertia value           */, 
                        double additionalInertiaInitial /** Additional Inertia value     */) :
                    Id(idInitial),
                    Name(nameInitial),
                    AxisControl(axisControlInitial),
                    ReferenceDesignator(referenceDesignatorInitial),
                    FrictionTorque(frictionTorqueInitial),
                    SystemEfficiency(systemEfficiencyInitial),
                    LoadInertia(loadInertiaInitial),
                    AdditionalInertia(additionalInertiaInitial)
                {
                }
            };

            private: SIZERExportBuilderImpl * m_sizerexportbuilder_impl;
            private: friend class  _SIZERExportBuilderBuilder;
            protected: SIZERExportBuilder();
            public: ~SIZERExportBuilder();
            /** Gets the run mode.  @return  Run mode 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SIZERExportBuilder::RunMode GetRunMode
            (
            );
            /** Sets the run mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") OR nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetRunMode
            (
                NXOpen::Tooling::SIZERExportBuilder::RunMode runMode /** Run mode */
            );
            /** Gets all groups of mechanical data in Motion mode. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetMechanicalData
            (
                std::vector<NXOpen::Tooling::SIZERExportBuilder::MechanicalData> & mechanicalData /** Array of mechanical data */
            );
            /** Sets all groups of mechanical data in Motion mode. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMechanicalData
            (
                const std::vector<NXOpen::Tooling::SIZERExportBuilder::MechanicalData> & mechanicalData /** Array of mechanical data */
            );
            /** Gets all groups of mechanical data in MCD mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMcdMechanicalData
            (
                std::vector<NXOpen::Tooling::SIZERExportBuilder::MCDMechanicalData> & mechanicalData /** Array of mechanical data */
            );
            /** Sets all groups of mechanical data in MCD mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMcdMechanicalData
            (
                const std::vector<NXOpen::Tooling::SIZERExportBuilder::MCDMechanicalData> & mechanicalData /** Array of mechanical data */
            );
            /** Processes the simulation data in MCD mode. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void ProcessMcdSimulationData
            (
                double startTime /** Start Time of simulation */,
                double endTime /** End Time of simulation */
            );
            /**Returns  the output *.mdix file, which is exported to SIZER. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputFile
            (
            );
            /**Sets  the output *.mdix file, which is exported to SIZER. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") OR nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetOutputFile
            (
                const NXString & outputFile /** outputfile */ 
            );
            /**Sets  the output *.mdix file, which is exported to SIZER. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") OR nx_mcd_core ("Mechatronics Concept Designer") */
            void SetOutputFile
            (
                const char * outputFile /** outputfile */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
