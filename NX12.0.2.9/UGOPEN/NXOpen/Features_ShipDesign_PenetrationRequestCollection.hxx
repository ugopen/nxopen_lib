#ifndef NXOpen_FEATURES_SHIPDESIGN_PENETRATIONREQUESTCOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_PENETRATIONREQUESTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_PenetrationRequestCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationAssociationBuilder.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationCutoutBuilder.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationRequest.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationRequestBuilder.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationRequestForCutoutBuilder.hxx>
#include <NXOpen/Features_ShipDesign_PenetrationReviewRequestBuilder.hxx>
#include <NXOpen/Features_ShipDesign_VerifyPenetrationBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationRequestCollection;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationManager;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationRequestBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationAssociationBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationCutoutBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationRequest;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationRequestForCutoutBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationReviewRequestBuilder;
        }
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class VerifyPenetrationBuilder;
        }
    }
    class NXObject;
    namespace Features
    {
        namespace ShipDesign
        {
            class PenetrationRequestCollectionImpl;
            /** Represents a @link NXOpen::Mechatronics::FunctionObjectCollection NXOpen::Mechatronics::FunctionObjectCollection@endlink   <br> To obtain an instance of this class, refer to @link NXOpen::Features::ShipDesign::PenetrationManager  NXOpen::Features::ShipDesign::PenetrationManager @endlink  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  PenetrationRequestCollection : public NXOpen::TaggedObjectCollection
            {
                private: PenetrationRequestCollectionImpl * m_penetrationrequestcollection_impl;
                private: NXOpen::Features::ShipDesign::PenetrationManager* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit PenetrationRequestCollection(NXOpen::Features::ShipDesign::PenetrationManager *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                public: ~PenetrationRequestCollection();
                /** Iterator for accessing the contents of the collection. */
                //lint -sem(NXOpen::Features::ShipDesign::PenetrationRequestCollection::iterator::copy,initializer)
                class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Features::ShipDesign::PenetrationRequestBuilder *>
                {
                public:
                    /** Default constructor */
                    iterator() : m_context(NULL), m_current(NULL_TAG)
                    {
                        // coverity[uninit_member]
                    } //lint !e1401 m_state is not initialized
                    /// \cond NX_NO_DOC
                    explicit iterator(NXOpen::Features::ShipDesign::PenetrationRequestCollection *context) : m_context(context), m_current(NULL_TAG)
                    {
                        // coverity[uninit_member]
                    }//lint !e1401 m_state is not initialized
                    /// \endcond
                    /** Copy constructor */
                    iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                    {
                        copy(other);
                    }
                    /** Copy constructor */
                    iterator &operator =(const iterator &other)
                    {
                        if (&other != this)
                            copy(other);
                        return *this;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                    bool operator ==(const iterator &other) const
                    {
                        return m_current == other.m_current && m_context == other.m_context;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                    bool operator !=(const iterator &other) const
                    {
                        return !operator == (other);
                    }
                    /** Return the element currently pointed to by the iterator. */
                    NXOPENCPP_FEATURESEXPORT  value_type operator * ();
                    /** Points the iterator to next element. */
                    iterator & operator ++()
                    {
                        next();
                        return *this;
                    }
                    /** Points the iterator to next element. */
                    iterator operator ++(int)
                    {
                        iterator tmp(*this);
                        ++*this;
                        return tmp;
                    }
                private:
                    void copy(const iterator &other)
                    {
                        m_context = other.m_context;
                        m_current = other.m_current;
                        for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                             m_state[i] = other.m_state[i];
                    }
                    NXOPENCPP_FEATURESEXPORT  void next();
                    NXOpen::Features::ShipDesign::PenetrationRequestCollection *m_context;
                    tag_t m_current;
                    unsigned int m_state[8];
                };
                /** Returns an iterator addressing the first element. */
                iterator begin();
                /** Returns an iterator addressing one past the last element. */
                iterator end()
                {
                    return iterator(this);
                }
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationRequestBuilder NXOpen::Features::ShipDesign::PenetrationRequestBuilder@endlink   @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::PenetrationRequestBuilder * CreatePenetrationRequestBuilder
                (
                    NXOpen::Features::ShipDesign::PenetrationRequest * penetrationrequest /** penetrationrequest */ 
                );
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationCutoutBuilder NXOpen::Features::ShipDesign::PenetrationCutoutBuilder@endlink   @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::PenetrationCutoutBuilder * CreatePenetrationCutoutBuilder
                (
                    NXOpen::Features::ShipDesign::PenetrationRequest * penetrationrequest /** penetrationrequest */ 
                );
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationAssociationBuilder NXOpen::Features::ShipDesign::PenetrationAssociationBuilder@endlink   @return  
                 <br>  @deprecated Deprecated in NX12.0.0.  Use overloaded function with enum instead. <br>  

                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use overloaded function with enum instead.") NXOpen::Features::ShipDesign::PenetrationAssociationBuilder * CreatePenetrationAssociationBuilder
                (
                    bool isEditMode /** iseditmode */ ,
                    NXOpen::Features::ShipDesign::PenetrationRequest * penetrationrequest /** penetrationrequest */ 
                );
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationAssociationBuilder NXOpen::Features::ShipDesign::PenetrationAssociationBuilder@endlink   @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::PenetrationAssociationBuilder * CreatePenetrationAssociationBuilder
                (
                    NXOpen::Features::ShipDesign::PenetrationRequestBuilder::RequestDialogType type /** type */ ,
                    NXOpen::Features::ShipDesign::PenetrationRequest * penetrationrequest /** penetrationrequest */ 
                );
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationReviewRequestBuilder NXOpen::Features::ShipDesign::PenetrationReviewRequestBuilder@endlink   @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::PenetrationReviewRequestBuilder * CreatePenetrationReviewRequestBuilder
                (
                    const std::vector<NXOpen::Features::ShipDesign::PenetrationRequest *> & requests /** requests */ 
                );
                /** Creates a @link NXOpen::Features::ShipDesign::VerifyPenetrationBuilder NXOpen::Features::ShipDesign::VerifyPenetrationBuilder@endlink   @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::VerifyPenetrationBuilder * CreateVerifyPenetrationBuilder
                (
                );
                /** Creates a @link NXOpen::Features::ShipDesign::PenetrationRequestForCutoutBuilder NXOpen::Features::ShipDesign::PenetrationRequestForCutoutBuilder@endlink   @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::Features::ShipDesign::PenetrationRequestForCutoutBuilder * CreatePenetrationRequestForCutoutBuilder
                (
                );
                /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given name.
                                An exception will be thrown if no object can be found with given name.  @return  @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with this name. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                public: NXOpen::NXObject * FindObject
                (
                    const NXString & name /** The name of the NXObject. */
                );
                /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given name.
                                An exception will be thrown if no object can be found with given name.  @return  @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with this name. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_penetration_mgmt ("Penetration Management") */
                NXOpen::NXObject * FindObject
                (
                    const char * name /** The name of the NXObject. */
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
