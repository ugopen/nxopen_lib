#ifndef NXOpen_CAE_DURSPECIALISTLOADLENGTHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTLOADLENGTHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistLoadLengthBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistLoadLengthBuilder;
    }
    class Builder;
    class Expression;
    namespace CAE
    {
        class _DurSpecialistLoadLengthBuilderBuilder;
        class DurSpecialistLoadLengthBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Represents a @link NXOpen::CAE::DurSpecialistLoadLength NXOpen::CAE::DurSpecialistLoadLength@endlink  builder.  <br> No support for KF  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistLoadLengthBuilder : public NXOpen::Builder
        {
            /** the Definition type */
            public: enum Definition
            {
                DefinitionImplicit/** use existing information */,
                DefinitionImposed/** enter the information */,
                DefinitionNotAvailable/** no information available */
            };

            private: DurSpecialistLoadLengthBuilderImpl * m_durspecialistloadlengthbuilder_impl;
            private: friend class  _DurSpecialistLoadLengthBuilderBuilder;
            protected: DurSpecialistLoadLengthBuilder();
            public: ~DurSpecialistLoadLengthBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the duration type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistLoadLengthBuilder::Definition DurationType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the duration type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetDurationType
            (
                NXOpen::CAE::DurSpecialistLoadLengthBuilder::Definition definition /** definition */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the duration 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Duration
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the distance type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistLoadLengthBuilder::Definition DistanceType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the distance type. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetDistanceType
            (
                NXOpen::CAE::DurSpecialistLoadLengthBuilder::Definition definition /** definition */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the distance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
