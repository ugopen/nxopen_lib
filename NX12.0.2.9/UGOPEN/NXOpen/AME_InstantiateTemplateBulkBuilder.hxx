#ifndef NXOpen_AME_INSTANTIATETEMPLATEBULKBUILDER_HXX_INCLUDED
#define NXOpen_AME_INSTANTIATETEMPLATEBULKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_InstantiateTemplateBulkBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AspectDetailsBuilder.hxx>
#include <NXOpen/AME_InsertSettingsBuilder.hxx>
#include <NXOpen/AME_Project.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class InstantiateTemplateBulkBuilder;
    }
    namespace AME
    {
        class AspectDetailsBuilder;
    }
    namespace AME
    {
        class FragmentObject;
    }
    namespace AME
    {
        class InsertSettingsBuilder;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace AME
    {
        class Project;
    }
    namespace AME
    {
        class SelectAMEBaseNodeList;
    }
    class NXObject;
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        class _InstantiateTemplateBulkBuilderBuilder;
        class InstantiateTemplateBulkBuilderImpl;
        /** JA class for the insert Eng object dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateInstantiateTemplateBulkBuilder  NXOpen::AME::AMEManager::CreateInstantiateTemplateBulkBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        InsertSettings.AspectPlacement </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        InsertSettings.CopiesPerParent </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShowInAutomation </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInFunction </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInLocation </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInProduct </td> <td> 
         
        false </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  InstantiateTemplateBulkBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            /** Choices for placement type, can be Place in Navigator or Place on Page */
            public: enum PlacementType
            {
                PlacementTypeNavigator/** navigator */ ,
                PlacementTypePage/** page */ 
            };

            private: InstantiateTemplateBulkBuilderImpl * m_instantiatetemplatebulkbuilder_impl;
            private: friend class  _InstantiateTemplateBulkBuilderBuilder;
            protected: InstantiateTemplateBulkBuilder();
            public: ~InstantiateTemplateBulkBuilder();
            /**Returns  the placement type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstantiateTemplateBulkBuilder::PlacementType PlacementValue
            (
            );
            /**Sets  the placement type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPlacementValue
            (
                NXOpen::AME::InstantiateTemplateBulkBuilder::PlacementType placementType /** placementtype */ 
            );
            /**Returns  the reuse library selection item
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryItem
            (
            );
            /**Returns  the aspect details ui block
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectDetailsBuilder * AspectDetails
            (
            );
            /**Returns  the select object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNodeList * SelectedObjects
            (
            );
            /**Returns  the show in function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInFunction
            (
            );
            /**Sets  the show in function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInFunction
            (
                bool showInFunction /** showinfunction */ 
            );
            /**Returns  the show in location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInLocation
            (
            );
            /**Sets  the show in location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInLocation
            (
                bool showInLocation /** showinlocation */ 
            );
            /**Returns  the show in product 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInProduct
            (
            );
            /**Sets  the show in product 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInProduct
            (
                bool showInProduct /** showinproduct */ 
            );
            /**Returns  the show in automation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInAutomation
            (
            );
            /**Sets  the show in automation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInAutomation
            (
                bool showInAutomation /** showinautomation */ 
            );
            /**Returns  the aspect placement toggle setting 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InsertSettingsBuilder * InsertSettings
            (
            );
            /**Returns  the unload template flag to indicate if template should be unloaded after instantiation
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool UnloadTemplate
            (
            );
            /**Sets  the unload template flag to indicate if template should be unloaded after instantiation
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetUnloadTemplate
            (
                bool unloadTemplate /** unloadtemplate */ 
            );
            /**Returns  the copy document structure flag to decide whether to copy document structure
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool CopyDocumentStructure
            (
            );
            /**Sets  the copy document structure flag to decide whether to copy document structure
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCopyDocumentStructure
            (
                bool copyDocumentStructure /** copydocumentstructure */ 
            );
            /**Returns  the tag of selected fragment object
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FragmentObject * SelectedFragmentTag
            (
            );
            /**Sets  the tag of selected fragment object
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedFragmentTag
            (
                NXOpen::AME::FragmentObject * selectedFragmentTag /** selectedfragmenttag */ 
            );
            /**Returns  the co-ordinate of fragment placement location
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d FragmentLocation
            (
            );
            /**Sets  the co-ordinate of fragment placement location
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFragmentLocation
            (
                const NXOpen::Point2d & fragmentLocation /** fragmentlocation */ 
            );
            /** Get Project from part file @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Project * GetProjectFromPartFileName
            (
            );
            /**Returns  the created instance
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * TemplateInstance
            (
            );
            /**Returns  the from mapping dialog flag to indicate if bulk template instantiation is initiated from mapping 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool FromMapping
            (
            );
            /**Sets  the from mapping dialog flag to indicate if bulk template instantiation is initiated from mapping 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFromMapping
            (
                bool fromMapping /** frommapping */ 
            );
            /**  Unloads the current template.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnloadTemplateInstance
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
