#ifndef NXOpen_ROUTING_CUSTOMMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_CUSTOMMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CustomManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class CustomManager;
    }
    class Session;
    namespace Assemblies
    {
        class Component;
    }
    class Curve;
    class NXObject;
    namespace Routing
    {
        class ChoosePartPluginData;
    }
    namespace Routing
    {
        class DesignRuleViolation;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class Connection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class SortConnectionsPluginData;
        }
    }
    namespace Routing
    {
        class Overstock;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        class CustomManagerImpl;
        /** The Routing Custom Manager allows you to customize Routing by setting session wide Routing
                preferences and by adding plugins, callbacks, and design rules.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  CustomManager
        {
            /** The reason for registering a callback indicates which Routing commands will use
                        the callback.
                    */
            public: enum CallbackReason
            {
                CallbackReasonUnknown/** Used only for validation. */ = -1,
                CallbackReasonPlacePart/** Called after the Place Part command. */,
                CallbackReasonMovePart/** Called after the Move Part command. */,
                CallbackReasonRemovePart/** Called after the Remove Part command. */,
                CallbackReasonMovePath/** Called after the Move Path command. */,
                CallbackReasonCopyPath/** Called after the Copy Path command. */,
                CallbackReasonDeletePath/** Called after the Delete Path command. */,
                CallbackReasonTransformPath/** Called after the Transform Path command. */,
                CallbackReasonOffsetPath/** Called after the Offset Path command. */,
                CallbackReasonAssignStock/** Called after the Assign Stock command. */,
                CallbackReasonWireRouteManual/** Called after the Manual Route command. */,
                CallbackReasonWireRouteAuto/** Called after the AutoRoute command. */,
                CallbackReasonWireCompManual/** Called after the Manual Assign command. */,
                CallbackReasonWireCompAuto/** Called after the AutoAssign command. */,
                CallbackReasonWireUnroute/** Called after the Unroute command. */,
                CallbackReasonWireUncomp/** Called after the Unassign Component command. */,
                CallbackReasonWireTerminals/** Called after the Model Terminals command. */,
                CallbackReasonChoosePart/** Called after the Choose Part command. */,
                CallbackReasonCreateConnection/** Called after the Create Connection command. */,
                CallbackReasonEditConnection/** Called after the Edit Connection command. */,
                CallbackReasonUnassignStock/** Called after the Remove Stock command. */,
                CallbackReasonCreateRun/** Called after the Create Run command. */,
                CallbackReasonRunPreDelete/** Called before deleting a run. */,
                CallbackReasonReplaceStock/** Called after the Replace Stock command. */,
                CallbackReasonCreatePortConnection/** Called after the creating a connection between two ports. */,
                CallbackReasonWireCompProxy/** Called after the Assign Proxy command. */,
                CallbackReasonReplacePart/** Called after the Replace Part command. */,
                CallbackReasonBrokenConnection/** Called after a port-to-port connection is broken. */,
                CallbackReasonEditReplacePart/** Unused. */,
                CallbackReasonAttrDiscrepancy/** Called after the Place Part and Replace Part commands. */,
                CallbackReasonAttributeCopyReplacePart/** Called after the Replace Part command. */,
                CallbackReasonCount/** The number of callback reasons. */
            };

            public: /** This defines the prototype for all Routing callbacks. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<void, std::vector<NXOpen::NXObject *>> Callback;
            /** The reason for registering a design rule indicates which Routing commands will use the design rule.
                        NOTE: The Interactive Check command calls all design rules regardless of the reason for
                              which you registered a design rule.
                    */
            public: enum DesignRuleReason
            {
                DesignRuleReasonUnknown/** Used only for validation. */ = -1,
                DesignRuleReasonCreatePath/** Called after the Create Path command. */,
                DesignRuleReasonHealPath/** Called after the Heal Path command. */,
                DesignRuleReasonAssignCorner/** Called after the Assign Corner command. */,
                DesignRuleReasonAssignStock/** Called after the Assign Stock command. */,
                DesignRuleReasonRemoveStock/** Called after the Remove Stockcommand. */,
                DesignRuleReasonStockStyle/** Called after the Stock Style command. */,
                DesignRuleReasonPlacePart/** Called after the Place Part command. */,
                DesignRuleReasonCreateFabrication/** Called after the Create Fabrication command. */,
                DesignRuleReasonQualifyPart/** Called after the Qualify Part command. */,
                DesignRuleReasonMovePath/** Called after the Move Path command. */,
                DesignRuleReasonCopyPath/** Called after the Copy Path command. */,
                DesignRuleReasonDeletePath/** Called after the Delete Path command. */,
                DesignRuleReasonSubdivideSegment/** Called after the Subdivide Segment command. */,
                DesignRuleReasonSimplifyPath/** Called after the Simplify Path command. */,
                DesignRuleReasonRemovePart/** Called after the Remove Part command. */,
                DesignRuleReasonMovePart/** Called after the Move Part command. */,
                DesignRuleReasonEditCharacteristic/** Called after the Edit Characteristics command. */,
                DesignRuleReasonInteractive/** The design rule is called for an interactive check instead of after a particular command. */,
                DesignRuleReasonBatch/** Unused */,
                DesignRuleReasonOrientStock/** Called after the Orient Stock command. */,
                DesignRuleReasonUnifyPath/** Called after the Unify Path command. */,
                DesignRuleReasonTransformPath/** Called after the Transform Path command. */,
                DesignRuleReasonOffsetPath/** Called after the Offset Path command. */,
                DesignRuleReasonAutoRoutePinLevel/** Called after the AutoRoute command using pin level routing. */,
                DesignRuleReasonManualRoutePinLevel/** Called after the Manual Route command using pin level routing. */,
                DesignRuleReasonAutoRouteComponentLevel/** Called after the AutoRoute command using component level routing. */,
                DesignRuleReasonManualRouteComponentLevel/** Called after the Manual Route command using component level routing. */,
                DesignRuleReasonImport/** Called after the Import command from the Routing Electrical application's navigators. */,
                DesignRuleReasonSpaceReservation/** Called after the Space Reservation command. */,
                DesignRuleReasonPartialAutoRoute/** Called after the Partial AutoRoute command. */,
                DesignRuleReasonPartialManualRoute/** Called after the Partial Manual Route command. */,
                DesignRuleReasonWindCatcher/** Called after the Wind Catcher command. */,
                DesignRuleReasonCreatePlatform/** Called after the Create Platform command. */,
                DesignRuleReasonEditPlacePart/** Called after the Edit Place Part command. */,
                DesignRuleReasonCount/** The number of design rule reasons. */
            };

            public: /** This defines the prototype for all Routing design rules. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback2<void, NXOpen::Routing::CustomManager::DesignRuleReason, std::vector<NXOpen::NXObject *>> DesignRule;
            public: /** This defines the prototype for the import export plugins. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<void, NXString> ImportExportPlugin;
            public: /** This defines the prototype for the Route Node and Route Section name plugins. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback0<NXString> PlmxmlObjectNamePlugin;
            public: /** This defines the prototype for the wrapped overstock length calculation plugin. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<double, NXOpen::Routing::Overstock *> WrappedOverstockLengthCalculationPlugin;
            public: /** This defines the prototype for the filter blanking plugin.
                        Determines whether or not the segment or component should be blanked based
                        on the value of its filter blanking attribute.

                        Return true to blank the segment or component. False to unblank it.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback4<bool, NXOpen::NXObject *, NXString, NXString, NXString> FilterBlankingPlugin;
            public: /** This defines the prototype for the bill of materials plugin. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback0<void> BomPlugin;
            public: /** This defines the prototype for the autoroute plugin.
                        Returns the number of connections actually routed.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<int, std::vector<NXOpen::Routing::Electrical::Connection *>> AutoroutePlugin;
            public: /** This defines the prototype for the sort connections plugin in which you can sort
                        the connections in the order Routing will route them along their paths.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<void, NXOpen::Routing::Electrical::SortConnectionsPluginData *> SortConnectionsPlugin;
            /** Used by the navigator object selected plugin to indicate in which navigator the
                        objects were selected.
                    */
            public: enum NavigatorType
            {
                NavigatorTypeComponent/** The objects were selected in the component navigator.  */,
                NavigatorTypeConnection/** The objects were selected in the connection navigator. */
            };

            /** Used by the navigator object selected plugin to indicate whether the objects are
                        selected or deselected.
                    */
            public: enum SelectionType
            {
                SelectionTypeDeselected/** The objects were deselected. */,
                SelectionTypeSelected/** The objects were selected.   */
            };

            public: /** This defines the prototype Routing calls whenever an object on the Component or
                        Connection Navigator is selected or deselected.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback3<void, NXOpen::Routing::CustomManager::NavigatorType, NXOpen::Routing::CustomManager::SelectionType, std::vector<NXOpen::NXObject *>> NavigatorObjectSelectedPlugin;
            public: /** This defines the prototype Routing calls to determine the bundle diameter for each
                        bundle in a harness. It returns the diameter of the bundle Routing should create
                        to represent the given stock.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<double, std::vector<NXOpen::Routing::StockData *>> BundlePlugin;
            public: /** This defines the prototype for the validate formboard plugin.
                        Returns whether or not the given harnesses pass the validation test.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            typedef NXOpen::Callback1<bool, std::vector<NXOpen::Routing::Electrical::HarnessDevice *>> ValidateFormboardPlugin;
            public: /** This defines the prototype for the stock component locked plugin.
                        Returns whether or not the given stock component is modifiable because it is not locked.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<bool, NXOpen::Routing::Stock *> StockComponentLockedPlugin;
            public: /** This defines the prototype for the unify path plugin.
                        Displays a dialog that allows the users to select new characteristics to use when
                        replacing all of the given objects.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<void, std::vector<NXOpen::NXObject *>> UnifyPathPlugin;
            /** Used by the piping component file plugin to indicate if it should overwrite an existing file or not. */
            public: enum PipingComponentFileOptions
            {
                PipingComponentFileOptionsAskToOverwriteFile/** Prompt the user of the plugin if it is OK to overwrite the piping component file.  */,
                PipingComponentFileOptionsNeverOverwriteFile/** Never overwrite any existing piping component file. Throw an error if the file exists. */,
                PipingComponentFileOptionsAlwaysOverwriteFile/** Always overwrite any existing piping component file. */
            };

            public: /** This defines the prototype for the piping component file plugin.
                        The Piping Component File is then used by Alias' Isogen program to create an isometric
                        drawing of the given components. This plugin will read the given components and write
                        them to the piping component file in the proper format.

                        If the filename is NULL, it is up to the piping component file plugin to come up with a file name.

                        If the components array is empty, it is up to the piping component file plugin to either
                        write out all components under the work part or prompt the user for the components to write.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            typedef NXOpen::Callback3<void, NXString, std::vector<NXOpen::Assemblies::Component *>, NXOpen::Routing::CustomManager::PipingComponentFileOptions> PipingComponentFilePlugin;
            /** Used by the Duct Size Calculator's create stock plugin to indicate what shape stock to create. */
            public: enum DuctSizeCalculatorDuctShape
            {
                DuctSizeCalculatorDuctShapeRectangular/** rectangular */ ,
                DuctSizeCalculatorDuctShapeCircular/** circular */ ,
                DuctSizeCalculatorDuctShapeFlatOval/** flat oval */ 
            };

            public: /** This defines the prototype for the Duct Size Calculator's Create Stock plugin.
                        This plugin should take the given parameters and create either circular, rectangular
                        or flat oval space reservation on the given segments.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            typedef NXOpen::Callback5<void, std::vector<NXOpen::Curve *>, NXOpen::Routing::CustomManager::DuctSizeCalculatorDuctShape, double, double, double> DuctSizeCalculatorCreateStockPlugin;
            /** Used by the Duct Size Calculator's display note plugin to indicate whether to add or remove the note. */
            public: enum DuctSizeCalculatorDisplayNoteFlag
            {
                DuctSizeCalculatorDisplayNoteFlagAddNote/** add note */ ,
                DuctSizeCalculatorDisplayNoteFlagRemoveNote/** remove note */ 
            };

            public: /** This defines the prototype for the Duct Size Calculator's Display Note plugin.
                        This plugin displays notes with values of user specified attributes on the selected segments.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            typedef NXOpen::Callback2<void, NXOpen::Curve *, NXOpen::Routing::CustomManager::DuctSizeCalculatorDisplayNoteFlag> DuctSizeCalculatorDisplayNotePlugin;
            public: /** This defines the prototype for the Discipline Changed plugin.
                        Routing calls this plugin any time the user changes the discipline.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            typedef NXOpen::Callback2<void, NXString, NXString> DisciplineChangedPlugin;
            public: /** This defines the prototype for the Specification Changed plugin.
                        Routing calls this plugin any time the user changes the specification.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            typedef NXOpen::Callback2<void, NXString, NXString> SpecificationChangedPlugin;
            public: /** This defines the prototype for the choose part plugin used by the Place Part command.
                        You can use this plugin to choose any part you wish to be placed by the Place Part command.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            typedef NXOpen::Callback1<int, NXOpen::Routing::ChoosePartPluginData *> ChoosePartPlugin;
            private: CustomManagerImpl * m_custommanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CustomManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CustomManager();
            /** Adds the callback with the given reason.
                        NOTE: You can register more than one callback with the same reason.  @return  A unique identifier for your callback. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int AddCallback
            (
                NXOpen::Routing::CustomManager::CallbackReason reason /** The reason for which you want this callback called. */,
                const NXOpen::Routing::CustomManager::Callback&  callbackMethod /** The method you want to be called. */
            );
            /** Removes the registered callback. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveCallback
            (
                int callbackMethodId /** The callback identifier indicating which callback to remove. */
            );
            /** Removes all the callbacks registered for a particular reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveAllCallbacksForReason
            (
                NXOpen::Routing::CustomManager::CallbackReason reason /** The reason for which you want to remove all the callbacks. */
            );
            /** Removes all the registered callbacks, except those configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveAllCallbacks
            (
            );
            /** Returns the callbacks, if any, registered for the given reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetCallbacksRegisteredForReason
            (
                NXOpen::Routing::CustomManager::CallbackReason reason /** The reason for which you want a list of callbacks. */,
                std::vector<int> & registeredCallbackIds /** The callback indentifiers, if any, registered with this reason. */
            );
            /** Adds the design rule with the given reason.
                        NOTE: You can register more than one design rule with the same reason.  @return  A unique identifier for your design rule. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: int AddDesignRule
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want this design rule called. */,
                const NXString & name /** A descriptive name for this design rule. */,
                const NXString & description /** A detailed description of what this design rule checks. */,
                const NXOpen::Routing::CustomManager::DesignRule&  designRuleMethod /** The method you want to be called. */
            );
            /** Adds the design rule with the given reason.
                        NOTE: You can register more than one design rule with the same reason.  @return  A unique identifier for your design rule. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            int AddDesignRule
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want this design rule called. */,
                const char * name /** A descriptive name for this design rule. */,
                const char * description /** A detailed description of what this design rule checks. */,
                const NXOpen::Routing::CustomManager::DesignRule&  designRuleMethod /** The method you want to be called. */
            );
            /** Removes the registered design rule. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveDesignRule
            (
                int designRuleMethodId /** The design rule identifier indicating which design rule to remove. */
            );
            /** Removes all the design rules registered for a particular reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveAllDesignRulesForReason
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want to remove all the design rules. */
            );
            /** Removes all the registered design rules, except those configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveAllDesignRules
            (
            );
            /** Returns the design rules, if any, registered for the given reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void GetDesignRulesRegisteredForReason
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want a list of design rules. */,
                std::vector<int> & registeredDesignRuleIds /** The design rule indentifiers, if any, registered with this reason. */
            );
            /** Returns any violations recorded against a design rule reason.  @return  The violations for this reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::DesignRuleViolation *> GetViolationsForReason
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want a list of violations. */
            );
            /** Returns any violations recorded against a design rule.  @return  The violations for this reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::DesignRuleViolation *> GetViolationsOfRule
            (
                const NXString & designRuleName /** The Design Rule for which you want a list of violations. */
            );
            /** Returns any violations recorded against a design rule.  @return  The violations for this reason. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            std::vector<NXOpen::Routing::DesignRuleViolation *> GetViolationsOfRule
            (
                const char * designRuleName /** The Design Rule for which you want a list of violations. */
            );
            /** Creates a new violation for a design rule reason.  @return  The newly created violation object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DesignRuleViolation * CreateViolationForReason
            (
                const NXString & designRuleName /** The Design Rule for which you want to create a new violation. */,
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want to create a new violation. */,
                const NXString & shortDescription /** A short description of the violation displayed as the message on the Design Rule Violation dialog. */,
                const NXString & longDescription /** A more detailed description of the violation displayed by the Full Violation Text button on the Design Rule Violation dialog. */,
                const std::vector<NXOpen::NXObject *> & objects /** The objects in violation. */
            );
            /** Creates a new violation for a design rule reason.  @return  The newly created violation object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Routing::DesignRuleViolation * CreateViolationForReason
            (
                const char * designRuleName /** The Design Rule for which you want to create a new violation. */,
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want to create a new violation. */,
                const char * shortDescription /** A short description of the violation displayed as the message on the Design Rule Violation dialog. */,
                const char * longDescription /** A more detailed description of the violation displayed by the Full Violation Text button on the Design Rule Violation dialog. */,
                const std::vector<NXOpen::NXObject *> & objects /** The objects in violation. */
            );
            /** Finds the violation of a design rule reason attached to the given object and deletes it.
                        Useful when the given object no longer violates this rule.
                        This method calls update after deleting the violations. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void DeleteViolationsOnObjectForReason
            (
                NXOpen::Routing::CustomManager::DesignRuleReason reason /** The reason for which you want to delete a violation. */,
                NXOpen::NXObject * nxObject /** The object on which to delete the violation. */
            );
            /** Finds the violation of a design rule attached to the given object and deletes it.
                        Useful when the given object no longer violates this rule.
                        This method calls update after deleting the violations. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void DeleteViolationsOfRuleOnObject
            (
                const NXString & designRuleName /** The Design Rule for which you want to delete a violation. */,
                NXOpen::NXObject * nxObject /** The object on which to delete the violation. */
            );
            /** Finds the violation of a design rule attached to the given object and deletes it.
                        Useful when the given object no longer violates this rule.
                        This method calls update after deleting the violations. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void DeleteViolationsOfRuleOnObject
            (
                const char * designRuleName /** The Design Rule for which you want to delete a violation. */,
                NXOpen::NXObject * nxObject /** The object on which to delete the violation. */
            );
            /** Removes all the registered plugins, except those configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveAllPlugins
            (
            );
            /** Sets the plugin called before importing an HRN file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetHrnPreImportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  hrnPreImportPlugin /** The method you want Routing to call before importing an HRN file. */
            );
            /** Removes any registered pre-import HRN plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveHrnPreImportPlugin
            (
            );
            /** Sets the plugin called just after Routing exports an HRN file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetHrnPostExportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  hrnPostExportPlugin /** The method you want Routing to call after exporting an HRN file. */
            );
            /** Removes any registered post-export HRN plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveHrnPostExportPlugin
            (
            );
            /** Sets the plugin called before importing an CMP file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCmpPreImportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  cmpPreImportPlugin /** The method you want Routing to call before importing an CMP file. */
            );
            /** Removes any registered pre-import CMP plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveCmpPreImportPlugin
            (
            );
            /** Sets the plugin called just after Routing exports an CMP file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCmpPostExportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  cmpPostExportPlugin /** The method you want Routing to call after exporting an CMP file. */
            );
            /** Removes any registered post-export CMP plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveCmpPostExportPlugin
            (
            );
            /** Sets the plugin called before importing an PLMXML file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetPlmXmlPreImportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  plmXmlPreImportPlugin /** The method you want Routing to call before importing an PLMXML file. */
            );
            /** Removes any registered pre-import PLMXML plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemovePlmXmlPreImportPlugin
            (
            );
            /** Sets the plugin called just after Routing exports an PLMXML file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetPlmXmlPostExportPlugin
            (
                const NXOpen::Routing::CustomManager::ImportExportPlugin&  plmXmlPostExportPlugin /** The method you want Routing to call after exporting an PLMXML file. */
            );
            /** Removes any registered post-export PLMXML plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemovePlmXmlPostExportPlugin
            (
            );
            /** Sets the plugin Routing will call to get the name of the next Route Node for the PLMXML file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetPlmXmlRouteNodeNamePlugin
            (
                const NXOpen::Routing::CustomManager::PlmxmlObjectNamePlugin&  plmXmlRouteNodeNamePlugin /** The method you want Routing to call to get the name of the next Route Node. */
            );
            /** Removes any registered Route Node name plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemovePlmXmlRouteNodeNamePlugin
            (
            );
            /** Sets the plugin Routing will call to get the name of the next Route Section for the PLMXML file.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetPlmXmlRouteSectionNamePlugin
            (
                const NXOpen::Routing::CustomManager::PlmxmlObjectNamePlugin&  plmXmlRouteSectionNamePlugin /** The method you want Routing to call to get the name of the next Route Section. */
            );
            /** Removes any registered Route Section name plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemovePlmXmlRouteSectionNamePlugin
            (
            );
            /** Sets the plugin called by Routing to calculate the length of a wrapped overstock.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetWrappedOverstockLengthCalculationPlugin
            (
                const NXOpen::Routing::CustomManager::WrappedOverstockLengthCalculationPlugin&  lengthCalculationPlugin /** The method you want Routing to call to calculate the length of a wrapped overstock. */
            );
            /** Removes any registered wrapped overstock length calculation plugin,
                        except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveWrappedOverstockLengthCalculationPlugin
            (
            );
            /** Sets the plugin called by Routing to determine if a segment or component needs to be blanked.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFilterBlankingPlugin
            (
                const NXOpen::Routing::CustomManager::FilterBlankingPlugin&  filterBlankingPlugin /** The method you want Routing to call to determine if a segment or component should be blanked. */
            );
            /** Removes any registered filter blanking plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveFilterBlankingPlugin
            (
            );
            /** Sets the plugin called just after Routing creates a bill of materials.
                        The intent is that the plugin can then add stocks to Teamcenter's Product Structure.

                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBomPlugin
            (
                const NXOpen::Routing::CustomManager::BomPlugin&  bomPlugin /** The method you want Routing to call after creating a bill of materials. */
            );
            /** Removes any registered bill of materials plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveBomPlugin
            (
            );
            /** Sets the plugin Routing will instead of the internal automatic routing of
                        connections along a path.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetAutoRoutePlugin
            (
                const NXOpen::Routing::CustomManager::AutoroutePlugin&  autoRoutePlugin /** The method you want Routing to use instead of Routing's internal autoroute method. */
            );
            /** Removes any registered autoroute plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveAutoRoutePlugin
            (
            );
            /** Sets the plugin Routing will instead of the internal manual routing of
                        connections along a path. This uses the same plugin prototype as the autoroute plugin.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetManualRoutePlugin
            (
                const NXOpen::Routing::CustomManager::AutoroutePlugin&  manualRoutePlugin /** The method you want Routing to use instead of Routing's internal manual route method. */
            );
            /** Removes any registered manual route plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveManualRoutePlugin
            (
            );
            /** Sets the plugin Routing will instead of the internal unroute method.
                        This uses the same plugin prototype as the autoroute plugin.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetUnroutePlugin
            (
                const NXOpen::Routing::CustomManager::AutoroutePlugin&  unroutePlugin /** The method you want Routing to use instead of Routing's internal unroute method. */
            );
            /** Removes any registered unroute plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveUnroutePlugin
            (
            );
            /** Sets the plugin Routing will call to sort the connections about to be routed.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetSortConnectionsPlugin
            (
                const NXOpen::Routing::CustomManager::SortConnectionsPlugin&  sortConnectionsPlugin /** The method you want Routing to use to sort the connections. */
            );
            /** Removes any registered sort connections plugin. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveSortConnectionsPlugin
            (
            );
            /** Sets the plugin Routing will call whenever an object on the Component or
                        Connection Navigator is selected or deselected.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetNavigatorObjectSelectedPlugin
            (
                const NXOpen::Routing::CustomManager::NavigatorObjectSelectedPlugin&  navigatorObjectSelectedPlugin /** The method you want Routing to use instead of Routing's internal manual route method. */
            );
            /** Removes any registered navigator object selected plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveNavigatorObjectSelectedPlugin
            (
            );
            /** Sets the plugin Routing will call to determine the bundle diameter for each
                        bundle in a harness.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetBundlePlugin
            (
                const NXOpen::Routing::CustomManager::BundlePlugin&  bundlePlugin /** The method you want Routing to call to determine the bundle diameters. */
            );
            /** Removes any registered bundle plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveBundlePlugin
            (
            );
            /** Sets the plugin Routing will call to validate the harnesses on a formboard.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetValidateFormboardPlugin
            (
                const NXOpen::Routing::CustomManager::ValidateFormboardPlugin&  validateFormboardPlugin /** The method you want Routing to call to validate the formboard harnesses. */
            );
            /** Removes any registered validate formboard plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void RemoveValidateFormboardPlugin
            (
            );
            /** Sets the plugin Routing will call to see if a stock component is modifiable.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockComponentLockedPlugin
            (
                const NXOpen::Routing::CustomManager::StockComponentLockedPlugin&  stockComponentLockedPlugin /** The method you want Routing to call to see if a stock component is modifiable. */
            );
            /** Removes any registered stock component locked plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveStockComponentLockedPlugin
            (
            );
            /** Sets the plugin Routing will use for the Unify Path command.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetUnifyPathPlugin
            (
                const NXOpen::Routing::CustomManager::UnifyPathPlugin&  unifyPathPlugin /** The method you want Routing to use for the Unify Path command. */
            );
            /** Removes any registered unify path plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveUnifyPathPlugin
            (
            );
            /** Sets the plugin Routing will use for the Unify Path command.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: void SetPipingComponentFilePlugin
            (
                const NXOpen::Routing::CustomManager::PipingComponentFilePlugin&  pipingComponentFilePlugin /** The method you want Routing to use for the piping component file plugin. */
            );
            /** Removes any registered piping component file plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: void RemovePipingComponentFilePlugin
            (
            );
            /** Sets the plugin Routing will use to create stock for the Duct Size Calculator command.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDuctSizeCalculatorCreateStockPlugin
            (
                const NXOpen::Routing::CustomManager::DuctSizeCalculatorCreateStockPlugin&  createStockPlugin /** The method you want Routing to use for the create stock plugin. */
            );
            /** Removes any registered create stock plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void RemoveDuctSizeCalculatorCreateStockPlugin
            (
            );
            /** Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDuctSizeCalculatorDisplayNotePlugin
            (
                const NXOpen::Routing::CustomManager::DuctSizeCalculatorDisplayNotePlugin&  displayNotePlugin /** The method you want Routing to use to display the note. */
            );
            /** Removes any registered display note plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void RemoveDuctSizeCalculatorDisplayNotePlugin
            (
            );
            /** Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetDisciplineChangedPlugin
            (
                const NXOpen::Routing::CustomManager::DisciplineChangedPlugin&  disciplineChangedPlugin /** The method you want Routing to call when the user changes the discipline. */
            );
            /** Removes any registered discpline changed plugin. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void RemoveDisciplineChangedPlugin
            (
            );
            /** Sets the plugin Routing will use to display a note on the segments selected in the Duct Size Calculator.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void SetSpecificationChangedPlugin
            (
                const NXOpen::Routing::CustomManager::SpecificationChangedPlugin&  specificationChangedPlugin /** The method you want Routing to call when the user changes the specification. */
            );
            /** Removes any registered discpline changed plugin. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_hvac ("Routing HVAC") */
            public: void RemoveSpecificationChangedPlugin
            (
            );
            /** Sets the choose part plugin.
                        Will throw an error if one is already registered.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetChoosePartPlugin
            (
                const NXOpen::Routing::CustomManager::ChoosePartPlugin&  choosePartPlugin /** The method you want Routing to use to choose a part to be placed. */
            );
            /** Removes any registered choose part plugin, except one configured in the Application View (APV) file. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveChoosePartPlugin
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
