#ifndef NXOpen_MFG_MLP_PROCESSPLAN_HXX_INCLUDED
#define NXOpen_MFG_MLP_PROCESSPLAN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mfg_Mlp_ProcessPlan.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libmfgmlpopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mfg
    {
        namespace Mlp
        {
            class ProcessPlan;
        }
    }
    class DisplayableObject;
    class INXObject;
    namespace Mfg
    {
        namespace Mlp
        {
            class Line;
        }
    }
    namespace Mfg
    {
        namespace Mlp
        {
            class ProcessSetup;
        }
    }
    namespace Mfg
    {
        namespace Mlp
        {
            class Product;
        }
    }
    namespace Mfg
    {
        namespace Mlp
        {
            class _ProcessPlanBuilder;
            class ProcessPlanImpl;
            /** Represents a Machining Line Planner process plan  <br> To obtain an instance of this class use @link NXOpen::Mfg::Mlp::MachiningLinePlanner NXOpen::Mfg::Mlp::MachiningLinePlanner@endlink   <br> 
             <br>  Created in NX11.0.1.  <br>  
            */
            class MFGMLPOPENCPPEXPORT  ProcessPlan : public NXOpen::DisplayableObject
            {
                private: ProcessPlanImpl * m_processplan_impl;
                private: friend class  _ProcessPlanBuilder;
                protected: ProcessPlan();
                public: ~ProcessPlan();
                /** Get the Not Allocated setup  @return  
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Mfg::Mlp::ProcessSetup * GetNotAllocatedSetup
                (
                );
                /** Get the Line  @return  
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Mfg::Mlp::Line * GetLine
                (
                );
                /** Get the Products being manufactured in this ProcessPlan  @return  
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::Mfg::Mlp::Product *> GetProducts
                (
                );
                /** Get the Setups of this ProcessPlan in the order in which they are machined  @return  
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::Mfg::Mlp::ProcessSetup *> GetSetups
                (
                );
                /** Finds the @link  Mfg::Mlp::Line   Mfg::Mlp::Line @endlink , not allocated @link  Mfg::Mlp::ProcessSetup   Mfg::Mlp::ProcessSetup @endlink  or @link  Mfg::Mlp::Product   Mfg::Mlp::Product @endlink 
                            with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  Object found, or null if no such object exists.
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::INXObject * FindObject
                (
                    const NXString & journalIdentifier /** Name of the line, not allocated setup or product to be found */
                );
                /** Finds the @link  Mfg::Mlp::Line   Mfg::Mlp::Line @endlink , not allocated @link  Mfg::Mlp::ProcessSetup   Mfg::Mlp::ProcessSetup @endlink  or @link  Mfg::Mlp::Product   Mfg::Mlp::Product @endlink 
                            with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  Object found, or null if no such object exists.
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::INXObject * FindObject
                (
                    const char * journalIdentifier /** Name of the line, not allocated setup or product to be found */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
