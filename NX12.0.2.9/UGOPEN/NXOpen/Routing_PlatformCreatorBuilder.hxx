#ifndef NXOpen_ROUTING_PLATFORMCREATORBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PLATFORMCREATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PlatformCreatorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class PlatformCreatorBuilder;
    }
    class Builder;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    class Section;
    class SelectNXObject;
    namespace Routing
    {
        class _PlatformCreatorBuilderBuilder;
        class PlatformCreatorBuilderImpl;
        /** Builder for creating platform.
                Create platform: Takes platform outer boundaries sketch, platform plate boundaries sketch, platform plates,
                stocks for external and internal frames. Grate orientation symbol display is optional. <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreatePlatformCreatorBuilder  NXOpen::Routing::RouteManager::CreatePlatformCreatorBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  PlatformCreatorBuilder : public NXOpen::Builder
        {
            /** The grate orientation symbol reference */
            public: enum ReferenceType
            {
                ReferenceTypeHorizontal/** horizontal */ ,
                ReferenceTypeVertical/** vertical */ 
            };

            private: PlatformCreatorBuilderImpl * m_platformcreatorbuilder_impl;
            private: friend class  _PlatformCreatorBuilderBuilder;
            protected: PlatformCreatorBuilder();
            public: ~PlatformCreatorBuilder();
            /** The specify plate button callback 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SpecifyPlate
            (
            );
            /**Returns  the platform outer boundary section 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Section * SelectOuterBoundary
            (
            );
            /**Returns  the platform part boundaries section 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Section * PlateBoundariesSelection
            (
            );
            /**Returns  the grate orientation symbol display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: bool GrateOrientationSymbolDisplay
            (
            );
            /**Sets  the grate orientation symbol display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetGrateOrientationSymbolDisplay
            (
                bool grateOrientationSymbolDisplay /** grateorientationsymboldisplay */ 
            );
            /**Returns  the grate orientation reference 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::PlatformCreatorBuilder::ReferenceType GrateOrientationReference
            (
            );
            /**Sets  the grate orientation reference 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetGrateOrientationReference
            (
                NXOpen::Routing::PlatformCreatorBuilder::ReferenceType grateOrientationReference /** grateorientationreference */ 
            );
            /**Returns  the grate orientation symbol ref selection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::SelectNXObject * GrateOrientationSymbolRefSelection
            (
            );
            /**Returns  the thicken direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: bool ThickenDirection
            (
            );
            /**Sets  the thicken direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetThickenDirection
            (
                bool thickenDirection /** thickendirection */ 
            );
            /**Returns  the external frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXString ExternalFrameAnchorName
            (
            );
            /**Sets  the external frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetExternalFrameAnchorName
            (
                const NXString & anchorName /** anchorname */ 
            );
            /**Sets  the external frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            void SetExternalFrameAnchorName
            (
                const char * anchorName /** anchorname */ 
            );
            /**Returns  the internal frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXString InternalFrameAnchorName
            (
            );
            /**Sets  the internal frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetInternalFrameAnchorName
            (
                const NXString & anchorName /** anchorname */ 
            );
            /**Sets  the internal frame stock anchor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            void SetInternalFrameAnchorName
            (
                const char * anchorName /** anchorname */ 
            );
            /**Returns  the external frame stock settings for stock assignment. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::PathStockBuilder * ExternalStockSettings
            (
            );
            /**Returns  the internal stock settings for stock assignment. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::PathStockBuilder * InternalStockSettings
            (
            );
            /**Returns  the internal frame use same stock option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: bool UseSameStock
            (
            );
            /**Sets  the internal frame use same stock option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetUseSameStock
            (
                bool internalFrameFlipStock /** internalframeflipstock */ 
            );
            /** Gets the plate part which data is used for platform plate  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::CharacteristicList * GetPlatePart
            (
            );
            /** Sets the plate part which data is used for plaform plate
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetPlatePart
            (
                NXOpen::Routing::CharacteristicList * platePart /** platepart */ 
            );
            /** Gets the plate charx which is used for platform plate @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: NXOpen::Routing::CharacteristicList * GetPlateAppliedCharx
            (
            );
            /** Sets the  plate charx which is used for platform plate
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_platform ("Routing Platform") */
            public: void SetPlateAppliedCharx
            (
                NXOpen::Routing::CharacteristicList * appliedCharx /** appliedcharx */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
