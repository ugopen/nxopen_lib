#ifndef NXOpen_TOOLING_BENDINSERTDESIGNBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BENDINSERTDESIGNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BendInsertDesignBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class BendInsertDesignBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    class Expression;
    class Face;
    class Plane;
    class ScCollector;
    class Section;
    namespace Tooling
    {
        class _BendInsertDesignBuilderBuilder;
        class BendInsertDesignBuilderImpl;
        /**  Represents a @link NXOpen::Tooling::BendInsertDesignBuilder NXOpen::Tooling::BendInsertDesignBuilder@endlink 
                  Bend Insert Design is to create inset puch or die for bend .  <br> To create a new instance of this class, use @link NXOpen::Tooling::BendInsertDesignCollection::CreateBendInsertDesignBuilder  NXOpen::Tooling::BendInsertDesignCollection::CreateBendInsertDesignBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BendType </td> <td> 
         
        Sbend </td> </tr> 

        <tr><td> 
         
        BendingDirection </td> <td> 
         
        Down </td> </tr> 

        <tr><td> 
         
        BlankPosition </td> <td> 
         
        PunchPlate </td> </tr> 

        <tr><td> 
         
        BottomPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CompositeInsert </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ConceptDesign </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DiePlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Extend.Value </td> <td> 
         
        5 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtrudeEnd.Value </td> <td> 
         
        5 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtrudeStart.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        FalseBody </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InsertType </td> <td> 
         
        Punch </td> </tr> 

        <tr><td> 
         
        ParentNode </td> <td> 
         
        Sub </td> </tr> 

        <tr><td> 
         
        PunchPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ReName </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripperPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        Standard </td> </tr> 

        <tr><td> 
         
        UseBottomPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseDiePlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UsePunchPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseStripperPlateClearance </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  BendInsertDesignBuilder : public NXOpen::Builder
        {
            /** the bending operation. */
            public: enum Types
            {
                TypesStandard/** standard insert */,
                TypesUserDefined/** user defined */,
                TypesDelete/** delete */
            };

            /** the bending direction. */
            public: enum BendingDirectionOption
            {
                BendingDirectionOptionUp/** bending up */,
                BendingDirectionOptionDown/** bending down */
            };

            /** the bend type. */
            public: enum BendTypeOption
            {
                BendTypeOptionSbend/** 90 degree bend */,
                BendTypeOptionAbend/** angle bend */,
                BendTypeOptionZbend/** z bend */,
                BendTypeOptionVbend/** v bend */,
                BendTypeOptionUzbend/** universal z bend */
            };

            /** the insert type. */
            public: enum InsertTypeOption
            {
                InsertTypeOptionPunch/** punch insert */,
                InsertTypeOptionDie/** die insert */
            };

            /** the parent node. */
            public: enum ParentOption
            {
                ParentOptionSub/** sub parent */
            };

            /** Specifies the blank position. */
            public: enum BlankPositions
            {
                BlankPositionsPunchPlate/** the blank is on the punch plate*/,
                BlankPositionsStripperPlate/** the blank is on the stripper plate*/
            };

            private: BendInsertDesignBuilderImpl * m_bendinsertdesignbuilder_impl;
            private: friend class  _BendInsertDesignBuilderBuilder;
            protected: BendInsertDesignBuilder();
            public: ~BendInsertDesignBuilder();
            /**Returns  the operation type of bending insert design. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::Types Type
            (
            );
            /**Sets  the operation type of bending insert design. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::BendInsertDesignBuilder::Types type /** type */ 
            );
            /**Returns  the bend face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BendFace
            (
            );
            /**Returns  the bending direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::BendingDirectionOption BendingDirection
            (
            );
            /**Sets  the bending direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendingDirection
            (
                NXOpen::Tooling::BendInsertDesignBuilder::BendingDirectionOption bendingDirection /** bendingdirection */ 
            );
            /**Returns  the bend type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::BendTypeOption BendType
            (
            );
            /**Sets  the bend type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendType
            (
                NXOpen::Tooling::BendInsertDesignBuilder::BendTypeOption bendType /** bendtype */ 
            );
            /**Returns  the insert type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::InsertTypeOption InsertType
            (
            );
            /**Sets  the insert type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertType
            (
                NXOpen::Tooling::BendInsertDesignBuilder::InsertTypeOption insertType /** inserttype */ 
            );
            /**Returns  the parent node. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::ParentOption ParentNode
            (
            );
            /**Sets  the parent node. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentNode
            (
                NXOpen::Tooling::BendInsertDesignBuilder::ParentOption parentNode /** parentnode */ 
            );
            /**Returns  the intersect plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * IntersectPlane
            (
            );
            /**Sets  the intersect plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetIntersectPlane
            (
                NXOpen::Plane * intersectPlane /** intersectplane */ 
            );
            /**Returns  the extrude sketch. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ExtrudeSketch
            (
            );
            /**Returns  the extrude start, A half when composite insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExtrudeStart
            (
            );
            /**Returns  the extrude end, A half when composite insert.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExtrudeEnd
            (
            );
            /**Returns  the extrude start - B half. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExtrudeStart1
            (
            );
            /**Returns  the extrude end B -half. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExtrudeEnd1
            (
            );
            /**Returns  the extend. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Extend
            (
            );
            /**Returns  the flip trim feature direction of insert. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: bool FlipTrimDirection
            (
            );
            /**Sets  the flip trim feature direction of insert. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFlipTrimDirection
            (
                bool flipTrimDirection /** fliptrimdirection */ 
            );
            /**Returns  the rename option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReName
            (
            );
            /**Sets  the rename option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReName
            (
                bool reName /** rename */ 
            );
            /**Returns  the concept design option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConceptDesign
            (
            );
            /**Sets  the concept design option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetConceptDesign
            (
                bool conceptDesign /** conceptdesign */ 
            );
            /**Returns  the false body creation option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FalseBody
            (
            );
            /**Sets  the false body creation option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFalseBody
            (
                bool falseBody /** falsebody */ 
            );
            /**Returns  the composite insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CompositeInsert
            (
            );
            /**Sets  the composite insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCompositeInsert
            (
                bool compositeInsert /** compositeinsert */ 
            );
            /**Returns  the parent part name to create insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPartName
            (
                const NXString & parentPart /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetParentPartName
            (
                const char * parentPart /** Specifies the parent part name */
            );
            /**Returns  the new component name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewPartName
            (
            );
            /**Sets  the new component name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNewPartName
            (
                const NXString & newPartNames /** Specifies the new component name */
            );
            /**Sets  the new component name. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetNewPartName
            (
                const char * newPartNames /** Specifies the new component name */
            );
            /** Sets the face occurrences into builder attribute.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFaces
            (
                const std::vector<NXOpen::Face *> & faceOccs /** array of face occurrences */
            );
            /**Returns  the auto datum plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAutoDatum
            (
            );
            /**Sets  the auto datum plane 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAutoDatum
            (
                bool isInner /** isinner */ 
            );
            /**Returns  the option to use punch plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePunchPlateClearance
            (
            );
            /**Sets  the option to use punch plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUsePunchPlateClearance
            (
                bool usePPClearance /** useppclearance */ 
            );
            /**Returns  the clearance value of punch plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPlateClearance
            (
            );
            /**Sets  the clearance value of punch plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPlateClearance
            (
                double punchPlateClr /** punchplateclr */ 
            );
            /**Returns  the option to use bottom backing plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseBottomPlateClearance
            (
            );
            /**Sets  the option to use bottom backing plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUseBottomPlateClearance
            (
                bool useBPClearance /** usebpclearance */ 
            );
            /**Returns  the clearance value of bottom backing plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double BottomPlateClearance
            (
            );
            /**Sets  the clearance value of bottom backing plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBottomPlateClearance
            (
                double bottomPlateClr /** bottomplateclr */ 
            );
            /**Returns  the option to use stripper plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseStripperPlateClearance
            (
            );
            /**Sets  the option to use stripper plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUseStripperPlateClearance
            (
                bool useSPClearance /** usespclearance */ 
            );
            /**Returns  the clearance value of  stripper plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double StripperPlateClearance
            (
            );
            /**Sets  the clearance value of  stripper plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStripperPlateClearance
            (
                double stripperPlateClr /** stripperplateclr */ 
            );
            /**Returns  the option to use die plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseDiePlateClearance
            (
            );
            /**Sets  the option to use die plate clearance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUseDiePlateClearance
            (
                bool useDPClearance /** usedpclearance */ 
            );
            /**Returns  the clearance value of die plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DiePlateClearance
            (
            );
            /**Sets  the clearance value of die plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDiePlateClearance
            (
                double diePlateClr /** dieplateclr */ 
            );
            /**Returns  the blank position in punch plate or stripper plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BendInsertDesignBuilder::BlankPositions BlankPosition
            (
            );
            /**Sets  the blank position in punch plate or stripper plate. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBlankPosition
            (
                NXOpen::Tooling::BendInsertDesignBuilder::BlankPositions blankPosition /** blankposition */ 
            );
            /** Add the new bend insert component 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddInsertComponent
            (
            );
            /**Returns  the select insert to delete 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * InsertComponent
            (
            );
            /**Returns  the select insert to edit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * InsertToEdit
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
