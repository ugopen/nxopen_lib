#ifndef NXOpen_CAE_COMACVIEWERBUILDER_HXX_INCLUDED
#define NXOpen_CAE_COMACVIEWERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ComacViewerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ComacViewerBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CorrelSolution;
    }
    namespace CAE
    {
        class _ComacViewerBuilderBuilder;
        class ComacViewerBuilderImpl;
        /** Represents the correlation MAC matrix viewer builder  <br> To create a new instance of this class, use @link NXOpen::CAE::CorrelSolutionCollection::CreateComacViewerBuilder  NXOpen::CAE::CorrelSolutionCollection::CreateComacViewerBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ComacViewerBuilder : public NXOpen::Builder
        {
            private: ComacViewerBuilderImpl * m_comacviewerbuilder_impl;
            private: friend class  _ComacViewerBuilderBuilder;
            protected: ComacViewerBuilder();
            public: ~ComacViewerBuilder();
            /** Access the reference modes 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void Init
            (
                NXOpen::CAE::CorrelSolution * solution /** Correlation to display COMAC value */,
                const std::vector<double> & comacsValues /** COMAC Value */,
                const std::vector<int> & nodeIndex /** Node Index */,
                const std::vector<int> & dofIndex /** Dof Index */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
