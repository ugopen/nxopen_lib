#ifndef NXOpen_CAE_CONNECTIONS_TYPES_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_TYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Types.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            /** Material definition types */
            enum MaterialType
            {
                MaterialTypeUser/** User defined material */,
                MaterialTypeFromSupport/** Material defined from support */
            };

            /** Diameter definition types */
            enum DiameterType
            {
                DiameterTypeUser/** User defined diameter */,
                DiameterTypeFormula/** Formula defined diameter */,
                DiameterTypeTableFile/** Table defined diameter */
            };

            /** Types of height definitions */
            enum HeightType
            {
                HeightTypeUndefined/** Undefined height type, used for connections that don't use this parameter */ = -1,
                HeightTypeUser/** User defined thickness */,
                HeightTypeMeanOfFlangesThickness/** Mean of flanges thickness */,
                HeightTypeDistanceBetweenFlanges/** Distance between flanges */,
                HeightTypeDistanceBetweenFlangesMeanOfFlangesThickness/** Distance between flanges - Mean of flanges thickness */,
                HeightTypeDistanceBetweenFlangesMaxOfFlangesThickness/** Distance between flanges - Max of flanges thickness */
            };

            /** Location type */
            enum LocationType
            {
                LocationTypeCoordinates/** Coordinates */,
                LocationTypePoint/** Point */,
                LocationTypeNode/** Node */,
                LocationTypeSeriesOfNodes/** Series Of Nodes */,
                LocationTypeSeriesOfCoordinates/** Series Of Coordinates*/,
                LocationTypeCurve/** Curve */,
                LocationTypeFeEdgeGroup/** Group Of Element Edges */,
                LocationTypeSeriesOfPoints/** Series Of Points */,
                LocationTypeLocationWithDirection/** Location with direction */,
                LocationTypeSelectionRecipe/** Selection Recipe */
            };

            /** Csys types */
            enum CsysType
            {
                CsysTypeExisting/** Existing CSYS */,
                CsysTypePredefined/** Predefined CSYS */,
                CsysTypeAbsolute/** Absolute CSYS */,
                CsysTypeLocalCartesian/** Local Cartesian CSYS */,
                CsysTypeLocalCylindrical/** Local Cylindrical CSYS */,
                CsysTypeLocalSpherical/** Local Spherical CSYS */
            };

            /** Element status */
            enum ElementStatusType
            {
                ElementStatusTypeInvalid/** Invalid */,
                ElementStatusTypeNotUpdated/** Not updated */,
                ElementStatusTypeUpdated/** Updated */
            };

            /** Modelization PPTRefTargetType */
            enum ModelizationPPTRefTargetType
            {
                ModelizationPPTRefTargetTypeNone/** None */,
                ModelizationPPTRefTargetTypeEc/** Element collector */,
                ModelizationPPTRefTargetTypeEcc/** Element collector container */,
                ModelizationPPTRefTargetTypeEad/** Element Associated Data */
            };

            /** Modelization result type */
            enum ModelizationResultType
            {
                ModelizationResultTypeNone/** None */,
                ModelizationResultTypeMaterial/** Material */,
                ModelizationResultTypeWeights/** Interpolation element weights */,
                ModelizationResultTypeSection/** Section */,
                ModelizationResultTypeCsys/** Csys */,
                ModelizationResultTypeStiffness/** Stiffness */,
                ModelizationResultTypeViscousDamping/** ViscousDamping */,
                ModelizationResultTypeStructuralDamping/** StructuralDamping */,
                ModelizationResultTypeDofs/** Dofs */,
                ModelizationResultTypeDynamicStiffness/** Dynamic Stiffness */,
                ModelizationResultTypeDynamicViscousDamping/** Dynamic ViscousDamping */,
                ModelizationResultTypeDynamicStructuralDamping/** Dynamic StructuralDamping */
            };

            /** Head diameter definition types */
            enum HeadDiameterType
            {
                HeadDiameterTypeUser/** User defined diameter */,
                HeadDiameterTypeFactorOfDiameter/** User defined relationship with bolt diameter */
            };

            /** Location and Direction type */
            enum LocationDirectionType
            {
                LocationDirectionTypePoint/** Two Points/Nodes */,
                LocationDirectionTypeVector/** Points/Node and Vector */,
                LocationDirectionTypeCurve/** Curves */
            };

            /** Seam Weld Type */
            enum SeamWeldType
            {
                SeamWeldTypeWithMaterial/** Seam weld done with material */,
                SeamWeldTypeWithLaser/** Seam weld done by laser */
            };

            /** Seam Weld Material type */
            enum SeamWeldMaterialType
            {
                SeamWeldMaterialTypeAngle/** Seam weld angle material type */,
                SeamWeldMaterialTypeOverlap/** Seam weld overlap material type */,
                SeamWeldMaterialTypeDouble/** Seam weld double material type */
            };

            /** Degrees Of Freedom types */
            enum DofType
            {
                DofTypeFree/** The DOF is not constrained */,
                DofTypeFixed/** The DOF is fixed */
            };

            /** Degrees Of Freedom Combination types */
            enum DofCombination
            {
                DofCombinationUserDefined/** User defined combination for all DOFs */,
                DofCombinationClamp/** DOF1 fixed, DOF2 fixed, DOF3 fixed, DOF4 fixed, DOF5 fixed, DOF6 fixed */,
                DofCombinationSpheric/** DOF1 fixed, DOF2 fixed, DOF3 fixed, DOF4 free,  DOF5 free,  DOF6 free */,
                DofCombinationPoint/** DOF1 fixed, DOF2 free,  DOF3 free,  DOF4 free,  DOF5 free,  DOF6 free */,
                DofCombinationSlider/** DOF1 free,  DOF2 fixed, DOF3 fixed, DOF4 fixed, DOF5 fixed, DOF6 fixed */,
                DofCombinationPivot/** DOF1 fixed, DOF2 fixed, DOF3 fixed, DOF4 free,  DOF5 fixed, DOF6 fixed */,
                DofCombinationSliderPivot/** DOF1 free,  DOF2 fixed, DOF3 fixed, DOF4 free,  DOF5 fixed, DOF6 fixed */,
                DofCombinationCardan/** DOF1 fixed, DOF2 fixed, DOF3 fixed, DOF4 free,  DOF5 fixed, DOF6 free */
            };

            /** Nodal Target types */
            enum NodalTargetType
            {
                NodalTargetTypeSinglePoint/** Single Point */,
                NodalTargetTypeSetOfPoints/** Set of Points */,
                NodalTargetTypeSpider/** Spider */,
                NodalTargetTypeNone/** None */
            };

            /** Degrees of freedom definition */
            enum Dof
            {
                DofX/** X Translation degree of freedom */,
                DofY/** Y Translation degree of freedom */,
                DofZ/** Z Translation degree of freedom */,
                DofRx/** X Rotation degree of freedom */,
                DofRy/** Y Rotation degree of freedom */,
                DofRz/** Z Rotation degree of freedom */
            };

            /** Nodal pairing method */
            enum NodalPairingMethod
            {
                NodalPairingMethodProximity/** Proximity */,
                NodalPairingMethodOrientatedSearch/** Oriented Search */,
                NodalPairingMethodSelectionOrder/** Selection Order */
            };

            /** Nodal target dependency type */
            enum TargetDependencyType
            {
                TargetDependencyTypeNone/** No dependency */,
                TargetDependencyTypeDependent/** Dependent target */,
                TargetDependencyTypeIndependent/** Independent target */
            };

            /** connection DB item stiffness type */
            enum ConnectionDBItemStiffnessType
            {
                ConnectionDBItemStiffnessTypeNone/** None */,
                ConnectionDBItemStiffnessTypeRectangular/** Rectangular */,
                ConnectionDBItemStiffnessTypeSpherical/** Spherical */,
                ConnectionDBItemStiffnessTypeCylindrical/** Cylindrical */
            };

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
