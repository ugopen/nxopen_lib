#ifndef NXOpen_FEATURES_BLENDCORNERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_BLENDCORNERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BlendCornerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_BlendSetbackBuilder.hxx>
#include <NXOpen/GeometricUtilities_TransitionCurveBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class BlendCornerBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BlendSetbackBuilder;
    }
    namespace GeometricUtilities
    {
        class BlendSetbackBuilderList;
    }
    namespace GeometricUtilities
    {
        class TransitionCurveBuilder;
    }
    namespace GeometricUtilities
    {
        class TransitionCurveBuilderList;
    }
    class Point;
    namespace Features
    {
        class _BlendCornerBuilderBuilder;
        class BlendCornerBuilderImpl;
        /**
                Represents a @link NXOpen::Features::BlendCorner NXOpen::Features::BlendCorner@endlink  builder.
             <br> To create a new instance of this class, use @link NXOpen::Features::FreeformSurfaceCollection::CreateBlendCornerBuilder  NXOpen::Features::FreeformSurfaceCollection::CreateBlendCornerBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AllowTransitionCurveOnBlends </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Continuity </td> <td> 
         
        G1 </td> </tr> 

        <tr><td> 
         
        Fullness.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        SewToBody </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        UseCenterPoint </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  BlendCornerBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Continuity options */
            public: enum ContinuityTypes
            {
                ContinuityTypesG1/** Tangent continuity */,
                ContinuityTypesG2/** Curvature continuity */
            };

            private: BlendCornerBuilderImpl * m_blendcornerbuilder_impl;
            private: friend class  _BlendCornerBuilderBuilder;
            protected: BlendCornerBuilder();
            public: ~BlendCornerBuilder();
            /** Create a blend setback builder object.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::GeometricUtilities::BlendSetbackBuilder * CreateBlendSetbackBuilder
            (
            );
            /**Returns  the limit curve list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BlendSetbackBuilderList * LimitCurveList
            (
            );
            /** Create a transition curve data builder object.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::GeometricUtilities::TransitionCurveBuilder * CreateTransitionCurveBuilder
            (
            );
            /**Returns  the transition curve list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TransitionCurveBuilderList * TransitionCurveList
            (
            );
            /**Returns  the use center point flag. It will enable/disable the shape fullness control. 
                        When the control is enabled, the patch surface will pass through the specified center point.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCenterPoint
            (
            );
            /**Sets  the use center point flag. It will enable/disable the shape fullness control. 
                        When the control is enabled, the patch surface will pass through the specified center point.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetUseCenterPoint
            (
                bool useCenterPoint /** usecenterpoint */ 
            );
            /**Returns  the fullness value. It is an offset distance of the center point 
                        from the default position when the center point control is off. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Fullness
            (
            );
            /**Returns  the center point. The corner patch will pass through the center point. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * CenterPoint
            (
            );
            /**Sets  the center point. The corner patch will pass through the center point. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCenterPoint
            (
                NXOpen::Point * centerPoint /** centerpoint */ 
            );
            /**Returns  the sew to body 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool SewToBody
            (
            );
            /**Sets  the sew to body 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetSewToBody
            (
                bool sewToBody /** sewtobody */ 
            );
            /**Returns  the transition curve on blend faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowTransitionCurveOnBlends
            (
            );
            /**Sets  the transition curve on blend faces 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetAllowTransitionCurveOnBlends
            (
                bool allow /** allow */ 
            );
            /**Returns  the continuity type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::BlendCornerBuilder::ContinuityTypes Continuity
            (
            );
            /**Sets  the continuity type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetContinuity
            (
                NXOpen::Features::BlendCornerBuilder::ContinuityTypes continuity /** continuity */ 
            );
            /**Returns  the distance tolerance. It will be used to control the precision of curves and corner surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. It will be used to control the precision of curves and corner surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. It will be used to control the tangency of the curves and corner surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. It will be used to control the tangency of the curves and corner surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
