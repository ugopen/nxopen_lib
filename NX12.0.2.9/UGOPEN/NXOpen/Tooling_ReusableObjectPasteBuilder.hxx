#ifndef NXOpen_TOOLING_REUSABLEOBJECTPASTEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_REUSABLEOBJECTPASTEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ReusableObjectPasteBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ReusableObjectPasteBuilder;
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Sketch;
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class _ReusableObjectPasteBuilderBuilder;
        class ReusableObjectPasteBuilderImpl;
        /** Represents a @link NXOpen::Tooling::ReusableObjectPasteBuilder NXOpen::Tooling::ReusableObjectPasteBuilder@endlink   <br> Use the @link NXOpen::Tooling::ReusableObjectManager NXOpen::Tooling::ReusableObjectManager@endlink  class to create a ReusableObjectPasteBuilder.  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ReusableObjectPasteBuilder : public NXOpen::Builder
        {
            /** Specifies the design option */
            public: enum PasteMethods
            {
                PasteMethodsNone/** None*/,
                PasteMethodsAdd/** Add*/,
                PasteMethodsSubtract/** Subtract*/,
                PasteMethodsUserdefined/** UserDefined*/,
                PasteMethodsSolidpunch/** SolidPunch*/
            };

            private: ReusableObjectPasteBuilderImpl * m_reusableobjectpastebuilder_impl;
            private: friend class  _ReusableObjectPasteBuilderBuilder;
            protected: ReusableObjectPasteBuilder();
            public: ~ReusableObjectPasteBuilder();
            /**Returns  the design option to select Boolean operation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusableObjectPasteBuilder::PasteMethods PasteMethod
            (
            );
            /**Sets  the design option to select Boolean operation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPasteMethod
            (
                NXOpen::Tooling::ReusableObjectPasteBuilder::PasteMethods pasteMethod /** pastemethod */ 
            );
            /**Returns  the initial paste location, this is mainly used to define default paste location of sketch objects 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d InitialPasteLocation
            (
            );
            /**Sets  the initial paste location, this is mainly used to define default paste location of sketch objects 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialPasteLocation
            (
                const NXOpen::Point3d & dropLocation /** Drop location coordinates in absolute */
            );
            /**Returns  the option specifying whether to use one-pick position method for drag/drop 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseOnePickPositionMethod
            (
            );
            /**Sets  the option specifying whether to use one-pick position method for drag/drop 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseOnePickPositionMethod
            (
                bool useOnePickPositionMethod /** useonepickpositionmethod */ 
            );
            /**Returns  the option specifying whether to associate the csys of reuse object to target entity 
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the option specifying whether to associate the csys of reuse object to target entity 
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : None */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the feature group created after reuse paste 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * EditFeatureGroup
            (
            );
            /**Sets  the feature group created after reuse paste 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditFeatureGroup
            (
                NXOpen::NXObject * featureGroup /** featuregroup */ 
            );
            /**Returns  the origin of dynamic csys 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d DynamicCsysOrigin
            (
            );
            /**Sets  the origin of dynamic csys 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicCsysOrigin
            (
                const NXOpen::Point3d & origin /** Origin of dynamic csys */
            );
            /**Returns  the orientation of dynamic csys 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 DynamicCsysOrientation
            (
            );
            /**Sets  the orientation of dynamic csys 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicCsysOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Orientation of dynamic csys */
            );
            /**Returns  the target body required for boolean operation 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TargetBody
            (
            );
            /**Sets  the target body required for boolean operation 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetBody
            (
                NXOpen::NXObject * body /** Target body */
            );
            /**Returns  the target face required for solid punch 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TargetFace
            (
            );
            /**Sets  the target face required for solid punch 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetFace
            (
                NXOpen::NXObject * face /** Target face */
            );
            /**Returns  the drop face required for reattach sketch when using one-pick position method  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * DropFace
            (
            );
            /**Sets  the drop face required for reattach sketch when using one-pick position method  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDropFace
            (
                NXOpen::NXObject * face /** Drop face */
            );
            /**Returns  the imported sketch  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ImportedSketch
            (
            );
            /**Sets  the imported sketch  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportedSketch
            (
                NXOpen::NXObject * sketch /** Imported sketch */
            );
            /** Gets the spreadsheet data  @return  Spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpreadsheetData * GetSpreadsheetData
            (
            );
            /** Sets the spreadsheet data 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpreadsheetData
            (
                NXOpen::Tooling::SpreadsheetData * spreadsheetData /** Spreadsheet data */
            );
            /** Updates the spreadsheet data according to the expressions in part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateSpreadsheetData
            (
            );
            /** Moves the body to the selected point and orientation 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RepositionBody
            (
                const NXOpen::Point3d & target /** Destination point */,
                const NXOpen::Matrix3x3 & orient /** Orientation */,
                bool twoPickPositionMode /** Flag specifying whether to reposition the body based on active sketch plane when using two pick position method to drop the body. If True, reposition the body, else, do nothing. */
            );
            /**Returns  the library name. This library name is used for the reusable object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LibraryName
            (
            );
            /**Sets  the library name. This library name is used for the reusable object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLibraryName
            (
                const NXString & libraryName /** Library name */
            );
            /**Sets  the library name. This library name is used for the reusable object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetLibraryName
            (
                const char * libraryName /** Library name */
            );
            /** Sets library information for the feature 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLibraryInformation
            (
                NXOpen::NXObject * feature /** Reusable object feature */,
                const NXString & libraryName /** Library name */,
                const NXString & relativePath /** Relative path where library is located */
            );
            /** Sets library information for the feature 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetLibraryInformation
            (
                NXOpen::NXObject * feature /** Reusable object feature */,
                const char * libraryName /** Library name */,
                const char * relativePath /** Relative path where library is located */
            );
            /** Imports given part file to current work part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void LoadPart
            (
                const NXString & partFileName /** Part file name */,
                NXOpen::NXObject * dropEntity /** Selected body face or datum plane of CSYS */,
                std::vector<NXOpen::NXObject *> & loadedObjects /** Objects, mainly bodies, from the imported part */
            );
            /** Imports given part file to current work part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void LoadPart
            (
                const char * partFileName /** Part file name */,
                NXOpen::NXObject * dropEntity /** Selected body face or datum plane of CSYS */,
                std::vector<NXOpen::NXObject *> & loadedObjects /** Objects, mainly bodies, from the imported part */
            );
            /** Gets the created objects 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetCreatedObjects
            (
                std::vector<NXOpen::NXObject *> & createdObjects /** Objects, mainly bodies, from the imported part */
            );
            /** Creates the pattern objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePatternObjects
            (
                bool createPattern /** Flag indicating whether to create pattern objects or delete */
            );
            /**Returns  the geometry pattern feature
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * PatternFeature
            (
            );
            /**Sets  the geometry pattern feature
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPatternFeature
            (
                NXOpen::NXObject * pattern /** Pattern feature */
            );
            /**Returns  the pattern sketch for reusable object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Sketch * PatternSketch
            (
            );
            /**Sets  the pattern sketch for reusable object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPatternSketch
            (
                NXOpen::Sketch * sketch /** Pattern sketch */
            );
            /**Returns the positioning feature set by pattern sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * PositioningFeatSet
            (
            );
            /** Updates location of reusable object after edit pattern points 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateLocation
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
