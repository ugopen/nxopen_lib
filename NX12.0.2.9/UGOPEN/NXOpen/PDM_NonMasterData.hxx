#ifndef NXOpen_PDM_NONMASTERDATA_HXX_INCLUDED
#define NXOpen_PDM_NONMASTERDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_NonMasterData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class NonMasterData;
    }
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class NonMasterDataImpl;
        /** Represents a class that performs various operations on NonMaster Datasets 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  NonMasterData : public NXOpen::TransientObject
        {
            /** This enum is used to specify which non-master parts 
                    should be copied to new part during the save as operation. 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: enum CopyNonMasterPartsOption
            {
                CopyNonMasterPartsOptionAll/** save all during save as */,
                CopyNonMasterPartsOptionNone/** save none during save as */
            };

            private: NonMasterDataImpl * m_nonmasterdata_impl;
            /// \cond NX_NO_DOC 
            public: explicit NonMasterData(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~NonMasterData();
            /** Create NonMaster list for the selected logical Object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateNonMasterListForLogicalObject
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /** Gets NonMaster list for the given logical Object  @return  Non-master part file names 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNonMasterListForCopyLogicalObject
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /** Returns whether or not the non-master part specified for the given @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink will actually
                    get saved during the save as operation.  @return  True means that this non-master will be saved.
                            False means that this non-master will not be saved. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsNonMasterForLogicalObjectBeingCopied
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & partName /** the non-master part that the caller wants to save or not save */
            );
            /** Returns whether or not the non-master part specified for the given @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink will actually
                    get saved during the save as operation.  @return  True means that this non-master will be saved.
                            False means that this non-master will not be saved. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            bool IsNonMasterForLogicalObjectBeingCopied
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * partName /** the non-master part that the caller wants to save or not save */
            );
            /**Get the nonmasters saveAs option for given logical object. Save As option can be one of these
                    @link NonMasterData::CopyNonMasterPartsOptionAll NonMasterData::CopyNonMasterPartsOptionAll@endlink  and 
                    @link NonMasterData::CopyNonMasterPartsOptionNone NonMasterData::CopyNonMasterPartsOptionNone@endlink  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::NonMasterData::CopyNonMasterPartsOption GetCopyNonMasterPartsOption
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ 
            );
            /**Set the nonmasters saveAs option for given logical object. Save As option can be one of these
                    @link NonMasterData::CopyNonMasterPartsOptionAll NonMasterData::CopyNonMasterPartsOptionAll@endlink  and 
                    @link NonMasterData::CopyNonMasterPartsOptionNone NonMasterData::CopyNonMasterPartsOptionNone@endlink 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNonMasterSaveAsOption
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                NXOpen::PDM::NonMasterData::CopyNonMasterPartsOption saveOption /** saveoption */ 
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedNonMasterToCopy
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & partName /** the non-master part whose save option is being set here */
            );
            /** Sets whether or not the non-master part specified will actually
                    get saved during the save as operation. True means that it will be
                    saved. False means that it will not be saved.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetSelectedNonMasterToCopy
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * partName /** the non-master part whose save option is being set here */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  flag to indicate whether the newName is valid 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditNonMasterToCopyName
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & oldName /** the non-master part whose save as name is being set here */,
                const NXString & newName /** the new name */
            );
            /** Sets the name the non-master part will get saved as. It will get saved as the
                    original non-master name if this method is not called.  @return  flag to indicate whether the newName is valid 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            bool EditNonMasterToCopyName
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * oldName /** the non-master part whose save as name is being set here */,
                const char * newName /** the new name */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
