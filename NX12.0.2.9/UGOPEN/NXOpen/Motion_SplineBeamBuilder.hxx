#ifndef NXOpen_MOTION_SPLINEBEAMBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_SPLINEBEAMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_SplineBeamBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_MarkerToNodeData.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class SplineBeamBuilder;
    }
    class Direction;
    class Expression;
    namespace Motion
    {
        class MarkerToNodeData;
    }
    namespace Motion
    {
        class MotionBuilder;
    }
    namespace Motion
    {
        class SelectBaseSection;
    }
    namespace Motion
    {
        class SelectLink;
    }
    namespace Motion
    {
        class SelectSplineBeamProperty;
    }
    class NXObject;
    class Point;
    class PointList;
    class SelectCurveList;
    namespace Motion
    {
        class _SplineBeamBuilderBuilder;
        class SplineBeamBuilderImpl;
        /** Represents a @link Motion::SplineBeamBuilder Motion::SplineBeamBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::SplineBeamCollection::CreateSplineBeamBuilder  NXOpen::Motion::SplineBeamCollection::CreateSplineBeamBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DefinitionMethod </td> <td> 
         
        Manual </td> </tr> 

        <tr><td> 
         
        NumberOfSections.Value </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  SplineBeamBuilder : public NXOpen::Motion::MotionBuilder
        {
            /** the definition method type*/
            public: enum DefinitionMethodType
            {
                DefinitionMethodTypeManual/** Manual */,
                DefinitionMethodTypeCurve/** Curve */
            };

            /** the definition of the section axis type*/
            public: enum SectionAxisType
            {
                SectionAxisTypeY/** Y Vector */,
                SectionAxisTypeZ/** Z Vector */
            };

            private: SplineBeamBuilderImpl * m_splinebeambuilder_impl;
            private: friend class  _SplineBeamBuilderBuilder;
            protected: SplineBeamBuilder();
            public: ~SplineBeamBuilder();
            /**Returns  the name of the spline beam object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name of the spline beam object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the spline beam object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the link object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * Link
            (
            );
            /**Returns  the definition method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SplineBeamBuilder::DefinitionMethodType DefinitionMethod
            (
            );
            /**Sets  the definition method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDefinitionMethod
            (
                NXOpen::Motion::SplineBeamBuilder::DefinitionMethodType type /** type */ 
            );
            /**Returns  the list of points 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::PointList * PointList
            (
            );
            /** Inserts an empty point to a location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void InsertEmptyPoint
            (
                int index /** index */ 
            );
            /** Assigns a point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AssignPoint
            (
                int index /** index */ ,
                NXOpen::Point * point /** point */ 
            );
            /** Removes a point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RemovePoint
            (
                int index /** index */ 
            );
            /** Swaps two points 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SwapPoints
            (
                int index1 /** index1 */ ,
                int index2 /** index2 */ 
            );
            /**Returns  the optional curves object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::SelectCurveList * Curves
            (
            );
            /**Returns  the number of sections 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * NumberOfSections
            (
            );
            /** Generates the points 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GeneratePoints
            (
            );
            /** Imports the points from an external file.
                    Allowed file types are .txt and Excel files
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ImportPointsFromFile
            (
                const NXString & filePath /** filepath */ 
            );
            /** Imports the points from an external file.
                    Allowed file types are .txt and Excel files
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ImportPointsFromFile
            (
                const char * filePath /** filepath */ 
            );
            /** Exports the points to an external file.
                    Allowed file types are .txt and Excel files
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportPointsToFile
            (
                const NXString & filePath /** filepath */ 
            );
            /** Exports the points to an external file.
                    Allowed file types are .txt and Excel files
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ExportPointsToFile
            (
                const char * filePath /** filepath */ 
            );
            /** Gets marker to node list Items  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::Motion::MarkerToNodeData *> GetMarkerItems
            (
            );
            /** Removes all markers 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RemoveAllMarkers
            (
            );
            /** Creates a new list item  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MarkerToNodeData * CreateMarkerToNode
            (
                NXOpen::NXObject * marker /** The marker tag*/,
                int markerPosition /** The i or j marker identity*/,
                int pointID /** The point ID */,
                bool useClosestNode /** Whether to move the node */
            );
            /**Returns  the tolerance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Tolerance
            (
            );
            /**Returns  the section orientation axis type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SplineBeamBuilder::SectionAxisType SectionAxis
            (
            );
            /**Sets  the section orientation axis type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSectionAxis
            (
                NXOpen::Motion::SplineBeamBuilder::SectionAxisType type /** type */ 
            );
            /**Returns  the section orientation vector 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Direction * SectionVector
            (
            );
            /**Sets  the section orientation vector 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSectionVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the section shape 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectBaseSection * SectionShape
            (
            );
            /**Returns  the structural property 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectSplineBeamProperty * StructuralProperty
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
