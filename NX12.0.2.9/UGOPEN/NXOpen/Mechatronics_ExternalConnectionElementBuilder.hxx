#ifndef NXOpen_MECHATRONICS_EXTERNALCONNECTIONELEMENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_EXTERNALCONNECTIONELEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_ExternalConnectionElementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class ExternalConnectionElementBuilder;
    }
    class Builder;
    namespace Mechatronics
    {
        class _ExternalConnectionElementBuilderBuilder;
        class ExternalConnectionElementBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::ExternalConnectionElementBuilder NXOpen::Mechatronics::ExternalConnectionElementBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::ExternalConnectionCollection::CreateExternalConnectionElementBuilder  NXOpen::Mechatronics::ExternalConnectionCollection::CreateExternalConnectionElementBuilder @endlink  <br> 
         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  ExternalConnectionElementBuilder : public NXOpen::Builder
        {
            /** the data type. */
            public: enum DataType
            {
                DataTypeUnknown/** unknown */,
                DataTypeInteger/** integer */,
                DataTypeFloat/** float   */,
                DataTypeBoolean/** boolean */
            };

            /** the condition type. */
            public: enum ConditionType
            {
                ConditionTypeEq/** equal */,
                ConditionTypeGt/** greater than */,
                ConditionTypeLt/** less than */,
                ConditionTypeGe/** greater than or equal */,
                ConditionTypeLe/** less than or equal */,
                ConditionTypeNe/** not equal */
            };

            /** the stream type. */
            public: enum StreamType
            {
                StreamTypeR/** read    */,
                StreamTypeW/** write   */,
                StreamTypeRw/** read and write */
            };

            private: ExternalConnectionElementBuilderImpl * m_externalconnectionelementbuilder_impl;
            private: friend class  _ExternalConnectionElementBuilderBuilder;
            protected: ExternalConnectionElementBuilder();
            public: ~ExternalConnectionElementBuilder();
            /**Returns  the property ID of physics object. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int PropertyId
            (
            );
            /**Sets  the property ID of physics object. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPropertyId
            (
                int propId /** propid */ 
            );
            /**Returns  the data type of signal. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::ExternalConnectionElementBuilder::DataType SignalDataType
            (
            );
            /**Sets  the data type of signal. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSignalDataType
            (
                NXOpen::Mechatronics::ExternalConnectionElementBuilder::DataType dataType /** datatype */ 
            );
            /**Returns  the name of signal. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString SignalName
            (
            );
            /**Sets  the name of signal. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSignalName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of signal. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSignalName
            (
                const char * name /** name */ 
            );
            /**Returns  the data type of physics property. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::ExternalConnectionElementBuilder::DataType PropertyDataType
            (
            );
            /**Sets  the data type of physics property. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPropertyDataType
            (
                NXOpen::Mechatronics::ExternalConnectionElementBuilder::DataType dataType /** datatype */ 
            );
            /**Returns  the data stream type. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::ExternalConnectionElementBuilder::StreamType StreamOption
            (
            );
            /**Sets  the data stream type. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetStreamOption
            (
                NXOpen::Mechatronics::ExternalConnectionElementBuilder::StreamType streamType /** streamtype */ 
            );
            /**Returns  the condition type. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::ExternalConnectionElementBuilder::ConditionType ConditionOption
            (
            );
            /**Sets  the condition type. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConditionOption
            (
                NXOpen::Mechatronics::ExternalConnectionElementBuilder::ConditionType type /** type */ 
            );
            /**Returns  the condition value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: double ConditionValue
            (
            );
            /**Sets  the condition value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConditionValue
            (
                double conditionValue /** conditionvalue */ 
            );
            /**Returns  the multiplier. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: double Multiplier
            (
            );
            /**Sets  the multiplier. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMultiplier
            (
                double multiplier /** multiplier */ 
            );
            /**Returns  the offset value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: double OffsetValue
            (
            );
            /**Sets  the offset value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetOffsetValue
            (
                double offset /** offset */ 
            );
            /**Returns  whether to inverse the logic value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool Inverse
            (
            );
            /**Sets  whether to inverse the logic value. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInverse
            (
                bool inverse /** inverse */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
