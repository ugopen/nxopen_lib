#ifndef NXOpen_VISUALREPORTING_VISUALREPORTBUILDER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_VISUALREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_VisualReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Validation.hxx>
#include <NXOpen/VisualReporting_Classifier.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_GroupLabel.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/VisualReporting_Rule.hxx>
#include <NXOpen/VisualReporting_VisualReport.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class VisualReportBuilder;
    }
    class Builder;
    namespace VisualReporting
    {
        class Classifier;
    }
    namespace VisualReporting
    {
        class Condition;
    }
    namespace VisualReporting
    {
        class GroupLabel;
    }
    namespace VisualReporting
    {
        class Property;
    }
    namespace VisualReporting
    {
        class Rule;
    }
    namespace VisualReporting
    {
        class VisualReport;
    }
    namespace VisualReporting
    {
        class _VisualReportBuilderBuilder;
        class VisualReportBuilderImpl;
        /** A Builder for creating and editing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink s.
             <br> To create a new instance of this class, use @link NXOpen::VisualReporting::VisualReportManager::CreateVisualReportBuilder  NXOpen::VisualReporting::VisualReportManager::CreateVisualReportBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  VisualReportBuilder : public NXOpen::Builder
        {
            /** Represents the usage option of reference @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                    */
            public: enum PropertyUsageOption
            {
                PropertyUsageOptionTooltip/**The property is used in tooltip only*/,
                PropertyUsageOptionInfoView/**The property is used in info view only*/,
                PropertyUsageOptionTooltipAndInfoView/** tooltip and info view */ 
            };

            private: VisualReportBuilderImpl * m_visualreportbuilder_impl;
            private: friend class  _VisualReportBuilderBuilder;
            protected: VisualReportBuilder();
            public: ~VisualReportBuilder();
            /** Creates a new empty @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  and starts editing it.
                        The created @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  will not be added to the
                        @link NXOpen::VisualReporting::VisualReportManager NXOpen::VisualReporting::VisualReportManager@endlink  until @link Builder::Commit Builder::Commit@endlink 
                        or @link NXOpen::VisualReporting::VisualReportBuilder::CommitAsCopy NXOpen::VisualReporting::VisualReportBuilder::CommitAsCopy@endlink  is called on this builder.
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport * CreateVisualReport
            (
            );
            /** Starts editing a @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink . The builder will create a
                        copy of the given VisualReport and all edits will be applied to that copy. When
                        @link Builder::Commit Builder::Commit@endlink  is called on this builder, the supplied
                        VisualReport will be deleted and replaced with the new one. Alternatively if
                        @link NXOpen::VisualReporting::VisualReportBuilder::CommitAsCopy NXOpen::VisualReporting::VisualReportBuilder::CommitAsCopy@endlink  is called, the copied @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        will be added to the @link NXOpen::VisualReporting::VisualReportManager NXOpen::VisualReporting::VisualReportManager@endlink  without deleting the one given in this function.

                        Any current @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  which this builder is currently
                        building will be deleted when this function is called.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void EditVisualReport
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** The visual report */
            );
            /** When @link Builder::Commit Builder::Commit@endlink  is called on this builder, it will
                        delete the original @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  whose copy the builder is editing and install the copied
                        @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  to the @link NXOpen::VisualReporting::VisualReportManager NXOpen::VisualReporting::VisualReportManager@endlink .
                        
                        If it is required not to delete the original @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink ,
                        then @link CommitAsCopy CommitAsCopy@endlink  can be called instead. This behaves
                        just like @link Builder::Commit Builder::Commit@endlink  except it does not delete the
                        original @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                     @return   
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport * CommitAsCopy
            (
            );
            /**Returns  the file name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.

                        Note that when NX is connected to Teamcenter, this property is the report dataset identifier from Teamcenter database. 
                        If it is a new report, it will be the report dataset name. When the report is save by @link NXOpen::VisualReporting::VisualReportBuilder::Save NXOpen::VisualReporting::VisualReportBuilder::Save@endlink , 
                        the report dataset identifier will be saved in this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilenameOfVisualReport
            (
            );
            /**Sets  the file name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.

                        Note that when NX is connected to Teamcenter, this property is the report dataset identifier from Teamcenter database. 
                        If it is a new report, it will be the report dataset name. When the report is save by @link NXOpen::VisualReporting::VisualReportBuilder::Save NXOpen::VisualReporting::VisualReportBuilder::Save@endlink , 
                        the report dataset identifier will be saved in this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilenameOfVisualReport
            (
                const NXString & filename /** The file name */
            );
            /**Sets  the file name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.

                        Note that when NX is connected to Teamcenter, this property is the report dataset identifier from Teamcenter database. 
                        If it is a new report, it will be the report dataset name. When the report is save by @link NXOpen::VisualReporting::VisualReportBuilder::Save NXOpen::VisualReporting::VisualReportBuilder::Save@endlink , 
                        the report dataset identifier will be saved in this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetFilenameOfVisualReport
            (
                const char * filename /** The file name */
            );
            /**Returns  the name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder. 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReportNameOfVisualReport
            (
            );
            /**Sets  the name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder. 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportNameOfVisualReport
            (
                const NXString & reportName /** The name of the report */
            );
            /**Sets  the name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder. 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetReportNameOfVisualReport
            (
                const char * reportName /** The name of the report */
            );
            /**Returns  the description of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DescriptionOfVisualReport
            (
            );
            /**Sets  the description of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescriptionOfVisualReport
            (
                const NXString & description /** The description */
            );
            /**Sets  the description of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetDescriptionOfVisualReport
            (
                const char * description /** The description */
            );
            /**Returns  the reporting style of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport::ReportingStyleOption ReportingStyleOfVisualReport
            (
            );
            /**Sets  the reporting style of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportingStyleOfVisualReport
            (
                NXOpen::VisualReporting::VisualReport::ReportingStyleOption reportingStyle /** The reporting style being set */
            );
            /**Returns  the reporting object type of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                        Only valid if the @link NXOpen::VisualReporting::VisualReport::ScopeType NXOpen::VisualReporting::VisualReport::ScopeType@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        is @link NXOpen::VisualReporting::VisualReport::ScopeTypeOptionComponent NXOpen::VisualReporting::VisualReport::ScopeTypeOptionComponent@endlink  type.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport::ReportingObjectTypeOption ReportingObjectTypeOfVisualReport
            (
            );
            /**Sets  the reporting object type of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                        Only valid if the @link NXOpen::VisualReporting::VisualReport::ScopeType NXOpen::VisualReporting::VisualReport::ScopeType@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        is @link NXOpen::VisualReporting::VisualReport::ScopeTypeOptionComponent NXOpen::VisualReporting::VisualReport::ScopeTypeOptionComponent@endlink  type.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportingObjectTypeOfVisualReport
            (
                NXOpen::VisualReporting::VisualReport::ReportingObjectTypeOption reportingObjectType /** The reporting object being set */
            );
            /** Sets whether use of @link NXOpen::VisualReporting::VisualReport::UnmatchedGroupLabel NXOpen::VisualReporting::VisualReport::UnmatchedGroupLabel@endlink 
                        is enabled for the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void EnableUnmatchedGroupOfVisualReport
            (
                bool enableUnmatchedGroup /** Whether the unmatched group is enabled */
            );
            /** Return the specified @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  from the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        being built by this builder.
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Rule * GetRule
            (
                int index /** The index of the returned @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . */
            );
            /** Returns all the @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink s in the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  
                        being built by this builder.
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::Rule *> GetRules
            (
            );
            /** Returns the @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink s associated with this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::Classifier *> GetClassifiersOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** rule */ 
            );
            /** Gets the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink 
                        for a multiple properties report.
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier * GetActiveClassifierOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** rule */ 
            );
            /** Sets the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink 
                        for a multiple properties report.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActiveClassifierOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** rule */ ,
                NXOpen::VisualReporting::Classifier * activeClassifier /** activeclassifier */ 
            );
            /**Returns  the bitmap name of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BitmapNameOfReportingProperty
            (
            );
            /**Sets  the bitmap name of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmapNameOfReportingProperty
            (
                const NXString & bitmapName /** The bitmap name */
            );
            /**Sets  the bitmap name of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmapNameOfReportingProperty
            (
                const char * bitmapName /** The bitmap name */
            );
            /**Returns the custom message of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomMessageOfReportingProperty
            (
            );
            /**Sets the custom message of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomMessageOfReportingProperty
            (
                const NXString & customMessage /** The custom message */
            );
            /**Sets the custom message of the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomMessageOfReportingProperty
            (
                const char * customMessage /** The custom message */
            );
            /** Gets the message @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink   list of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                        in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetReferencePropertiesOfReportingProperty
            (
                std::vector<NXOpen::VisualReporting::Property *> & properties /** The reference properties of property*/,
                std::vector<NXOpen::VisualReporting::VisualReportBuilder::PropertyUsageOption> & usages /** The usages */
            );
            /** Sets the message @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  list of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                        in the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferencePropertiesOfReportingProperty
            (
                const std::vector<NXOpen::VisualReporting::Property *> & properties /** The reference properties of property*/,
                const std::vector<NXOpen::VisualReporting::VisualReportBuilder::PropertyUsageOption> & usages /** The usages */
            );
            /** Gets the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  of this condition. 
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  The property 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property * GetPropertyOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  of this condition. If the
                        @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  is set to NULL, then it is
                        deleted.
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPropertyOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Property * property /** The property being set */
            );
            /** Removes the current @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  from this condition
                        without deleting it.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePropertyFromCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Gets the @link NXOpen::VisualReporting::Condition::OperatorOption NXOpen::VisualReporting::Condition::OperatorOption@endlink  of this condition. Only valid if
                        @link NXOpen::VisualReporting::Condition::TypeOption NXOpen::VisualReporting::Condition::TypeOption@endlink  is
                        @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  The operator type being set 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition::OperatorOption GetOperatorTypeOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link NXOpen::VisualReporting::Condition::OperatorOption NXOpen::VisualReporting::Condition::OperatorOption@endlink  of this condition. Only valid if
                        @link NXOpen::VisualReporting::Condition::TypeOption NXOpen::VisualReporting::Condition::TypeOption@endlink  is
                        @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOperatorTypeOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The operator type being set */
            );
            /** Gets the value of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . 
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetValueOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ 
            );
            /** Sets the value of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . 
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetValueOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ ,
                const NXString & value /** value */ 
            );
            /** Sets the value of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . 
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetValueOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ ,
                const char * value /** value */ 
            );
            /** Gets the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the value for comparison of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . 
                     @return  The property 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property * GetPropertyForComparison
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  in the value for comparison of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . If the
                        @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  is set to NULL, then it is
                        deleted.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPropertyForComparison
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Property * property /** The property being set */
            );
            /** Add a new child @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  to this condition. If the child is already a
                        child of another @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  or @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink , then it is
                        removed from that other object. The new child must have been created in the same
                        @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  as this parent condition. If this is a
                        @link NXOpen::VisualReporting::Condition::TypeOptionNotCondition NXOpen::VisualReporting::Condition::TypeOptionNotCondition@endlink  then
                        this replaces the existing child, and the existing child is deleted.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void AddChildToCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition * childCondition /** The child condition being added */
            );
            /** Removes a condition from its parent condition. If the condition has an associated @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                        that will be deleted too. If the condition has any child conditions, those will all
                        be deleted too.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveChildFromCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition * childCondition /** The child condition being removed */
            );
            /** Gets @link NXOpen::VisualReporting::Condition::HasUserSpecifiedValue NXOpen::VisualReporting::Condition::HasUserSpecifiedValue@endlink  on the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  Whether the condition's value should be user-specified 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetHasUserSpecifiedValueForCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets @link NXOpen::VisualReporting::Condition::HasUserSpecifiedValue NXOpen::VisualReporting::Condition::HasUserSpecifiedValue@endlink  on the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHasUserSpecifiedValueForCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                bool isUserSpecified /** Whether the condition's value should be user-specified */
            );
            /** Gets the @link NXOpen::VisualReporting::Condition::UserPrompt NXOpen::VisualReporting::Condition::UserPrompt@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  The user-prompt  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUserPromptOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link NXOpen::VisualReporting::Condition::UserPrompt NXOpen::VisualReporting::Condition::UserPrompt@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserPromptOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const NXString & userPrompt /** The user-prompt  */
            );
            /** Sets the @link NXOpen::VisualReporting::Condition::UserPrompt NXOpen::VisualReporting::Condition::UserPrompt@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            void SetUserPromptOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const char * userPrompt /** The user-prompt  */
            );
            /** Gets the @link NXOpen::VisualReporting::Condition::Description NXOpen::VisualReporting::Condition::Description@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     @return  The description 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetDescriptionOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link NXOpen::VisualReporting::Condition::Description NXOpen::VisualReporting::Condition::Description@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescriptionOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const NXString & description /** The description */
            );
            /** Sets the @link NXOpen::VisualReporting::Condition::Description NXOpen::VisualReporting::Condition::Description@endlink  of the
                        specified @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink .
                        Only valid for a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Type NXOpen::VisualReporting::Condition::Type@endlink  is @link NXOpen::VisualReporting::Condition::TypeOptionValueCondition NXOpen::VisualReporting::Condition::TypeOptionValueCondition@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            void SetDescriptionOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const char * description /** The description */
            );
            /** Gets the reporting @link NXOpen::VisualReporting::Classifier::TypeOption NXOpen::VisualReporting::Classifier::TypeOption@endlink  for the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The classifier type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier::TypeOption GetClassifierTypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the reporting @link NXOpen::VisualReporting::Classifier::TypeOption NXOpen::VisualReporting::Classifier::TypeOption@endlink  for the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .

                        Note that the old @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  will be deleted 
                        and a new @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  will be created and set as the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The new active classifier 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier * SetClassifierTypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Classifier::TypeOption classifierType /** The classifier type being set */
            );
            /** Gets the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  for the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The property 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property * GetReportingPropertyOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  for the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                        If the reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  of the rule is set to NULL, then it is deleted.

                        Only valid for a @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  whose
                        @link NXOpen::VisualReporting::Classifier::TypeOption NXOpen::VisualReporting::Classifier::TypeOption@endlink  is @link NXOpen::VisualReporting::Classifier::TypeOptionValue NXOpen::VisualReporting::Classifier::TypeOptionValue@endlink 
                        or @link NXOpen::VisualReporting::Classifier::TypeOptionRange NXOpen::VisualReporting::Classifier::TypeOptionRange@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportingPropertyOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Property * reportingProperty /** The property being set */
            );
            /** Gets the @link NXOpen::VisualReporting::Property::DatatypeOption NXOpen::VisualReporting::Property::DatatypeOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 's reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The datatype
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property::DatatypeOption GetReportingDatatypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the @link NXOpen::VisualReporting::Property::DatatypeOption NXOpen::VisualReporting::Property::DatatypeOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 's reporting @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .

                        However datatype must not be @link NXOpen::VisualReporting::Property::DatatypeOptionUnknown NXOpen::VisualReporting::Property::DatatypeOptionUnknown@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportingDatatypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Property::DatatypeOption datatype /** The datatype being set */
            );
            /** Removes any existing filter @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  from this rule. This will not delete
                        the condition.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFilterConditionFromRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Gets the filter @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  from this rule. 
                     @return  The filter condition 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * GetFilterConditionOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the filter @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  from this rule. Setting this will delete
                        any existing @link NXOpen::VisualReporting::Rule::FilterCondition NXOpen::VisualReporting::Rule::FilterCondition@endlink  and all of its children
                        (except it won't delete the replacement @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  being set
                        by this call).
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterConditionOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Condition * filterCondition /** The filter condition being set */
            );
            /** Gets whether the @link NXOpen::VisualReporting::Classifier::GroupingMethodOption NXOpen::VisualReporting::Classifier::GroupingMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  is @link NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual@endlink . 
                     @return  Whether manual grouping should be used 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetManualGroupingForRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets whether the @link NXOpen::VisualReporting::Classifier::GroupingMethodOption NXOpen::VisualReporting::Classifier::GroupingMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  is @link NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual@endlink . 
                        If it uses @link NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual@endlink , then no
                        @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink s will be automatically generated, and they should
                        instead be added manually as required using @link NXOpen::VisualReporting::VisualReportBuilder::CreateGroupLabel NXOpen::VisualReporting::VisualReportBuilder::CreateGroupLabel@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetManualGroupingForRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                bool isManualGrouping /** Whether manual grouping should be used */
            );
            /** Gets the @link NXOpen::VisualReporting::Classifier::GroupingMethodOption NXOpen::VisualReporting::Classifier::GroupingMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink 
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The grouping method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier::GroupingMethodOption GetGroupingMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the @link NXOpen::VisualReporting::Classifier::GroupingMethodOption NXOpen::VisualReporting::Classifier::GroupingMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in the given @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                        If the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  uses manual grouping then no @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink s 
                        will be automatically generated, and they should instead be added using @link NXOpen::VisualReporting::VisualReportBuilder::CreateGroupLabel NXOpen::VisualReporting::VisualReportBuilder::CreateGroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGroupingMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Classifier::GroupingMethodOption groupingMethod /** The grouping method */
            );
            /** Gets the @link NXOpen::VisualReporting::Classifier::RangeMethodOption NXOpen::VisualReporting::Classifier::RangeMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in the given @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . 
                        
                        Only valid if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in the rule 
                        is @link NXOpen::VisualReporting::Classifier::TypeOptionRange NXOpen::VisualReporting::Classifier::TypeOptionRange@endlink  type.
                     @return  The range method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier::RangeMethodOption GetRangeMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the @link NXOpen::VisualReporting::Classifier::RangeMethodOption NXOpen::VisualReporting::Classifier::RangeMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in the given @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . 
                        
                        Only valid if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in the rule 
                        is @link NXOpen::VisualReporting::Classifier::TypeOptionRange NXOpen::VisualReporting::Classifier::TypeOptionRange@endlink  type.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRangeMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Classifier::RangeMethodOption rangeMethod /** The range method */
            );
            /** Returns the @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink s associated with the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The manually defined groups 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::GroupLabel *> GetAllGroupLabelsOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Returns the specified @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink s associated with the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  which are manually defined.
                     @return  The specified manually defined group 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::GroupLabel * GetManualGroupLabelOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                int index /** index */ 
            );
            /** Returns the @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink s associated with the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  which are manually defined.
                     @return  The manually defined groups 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::GroupLabel *> GetManualGroupLabelsOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Deletes the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink  from the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteGroupLabel
            (
                NXOpen::VisualReporting::Rule * rule /** The rule containing the group label */,
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Resets the @link NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified@endlink 
                        status of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink  so that the name is now
                        system-generated.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void UnsetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Gets the @link NXOpen::NXObject::Name NXOpen::NXObject::Name@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink . 
                     @return  The name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::NXObject::Name NXOpen::NXObject::Name@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink . Calling this function
                        will cause @link NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified@endlink 
                        to return true.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & name /** The name */
            );
            /** Sets the @link NXOpen::NXObject::Name NXOpen::NXObject::Name@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink . Calling this function
                        will cause @link NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified NXOpen::VisualReporting::GroupLabel::IsNameUserSpecified@endlink 
                        to return true.
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            void SetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * name /** The name */
            );
            /** Gets the @link NXOpen::VisualReporting::GroupLabel::LowerBound NXOpen::VisualReporting::GroupLabel::LowerBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The lower bound 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetLowerBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::LowerBound NXOpen::VisualReporting::GroupLabel::LowerBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLowerBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & lowerBound /** The lower bound */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::LowerBound NXOpen::VisualReporting::GroupLabel::LowerBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetLowerBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * lowerBound /** The lower bound */
            );
            /** Gets the @link NXOpen::VisualReporting::GroupLabel::UpperBound NXOpen::VisualReporting::GroupLabel::UpperBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The upper bound 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUpperBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::UpperBound NXOpen::VisualReporting::GroupLabel::UpperBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpperBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & upperBound /** The upper bound */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::UpperBound NXOpen::VisualReporting::GroupLabel::UpperBound@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetUpperBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * upperBound /** The upper bound */
            );
            /** Gets the @link NXOpen::VisualReporting::GroupLabel::Value NXOpen::VisualReporting::GroupLabel::Value@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetValueOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::Value NXOpen::VisualReporting::GroupLabel::Value@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetValueOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & value /** The value */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::Value NXOpen::VisualReporting::GroupLabel::Value@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            void SetValueOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * value /** The value */
            );
            /** Gets the @link NXOpen::VisualReporting::GroupLabel::DisplayStyleOption NXOpen::VisualReporting::GroupLabel::DisplayStyleOption@endlink  
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink  
                     @return  The display style 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::GroupLabel::DisplayStyleOption GetDisplayStyleForGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::DisplayStyleOption NXOpen::VisualReporting::GroupLabel::DisplayStyleOption@endlink  
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink  
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayStyleForGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                NXOpen::VisualReporting::GroupLabel::DisplayStyleOption displayStyle /** The display style */
            );
            /** Gets the @link NXOpen::VisualReporting::GroupLabel::Color NXOpen::VisualReporting::GroupLabel::Color@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink . 
                     @return  The color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor::Rgb GetColorOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXOpen::VisualReporting::GroupLabel::Color NXOpen::VisualReporting::GroupLabel::Color@endlink 
                        of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink . This also changes
                        @link NXOpen::VisualReporting::GroupLabel::DisplayStyle NXOpen::VisualReporting::GroupLabel::DisplayStyle@endlink 
                        to @link NXOpen::VisualReporting::GroupLabel::DisplayStyleOptionSpecifiedColor NXOpen::VisualReporting::GroupLabel::DisplayStyleOptionSpecifiedColor@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColorOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXOpen::NXColor::Rgb & color /** The color */
            );
            /** Gets the bitmap of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The bitmap name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetBitmapNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the bitmap of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmapNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & bitmapName /** The bitmap name */
            );
            /** Sets the bitmap of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmapNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * bitmapName /** The bitmap name */
            );
            /** Gets the custom message of the given@link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The bitmap name 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetCustomMessageOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the custom message of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomMessageOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & customMessage /** The bitmap name */
            );
            /** Sets the custom message of the given @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomMessageOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const char * customMessage /** The bitmap name */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink , but does not add it to a
                        @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                     @return  The created property 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property * CreateProperty
            (
                NXOpen::VisualReporting::Property::TypeOption propertyType /** Property Type of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being created */
            );
            /** Delete @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  which has no owner. Before call this function,
                        User must be sure there is no reference to this object
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteProperty
            (
                NXOpen::VisualReporting::Property * property /** The property to be deleted*/
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink , but does not add it to a
                        @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateAndCondition
            (
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink , but does not add it to a
                        @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateOrCondition
            (
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink , but does not add it to a
                        @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateNotCondition
            (
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionString NXOpen::VisualReporting::Property::DatatypeOptionString@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateStringCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                const NXString & value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionString NXOpen::VisualReporting::Property::DatatypeOptionString@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::VisualReporting::Condition * CreateStringCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                const char * value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionInteger NXOpen::VisualReporting::Property::DatatypeOptionInteger@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateIntegerCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                int value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionReal NXOpen::VisualReporting::Property::DatatypeOptionReal@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateRealCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                double value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */,
                double tolerance /** The tolerance used in comparisons */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionBoolean NXOpen::VisualReporting::Property::DatatypeOptionBoolean@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateBooleanCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                bool value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionNull NXOpen::VisualReporting::Property::DatatypeOptionNull@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateNullCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                bool value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionDate NXOpen::VisualReporting::Property::DatatypeOptionDate@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * CreateDateCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                const NXString & value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  whose
                        @link NXOpen::VisualReporting::Condition::Datatype NXOpen::VisualReporting::Condition::Datatype@endlink  is
                        @link NXOpen::VisualReporting::Property::DatatypeOptionDate NXOpen::VisualReporting::Property::DatatypeOptionDate@endlink ,
                        but does not add it to a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink .
                     @return  The created condition 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::VisualReporting::Condition * CreateDateCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  to which this condition will be applied */,
                const char * value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Gets the parent condition of this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink . If this
                        condition has no parent or if the parent isn't a condition
                        then this returns NULL.
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * GetParentCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ 
            );
            /** Returns whether the given @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  is an immediate child of this condition
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsChildCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ ,
                NXOpen::VisualReporting::Condition * childCondition /** The possible child Condition */
            );
            /** Returns the specified child @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  from this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink 
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Condition * GetChildCondition
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ ,
                int index /** The index of the returned Condition. */
            );
            /** Returns all the child @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink s in this @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink 
                     @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::Condition *> GetChildConditions
            (
                NXOpen::VisualReporting::Condition * condition /** condition */ 
            );
            /** Creates a new empty @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink , and adds it to the given
                        @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . This can only be called if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this rule is using @link NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual@endlink  grouping.
                     @return  The created group label 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::GroupLabel * CreateGroupLabel
            (
                const NXString & name /** The initial name. If this name is empty then a system-generated name will be
                                                                                                                                    assigned when the owning @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  is next activated */,
                NXOpen::VisualReporting::Rule * rule /** The rule to which to add it */,
                NXOpen::VisualReporting::GroupLabel * afterGroupLabel /** The group label after which to add it. If NULL then it is inserted
                                                                                                                                    at the beginning before any existing group labels */
            );
            /** Creates a new empty @link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink , and adds it to the given
                        @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . This can only be called if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in this rule is using @link NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual NXOpen::VisualReporting::Classifier::GroupingMethodOptionManual@endlink  grouping.
                     @return  The created group label 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::VisualReporting::GroupLabel * CreateGroupLabel
            (
                const char * name /** The initial name. If this name is empty then a system-generated name will be
                                                                                                                                    assigned when the owning @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  is next activated */,
                NXOpen::VisualReporting::Rule * rule /** The rule to which to add it */,
                NXOpen::VisualReporting::GroupLabel * afterGroupLabel /** The group label after which to add it. If NULL then it is inserted
                                                                                                                                    at the beginning before any existing group labels */
            );
            /**Returns  the keywords of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString KeywordsOfVisualReport
            (
            );
            /**Sets  the keywords of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeywordsOfVisualReport
            (
                const NXString & keywords /** A comma separated string of keywords */
            );
            /**Sets  the keywords of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetKeywordsOfVisualReport
            (
                const char * keywords /** A comma separated string of keywords */
            );
            /**Returns  the descriptive category of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DescriptiveCategoryOfVisualReport
            (
            );
            /**Sets  the descriptive category of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        being built by this builder.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDescriptiveCategoryOfVisualReport
            (
                const NXString & category /** The category being set */
            );
            /**Sets  the descriptive category of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        being built by this builder.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetDescriptiveCategoryOfVisualReport
            (
                const char * category /** The category being set */
            );
            /** Sets the property specification of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPropertySpecification
            (
                NXOpen::VisualReporting::Property * property /** The property being set */,
                const NXString & key /** property key */
            );
            /** Sets the property specification of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetPropertySpecification
            (
                NXOpen::VisualReporting::Property * property /** The property being set */,
                const char * key /** property key */
            );
            /** Sets the property specification of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPropertySpecification
            (
                NXOpen::VisualReporting::Property * property /** The property being set */,
                const NXString & key /** property key */,
                const NXString & name /** property name */
            );
            /** Sets the property specification of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetPropertySpecification
            (
                NXOpen::VisualReporting::Property * property /** The property being set */,
                const char * key /** property key */,
                const char * name /** property name */
            );
            /** Gets the property specification of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  being built by this builder.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetPropertySpecification
            (
                NXOpen::VisualReporting::Property * property /** The property being ask */,
                NXOpen::VisualReporting::Property::TypeOption* propertyType /** Property Type of the @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  */,
                NXString* key /** property key */,
                NXString* name /** property name */
            );
            /**Returns  the bitmap name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BitmapNameOfReport
            (
            );
            /**Sets  the bitmap name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBitmapNameOfReport
            (
                const NXString & bitmapName /** The bitmap name */
            );
            /**Sets  the bitmap name of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetBitmapNameOfReport
            (
                const char * bitmapName /** The bitmap name */
            );
            /**Returns the custom message of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomMessageOfReport
            (
            );
            /**Sets the custom message of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCustomMessageOfReport
            (
                const NXString & customMessage /** The custom message */
            );
            /**Sets the custom message of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetCustomMessageOfReport
            (
                const char * customMessage /** The custom message */
            );
            /**Gets the message @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink   list of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink . 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void GetReferencePropertiesOfReport
            (
                std::vector<NXOpen::VisualReporting::Property *> & properties /** The reference properties of report*/,
                std::vector<NXOpen::VisualReporting::VisualReportBuilder::PropertyUsageOption> & usages /** The usages of report*/,
                int* notUsed /** notused */ 
            );
            /**Sets the message @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  list of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferencePropertiesOfReport
            (
                const std::vector<NXOpen::VisualReporting::Property *> & properties /** The reference properties of report*/,
                const std::vector<NXOpen::VisualReporting::VisualReportBuilder::PropertyUsageOption> & usages /** The usages of report*/
            );
            /**Returns  the @link NXOpen::VisualReporting::VisualReport::SaveDestinationOption NXOpen::VisualReporting::VisualReport::SaveDestinationOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                        Note that this property will always be @link NXOpen::VisualReporting::VisualReport::SaveDestinationOptionLocal NXOpen::VisualReporting::VisualReport::SaveDestinationOptionLocal@endlink  when NX is not connected to Teamcenter.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport::SaveDestinationOption SaveDestination
            (
            );
            /**Sets  the @link NXOpen::VisualReporting::VisualReport::SaveDestinationOption NXOpen::VisualReporting::VisualReport::SaveDestinationOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder.
                        Note that this property will always be @link NXOpen::VisualReporting::VisualReport::SaveDestinationOptionLocal NXOpen::VisualReporting::VisualReport::SaveDestinationOptionLocal@endlink  when NX is not connected to Teamcenter.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveDestination
            (
                NXOpen::VisualReporting::VisualReport::SaveDestinationOption destinationOption /** The destination option */
            );
            /**Returns  the destination Teamcenter folder for saving the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder to Teamcenter database.

                        Note that this property is only needed when NX is connected to Teamcenter and report is saved as a copy to Teamcenter database.
                        This @link NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder@endlink  may return NULL if you haven't 
                        set a folder name on this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DestinationTeamcenterFolder
            (
            );
            /**Sets  the destination Teamcenter folder for saving the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder to Teamcenter database.

                        Note that this property is only needed when NX is connected to Teamcenter and report is saved as a copy to Teamcenter database.
                        This @link NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder@endlink  may return NULL if you haven't 
                        set a folder name on this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDestinationTeamcenterFolder
            (
                const NXString & foldername /** The Teamcenter folder name */
            );
            /**Sets  the destination Teamcenter folder for saving the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this
                        builder to Teamcenter database.

                        Note that this property is only needed when NX is connected to Teamcenter and report is saved as a copy to Teamcenter database.
                        This @link NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder NXOpen::VisualReporting::VisualReport::DestinationTeamcenterFolder@endlink  may return NULL if you haven't 
                        set a folder name on this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void SetDestinationTeamcenterFolder
            (
                const char * foldername /** The Teamcenter folder name */
            );
            /** Saves the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  to its current @link NXOpen::VisualReporting::VisualReportBuilder::FilenameOfVisualReport NXOpen::VisualReporting::VisualReportBuilder::FilenameOfVisualReport@endlink  .

                        Note that when NX is connected to Teamcenter, the @link NXOpen::VisualReporting::VisualReportBuilder::FilenameOfVisualReport NXOpen::VisualReporting::VisualReportBuilder::FilenameOfVisualReport@endlink  will be 
                        updated to the report dataset identifier after the report is saved to Teamcenter database.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void Save
            (
            );
            /** Gets the priority of the given@link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The priority 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::GroupLabel::TagPriorityOption GetTagPriorityOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the priority of the given@link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTagPriorityOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                NXOpen::VisualReporting::GroupLabel::TagPriorityOption tagPriority /** The priority */
            );
            /** Gets the error level of the given@link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                     @return  The error level 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validation::Result GetErrorLevelOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the priority of the given@link NXOpen::VisualReporting::GroupLabel NXOpen::VisualReporting::GroupLabel@endlink .
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetErrorLevelOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                NXOpen::Validation::Result errorLevel /** The error level */
            );
            /** Deletes a @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  from its parent condition.
                        If there are @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink s associated with this condition, these properties will be deleted.
                        If there are child conditions associated with this condtion, these child conditions will be deleted too. 
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteChildCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition * childCondition /** The child condition being removed */
            );
            /** Gets the @link NXOpen::VisualReporting::Classifier::DateGroupMethodOption NXOpen::VisualReporting::Classifier::DateGroupMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in the given @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . 
                        
                        Only valid if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in the rule 
                        is @link NXOpen::VisualReporting::Classifier::TypeOptionRange NXOpen::VisualReporting::Classifier::TypeOptionRange@endlink  type.
                     @return  The range method 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Classifier::DateGroupMethodOption GetDateGroupMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the @link NXOpen::VisualReporting::Classifier::DateGroupMethodOption NXOpen::VisualReporting::Classifier::DateGroupMethodOption@endlink  of the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  
                        in the given @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink . 
                        
                        Only valid if the active @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink  in the rule 
                        is @link NXOpen::VisualReporting::Classifier::TypeOptionRange NXOpen::VisualReporting::Classifier::TypeOptionRange@endlink  type.
                    
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDateGroupMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Classifier::DateGroupMethodOption dateGroupMethod /** The range method */
            );
            /**Returns  the @link NXOpen::VisualReporting::VisualReport::ScopeTypeOption NXOpen::VisualReporting::VisualReport::ScopeTypeOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport::ScopeTypeOption ScopeTypeOfVisualReport
            (
            );
            /**Sets  the @link NXOpen::VisualReporting::VisualReport::ScopeTypeOption NXOpen::VisualReporting::VisualReport::ScopeTypeOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScopeTypeOfVisualReport
            (
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** scopetype */ 
            );
            /** Gets the @link NXOpen::VisualReporting::VisualReport::ObjectTypeOption NXOpen::VisualReporting::VisualReport::ObjectTypeOption@endlink s of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                        Only valid if the @link NXOpen::VisualReporting::VisualReport::ScopeType NXOpen::VisualReporting::VisualReport::ScopeType@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        is @link NXOpen::VisualReporting::VisualReport::ScopeTypeOptionSubPart NXOpen::VisualReporting::VisualReport::ScopeTypeOptionSubPart@endlink  type.
                     @return  The object types 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> GetObjectTypesOfVisualReport
            (
            );
            /** Sets the @link NXOpen::VisualReporting::VisualReport::ObjectTypeOption NXOpen::VisualReporting::VisualReport::ObjectTypeOption@endlink s of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                        Only valid if the @link NXOpen::VisualReporting::VisualReport::ScopeType NXOpen::VisualReporting::VisualReport::ScopeType@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink 
                        is @link NXOpen::VisualReporting::VisualReport::ScopeTypeOptionSubPart NXOpen::VisualReporting::VisualReport::ScopeTypeOptionSubPart@endlink  type.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetObjectTypesOfVisualReport
            (
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** The object types being set */
            );
            /**Returns  the @link NXOpen::VisualReporting::VisualReport::ReportContextOption NXOpen::VisualReporting::VisualReport::ReportContextOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  @deprecated Deprecated in NX9.0.3.  Use @link NXOpen::VisualReporting::VisualReport::ReportContext NXOpen::VisualReporting::VisualReport::ReportContext@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.3.  Use NXOpen::VisualReporting::VisualReport::ReportContext instead.") NXOpen::VisualReporting::VisualReport::ReportContextOption ReportContextOfVisualReport
            (
            );
            /**Sets  the @link NXOpen::VisualReporting::VisualReport::ReportContextOption NXOpen::VisualReporting::VisualReport::ReportContextOption@endlink  of the @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  being built by this builder.
                    
             <br>  @deprecated Deprecated in NX9.0.3.  Use @link NXOpen::VisualReporting::VisualReport::SetReportContext NXOpen::VisualReporting::VisualReport::SetReportContext@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX9.0.3.  Use NXOpen::VisualReporting::VisualReport::SetReportContext instead.") void SetReportContextOfVisualReport
            (
                NXOpen::VisualReporting::VisualReport::ReportContextOption reportContext /** The report context being set */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
