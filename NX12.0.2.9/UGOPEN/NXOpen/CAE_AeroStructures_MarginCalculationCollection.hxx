#ifndef NXOpen_CAE_AEROSTRUCTURES_MARGINCALCULATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_AEROSTRUCTURES_MARGINCALCULATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AeroStructures_MarginCalculationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AeroStructures_MarginCalculation.hxx>
#include <NXOpen/CAE_AeroStructures_MarginCalculationBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace AeroStructures
        {
            class MarginCalculationCollection;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class MarginSolution;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class MarginCalculation;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class MarginCalculationBuilder;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class MarginCalculationCollectionImpl;
            /** Represents a collection of  @link CAE::AeroStructures::MarginCalculation CAE::AeroStructures::MarginCalculation@endlink .  <br> Use @link NXOpen::CAE::AeroStructures::MarginCalculationCollection NXOpen::CAE::AeroStructures::MarginCalculationCollection@endlink  to get the instance of this class.  <br> 
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  MarginCalculationCollection : public NXOpen::TaggedObjectCollection
            {
                private: MarginCalculationCollectionImpl * m_margincalculationcollection_impl;
                private: NXOpen::CAE::AeroStructures::MarginSolution* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit MarginCalculationCollection(NXOpen::CAE::AeroStructures::MarginSolution *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                public: ~MarginCalculationCollection();
                /** Iterator for accessing the contents of the collection. */
                //lint -sem(NXOpen::CAE::AeroStructures::MarginCalculationCollection::iterator::copy,initializer)
                class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAE::AeroStructures::MarginCalculation *>
                {
                public:
                    /** Default constructor */
                    iterator() : m_context(NULL), m_current(NULL_TAG)
                    {
                        // coverity[uninit_member]
                    } //lint !e1401 m_state is not initialized
                    /// \cond NX_NO_DOC
                    explicit iterator(NXOpen::CAE::AeroStructures::MarginCalculationCollection *context) : m_context(context), m_current(NULL_TAG)
                    {
                        // coverity[uninit_member]
                    }//lint !e1401 m_state is not initialized
                    /// \endcond
                    /** Copy constructor */
                    iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                    {
                        copy(other);
                    }
                    /** Copy constructor */
                    iterator &operator =(const iterator &other)
                    {
                        if (&other != this)
                            copy(other);
                        return *this;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                    bool operator ==(const iterator &other) const
                    {
                        return m_current == other.m_current && m_context == other.m_context;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                    bool operator !=(const iterator &other) const
                    {
                        return !operator == (other);
                    }
                    /** Return the element currently pointed to by the iterator. */
                    NXOPENCPP_CAEEXPORT  value_type operator * ();
                    /** Points the iterator to next element. */
                    iterator & operator ++()
                    {
                        next();
                        return *this;
                    }
                    /** Points the iterator to next element. */
                    iterator operator ++(int)
                    {
                        iterator tmp(*this);
                        ++*this;
                        return tmp;
                    }
                private:
                    void copy(const iterator &other)
                    {
                        m_context = other.m_context;
                        m_current = other.m_current;
                        for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                             m_state[i] = other.m_state[i];
                    }
                    NXOPENCPP_CAEEXPORT  void next();
                    NXOpen::CAE::AeroStructures::MarginCalculationCollection *m_context;
                    tag_t m_current;
                    unsigned int m_state[8];
                };
                /** Returns an iterator addressing the first element. */
                iterator begin();
                /** Returns an iterator addressing one past the last element. */
                iterator end()
                {
                    return iterator(this);
                }
                /** Finds the @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  object with the given name.  @return  @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  object with this name. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::CAE::AeroStructures::MarginCalculation * FindObject
                (
                    const NXString & name /** Name of the MarginCalculation  */
                );
                /** Finds the @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  object with the given name.  @return  @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  object with this name. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                NXOpen::CAE::AeroStructures::MarginCalculation * FindObject
                (
                    const char * name /** Name of the MarginCalculation  */
                );
                /** Creates a @link CAE::AeroStructures::MarginCalculationBuilder CAE::AeroStructures::MarginCalculationBuilder@endlink   @return  Builder object
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::CAE::AeroStructures::MarginCalculationBuilder * CreateMarginCalculationBuilder
                (
                    NXOpen::CAE::AeroStructures::MarginCalculation * margincalculation /** margincalculation */ 
                );
                /** Removes the calculation from the solution 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void DeleteCalculation
                (
                    NXOpen::CAE::AeroStructures::MarginCalculation * margincalculation /** @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  to be deleted */
                );
                /** Makes a copy the calculation and add it to the margin solution, replaces the given name if it is a duplicate  @return The resulting cloned @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::CAE::AeroStructures::MarginCalculation * CloneCalculation
                (
                    const NXString & name /** Tentative name of the cloned MarginCalculation, will be changed if not unique  */,
                    NXOpen::CAE::AeroStructures::MarginCalculation * sourcemargincalculation /**Source  @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  to clone */
                );
                /** Makes a copy the calculation and add it to the margin solution, replaces the given name if it is a duplicate  @return The resulting cloned @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                NXOpen::CAE::AeroStructures::MarginCalculation * CloneCalculation
                (
                    const char * name /** Tentative name of the cloned MarginCalculation, will be changed if not unique  */,
                    NXOpen::CAE::AeroStructures::MarginCalculation * sourcemargincalculation /**Source  @link NXOpen::CAE::AeroStructures::MarginCalculation NXOpen::CAE::AeroStructures::MarginCalculation@endlink  to clone */
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
