#ifndef NXOpen_CAM_MACHINEHEADGROUPBUILDER_HXX_INCLUDED
#define NXOpen_CAM_MACHINEHEADGROUPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MachineHeadGroupBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NCGroupBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class MachineHeadGroupBuilder;
    }
    namespace CAM
    {
        class NCGroupBuilder;
    }
    namespace CAM
    {
        class _MachineHeadGroupBuilderBuilder;
        class MachineHeadGroupBuilderImpl;
        /** Represents a MachineHeadGroup Builder  <br> To create a new instance of this class, use @link CAM::NCGroupCollection::CreateMachineHeadGroupBuilder CAM::NCGroupCollection::CreateMachineHeadGroupBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  MachineHeadGroupBuilder : public CAM::NCGroupBuilder
        {
            private: MachineHeadGroupBuilderImpl * m_machineheadgroupbuilder_impl;
            private: friend class  _MachineHeadGroupBuilderBuilder;
            protected: MachineHeadGroupBuilder();
            public: ~MachineHeadGroupBuilder();
            /**Returns  the x distance  <br> License requirements : cam_base ("CAM BASE") */
            public: double XDistanceBuilder
            (
            );
            /**Sets  the x distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetXDistanceBuilder
            (
                double xValue /** the x distance value */
            );
            /**Returns  the y distance  <br> License requirements : cam_base ("CAM BASE") */
            public: double YDistanceBuilder
            (
            );
            /**Sets  the y distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetYDistanceBuilder
            (
                double yValue /** the y distance value */
            );
            /**Returns  the z distance  <br> License requirements : cam_base ("CAM BASE") */
            public: double ZDistanceBuilder
            (
            );
            /**Sets  the z distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetZDistanceBuilder
            (
                double zValue /** the z distance value */
            );
            /**Returns  the i direction  <br> License requirements : cam_base ("CAM BASE") */
            public: double IDirectionBuilder
            (
            );
            /**Sets  the i direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIDirectionBuilder
            (
                double iValue /** the i direction value */
            );
            /**Returns  the j direction  <br> License requirements : cam_base ("CAM BASE") */
            public: double JDirectionBuilder
            (
            );
            /**Sets  the j direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetJDirectionBuilder
            (
                double jValue /** the j direction value */
            );
            /**Returns  the k direction  <br> License requirements : cam_base ("CAM BASE") */
            public: double KDirectionBuilder
            (
            );
            /**Sets  the k direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetKDirectionBuilder
            (
                double kValue /** the k direction value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
