#ifndef NXOpen_UISTYLER_TOOLPALETTE_HXX_INCLUDED
#define NXOpen_UISTYLER_TOOLPALETTE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_ToolPalette.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class ToolPalette;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        class ToolPaletteImpl;
        /** Represents a ToolPalette for UI Styler */
        class NXOPENUICPPEXPORT  ToolPalette : public UIStyler::StylerItem
        {
            public: /** Called when a dialog user selects a button in the tool palette. <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            private: ToolPaletteImpl * m_toolpalette_impl;
            public: explicit ToolPalette(void *ptr);
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::ToolPalette::Activate&  activateevent /** activateevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /** Specifies descriptive text to display for the dialog item. 
                It should describe the dialog item's intended use.  <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /** String label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the currently selected choice for this dialog item. <br> License requirements : None */
            public: void SetItemValue
            (
                int itemVal /** Item value */
            );
            /**Returns  the currently selected choice for this dialog item. <br> License requirements : None */
            public: int ItemValue
            (
            );
            /**  <br> License requirements : None */
            public: void SetSensitivity
            (
                int subitemIndex /** Sub item index */,
                bool type /** True if sentivity is set otherwise False */
            );
            /** Gets the sensitivity of the dialog item @return  True if sensitivity is set otherwise False  <br> License requirements : None */
            public: bool GetSensitivity
            (
            );
            /**Sets  the visibility of the dialog item <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** type */ 
            );
            /**Returns  the visibility of the dialog item <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item should override the accelerator 
                on the second mouse button, which normally accelerates to the OK button. 
                When you set this attribute, a click on the second mouse button triggers
                this dialog item's Activate callback instead of the action of the OK button. <br> License requirements : None */
            public: void SetDefault
            (
                int dialogId /** dialog id */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
