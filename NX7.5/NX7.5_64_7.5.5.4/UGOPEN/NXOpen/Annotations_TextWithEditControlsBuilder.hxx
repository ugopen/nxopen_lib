#ifndef NXOpen_ANNOTATIONS_TEXTWITHEDITCONTROLSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TEXTWITHEDITCONTROLSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_TextWithEditControlsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_TextWithEditControlsBuilder.hxx>
#include <NXOpen/Annotations_TextWithSymbolsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class TextWithEditControlsBuilder;
    }
    namespace Annotations
    {
        class TextWithSymbolsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _TextWithEditControlsBuilderBuilder;
        class TextWithEditControlsBuilderImpl;
        /** Represents a @link Annotations::TextWithEditControlsBuilder Annotations::TextWithEditControlsBuilder@endlink  which collects
                internationalized text strings from the user for processing on an annotation object.
              <br> This is a sub-builder class and cannot be directly instantiated <br> */
        class NXOPENCPPEXPORT  TextWithEditControlsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: TextWithEditControlsBuilderImpl * m_textwitheditcontrolsbuilder_impl;
            private: friend class  _TextWithEditControlsBuilderBuilder;
            protected: TextWithEditControlsBuilder();
            public: ~TextWithEditControlsBuilder();
            /**Returns  the text with symbols builder  <br> License requirements : None */
            public: NXOpen::Annotations::TextWithSymbolsBuilder * TextBlock
            (
            );
            /** Text from the editor text  @return   <br> License requirements : None */
            public: std::vector<NXString> GetEditorText
            (
            );
            /** Text into the editor text  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetEditorText
            (
                const std::vector<NXString> & text /** text */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
