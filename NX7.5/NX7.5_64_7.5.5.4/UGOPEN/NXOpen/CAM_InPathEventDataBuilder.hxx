#ifndef NXOpen_CAM_INPATHEVENTDATABUILDER_HXX_INCLUDED
#define NXOpen_CAM_INPATHEVENTDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InPathEventDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_UdeSet.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InPathEventDataBuilder;
    }
    namespace CAM
    {
        class UdeSet;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _InPathEventDataBuilderBuilder;
        class InPathEventDataBuilderImpl;
        /** Represents a InPath Event Data Builder  <br> To create a new instance of this class, use @link CAM::WedmCustomBoundaryDataBuilder::CreateInpathEventDataBuilder CAM::WedmCustomBoundaryDataBuilder::CreateInpathEventDataBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InPathEventDataBuilder : public NXObject
        {
            /** InPath Events Location Method Options */
            public: enum LocationMethod
            {
                LocationMethodSpecify/** Uses Point to define the InPath Events Location */,
                LocationMethodDistanceFromStart/** Distance From Start  */,
                LocationMethodDistanceFromEnd/** Distance From End  */
            };

            private: InPathEventDataBuilderImpl * m_inpatheventdatabuilder_impl;
            private: friend class  _InPathEventDataBuilderBuilder;
            protected: InPathEventDataBuilder();
            public: ~InPathEventDataBuilder();
            /**Returns  the Inpath Event pass  number  <br> License requirements : cam_base ("CAM BASE") */
            public: int Pass
            (
            );
            /**Sets  the Inpath Event pass  number  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPass
            (
                int passNum /** the current pass number */
            );
            /**Returns  the Inpath Events Location method   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InPathEventDataBuilder::LocationMethod Method
            (
            );
            /**Sets  the Inpath Events Location method   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMethod
            (
                NXOpen::CAM::InPathEventDataBuilder::LocationMethod method /** the Events location specification method */
            );
            /**Returns  the Inpath Events Distance   <br> License requirements : cam_base ("CAM BASE") */
            public: double Distance
            (
            );
            /**Sets  the Inpath Events Distance   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDistance
            (
                double distance /** the Events distance from start or end */
            );
            /**Returns  the Inpath Events Location   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the Inpath Events Location   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * point /** the Events Location */
            );
            /**Returns  the Inpath Events Set   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * Udeset
            (
            );
            /**Sets  the Inpath Events Set   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUdeset
            (
                NXOpen::NXObject * udeSet /** the Events Set */
            );
            /**Returns  the UDE Set Builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::UdeSet * UdesetBuilder
            (
            );
            /**Returns  the in path event output status  <br> License requirements : cam_base ("CAM BASE") */
            public: bool Status
            (
            );
            /**Sets  the in path event output status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStatus
            (
                bool status /** the in path event output value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
