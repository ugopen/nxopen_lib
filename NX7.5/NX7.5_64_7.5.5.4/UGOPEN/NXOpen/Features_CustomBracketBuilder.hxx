#ifndef NXOpen_FEATURES_CUSTOMBRACKETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CUSTOMBRACKETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CustomBracketBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_CustomBracketBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SketchExpressionModifierBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class CustomBracketBuilder;
    }
    class CoordinateSystem;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class Point;
    class ScCollector;
    class SketchExpressionModifierBuilder;
    namespace Features
    {
        class _CustomBracketBuilderBuilder;
        class CustomBracketBuilderImpl;
        /**
            Represents a @link Features::CustomBracket Features::CustomBracket@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCustomBracketBuilder Features::FeatureCollection::CreateCustomBracketBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SketchBlock.Exp1.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp10.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp11.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp12.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp2.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp3.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp4.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp5.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp6.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp7.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp8.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Exp9.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SketchBlock.Sketches </td> <td> 
         
        EndCut1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  CustomBracketBuilder : public Features::FeatureBuilder
        {
            /** Creation method used to define the placement of the bracket */
            public: enum CreationMethod
            {
                CreationMethodPlanesAndPoint/** planes and point */ ,
                CreationMethodSpecifyCSYS/** specify csys */ 
            };

            private: CustomBracketBuilderImpl * m_custombracketbuilder_impl;
            private: friend class  _CustomBracketBuilderBuilder;
            protected: CustomBracketBuilder();
            public: ~CustomBracketBuilder();
            /**Returns  the placement plane  <br> License requirements : None */
            public: NXOpen::Plane * PlacementPlane
            (
            );
            /**Sets  the placement plane  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetPlacementPlane
            (
                NXOpen::Plane * placementPlane /** placementplane */ 
            );
            /**Returns  the toggle which allows re-use of the previous placement plane  <br> License requirements : None */
            public: bool KeepPlacementPlane
            (
            );
            /**Sets  the toggle which allows re-use of the previous placement plane  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepPlacementPlane
            (
                bool keepPlacementPlane /** keepplacementplane */ 
            );
            /**Returns  the reference plane  <br> License requirements : None */
            public: NXOpen::Plane * ReferencePlane
            (
            );
            /**Sets  the reference plane  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetReferencePlane
            (
                NXOpen::Plane * referencePlane /** referenceplane */ 
            );
            /**Returns  the toggle which allows re-use of the previous reference plane  <br> License requirements : None */
            public: bool KeepReferencePlane
            (
            );
            /**Sets  the toggle which allows re-use of the previous reference plane  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepReferencePlane
            (
                bool keepReferencePlane /** keepreferenceplane */ 
            );
            /**Returns  the heel point  <br> License requirements : None */
            public: NXOpen::Point * HeelPoint
            (
            );
            /**Sets  the heel point  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetHeelPoint
            (
                NXOpen::Point * heelPoint /** heelpoint */ 
            );
            /**Returns  the toggle which allows re-use of the previous heel point  <br> License requirements : None */
            public: bool KeepHeelPoint
            (
            );
            /**Sets  the toggle which allows re-use of the previous heel point  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepHeelPoint
            (
                bool keepHeelPoint /** keepheelpoint */ 
            );
            /**Returns  the select trim face.
                    Specifies the face(s) to cut holes in.  <br> License requirements : None */
            public: NXOpen::ScCollector * SelectTrimFace
            (
            );
            /**Returns  the keep select trim face
                    A toggle used to remember the selected object(s) on apply.  <br> License requirements : None */
            public: bool KeepSelectTrimFace
            (
            );
            /**Sets  the keep select trim face
                    A toggle used to remember the selected object(s) on apply.  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepSelectTrimFace
            (
                bool keepSelectTrimFace /** keepselecttrimface */ 
            );
            /**Returns  the heel offset  <br> License requirements : None */
            public: NXOpen::Expression * HeelOffset
            (
            );
            /**Returns  the thickness of the bracket  <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the sketch block  <br> License requirements : None */
            public: NXOpen::SketchExpressionModifierBuilder * SketchBlock
            (
            );
            /**Returns  the method used to define the placement of the bracket  <br> License requirements : None */
            public: NXOpen::Features::CustomBracketBuilder::CreationMethod PlacementType
            (
            );
            /**Sets  the method used to define the placement of the bracket  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetPlacementType
            (
                NXOpen::Features::CustomBracketBuilder::CreationMethod placementType /** placementtype */ 
            );
            /**Returns  the placement csys of the bracket  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoordSystem
            (
            );
            /**Sets  the placement csys of the bracket  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetCoordSystem
            (
                NXOpen::CoordinateSystem * coordSystem /** coordsystem */ 
            );
            /**Returns  the toggle which allows re-use of the previous coordinate system  <br> License requirements : None */
            public: bool KeepCoordSystem
            (
            );
            /**Sets  the toggle which allows re-use of the previous coordinate system  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepCoordSystem
            (
                bool keepCoordSystem /** keepcoordsystem */ 
            );
            /**Returns  the flip direction toggle for the extrude direction  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the flip direction toggle for the extrude direction  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the toggle which allows re-use of the previous flip direction toggle  <br> License requirements : None */
            public: bool KeepReverseDirection
            (
            );
            /**Sets  the toggle which allows re-use of the previous flip direction toggle  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetKeepReverseDirection
            (
                bool keepReverseDirection /** keepreversedirection */ 
            );
            /**Returns  the name attribute value  <br> License requirements : None */
            public: int AttributeName
            (
            );
            /**Sets  the name attribute value  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetAttributeName
            (
                int name /** name */ 
            );
            /** the list of available name attributes  @return  Array of available attribute names.
                                                                      These names are specified in the customer
                                                                      defaults file.   <br> License requirements : None */
            public: std::vector<NXString> GetAvailableAttributeNames
            (
            );
            /**Returns  the material attribute  <br> License requirements : None */
            public: int AttributeMaterial
            (
            );
            /**Sets  the material attribute  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetAttributeMaterial
            (
                int material /** material */ 
            );
            /** the list of available material attributes  @return  Array of available attribute materials.
                                                                      These materials are specified in the customer
                                                                      defaults file.   <br> License requirements : None */
            public: std::vector<NXString> GetAvailableAttributeMaterials
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
