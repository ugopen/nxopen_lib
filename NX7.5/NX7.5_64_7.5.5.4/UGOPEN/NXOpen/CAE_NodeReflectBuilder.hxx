#ifndef NXOpen_CAE_NODEREFLECTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_NODEREFLECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_NodeReflectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_NodeReflectBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class NodeReflectBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectFENodeList;
    }
    class CoordinateSystem;
    class Plane;
    namespace CAE
    {
        class _NodeReflectBuilderBuilder;
        class NodeReflectBuilderImpl;
        /**
            Represents a @link CAE::NodeReflectBuilder CAE::NodeReflectBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateNodeReflectBuilder CAE::NodeElementManager::CreateNodeReflectBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  NodeReflectBuilder : public Builder
        {
            /** the copy types */
            public: enum CopyType
            {
                CopyTypeReflectOnly/**Reflect only */,
                CopyTypeCopyReflect/**copy Reflect */
            };

            /** the label types */
            public: enum LabelType
            {
                LabelTypeLabelIncrement/**label increment */,
                LabelTypeByOffset/**by offset */
            };

            private: NodeReflectBuilderImpl * m_nodereflectbuilder_impl;
            private: friend class  _NodeReflectBuilderBuilder;
            protected: NodeReflectBuilder();
            public: ~NodeReflectBuilder();
            /**Returns  the copy option  <br> License requirements : None */
            public: NXOpen::CAE::NodeReflectBuilder::CopyType CopyOption
            (
            );
            /**Sets  the copy option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCopyOption
            (
                NXOpen::CAE::NodeReflectBuilder::CopyType copyOption /** copyoption */ 
            );
            /**Returns  the node  <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the plane  <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the label option  <br> License requirements : None */
            public: NXOpen::CAE::NodeReflectBuilder::LabelType LabelOption
            (
            );
            /**Sets  the label option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelOption
            (
                NXOpen::CAE::NodeReflectBuilder::LabelType labelOption /** labeloption */ 
            );
            /**Returns  the label  <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment  <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset  <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
            /**Returns  the displacement csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") NXOpen::CoordinateSystem * DisplacementCsys
            (
            );
            /**Sets  the displacement csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetDisplacementCsys
            (
                NXOpen::CoordinateSystem * displacementCsys /** displacementcsys */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
