#ifndef NXOpen_CAE_BEAMSECTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_BEAMSECTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_BeamSectionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class BeamSectionCollection;
    }
    namespace CAE
    {
        class BaseFEModel;
    }
    namespace CAE
    {
        class BeamSection;
    }
    namespace CAE
    {
        class GeneralGeometryBeamSection;
    }
    namespace CAE
    {
        class GeneralGeometryBeamSectionBuilder;
    }
    namespace CAE
    {
        class StandardBeamSection;
    }
    namespace CAE
    {
        class StandardBeamSectionBuilder;
    }
    namespace CAE
    {
        class UserDefinedSolidBeamSection;
    }
    namespace CAE
    {
        class UserDefinedSolidBeamSectionBuilder;
    }
    namespace CAE
    {
        class BeamSectionCollectionImpl;
        /**  @brief  Represents the collection of all @link CAE::BeamSection CAE::BeamSection@endlink  in a fem part  

           <br> To obtain an instance of this class, refer to @link CAE::BaseFEModel CAE::BaseFEModel@endlink  <br> */
        class NXOPENCPPEXPORT  BeamSectionCollection : public TaggedObjectCollection
        {
            private: BeamSectionCollectionImpl * m_beamsectioncollection_impl;
            private: NXOpen::CAE::BaseFEModel* m_owner;
            /** Constructor */
            public: explicit BeamSectionCollection(NXOpen::CAE::BaseFEModel *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BeamSectionCollection();
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAE::BeamSection * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAE::BeamSectionCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAE::BeamSectionCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link CAE::BeamSection CAE::BeamSection@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.
                    An exception will be thrown if no object can be found with the given journal identifier.
                     <br> 
                        This method has beeen deprecated.  Please use 
                        @link CAE::BeamSectionCollection::FindObject CAE::BeamSectionCollection::FindObject@endlink  instead.
                     <br> 
                     @return  Beam Section with this identifier 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") NXOpen::CAE::BeamSection * Find
            (
                const NXString & journalIdentifier /** Beam Section name */
            );
            /** Finds the @link CAE::BeamSection CAE::BeamSection@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.
                    Replaces @link CAE::BeamSectionCollection::Find CAE::BeamSectionCollection::Find@endlink .
                      
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Beam Section with this identifier  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BeamSection * FindObject
            (
                const NXString & journalIdentifier /** Beam Section name */
            );
            /** Creates a standard section builder  @return  Standard beam section builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::StandardBeamSectionBuilder * CreateStandardBeamSectionBuilder
            (
                NXOpen::CAE::StandardBeamSection * section /** @link CAE::StandardBeamSection CAE::StandardBeamSection@endlink  to be edited */
            );
            /** Creates a user-defined solid section builder.  @return  User-defined solid beam section builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::UserDefinedSolidBeamSectionBuilder * CreateUserDefinedSolidBeamSectionBuilder
            (
                NXOpen::CAE::UserDefinedSolidBeamSection * section /** @link CAE::UserDefinedSolidBeamSection CAE::UserDefinedSolidBeamSection@endlink  to be edited */
            );
            /** Creates a general geometry section builder.  @return  General geometry beam section builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::GeneralGeometryBeamSectionBuilder * CreateGeneralGeometryBeamSectionBuilder
            (
                NXOpen::CAE::GeneralGeometryBeamSection * section /** @link CAE::GeneralGeometryBeamSection CAE::GeneralGeometryBeamSection@endlink  to be edited */
            );
            /** Clones a section  @return  Copied section  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BeamSection * CloneSection
            (
                NXOpen::CAE::BeamSection * sourceSection /** Section to be copied */
            );
            /** Copies a section to a new general geometry section  @return  Copied general geometry section  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::GeneralGeometryBeamSection * CopyAsGeneralGeometrySection
            (
                NXOpen::CAE::BeamSection * sourceSection /** Section to be copied */
            );
            /** Imports sections from an imported file  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ImportSections
            (
                const NXString & importFileName /** Imported file name containing section definition   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports sections to a file  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportSections
            (
                const NXString & exportedFileName /** Exported file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::BeamSection *> & sections /** Sections to be exported */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
