#ifndef NXOpen_FEATURES_REFITFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REFITFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RefitFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_RefitFaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_RefitControlBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RefitFaceBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class RefitControlBuilder;
    }
    class SelectTaggedObject;
    class SelectTaggedObjectList;
    namespace Features
    {
        class _RefitFaceBuilderBuilder;
        class RefitFaceBuilderImpl;
        /**
            Represents a @link Features::RefitFace Features::RefitFace@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRefitFaceBuilder Features::FeatureCollection::CreateRefitFaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VPatches </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  RefitFaceBuilder : public Features::FeatureBuilder
        {
            /** the type of face refit */
            public: enum Types
            {
                TypesRefit/** refit face */,
                TypesFitToTarget/** refit face to target */
            };

            private: RefitFaceBuilderImpl * m_refitfacebuilder_impl;
            private: friend class  _RefitFaceBuilderBuilder;
            protected: RefitFaceBuilder();
            public: ~RefitFaceBuilder();
            /**Returns  the refitting face <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * Face
            (
            );
            /**Returns  the list of targets  <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * Targets
            (
            );
            /**Returns  the refit face max check distance  <br> License requirements : None */
            public: double MaxCheckingDist
            (
            );
            /**Sets  the refit face max check distance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaxCheckingDist
            (
                double maxChckDst /** maxchckdst */ 
            );
            /**Returns  a flag that shows refit face direction in use  <br> License requirements : None */
            public: bool HasFitDirection
            (
            );
            /**Sets  a flag that shows refit face direction in use  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHasFitDirection
            (
                bool hasFitDir /** hasfitdir */ 
            );
            /**Returns  the refit face fit direction  <br> License requirements : None */
            public: NXOpen::Direction * FitDirection
            (
            );
            /**Sets  the refit face fit direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitDirection
            (
                NXOpen::Direction * fitDir /** fitdir */ 
            );
            /**Returns  the refit control parameters - type, degree, patches, direction, tolerance  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RefitControlBuilder * RefitControl
            (
            );
            /**Returns  the refit face constraints use flag <br> License requirements : None */
            public: bool UseConstraintsAll
            (
            );
            /**Sets  the refit face constraints use flag <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseConstraintsAll
            (
                bool constrAll /** constrall */ 
            );
            /**Returns  the refit face Umin constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintUMin
            (
            );
            /**Returns  the refit face Umax constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintUMax
            (
            );
            /**Returns  the refit face Vmin constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintVMin
            (
            );
            /**Returns  the refit face Vmax constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintVMax
            (
            );
            /**Returns  the refit face smoothing factor  <br> License requirements : None */
            public: int SmoothFactor
            (
            );
            /**Sets  the refit face smoothing factor  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSmoothFactor
            (
                int refitFaceSmoothFac /** refitfacesmoothfac */ 
            );
            /**Returns  the refit face modification percentage  <br> License requirements : None */
            public: int ModificationPercent
            (
            );
            /**Sets  the refit face modification percentage  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModificationPercent
            (
                int modPercent /** modpercent */ 
            );
            /**Returns  the refit type  <br> License requirements : None */
            public: NXOpen::Features::RefitFaceBuilder::Types Type
            (
            );
            /**Sets  the refit type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::RefitFaceBuilder::Types type /** type */ 
            );
            /**Returns  the new copy of match edge surface  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsCreateCopy
            (
            );
            /**Sets  the new copy of match edge surface  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetCreateCopy
            (
                bool createCopy /** createcopy */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
