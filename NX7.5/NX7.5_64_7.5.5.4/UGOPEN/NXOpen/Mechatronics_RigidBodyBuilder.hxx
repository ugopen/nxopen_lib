#ifndef NXOpen_MECHATRONICS_RIGIDBODYBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_RIGIDBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_RigidBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_RigidBodyBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Mechatronics
    {
        class RigidBodyBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Expression;
    class Point;
    class SelectNXObjectList;
    namespace Mechatronics
    {
        class _RigidBodyBuilderBuilder;
        class RigidBodyBuilderImpl;
        /**
            Represents a @link Mechatronics::RigidBodyBuilder Mechatronics::RigidBodyBuilder@endlink .
             <br> To create a new instance of this class, use @link Mechatronics::RigidBodyCollection::CreateRigidBodyBuilder Mechatronics::RigidBodyCollection::CreateRigidBodyBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RigidBodyBuilder : public Builder
        {
            /** the mass property option. */
            public: enum MassPropertiesOption
            {
                MassPropertiesOptionAutomatic/** automatic */,
                MassPropertiesOptionUserDefined/** user defined */
            };

            private: RigidBodyBuilderImpl * m_rigidbodybuilder_impl;
            private: friend class  _RigidBodyBuilderBuilder;
            protected: RigidBodyBuilder();
            public: ~RigidBodyBuilder();
            /**Returns  the geometries.  This can be a @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink , @link Point Point@endlink 
                    , bodies and curve.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString Name
            (
            );
            /**Sets  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the linear velocity magnitude.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * LinearVelocityMagnitude
            (
            );
            /**Returns  the angular velocity direction. It is only used when angular velocity is not zero.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Direction * AngularVelocityDirection
            (
            );
            /**Sets  the angular velocity direction. It is only used when angular velocity is not zero.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetAngularVelocityDirection
            (
                NXOpen::Direction * dir /** dir */ 
            );
            /**Returns  the angular velocity magnitude.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * AngularVelocityMagnitude
            (
            );
            /**Returns  the auto-calculate mass property flag which is used to indicate whether all mass 
                    properties are calculated by system.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::RigidBodyBuilder::MassPropertiesOption MassProperty
            (
            );
            /**Sets  the auto-calculate mass property flag which is used to indicate whether all mass 
                    properties are calculated by system.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetMassProperty
            (
                NXOpen::Mechatronics::RigidBodyBuilder::MassPropertiesOption massProperty /** mass property */ 
            );
            /**Returns  the mass center point.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Point * MassCenterPoint
            (
            );
            /**Sets  the mass center point.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetMassCenterPoint
            (
                NXOpen::Point * center /** center */ 
            );
            /**Returns  the mass.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * Mass
            (
            );
            /**Returns  the inertia Ixx.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIxx
            (
            );
            /**Returns  the inertia Iyy.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIyy
            (
            );
            /**Returns  the inertia Izz.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIzz
            (
            );
            /**Returns  the inertia Ixy.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIxy
            (
            );
            /**Returns  the inertia Ixz.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIxz
            (
            );
            /**Returns  the inertia Iyz.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * InertiaIyz
            (
            );
            /**Returns  the orientation.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::CoordinateSystem * Orientation
            (
            );
            /**Sets  the orientation.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetOrientation
            (
                NXOpen::CoordinateSystem * orientation /** orientation */ 
            );
            /**Returns  the linear velocity. It is only used when linear velocity is not zero.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Direction * LinearVelocityDirection
            (
            );
            /**Sets  the linear velocity. It is only used when linear velocity is not zero.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetLinearVelocityDirection
            (
                NXOpen::Direction * dir /** dir */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
