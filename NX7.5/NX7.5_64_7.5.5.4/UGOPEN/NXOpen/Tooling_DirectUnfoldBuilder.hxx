#ifndef NXOpen_TOOLING_DIRECTUNFOLDBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIRECTUNFOLDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DirectUnfoldBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_DirectUnfoldBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class DirectUnfoldBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Builder;
    class SelectFaceList;
    namespace Tooling
    {
        class _DirectUnfoldBuilderBuilder;
        class DirectUnfoldBuilderImpl;
        /**The builder contains all inputs for direct unfolding. They are:
            name of current design part
            name of bodies in current part
            planar faces for auto-recogniton
            ...
             <br> To create a new instance of this class, use @link Tooling::DirectUnfoldCollection::CreateDirectUnfoldBuilder Tooling::DirectUnfoldCollection::CreateDirectUnfoldBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Angle1 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle2 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle3 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle4 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle5 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle6 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        CurBodies </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        DesignSequence </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DevLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InterRenameComp </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Materials </td> <td> 
         
        Steel </td> </tr> 

        <tr><td> 
         
        NumBends </td> <td> 
         
        Two </td> </tr> 

        <tr><td> 
         
        NumInter </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        OrientPitch </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Pitch </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StartStation </td> <td> 
         
        2 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  DirectUnfoldBuilder : public Builder
        {
            /** The name list of bodies in current part. It is changed in selecting different part. */
            public: enum BodyList
            {
                BodyListNone/** Default is none. */
            };

            /** The material database defined in PDW. It is added in project initialization. */
            public: enum MatType
            {
                MatTypeSteel/** Default is steel. */
            };

            /** The number of children bends in defining prebend. */
            public: enum Bend
            {
                BendTwo/** two bends */,
                BendThree/** three bends */,
                BendFour/** four bends */,
                BendFive/** five bends */,
                BendSix/** six bends */
            };

            private: DirectUnfoldBuilderImpl * m_directunfoldbuilder_impl;
            private: friend class  _DirectUnfoldBuilderBuilder;
            protected: DirectUnfoldBuilder();
            public: ~DirectUnfoldBuilder();
            /**Returns  the planar faces selected as the start of automatic recognition.  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelPlanarFaces
            (
            );
            /**Returns  the current body list.  <br> License requirements : None */
            public: NXOpen::Tooling::DirectUnfoldBuilder::BodyList CurBodies
            (
            );
            /**Sets  the current body list.  <br> License requirements : None */
            public: void SetCurBodies
            (
                NXOpen::Tooling::DirectUnfoldBuilder::BodyList curBodies /** curbodies */ 
            );
            /**Returns  the selection list that stores bend faces.  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectBend
            (
            );
            /**Returns  the materials available in PDW.  <br> License requirements : None */
            public: NXOpen::Tooling::DirectUnfoldBuilder::MatType Materials
            (
            );
            /**Sets  the materials available in PDW.  <br> License requirements : None */
            public: void SetMaterials
            (
                NXOpen::Tooling::DirectUnfoldBuilder::MatType materials /** materials */ 
            );
            /** Opens process_data Speadsheet in PDW.  <br> License requirements : None */
            public: void LoadDatabase
            (
            );
            /** Evaluates K factors for every bend by giving material, radius of the bend and thickenss of the part.  <br> License requirements : None */
            public: void KByMaterial
            (
            );
            /**Returns  the operations of k factor for a single bend.  <br> License requirements : None */
            public: NXString KFactor
            (
            );
            /**Sets  the operations of k factor for a single bend.  <br> License requirements : None */
            public: void SetKFactor
            (
                const NXString & kFactor /** kfactor */ 
            );
            /**Returns  the operations to developed length of a bend.  <br> License requirements : None */
            public: double DevLength
            (
            );
            /**Sets  the operations to developed length of a bend.  <br> License requirements : None */
            public: void SetDevLength
            (
                double devLength /** devlength */ 
            );
            /**Returns  the number of bends.  <br> License requirements : None */
            public: NXOpen::Tooling::DirectUnfoldBuilder::Bend NumBends
            (
            );
            /**Sets  the number of bends.  <br> License requirements : None */
            public: void SetNumBends
            (
                NXOpen::Tooling::DirectUnfoldBuilder::Bend numBends /** numbends */ 
            );
            /**Returns  the first angle of prebend.  <br> License requirements : None */
            public: double Angle1
            (
            );
            /**Sets  the first angle of prebend.  <br> License requirements : None */
            public: void SetAngle1
            (
                double angle1 /** angle1 */ 
            );
            /**Returns  the second angle of prebend.  <br> License requirements : None */
            public: double Angle2
            (
            );
            /**Sets  the second angle of prebend.  <br> License requirements : None */
            public: void SetAngle2
            (
                double angle2 /** angle2 */ 
            );
            /**Returns  the third angle of prebend.  <br> License requirements : None */
            public: double Angle3
            (
            );
            /**Sets  the third angle of prebend.  <br> License requirements : None */
            public: void SetAngle3
            (
                double angle3 /** angle3 */ 
            );
            /**Returns  the fourth angle of prebend.  <br> License requirements : None */
            public: double Angle4
            (
            );
            /**Sets  the fourth angle of prebend.  <br> License requirements : None */
            public: void SetAngle4
            (
                double angle4 /** angle4 */ 
            );
            /**Returns  the fifth angle of prebend.  <br> License requirements : None */
            public: double Angle5
            (
            );
            /**Sets  the fifth angle of prebend.  <br> License requirements : None */
            public: void SetAngle5
            (
                double angle5 /** angle5 */ 
            );
            /**Returns  the sixth angle of prebend.  <br> License requirements : None */
            public: double Angle6
            (
            );
            /**Sets  the sixth angle of prebend.  <br> License requirements : None */
            public: void SetAngle6
            (
                double angle6 /** angle6 */ 
            );
            /**Returns  the design sequence.  <br> License requirements : None */
            public: int DesignSequence
            (
            );
            /**Sets  the design sequence.  <br> License requirements : None */
            public: void SetDesignSequence
            (
                int designSequence /** designsequence */ 
            );
            /**Returns  the number of intermediate stages.  <br> License requirements : None */
            public: int NumInter
            (
            );
            /**Sets  the number of intermediate stages.  <br> License requirements : None */
            public: void SetNumInter
            (
                int numInter /** numinter */ 
            );
            /**Returns  the start station.  <br> License requirements : None */
            public: int StartStation
            (
            );
            /**Sets  the start station.  <br> License requirements : None */
            public: void SetStartStation
            (
                int startStation /** startstation */ 
            );
            /**Returns  the pitch.  <br> License requirements : None */
            public: double Pitch
            (
            );
            /**Sets  the pitch.  <br> License requirements : None */
            public: void SetPitch
            (
                double pitch /** pitch */ 
            );
            /**Returns  the orientation of pitch.  <br> License requirements : None */
            public: int OrientPitch
            (
            );
            /**Sets  the orientation of pitch.  <br> License requirements : None */
            public: void SetOrientPitch
            (
                int orientPitch /** orientpitch */ 
            );
            /**Returns  the intermediate stages selected as the reference of insert.  <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * InterStage
            (
            );
            /**Returns  the edit intermediate stage option.  <br> License requirements : None */
            public: int EditOption
            (
            );
            /**Sets  the edit intermediate stage option.  <br> License requirements : None */
            public: void SetEditOption
            (
                int editOption /** editoption */ 
            );
            /**Returns  the naming rule of intermediate stages.  <br> License requirements : None */
            public: NXString InterNamingRule
            (
            );
            /**Sets  the naming rule of intermediate stages.  <br> License requirements : None */
            public: void SetInterNamingRule
            (
                const NXString & interNamingRule /** internamingrule */ 
            );
            /**Returns  the switch of rename components.  <br> License requirements : None */
            public: bool InterRenameComp
            (
            );
            /**Sets  the switch of rename components.  <br> License requirements : None */
            public: void SetInterRenameComp
            (
                bool interRenameComp /** interrenamecomp */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
