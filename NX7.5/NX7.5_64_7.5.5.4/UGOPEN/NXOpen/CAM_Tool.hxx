#ifndef NXOpen_CAM_TOOL_HXX_INCLUDED
#define NXOpen_CAM_TOOL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Tool.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NCGroup.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class Tool;
    }
    namespace CAM
    {
        class GenericTrackingBuilder;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class ProbeTrackPoint;
    }
    namespace CAM
    {
        class ProbeTrackingBuilder;
    }
    namespace CAM
    {
        class SolidTrackPoint;
    }
    namespace CAM
    {
        class SolidTrackingBuilder;
    }
    namespace CAM
    {
        class TrackPointCollection;
    }
    namespace CAM
    {
        class _ToolBuilder;
        class ToolImpl;
        /** Represents a NC group  <br> To obtain an instance of this class use @link CAM::NCGroupCollection CAM::NCGroupCollection@endlink  <br> */
        class NXOPENCPPEXPORT  Tool : public CAM::NCGroup
        {
            /** Tool types */
            public: enum Types
            {
                TypesMill/** Milling tool */,
                TypesDrill/** Drilling tool */,
                TypesTurn/** Turning tool */,
                TypesGroove/** Grooving tool */,
                TypesThread/** Threading tool */,
                TypesWedm/** WEDM tool */,
                TypesBarrel/** Milling tool-Barrel */,
                TypesTcutter/** Milling tool-T cutter */,
                TypesForm/** Form tool */,
                TypesDrillSpcGroove/** Milling tool-T cutter */,
                TypesSolid/** Solid tool */,
                TypesMillForm/** User defined mill tool */
            };

            /** Tool subtypes */
            public: enum Subtypes
            {
                SubtypesUndefined/** undefined */ ,
                SubtypesMill5/** Milling tool-5 parameters */,
                SubtypesMill7/** Milling tool-7 parameters */,
                SubtypesMill10/** Milling tool-10 parameters */,
                SubtypesMillBall/** Milling tool-Ball mill */,
                SubtypesDrillStandard/** Drilling tool */,
                SubtypesDrillCenterBell/** Centerdrill */,
                SubtypesDrillCountersink/** Countersink */,
                SubtypesDrillSpotFace/** Spot facing tool */,
                SubtypesDrillSpotDrill/** Spot drill */,
                SubtypesDrillBore/** Boring tool */,
                SubtypesDrillReam/** Reamer */,
                SubtypesDrillCounterbore/** Counterbore */,
                SubtypesDrillTap/** Tap */,
                SubtypesDrillBurnishing/** Burnishing tool */,
                SubtypesDrillThreadMill/** Thread mill */,
                SubtypesDrillBackSpotFace/** Back spot facing tool */,
                SubtypesDrillStep/** Step drill */,
                SubtypesTurnStandard/** Turning tool-Standard */,
                SubtypesTurnButton/** Turning tool-Button */,
                SubtypesTurnBoringBar/** Turning tool-Boring bar */,
                SubtypesGrooveStandard/** Grooving tool-Standard */,
                SubtypesGrooveRing/** Grooving tool-Ring */,
                SubtypesGrooveFullNoseRadius/** Grooving tool-Full nose radius */,
                SubtypesGrooveUserDefined/** Grooving tool-User defined */,
                SubtypesThreadStandard/** Threading tool-Standard */,
                SubtypesThreadButress/** Threading tool-Butress */,
                SubtypesThreadAcme/** Threading tool-ACME */,
                SubtypesThreadTrapezoidal/** Threading tool-Trapezoidal */,
                SubtypesGeneric/** Solid tool generic */,
                SubtypesProbe/** Probe */
            };

            private: ToolImpl * m_tool_impl;
            private: friend class  _ToolBuilder;
            protected: Tool();
            public: ~Tool();
            /** Creates a Solid Trackpoint builder  @return  solid trackpoint builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SolidTrackingBuilder * CreateSolidTrackingBuilder
            (
                NXOpen::CAM::SolidTrackPoint * csoObject /** solid tracking point to be edited */
            );
            /** Creates a Generic Trackpoint builder  @return  generic trackpoint builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GenericTrackingBuilder * CreateGenericTrackingBuilder
            (
                NXOpen::CAM::SolidTrackPoint * csoObject /** solid tracking point to be edited */
            );
            /** Creates a Probe Trackpoint builder  @return  probe trackpoint builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeTrackingBuilder * CreateProbeTrackingBuilder
            (
                NXOpen::CAM::ProbeTrackPoint * csoObject /** probe tracking point to be edited */
            );
            /** Update a library tool from the library  <br> License requirements : cam_base ("CAM BASE") */
            public: void UpdateFromLibrary
            (
            );
            /** Get cutter type and subtype  <br> License requirements : None */
            public: void GetTypeAndSubtype
            (
                NXOpen::CAM::Tool::Types* type /** tool type */,
                NXOpen::CAM::Tool::Subtypes* subtype /** tool subtype */
            );


            /** Returns the CAMTrackPointCollection */
            public: NXOpen::CAM::TrackPointCollection *CAMTrackPointCollection();
        };
    }
}
#undef EXPORTLIBRARY
#endif
