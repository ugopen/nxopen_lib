#ifndef NXOpen_GEOMETRICANALYSIS_ANALYSISOBJECTCOLLECTION_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_ANALYSISOBJECTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_AnalysisObjectCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionAnalysisExBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class AnalysisObjectCollection;
    }
    namespace GeometricAnalysis
    {
        class AnalysisManager;
    }
    namespace GeometricAnalysis
    {
        class AnalysisObject;
    }
    class DisplayableObject;
    namespace GeometricAnalysis
    {
        class CurveAnalysisCombsBuilder;
    }
    namespace GeometricAnalysis
    {
        class CurveAnalysisDisplay;
    }
    namespace GeometricAnalysis
    {
        class CurveAnalysisInflectionsBuilder;
    }
    namespace GeometricAnalysis
    {
        class CurveAnalysisPeaksBuilder;
    }
    namespace GeometricAnalysis
    {
        class CurveContinuityBuilder;
    }
    namespace GeometricAnalysis
    {
        class CurveCurvatureAnalysisBuilder;
    }
    namespace GeometricAnalysis
    {
        class DeviationGaugeBuilder;
    }
    namespace GeometricAnalysis
    {
        class GapFlushness;
    }
    namespace GeometricAnalysis
    {
        class GapFlushnessBuilder;
    }
    namespace GeometricAnalysis
    {
        class HighlightLinesAnalysisBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisExBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisExObject;
        }
    }
    namespace GeometricAnalysis
    {
        class SectionAnalysisObject;
    }
    namespace GeometricAnalysis
    {
        class SurfaceAnalysisDisplay;
    }
    namespace GeometricAnalysis
    {
        class SurfaceContinuityAnalysisBuilder;
    }
    namespace GeometricAnalysis
    {
        class SurfaceIntersectionBuilder;
    }
    namespace GeometricAnalysis
    {
        class AnalysisObjectCollectionImpl;
        /** Create a AnalysisObjectCollection  <br> To obtain an instance of this class, refer to @link GeometricAnalysis::AnalysisManager GeometricAnalysis::AnalysisManager@endlink  <br> */
        class NXOPENCPPEXPORT  AnalysisObjectCollection : public TaggedObjectCollection
        {
            private: AnalysisObjectCollectionImpl * m_analysisobjectcollection_impl;
            private: NXOpen::GeometricAnalysis::AnalysisManager* m_owner;
            /** Constructor */
            public: explicit AnalysisObjectCollection(NXOpen::GeometricAnalysis::AnalysisManager *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AnalysisObjectCollection();
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef GeometricAnalysis::AnalysisObject * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::GeometricAnalysis::AnalysisObjectCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::GeometricAnalysis::AnalysisObjectCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a gap and flushness builder  @return  Gap and Flushness builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder * CreateGapFlushnessBuilder
            (
                NXOpen::GeometricAnalysis::GapFlushness * gfaoObject /** Gap and Flushness  */
            );
            /** Creates a surface continuity analysis builder  @return  Surface Continuity Analysis builder  <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::GeometricAnalysis::SurfaceContinuityAnalysisBuilder * CreateSurfaceContinuityAnalysisBuilder
            (
                NXOpen::DisplayableObject * scaoObject /** Surface Continuity Analysis */
            );
            /** Creates a curve curvature analysis builder  @return  Curve Curvature Analysis builder  <br> License requirements : gateway ("UG GATEWAY") */
            public: NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder * CreateCurveCurvatureAnalysisBuilder
            (
                NXOpen::DisplayableObject * caaoObject /**Curve Curvature Analysis */
            );
            /** Creates a curve analysis combs builder  @return  Curve analysis Combs Builder <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::CurveAnalysisCombsBuilder * CreateCurveAnalysisCombsBuilder
            (
            );
            /** Creates a curve analysis inflections builder  @return  Curve analysis Inflections Builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::CurveAnalysisInflectionsBuilder * CreateCurveAnalysisInflectionsBuilder
            (
            );
            /** Creates a curve analysis peaks builder  @return  Curve analysis Peaks Builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::CurveAnalysisPeaksBuilder * CreateCurveAnalysisPeaksBuilder
            (
            );
            /** Creates a Highlight Lines Analysis builder  @return  Highlight Lines Analysis builder  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder * CreateHighlightLinesAnalysisBuilder
            (
                NXOpen::DisplayableObject * hpaoObject /** Highlight Lines Analysis object */
            );
            /** Creates a Section Analysis object builder  @return  Section Analysis builder  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder * CreateSectionAnalysisBuilder
            (
                NXOpen::GeometricAnalysis::SectionAnalysisObject * msaoObject /** Section Analysis object */
            );
            /** Creates a Section Analysis builder of a new version @return  Section Analysis builder  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder * CreateSectionAnalysisExBuilder
            (
                NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExObject * csaoObject /** Section Analysis object */
            );
            /** Creates a  Deviation Gauge Builder  @return  DeviationGauge builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder * CreateDeviationGaugeBuilder
            (
                NXOpen::DisplayableObject * ddaoObject /** DDAO  */
            );
            /** Creates a Curve Continuity Builder  @return  Curve Continuity AO builder  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: NXOpen::GeometricAnalysis::CurveContinuityBuilder * CreateCurveContinuityBuilder
            (
                NXOpen::DisplayableObject * ccaoObject /** CCAO */
            );
            /** Creates a surface intersection  builder  @return  surface intersection builder  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: NXOpen::GeometricAnalysis::SurfaceIntersectionBuilder * CreateSurfaceIntersectionBuilder
            (
                NXOpen::DisplayableObject * siaoObject /**surface intersection */
            );


            /** Returns object for displaying curve analysis information */
            public: NXOpen::GeometricAnalysis::CurveAnalysisDisplay *CurveAnalysisDisplayObject();
            /** Returns object for displaying surface analysis information */
            public: NXOpen::GeometricAnalysis::SurfaceAnalysisDisplay *SurfaceAnalysisDisplayObject();
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
