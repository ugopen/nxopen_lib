#ifndef NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
#define NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_Constraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Positioning_ConstraintReference.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Positioning
    {
        class Constraint;
    }
    class Expression;
    class NXObject;
    namespace Positioning
    {
        class ConstraintReference;
    }
    namespace Positioning
    {
        class DisplayedConstraint;
    }
    namespace Positioning
    {
        class _ConstraintBuilder;
        class ConstraintImpl;
        /**
            Constraint for use in positioning objects in NX.
            For constraints between components, the subclass @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  should be used by preference.
         <br> To create a new instance of this class, use @link Positioning::Positioner::CreateConstraint Positioning::Positioner::CreateConstraint@endlink  <br> */
        class NXOPENCPPEXPORT  Constraint : public NXObject
        {
            /** Specifies the type of a constraint. */
            public: enum Type
            {
                TypeUndefined/** No type */,
                TypeTouch/** Two geometries touch */,
                TypeConcentric/** Two geometries share a center and plane */,
                TypeFix/** One movable object fixed */,
                TypeDistance/** Two geometries have a specified distance between them */,
                TypeParallel/** Two geometries are parallel */,
                TypePerpendicular/** Two geometries are perpendicular */,
                TypeCenter12/** One geometry is positioned mid-way between two others */,
                TypeCenter22/** An implicit plane between two geometries of one movable object is positioned mid-way between two others */,
                TypeAngle/** Two geometries have a specified angle between them */,
                TypeFit/** Two geometries are coincident */,
                TypeBond/** A number of movable objects form a rigid group */,
                TypeOrientAngle/** Two geometries have a specified angle between them about an axis */,
                TypeSplineData/** A spline and its defining points */,
                TypeSplineLength/** Constrains the curve length of a spline */
            };

            /** Specifies alignment of directed geometries used in a constraint. */
            public: enum Alignment
            {
                AlignmentInferAlign/** Allow the solver to decide the alignment */,
                AlignmentCoAlign/** Directions are the same */,
                AlignmentContraAlign/** Directions are opposite */
            };

            /** Specifies the status of a constraint. */
            public: enum SolverStatus
            {
                SolverStatusNewlyCreated/** Not evaluated or suppressed since creation */,
                SolverStatusSuppressed/** Constraint is suppressed */,
                SolverStatusOutOfDate/** Needs evaluation */,
                SolverStatusOverConstrained/** Conflicts with other constraints */,
                SolverStatusNotConsistentDims/** Cannot solve with current dimension values. Model fully defined */,
                SolverStatusNotConsistentOther/** Cannot find a solution. Model underdefined */,
                SolverStatusNotConsistentUnknown/** Cannot find a solution */,
                SolverStatusBetweenFixed/** Attempt to put constraint between two fixed objects */,
                SolverStatusNotSolved/** Not evaluated because other parts of the model are over defined or inconsistent */,
                SolverStatusSolved/** The constraint is solved and satisfied */,
                SolverStatusCannotSolve/** The constraint has invalid geometry and could not be passed to the solver */,
                SolverStatusDelayed/** The constraint is delayed and will not solve */,
                SolverStatusIgnoredInArrangement/** The current arrangement ignores all constraints and they will not solve */,
                SolverStatusInternallyInconsistent/** The constraint references invalid geometry for this constraint type */,
                SolverStatusUnloadedGeometry/** The constraint could not solve as some geometry is unloaded */,
                SolverStatusPendingConvertedMc/** The constraint has been converted from a mating condition and has not solved since conversion */
            };

            /** Specifies how the spline points define the shape of the spline. */
            public: enum SplineType
            {
                SplineTypeByPoles/** Spline points define control points. */,
                SplineTypeByPoints/** Spline points define interpolation/through points. */,
                SplineTypeInvalid/** Not a valid spline constraint. */
            };

            private: ConstraintImpl * m_constraint_impl;
            private: friend class  _ConstraintBuilder;
            protected: Constraint();
            public: ~Constraint();
            /** 
                    Gets all the @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink s for the 
                    constraint.
                 @return  ConstraintReferences used by this constraint  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ConstraintReference *> GetReferences
            (
            );
            /** 
                    Removes a @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink  from the constraint. 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteConstraintReference
            (
                NXOpen::Positioning::ConstraintReference * constraintReference /** The constraint reference to remove. A list 
                                                                                                  of references can be obtained via
                                                                                                  @link Positioning::Constraint::GetReferences Positioning::Constraint::GetReferences@endlink . */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.
                 @return  The new @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.  
                 @return  The new @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */,
                bool usePortRotate /** Use rotate vector of @link Routing::Port Routing::Port@endlink . */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained, replacing the properties of an existing
                    reference of the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EditConstraintReference
            (
                NXOpen::Positioning::ConstraintReference * constraintReference /** The @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink  whose properties are to be changed */,
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */,
                bool usePortRotate /** Use rotate vector of @link Routing::Port Routing::Port@endlink . */
            );
            /**Returns  
                    the constraint type.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Type ConstraintType
            (
            );
            /**Sets  
                    the constraint type.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintType
            (
                NXOpen::Positioning::Constraint::Type constraintType /** constraint type */ 
            );
            /**Sets  
                    the alignment behavior for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintAlignment
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** Alignment behavior for constraint */
            );
            /**Returns  
                    the alignment behavior for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Alignment ConstraintAlignment
            (
            );
            /** 
                    Reverses the constraint alignment if this is possible.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void FlipAlignment
            (
            );
            /**Sets  
                    the suppression state for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuppressed
            (
                bool suppressed /**  The suppression state */
            );
            /**Returns  
                    the suppression state for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Suppressed
            (
            );
            /** The expression used for constraint - only for distance or angle  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetExpression
            (
                const NXString & expression /** Name of expression used in distance or angle constraint   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
                    the expression used for constraint.
                    The expression will be unused unless this constraint has type
                    distance or angle.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * Expression
            (
            );
            /** 
                    Returns the solver status of a constraint.
                 @return  The solver status of the constraint  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::SolverStatus GetConstraintStatus
            (
            );
            /** 
                    Set a hint as to which alignment should be used by the
                    solver for this constraint.
                    
                    If the constraint does not solve using this alignment
                    then the hint will be ignored.                
                    
                    The hint can only have an effect when the alignment of
            [version_created("4")] 
                    the constraint, as returned by @link Positioning::Constraint::ConstraintAlignment Positioning::Constraint::ConstraintAlignment@endlink ,
                    is @link Positioning::Constraint::AlignmentInferAlign Positioning::Constraint::AlignmentInferAlign@endlink .
                    
                    The hint can only have an effect when the constraint has been
                    explicitly added to a @link Positioning::Network Positioning::Network@endlink .
                    
                    Passing in @link Positioning::Constraint::AlignmentInferAlign Positioning::Constraint::AlignmentInferAlign@endlink  as the alignment
                    argument will have no effect.
                    
                    The hint is forgotten after an update.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAlignmentHint
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** The alignment hint */
            );
            /**Sets  
                    the persistent state of the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPersistent
            (
                bool persistent /**  The persistent state */
            );
            /**Returns  
                    the persistent state of the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Persistent
            (
            );
            /**Sets  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAutomatic
            (
                bool isauto /** The automatic state */
            );
            /**Returns  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Automatic
            (
            );
            /**
                    Returns a textual conversion report this constraint from when it was converted from a
                    Mating Constraint to an Assembly Constraint. If this isn't a converted constraint
                    or there were no problems converting this constraint, then an empty string is returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GenerateConversionReport
            (
                std::vector<NXString> & lines /** The text lines of the conversion report */
            );
            /** 
                    Reverses the constraint direction.  This operation reverses the @link Positioning::ConstraintReference::Order Positioning::ConstraintReference::Order@endlink 
                    on each @link Positioning::ConstraintReference Positioning::ConstraintReference@endlink .
                    So "Inside" becomes "Outside", "Outside" becomes "Inside" and "Unknown" remains as it is.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReverseDirection
            (
            );
            /**Returns  the type of the spline.  Only valid if the type of the constraint is
                  set to @link Positioning::Constraint::TypeSplineData Positioning::Constraint::TypeSplineData@endlink .  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::SplineType SplinePointsType
            (
            );
            /**Sets  the type of the spline.  Only valid if the type of the constraint is
                  set to @link Positioning::Constraint::TypeSplineData Positioning::Constraint::TypeSplineData@endlink .  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSplinePointsType
            (
                NXOpen::Positioning::Constraint::SplineType splineType /** spline type */ 
            );
            /**
                    Gets the @link Positioning::DisplayedConstraint Positioning::DisplayedConstraint@endlink  that is in the same part as that of the constraint.

                    Note that this will be NULL if the part has not been the displayed part since the constraint was created.
                 @return   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::DisplayedConstraint * GetDisplayedConstraint
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
