#ifndef NXOpen_TOOLING_MWDESIGNPARTINGSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MWDESIGNPARTINGSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MWDesignPartingSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_SurfaceRangeBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_MWDesignPartingSurfaceBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class MWDesignPartingSurfaceBuilder;
    }
    class Body;
    class Builder;
    class Direction;
    class Expression;
    class Face;
    namespace GeometricUtilities
    {
        class SurfaceRangeBuilder;
    }
    class ScCollector;
    class SelectCurve;
    class SelectCurveList;
    class SelectEdgeList;
    namespace Tooling
    {
        class _MWDesignPartingSurfaceBuilderBuilder;
        class MWDesignPartingSurfaceBuilderImpl;
        /** The builder for designing parting surface in Mold Wizard.  <br> To create a new instance of this class, use @link Tooling::MWDesignPartingSurfaceCollection::CreateBuilder Tooling::MWDesignPartingSurfaceCollection::CreateBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AlternateMethod </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EnlargeOtherFaceOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ExtendDistance.Value </td> <td> 
         
        1 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtrudeDistance </td> <td> 
         
        60 </td> </tr> 

        <tr><td> 
         
        ResizeAllDirections </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SurfaceRange.AnchorPosition </td> <td> 
         
        Vertex1 </td> </tr> 

        <tr><td> 
         
        SurfaceTolerance </td> <td> 
         
        0.01 </td> </tr> 

        <tr><td> 
         
        SurfaceType </td> <td> 
         
        Extrude </td> </tr> 

        <tr><td> 
         
        TransitionSurfType </td> <td> 
         
        Auto </td> </tr> 

        <tr><td> 
         
        TrimAndExtendFromRegion </td> <td> 
         
        Cavity </td> </tr> 

        <tr><td> 
         
        TrimWithGuideLines </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  MWDesignPartingSurfaceBuilder : public Builder
        {
            /** The type of parting surface to be created. */
            public: enum PartingSurfaceType
            {
                PartingSurfaceTypeExtrude/** Extrude         */,
                PartingSurfaceTypeSwept/** Swept           */,
                PartingSurfaceTypeBoundedPlane/** Bounded plane   */,
                PartingSurfaceTypeEnlargedSurface/** Enlarge         */,
                PartingSurfaceTypeTrimandExtend/** Trim and extend */,
                PartingSurfaceTypeRibbonSurface/** Ribbon          */
            };

            /** The region type from which to trim and extend when creating parting surface. */
            public: enum TrimAndExtendFromRegionType
            {
                TrimAndExtendFromRegionTypeCavity/** From cavity region */,
                TrimAndExtendFromRegionTypeCore/** From core region   */
            };

            /** The type of transition surface to be created. */
            public: enum TransitionSurfaceType
            {
                TransitionSurfaceTypeAuto/** Auto transition surface    */,
                TransitionSurfaceTypeBoundedPlane/** Bounded transition surface */,
                TransitionSurfaceTypeSwept/** Swept transition surface   */,
                TransitionSurfaceTypeBridge/** Bridge transition surface  */
            };

            /** The type of parting objects to be edited or placed. */
            public: enum ObjectType
            {
                ObjectTypePartingSurface/** Parting surface   */,
                ObjectTypePartingLine/** Parting line      */,
                ObjectTypeGuideLine/** Guide line        */,
                ObjectTypeTransitionObject/** Transition object */
            };

            private: MWDesignPartingSurfaceBuilderImpl * m_mwdesignpartingsurfacebuilder_impl;
            private: friend class  _MWDesignPartingSurfaceBuilderBuilder;
            protected: MWDesignPartingSurfaceBuilder();
            public: ~MWDesignPartingSurfaceBuilder();
            /**Returns  the parting lines for creating parting surface.  <br> License requirements : None */
            public: NXOpen::SelectCurveList * PartingLines
            (
            );
            /**Returns  the type of parting surface to be created.  <br> License requirements : None */
            public: NXOpen::Tooling::MWDesignPartingSurfaceBuilder::PartingSurfaceType SurfaceType
            (
            );
            /**Sets  the type of parting surface to be created.  <br> License requirements : None */
            public: void SetSurfaceType
            (
                NXOpen::Tooling::MWDesignPartingSurfaceBuilder::PartingSurfaceType surfaceType /** surfacetype */ 
            );
            /**Returns  the extrude or first direction used in creating parting surface that requires only one direction.  <br> License requirements : None */
            public: NXOpen::Direction * ExtrudeDirection
            (
            );
            /**Sets  the extrude or first direction used in creating parting surface that requires only one direction.  <br> License requirements : None */
            public: void SetExtrudeDirection
            (
                NXOpen::Direction * extrudeDirection /** extrudedirection */ 
            );
            /**Returns  the second direction used in creating parting surface that requires two directions.  <br> License requirements : None */
            public: NXOpen::Direction * SecondDirection
            (
            );
            /**Sets  the second direction used in creating parting surface that requires two directions.  <br> License requirements : None */
            public: void SetSecondDirection
            (
                NXOpen::Direction * secondDirection /** seconddirection */ 
            );
            /**Returns  the option for enlarging the other face that connects to the same edge.  <br> License requirements : None */
            public: bool EnlargeOtherFaceOption
            (
            );
            /**Sets  the option for enlarging the other face that connects to the same edge.  <br> License requirements : None */
            public: void SetEnlargeOtherFaceOption
            (
                bool enlargeOtherFaceOption /** enlargeotherfaceoption */ 
            );
            /**Returns  the option for "trim and extend" from the cavity or core region.  <br> License requirements : None */
            public: NXOpen::Tooling::MWDesignPartingSurfaceBuilder::TrimAndExtendFromRegionType TrimAndExtendFromRegion
            (
            );
            /**Sets  the option for "trim and extend" from the cavity or core region.  <br> License requirements : None */
            public: void SetTrimAndExtendFromRegion
            (
                NXOpen::Tooling::MWDesignPartingSurfaceBuilder::TrimAndExtendFromRegionType trimAndExtendFromRegion /** trimandextendfromregion */ 
            );
            /**Returns  the option to trim with guide lines.  <br> License requirements : None */
            public: bool TrimWithGuideLines
            (
            );
            /**Sets  the option to trim with guide lines.  <br> License requirements : None */
            public: void SetTrimWithGuideLines
            (
                bool trimWithGuideLines /** trimwithguidelines */ 
            );
            /**Returns  the option to enlarge or resize surface for all directions.  <br> License requirements : None */
            public: bool ResizeAllDirections
            (
            );
            /**Sets  the option to enlarge or resize surface for all directions.  <br> License requirements : None */
            public: void SetResizeAllDirections
            (
                bool resizeAllDirections /** resizealldirections */ 
            );
            /**Returns  the extend distance for creating parting surface.  <br> License requirements : None */
            public: NXOpen::Expression * ExtendDistance
            (
            );
            /**Returns  the primary edges for creating transition parting surface.  <br> License requirements : None */
            public: NXOpen::SelectEdgeList * PrimaryEdges
            (
            );
            /**Returns  the type of transition surface to be created.  <br> License requirements : None */
            public: NXOpen::Tooling::MWDesignPartingSurfaceBuilder::TransitionSurfaceType TransitionSurfType
            (
            );
            /**Sets  the type of transition surface to be created.  <br> License requirements : None */
            public: void SetTransitionSurfType
            (
                NXOpen::Tooling::MWDesignPartingSurfaceBuilder::TransitionSurfaceType transitionSurfType /** transitionsurftype */ 
            );
            /**Returns  the option to use the system provided alternate method to create transition parting surface.  <br> License requirements : None */
            public: bool AlternateMethod
            (
            );
            /**Sets  the option to use the system provided alternate method to create transition parting surface.  <br> License requirements : None */
            public: void SetAlternateMethod
            (
                bool alternateMethod /** alternatemethod */ 
            );
            /**Returns  the surface range for enlarging surface.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SurfaceRangeBuilder * SurfaceRange
            (
            );
            /**Returns  the parting lines to edit.  <br> License requirements : None */
            public: NXOpen::ScCollector * EditPartingLines
            (
            );
            /**Returns  the guide or parting line to create or edit a guide line.  <br> License requirements : None */
            public: NXOpen::SelectCurve * GuideOrPartingLine
            (
            );
            /**Returns  the transition curves or points used in creating transition parting surface.  <br> License requirements : None */
            public: NXOpen::SelectCurveList * TransitionObjects
            (
            );
            /**Returns  the surface tolerance.  <br> License requirements : None */
            public: double SurfaceTolerance
            (
            );
            /**Sets  the surface tolerance.  <br> License requirements : None */
            public: void SetSurfaceTolerance
            (
                double surfaceTolerance /** surfacetolerance */ 
            );
            /**Returns  the extrude distance for updating the expression "parting_extrude_distance".  <br> License requirements : None */
            public: double ExtrudeDistance
            (
            );
            /**Sets  the extrude distance for updating the expression "parting_extrude_distance".  <br> License requirements : None */
            public: void SetExtrudeDistance
            (
                double extrudeDistance /** extrudedistance */ 
            );
            /** Perform initialization tasks when entering the Design Parting Surface command.  <br> License requirements : None */
            public: void InitializeOnEntry
            (
            );
            /** Display the parting surfaces, guide lines, and parting lines when entering the Design Parting Surface command.  <br> License requirements : None */
            public: void DisplayObjectsOnEntry
            (
            );
            /** Change the type of parting objects to be placed or edited.  <br> License requirements : None */
            public: void ChangePartingObjectType
            (
                int partingObjectType /** Parting object type */
            );
            /** Pre-create a bounded plane or enlarged surface when the respective surface type is on.  <br> License requirements : None */
            public: void PreCreateBoundedPlaneAndEnlargedSurface
            (
            );
            /** Clear the pre-created bounded plane and enlarged surface if no longer needed.  <br> License requirements : None */
            public: void ClearPreCreatedBoundedPlaneAndEnlargedSurface
            (
                int differentSegment /** Different segment flag */
            );
            /** Update the expression for the parting surface extrude distance with a new value.  <br> License requirements : None */
            public: void UpdateExtrudeDistanceExpression
            (
                double extrudeDistance /** Extrude distance for expression */
            );
            /** Delete a newly created parting surface.  <br> License requirements : None */
            public: void DeletePartingSurface
            (
                NXOpen::Body * partingSheet /** Parting sheet to be deleted */
            );
            /** Finalize the creation of bounded plane or enlarged surface parting surface.  <br> License requirements : None */
            public: void FinalizeCreatePartingSurface
            (
            );
            /** Flip the trimmed bounded plane or the enlarged surface for parting surface.  <br> License requirements : None */
            public: void FlipTrimmedSheet
            (
            );
            /** Create surface data for enlarged surface.  <br> License requirements : None */
            public: void CreateSurfaceData
            (
                NXOpen::Face * faceTag /** Face for the surface data */
            );
            /** Update the preview surface for the bounded plane or enlarged surface.  <br> License requirements : None */
            public: void UpdatePreviewSurface
            (
            );
            /** Update parting lines after traversing parting lines.  <br> License requirements : None */
            public: void UpdatePartingLines
            (
            );
            /** Update the parting lines being edited to reflect the change immediately  <br> License requirements : None */
            public: void UpdateEditPartingLines
            (
            );
            /** Update transition points after editing guide lines.  <br> License requirements : None */
            public: void UpdateTransitionPoints
            (
            );
            /** Check if suppressing parting is needed.  <br> License requirements : None */
            public: void CheckSuppressParting
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
