#ifndef NXOpen_ROUTING_ROUTESWEPTTWISTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTESWEPTTWISTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteSweptTwistBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimWithValueBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Routing_RouteSweptTwistBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class RouteSweptTwistBuilder;
    }
    class Builder;
    class Curve;
    namespace GeometricUtilities
    {
        class OnPathDimWithValueBuilder;
    }
    class Point;
    class SelectNXObject;
    class TaggedObjectList;
    namespace Routing
    {
        class _RouteSweptTwistBuilderBuilder;
        class RouteSweptTwistBuilderImpl;
        /**  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateRouteSweptTwistBuilder Routing::RouteManager::CreateRouteSweptTwistBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RouteSweptTwistBuilder : public Builder
        {
            private: RouteSweptTwistBuilderImpl * m_routeswepttwistbuilder_impl;
            private: friend class  _RouteSweptTwistBuilderBuilder;
            protected: RouteSweptTwistBuilder();
            public: ~RouteSweptTwistBuilder();
            /**Returns  the stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObject * Stock
            (
            );
            /**Returns  the twist point  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Point * TwistPoint
            (
            );
            /**Sets  the twist point  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTwistPoint
            (
                NXOpen::Point * twistPoint /** twistpoint */ 
            );
            /**Returns  the twist point list  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::TaggedObjectList * TwistPointList
            (
            );
            /** Creates a new spine point  @return  OnPathDimWithValueBuilder Object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * CreateSpinePoint
            (
            );
            /** Creates a new spine  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void CreateSpine
            (
            );
            /**Returns  the spine  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Curve * Spine
            (
            );
            /** The twist data i.e locations and angles  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AskExistingTwistData
            (
                std::vector<double> & locations /** Number of locations */,
                std::vector<double> & angles /** Number of angles */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
