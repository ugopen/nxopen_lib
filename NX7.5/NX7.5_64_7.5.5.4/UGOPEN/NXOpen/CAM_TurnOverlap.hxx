#ifndef NXOpen_CAM_TURNOVERLAP_HXX_INCLUDED
#define NXOpen_CAM_TURNOVERLAP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnOverlap.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_TurnOverlap.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnOverlap;
    }
    namespace CAM
    {
        class _TurnOverlapBuilder;
        class TurnOverlapImpl;
        /**
            Represents a @link CAM::TurnOverlap CAM::TurnOverlap@endlink 
            */
        class NXOPENCPPEXPORT  TurnOverlap : public TaggedObject
        {
            /** the overlap types */
            public: enum Types
            {
                TypesNone/** Overlap mode: Off */,
                TypesDistance/** Overlap mode: Distance (mm/inch) */,
                TypesPercentage/** Overlap mode: Percentage */
            };

            private: TurnOverlapImpl * m_turnoverlap_impl;
            private: friend class  _TurnOverlapBuilder;
            protected: TurnOverlap();
            public: ~TurnOverlap();
            /**Returns  the overlap type  <br> License requirements : None */
            public: NXOpen::CAM::TurnOverlap::Types Type
            (
            );
            /**Sets  the overlap type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::CAM::TurnOverlap::Types overlapMode /** the overlap type */
            );
            /**Returns  the overlap distance <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the overlap distance <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDistance
            (
                double overlapDistance /** the overlap distance*/
            );
            /**Returns  the overlap percentage  <br> License requirements : None */
            public: double Percentage
            (
            );
            /**Sets  the overlap percentage  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPercentage
            (
                double overlapPercentage /** the overlap percentage */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
