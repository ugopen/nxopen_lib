#ifndef NXOpen_ROUTING_RUN_HXX_INCLUDED
#define NXOpen_ROUTING_RUN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Run.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_RunItem.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class Run;
    }
    class NXObject;
    class ObjectList;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class RoutingSystem;
    }
    namespace Routing
    {
        class RunItem;
    }
    namespace Routing
    {
        class _RunBuilder;
        class RunImpl;
        /** Routing Run object references components and stocks which comprise a piping run.  <br> To create an instance of this class us @link Routing::RunCollection::CreateRun Routing::RunCollection::CreateRun@endlink  <br> */
        class NXOPENCPPEXPORT  Run : public NXObject
        {
            /** Represents the status of a run */
            public: enum Status
            {
                StatusValid/** Run is valid. All items are connected and all segments have
                                                                stocks assigned on them */,
                StatusBroken/** Run is broken. All items are not connected end to end */,
                StatusIncomplete/** Run is incomplete. Some segments do not have stock assigned on them*/
            };

            /** Represents discrepancies in the run compared to another run */
            public: enum CompareStatus
            {
                CompareStatusNone/** Run has no compare status. Compare operation is not invoked yet */,
                CompareStatusOk/** No missing, extra or discrepancy items */,
                CompareStatusMissingRun/** Entire run is missing */,
                CompareStatusExtraRun/** Entire run is extra */,
                CompareStatusMissingItem/** Item or items are missing from the run */,
                CompareStatusExtraItem/** Extra item or items present in the run */,
                CompareStatusDiscrepancy/** Items have characteristics discrepancies */
            };

            private: RunImpl * m_run_impl;
            private: friend class  _RunBuilder;
            protected: Run();
            public: ~Run();
            /** Retrieves the run_id of run  @return  Run id of run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXString GetRunId
            (
            );
            /** Retrieves the run type of run  @return  Run type of run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXString GetRunType
            (
            );
            /** Retrieves the from items of a run. From items are extracted ports or run  @return  All from items of the run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetFromItems
            (
            );
            /** Retrieves the data of the "From" items of a run  @return  Array of data for the "From" items.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::RunItem *> GetFromItemData
            (
            );
            /** Retrieves the to items of a run. To items are extracted ports or run @return  All to items of the run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetToItems
            (
            );
            /** Retrieves the data of the "To" items of a run  @return  Array of data for the "To" items.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::RunItem *> GetToItemData
            (
            );
            /** Retrieves the member items of a run. Member items are extracted ports, stocks,
                        or segments.  @return  All member items of the run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetMemberItems
            (
            );
            /** Retrieves the data of the "Member" items of a run  @return  Array of data for the "Member" items.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::RunItem *> GetMemberItemData
            (
            );
            /** Edits an existing run with new items. NOTE: Removes any existing items in the run and adds these new items  @return  Valid, broken or incomplete run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Run::Status Edit
            (
                const NXString & runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & from /** Array of to items. Must be @link Port Port@endlink ,
                                                             @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & to /** Array of to items. Must be @link Routing::Port Routing::Port@endlink ,
                                                            @link Routing::Run Routing::Run@endlink  or @link Routing::ControlPoint Routing::ControlPoint@endlink  */,
                const std::vector<NXOpen::NXObject *> & member /** Array of member items. Must be @link Assemblies::Component Assemblies::Component@endlink ,
                                                             @link Routing::ISegment Routing::ISegment@endlink  or Routing.Stock */
            );
            /** Edits an existing run with new run item data. NOTE: Removes any existing items in the run and adds these new items.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: void Edit
            (
                const NXString & runId /** Unique identifier of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & runType /** Type of the Run   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Routing::RunItem *> & fromItems /** Array of "From" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & toItems /** Array of "To" item data. */,
                const std::vector<NXOpen::Routing::RunItem *> & memberItems /** Array of "Member" item data. */
            );
            /** Ask the status of run  @return  Valid, broken or incomplete run  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Run::Status GetRunStatus
            (
            );
            /** Ask the @link Routing::RoutingSystem Routing::RoutingSystem@endlink  run belongs to  @return  RoutingSystem run belongs to  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RoutingSystem * GetRoutingSystem
            (
            );
            /** Ask the compare status of run  @return  Run compare status  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Run::CompareStatus GetRunCompareStatus
            (
            );
            /** Get flow direction of a run segment  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: int RunSegmentGetFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ 
            );
            /** Set flow direction of a run segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: void RunSegmentSetFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ ,
                int flowState /** flow state */ 
            );
            /** Reverse flow direction of a run segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: void RunSegmentReverseFlowDirection
            (
                NXOpen::Routing::ISegment * segment /** segment */ 
            );
            /** This will detect spools in a run  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::ObjectList *> DetectRunSpools
            (
            );
            /** This will delete run and run members  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteRunAndRunMembers
            (
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
