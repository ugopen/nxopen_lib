#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISEXBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISEXBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionAnalysisExBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CurveAlignedBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_InteractiveBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_IsoparametricBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_ParallelPlanesExBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_RadialBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionAnalysisExBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisExBuilder;
        }
    }
    class Builder;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CurveAlignedBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class InteractiveBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class IsoparametricBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class ParallelPlanesExBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class RadialBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class XYZPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class SelectPointList;
    class SelectTaggedObjectList;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionAnalysisExBuilderBuilder;
            class SectionAnalysisExBuilderImpl;
            /** Represents a @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExObject GeometricAnalysis::SectionAnalysis::SectionAnalysisExObject@endlink  builder  <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisExBuilder GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisExBuilder@endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            Alignment </td> <td> 
             
            XYZPlane </td> </tr> 

            <tr><td> 
             
            CalculationMethod </td> <td> 
             
            Curvature </td> </tr> 

            <tr><td> 
             
            CurveAligned.IsSpacingEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            CurveAligned.Number </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            CurveAligned.Offset </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            CurveAligned.Spacing </td> <td> 
             
            25 </td> </tr> 

            <tr><td> 
             
            CurveAligned.SpecifiedPlane.Plane </td> <td> 
             
            View </td> </tr> 

            <tr><td> 
             
            CurveAligned.UseProjectedCurve </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            Interactive.IsCutInfiniteEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            IsShowInflectionPointsEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            IsShowLengthEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            IsShowPeakPointsEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            Isoparametric.IsSpacingEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            Isoparametric.IsUEnabled </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            Isoparametric.IsVEnabled </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            Isoparametric.Number </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            Isoparametric.Spacing </td> <td> 
             
            25 </td> </tr> 

            <tr><td> 
             
            NeedleDirection </td> <td> 
             
            Outside </td> </tr> 

            <tr><td> 
             
            Output </td> <td> 
             
            AnalysisObject </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.IsNumberEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.IsSpacingEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Number </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Offset </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing </td> <td> 
             
            50 (millimeters part), 2 (inches part) </td> </tr> 

            <tr><td> 
             
            Placement </td> <td> 
             
            Uniform </td> </tr> 

            <tr><td> 
             
            Radial.IsSpacingEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            Radial.Number </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            Radial.Offset </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            Radial.RotationAxis </td> <td> 
             
            View </td> </tr> 

            <tr><td> 
             
            Radial.Spacing </td> <td> 
             
            72 </td> </tr> 

            <tr><td> 
             
            ScalingMethod </td> <td> 
             
            Linear </td> </tr> 

            <tr><td> 
             
            XYZPlane.IsNumberEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            XYZPlane.IsSpacingEnabled </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            XYZPlane.IsXEnabled </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            XYZPlane.IsYEnabled </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            XYZPlane.IsZEnabled </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            XYZPlane.Number </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            XYZPlane.Spacing </td> <td> 
             
            50 (millimeters part), 2 (inches part) </td> </tr> 

            </table>  
            */
            class NXOPENCPPEXPORT  SectionAnalysisExBuilder : public Builder
            {
                /** The types of the section placement*/
                public: enum PlacementType
                {
                    PlacementTypeUniform/** Uniformly distributed */,
                    PlacementTypeThroughPoints/** Through the specified points */,
                    PlacementTypeBetweenPoints/** Distributed between two specified points*/,
                    PlacementTypeInteractive/** Interactively specified */
                };

                /** The section alignment type */
                public: enum AlignmentType
                {
                    AlignmentTypeXYZPlane/** The cutting planes are perpendicular to X, Y or Z plane */,
                    AlignmentTypeParallelPlanes/** The cutting planes are parallel to a specified plane */,
                    AlignmentTypeCurveAligned/** The cutting planes are perpendicular to specified curves */,
                    AlignmentTypeIsoparametric/** The sections are along isoparametric lines */,
                    AlignmentTypeRadial/** The cutting planes are distributed along a circle */
                };

                /** The output options */
                public: enum OutputType
                {
                    OutputTypeAnalysisObject/** Analysis Object */,
                    OutputTypeSectionCurves/** section curves */,
                    OutputTypeBoth/** Both Analysis Object and section curves */
                };

                /** The needle direction */
                public: enum NeedleDirectionType
                {
                    NeedleDirectionTypeInside/** Inside */,
                    NeedleDirectionTypeOutside/** Outside */
                };

                /** The calculation method */
                public: enum CalculationMethodType
                {
                    CalculationMethodTypeCurvature/** Curvature */,
                    CalculationMethodTypeRadiusofCurvature/** Radius of curvature */
                };

                /** The scaling method */
                public: enum ScalingMethodType
                {
                    ScalingMethodTypeLinear/** Linear */,
                    ScalingMethodTypeLogarithmic/** Logarithmic */
                };

                private: SectionAnalysisExBuilderImpl * m_sectionanalysisexbuilder_impl;
                private: friend class  _SectionAnalysisExBuilderBuilder;
                protected: SectionAnalysisExBuilder();
                public: ~SectionAnalysisExBuilder();
                /**Returns  the selected objects  <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * SelectObject
                (
                );
                /**Returns  the placement  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementType Placement
                (
                );
                /**Sets  the placement  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetPlacement
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementType placement /** placement */ 
                );
                /**Returns  the specified points  <br> License requirements : None */
                public: NXOpen::SelectPointList * SpecifyPoint
                (
                );
                /**Returns  the Interactive placement specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementTypeInteractive GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementTypeInteractive@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::InteractiveBuilder * Interactive
                (
                );
                /**Returns  the alignment type  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentType Alignment
                (
                );
                /**Sets  the alignment type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAlignment
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentType alignment /** alignment */ 
                );
                /**Returns  the XYZ Planes section specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeXYZPlane GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeXYZPlane@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::XYZPlaneBuilder * XYZPlane
                (
                );
                /**Returns  the Parallel Planes section specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeParallelPlanes GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeParallelPlanes@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::ParallelPlanesExBuilder * ParallelPlanes
                (
                );
                /**Returns  the Curve Aligned section specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::CurveAlignedBuilder * CurveAligned
                (
                );
                /**Returns  the Isoparametric section specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeIsoparametric GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeIsoparametric@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::IsoparametricBuilder * Isoparametric
                (
                );
                /**Returns  the Radial section specification. 
                                Only used when type is @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned@endlink   <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::RadialBuilder * Radial
                (
                );
                /**Returns  the comb options specification <br> License requirements : None */
                public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
                (
                );
                /**Returns  a value indicating whether to show the peak points  <br> License requirements : None */
                public: bool IsShowPeakPointsEnabled
                (
                );
                /**Sets  a value indicating whether to show the peak points  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowPeakPointsEnabled
                (
                    bool peak /** peak */ 
                );
                /**Returns  a value indicating whether to show the inflection points  <br> License requirements : None */
                public: bool IsShowInflectionPointsEnabled
                (
                );
                /**Sets  a value indicating whether to show the inflection points  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowInflectionPointsEnabled
                (
                    bool inflection /** inflection */ 
                );
                /**Returns  a value indicating whether to show the length of each section curve  <br> License requirements : None */
                public: bool IsShowLengthEnabled
                (
                );
                /**Sets  a value indicating whether to show the length of each section curve  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowLengthEnabled
                (
                    bool length /** length */ 
                );
                /**Returns  the output  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::OutputType Output
                (
                );
                /**Sets  the output  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOutput
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::OutputType output /** output */ 
                );
                /**Returns  the needle direction  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::NeedleDirectionType NeedleDirection
                (
                );
                /**Sets  the needle direction  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNeedleDirection
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::NeedleDirectionType needleDirection /** needledirection */ 
                );
                /**Returns  the calculation method  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::CalculationMethodType CalculationMethod
                (
                );
                /**Sets  the calculation method  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetCalculationMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::CalculationMethodType calculationMethod /** calculationmethod */ 
                );
                /**Returns  the scaling method  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::ScalingMethodType ScalingMethod
                (
                );
                /**Sets  the scaling method  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetScalingMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::ScalingMethodType scalingMethod /** scalingmethod */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
