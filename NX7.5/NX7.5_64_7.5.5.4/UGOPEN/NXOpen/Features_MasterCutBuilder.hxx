#ifndef NXOpen_FEATURES_MASTERCUTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MASTERCUTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MasterCutBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MasterCutBuilder;
    }
    class Body;
    class Direction;
    class DisplayableObject;
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ModelingView;
    class NXObject;
    class SelectDisplayableObjectList;
    namespace Features
    {
        class _MasterCutBuilderBuilder;
        class MasterCutBuilderImpl;
        /** Represents a master cut feature builder that creates, inquires, or edits a master cut feature associated with a Cut View. 
             <br> 
            This class provides methods to set and get the various master cut sub components.
             <br> 
             <br> 
            The following are default options and values.
             <br> 

             <br> 
            <b> Cut View </b> The work view
             <br> 
             <br> 
            <b> Tool Body </b> Extrude feature tool body used to perform the cut.   The user must set this 
             <br> 
             <br> 
            <b> Target Components </b> Components and/or solid bodies to cut.  Unset unless the work part only contains one body
             <br> 
             <br> 
            <b> Material Outside Loop </b> true, i.e., the material is outside the loop used to create the extrude body
             <br> 
             <br> 
            <b> Use Cut Hatch </b> true, i.e., cut faces are crosshatched in static wireframe mode
             <br> 
             <br> 
            <b> Hatch Angle </b> 45.0 degrees. 
             <br> 
             <br> 
            <b> Hatch Distance </b> 0.236/6.0  [in/mm]
             <br> 
             <br> 
            <b> Use Cut Color </b> true, i.e., cut faces are colored in shaded mode
             <br> 
             <br> 
            <b> Cut Color </b> Medium violet magenta 
             <br> 
             <br> 
            <b> Use Save As </b> true, i.e., save the cut view with a new name 
             <br> 
             <br> 
            <b> Save As Name </b> "SECTION OF work view name" 
             <br> 
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMasterCutBuilder Features::FeatureCollection::CreateMasterCutBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CutColor </td> <td> 
         
        193 </td> </tr> 

        <tr><td> 
         
        HatchAngle </td> <td> 
         
        45 </td> </tr> 

        <tr><td> 
         
        HatchDistance </td> <td> 
         
        6.0 (millimeters part), 0.236 (inches part) </td> </tr> 

        <tr><td> 
         
        MaterialOutsideLoop </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        UseCutColor </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        UseCutHatch </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        UseSaveAs </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  MasterCutBuilder : public Features::FeatureBuilder
        {
            private: MasterCutBuilderImpl * m_mastercutbuilder_impl;
            private: friend class  _MasterCutBuilderBuilder;
            protected: MasterCutBuilder();
            public: ~MasterCutBuilder();
            /**Returns  the extrude builder  <br> License requirements : None */
            public: NXOpen::Features::ExtrudeBuilder * Extrude
            (
            );
            /**  Recalculates extrude limits to cut through target components  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RecalculateLimits
            (
            );
            /**Sets  the cut view  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCutView
            (
                NXOpen::ModelingView * cutView /** cut view */
            );
            /**Returns  the cut view  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ModelingView * CutView
            (
            );
            /**Sets  the tool body used to perform the cut, which is an extruded body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToolBody
            (
                NXOpen::Body * toolBody /** tool body used to perform the cut */
            );
            /**Returns  the tool body used to perform the cut, which is an extruded body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Body * ToolBody
            (
            );
            /**Returns  the target components that are cut  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * TargetComponents
            (
            );
            /** The target components that are cut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetComponents
            (
                const std::vector<NXOpen::NXObject *> & targetComponents /** target components to be cut */
            );
            /** The target components that are cut  @return  target components that are cut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::DisplayableObject *> GetTargetComponents
            (
            );
            /**Sets  the flag whether or not the material is outside the loop used to create the extruded body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaterialOutsideLoop
            (
                bool materialOutsideLoop /** if true, the material is outside the loop used to create the extruded body */
            );
            /**Returns  the flag whether or not the material is outside the loop used to create the extruded body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool MaterialOutsideLoop
            (
            );
            /** Calculate start and end through limit values  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void CalcThroughLimits
            (
                NXOpen::Direction * direction /** the extrude direction */,
                double* limit1 /** start limit value */,
                double* limit2 /** end limit value */
            );
            /**Sets  the flag whether or not the cut faces are crosshatched in wireframe mode  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseCutHatch
            (
                bool useCutHatch /** if true, cut faces are crosshatched in wireframe mode */
            );
            /**Returns  the flag whether or not the cut faces are crosshatched in wireframe mode  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UseCutHatch
            (
            );
            /**Sets  the hatch angle  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHatchAngle
            (
                double hatchAngle /** hatch angle used when crosshatching the cut faces */
            );
            /**Returns  the hatch angle  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HatchAngle
            (
            );
            /**Sets  the hatch distance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHatchDistance
            (
                double hatchDistance /** hatch distance used when crosshatching the cut faces */
            );
            /**Returns  the hatch distance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HatchDistance
            (
            );
            /**Sets  the flag whether or not to use the specified color for the cut faces  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseCutColor
            (
                bool useCutColor /** if true, use the specified color for the cut faces */
            );
            /**Returns  the flag whether or not to use the specified color for the cut faces  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UseCutColor
            (
            );
            /**Sets  the cut face color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCutColor
            (
                int cutColor /** cut face color */
            );
            /**Returns  the cut face color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int CutColor
            (
            );
            /**Sets  the flag whether or not to save the work view with a new name  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseSaveAs
            (
                bool useSaveAs /** if true, save the work view with a new name */
            );
            /**Returns  the flag whether or not to save the work view with a new name  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UseSaveAs
            (
            );
            /**Sets  the cut save as name  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSaveAsName
            (
                const NXString & saveAsName /** cut save as name */
            );
            /**Returns  the cut save as name  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXString SaveAsName
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
