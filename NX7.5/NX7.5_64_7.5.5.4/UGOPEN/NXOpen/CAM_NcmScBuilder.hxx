#ifndef NXOpen_CAM_NCMSCBUILDER_HXX_INCLUDED
#define NXOpen_CAM_NCMSCBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NcmScBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NcmSubopBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class NcmScBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class NcmAvoidancePointBuilder;
    }
    namespace CAM
    {
        class NcmClearanceBuilder;
    }
    namespace CAM
    {
        class NcmScEngRetBuilder;
    }
    namespace CAM
    {
        class NcmSubopBuilder;
    }
    namespace CAM
    {
        class NcmTransferBuilder;
    }
    namespace CAM
    {
        class _NcmScBuilderBuilder;
        class NcmScBuilderImpl;
        /**
            Represents a @link CAM::NcmScBuilder CAM::NcmScBuilder@endlink 
            */
        class NXOPENCPPEXPORT  NcmScBuilder : public CAM::NcmSubopBuilder
        {
            /** Available options for smoothing behavior */
            public: enum SmoothingOptions
            {
                SmoothingOptionsOn/** transfer smoothing activated */,
                SmoothingOptionsOff/** transfer smoothing deactivated */
            };

            private: NcmScBuilderImpl * m_ncmscbuilder_impl;
            private: friend class  _NcmScBuilderBuilder;
            protected: NcmScBuilder();
            public: ~NcmScBuilder();
            /**Returns  the open area engage settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * EngageOpenAreaBuilder
            (
            );
            /**Returns  the against check engage settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * EngageAgainstCheckBuilder
            (
            );
            /**Returns  the initial engage settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * EngageInitialBuilder
            (
            );
            /**Returns  the open area retract settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * RetractOpenAreaBuilder
            (
            );
            /**Returns  the against check retract settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * RetractAgainstCheckBuilder
            (
            );
            /**Returns  the final retract settings  <br> License requirements : None */
            public: NXOpen::CAM::NcmScEngRetBuilder * RetractFinalBuilder
            (
            );
            /**Returns  the region distance setting  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * TransferRegionDistanceBuilder
            (
            );
            /**Returns  the common clearance setting  <br> License requirements : None */
            public: NXOpen::CAM::NcmClearanceBuilder * TransferCommonClearanceBuilder
            (
            );
            /**Returns  the transfer settings for within regions  <br> License requirements : None */
            public: NXOpen::CAM::NcmTransferBuilder * TransferWithinRegionsBuilder
            (
            );
            /**Returns  the transfer settings for between regions  <br> License requirements : None */
            public: NXOpen::CAM::NcmTransferBuilder * TransferBetweenRegionsBuilder
            (
            );
            /**Returns  the transfer settings for initial and final  <br> License requirements : None */
            public: NXOpen::CAM::NcmTransferBuilder * TransferInitialFinalBuilder
            (
            );
            /**Returns  the smoothing option  <br> License requirements : None */
            public: NXOpen::CAM::NcmScBuilder::SmoothingOptions SmoothingOption
            (
            );
            /**Sets  the smoothing option  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothingOption
            (
                NXOpen::CAM::NcmScBuilder::SmoothingOptions newValue /** newvalue */ 
            );
            /**Returns  the max tool axis change  <br> License requirements : None */
            public: double MaxToolAxisChange
            (
            );
            /**Sets  the max tool axis change  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaxToolAxisChange
            (
                double newValue /** the max tool axis change */
            );
            /**Returns  the smoothing radius settings  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * SmoothingRadiusBuilder
            (
            );
            /**Returns  the from point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceFromBuilder
            (
            );
            /**Returns  the start point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceStartBuilder
            (
            );
            /**Returns  the return point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceReturnBuilder
            (
            );
            /**Returns  the gohome point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceGohomeBuilder
            (
            );
            /**Returns  the collision check activation  <br> License requirements : None */
            public: bool CollisionCheck
            (
            );
            /**Sets  the collision check activation  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCollisionCheck
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the contact data output activation  <br> License requirements : None */
            public: bool OutputContactData
            (
            );
            /**Sets  the contact data output activation  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputContactData
            (
                bool newValue /** newvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
