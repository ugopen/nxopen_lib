#ifndef NXOpen_CAM_INSPECTIONCIRCLEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCIRCLEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCircleFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionCircleFeatureBuilder.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionCircleFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class SelectNXObject;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionCircleFeatureBuilderBuilder;
        class InspectionCircleFeatureBuilderImpl;
        /** Represents a CMM Inspection Circle Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCircleFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionCircleFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionCircleFeatureBuilder : public CAM::OperationBuilder
        {
            private: InspectionCircleFeatureBuilderImpl * m_inspectioncirclefeaturebuilder_impl;
            private: friend class  _InspectionCircleFeatureBuilderBuilder;
            protected: InspectionCircleFeatureBuilder();
            public: ~InspectionCircleFeatureBuilder();
            /**Returns  the selected circle  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedCircle
            (
            );
            /**Returns  the button used to select faces to project the circle to  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectProjectionFaces
            (
            );
            /**Returns  the reverse direction button used to flip the normal vector of the circle  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction button used to flip the normal vector of the circle  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the coordinate system reference type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysRefType
            (
            );
            /**Sets  the coordinate system reference type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysRefType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysRefType /** csysreftype */ 
            );
            /**Returns  the inspection feature inner/outer type (hole/pin)  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationInneroutertypes InnerOuterType
            (
            );
            /**Sets  the inspection feature inner/outer type (hole/pin)  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInnerOuterType
            (
                NXOpen::CAM::CamInspectionOperationInneroutertypes innerOuterType /** inneroutertype */ 
            );
            /**Returns  the circle diameter  <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the circle diameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the circle center point X coordinate  <br> License requirements : None */
            public: double CenterPointX
            (
            );
            /**Sets  the circle center point X coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointX
            (
                double centerPointX /** centerpointx */ 
            );
            /**Returns  the circle center point Y coordinate  <br> License requirements : None */
            public: double CenterPointY
            (
            );
            /**Sets  the circle center point Y coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointY
            (
                double centerPointY /** centerpointy */ 
            );
            /**Returns  the circle center point Z coordinate  <br> License requirements : None */
            public: double CenterPointZ
            (
            );
            /**Sets  the circle center point Z coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointZ
            (
                double centerPointZ /** centerpointz */ 
            );
            /**Returns  the normal vector I component  <br> License requirements : None */
            public: double NormalVectorI
            (
            );
            /**Sets  the normal vector I component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorI
            (
                double normalVectorI /** normalvectori */ 
            );
            /**Returns  the normal vector J component  <br> License requirements : None */
            public: double NormalVectorJ
            (
            );
            /**Sets  the normal vector J component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorJ
            (
                double normalVectorJ /** normalvectorj */ 
            );
            /**Returns  the normal vector K component  <br> License requirements : None */
            public: double NormalVectorK
            (
            );
            /**Sets  the normal vector K component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorK
            (
                double normalVectorK /** normalvectork */ 
            );
            /**Returns  the circle inspection feature name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the circle inspection feature name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Updates circle inspection feature characteristic parameters based on selected geometry  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the circle inspection feature normal vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipNormal
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
