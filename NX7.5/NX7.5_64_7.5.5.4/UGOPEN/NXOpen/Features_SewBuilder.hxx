#ifndef NXOpen_FEATURES_SEWBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SEWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SewBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SewBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SewBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectDisplayableObjectList;
    class SelectFaceList;
    namespace Features
    {
        class _SewBuilderBuilder;
        class SewBuilderImpl;
        /**
            Represents a @link Features::Sew Features::Sew@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSewBuilder Features::FeatureCollection::CreateSewBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  SewBuilder : public Features::FeatureBuilder
        {
            /** Specifies the sew type. */
            public: enum Types
            {
                TypesSheet/** Sheet */,
                TypesSolid/** Solid */
            };

            private: SewBuilderImpl * m_sewbuilder_impl;
            private: friend class  _SewBuilderBuilder;
            protected: SewBuilder();
            public: ~SewBuilder();
            /**Returns  the sew type  <br> License requirements : None */
            public: NXOpen::Features::SewBuilder::Types Type
            (
            );
            /**Sets  the sew type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::SewBuilder::Types type /** type */ 
            );
            /**Returns  the target sheet bodies  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * TargetBodies
            (
            );
            /**Returns  the target solid faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * TargetFaces
            (
            );
            /**Returns  the tool sheet bodies  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * ToolBodies
            (
            );
            /**Returns  the tool solid faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * ToolFaces
            (
            );
            /**Returns  the common faces. If true, the common faces are searched when the sew type is solid  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsCommonFacesSearched
            (
            );
            /**Sets  the common faces. If true, the common faces are searched when the sew type is solid  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCommonFacesSearched
            (
                bool isCommonFacesSearched /** iscommonfacessearched */ 
            );
            /**Returns  the output multiple sheets  <br> License requirements : None */
            public: bool OutputMultipleSheets
            (
            );
            /**Sets  the output multiple sheets  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOutputMultipleSheets
            (
                bool outputMultipleSheets /** outputmultiplesheets */ 
            );
            /**Returns   the sew all instances  <br> License requirements : None */
            public: bool SewAllInstances
            (
            );
            /**Sets   the sew all instances  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSewAllInstances
            (
                bool sewAllInstances /** sewallinstances */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
