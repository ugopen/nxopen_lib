#ifndef NXOpen_CAE_AFUMATHOPERATION_HXX_INCLUDED
#define NXOpen_CAE_AFUMATHOPERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuMathOperation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AfuMathOperation;
    }
    namespace CAE
    {
        class AfuManager;
    }
    namespace CAE
    {
        class AfuMathOperationImpl;
        /** Does math operations on the AFU Data Records  <br> To obtain an instance of this class, refer to @link CAE::AfuManager CAE::AfuManager@endlink  <br> */
        class NXOPENCPPEXPORT  AfuMathOperation
        {
            /** Defines the type of Multi Math Operations */
            public: enum MultiType
            {
                MultiTypeAdd/** Adds AFU records */,
                MultiTypeSubtract/** Subtracts AFU records */,
                MultiTypeMultiple/** Multiples AFU records */,
                MultiTypeConjugate/** Conjugates AFU records */,
                MultiTypeDivide/** Divides AFU records */
            };

            /** Defines the type of extreme 
             @deprecated Deprecated in NX6.0.0 <br> 
            */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") enum Extreme
            {
                ExtremeMinimum/** Gets minimum of AFU records */,
                ExtremeMaximum/** Gets maximum of AFU records */
            };

            /** Defines the type of Overall Math Operations 
             @deprecated Deprecated in NX6.0.0 <br> 
            */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") enum OverallType
            {
                OverallTypeMinimum/** Gets minimum magnitude of AFU records */,
                OverallTypeMaximum/** Gets maximum magnitude of AFU records */,
                OverallTypeMean/** Gets mean magnitude of AFU records */,
                OverallTypeSum/** Gets sum magnitude of AFU records */,
                OverallTypeSumComplex/** Gets complex sum of AFU records */
            };

            /** Defines the output type of new AFU Data Record */
            public: enum OutputType
            {
                OutputTypeAppend/** Appends the new AFU Data Record to the source AFU file */,
                OutputTypeOverwrite/** Overwrites the source AFU Data Record */,
                OutputTypeOtherFile/** Saves the new AFU Data Record to other file */
            };

            /** Defines the outer interpolation method */
            public: enum OuterInterpolation
            {
                OuterInterpolationZero/** Interpolates values with zero */,
                OuterInterpolationCurve/** Interpolates values with curve points */
            };

            /** Defines the type of Overall Math Operations */
            public: enum Overall
            {
                OverallMinimumValue/** Gets minimum values of AFU records */,
                OverallMaximumValue/** Gets maximum values of AFU records */,
                OverallMinimumMagnitude/** Gets minimum magnitude values of AFU records */,
                OverallMaximumMagnitude/** Gets maximum magnitude values of AFU records */,
                OverallMeanMagnitude/** Gets mean magnitude values of AFU records */,
                OverallSumMagnitude/** Gets sum magnitude values of AFU records */,
                OverallSumComplex/** Gets complex sum values of AFU records */
            };

            /** Defines the interpolation mode */
            public: enum InterpolationMode
            {
                InterpolationModeLinearLinear/** Interpolates values by linear-linear */,
                InterpolationModeLogLog/** Interpolates values by log-log */,
                InterpolationModeLogLinear/** Interpolates values by log-linear */,
                InterpolationModeLinearLog/** Interpolates values by linear-log */
            };

            /** Defines the type of conversion option for SRS to TIME */
            public: enum SrsToTimeOption
            {
                SrsToTimeOptionDampedSinusoid = 1/** Damped sinusoid method */,
                SrsToTimeOptionWavelet/** Wavelet method */
            };

            /** Defines the octave spacing for SRS to TIME */
            public: enum SrsToTimeOctave
            {
                SrsToTimeOctaveOneThird = 1/** 1/3 Octave */,
                SrsToTimeOctaveOneSixth/** 1/6 Octave */,
                SrsToTimeOctaveOneTwelfth/** 1/12 Octave */
            };

            /** Defines the conversion strategy for SRS to TIME when using the Wavelet method */
            public: enum SrsToTimeStrategy
            {
                SrsToTimeStrategyRandom = 1/** Random conversion strategy */,
                SrsToTimeStrategyReverseSineSweep/** Reverse sine sweep conversion strategy */
            };

            /** Defines the frequency axis type for TIME to SRS */
            public: enum TimeToSrsAxisType
            {
                TimeToSrsAxisTypeLinear = 1/** Linear */,
                TimeToSrsAxisTypeLog/** Log */,
                TimeToSrsAxisTypeOctave/** Octave */,
                TimeToSrsAxisTypeOneThirdOctave/** 1/3 Octave */,
                TimeToSrsAxisTypeDecade/** Points per Standard Decade */
            };

            /** Defines the response type paramater for TIME to SRS */
            public: enum TimeToSrsResponseType
            {
                TimeToSrsResponseTypePositiveMax = 1/** Positive Maximum  */,
                TimeToSrsResponseTypeNegativeMax/** Negative Maximum  */,
                TimeToSrsResponseTypeAbsoluteMax/** Absolute Maximum  */
            };

            private: AfuMathOperationImpl * m_afumathoperation_impl;
            private: NXOpen::CAE::AfuManager* m_owner;
            /** Constructor */
            public: explicit AfuMathOperation(NXOpen::CAE::AfuManager *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AfuMathOperation();
            /** Scales AFU Data Records by real value  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathScaleByReal
            (
                double scaleValue /** Value of scale */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Scales AFU Data Records by complex value  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathScaleByComplex
            (
                double scaleRealValue /** Real value of scale */,
                double scaleImaginaryValue /** Imaginary value of scale */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Offsets AFU Data Records by real value  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathOffsetByReal
            (
                double offsetValue /** Value of offset */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Offsets AFU Data Records by complex value  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathOffsetByComplex
            (
                double offsetRealValue /** Real value of offset */,
                double offsetImaginaryValue /** Imaginary value of offset */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Shifts abscissa values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathShiftAbscissa
            (
                double shiftValue /** Value of shift abscissa */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets sign values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathSignValue
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets absolute values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathAbsoluteValue
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets complex conjugate values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathComplexConjugate
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets fourier transform values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathFourierTransform
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Interpolates AFU Data Records with linear method  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathLinearInterpolation
            (
                NXOpen::CAE::AfuMathOperation::OuterInterpolation outerInterpolation /** Outer interpolation method */,
                double newXIncrement /** X increment of new AFU Data Record */,
                double newXMinimum /** X minimum of new AFU Data Record */,
                double newXMaximum /** X maximum of new AFU Data Record */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Interpolates AFU Data Records with lagrangian method  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathLagrangianInterpolation
            (
                int polynomialOrder /** Polynomial order which must be 1 thru 8 */,
                NXOpen::CAE::AfuMathOperation::OuterInterpolation outerInterpolation /** Outer interpolation method */,
                double newXIncrement /** X increment of new AFU Data Record */,
                double newXMinimum /** X minimum of new AFU Data Record */,
                double newXMaximum /** X maximum of new AFU Data Record */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets square root values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathSquareRoot
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets square of magnitude values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathSquareMagnitude
            (
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets moving average values of AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateSingleMathMovingAverage
            (
                int movingAverageNumber /** Moving average number */,
                const NXString & sourceAfuFileName /** File name of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex /** Index of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Does Multi Math Operations on AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateMultiMathRecords
            (
                NXOpen::CAE::AfuMathOperation::MultiType multiMathType /** Multi Math Operation type */,
                const NXString & sourceAfuFileName1 /** File name of the first source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex1 /** Index of the first source AFU Data Record */,
                const NXString & sourceAfuFileName2 /** File name of the second source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int sourceRecordIndex2 /** Index of the second source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if output_type is not
                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the minimum or maximum values of AFU Data Records 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void GetMinMaxRecords
            (
                NXOpen::CAE::AfuMathOperation::Extreme extremType /** The type of Overall Math Operations */,
                std::vector<NXString> & sourceAfuFileNames /** File names of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & sourceRecordIndexes /** Indexes of the source AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Does Overall Math Operations on AFU Data Records 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void CalculateOverallMathRecords
            (
                NXOpen::CAE::AfuMathOperation::OverallType overallMathType /** Overall Math Operation type */,
                std::vector<NXString> & sourceAfuFileNames /** File names of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & sourceRecordIndexes /** Indexes of the source AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Does Overall Math Operations on AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CalculateOverallMathRecords
            (
                NXOpen::CAE::AfuMathOperation::Overall overallType /** Overall Math Operation type */,
                std::vector<NXString> & sourceAfuFileNames /** File names of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & sourceRecordIndexes /** Indexes of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if outputType is not
                                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Synchronize AFU Data Records  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SynchronizeRecords
            (
                double newIncrement /** New x increment */,
                NXOpen::CAE::AfuMathOperation::InterpolationMode interpolationMode /** The mode of interpolating values */,
                bool shiftToStartPoint /** Shift x value to the start point if TRUE */,
                std::vector<NXString> & sourceAfuFileNames /** File names of the source AFU   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & sourceRecordIndexes /** Indexes of the source AFU Data Record */,
                NXOpen::CAE::AfuMathOperation::OutputType outputType /** Output type of new AFU Data Record */,
                const NXString & destinationAfuFileName /** Destination AFU file name. It is NULL if outputType is not
                                                                                                         @link CAE::AfuMathOperation::OutputTypeOtherFile CAE::AfuMathOperation::OutputTypeOtherFile@endlink .
                                                                                                          <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Convert SRS to Time  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SrsToTime
            (
                const NXString & inputAfuFileName /** Input afu file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int inputRecordId /** Input record index */,
                NXOpen::CAE::AfuMathOperation::SrsToTimeOption conversionOption /** Conversion option */,
                double dampingRatio /** Damping ratio (of critical damping) */,
                int numTimePoints /** Number of requested time points */,
                int iterations /** Iterations for outer loop when conversionOption is
                                                                                                     @link CAE::AfuMathOperation::SrsToTimeOptionDampedSinusoid CAE::AfuMathOperation::SrsToTimeOptionDampedSinusoid@endlink 
                                                                                                    */,
                NXOpen::CAE::AfuMathOperation::SrsToTimeOctave octave /** Octave Spacing when conversionOption is
                                                                                                     @link CAE::AfuMathOperation::SrsToTimeOptionWavelet CAE::AfuMathOperation::SrsToTimeOptionWavelet@endlink 
                                                                                                    */,
                int numTrials /** Number of trials conversionOption is
                                                                                                     @link CAE::AfuMathOperation::SrsToTimeOptionWavelet CAE::AfuMathOperation::SrsToTimeOptionWavelet@endlink 
                                                                                                    */,
                NXOpen::CAE::AfuMathOperation::SrsToTimeStrategy strategy /** Conversion strategy conversionOption is
                                                                                                     @link CAE::AfuMathOperation::SrsToTimeOptionWavelet CAE::AfuMathOperation::SrsToTimeOptionWavelet@endlink 
                                                                                                    */,
                bool saveSrsResults /** Save the two srs results when converting the srs function to time if TRUE */,
                const NXString & outputAfuFileName /** Output AFU file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outputRecordName /** Output record name of afu   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Convert Time to SRS  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void TimeToSrs
            (
                const NXString & inputAfuFileName /** Input afu file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int inputRecordId /** Input record index */,
                double dampingRatio /** Damping ratio (of critical damping) */,
                NXOpen::CAE::AfuMathOperation::TimeToSrsAxisType freqAxisType /** Frequency axis type */,
                double frequencyMin /** Frequency minimun value */,
                double frequencyMax /** Frequency maximun value */,
                double frequenceIncrement /** Frequency increment value when freqAxisType is
                                                                                                         @link CAE::AfuMathOperation::TimeToSrsAxisTypeLinear CAE::AfuMathOperation::TimeToSrsAxisTypeLinear@endlink 
                                                                                                        */,
                int pointsPerDecades /** Points per decads when freqAxisType is
                                                                                                         @link CAE::AfuMathOperation::TimeToSrsAxisTypeLog CAE::AfuMathOperation::TimeToSrsAxisTypeLog@endlink  or
                                                                                                         @link CAE::AfuMathOperation::TimeToSrsAxisTypeDecade CAE::AfuMathOperation::TimeToSrsAxisTypeDecade@endlink 
                                                                                                        */,
                NXOpen::CAE::AfuMathOperation::TimeToSrsResponseType responseType /** Response type paramater */,
                const NXString & outputAfuFileName /** Output AFU file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outputRecordName /** Output record name of afu   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
