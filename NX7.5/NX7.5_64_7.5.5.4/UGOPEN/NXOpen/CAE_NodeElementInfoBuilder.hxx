#ifndef NXOpen_CAE_NODEELEMENTINFOBUILDER_HXX_INCLUDED
#define NXOpen_CAE_NODEELEMENTINFOBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_NodeElementInfoBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_NodeElementInfoBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class NodeElementInfoBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    namespace CAE
    {
        class _NodeElementInfoBuilderBuilder;
        class NodeElementInfoBuilderImpl;
        /**
            Represents a @link CAE::NodeElementInfoBuilder CAE::NodeElementInfoBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementInfoManager::CreateNodeElementInfoBuilder CAE::NodeElementInfoManager::CreateNodeElementInfoBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  NodeElementInfoBuilder : public Builder
        {
            /** Option to Info on Node or Element */
            public: enum EntityType
            {
                EntityTypeNode/** Info on node*/,
                EntityTypeElement/** Info on element*/
            };

            /** Output format option */
            public: enum FormatType
            {
                FormatTypeTabular/** Tabular*/,
                FormatTypeGeneral/** General*/
            };

            /** Element property option*/
            public: enum PropertyType
            {
                PropertyTypeBrief/** no property*/,
                PropertyTypeDetailed/** detailed property*/
            };

            private: NodeElementInfoBuilderImpl * m_nodeelementinfobuilder_impl;
            private: friend class  _NodeElementInfoBuilderBuilder;
            protected: NodeElementInfoBuilder();
            public: ~NodeElementInfoBuilder();
            /**Returns  the entity option  <br> License requirements : None */
            public: NXOpen::CAE::NodeElementInfoBuilder::EntityType EntityOption
            (
            );
            /**Sets  the entity option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEntityOption
            (
                NXOpen::CAE::NodeElementInfoBuilder::EntityType entityOption /** entityoption */ 
            );
            /**Returns  the format option  <br> License requirements : None */
            public: NXOpen::CAE::NodeElementInfoBuilder::FormatType FormatOption
            (
            );
            /**Sets  the format option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFormatOption
            (
                NXOpen::CAE::NodeElementInfoBuilder::FormatType formatOption /** formatoption */ 
            );
            /**Returns  the property option, none, short or detailed  <br> License requirements : None */
            public: NXOpen::CAE::NodeElementInfoBuilder::PropertyType PropertyOption
            (
            );
            /**Sets  the property option, none, short or detailed  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPropertyOption
            (
                NXOpen::CAE::NodeElementInfoBuilder::PropertyType propertyOption /** propertyoption */ 
            );
            /**Returns  the selected node  <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the selected elements  <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Element
            (
            );
            /**Returns  the displacement/reference csys  <br> License requirements : None */
            public: bool Csys
            (
            );
            /**Sets  the displacement/reference csys  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCsys
            (
                bool csys /** csys */ 
            );
            /**Returns  the reference csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") bool ReferenceCsys
            (
            );
            /**Sets  the reference csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetReferenceCsys
            (
                bool referenceCsys /** referencecsys */ 
            );
            /**Returns  the displacement csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") bool DisplacementCsys
            (
            );
            /**Sets  the displacement csys 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetDisplacementCsys
            (
                bool displacementCsys /** displacementcsys */ 
            );
            /**Returns  the coordinates  <br> License requirements : None */
            public: bool Coordinates
            (
            );
            /**Sets  the coordinates  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCoordinates
            (
                bool coord /** coord */ 
            );
            /**Returns  the node connectivity  <br> License requirements : None */
            public: bool NodeConnectivity
            (
            );
            /**Sets  the node connectivity  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeConnectivity
            (
                bool nodeConnectivity /** nodeconnectivity */ 
            );
            /**Returns  the element type  <br> License requirements : None */
            public: bool ElementType
            (
            );
            /**Sets  the element type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementType
            (
                bool elementType /** elementtype */ 
            );
            /**Returns  the element connectivity  <br> License requirements : None */
            public: bool ElementConnectivity
            (
            );
            /**Sets  the element connectivity  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementConnectivity
            (
                bool elementConnectivity /** elementconnectivity */ 
            );
            /**Returns  the owning mesh  <br> License requirements : None */
            public: bool Mesh
            (
            );
            /**Sets  the owning mesh  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMesh
            (
                bool mesh /** mesh */ 
            );
            /**Returns  the mesh collector  <br> License requirements : None */
            public: bool MeshCollector
            (
            );
            /**Sets  the mesh collector  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshCollector
            (
                bool meshCollector /** meshcollector */ 
            );
            /**Returns  the element quality  <br> License requirements : None */
            public: bool ElementQuality
            (
            );
            /**Sets  the element quality  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementQuality
            (
                bool elementQuality /** elementquality */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
