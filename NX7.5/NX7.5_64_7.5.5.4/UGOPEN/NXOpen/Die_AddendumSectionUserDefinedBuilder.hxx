#ifndef NXOpen_DIE_ADDENDUMSECTIONUSERDEFINEDBUILDER_HXX_INCLUDED
#define NXOpen_DIE_ADDENDUMSECTIONUSERDEFINEDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_AddendumSectionUserDefinedBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Die_AddendumSectionUserDefinedBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class AddendumSectionUserDefinedBuilder;
    }
    class Builder;
    class Curve;
    class Section;
    namespace Die
    {
        class _AddendumSectionUserDefinedBuilderBuilder;
        class AddendumSectionUserDefinedBuilderImpl;
        /** 
             Represents a @link Die::AddendumSectionUserDefinedBuilder Die::AddendumSectionUserDefinedBuilder@endlink  builder used to select a previously
             defined section or a string of objects to define the section shape.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateAddendumSectionUserDefinedBuilder Die::DieCollection::CreateAddendumSectionUserDefinedBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  AddendumSectionUserDefinedBuilder : public Builder
        {
            private: AddendumSectionUserDefinedBuilderImpl * m_addendumsectionuserdefinedbuilder_impl;
            private: friend class  _AddendumSectionUserDefinedBuilderBuilder;
            protected: AddendumSectionUserDefinedBuilder();
            public: ~AddendumSectionUserDefinedBuilder();
            /**Returns  the objects defining the section, either a previously defined section or a string of objects defining the section shape.  <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the indicator to reverse the anchor point.  The anchor point is initially the first point of the joined string of
                        selected objects.  This is used as the starting point for the section when it is placed on the tangency curve.
                        It can be reversed to use the other end of the string as the starting point. 
                      <br> License requirements : None */
            public: bool ReverseAnchorPoint
            (
            );
            /**Sets  the indicator to reverse the anchor point.  The anchor point is initially the first point of the joined string of
                        selected objects.  This is used as the starting point for the section when it is placed on the tangency curve.
                        It can be reversed to use the other end of the string as the starting point. 
                      <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReverseAnchorPoint
            (
                bool reverseAnchorPoint /** reverseanchorpoint */ 
            );
            /** Creates user defined addendum section based upon input to @link Die::AddendumSectionUserDefinedBuilder::Section Die::AddendumSectionUserDefinedBuilder::Section@endlink .  @return  user defined section curve  <br> License requirements : None */
            public: NXOpen::Curve * CreateUserDefinedSection
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
