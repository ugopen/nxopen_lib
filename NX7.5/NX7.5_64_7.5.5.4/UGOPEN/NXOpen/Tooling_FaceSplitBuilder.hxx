#ifndef NXOpen_TOOLING_FACESPLITBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_FACESPLITBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_FaceSplitBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_FaceSplitBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class FaceSplitBuilder;
    }
    class Builder;
    class Curve;
    class Face;
    class ScCollector;
    namespace Tooling
    {
        class _FaceSplitBuilderBuilder;
        class FaceSplitBuilderImpl;
        /** Represents a face split operation <br> To create a new instance of this class, use @link Tooling::FaceSplitCollection::CreateFaceSplitBuilder Tooling::FaceSplitCollection::CreateFaceSplitBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Tolerance </td> <td> 
         
        0.025 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  FaceSplitBuilder : public Builder
        {
            /** the type for Split Face*/
            public: enum FaceSplitType
            {
                FaceSplitTypeCurvesEdges/** using curve or edge for Split Face*/,
                FaceSplitTypePlane/** using plane for Split Face*/,
                FaceSplitTypeIntersection/** using intersection curve of two body for Split Face*/,
                FaceSplitTypeIsocline/** using Isocline for Split Face*/
            };

            private: FaceSplitBuilderImpl * m_facesplitbuilder_impl;
            private: friend class  _FaceSplitBuilderBuilder;
            protected: FaceSplitBuilder();
            public: ~FaceSplitBuilder();
            /**Returns  the split face type which splits a face by using curves, edges, plane, face, isolines or 
                        intersected curves with another body <br> License requirements : None */
            public: NXOpen::Tooling::FaceSplitBuilder::FaceSplitType Type
            (
            );
            /**Sets  the split face type which splits a face by using curves, edges, plane, face, isolines or 
                        intersected curves with another body <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::FaceSplitBuilder::FaceSplitType splitType /** splittype */ 
            );
            /**Returns  the faces to be divided  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceToDivide
            (
            );
            /**Returns  the dividing objects which will be different according to the split type  <br> License requirements : None */
            public: NXOpen::ScCollector * DivObjects
            (
            );
            /**Returns  the tolerance is used to do dividing face operation <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance is used to do dividing face operation <br> License requirements : None */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** Create isocline <br> License requirements : None */
            public: void CreateIsoclines
            (
                const std::vector<NXOpen::Face *> & pFacesToDivide /** faces to be divided with isoclines*/,
                std::vector<NXOpen::Curve *> & outputCurves /** isoclines on selected faces*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
