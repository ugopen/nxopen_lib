#ifndef NXOpen_DRAWINGS_REVOLVEDSECTIONLINEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_REVOLVEDSECTIONLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_RevolvedSectionLineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_RevolvedSectionLineBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class RevolvedSectionLineBuilder;
    }
    namespace Drawings
    {
        class SectionLineSegmentBuilderList;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace Drawings
    {
        class _RevolvedSectionLineBuilderBuilder;
        class RevolvedSectionLineBuilderImpl;
        /** Represents a @link Drawings::RevolvedSectionLineBuilder Drawings::RevolvedSectionLineBuilder@endlink .
                This class is used to create or edit a
                @link Drawings::RevolvedSectionLine Drawings::RevolvedSectionLine@endlink . */
        class NXOPENCPPEXPORT  RevolvedSectionLineBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: RevolvedSectionLineBuilderImpl * m_revolvedsectionlinebuilder_impl;
            private: friend class  _RevolvedSectionLineBuilderBuilder;
            protected: RevolvedSectionLineBuilder();
            public: ~RevolvedSectionLineBuilder();
            /**Returns  the single leg indicator.  Set this flag to true to create a revolved section line that
                        contains only one leg.  <br> License requirements : None */
            public: bool SingleLeg
            (
            );
            /**Sets  the single leg indicator.  Set this flag to true to create a revolved section line that
                        contains only one leg.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetSingleLeg
            (
                bool singleLeg /** singleleg */ 
            );
            /**Returns  the rotation point.  The rotation point identifies position of the axis that
                        the section line is to revolve about.  <br> License requirements : None */
            public: NXOpen::Point * RotationPoint
            (
            );
            /**Sets  the rotation point.  The rotation point identifies position of the axis that
                        the section line is to revolve about.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetRotationPoint
            (
                NXOpen::Point * rotationPoint /** rotationpoint */ 
            );
            /**Returns  the list of cut and bend segments for the first leg.

                        The list will contain @link Drawings::SectionLineSegmentBuilder::TypesCut Drawings::SectionLineSegmentBuilder::TypesCut@endlink 
                        and @link Drawings::SectionLineSegmentBuilder::TypesBend Drawings::SectionLineSegmentBuilder::TypesBend@endlink  types
                        of @link Drawings::SectionLineSegmentBuilder Drawings::SectionLineSegmentBuilder@endlink  segments.

                        Note that there is no order to the elements of this list since the order is
                        determined by the hinge and arrow direction.  <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineSegmentBuilderList * Leg1
            (
            );
            /**Returns  the list of cut and bend segments for the second leg.  This leg is
                        not valid if the single leg indicator is set.

                        The list will contain @link Drawings::SectionLineSegmentBuilder::TypesCut Drawings::SectionLineSegmentBuilder::TypesCut@endlink 
                        and @link Drawings::SectionLineSegmentBuilder::TypesBend Drawings::SectionLineSegmentBuilder::TypesBend@endlink  types
                        of @link Drawings::SectionLineSegmentBuilder Drawings::SectionLineSegmentBuilder@endlink  segments.

                        Note that there is no order to the elements of this list since the order is
                        determined by the hinge and arrow direction.  <br> License requirements : None */
            public: NXOpen::Drawings::SectionLineSegmentBuilderList * Leg2
            (
            );
            /**Returns  the end location 1 which determines the position of the
                        first arrow segment in the section line.  <br> License requirements : None */
            public: NXOpen::Point * EndLocation1
            (
            );
            /**Sets  the end location 1 which determines the position of the
                        first arrow segment in the section line.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetEndLocation1
            (
                NXOpen::Point * endLocation1 /** endlocation1 */ 
            );
            /**Returns  the end location 2 which determines the position of the
                        second arrow segment in the section line  <br> License requirements : None */
            public: NXOpen::Point * EndLocation2
            (
            );
            /**Sets  the end location 2 which determines the position of the
                        second arrow segment in the section line  <br> License requirements : drafting ("DRAFTING") */
            public: void SetEndLocation2
            (
                NXOpen::Point * endLocation2 /** endlocation2 */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
