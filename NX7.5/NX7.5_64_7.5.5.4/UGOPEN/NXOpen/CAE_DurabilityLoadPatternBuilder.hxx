#ifndef NXOpen_CAE_DURABILITYLOADPATTERNBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYLOADPATTERNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityLoadPatternBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurabilityLoadPatternBuilder.hxx>
#include <NXOpen/CAE_DurabilityExcitationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class DurabilityLoadPatternBuilder;
    }
    namespace CAE
    {
        class DurabilityExcitationBuilder;
    }
    namespace CAE
    {
        class _DurabilityLoadPatternBuilderBuilder;
        class DurabilityLoadPatternBuilderImpl;
        /** Represents a @link CAE::DurabilityLoadPattern CAE::DurabilityLoadPattern@endlink  builder.  <br> There is no kf creator for this. <br> */
        class NXOPENCPPEXPORT  DurabilityLoadPatternBuilder : public CAE::DurabilityExcitationBuilder
        {
            /** the pattern type. */
            public: enum PatternTypeEnum
            {
                PatternTypeEnumHalfSineWave/** Half */,
                PatternTypeEnumFullSineWave/** Full */
            };

            private: DurabilityLoadPatternBuilderImpl * m_durabilityloadpatternbuilder_impl;
            private: friend class  _DurabilityLoadPatternBuilderBuilder;
            protected: DurabilityLoadPatternBuilder();
            public: ~DurabilityLoadPatternBuilder();
            /**Returns  the load case.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: int Loadcase
            (
            );
            /**Sets  the load case.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetLoadcase
            (
                int loadcase /** loadcase */ 
            );
            /**Returns  the pattern type.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityLoadPatternBuilder::PatternTypeEnum PatternType
            (
            );
            /**Sets  the pattern type.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetPatternType
            (
                NXOpen::CAE::DurabilityLoadPatternBuilder::PatternTypeEnum patternType /** patterntype */ 
            );
            /**Returns  the scale.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double Scale
            (
            );
            /**Sets  the scale.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the offset.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double Offset
            (
            );
            /**Sets  the offset.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetOffset
            (
                double offset /** offset */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
