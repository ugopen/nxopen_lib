#ifndef NXOpen_CAM_PREFERENCES_HXX_INCLUDED
#define NXOpen_CAM_PREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Preferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_Preferences.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class Preferences;
    }
    class Builder;
    class NXColor;
    namespace CAM
    {
        class _PreferencesBuilder;
        class PreferencesImpl;
        /** Represents a cam preferences Builder  <br> To create a new instance of this class, use @link CAM::CAMSession::CreateCamPreferences CAM::CAMSession::CreateCamPreferences@endlink  <br> */
        class NXOPENCPPEXPORT  Preferences : public Builder
        {
            /** the part selection types */
            public: enum PartSelectionTypes
            {
                PartSelectionTypesBodies/** Bodies */,
                PartSelectionTypesFaces/** Faces */,
                PartSelectionTypesCurves/** Curves */,
                PartSelectionTypesSurfaceRegion/** Surface Region */,
                PartSelectionTypesFacetedBodies/** Faceted Bodies Region */
            };

            /** the blank selection types */
            public: enum BlankSelectionTypes
            {
                BlankSelectionTypesBodies/** Bodies */,
                BlankSelectionTypesFaces/** Faces */,
                BlankSelectionTypesCurves/** Curves */,
                BlankSelectionTypesSurfaceRegion/** Surface Region */,
                BlankSelectionTypesFacetedBodies/** Faceted Bodies Region */
            };

            /** the check selection types */
            public: enum CheckSelectionTypes
            {
                CheckSelectionTypesBodies/** Bodies */,
                CheckSelectionTypesFaces/** Faces */,
                CheckSelectionTypesCurves/** Curves */
            };

            /** the cut area selection types */
            public: enum CutAreaSelectionTypes
            {
                CutAreaSelectionTypesBodies/** Bodies */,
                CutAreaSelectionTypesFaces/** Faces */,
                CutAreaSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the wall selection types */
            public: enum WallSelectionTypes
            {
                WallSelectionTypesBodies/** Bodies */,
                WallSelectionTypesFaces/** Faces */,
                WallSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the auxiliary floor selection types */
            public: enum AuxiliaryFloorColorSelectionTypes
            {
                AuxiliaryFloorColorSelectionTypesBodies/** Bodies */,
                AuxiliaryFloorColorSelectionTypesFaces/** Faces */,
                AuxiliaryFloorColorSelectionTypesSurfaceRegion/** Surface Region */
            };

            /** the information listing types */
            public: enum CsysInformationListingTypes
            {
                CsysInformationListingTypesWcs/** WCS */,
                CsysInformationListingTypesMcs/** MCS */
            };

            /** the animation accuracy types */
            public: enum AnimationAccuracyTypes
            {
                AnimationAccuracyTypesFine/** Fine */,
                AnimationAccuracyTypesCoarse/** Coarse */
            };

            private: PreferencesImpl * m_preferences_impl;
            private: friend class  _PreferencesBuilder;
            protected: Preferences();
            public: ~Preferences();
            /**Returns  the display selected objects  <br> License requirements : None */
            public: bool DisplaySelectedObjects
            (
            );
            /**Sets  the display selected objects  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplaySelectedObjects
            (
                bool displaySelectedObjects /** displayselectedobjects */ 
            );
            /**Returns  the display turning ipw  <br> License requirements : None */
            public: bool DisplayTurningIpw
            (
            );
            /**Sets  the display turning ipw  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayTurningIpw
            (
                bool displayTurningIpw /** displayturningipw */ 
            );
            /**Returns  the process assistant  <br> License requirements : None */
            public: bool RunProcessAssistant
            (
            );
            /**Sets  the process assistant  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRunProcessAssistant
            (
                bool processAssistant /** processassistant */ 
            );
            /**Returns  the auto update dialog  <br> License requirements : None */
            public: bool AlwaysUpdateDialogs
            (
            );
            /**Sets  the auto update dialog  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAlwaysUpdateDialogs
            (
                bool alwaysUpdateDialogs /** alwaysupdatedialogs */ 
            );
            /**Returns  the show pictures  <br> License requirements : None */
            public: bool ShowPictures
            (
            );
            /**Sets  the show pictures  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetShowPictures
            (
                bool showPictures /** showpictures */ 
            );
            /**Returns  the scrollable items  <br> License requirements : None */
            public: int ScrollAreaSize
            (
            );
            /**Sets  the scrollable items  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetScrollAreaSize
            (
                int scrollableItems /** scrollableitems */ 
            );
            /**Returns  the refresh before each path replay  <br> License requirements : None */
            public: bool ReplayRefreshBeforeEachPath
            (
            );
            /**Sets  the refresh before each path replay  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReplayRefreshBeforeEachPath
            (
                bool refreshBeforeEachPath /** refreshbeforeeachpath */ 
            );
            /**Returns  the update all instances  <br> License requirements : None */
            public: bool GenerationUpdateInstances
            (
            );
            /**Sets  the update all instances  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationUpdateInstances
            (
                bool updateInstances /** updateinstances */ 
            );
            /**Returns  the pause after each path  <br> License requirements : None */
            public: bool GenerationPauseAfterEachPath
            (
            );
            /**Sets  the pause after each path  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationPauseAfterEachPath
            (
                bool pauseAfterEachPath /** pauseaftereachpath */ 
            );
            /**Returns  the refresh before each path  <br> License requirements : None */
            public: bool GenerationRefreshBeforeEachPath
            (
            );
            /**Sets  the refresh before each path  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGenerationRefreshBeforeEachPath
            (
                bool refreshBeforeEachPath /** refreshbeforeeachpath */ 
            );
            /**Returns  the link mcs rcs  <br> License requirements : None */
            public: bool LinkMcsRcs
            (
            );
            /**Sets  the link mcs rcs  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLinkMcsRcs
            (
                bool linkMcsRcs /** linkmcsrcs */ 
            );
            /**Returns  the relocate parameters  <br> License requirements : None */
            public: bool RelocateParameters
            (
            );
            /**Sets  the relocate parameters  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRelocateParameters
            (
                bool relocateParameters /** relocateparameters */ 
            );
            /**Returns  the unlink instances  <br> License requirements : None */
            public: bool UnlinkInstances
            (
            );
            /**Sets  the unlink instances  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUnlinkInstances
            (
                bool unlinkInstances /** unlinkinstances */ 
            );
            /**Returns  the include instances  <br> License requirements : None */
            public: bool IncludeInstances
            (
            );
            /**Sets  the include instances  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIncludeInstances
            (
                bool includeInstances /** includeinstances */ 
            );
            /**Returns  the generate tool paths  <br> License requirements : None */
            public: bool GeneratePaths
            (
            );
            /**Sets  the generate tool paths  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGeneratePaths
            (
                bool generatePaths /** generatepaths */ 
            );
            /**Returns  the auto maching data  <br> License requirements : None */
            public: bool AutomaticallySetMachingData
            (
            );
            /**Sets  the auto maching data  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutomaticallySetMachingData
            (
                bool autoMachingData /** automachingdata */ 
            );
            /**Returns  the part color  <br> License requirements : None */
            public: NXOpen::NXColor * PartColor
            (
            );
            /**Sets  the part color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartColor
            (
                NXOpen::NXColor * partColor /** partcolor */ 
            );
            /**Returns  the blank color  <br> License requirements : None */
            public: NXOpen::NXColor * BlankColor
            (
            );
            /**Sets  the blank color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankColor
            (
                NXOpen::NXColor * blankColor /** blankcolor */ 
            );
            /**Returns  the check color  <br> License requirements : None */
            public: NXOpen::NXColor * CheckColor
            (
            );
            /**Sets  the check color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckColor
            (
                NXOpen::NXColor * checkColor /** checkcolor */ 
            );
            /**Returns  the drive color  <br> License requirements : None */
            public: NXOpen::NXColor * DriveColor
            (
            );
            /**Sets  the drive color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDriveColor
            (
                NXOpen::NXColor * driveColor /** drivecolor */ 
            );
            /**Returns  the trim color  <br> License requirements : None */
            public: NXOpen::NXColor * TrimColor
            (
            );
            /**Sets  the trim color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimColor
            (
                NXOpen::NXColor * trimColor /** trimcolor */ 
            );
            /**Returns  the uncut region color  <br> License requirements : None */
            public: NXOpen::NXColor * UncutRegionColor
            (
            );
            /**Sets  the uncut region color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUncutRegionColor
            (
                NXOpen::NXColor * uncutRegionColor /** uncutregioncolor */ 
            );
            /**Returns  the clearance color  <br> License requirements : None */
            public: NXOpen::NXColor * ClearanceColor
            (
            );
            /**Sets  the clearance color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClearanceColor
            (
                NXOpen::NXColor * clearanceColor /** clearancecolor */ 
            );
            /**Returns  the cut area color  <br> License requirements : None */
            public: NXOpen::NXColor * CutAreaColor
            (
            );
            /**Sets  the cut area color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutAreaColor
            (
                NXOpen::NXColor * cutAreaColor /** cutareacolor */ 
            );
            /**Returns  the suspect bounding box color  <br> License requirements : None */
            public: NXOpen::NXColor * SuspectBoundingBoxColor
            (
            );
            /**Sets  the suspect bounding box color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSuspectBoundingBoxColor
            (
                NXOpen::NXColor * suspectBoundingBoxColor /** suspectboundingboxcolor */ 
            );
            /**Returns  the wall color  <br> License requirements : None */
            public: NXOpen::NXColor * WallColor
            (
            );
            /**Sets  the wall color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWallColor
            (
                NXOpen::NXColor * wallColor /** wallcolor */ 
            );
            /**Returns  the top off level  <br> License requirements : None */
            public: NXOpen::NXColor * TopOffLevelColor
            (
            );
            /**Sets  the top off level  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTopOffLevelColor
            (
                NXOpen::NXColor * topOffLevel /** topofflevel */ 
            );
            /**Returns  the optimized cut level  <br> License requirements : None */
            public: NXOpen::NXColor * OptimizedCutLevelColor
            (
            );
            /**Sets  the optimized cut level  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOptimizedCutLevelColor
            (
                NXOpen::NXColor * optimizedCutLevel /** optimizedcutlevel */ 
            );
            /**Returns  the auxiliary floor  <br> License requirements : None */
            public: NXOpen::NXColor * AuxiliaryFloorColor
            (
            );
            /**Sets  the auxiliary floor  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAuxiliaryFloorColor
            (
                NXOpen::NXColor * auxiliaryFloor /** auxiliaryfloor */ 
            );
            /**Returns  the part selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::PartSelectionTypes PartSelection
            (
            );
            /**Sets  the part selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartSelection
            (
                NXOpen::CAM::Preferences::PartSelectionTypes partSelection /** partselection */ 
            );
            /**Returns  the blank selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::BlankSelectionTypes BlankSelection
            (
            );
            /**Sets  the blank selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankSelection
            (
                NXOpen::CAM::Preferences::BlankSelectionTypes blankSelection /** blankselection */ 
            );
            /**Returns  the check selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::CheckSelectionTypes CheckSelection
            (
            );
            /**Sets  the check selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckSelection
            (
                NXOpen::CAM::Preferences::CheckSelectionTypes checkSelection /** checkselection */ 
            );
            /**Returns  the cut area selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::CutAreaSelectionTypes CutAreaSelection
            (
            );
            /**Sets  the cut area selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutAreaSelection
            (
                NXOpen::CAM::Preferences::CutAreaSelectionTypes cutAreaSelection /** cutareaselection */ 
            );
            /**Returns  the wall selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::WallSelectionTypes WallSelection
            (
            );
            /**Sets  the wall selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWallSelection
            (
                NXOpen::CAM::Preferences::WallSelectionTypes wallSelection /** wallselection */ 
            );
            /**Returns  the auxiliary floor selection  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::AuxiliaryFloorColorSelectionTypes AuxiliaryFloorColorSelection
            (
            );
            /**Sets  the auxiliary floor selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAuxiliaryFloorColorSelection
            (
                NXOpen::CAM::Preferences::AuxiliaryFloorColorSelectionTypes auxiliaryFloorSelection /** auxiliaryfloorselection */ 
            );
            /**Returns  the enable level based ipw  <br> License requirements : None */
            public: bool EnableLevelBasedIpw
            (
            );
            /**Sets  the enable level based ipw  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnableLevelBasedIpw
            (
                bool enableLevelBasedIpw /** enablelevelbasedipw */ 
            );
            /**Returns  the ipw model  <br> License requirements : None */
            public: bool SaveIpwModel
            (
            );
            /**Sets  the ipw model  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSaveIpwModel
            (
                bool ipwModel /** ipwmodel */ 
            );
            /**Returns  the level based ipw  <br> License requirements : None */
            public: bool SaveLevelBasedIpw
            (
            );
            /**Sets  the level based ipw  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSaveLevelBasedIpw
            (
                bool levelBasedIpw /** levelbasedipw */ 
            );
            /**Returns  the use directory original part  <br> License requirements : None */
            public: bool IpwUseDirectoryOfOriginalPart
            (
            );
            /**Sets  the use directory original part  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwUseDirectoryOfOriginalPart
            (
                bool useIpwDirectoryOfOriginalPart /** useipwdirectoryoforiginalpart */ 
            );
            /**Returns  the ipw parts folder  <br> License requirements : None */
            public: NXString IpwPartsFolder
            (
            );
            /**Sets  the ipw parts folder  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwPartsFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /** Get the ipw default folder  @return   <br> License requirements : None */
            public: NXString GetDefaultIpwFolder
            (
            );
            /**Returns  the base info  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::CsysInformationListingTypes CsysInformationListing
            (
            );
            /**Sets  the base info  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCsysInformationListing
            (
                NXOpen::CAM::Preferences::CsysInformationListingTypes baseInfo /** baseinfo */ 
            );
            /**Returns  the orient wcs to mcs  <br> License requirements : None */
            public: bool CsysOrientWcsToMcs
            (
            );
            /**Sets  the orient wcs to mcs  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCsysOrientWcsToMcs
            (
                bool orientWcsToMcs /** orientwcstomcs */ 
            );
            /**Returns  the tool display color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolDisplayColor
            (
            );
            /**Sets  the tool display color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolDisplayColor
            (
                NXOpen::NXColor * toolDisplayColor /** tooldisplaycolor */ 
            );
            /**Returns  the turning tool insert  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeToolInsertOrFluteColor
            (
            );
            /**Sets  the turning tool insert  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolInsertOrFluteColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the gouges color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeGougesColor
            (
            );
            /**Sets  the gouges color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeGougesColor
            (
                NXOpen::NXColor * gougesColor /** gougescolor */ 
            );
            /**Returns  the collisions color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeCollisionsColor
            (
            );
            /**Sets  the collisions color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeCollisionsColor
            (
                NXOpen::NXColor * collisionsColor /** collisionscolor */ 
            );
            /**Returns  the excess material color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeExcessMaterialColor
            (
            );
            /**Sets  the excess material color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeExcessMaterialColor
            (
                NXOpen::NXColor * excessMaterialColor /** excessmaterialcolor */ 
            );
            /**Returns  the auto block color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeAutoBlockColor
            (
            );
            /**Sets  the auto block color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeAutoBlockColor
            (
                NXOpen::NXColor * autoBlockColor /** autoblockcolor */ 
            );
            /**Returns  the ipw color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeIpwColor
            (
            );
            /**Sets  the ipw color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwColor
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the temporary containment curve color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeTemporaryContainmentCurveColor
            (
            );
            /**Sets  the temporary containment curve color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeTemporaryContainmentCurveColor
            (
                NXOpen::NXColor * temporaryContainmentCurveColor /** temporarycontainmentcurvecolor */ 
            );
            /**Returns  the safe tool color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeSafeToolColor
            (
            );
            /**Sets  the safe tool color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeSafeToolColor
            (
                NXOpen::NXColor * safeToolColor /** safetoolcolor */ 
            );
            /**Returns  the background color  <br> License requirements : None */
            public: NXOpen::NXColor * VisualizeBackgroundColor
            (
            );
            /**Sets  the background color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeBackgroundColor
            (
                NXOpen::NXColor * backgroundColor /** backgroundcolor */ 
            );
            /**Returns  the tool color1  <br> License requirements : None */
            public: NXOpen::NXColor * Visualize2dTool1Color
            (
            );
            /**Sets  the tool color1  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualize2dTool1Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color2  <br> License requirements : None */
            public: NXOpen::NXColor * Visualize2dTool2Color
            (
            );
            /**Sets  the tool color2  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualize2dTool2Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color3  <br> License requirements : None */
            public: NXOpen::NXColor * Visualize2dTool3Color
            (
            );
            /**Sets  the tool color3  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualize2dTool3Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color4  <br> License requirements : None */
            public: NXOpen::NXColor * Visualize2dTool4Color
            (
            );
            /**Sets  the tool color4  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualize2dTool4Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the tool color5  <br> License requirements : None */
            public: NXOpen::NXColor * Visualize2dTool5Color
            (
            );
            /**Sets  the tool color5  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualize2dTool5Color
            (
                NXOpen::NXColor * toolColor /** toolcolor */ 
            );
            /**Returns  the ipw translucency  <br> License requirements : None */
            public: int VisualizeIpwTranslucency
            (
            );
            /**Sets  the ipw translucency  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeIpwTranslucency
            (
                int ipwTranslucency /** ipwtranslucency */ 
            );
            /**Returns  the animation accuracy  <br> License requirements : None */
            public: NXOpen::CAM::Preferences::AnimationAccuracyTypes VisualizeAnimationAccuracy
            (
            );
            /**Sets  the animation accuracy  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeAnimationAccuracy
            (
                NXOpen::CAM::Preferences::AnimationAccuracyTypes animationAccuracy /** animationaccuracy */ 
            );
            /**Returns  the chordal tolerance  <br> License requirements : None */
            public: double VisualizeChordalTolerance
            (
            );
            /**Sets  the chordal tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeChordalTolerance
            (
                double chordalTolerance /** chordaltolerance */ 
            );
            /**Returns  the tilt tolerance  <br> License requirements : None */
            public: double VisualizeToolAxisTiltTolerance
            (
            );
            /**Sets  the tilt tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVisualizeToolAxisTiltTolerance
            (
                double tiltTolerance /** tilttolerance */ 
            );
            /**Returns  the clsf_decimals  <br> License requirements : None */
            public: int ClsfDecimals
            (
            );
            /**Sets  the clsf_decimals  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClsfDecimals
            (
                int decimals /** decimals */ 
            );
            /**Returns  the force load turret  <br> License requirements : None */
            public: bool ClsfForceLoadTurret
            (
            );
            /**Sets  the force load turret  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetClsfForceLoadTurret
            (
                bool forceLoadTurret /** forceloadturret */ 
            );
            /**Returns  the configuration file  <br> License requirements : None */
            public: NXString ConfigurationFile
            (
            );
            /**Sets  the configuration file  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetConfigurationFile
            (
                const NXString & fileName /** filename */ 
            );
            /** Get the default configuration file  @return   <br> License requirements : None */
            public: NXString GetDefaultConfigurationFile
            (
            );
            /**Returns  the template file  <br> License requirements : None */
            public: NXString TemplateFile
            (
            );
            /**Sets  the template file  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTemplateFile
            (
                const NXString & fileName /** filename */ 
            );
            /** Get the default template file  @return   <br> License requirements : None */
            public: NXString GetDefaultTemplateFile
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
