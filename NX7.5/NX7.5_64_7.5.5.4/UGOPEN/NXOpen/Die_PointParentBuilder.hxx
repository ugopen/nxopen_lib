#ifndef NXOpen_DIE_POINTPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_POINTPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PointParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class PointParentBuilder;
    }
    namespace Die
    {
        class PointChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _PointParentBuilderBuilder;
        class PointParentBuilderImpl;
        /** Represents a Die Point Parent sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT  PointParentBuilder : public Features::FeatureBuilder
        {
            private: PointParentBuilderImpl * m_pointparentbuilder_impl;
            private: friend class  _PointParentBuilderBuilder;
            protected: PointParentBuilder();
            public: ~PointParentBuilder();
            /**Sets  the design status of points, if true the points will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool designStatus /** design status */ 
            );
            /**Returns  the design status of points, if true the points will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of points.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of points, if true input data to the points will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool displayStatus /** display status */ 
            );
            /**Returns  the display status of points, if true input data to the points will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child point.  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::PointChildBuilder * CreateChild
            (
            );
            /** Deletes a child point.  <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::PointChildBuilder * diepointchild /** diepointchild */ 
            );
            /** Outputs the child points.  @return  The child points.  <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::PointChildBuilder *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
