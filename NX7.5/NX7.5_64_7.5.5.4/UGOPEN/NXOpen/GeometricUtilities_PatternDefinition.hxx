#ifndef NXOpen_GEOMETRICUTILITIES_PATTERNDEFINITION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_PATTERNDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_PatternDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongPathPattern.hxx>
#include <NXOpen/GeometricUtilities_CircularPattern.hxx>
#include <NXOpen/GeometricUtilities_PatternClocking.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/GeometricUtilities_PatternFill.hxx>
#include <NXOpen/GeometricUtilities_PatternIncrementsBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternInstanceEditBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternOrientation.hxx>
#include <NXOpen/GeometricUtilities_RectangularPattern.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    namespace GeometricUtilities
    {
        class AlongPathPattern;
    }
    namespace GeometricUtilities
    {
        class CircularPattern;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternClocking;
    }
    namespace GeometricUtilities
    {
        class PatternFill;
    }
    namespace GeometricUtilities
    {
        class PatternIncrementsBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternInstanceEditBuilder;
    }
    namespace GeometricUtilities
    {
        class PatternOrientation;
    }
    namespace GeometricUtilities
    {
        class RectangularPattern;
    }
    namespace GeometricUtilities
    {
        class _PatternDefinitionBuilder;
        class PatternDefinitionImpl;
        /** pattern spacing for several pattern based commands.  See PatternEnum definition
                below for a listing of the various pattern definitions available. */
        class NXOPENCPPEXPORT  PatternDefinition : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** pattern types available.  For details on the interface of each type,
                        visit the corresponding definition class for each type. */
            public: enum PatternEnum
            {
                PatternEnumLinear/** pattern along single linear direction. */,
                PatternEnumCircular/** pattern in angular and radial directions. */,
                PatternEnumAlongPath/** pattern in angular and radial directions. */
            };

            private: PatternDefinitionImpl * m_patterndefinition_impl;
            private: friend class  _PatternDefinitionBuilder;
            protected: PatternDefinition();
            public: ~PatternDefinition();
            /**Returns  the pattern type  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternDefinition::PatternEnum PatternType
            (
            );
            /**Sets  the pattern type  <br> License requirements : None */
            public: void SetPatternType
            (
                NXOpen::GeometricUtilities::PatternDefinition::PatternEnum patternType /** patterntype */ 
            );
            /**Returns  the linear definition.  See LinearPattern for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RectangularPattern * RectangularDefinition
            (
            );
            /**Returns  the circular definition.  See CircularPattern for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CircularPattern * CircularDefinition
            (
            );
            /**Returns  the along path definition.  See AlongPathPattern for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern * AlongPathDefinition
            (
            );
            /**Returns  the pattern fill definition.  See PatternFill for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternFill * PatternFill
            (
            );
            /**Returns  the pattern orientation definition.  See PatternOrientation for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternOrientation * PatternOrientation
            (
            );
            /**Returns  the frameOnlyToggle, a logical flag to indicate if the we need only instances on the boundary.  <br> License requirements : None */
            public: bool FrameOnlyToggle
            (
            );
            /**Sets  the frameOnlyToggle, a logical flag to indicate if the we need only instances on the boundary.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFrameOnlyToggle
            (
                bool frameOnlyToggle /** frameonlytoggle */ 
            );
            /**Returns  the pattern increments definition.  See @link GeometricUtilities::PatternIncrementsBuilder GeometricUtilities::PatternIncrementsBuilder@endlink  for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternIncrementsBuilder * PatternIncrementsBuilder
            (
            );
            /** This is the default creator for @link GeometricUtilities::PatternInstanceEditBuilder GeometricUtilities::PatternInstanceEditBuilder@endlink .  @return   <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternInstanceEditBuilder * CreatePatternInstanceEditBuilder
            (
            );
            /** Gets the suppress state for the instance at the specified indicies.  @return   <br> License requirements : None */
            public: bool GetSuppressState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */
            );
            /** Sets the suppress state for the instance at the specified indicies.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSuppressState
            (
                int index1 /** First index of instance */,
                int index2 /** Second index of instance */,
                bool suppressState /** Input suppress state */
            );
            /** Creates a pattern clocking object  @return   <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternClocking * GetClocking
            (
                int index1 /** First index into pattern instance array */,
                int index2 /** Second index into pattern instance array  */
            );
            /** Removes clocking from pattern definition instance  <br> License requirements : None */
            public: void RemoveClocking
            (
                int index1 /** First index into pattern instance array */,
                int index2 /** Second index into pattern instance array */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
