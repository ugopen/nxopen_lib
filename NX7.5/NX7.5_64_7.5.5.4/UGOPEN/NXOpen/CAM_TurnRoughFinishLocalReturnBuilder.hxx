#ifndef NXOpen_CAM_TURNROUGHFINISHLOCALRETURNBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNROUGHFINISHLOCALRETURNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnRoughFinishLocalReturnBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnRoughFinishLocalReturnBuilder;
    }
    namespace CAM
    {
        class PostEventsCiBuilder;
    }
    class Point;
    namespace CAM
    {
        class _TurnRoughFinishLocalReturnBuilderBuilder;
        class TurnRoughFinishLocalReturnBuilderImpl;
        /** Represents an avoidance start Builder */
        class NXOPENCPPEXPORT  TurnRoughFinishLocalReturnBuilder : public TaggedObject
        {
            /** The local return type options */
            public: enum ModeTypes
            {
                ModeTypesNone/** Local Return: None */,
                ModeTypesDistance/** Local Return: Distance */,
                ModeTypesTime/** Local Return: Time */,
                ModeTypesNumberOfPasses/** Local Return: Number of Passes*/,
                ModeTypesNumberOfCuts/** Local Return: Number of Cuts*/,
                ModeTypesNumberOfLevels/** Local Return: Number of Levels*/
            };

            /** the adjustment mode options */
            public: enum AdjustmentModeTypes
            {
                AdjustmentModeTypesNone/** Ajustment: None */,
                AdjustmentModeTypesRange/** Ajustment: Range */,
                AdjustmentModeTypesAlignment/** Ajustment: Alignment */
            };

            /** the return move mode options */
            public: enum ReturnMoveModeTypes
            {
                ReturnMoveModeTypesNone/** Return Move: Nove */,
                ReturnMoveModeTypesDirect/** Return Move: Direct */,
                ReturnMoveModeTypesRadialAxial/** Return Move: Radial-Axial */,
                ReturnMoveModeTypesAxialRadial/** Return Move: Axial-Radial */,
                ReturnMoveModeTypesClearRadialDirect/** Return Move: Clear Radial-Direct */,
                ReturnMoveModeTypesClearAxialDirect/** Return Move: Clear Axial-Direct */,
                ReturnMoveModeTypesClearRadial/** Return Move: Clear Radial */,
                ReturnMoveModeTypesClearAxial/** Return Move: Clear Axial */,
                ReturnMoveModeTypesRadialClearAxialDirect/** Return Move: Radial-Clear Axial-Direct */,
                ReturnMoveModeTypesRadialAxialRadial/** Return Move: Radial-Axial-Radial */,
                ReturnMoveModeTypesRadialClearAxial/** Return Move: * Radial-Clear Axial */
            };

            /** the local limit mode */
            public: enum LimitTypes
            {
                LimitTypesDistanceOrTime/** mm,inch or sec */,
                LimitTypesPercent/** % */
            };

            /** the Dwell Unit type */
            public: enum DwellUnitTypes
            {
                DwellUnitTypesNone/** None */,
                DwellUnitTypesSeconds/** Seconds */,
                DwellUnitTypesRevolutions/** Revolutions */
            };

            private: TurnRoughFinishLocalReturnBuilderImpl * m_turnroughfinishlocalreturnbuilder_impl;
            private: friend class  _TurnRoughFinishLocalReturnBuilderBuilder;
            protected: TurnRoughFinishLocalReturnBuilder();
            public: ~TurnRoughFinishLocalReturnBuilder();
            /**Returns  the local return type  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::ModeTypes Mode
            (
            );
            /**Sets  the local return type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMode
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::ModeTypes localReturnModeType /** the start local return type value */
            );
            /**Returns  the local distance value  <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the local distance value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDistance
            (
                double localDistanceValue /** the local distance value */
            );
            /**Returns  the local time value  <br> License requirements : None */
            public: double Time
            (
            );
            /**Sets  the local time value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTime
            (
                double localTimeValue /** the local time value */
            );
            /**Returns  the local number of passes value  <br> License requirements : None */
            public: int NumberOfPasses
            (
            );
            /**Sets  the local number of passes value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfPasses
            (
                int localNumberOfPassesValue /** the local number of passes value */
            );
            /**Returns  the adjustment mode mode  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::AdjustmentModeTypes AdjustmentMode
            (
            );
            /**Sets  the adjustment mode mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAdjustmentMode
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::AdjustmentModeTypes adjustmentMode /** the adjustment mode value */
            );
            /**Returns  the adjustment mode mode  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::ReturnMoveModeTypes ReturnMoveMode
            (
            );
            /**Sets  the adjustment mode mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnMoveMode
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::ReturnMoveModeTypes returnMoveMode /** the return move mode value */
            );
            /**Returns  the local return point  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the local return point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * localReturnPoint /** the local return point value */
            );
            /**Returns  the lower limit  <br> License requirements : None */
            public: double LowerLimit
            (
            );
            /**Sets  the lower limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLowerLimit
            (
                double lowerLimitValue /** the lower limit value */
            );
            /** Get the lower limits mode  @return  the lower limits mode value  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::LimitTypes GetLowerLimitType
            (
            );
            /** Set the lower limits mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLowerLimitType
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::LimitTypes lowerLimitModeValue /** the lower limits mode value */
            );
            /**Returns  the upper limit  <br> License requirements : None */
            public: double UpperLimit
            (
            );
            /**Sets  the upper limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUpperLimit
            (
                double upperLimitValue /** the upper limit value */
            );
            /** Get the upper limits mode  @return  the upper limits mode value  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::LimitTypes GetUpperLimitType
            (
            );
            /** Set the upper limits mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUpperLimitType
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::LimitTypes upperLimitModeValue /** the upper limits mode value */
            );
            /**Returns  the output stop option  <br> License requirements : None */
            public: bool OutputStop
            (
            );
            /**Sets  the output stop option  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputStop
            (
                bool stopValue /** the Stop value */
            );
            /**Returns  the output opstop option  <br> License requirements : None */
            public: bool OutputOpstop
            (
            );
            /**Sets  the output opstop option  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputOpstop
            (
                bool opstopValue /** the Opstop value */
            );
            /**Returns  the output opskip option <br> License requirements : None */
            public: bool OutputOpskip
            (
            );
            /**Sets  the output opskip option <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputOpskip
            (
                bool opskipValue /** the Opskip value */
            );
            /**Returns  the output operator message option <br> License requirements : None */
            public: bool OutputOperatorMessage
            (
            );
            /**Sets  the output operator message option <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputOperatorMessage
            (
                bool operatorMessage /** the Operator Message value */
            );
            /**Returns  the Operator Message String  <br> License requirements : None */
            public: NXString OperatorMessage
            (
            );
            /**Sets  the Operator Message String  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOperatorMessage
            (
                const NXString & operatorMessage /** the Operator Message String value */
            );
            /**Returns  the Dwell Unit type  <br> License requirements : None */
            public: NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::DwellUnitTypes DwellUnit
            (
            );
            /**Sets  the Dwell Unit type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDwellUnit
            (
                NXOpen::CAM::TurnRoughFinishLocalReturnBuilder::DwellUnitTypes dwellUnit /** the Dwell Unit value */
            );
            /**Returns  the Dwell Time or Revolutions  <br> License requirements : None */
            public: double Dwell
            (
            );
            /**Sets  the Dwell Time or Revolutions  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDwell
            (
                double dwell /** the Dwell Time or Revolutions value */
            );
            /**Returns  the start event builder   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PostEventsCiBuilder * StartOfPathBuilder
            (
            );
            /**Returns  the end event builder   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PostEventsCiBuilder * EndOfPathBuilder
            (
            );
            /**Returns  the local number of cuts  <br> License requirements : None */
            public: int NumberOfCuts
            (
            );
            /**Sets  the local number of cuts  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfCuts
            (
                int localNumberOfCutsValue /** the local number of cuts value */
            );
            /**Returns  the local number of levels  <br> License requirements : None */
            public: int NumberOfLevels
            (
            );
            /**Sets  the local number of levels  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfLevels
            (
                int localNumberOfLevelsValue /** the local number of levels value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
