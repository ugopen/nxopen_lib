#ifndef NXOpen_GEOMETRICUTILITIES_ALONGPATHPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ALONGPATHPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_AlongPathPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongPathPattern.hxx>
#include <NXOpen/GeometricUtilities_DistancePatternSpacing.hxx>
#include <NXOpen/GeometricUtilities_OnPathDistancePatternSpacing.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class AlongPathPattern;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class DistancePatternSpacing;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDistancePatternSpacing;
    }
    class Section;
    namespace GeometricUtilities
    {
        class _AlongPathPatternBuilder;
        class AlongPathPatternImpl;
        /** the AlongPath pattern definition.  Allows specification along
                two section pathes. */
        class NXOPENCPPEXPORT  AlongPathPattern : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This defines y direction Types */
            public: enum YDirectionOptions
            {
                YDirectionOptionsVector/** y direction is a vector. */,
                YDirectionOptionsSection/** y direction is a section. */
            };

            private: AlongPathPatternImpl * m_alongpathpattern_impl;
            private: friend class  _AlongPathPatternBuilder;
            protected: AlongPathPattern();
            public: ~AlongPathPattern();
            /**Returns  the x path  <br> License requirements : None */
            public: NXOpen::Section * XPath
            (
            );
            /**Sets  the x path  <br> License requirements : None */
            public: void SetXPath
            (
                NXOpen::Section * xPath /** xpath */ 
            );
            /**Returns  the on path instance spacing along the x path  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDistancePatternSpacing * XOnPathSpacing
            (
            );
            /**Returns  the y direction options  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptions YDirectionOption
            (
            );
            /**Sets  the y direction options  <br> License requirements : None */
            public: void SetYDirectionOption
            (
                NXOpen::GeometricUtilities::AlongPathPattern::YDirectionOptions yDirectionOption /** ydirectionoption */ 
            );
            /**Returns  the y path, which can be any continuous section  <br> License requirements : None */
            public: NXOpen::Section * YPath
            (
            );
            /**Sets  the y path, which can be any continuous section  <br> License requirements : None */
            public: void SetYPath
            (
                NXOpen::Section * yPath /** ypath */ 
            );
            /**Returns  the on path instance spacing along the y path  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDistancePatternSpacing * YOnPathSpacing
            (
            );
            /**Returns  the y axis, which can be any vector not parallel to the x axis  <br> License requirements : None */
            public: NXOpen::Direction * YDirection
            (
            );
            /**Sets  the y axis, which can be any vector not parallel to the x axis  <br> License requirements : None */
            public: void SetYDirection
            (
                NXOpen::Direction * yDirection /** ydirection */ 
            );
            /**Returns  the instance spacing along the y axis  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DistancePatternSpacing * YSpacing
            (
            );
            /**Returns  the UseYDirection toggle attribute. This function gets the UseYDirection toggle value  <br> License requirements : None */
            public: bool UseYDirectionToggle
            (
            );
            /**Sets  the UseYDirection toggle attribute. This function gets the UseYDirection toggle value  <br> License requirements : None */
            public: void SetUseYDirectionToggle
            (
                bool toggle /** toggle */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
