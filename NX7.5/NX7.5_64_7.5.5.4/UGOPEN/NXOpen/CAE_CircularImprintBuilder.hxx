#ifndef NXOpen_CAE_CIRCULARIMPRINTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CIRCULARIMPRINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CircularImprintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_CircularImprintBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CircularImprintBuilder;
    }
    class Builder;
    class Expression;
    class SelectTaggedObjectList;
    namespace CAE
    {
        class _CircularImprintBuilderBuilder;
        class CircularImprintBuilderImpl;
        /**
            Builder for creating Circular Imprint
             <br> To create a new instance of this class, use @link CAE::AbstractionManager::CreateCircularImprintBuilder CAE::AbstractionManager::CreateCircularImprintBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  CircularImprintBuilder : public Builder
        {
            /** Around Edge Diameter Option */
            public: enum AroundEdgeDiaType
            {
                AroundEdgeDiaTypeAbsolute/** Absolute Diameter Value */,
                AroundEdgeDiaTypeRelative/** Relative Value */
            };

            private: CircularImprintBuilderImpl * m_circularimprintbuilder_impl;
            private: friend class  _CircularImprintBuilderBuilder;
            protected: CircularImprintBuilder();
            public: ~CircularImprintBuilder();
            /**Returns  the selected surface object(s)  <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * SurfaceSelection
            (
            );
            /**Returns  the selected edge/point object(s)  <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * EdgeSelection
            (
            );
            /**Returns  an absolute dia around point  <br> License requirements : None */
            public: NXOpen::Expression * AbsoluteDiaAroundPoint
            (
            );
            /**Returns  an absolute dia around edge  <br> License requirements : None */
            public: NXOpen::Expression * AbsoluteDiaAroundEdge
            (
            );
            /**Returns  the dia scale factor  <br> License requirements : None */
            public: double DiaScaleFactor
            (
            );
            /**Sets  the dia scale factor  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDiaScaleFactor
            (
                double dia /** dia */ 
            );
            /**Returns  an around edge dia option  <br> License requirements : None */
            public: NXOpen::CAE::CircularImprintBuilder::AroundEdgeDiaType AroundEdgeDiaOption
            (
            );
            /**Sets  an around edge dia option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAroundEdgeDiaOption
            (
                NXOpen::CAE::CircularImprintBuilder::AroundEdgeDiaType methodOption /** methodoption */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
