#ifndef NXOpen_TOOLING_SOLIDPATCHBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SOLIDPATCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SolidPatchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_SolidPatchBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class SolidPatchBuilder;
    }
    class Builder;
    class SelectBody;
    class SelectBodyList;
    namespace Tooling
    {
        class _SolidPatchBuilderBuilder;
        class SolidPatchBuilderImpl;
        /** Represents a builder to be used to create a solid patch. <br> To create a new instance of this class, use @link Tooling::SolidPatchCollection::CreateBuilder Tooling::SolidPatchCollection::CreateBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        PatchType </td> <td> 
         
        SolidPatch </td> </tr> 

        <tr><td> 
         
        Subtract </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  SolidPatchBuilder : public Builder
        {
            /** Settings of the solid patch creation types.*/
            public: enum SolidPatchType
            {
                SolidPatchTypeSolidPatch/** Solid patch type indicates to create solid patch*/,
                SolidPatchTypeLinkBody/** Link body type indicates to create link body*/
            };

            private: SolidPatchBuilderImpl * m_solidpatchbuilder_impl;
            private: friend class  _SolidPatchBuilderBuilder;
            protected: SolidPatchBuilder();
            public: ~SolidPatchBuilder();
            /**Returns  the patch type of the solid patch creation. <br> License requirements : None */
            public: NXOpen::Tooling::SolidPatchBuilder::SolidPatchType PatchType
            (
            );
            /**Sets  the patch type of the solid patch creation. <br> License requirements : None */
            public: void SetPatchType
            (
                NXOpen::Tooling::SolidPatchBuilder::SolidPatchType patchType /** patchtype */ 
            );
            /**Returns  the product body selected as the target body for unite with tool bodies. <br> License requirements : None */
            public: NXOpen::SelectBody * Product
            (
            );
            /**Returns  the tool bodies selected as linked source bodies for patching up the target body. <br> License requirements : None */
            public: NXOpen::SelectBodyList * Patch
            (
            );
            /**Returns  the toggle for indicating if the tool is subtracted by the target or not. <br> License requirements : None */
            public: bool Subtract
            (
            );
            /**Sets  the toggle for indicating if the tool is subtracted by the target or not. <br> License requirements : None */
            public: void SetSubtract
            (
                bool isSubtract /** issubtract */ 
            );
            /** the show result button to write patch and link information to list window. <br> License requirements : None */
            public: void ShowResult
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
