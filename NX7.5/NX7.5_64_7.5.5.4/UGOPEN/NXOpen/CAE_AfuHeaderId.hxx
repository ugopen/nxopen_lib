#ifndef NXOpen_CAE_AFUHEADERID_HXX_INCLUDED
#define NXOpen_CAE_AFUHEADERID_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuHeaderId.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AfuHeaderId;
    }
    namespace CAE
    {
        class AfuHeaderIdImpl;
        /** the data used to create header id information for an AFU Data Record */
        class NXOPENCPPEXPORT  AfuHeaderId : public TransientObject
        {
            private: AfuHeaderIdImpl * m_afuheaderid_impl;
            public: explicit AfuHeaderId(void *ptr);
            /** Free the AFU Header Id transient object memory  <br> License requirements : None */
            public: virtual ~AfuHeaderId();
            /**Sets  the string to define reference direction sense  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetReference
            (
                const NXString & reference /** the string to define reference direction sense.
                                                                          Up to 4 characters are allowed and
                                                                          the redundant characters will be ignored.
                                                                          ( X, Y, Z, RX, RY, and RZ have specific
                                                                          meaning but the character set can be
                                                                          anything including a "+" or "-" as the
                                                                          last character. examples:  ABC+  RSTU )
                                                                         */
            );
            /**Returns  the string to define reference direction sense  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString Reference
            (
            );
            /**Sets  the ID of reference element or node  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetReferenceId
            (
                int referenceId /** the ID of reference element or node */
            );
            /**Returns  the ID of reference element or node  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: int ReferenceId
            (
            );
            /**Sets  the string to define response direction sense  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetResponse
            (
                const NXString & response /** the string to define response direction sense.
                                                                          Up to 4 characters are allowed and
                                                                          the redundant characters will be ignored.
                                                                          ( X, Y, Z, RX, RY, and RZ have specific
                                                                          meaning but the character set can be
                                                                          anything including a "+" or "-" as the
                                                                          last character. examples:  ABC+  RSTU )
                                                                         */
            );
            /**Returns  the string to define response direction sense  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString Response
            (
            );
            /**Sets  the ID of response element or node  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetResponseId
            (
                int responseId /** the ID of response element or node */
            );
            /**Returns  the ID of response element or node  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: int ResponseId
            (
            );
            /**Sets  the load case of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetLoadCase
            (
                int loadCase /** the load case of AFU Header Id */
            );
            /**Returns  the load case of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: int LoadCase
            (
            );
            /**Sets  the version of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetVersion
            (
                int version /** the version of AFU Header Id */
            );
            /**Returns  the version of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: int Version
            (
            );
            /**Sets  the coordinate of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetCoordinate
            (
                int coordinate /** the coordinate of AFU Header Id */
            );
            /**Returns  the coordinate of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: int Coordinate
            (
            );
            /**Sets  the owner of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetOwner
            (
                const NXString & owner /** the owner of AFU Header Id.
                                                                          Up to 16 characters are allowed and the redundant
                                                                          characters will be ignored.
                                                                         */
            );
            /**Returns  the owner of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString Owner
            (
            );
            /**Sets  the id line1 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetIdLine1
            (
                const NXString & idLine1 /** the id line1 of AFU Header Id.
                                                                          Up to 80 characters are allowed and the redundant
                                                                          characters will be ignored.
                                                                         */
            );
            /**Returns  the id line1 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString IdLine1
            (
            );
            /**Sets  the id line2 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetIdLine2
            (
                const NXString & idLine2 /** the id line2 of AFU Header Id.
                                                                          Up to 80 characters are allowed and the redundant
                                                                          characters will be ignored.
                                                                         */
            );
            /**Returns  the id line2 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString IdLine2
            (
            );
            /**Sets  the id line3 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetIdLine3
            (
                const NXString & idLine3 /** the id line3 of AFU Header Id.
                                                                          Up to 80 characters are allowed and the redundant
                                                                          characters will be ignored.
                                                                         */
            );
            /**Returns  the id line3 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString IdLine3
            (
            );
            /**Sets  the id line4 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void SetIdLine4
            (
                const NXString & idLine4 /** the id line4 of AFU Header Id.
                                                                          Up to 80 characters are allowed and the redundant
                                                                          characters will be ignored.
                                                                         */
            );
            /**Returns  the id line4 of AFU Header Id  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString IdLine4
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
