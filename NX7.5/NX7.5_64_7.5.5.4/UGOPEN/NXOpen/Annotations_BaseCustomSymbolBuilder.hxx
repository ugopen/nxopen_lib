#ifndef NXOpen_ANNOTATIONS_BASECUSTOMSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASECUSTOMSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseCustomSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_BaseCustomSymbolBuilder.hxx>
#include <NXOpen/Annotations_LeaderBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class BaseCustomSymbolBuilder;
    }
    namespace Annotations
    {
        class BaseCustomSymbol;
    }
    namespace Annotations
    {
        class LeaderBuilder;
    }
    namespace Annotations
    {
        class MasterSymbolListItemBuilderList;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    class Expression;
    namespace Annotations
    {
        class _BaseCustomSymbolBuilderBuilder;
        class BaseCustomSymbolBuilderImpl;
        /** Represents a base Builder for Drafting and PMI Custom Symbol  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  BaseCustomSymbolBuilder : public Builder
        {
            /** Enum for Annotation Preferences This is used by @link Annotations::BaseCustomSymbolBuilder::get_AnnotationPreference Annotations::BaseCustomSymbolBuilder::get_AnnotationPreference@endlink  
                    and @link Annotations::BaseCustomSymbolBuilder::set_AnnotationPreference Annotations::BaseCustomSymbolBuilder::set_AnnotationPreference@endlink  
                    to set the annotation preferences for a symbol*/
            public: enum AnnotationPreferences
            {
                AnnotationPreferencesUseCurrent/** Current preferences */,
                AnnotationPreferencesUseDefinition/** Defined preferences */
            };

            /** Enum for Geometric Preferences This is used by @link Annotations::BaseCustomSymbolBuilder::get_GeometryPreference Annotations::BaseCustomSymbolBuilder::get_GeometryPreference@endlink  
                    and @link Annotations::BaseCustomSymbolBuilder::set_GeometryPreference Annotations::BaseCustomSymbolBuilder::set_GeometryPreference@endlink  
                    to set the geometric preferences for a symbol*/
            public: enum GeometryPreferences
            {
                GeometryPreferencesUseCurrent/** Current preferences */,
                GeometryPreferencesUseDefinition/** Defined preferences */
            };

            private: BaseCustomSymbolBuilderImpl * m_basecustomsymbolbuilder_impl;
            private: friend class  _BaseCustomSymbolBuilderBuilder;
            protected: BaseCustomSymbolBuilder();
            public: ~BaseCustomSymbolBuilder();
            /**Returns  the origin  <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the @link Annotations::LeaderBuilder Annotations::LeaderBuilder@endlink  for the annotation  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderBuilder * Leader
            (
            );
            /**Returns  the scale  <br> License requirements : None */
            public: NXOpen::Expression * Scale
            (
            );
            /**Returns  the angle  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the horizontal flip  <br> License requirements : None */
            public: bool HorizontalFlip
            (
            );
            /**Sets  the horizontal flip  <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalFlip
            (
                bool horizontalFlip /** horizontalflip */ 
            );
            /**Returns  the vertical flip  <br> License requirements : None */
            public: bool VerticalFlip
            (
            );
            /**Sets  the vertical flip  <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalFlip
            (
                bool verticalFlip /** verticalflip */ 
            );
            /** Returns the arbitrary note title  @return   <br> License requirements : None */
            public: std::vector<NXString> GetArbitraryNoteTitle
            (
            );
            /** Sets the arbitrary note title  <br> License requirements : drafting ("DRAFTING") */
            public: void SetArbitraryNoteTitle
            (
                const std::vector<NXString> & arbitraryNoteTitle /** arbitrarynotetitle */ 
            );
            /**Returns  the controlled note title  <br> License requirements : None */
            public: int ControlledNoteTitle
            (
            );
            /**Sets  the controlled note title  <br> License requirements : drafting ("DRAFTING") */
            public: void SetControlledNoteTitle
            (
                int controlledNoteTitle /** controllednotetitle */ 
            );
            /**Returns  the partially controlled note title  <br> License requirements : None */
            public: NXString PartiallyControlledNoteTitle
            (
            );
            /**Sets  the partially controlled note title  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartiallyControlledNoteTitle
            (
                const NXString & partiallyControlledNoteTitle /** partiallycontrollednotetitle */ 
            );
            /**Returns  the integer  <br> License requirements : None */
            public: int Integer
            (
            );
            /**Sets  the integer  <br> License requirements : drafting ("DRAFTING") */
            public: void SetInteger
            (
                int integer /** integer */ 
            );
            /**Returns  the real value  <br> License requirements : None */
            public: double Real
            (
            );
            /**Sets  the real value  <br> License requirements : drafting ("DRAFTING") */
            public: void SetReal
            (
                double real /** real */ 
            );
            /**Returns  the smash symbol  <br> License requirements : None */
            public: bool SmashSymbol
            (
            );
            /**Sets  the smash symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmashSymbol
            (
                bool smashSymbol /** smashsymbol */ 
            );
            /**Returns  the style builder  <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the enum annot pref. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : None */
            public: NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences AnnotationPreference
            (
            );
            /**Sets  the enum annot pref. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnnotationPreference
            (
                NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences enumAnnotPref /** enumannotpref */ 
            );
            /**Returns  the enum geom pref. This is used while creating the object
                    and it is non-editable property  <br> License requirements : None */
            public: NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences GeometryPreference
            (
            );
            /**Sets  the enum geom pref. This is used while creating the object
                    and it is non-editable property  <br> License requirements : drafting ("DRAFTING") */
            public: void SetGeometryPreference
            (
                NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences enumGeomPref /** enumgeompref */ 
            );
            /** selects custom symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void SelectSymbol
            (
                const NXString & name /** Name of symbol */
            );
            /** selects part custom symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void SelectPartSymbol
            (
                const NXString & name /** Name of symbol */,
                const NXString & path /** PartSymbol full Path */
            );
            /** Setting the selected note at builder side  <br> License requirements : drafting ("DRAFTING") */
            public: void SelectText
            (
                int index /** index of selected text */
            );
            /** the custom symbol  @return  The custom symbol  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::BaseCustomSymbol * GetSymbol
            (
            );
            /**Returns  the texts  <br> License requirements : None */
            public: NXOpen::Annotations::MasterSymbolListItemBuilderList * Texts
            (
            );
            /**Returns  the master symbol path. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : None */
            public: NXString MasterSymbolPath
            (
            );
            /**Sets  the master symbol path. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMasterSymbolPath
            (
                const NXString & masterSymbolPath /** mastersymbolpath */ 
            );
            /**Returns  the master symbol Name. This is used while creating the object
                    and it is non-editable property  <br> License requirements : None */
            public: NXString MasterSymbolName
            (
            );
            /**Sets  the master symbol Name. This is used while creating the object
                    and it is non-editable property  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMasterSymbolName
            (
                const NXString & masterSymbolName /** mastersymbolname */ 
            );
            /**Returns  the is part symbol. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : None */
            public: bool IsPartSymbol
            (
            );
            /**Sets  the is part symbol. This is used while creating the object 
                    and it is non-editable property  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartSymbol
            (
                bool isPartSymbol /** ispartsymbol */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
