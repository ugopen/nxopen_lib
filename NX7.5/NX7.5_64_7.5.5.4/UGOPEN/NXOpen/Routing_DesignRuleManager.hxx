#ifndef NXOpen_ROUTING_DESIGNRULEMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleManager;
    }
    class Session;
    class NXObject;
    namespace Routing
    {
        class DesignRule;
    }
    namespace Routing
    {
        class DesignRuleManagerImpl;
        /** Represents @link Routing::DesignRuleManager Routing::DesignRuleManager@endlink  object  <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT  DesignRuleManager
        {
            private: DesignRuleManagerImpl * m_designrulemanager_impl;
            private: NXOpen::Session* m_owner;
            /** Constructor */
            public: explicit DesignRuleManager(NXOpen::Session *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~DesignRuleManager();
            /** Does nothing, do not use this method. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void LogConcurrent
            (
            );
            /** Add an object to be checked during the next concurrent design rule check  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void LogConcurrent
            (
                NXOpen::NXObject * objectToLog /** object to log */ 
            );
            /** Does nothing, do not use this method. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void UnlogConcurrent
            (
            );
            /** Remove an object from the list of objects to be checked at the next design rule check.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UnlogConcurrent
            (
                NXOpen::NXObject * objectToUnlog /** object to unlog */ 
            );
            /**  Does nothing, do not use this method. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void GetConcurrent
            (
                std::vector<NXOpen::Routing::DesignRule *> & objects /** objects */ 
            );
            /**  Inquire the list of objects to be checked at the next concurrent check.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetConcurrentObjects
            (
                std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /** Expand the current list of objects on the concurrent check list to include 'dependents'  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExpandConcurrent
            (
            );
            /** Remove all objects from the concurrent check list  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ClearConcurrent
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
