#ifndef NXOpen_IMPORTMANAGER_HXX_INCLUDED
#define NXOpen_IMPORTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ImportManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ImportManager;
    class Part;
    class Importer;
    class ImportManagerImpl;
    /** Used to create importer objects.
     <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
    class NXOPENCPPEXPORT  ImportManager
    {
        private: ImportManagerImpl * m_importmanager_impl;
        private: NXOpen::Part* m_owner;
        /** Constructor */
        public: explicit ImportManager(NXOpen::Part *owner);
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ImportManager();
        /** Creates a part importer object.  This method works only for the work part.
             @return  The part importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreatePartImporter
        (
        );
        /** Creates a Parasolid importer object.  This method works only for the work part.
             @return  The Parasolid importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateParasolidImporter
        (
        );
        /** Creates a CGM importer object.  This method works only for the work part.
             @return  The CGM importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateCgmImporter
        (
        );
        /** Creates a Solid Edge importer object.  This method works only for the work part.
             @return  The Solid Edge importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateSolidEdgeImporter
        (
        );
        /** Creates a VRML importer object.  This method works only for the work part.
             @return  The VRML importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateVrmlImporter
        (
        );
        /** Creates an STL importer object.  This method works only for the work part.
             @return  The STL importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateStlImporter
        (
        );
        /** Creates a Steinbichler importer object.  This method works only for the work part.
             @return  The Steinbichler importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateSteinbichlerImporter
        (
        );
        /** Creates an NX-2D importer object.  This method works only for the work part.
             @return  The NX-2D importer.  <br> License requirements : None */
        public: NXOpen::Importer * CreateNx2dImporter
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
