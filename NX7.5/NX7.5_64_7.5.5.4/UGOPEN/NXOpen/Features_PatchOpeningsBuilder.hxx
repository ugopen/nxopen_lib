#ifndef NXOpen_FEATURES_PATCHOPENINGSBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PATCHOPENINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PatchOpeningsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_PatchOpeningsBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class PatchOpeningsBuilder;
    }
    namespace Die
    {
        class DieLimitsBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObject;
    class Point;
    class ScCollector;
    namespace Features
    {
        class _PatchOpeningsBuilderBuilder;
        class PatchOpeningsBuilderImpl;
        /**
            Represents a builder for a Patch Openings feature.
            This allows creation and editing of a Patch Openings feature.    
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreatePatchOpeningsBuilder Features::FeatureCollection::CreatePatchOpeningsBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  PatchOpeningsBuilder : public Features::FeatureBuilder
        {
            /** The method used to patch the opening */
            public: enum Types
            {
                TypesQuilted/** Patch with quilted patchwork of faces */,
                TypesNSided/** Patch with N-sided surface area method */,
                TypesMesh/** Patch with through curve mesh */,
                TypesByDeletingEdges/** Patch by deleting edges and growing faces */,
                TypesExtension/** Tangent edge extension method */,
                TypesNotch/** Notch fill method */,
                TypesJoggle/** Joggle fill method */,
                TypesMoldWizard/** Patch with Mold wizard edge patch method */,
                TypesBySuppression/** Patch by suppressing features */
            };

            /** Indicates what to output */
            public: enum OutputTypes
            {
                OutputTypesSingleFeature/** Output one feature containing all patch sheet bodies */,
                OutputTypesMultipleFeatures/** Output one feature for each patch sheet body */,
                OutputTypesSew/** Sew patch sheet bodies into target sheet body */
            };

            private: PatchOpeningsBuilderImpl * m_patchopeningsbuilder_impl;
            private: friend class  _PatchOpeningsBuilderBuilder;
            protected: PatchOpeningsBuilder();
            public: ~PatchOpeningsBuilder();
            /**Returns  the method used to patch the opening  <br> License requirements : None */
            public: NXOpen::Features::PatchOpeningsBuilder::Types Type
            (
            );
            /**Sets  the method used to patch the opening  <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Features::PatchOpeningsBuilder::Types type /** type */ 
            );
            /**Returns  the faces to form patching boundary.  These faces will be sewn into a sheet body internally
                        to determine the internal openings to fill  <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the edges defining the openings to patch.  Must define closed loops  <br> License requirements : None */
            public: NXOpen::ScCollector * Openings
            (
            );
            /**Returns  the curves used to divide the opening.  <br> License requirements : None */
            public: NXOpen::ScCollector * DividingCurves
            (
            );
            /**Returns  the extension distance, used only when type is @link Features::PatchOpeningsBuilder::TypesExtension Features::PatchOpeningsBuilder::TypesExtension@endlink   <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the type of output desired - one feature, multiple features, sewn.  <br> License requirements : None */
            public: NXOpen::Features::PatchOpeningsBuilder::OutputTypes Output
            (
            );
            /**Sets  the type of output desired - one feature, multiple features, sewn.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetOutput
            (
                NXOpen::Features::PatchOpeningsBuilder::OutputTypes type /** type */ 
            );
            /**Returns  the distance tolerance.  Used for sewing sheet bodies and joining curves  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance.  Used for sewing sheet bodies and joining curves  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distTol /** disttol */ 
            );
            /**Returns  the limits to control the span of the patch  <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * Limits
            (
            );
            /**Returns  the shelf length, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Expression * ShelfLength
            (
            );
            /**Returns  the shelf radius, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Expression * ShelfRadius
            (
            );
            /**Returns  the cutout length, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Expression * CutoutLength
            (
            );
            /**Returns  the cutout radius, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Expression * CutoutRadius
            (
            );
            /**Returns  the first shelf point, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Point * ShelfPoint1
            (
            );
            /**Sets  the first shelf point, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShelfPoint1
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the second shelf point, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : None */
            public: NXOpen::Point * ShelfPoint2
            (
            );
            /**Sets  the second shelf point, used only when type is JA_PATCH_OPENINGS_BUILDER_types_joggle  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetShelfPoint2
            (
                NXOpen::Point * point /** point */ 
            );
            /** Find all valid openings based upon input faces.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void FindOpenings
            (
                bool filterNoise /** if true, do not allow small openings and exterior edges */
            );
            /** Create a closed curve (path) from the currently selected opening.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void CreatePathFromOpening
            (
                std::vector<NXOpen::NXObject *> & objectArray /** The opening objects that were used to create the path. */,
                NXOpen::NXObject ** path /** The curve created by combining object_array items. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
