#ifndef NXOpen_DIE_DIELOCATIONBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIELOCATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieLocationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLocationBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class DieLocationBuilder;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Point;
    class SelectNXObject;
    namespace Die
    {
        class _DieLocationBuilderBuilder;
        class DieLocationBuilderImpl;
        /**
            Represents a @link Die::DieLocationBuilder Die::DieLocationBuilder@endlink . The Die 
            Location Item is a helper and identifies a single item in the
            @link Die::DieLocationBuilder Die::DieLocationBuilder@endlink . The item allows the user to
            fully specify a single location point for items such as hole center
            or clamping slot location. Note that a non-point is selected,
            such as a plane or coordinate system, the control point of the object
            will be used for the location.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateDieLocation Die::DieCollection::CreateDieLocation@endlink  <br> */
        class NXOPENCPPEXPORT  DieLocationBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the options available for defining the location */
            public: enum LocationType
            {
                LocationTypeSelectLocation/** Select the point to be used. */,
                LocationTypeNewPoint/** Define the point to be used. */,
                LocationTypeNewCoordinateSystem/** Define a coordinate system to specify the location. */,
                LocationTypeNewVector/** Define a vector to specify the location. */,
                LocationTypeNewPlane/** Define a plane to specify the location. */
            };

            private: DieLocationBuilderImpl * m_dielocationbuilder_impl;
            private: friend class  _DieLocationBuilderBuilder;
            protected: DieLocationBuilder();
            public: ~DieLocationBuilder();
            /**Returns  the type of source that defined the location  <br> License requirements : None */
            public: NXOpen::Die::DieLocationBuilder::LocationType InputType
            (
            );
            /**Sets  the type of source that defined the location  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetInputType
            (
                NXOpen::Die::DieLocationBuilder::LocationType inputType /** inputtype */ 
            );
            /**Returns  the selected location  <br> License requirements : None */
            public: NXOpen::SelectNXObject * Location
            (
            );
            /**Returns  the specified point  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the specified point  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the specified vector  <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the specified vector  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the specified plane  <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the specified plane  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the coordinate system origin  <br> License requirements : None */
            public: NXOpen::Point3d CoordinateSystemOrigin
            (
            );
            /**Sets  the coordinate system origin  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemOrigin
            (
                const NXOpen::Point3d & coordinateSystemOrigin /** coordinatesystemorigin */ 
            );
            /**Returns  the coordinate system matrix  <br> License requirements : None */
            public: NXOpen::Matrix3x3 CoordinateSystemMatrix
            (
            );
            /**Sets  the coordinate system matrix  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemMatrix
            (
                const NXOpen::Matrix3x3 & coordinateSystemMatrix /** coordinatesystemmatrix */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
