#ifndef NXOpen_FEATURES_ADMMOVEFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_ADMMOVEFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AdmMoveFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_AdmMoveFaceBuilder.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceChangeOverflowBehavior.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class AdmMoveFaceBuilder;
    }
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceChangeOverflowBehavior;
    }
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    namespace Features
    {
        class _AdmMoveFaceBuilderBuilder;
        class AdmMoveFaceBuilderImpl;
        /**
            Represents a @link Features::AdmMoveFace Features::AdmMoveFace@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateAdmMoveFaceBuilder Features::FeatureCollection::CreateAdmMoveFaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FaceToMove.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.ThicknessChainEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMove.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaEnum </td> <td> 
         
        ReferenceWcsWorkPart </td> </tr> 

        <tr><td> 
         
        Motion.DeltaXc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaYc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaZc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.Option </td> <td> 
         
        DistanceAngle </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  AdmMoveFaceBuilder : public Features::FeatureBuilder
        {
            private: AdmMoveFaceBuilderImpl * m_admmovefacebuilder_impl;
            private: friend class  _AdmMoveFaceBuilderBuilder;
            protected: AdmMoveFaceBuilder();
            public: ~AdmMoveFaceBuilder();
            /**Returns  the face to move. Please refer @link Features::FaceRecognitionBuilder Features::FaceRecognitionBuilder@endlink  for details.  <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * FaceToMove
            (
            );
            /**Returns  the motion. The motion block provides a suite of linear and angular transform methods. Please refer @link GeometricUtilities::ModlMotion GeometricUtilities::ModlMotion@endlink  for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion * Motion
            (
            );
            /**Returns  the face change overflow behavior. Please refer @link GeometricUtilities::FaceChangeOverflowBehavior GeometricUtilities::FaceChangeOverflowBehavior@endlink  for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceChangeOverflowBehavior * FaceChangeOverflowBehavior
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
