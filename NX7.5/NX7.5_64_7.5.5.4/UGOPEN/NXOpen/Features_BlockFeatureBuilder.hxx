#ifndef NXOpen_FEATURES_BLOCKFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_BLOCKFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BlockFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    class Body;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    class Point;
    namespace Features
    {
        class _BlockFeatureBuilderBuilder;
        class BlockFeatureBuilderImpl;
        /**
        Represents a block feature builder.
         <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateBlockFeatureBuilder Features::FeatureCollection::CreateBlockFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  BlockFeatureBuilder : public Features::FeatureBuilder
        {
            /** Represents the block types */
            public: enum Types
            {
                TypesOriginAndEdgeLengths/** Represents the block created by providing Origin and Edge Lengths */,
                TypesTwoPointsAndHeight/** Represents the block created by providing Two Points and Height */,
                TypesDiagonalPoints/** Represents the block created by providing Diagonal Points */
            };

            private: BlockFeatureBuilderImpl * m_blockfeaturebuilder_impl;
            private: friend class  _BlockFeatureBuilderBuilder;
            protected: BlockFeatureBuilder();
            public: ~BlockFeatureBuilder();
            /**Returns  the expression representing the block length.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the expression representing the block width.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Width
            (
            );
            /**Returns  the expression representing the block height.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the point coordinates representing the block origin.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Point3d Origin
            (
            );
            /** Gets the orientation (x and y axes) of the block.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetOrientation
            (
                NXOpen::Vector3d* xAxis /** x axis */ ,
                NXOpen::Vector3d* yAxis /** y axis */ 
            );
            /**Returns  the boolean operation for the block  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature::BooleanType BooleanType
            (
            );
            /**Returns  the boolean operation for the block  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Body * Target
            (
            );
            /** The expression representing the block length.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLength
            (
                const NXString & length /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The expression representing the block width.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetWidth
            (
                const NXString & width /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The expression representing the block height.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHeight
            (
                const NXString & height /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the point coordinates representing the block origin.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /** Sets the orientation for the block  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOrientation
            (
                const NXOpen::Vector3d & xAxis /** x axis */ ,
                const NXOpen::Vector3d & yAxis /** y axis */ 
            );
            /**Sets  the boolean operation for the block  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBooleanType
            (
                NXOpen::Features::Feature::BooleanType booleanType /** boolean type */ 
            );
            /**Sets  the boolean operation for the block  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTarget
            (
                NXOpen::Body * target /** target */ 
            );
            /** Create a block by setting the origin and the block length, width, and height. The origin of the block
                    is specified by the input origin point in absolute coordinates. The orientation of the block is along 
                    the x, y, and z axes of the WCS.  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetOriginAndLengths
            (
                const NXOpen::Point3d & originPoint /** Block origin point */,
                const NXString & lengthExpression /** Block length in the WCS x direction   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & widthExpression /** Block width in the WCS y direction   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & heightExpression /** Block height in the WCS z direction   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a block by setting the block height and two diagonal points in the WCS x-y plane. The orientation
                    of the block is along the x, y, and z axes of the WCS.  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTwoPointsAndHeight
            (
                const NXOpen::Point3d & originPoint /** Block origin point */,
                const NXOpen::Point3d & cornerPoint /** Block 2d corner point, diagonal in WCS x-y plane from the block origin point. */,
                const NXString & heightExpression /** Block height in the WCS z direction   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a block by setting two diagonal points, one at the block origin and one at the opposite corner point.
                    The orientation of the block is along the x, y, and z axes of the WCS.  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTwoDiagonalPoints
            (
                const NXOpen::Point3d & originPoint /** Block origin point */,
                const NXOpen::Point3d & cornerPoint /** Block corner point, diagonal from the block origin point */
            );
            /** Set the boolean operation for creating the block and the boolean operation target body  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetBooleanOperationAndTarget
            (
                NXOpen::Features::Feature::BooleanType booleanOperation /** Type of boolean operation. */,
                NXOpen::Body * targetBody /** Target body for boolean operation. 
                                                                    Set to a null reference (Nothing in Visual Basic) 
                                                                    for a boolean create operation. */
            );
            /**Returns  the type represented by @link  Features::BlockFeatureBuilder::Types  Features::BlockFeatureBuilder::Types@endlink   <br> License requirements : None */
            public: NXOpen::Features::BlockFeatureBuilder::Types Type
            (
            );
            /**Sets  the type represented by @link  Features::BlockFeatureBuilder::Types  Features::BlockFeatureBuilder::Types@endlink   <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Features::BlockFeatureBuilder::Types type /** type */ 
            );
            /**Returns  the block origin point  <br> License requirements : None */
            public: NXOpen::Point * OriginPoint
            (
            );
            /**Sets  the block origin point  <br> License requirements : None */
            public: void SetOriginPoint
            (
                NXOpen::Point * blockOriginPoint /** blockoriginpoint */ 
            );
            /**Returns  the point which defines values along the x, y axes of the WCS from origin point, when type is two point and height.
                        the point which defines values along the x, y and z axes of the WCS from origin point, when type is diagonal points.
                     <br> License requirements : None */
            public: NXOpen::Point * PointFromOrigin
            (
            );
            /**Sets  the point which defines values along the x, y axes of the WCS from origin point, when type is two point and height.
                        the point which defines values along the x, y and z axes of the WCS from origin point, when type is diagonal points.
                     <br> License requirements : None */
            public: void SetPointFromOrigin
            (
                NXOpen::Point * blockPointFromOrigin /** blockpointfromorigin */ 
            );
            /**Returns  the boolean option  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOption
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
