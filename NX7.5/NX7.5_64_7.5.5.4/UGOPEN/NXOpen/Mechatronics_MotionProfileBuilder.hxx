#ifndef NXOpen_MECHATRONICS_MOTIONPROFILEBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_MOTIONPROFILEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_MotionProfileBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_MotionProfileBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Mechatronics
    {
        class MotionProfileBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class _MotionProfileBuilderBuilder;
        class MotionProfileBuilderImpl;
        /** Represents a @link Mechatronics::MotionProfile Mechatronics::MotionProfile@endlink  builder.  <br> To create a new instance of this class, use @link Mechatronics::MotionProfileCollection::CreateMotionProfileBuilder Mechatronics::MotionProfileCollection::CreateMotionProfileBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  MotionProfileBuilder : public Builder
        {
            /** the Value Unit types. */
            public: enum ValueUnit
            {
                ValueUnitLinear/** Linear */,
                ValueUnitRotary/** Rotary */,
                ValueUnitTime/** Time   */
            };

            private: MotionProfileBuilderImpl * m_motionprofilebuilder_impl;
            private: friend class  _MotionProfileBuilderBuilder;
            protected: MotionProfileBuilder();
            public: ~MotionProfileBuilder();
            /**Returns  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString Name
            (
            );
            /**Sets  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the masterMin.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * MasterMinimum
            (
            );
            /**Returns  the masterMax.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * MasterMaximum
            (
            );
            /**Returns  the masterUnit.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::MotionProfileBuilder::ValueUnit MasterUnit
            (
            );
            /**Sets  the masterUnit.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetMasterUnit
            (
                NXOpen::Mechatronics::MotionProfileBuilder::ValueUnit masterUnit /** masterunit */ 
            );
            /**Returns  the slaveMin.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * SlaveMinimum
            (
            );
            /**Returns  the slaveMax.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * SlaveMaximum
            (
            );
            /**Returns  the slaveUnit.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::MotionProfileBuilder::ValueUnit SlaveUnit
            (
            );
            /**Sets  the slaveUnit.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetSlaveUnit
            (
                NXOpen::Mechatronics::MotionProfileBuilder::ValueUnit slaveUnit /** slaveunit */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
