#ifndef NXOpen_PHYSICALMATERIAL_HXX_INCLUDED
#define NXOpen_PHYSICALMATERIAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysicalMaterial.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Material.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PhysicalMaterial;
    namespace CAE
    {
        class PropertyTable;
    }
    class Material;
    class NXObject;
    class _PhysicalMaterialBuilder;
    class PhysicalMaterialImpl;
    /** Represents Physical Material */
    class NXOPENCPPEXPORT  PhysicalMaterial : public Material
    {
        /** The different categories of materials. The material list generated will be filtered based on the category */
        public: enum Category
        {
            CategoryMetals/** Metals                              */,
            CategoryPlastics/** Plastics                            */,
            CategoryPolymers/** Polymers                            */,
            CategoryCeramics/** Ceramics                            */,
            CategoryOther/** Other (Not metal, plastic, etc.)    */
        };

        /** The different types of materials. The material list generated will be filtered based on
                the material type chosen */
        public: enum Type
        {
            TypeIsotropic/** Isotropic                           */,
            TypeOrthotropic/** Orthotropic                         */,
            TypeAnisotropic/** Anisotropic                         */,
            TypeFluid = 4/** Fluid                               */,
            TypeGeneralHyperelastic/** Hyperelastic - General              */,
            TypeMooneyrivlin/** Mooney Rivlin                       */,
            TypeMooneyrivlintestdata/** Mooney Rivlin - test data option    */,
            TypePolynomial/** Polynomial                          */,
            TypeReducedpolynomial/** Reduced Polynomial                  */,
            TypeOgden/** Ogden                               */,
            TypeOgdentestdata/** Ogden - test data option            */,
            TypeFoam/** Foam                                */,
            TypeFoamtestdata/** Foam - test data option             */,
            TypeBlatz/** Blatz-Ko                            */,
            TypeArrudaboyce/** Arruda-Boyce                        */,
            TypeArrudaboycetestdata/** Arruda-Boyce - test data option     */,
            TypeNeohooke/** Neo Hooke                           */,
            TypeNeohooketestdata/** Neo Hooke - test data option        */,
            TypeMarlow/** Marlow                              */,
            TypeVanderwaals/** Van Der Waals                       */,
            TypeYeoh/** Yeoh                                */,
            TypeYeohtestdata/** Yeoh - test data option             */,
            TypeGent/** Gent                                */,
            TypeGasket/** Gasket                              */,
            TypeGasketbehavior/** Gasket Behavior                     */,
            TypeShapememoryalloy/** Shape Memory Alloy                  */,
            TypeSussmanbathe/** Sussman-Bathe hyperelastic material */
        };

        private: PhysicalMaterialImpl * m_physicalmaterial_impl;
        private: friend class  _PhysicalMaterialBuilder;
        protected: PhysicalMaterial();
        public: ~PhysicalMaterial();
        /** Returns the material type
             @return  the type for the material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial::Type GetMaterialType
        (
        );
        /** Returns the material id
             @return  the id for the material  <br> License requirements : None */
        public: int GetId
        (
        );
        /** Sets the material id
             <br> License requirements : None */
        public: void SetId
        (
            int materialId /** the id for the material */
        );
        /** Returns the material category
             @return  the category for the material  <br> License requirements : None */
        public: NXString GetCategory
        (
        );
        /** Sets the material category
             <br> License requirements : None */
        public: void SetCategory
        (
            const NXString & materialCategory /** the category for the material   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the material description
             @return  the description for the material  <br> License requirements : None */
        public: NXString GetDescription
        (
        );
        /** Sets the material description
             <br> License requirements : None */
        public: void SetDescription
        (
            const NXString & materialDescription /** the description for the material */
        );
        /** Returns true if the material is locally defined (not a library/Teamcenter material) 
             @return  true if it is a locally defined material and false if it is a loaded library material or Teamcenter item revision  <br> License requirements : None */
        public: bool IsNonlibraryMaterial
        (
        );
        /** Returns true if the material is loaded from a library (not Teamcenter)
             @return  true if it a loaded library material and false if it is a local material or  a Teamcenter item revision  <br> License requirements : None */
        public: bool IsLoadedLibraryMaterial
        (
        );
        /** Returns true if the material is loaded from Teamcenter 
             @return  true if it a loaded Teamcenter material and false if it is a local material or a loaded library material  <br> License requirements : None */
        public: bool IsLoadedTeamcenterMaterialItem
        (
        );
        /** Returns the library name if the material was loaded from a library 
             @return  the name of the library or NULL for nonlibrary materials    <br> License requirements : None */
        public: NXString GetLibraryName
        (
        );
        /** Returns the Teamcenter item if the material was loaded from Teamcenter
             @return  the Teamcenter item or NULL for non-Teamcenter materials   <br> License requirements : None */
        public: NXString GetTeamcenterMaterialItem
        (
        );
        /** Returns the material version 
             @return  the material version or NULL for non-versioned materials  <br> License requirements : None */
        public: NXString GetVersion
        (
        );
        /** Assigns the material to solid bodies
             <br> License requirements : None */
        public: void AssignObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** objects to assign this material to */
        );
        /** Assigns the material to all solid bodies
             <br> License requirements : None */
        public: void AssignToAllBodies
        (
        );
        /** Assigns the material to all solid bodies without a material already assigned
             <br> License requirements : None */
        public: void AssignToBodiesWithoutMaterials
        (
        );
        /** Assigns the material to all solid bodies not using the preferred material
             <br> License requirements : None */
        public: void AssignToBodiesNotUsingPreferredMaterial
        (
        );
        /** Removes the material assignment from all the objects that has it currently assigned
             <br> License requirements : None */
        public: void UnassignAllObjects
        (
        );
        /** Finds the objects using this material
             <br> License requirements : None */
        public: void GetUsage
        (
            std::vector<NXOpen::NXObject *> & objects /** the objects using the material           */
        );
        /** Creates new (copied) material with same properties as the original material.  The name of the new (copied) material will be unique and based on the name of the original material.
             @return  the new material copied from this material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * Copy
        (
            NXOpen::NXObject * partObject /** object in part where to copy material to */
        );
        /** Copies a library material to a part.  The copied (local) material, unlike a loaded library, material, can be modified.
             @return  the new material copied from this material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyLibMatlToPart
        (
            NXOpen::NXObject * partObject /** object in part where to copy material to */
        );
        /** Deletes a material from the part.
             <br> License requirements : None */
        public: void Delete
        (
        );
        /** Re-synchronizes a loaded library material to match its latest library definition.
             <br> License requirements : None */
        public: void ResyncWithLibraryDefinition
        (
        );
        /** Displays the property values for the material in the information window. 
             <br> License requirements : None */
        public: void InfoMaterial
        (
        );
        /** Writes the property values for the material to a file. 
             <br> License requirements : None */
        public: void InfoMaterialToFile
        (
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the property table that contains the properties for this material.
             @return   <br> License requirements : None */
        public: NXOpen::CAE::PropertyTable * GetPropTable
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
