#ifndef NXOpen_TOOLING_EDGEPATCHBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_EDGEPATCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_EdgePatchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_EdgePatchBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class EdgePatchBuilder;
    }
    class Body;
    class Builder;
    class Face;
    class NXColor;
    class NXObject;
    class ScCollector;
    class SelectBody;
    namespace Tooling
    {
        class _EdgePatchBuilderBuilder;
        class EdgePatchBuilderImpl;
        /** Represents a builder to be used to create edge patch surfaces.  <br> To create a new instance of this class, use @link Tooling::EdgePatchCollection::CreateBuilder Tooling::EdgePatchCollection::CreateBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        PatchSurface </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SelType </td> <td> 
         
        Face </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  EdgePatchBuilder : public Builder
        {
            /** Settings of the selection types. */
            public: enum SelectTypes
            {
                SelectTypesFace/** Face types */,
                SelectTypesBody/** Body types */,
                SelectTypesTraverse/** Traverse types */
            };

            /** Settings of the patch status types. */
            public: enum PatchStatus
            {
                PatchStatusNoLoopExisted/** No loop existed in list */,
                PatchStatusOneLoopExisted/** One loop existed in list */,
                PatchStatusMultiLoopsExisted/** More than one loops existed in list */,
                PatchStatusSomeLoopsExisted/** Some loops existed in list */,
                PatchStatusLoopNotPatched/** No loop is patched */,
                PatchStatusPatchedAndSomeSuppressed/** Some patched bodies are suppressed */,
                PatchStatusPatchedAndAllSuppressed/** All patched bodies are suppressed */,
                PatchStatusPatchedAndNoSuppressed/** No patched body is suppressed */
            };

            private: EdgePatchBuilderImpl * m_edgepatchbuilder_impl;
            private: friend class  _EdgePatchBuilderBuilder;
            protected: EdgePatchBuilder();
            public: ~EdgePatchBuilder();
            /**Returns  the patch type of the edge patch creation.  <br> License requirements : None */
            public: NXOpen::Tooling::EdgePatchBuilder::SelectTypes SelType
            (
            );
            /**Sets  the patch type of the edge patch creation.  <br> License requirements : None */
            public: void SetSelType
            (
                NXOpen::Tooling::EdgePatchBuilder::SelectTypes selType /** seltype */ 
            );
            /**Returns  the face to use to search for loops.  <br> License requirements : None */
            public: NXOpen::ScCollector * Face
            (
            );
            /**Returns  the body to use to search for loops.  <br> License requirements : None */
            public: NXOpen::SelectBody * Body
            (
            );
            /**Returns  the loops to patch.  <br> License requirements : None */
            public: NXOpen::ScCollector * Loops
            (
            );
            /**Returns  the reference face to use to create edge patch.  <br> License requirements : None */
            public: NXOpen::ScCollector * ReferenceFace
            (
            );
            /** Reverse reference face direction.  <br> License requirements : None */
            public: void DirectionReverse
            (
            );
            /**Returns  the indication to create patch surface bodies in core/cavity.  <br> License requirements : None */
            public: bool PatchSurface
            (
            );
            /**Sets  the indication to create patch surface bodies in core/cavity.  <br> License requirements : None */
            public: void SetPatchSurface
            (
                bool patchSurface /** patchsurface */ 
            );
            /**Returns  the flag indicating if creating copies for patch surface is allowed.  <br> License requirements : None */
            public: bool AllowPatch
            (
            );
            /**Sets  the flag indicating if creating copies for patch surface is allowed.  <br> License requirements : None */
            public: void SetAllowPatch
            (
                bool patch /** patch */ 
            );
            /**Returns  the patch body color.  <br> License requirements : None */
            public: NXOpen::NXColor * BodyColor
            (
            );
            /**Sets  the patch body color.  <br> License requirements : None */
            public: void SetBodyColor
            (
                NXOpen::NXColor * patchColor /**the color index*/
            );
            /** Returns the body color. 
             @deprecated Deprecated in NX7.5.5 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.5") void GetBodyColor
            (
                double* redValue /** red value between 0 and 1 */,
                double* greenValue /** green value between 0 and 1 */,
                double* blueValue /** blue value between 0 and 1 */
            );
            /** Sets the body color. 
             @deprecated Deprecated in NX7.5.5 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.5") void SetBodyColor
            (
                double redValue /** red value between 0 and 1 */,
                double greenValue /** green value between 0 and 1 */,
                double blueValue /** blue value between 0 and 1 */
            );
            /** Find holes on the input faces.  @return  the loop status of JA_EDGE_PATCH_BUILDER_PatchStatus type <br> License requirements : None */
            public: NXOpen::Tooling::EdgePatchBuilder::PatchStatus FindFaceHoles
            (
                NXOpen::Face * referFaces /** the faces to find holes*/
            );
            /** Find holes on the input body.  <br> License requirements : None */
            public: void FindBodyHoles
            (
                NXOpen::Body * body /** the body to find holes on which*/
            );
            /** Get hole information of input edges.  @return  the edges or curves patch status  <br> License requirements : None */
            public: NXOpen::Tooling::EdgePatchBuilder::PatchStatus FindEdgesPatch
            (
                const std::vector<NXOpen::NXObject *> & edges /** the edges or curves to find holes information*/
            );
            /** Add or remove reference faces.  <br> License requirements : None */
            public: void EditReferenceFace
            (
                int index /** the index of list loop */,
                const std::vector<NXOpen::Face *> & addFaces /** The faces to add to reference faces */,
                const std::vector<NXOpen::Face *> & removeFaces /** The faces to remove from reference faces */
            );
            /** Delete one loop list of the index.  <br> License requirements : None */
            public: void DeleteOneLoopList
            (
                int index /** the index value */
            );
            /** Set the selected items index value.  <br> License requirements : None */
            public: void SetSelectedItems
            (
                const std::vector<int> & selectedItems /** the selected index values */
            );
            /** Set the tolerance value.  <br> License requirements : None */
            public: void SetTolerance
            (
                double tolerance /** the tolerance value */
            );
            /** Set the giving failed message value.  <br> License requirements : None */
            public: void SetGiveFailedMessage
            (
                int giveMessage /** the giving failed message value */
            );
            /** Destroy the builder memory.  <br> License requirements : None */
            public: void DestroyMemory
            (
            );
            /** Clear the index list.  <br> License requirements : None */
            public: void ClearList
            (
                int type /** indicating which index list to clear */
            );
            /** Set deleted list value.  <br> License requirements : None */
            public: void SetDeletedList
            (
                const std::vector<int> & items /** the deleted index values */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
