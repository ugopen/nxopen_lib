#ifndef NXOpen_FILENEW_HXX_INCLUDED
#define NXOpen_FILENEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     FileNew.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/FileNew.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class FileNew;
    class Builder;
    /** 
        The application type of the new file being created through a template
        */
    enum FileNewApplication
    {
        FileNewApplicationDrafting/** Specifies a drafting file new template */,
        FileNewApplicationModeling/** Specifies a modeling file new template */,
        FileNewApplicationStudio/** Specifies a shape studio file new template */,
        FileNewApplicationAssemblies/** Specifies an assemblies file new template */,
        FileNewApplicationGateway/** Specifies a file new template that leaves the new part in Gateway */,
        FileNewApplicationRoutingElectrical/** Specifies an electrical routing file new template */,
        FileNewApplicationRoutingMechanical/** Specifies a mechanical routing file new template */,
        FileNewApplicationRoutingLogical/** Specifies a logical routing file new template */,
        FileNewApplicationNxsheetmetal/** Specifies a NX sheet metal file new template */,
        FileNewApplicationSheetTemplate/** Specifies a drawing sheet template for Insert Sheet dialog */,
        FileNewApplicationCaeFem/** Specifies a cae fem file new template */,
        FileNewApplicationCaeSim/** Specifies a cae sim file new template */,
        FileNewApplicationAeroSheetmetal/** Specifies an Aerospace sheet metal template */,
        FileNewApplicationFlexPcdSheetmetal/** Specifies a Flex Printed Circuit Design sheet metal template */,
        FileNewApplicationCaeAssyFem/** Specifies a cae assembly fem file new template */,
        FileNewApplicationCam/** Specifies a Manufacturing file new template */,
        FileNewApplicationInspection/** Specifies a CMM Inspection file new template */,
        FileNewApplicationMechatronics/** Specifies a Mechatronics Concept Designer file new template*/,
        FileNewApplicationLast/** Specifies the last application type. New application types should be inserted before this one */
    };

    class _FileNewBuilder;
    class FileNewImpl;
    /**
        Represents a @link FileNew FileNew@endlink 
         <br> This class is not directly created. The creator of the super class does the real work <br> */
    class NXOPENCPPEXPORT  FileNew : public Builder
    {
        private: FileNewImpl * m_filenew_impl;
        private: friend class  _FileNewBuilder;
        protected: FileNew();
        public: ~FileNew();
        /**Returns  the name of the new file being created  <br> License requirements : None */
        public: NXString NewFileName
        (
        );
        /**Sets  the name of the new file being created  <br> License requirements : None */
        public: void SetNewFileName
        (
            const NXString & fileName /** filename */ 
        );
        /**Returns  the name of the template part from which to create the new file  <br> License requirements : None */
        public: NXString TemplateFileName
        (
        );
        /**Sets  the name of the template part from which to create the new file  <br> License requirements : None */
        public: void SetTemplateFileName
        (
            const NXString & templateFileName /** templatefilename */ 
        );
        /**Returns  the name of the master model part to be referenced. May be NULL if 
                    creating a master part
                 <br> License requirements : None */
        public: NXString MasterFileName
        (
        );
        /**Sets  the name of the master model part to be referenced. May be NULL if 
                    creating a master part
                 <br> License requirements : None */
        public: void SetMasterFileName
        (
            const NXString & masterFileName /** masterfilename */ 
        );
        /**Returns  the units for the new file being created  <br> License requirements : None */
        public: NXOpen::Part::Units Units
        (
        );
        /**Sets  the units for the new file being created  <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::Part::Units units /** units */ 
        );
        /**Returns  the application type for the new file being created  <br> License requirements : None */
        public: NXOpen::FileNewApplication Application
        (
        );
        /**Sets  the application type for the new file being created  <br> License requirements : None */
        public: void SetApplication
        (
            NXOpen::FileNewApplication application /** application */ 
        );
        /**Returns  the property that controls if the new file should be created using a blank template  <br> License requirements : None */
        public: bool UseBlankTemplate
        (
        );
        /**Sets  the property that controls if the new file should be created using a blank template  <br> License requirements : None */
        public: void SetUseBlankTemplate
        (
            bool useBlankTemplate /** use blank template */ 
        );
        /**Returns  the property that controls if the new file should be made the displayed part  <br> License requirements : None */
        public: bool MakeDisplayedPart
        (
        );
        /**Sets  the property that controls if the new file should be made the displayed part  <br> License requirements : None */
        public: void SetMakeDisplayedPart
        (
            bool makeDisplayedPart /** make displayed part */ 
        );
        /** Returns the available templates for the session  @return  array of available template names  <br> License requirements : None */
        public: std::vector<NXString> GetAvailableTemplates
        (
        );
        /** Teamcenter projects data  <br> License requirements : None */
        public: void SetProjectsData
        (
            std::vector<NXString> & projectName /** name of the project   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const std::vector<int> & assignmentState /** assignment state */
        );
        /** Returns logical value to indicate whether master to be added as child component  @return  whether master to be added as child component  <br> License requirements : None */
        public: bool GetAddMasterFlag
        (
        );
        /** Sets addMaster flag  <br> License requirements : None */
        public: void SetAddMasterFlag
        (
            bool addMaster /** whether master to be added as child component */
        );
    };
}
#undef EXPORTLIBRARY
#endif
