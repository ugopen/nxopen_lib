#ifndef NXOpen_DIE_FINGERCLEARANCENOTCHBUILDER_HXX_INCLUDED
#define NXOpen_DIE_FINGERCLEARANCENOTCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_FingerClearanceNotchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/Die_DieDirectionBuilder.hxx>
#include <NXOpen/Die_DiePlaneBuilder.hxx>
#include <NXOpen/Die_FingerClearanceNotchBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class FingerClearanceNotchBuilder;
    }
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DieDirectionBuilder;
    }
    namespace Die
    {
        class DiePlaneBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Section;
    class SelectBody;
    class SelectNXObjectList;
    namespace Die
    {
        class _FingerClearanceNotchBuilderBuilder;
        class FingerClearanceNotchBuilderImpl;
        /**
            Represents a builder that is used to create or edit a @link Die::FingerClearanceNotch Die::FingerClearanceNotch@endlink  feature.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateFingerClearanceNotchBuilder Die::DieCollection::CreateFingerClearanceNotchBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Depth.Value </td> <td> 
         
        5 (millimeters part), 0.2 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtrudeWidth.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Width.Value </td> <td> 
         
        5 (millimeters part), 0.2 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  FingerClearanceNotchBuilder : public Features::FeatureBuilder
        {
            /** Specifies what type of base geometry to build the finger clearance notch from. */
            public: enum Types
            {
                TypesSection/** Build from an open section profile. */,
                TypesFace/** Build from either a single face or a set of connected faces. */,
                TypesSheetBody/** Build from either a sheet body or a solid body. */
            };

            private: FingerClearanceNotchBuilderImpl * m_fingerclearancenotchbuilder_impl;
            private: friend class  _FingerClearanceNotchBuilderBuilder;
            protected: FingerClearanceNotchBuilder();
            public: ~FingerClearanceNotchBuilder();
            /**Returns  the target solid the finger clearance notch will be subtracted from.  <br> License requirements : None */
            public: NXOpen::SelectBody * Target
            (
            );
            /**Returns  the open section constructed from curves, edges, or a sketch. Only valid when type is @link Die::FingerClearanceNotchBuilder::TypesSection Die::FingerClearanceNotchBuilder::TypesSection@endlink .  <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the expression containing the value to use to extrude the section. The extrusion direction is specified by the cross product of the base orientation and the clearance direction.  <br> License requirements : None */
            public: NXOpen::Expression * ExtrudeWidth
            (
            );
            /**Returns  the geometry to use as the definition of the notch. A single face or multiple connected faces can be specified, or a single sheet or body may be specified. Only valid when type is @link Die::FingerClearanceNotchBuilder::TypesFace Die::FingerClearanceNotchBuilder::TypesFace@endlink  or @link Die::FingerClearanceNotchBuilder::TypesSheetBody Die::FingerClearanceNotchBuilder::TypesSheetBody@endlink .  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the value to apply, for the purpose of reversing, to the derived clearance direction if a face or sheet body is specified. If TRUE, then the derived direction will be flipped.  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the value to apply, for the purpose of reversing, to the derived clearance direction if a face or sheet body is specified. If TRUE, then the derived direction will be flipped.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the plane defining the base of the target solid. Used to orient the extrude and clearance directions.  <br> License requirements : None */
            public: NXOpen::Die::DiePlaneBuilder * BaseOrientation
            (
            );
            /**Returns  the direction (pointing away from the solid) in which to clear material from the target solid.  <br> License requirements : None */
            public: NXOpen::Die::DieDirectionBuilder * ClearanceDirection
            (
            );
            /**Returns  the expression containing the value for the clearance to provide on either side of the notch.  <br> License requirements : None */
            public: NXOpen::Expression * Width
            (
            );
            /**Returns  the expression containing the value for the clearance to provide into the target solid.  <br> License requirements : None */
            public: NXOpen::Expression * Depth
            (
            );
            /**Returns  the attribute title, value and face color to apply to the notch faces.  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * Attributes
            (
            );
            /**Returns  the distance tolerance.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance.  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the indicator specifying the type of input data that defines how to build the notch.  <br> License requirements : None */
            public: NXOpen::Die::FingerClearanceNotchBuilder::Types Type
            (
            );
            /**Sets  the indicator specifying the type of input data that defines how to build the notch.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetType
            (
                NXOpen::Die::FingerClearanceNotchBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
