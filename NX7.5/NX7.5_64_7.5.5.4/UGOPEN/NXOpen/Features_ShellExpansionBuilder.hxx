#ifndef NXOpen_FEATURES_SHELLEXPANSIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHELLEXPANSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShellExpansionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ShellExpansionBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ShellExpansionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class Section;
    class SelectDatumPlane;
    namespace Features
    {
        class _ShellExpansionBuilderBuilder;
        class ShellExpansionBuilderImpl;
        /**
            Represents a @link Features::ShellExpansion Features::ShellExpansion@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateShellExpansionBuilder Features::FeatureCollection::CreateShellExpansionBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AdditionalPlanesPerFrame </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MapFaceEdges </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MapTransverseFrames </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Tolerance </td> <td> 
         
        1.0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ShellExpansionBuilder : public Features::FeatureBuilder
        {
            private: ShellExpansionBuilderImpl * m_shellexpansionbuilder_impl;
            private: friend class  _ShellExpansionBuilderBuilder;
            protected: ShellExpansionBuilder();
            public: ~ShellExpansionBuilder();
            /**Returns  the faces to flatten  <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToFlatten
            (
            );
            /**Returns  the base plane  <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * BasePlane
            (
            );
            /**Returns  the upper limit plane  <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * UpperLimitPlane
            (
            );
            /**Returns  the fore limit plane  <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * ForeLimitPlane
            (
            );
            /**Returns  the aft limit plane  <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * AftLimitPlane
            (
            );
            /**Returns  the curves to map  <br> License requirements : None */
            public: NXOpen::Section * CurvesToMap
            (
            );
            /**Returns  the map face edges  <br> License requirements : None */
            public: bool MapFaceEdges
            (
            );
            /**Sets  the map face edges  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetMapFaceEdges
            (
                bool mapFaceEdges /** mapfaceedges */ 
            );
            /**Returns  the map transverse frames  <br> License requirements : None */
            public: bool MapTransverseFrames
            (
            );
            /**Sets  the map transverse frames  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetMapTransverseFrames
            (
                bool mapTransverseFrames /** maptransverseframes */ 
            );
            /**Returns  a flag that determines if output is associative (only used during creation).  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  a flag that determines if output is associative (only used during creation).  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the additional planes per frame  <br> License requirements : None */
            public: int AdditionalPlanesPerFrame
            (
            );
            /**Sets  the additional planes per frame  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetAdditionalPlanesPerFrame
            (
                int additionalPlanesPerFrame /** additionalplanesperframe */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
