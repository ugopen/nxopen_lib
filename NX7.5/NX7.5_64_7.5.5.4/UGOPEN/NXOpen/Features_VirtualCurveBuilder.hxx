#ifndef NXOpen_FEATURES_VIRTUALCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VIRTUALCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VirtualCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_VirtualCurveBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class VirtualCurveBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _VirtualCurveBuilderBuilder;
        class VirtualCurveBuilderImpl;
        /**
            Represents a @link Features::VirtualCurve Features::VirtualCurve@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateVirtualCurveBuilder Features::FeatureCollection::CreateVirtualCurveBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        RotationAxis </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  VirtualCurveBuilder : public Features::FeatureBuilder
        {
            /** the type of virtual curve */
            public: enum Types
            {
                TypesRotationAxis/** Rotation axis */,
                TypesBlendCenterline/** Blend centerline */,
                TypesVirtualIntersection/** Virtual intersection */
            };

            private: VirtualCurveBuilderImpl * m_virtualcurvebuilder_impl;
            private: friend class  _VirtualCurveBuilderBuilder;
            protected: VirtualCurveBuilder();
            public: ~VirtualCurveBuilder();
            /**Returns  the revolved face.  This is only used if the 
                    @link Features::VirtualCurveBuilder::TypesRotationAxis Features::VirtualCurveBuilder::TypesRotationAxis@endlink  is set.  <br> License requirements : None */
            public: NXOpen::ScCollector * RevolvedFace
            (
            );
            /**Returns  the blend face.  This is only used if the 
                    @link Features::VirtualCurveBuilder::TypesBlendCenterline Features::VirtualCurveBuilder::TypesBlendCenterline@endlink  
                    or @link Features::VirtualCurveBuilder::TypesVirtualIntersection Features::VirtualCurveBuilder::TypesVirtualIntersection@endlink  is set.  <br> License requirements : None */
            public: NXOpen::ScCollector * BlendFace
            (
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::VirtualCurveBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::VirtualCurveBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
