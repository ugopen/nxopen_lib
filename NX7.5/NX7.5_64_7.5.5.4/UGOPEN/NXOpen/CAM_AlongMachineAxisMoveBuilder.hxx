#ifndef NXOpen_CAM_ALONGMACHINEAXISMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ALONGMACHINEAXISMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_AlongMachineAxisMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_AlongMachineAxisMoveBuilder.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class AlongMachineAxisMoveBuilder;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    namespace CAM
    {
        class _AlongMachineAxisMoveBuilderBuilder;
        class AlongMachineAxisMoveBuilderImpl;
        /** Represents Along MCS Axis Move Builder  <br> To create a new instance of this class, use @link CAM::MoveCollection::CreateAlongMcsAxisMoveBuilder CAM::MoveCollection::CreateAlongMcsAxisMoveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  AlongMachineAxisMoveBuilder : public CAM::MoveBuilder
        {
            private: AlongMachineAxisMoveBuilderImpl * m_alongmachineaxismovebuilder_impl;
            private: friend class  _AlongMachineAxisMoveBuilderBuilder;
            protected: AlongMachineAxisMoveBuilder();
            public: ~AlongMachineAxisMoveBuilder();
            /**Returns  the X position  <br> License requirements : None */
            public: double XAxis
            (
            );
            /**Sets  the X position  <br> License requirements : None */
            public: void SetXAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the Y position  <br> License requirements : None */
            public: double YAxis
            (
            );
            /**Sets  the Y position  <br> License requirements : None */
            public: void SetYAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the Z position  <br> License requirements : None */
            public: double ZAxis
            (
            );
            /**Sets  the Z position  <br> License requirements : None */
            public: void SetZAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the A position  <br> License requirements : None */
            public: double AAxis
            (
            );
            /**Sets  the A position  <br> License requirements : None */
            public: void SetAAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the B position  <br> License requirements : None */
            public: double BAxis
            (
            );
            /**Sets  the B position  <br> License requirements : None */
            public: void SetBAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the C position  <br> License requirements : None */
            public: double CAxis
            (
            );
            /**Sets  the C position  <br> License requirements : None */
            public: void SetCAxis
            (
                double axisPosition /** axis position */ 
            );
            /**Returns  the X output  <br> License requirements : None */
            public: bool XOutput
            (
            );
            /**Sets  the X output  <br> License requirements : None */
            public: void SetXOutput
            (
                bool output /** output */ 
            );
            /**Returns  the Y output  <br> License requirements : None */
            public: bool YOutput
            (
            );
            /**Sets  the Y output  <br> License requirements : None */
            public: void SetYOutput
            (
                bool output /** output */ 
            );
            /**Returns  the Z output  <br> License requirements : None */
            public: bool ZOutput
            (
            );
            /**Sets  the Z output  <br> License requirements : None */
            public: void SetZOutput
            (
                bool output /** output */ 
            );
            /**Returns  the A output  <br> License requirements : None */
            public: bool AOutput
            (
            );
            /**Sets  the A output  <br> License requirements : None */
            public: void SetAOutput
            (
                bool output /** output */ 
            );
            /**Returns  the B output  <br> License requirements : None */
            public: bool BOutput
            (
            );
            /**Sets  the B output  <br> License requirements : None */
            public: void SetBOutput
            (
                bool output /** output */ 
            );
            /**Returns  the C output  <br> License requirements : None */
            public: bool COutput
            (
            );
            /**Sets  the C output  <br> License requirements : None */
            public: void SetCOutput
            (
                bool output /** output */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
