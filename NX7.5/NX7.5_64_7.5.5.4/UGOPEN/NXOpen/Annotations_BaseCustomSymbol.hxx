#ifndef NXOpen_ANNOTATIONS_BASECUSTOMSYMBOL_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASECUSTOMSYMBOL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseCustomSymbol.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_IPmi.hxx>
#include <NXOpen/Annotations_AssociatedObject.hxx>
#include <NXOpen/Annotations_CustomSymbolData.hxx>
#include <NXOpen/Annotations_LeaderBundle.hxx>
#include <NXOpen/CustomSymbols.hxx>
#include <NXOpen/Annotations_DraftingAid.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class BaseCustomSymbol;
    }
    namespace Annotations
    {
        class AssociatedObject;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class CustomSymbolData;
    }
    namespace Annotations
    {
        class DraftingAid;
    }
    namespace Annotations
    {
        class IPmi;
    }
    namespace Annotations
    {
        class LeaderBundle;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    class Point;
    namespace Annotations
    {
        class _BaseCustomSymbolBuilder;
        class BaseCustomSymbolImpl;
        /** Represents a base custom symbol  <br> This is an abstract class and cannot be directly instantiated <br> */
        class NXOPENCPPEXPORT  BaseCustomSymbol : public Annotations::DraftingAid, public virtual Annotations::IPmi
        {
            private: BaseCustomSymbolImpl * m_basecustomsymbol_impl;
            private: friend class  _BaseCustomSymbolBuilder;
            protected: BaseCustomSymbol();
            public: ~BaseCustomSymbol();
            /** Returns the custom symbol data  @return  Custom symbol data  <br> License requirements : None */
            public: NXOpen::Annotations::CustomSymbolData * GetSymbolData
            (
            );
            /** Sets the custom symbol data  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolData
            (
                NXOpen::Annotations::CustomSymbolData * data /** New custom symbol data */
            );
            /** Flips the custom symbol horizontally/vertically. 
                        This is only available when editing. This option is unavailable for symbols with leaders.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void FlipSymbol
            (
                NXOpen::Annotations::FlipOption flipOption /** New flip option */
            );
            /** Sets the origin, scale and angle for a custom symbol instance
                        and updates the leaders (if any) as needed.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void UpdateSymbolGeometry
            (
                const NXOpen::Point3d & origin /** New origin */,
                double scale /** New scale  */,
                double angle /** New angle  */
            );
            /** Adds leaders to the custom symbol.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void AddLeader
            (
                NXOpen::Annotations::LeaderBundle * leader /** Specifies the leaders to add */
            );
            /** Removes leader from the custom symbol.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void RemoveLeader
            (
                int nthLeader /** Specifies which leader to remove */
            );
            /**Returns  the symbol name.  <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /** Returns the master custom symbol anchor point  @return  Custom Symbol Anchor Point  <br> License requirements : None */
            public: NXOpen::Point * GetAnchor
            (
            );
            /** Sets the master custom symbol anchor point  <br> License requirements : None */
            public: void SetAnchor
            (
                NXOpen::Point * anchorPoint /** Custom Symbol Anchor Point */
            );
            /** Returns the business modifiers  @return  List of business modifiers  <br> License requirements : None */
            public: virtual std::vector<NXOpen::Annotations::BusinessModifier *> GetBusinessModifiers
            (
            );
            /** Sets the business modifiers  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Returns the associated object  @return  Associated object  <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetAssociatedObject
            (
            );
            /** Sets the associated object  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetAssociatedObject
            (
                NXOpen::Annotations::AssociatedObject * assocObj /** New associated object */
            );
            /**Returns  the index. It is a unique integer assigned to a PMI object.  <br> License requirements : None */
            public: virtual int Index
            (
            );
            /**Sets  the index. It is a unique integer assigned to a PMI object.  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetIndex
            (
                int index /** New integer for PMI object */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
