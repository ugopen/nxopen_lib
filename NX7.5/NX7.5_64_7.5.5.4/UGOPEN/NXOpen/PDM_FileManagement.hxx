#ifndef NXOpen_PDM_FILEMANAGEMENT_HXX_INCLUDED
#define NXOpen_PDM_FILEMANAGEMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_FileManagement.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace PDM
    {
        class FileManagement;
    }
    namespace PDM
    {
    }
    namespace PDM
    {
        class FileManagementImpl;
        /** This class is responsible for Teamcenter file management related activities.   <br> Use @link PDM::PdmSession::NewFileManagement PDM::PdmSession::NewFileManagement@endlink  to get the instance of this class. <br> */
        class NXOPENCPPEXPORT  FileManagement : public TransientObject
        {
            private: FileManagementImpl * m_filemanagement_impl;
            public: explicit FileManagement(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~FileManagement();
            /** Imports all associated files for the specified dataset(s)
                    into the Teamcenter database.  The files will be attached to the
                    dataset(s) as named references.  The dataset(s) are identified by
                    their Teamcenter item id, Teamcenter item revision id, Teamcenter 
                    dataset name, NX dataset type, and NX dataset relation type.  
                    An import directory containing the files must be specified for each 
                    dataset.  An array of PDI result codes is returned indicating the 
                    success (0) or failure (non-zero) of each import.
                    <ol>
                    <li>NX dataset types and relation names</li>
                    <li>NX Model Type         NX Relation Type        NX Dataset Type</li>
                    <li>MASTER_MODEL          "has shape"             "UGMASTER"</li>
                    <li>SPEC_MODEL            "has specification"     "UGPART"</li>
                    <li>MAN_MODEL             "has manifestation"     "UGPART"</li>
                    <li>ALTREP_MODEL          "has altrep"            "UGALTREP"</li>
                    <li>SCENARIO_MODEL        "UG_scenario"           "UGSCENARIO"</li>
                    <li>SIMULATION_MODEL      "NX_simulation"         "NXSimulation"</li>
                    <li>MOTION_MODEL          "NX_simulation"         "NXMotion"</li>
                    <li>CAE_SOLN_MODEL        "NX_simulation"         "CAESolution"</li>
                    <li>CAE_MESH_MODEL        "NX_simulation"         "CAEMesh"</li>
                    <li>CAE_GEOM_MODEL        "NX_simulation"         "CAEGeom"</li>
                    <li>FOREIGN_MODEL         "Foreign"               "*"</li>
                    </ol>
                     @return  Result codes. Success (0), failure (non-zero).  <br> License requirements : None */
            public: std::vector<int> ImportFiles
            (
                std::vector<NXString> & itemIds /** Teamcenter item ids.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetRelationTypeNames /** NX dataset relation type names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & importDirectoryNames /** Import directories which contain the files to import.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all exportable files for the specified dataset(s)
                    to a directory. The dataset(s) are identified by their Teamcenter 
                    item id, Teamcenter item revision id, Teamcenter dataset name, 
                    NX dataset type, and  NX dataset relation type.  A base export directory
                    name must be specified for each dataset along with the tool name that
                    is requesting the export.  The full path to the exported files is 
                    returned in an output array.  The full path will be 
                    NX_default_directory\export_directory.  Additionally, an array of
                    PDI result codes is returned indicating the success (0) or failure 
                    (non-zero) of each export.
                    <ol>
                    <li>NX dataset types and relation names</li>
                    <li>NX Model Type         NX Relation Type        NX Dataset Type</li>
                    <li>MASTER_MODEL          "has shape"             "UGMASTER"</li>
                    <li>SPEC_MODEL            "has specification"     "UGPART"</li>
                    <li>MAN_MODEL             "has manifestation"     "UGPART"</li>
                    <li>ALTREP_MODEL          "has altrep"            "UGALTREP"</li>
                    <li>SCENARIO_MODEL        "UG_scenario"           "UGSCENARIO"</li>
                    <li>SIMULATION_MODEL      "NX_simulation"         "NXSimulation"</li>
                    <li>MOTION_MODEL          "NX_simulation"         "NXMotion"</li>
                    <li>CAE_SOLN_MODEL        "NX_simulation"         "CAESolution"</li>
                    <li>CAE_MESH_MODEL        "NX_simulation"         "CAEMesh"</li>
                    <li>CAE_GEOM_MODEL        "NX_simulation"         "CAEGeom"</li>
                    <li>FOREIGN_MODEL         "Foreign"               "*"</li>
                    </ol>
                     @return  Result codes. Success (0), failure (non-zero).  <br> License requirements : None */
            public: std::vector<int> ExportFiles
            (
                std::vector<NXString> & itemIds /** Teamcenter item ids.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & datasetRelationTypeNames /** NX dataset relation type names.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & baseDirectoryNames /** Base export directory name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & toolNames /** Tool names ("UGII V10-ALL").   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & exportDirectoryNames /** Resulting location of export directory */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
