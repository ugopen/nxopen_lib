#ifndef NXOpen_CAM_CUTCOM_HXX_INCLUDED
#define NXOpen_CAM_CUTCOM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Cutcom.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class Cutcom;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _CutcomBuilder;
        class CutcomImpl;
        /** Represents a @link CAM::Cutcom CAM::Cutcom@endlink  */
        class NXOPENCPPEXPORT  Cutcom : public TaggedObject
        {
            /** Available types for cutter compensation in planar milling */
            public: enum Types
            {
                TypesNone/** cutter compensation off */,
                TypesAllFinishPasses/** cutter compensation on all finish passes */,
                TypesFinalFinishPass/** cutter compensation on last finish pass */
            };

            private: CutcomImpl * m_cutcom_impl;
            private: friend class  _CutcomBuilder;
            protected: Cutcom();
            public: ~Cutcom();
            /**Returns  the cutter compensation type  <br> License requirements : None */
            public: NXOpen::CAM::Cutcom::Types Type
            (
            );
            /**Sets  the cutter compensation type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::CAM::Cutcom::Types type /** type */ 
            );
            /**Returns  the cutter compensation minimum move builder (inheritable tool dep)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinimumMove
            (
            );
            /**Returns  the cutter compensation minimum angle  <br> License requirements : None */
            public: double MinimumAngle
            (
            );
            /**Sets  the cutter compensation minimum angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumAngle
            (
                double minimumAngle /** minimumangle */ 
            );
            /**Returns  the cutter compensation output plane status  <br> License requirements : None */
            public: bool OutputPlane
            (
            );
            /**Sets  the cutter compensation output plane status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputPlane
            (
                bool outputPlane /** outputplane */ 
            );
            /**Returns  the suppress cutter compensation  <br> License requirements : None */
            public: bool Suppress
            (
            );
            /**Sets  the suppress cutter compensation  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSuppress
            (
                bool suppress /** suppress */ 
            );
            /**Returns  the cutter compensation output contact point status  <br> License requirements : None */
            public: bool OutputContactPoint
            (
            );
            /**Sets  the cutter compensation output contact point status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOutputContactPoint
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the cutter compensation tracking point selection  <br> License requirements : None */
            public: int TrackingPointType
            (
            );
            /**Sets  the cutter compensation tracking point selection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrackingPointType
            (
                int newValue /** newvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
