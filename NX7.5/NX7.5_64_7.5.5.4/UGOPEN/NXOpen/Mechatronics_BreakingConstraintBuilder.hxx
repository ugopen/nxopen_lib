#ifndef NXOpen_MECHATRONICS_BREAKINGCONSTRAINTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_BREAKINGCONSTRAINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_BreakingConstraintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_BreakingConstraintBuilder.hxx>
#include <NXOpen/Mechatronics_PhysicsConstraintBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Mechatronics
    {
        class BreakingConstraintBuilder;
    }
    class Direction;
    class Expression;
    namespace Mechatronics
    {
        class PhysicsConstraintBuilder;
    }
    namespace Mechatronics
    {
        class SelectPhysicsJoint;
    }
    namespace Mechatronics
    {
        class _BreakingConstraintBuilderBuilder;
        class BreakingConstraintBuilderImpl;
        /** Represents a @link Mechatronics::BreakingConstraint Mechatronics::BreakingConstraint@endlink  builder.  <br> To create a new instance of this class, use @link Mechatronics::BreakingConstraintCollection::CreateBreakingConstraintBuilder Mechatronics::BreakingConstraintCollection::CreateBreakingConstraintBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  BreakingConstraintBuilder : public Mechatronics::PhysicsConstraintBuilder
        {
            /** Represents the breaking mode. */
            public: enum BreakingModeType
            {
                BreakingModeTypeForce/** Force  */,
                BreakingModeTypeTorque/** Torque */
            };

            private: BreakingConstraintBuilderImpl * m_breakingconstraintbuilder_impl;
            private: friend class  _BreakingConstraintBuilderBuilder;
            protected: BreakingConstraintBuilder();
            public: ~BreakingConstraintBuilder();
            /**Returns  the joint object. It can be any type of joints.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::SelectPhysicsJoint * Joint
            (
            );
            /**Returns  the breaking mode.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::BreakingConstraintBuilder::BreakingModeType BreakingMode
            (
            );
            /**Sets  the breaking mode.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetBreakingMode
            (
                NXOpen::Mechatronics::BreakingConstraintBuilder::BreakingModeType breakingMode /** breakingmode */ 
            );
            /**Returns  the maximum allowable magnitude, the joint will be broken if it exceeds this value.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * MaximumMagnitude
            (
            );
            /**Returns  the direction is fixed or not.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: bool FixedDirection
            (
            );
            /**Sets  the direction is fixed or not.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetFixedDirection
            (
                bool fixedDirection /** fixeddirection */ 
            );
            /**Returns  the direction.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets  the direction.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
