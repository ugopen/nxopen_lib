#ifndef NXOpen_AUTOTESTPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_AUTOTESTPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AutotestPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AutotestPreferencesBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class AutotestPreferencesBuilder;
    class Builder;
    class _AutotestPreferencesBuilderBuilder;
    class AutotestPreferencesBuilderImpl;
    /** 
        Represents a class that is used for defining preferences when recording Autotest 
         <br> To create a new instance of this class, use @link DebugSession::CreateAutotestPreferencesBuilder DebugSession::CreateAutotestPreferencesBuilder@endlink  <br> */
    class NXOPENDEBUGSESSIONCPPEXPORT  AutotestPreferencesBuilder : public Builder
    {
        /** Enumeration used to define the language type when recording an Autotest journal */
        public: enum LanguageType
        {
            LanguageTypeVisualBasic/** Language type to Visual Basic output */,
            LanguageTypeCPlusPlus/** Language type to C++ output */,
            LanguageTypeJava/** Language type to Java output */,
            LanguageTypeCSharp/** Language type to C# output */
        };

        /** Enumeration used to define the validation type when recording an Autotest journal. */
        public: enum ValidationOption
        {
            ValidationOptionNone/** Indicates that no auto validation statements are generated. */,
            ValidationOptionAtEnd/** Indicates that auto validation statements are generated at end of journal */,
            ValidationOptionAtEndAndAtUpdate/** Indicates that auto validation statements are generated at end of journal and updates */
        };

        /** Enumeration used to define subobject nesting type. */
        public: enum SubobjectNestingOption
        {
            SubobjectNestingOptionNone/** Do not nest subobjects inside their containing object's XML output. */,
            SubobjectNestingOptionNestSubobjects/** Nest subobjects inside their containing object's XML output. */
        };

        /** Enumeration used to define object details type. */
        public: enum ObjectDetailsOption
        {
            ObjectDetailsOptionHideDetails/** Hide the details of an object in its XML output. */,
            ObjectDetailsOptionShowDetails/** Show the details of an object in its XML output. */
        };

        /** Enumeration used to define collector validation. */
        public: enum CollectorValidationOption
        {
            CollectorValidationOptionNone/** Do not validate collectors. */,
            CollectorValidationOptionAll/** Validate all collectors */
        };

        /** Enumeration used for modeling validation */
        public: enum ModelingValidationOpt
        {
            ModelingValidationOptNone/** Do not perform modeling validation */,
            ModelingValidationOptAtEnd/** Perfrom Modeling Validation at end */
        };

        /** Enumeration used for info validation */
        public: enum InfoValidationOption
        {
            InfoValidationOptionNone/** Do not perform info validation */,
            InfoValidationOptionAll/** Perfrom info Validation */
        };

        /** Enumeration used for drafting custom info validation */
        public: enum DraftingValidationOption
        {
            DraftingValidationOptionNone/** Do not perform info validation */,
            DraftingValidationOptionAll/** Perfrom info Validation */
        };

        private: AutotestPreferencesBuilderImpl * m_autotestpreferencesbuilder_impl;
        private: friend class  _AutotestPreferencesBuilderBuilder;
        protected: AutotestPreferencesBuilder();
        public: ~AutotestPreferencesBuilder();
        /**Returns  the language being used for recording.  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::LanguageType Language
        (
        );
        /**Sets  the language being used for recording.  <br> License requirements : None */
        public: void SetLanguage
        (
            NXOpen::AutotestPreferencesBuilder::LanguageType language /** language */ 
        );
        /**Returns  the current autotest library index  <br> License requirements : None */
        public: int Library
        (
        );
        /**Sets  the current autotest library index  <br> License requirements : None */
        public: void SetLibrary
        (
            int library /** library */ 
        );
        /**Returns  the autovalidate  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ValidationOption Autovalidate
        (
        );
        /**Sets  the autovalidate  <br> License requirements : None */
        public: void SetAutovalidate
        (
            NXOpen::AutotestPreferencesBuilder::ValidationOption autovalidate /** autovalidate */ 
        );
        /**Returns  the collector validation option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::CollectorValidationOption CollectorValidation
        (
        );
        /**Sets  the collector validation option  <br> License requirements : None */
        public: void SetCollectorValidation
        (
            NXOpen::AutotestPreferencesBuilder::CollectorValidationOption collectorValidation /** collectorvalidation */ 
        );
        /**Returns  the info validation option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::InfoValidationOption InfoValidation
        (
        );
        /**Sets  the info validation option  <br> License requirements : None */
        public: void SetInfoValidation
        (
            NXOpen::AutotestPreferencesBuilder::InfoValidationOption infoValidation /** infovalidation */ 
        );
        /**Returns  the drafting validation option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::DraftingValidationOption DraftingValidation
        (
        );
        /**Sets  the drafting validation option  <br> License requirements : None */
        public: void SetDraftingValidation
        (
            NXOpen::AutotestPreferencesBuilder::DraftingValidationOption draftingValidation /** draftingvalidation */ 
        );
        /**Returns  the subobject nesting option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::SubobjectNestingOption SubobjectNesting
        (
        );
        /**Sets  the subobject nesting option  <br> License requirements : None */
        public: void SetSubobjectNesting
        (
            NXOpen::AutotestPreferencesBuilder::SubobjectNestingOption subobjectNesting /** subobjectnesting */ 
        );
        /**Returns  the object details option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ObjectDetailsOption ObjectDetails
        (
        );
        /**Sets  the object details option  <br> License requirements : None */
        public: void SetObjectDetails
        (
            NXOpen::AutotestPreferencesBuilder::ObjectDetailsOption objectDetails /** objectdetails */ 
        );
        /**Returns  the partfile keyword options  <br> License requirements : None */
        public: bool PartfileKeyword
        (
        );
        /**Sets  the partfile keyword options  <br> License requirements : None */
        public: void SetPartfileKeyword
        (
            bool usePartfilekeyword /** use partfilekeyword */ 
        );
        /**Returns  the dir keyword option  <br> License requirements : None */
        public: bool DirKeyword
        (
        );
        /**Sets  the dir keyword option  <br> License requirements : None */
        public: void SetDirKeyword
        (
            bool useDirkeyword /** use dirkeyword */ 
        );
        /**Returns  the subdirectory option  <br> License requirements : None */
        public: NXString Subdirectory
        (
        );
        /**Sets  the subdirectory option  <br> License requirements : None */
        public: void SetSubdirectory
        (
            const NXString & subdirectoryName /** subdirectory name */ 
        );
        /**Returns  the modeling validation option  <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingValidationOpt ModelingValidationOption
        (
        );
        /**Sets  the modeling validation option  <br> License requirements : None */
        public: void SetModelingValidationOption
        (
            NXOpen::AutotestPreferencesBuilder::ModelingValidationOpt validationOption /** validation option */ 
        );
        /**Returns  the functional area  <br> License requirements : None */
        public: int FunctionalArea
        (
        );
        /**Sets  the functional area  <br> License requirements : None */
        public: void SetFunctionalArea
        (
            int functionalArea /** functional area */ 
        );
        /**Returns  the no_copy keyword option  <br> License requirements : None */
        public: bool NocopyKeyword
        (
        );
        /**Sets  the no_copy keyword option  <br> License requirements : None */
        public: void SetNocopyKeyword
        (
            bool useNocopyKeyword /** use nocopy keyword */ 
        );
        /**Returns  the customer defaults file option  <br> License requirements : None */
        public: bool UseCustomerDefaultsFile
        (
        );
        /**Sets  the customer defaults file option  <br> License requirements : None */
        public: void SetUseCustomerDefaultsFile
        (
            bool useCustomerDefaultsFile /** use customer defaults file */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
