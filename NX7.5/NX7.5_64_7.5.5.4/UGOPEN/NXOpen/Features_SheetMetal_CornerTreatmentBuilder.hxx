#ifndef NXOpen_FEATURES_SHEETMETAL_CORNERTREATMENTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_CORNERTREATMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_CornerTreatmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_SheetMetal_CornerTreatmentBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class CornerTreatmentBuilder;
        }
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class _CornerTreatmentBuilderBuilder;
            class CornerTreatmentBuilderImpl;
            /** The CornerTreatmentBuilder class is used to manage a builder object for
                    a corner treatment in the flat solid and flat pattern dialogs. It includes
                    properties and an enumeration type for a flag that indicates whether the
                    global (flat pattern preferences) value is to be used, an enumeration type
                    that indicates what type of corner treatment to apply, and an expression
                    to indicate the value associated with treatment types chamfer and radius.
                */
            class NXOPENCPPEXPORT  CornerTreatmentBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                /** Corner Treatment Type */
                public: enum CornerTreatmentType
                {
                    CornerTreatmentTypeNone/** none */ ,
                    CornerTreatmentTypeChamfer/** chamfer */ ,
                    CornerTreatmentTypeRadius/** radius */ 
                };

                private: CornerTreatmentBuilderImpl * m_cornertreatmentbuilder_impl;
                private: friend class  _CornerTreatmentBuilderBuilder;
                protected: CornerTreatmentBuilder();
                public: ~CornerTreatmentBuilder();
                /**Returns  the use global toggle value  <br> License requirements : None */
                public: bool UseGlobal
                (
                );
                /**Sets  the use global toggle value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetUseGlobal
                (
                    bool useGlobal /** useglobal */ 
                );
                /**Returns  the treatment type option menu value  <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::CornerTreatmentBuilder::CornerTreatmentType TreatmentType
                (
                );
                /**Sets  the treatment type option menu value  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetTreatmentType
                (
                    NXOpen::Features::SheetMetal::CornerTreatmentBuilder::CornerTreatmentType treatmentType /** treatmenttype */ 
                );
                /**Returns  the value associated with the chamfer and radius treatment types  <br> License requirements : None */
                public: NXOpen::Expression * Value
                (
                );
                /** Returns true if the inputs to the component are sufficient for 
                            commit to be called.  For example, if the component requires
                            you to set some property, this method will return false if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful  <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
