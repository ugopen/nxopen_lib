#ifndef NXOpen_GEOMETRICUTILITIES_CIRCULARPATTERN_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CIRCULARPATTERN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CircularPattern.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AngularPatternSpacing.hxx>
#include <NXOpen/GeometricUtilities_CircularPattern.hxx>
#include <NXOpen/GeometricUtilities_DistancePatternSpacing.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CircularPattern;
    }
    class Axis;
    namespace GeometricUtilities
    {
        class AngularPatternSpacing;
    }
    namespace GeometricUtilities
    {
        class DistancePatternSpacing;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectNXObject;
    namespace GeometricUtilities
    {
        class _CircularPatternBuilder;
        class CircularPatternImpl;
        /** the circular pattern definition.  Allows specification along
                both the angular and radial directions. */
        class NXOPENCPPEXPORT  CircularPattern : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** defines any stagger to be defined on the pattern.  Stagger values are used to offset to every other
                        row/column of the pattern. */
            public: enum StaggerOptions
            {
                StaggerOptionsNone/** No stagger applied */,
                StaggerOptionsRow/** Stagger row */
            };

            private: CircularPatternImpl * m_circularpattern_impl;
            private: friend class  _CircularPatternBuilder;
            protected: CircularPattern();
            public: ~CircularPattern();
            /**Returns  the rotation axis for the pattern.  <br> License requirements : None */
            public: NXOpen::Axis * RotationAxis
            (
            );
            /**Sets  the rotation axis for the pattern.  <br> License requirements : None */
            public: void SetRotationAxis
            (
                NXOpen::Axis * rotationAxis /** rotationaxis */ 
            );
            /**Returns  the angular spacing of the instances of the pattern <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AngularPatternSpacing * AngularSpacing
            (
            );
            /**Returns  the radial spacing of the instances of the pattern  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DistancePatternSpacing * RadialSpacing
            (
            );
            /**Returns  the center point object for 2D mode. This function gets center point object of the 2D pattern  <br> License requirements : None */
            public: NXOpen::SelectNXObject * CenterPoint
            (
            );
            /**Returns  the flip object for 2D mode.  This function gets the flip attribute of the 2D pattern.  <br> License requirements : None */
            public: bool Flip
            (
            );
            /**Sets  the flip object for 2D mode.  This function gets the flip attribute of the 2D pattern.  <br> License requirements : None */
            public: void SetFlip
            (
                bool enabled /** enabled */ 
            );
            /**Returns  the UseRadialDirection toggle attribute. This function gets the UseRadialDirection toggle value  <br> License requirements : None */
            public: bool UseRadialDirectionToggle
            (
            );
            /**Sets  the UseRadialDirection toggle attribute. This function gets the UseRadialDirection toggle value  <br> License requirements : None */
            public: void SetUseRadialDirectionToggle
            (
                bool toggle /** toggle */ 
            );
            /**Returns  the IncludeSeed toggle attribute. This function gets the IncludeSeed toggle value  <br> License requirements : None */
            public: bool IncludeSeedToggle
            (
            );
            /**Sets  the IncludeSeed toggle attribute. This function gets the IncludeSeed toggle value  <br> License requirements : None */
            public: void SetIncludeSeedToggle
            (
                bool toggle /** toggle */ 
            );
            /**Returns  the type of stagger to be used by the pattern  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CircularPattern::StaggerOptions StaggerType
            (
            );
            /**Sets  the type of stagger to be used by the pattern  <br> License requirements : None */
            public: void SetStaggerType
            (
                NXOpen::GeometricUtilities::CircularPattern::StaggerOptions spaceType /** spacetype */ 
            );
            /**Returns  the option to generate the last item in a staggered row.  If 'true' the pattern will be
                        narrower on rows that have been staggered.  <br> License requirements : None */
            public: bool CreateLastStaggered
            (
            );
            /**Sets  the option to generate the last item in a staggered row.  If 'true' the pattern will be
                        narrower on rows that have been staggered.  <br> License requirements : None */
            public: void SetCreateLastStaggered
            (
                bool create /** create */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
