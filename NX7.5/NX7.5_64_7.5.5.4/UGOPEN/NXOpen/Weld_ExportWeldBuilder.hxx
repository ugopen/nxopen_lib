#ifndef NXOpen_WELD_EXPORTWELDBUILDER_HXX_INCLUDED
#define NXOpen_WELD_EXPORTWELDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_ExportWeldBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Weld_ExportWeldBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        class ExportWeldBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    namespace Weld
    {
        class _ExportWeldBuilderBuilder;
        class ExportWeldBuilderImpl;
        /** Represents a ExportWeldBuilder class  <br> To create a new instance of this class, use @link Weld::WeldManager::CreateExportWeldBuilder Weld::WeldManager::CreateExportWeldBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ExportWeldBuilder : public Builder
        {
            private: ExportWeldBuilderImpl * m_exportweldbuilder_impl;
            private: friend class  _ExportWeldBuilderBuilder;
            protected: ExportWeldBuilder();
            public: ~ExportWeldBuilder();
            /**Returns  the weld points to be exported to CSV file  <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::SelectNXObjectList * WeldPoints
            (
            );
            /**Returns  the connected part attribute toggle to control if read connected part attributes from weld points  <br> License requirements : ugweld ("UG WELD") */
            public: bool ConnectedPartAttrToggle
            (
            );
            /**Sets  the connected part attribute toggle to control if read connected part attributes from weld points  <br> License requirements : ugweld ("UG WELD") */
            public: void SetConnectedPartAttrToggle
            (
                bool connectedPartAttrToggle /** Connected part attribute toggle value */
            );
            /** Get the attributes of weld points to be exported to CSV file  @return  Exported attributes string  <br> License requirements : ugweld ("UG WELD") */
            public: std::vector<NXString> GetExportedAttributes
            (
            );
            /** Set the attributes of weld points to be exported to CSV file  <br> License requirements : ugweld ("UG WELD") */
            public: void SetExportedAttributes
            (
                std::vector<NXString> & exportedAttributes /** Exported attributes string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the connected part attributes of weld points  @return  Connected part attributes string  <br> License requirements : ugweld ("UG WELD") */
            public: std::vector<NXString> GetConnectedPartAttributes
            (
            );
            /** Set the connected part attributes of weld points  <br> License requirements : ugweld ("UG WELD") */
            public: void SetConnectedPartAttributes
            (
                std::vector<NXString> & connectedPartAttributes /** Connected part attributes string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the CSV file name  <br> License requirements : ugweld ("UG WELD") */
            public: NXString CsvFileName
            (
            );
            /**Sets  the CSV file name  <br> License requirements : ugweld ("UG WELD") */
            public: void SetCsvFileName
            (
                const NXString & csvFileName /** CSV file name */
            );
            /**Returns  the template file name  <br> License requirements : ugweld ("UG WELD") */
            public: NXString TemplateFileName
            (
            );
            /**Sets  the template file name  <br> License requirements : ugweld ("UG WELD") */
            public: void SetTemplateFileName
            (
                const NXString & templateFileName /** Template file name */
            );
            /** Read attributes from selected welds and save to exported attributes and connected part attributes  <br> License requirements : ugweld ("UG WELD") */
            public: void ReadAttributesFromWelds
            (
            );
            /** Save exported attributes as default template. Before use it, you must set template file name.  <br> License requirements : ugweld ("UG WELD") */
            public: void SaveAsDefault
            (
            );
            /** Restore default template to update exported attributes. Before use it, you must set template file name.  <br> License requirements : ugweld ("UG WELD") */
            public: void RestoreDefault
            (
            );
            /** Save exported attributes to a template file. Before use it, you must set template file name.  <br> License requirements : ugweld ("UG WELD") */
            public: void SaveToFile
            (
            );
            /** Open a template file to update exported attributes. Before use it, you must set template file name.  <br> License requirements : ugweld ("UG WELD") */
            public: void OpenFromFile
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
