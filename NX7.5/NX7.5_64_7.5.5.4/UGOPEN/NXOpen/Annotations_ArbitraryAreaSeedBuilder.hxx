#ifndef NXOpen_ANNOTATIONS_ARBITRARYAREASEEDBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ARBITRARYAREASEEDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ArbitraryAreaSeedBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ArbitraryAreaSeedBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class ArbitraryAreaSeedBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _ArbitraryAreaSeedBuilderBuilder;
        class ArbitraryAreaSeedBuilderImpl;
        /**
            Represents a @link Annotations::ArbitraryAreaSeedBuilder Annotations::ArbitraryAreaSeedBuilder@endlink 
             <br> To create a new instance of this class, use @link Annotations::PmiManager::CreateArbitraryAreaSeedBuilder Annotations::PmiManager::CreateArbitraryAreaSeedBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ArbitraryAreaSeedBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ArbitraryAreaSeedBuilderImpl * m_arbitraryareaseedbuilder_impl;
            private: friend class  _ArbitraryAreaSeedBuilderBuilder;
            protected: ArbitraryAreaSeedBuilder();
            public: ~ArbitraryAreaSeedBuilder();
            /**Returns  the select face  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SelectFace
            (
            );
            /**Returns  the specify curves  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SpecifyCurves
            (
            );
            /**Returns  the specify point  <br> License requirements : None */
            public: NXOpen::Point * SpecifyPoint
            (
            );
            /**Sets  the specify point  <br> License requirements : geometric_tol ("GDT") */
            public: void SetSpecifyPoint
            (
                NXOpen::Point * specifyPoint /** specifypoint */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
