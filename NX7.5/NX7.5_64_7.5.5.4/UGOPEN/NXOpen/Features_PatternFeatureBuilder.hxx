#ifndef NXOpen_FEATURES_PATTERNFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PATTERNFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PatternFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_PatternFeatureBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class PatternFeatureBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeatureList;
    }
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    class NXObject;
    class Point;
    namespace Features
    {
        class _PatternFeatureBuilderBuilder;
        class PatternFeatureBuilderImpl;
        /**
            Represents a @link Features::PatternFeature Features::PatternFeature@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreatePatternFeatureBuilder Features::FeatureCollection::CreatePatternFeatureBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </td> <td> 
         
        100 (millimeters part), 10 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.NCopies.Value </td> <td> 
         
        12 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </td> <td> 
         
        360 (millimeters part), 360 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.AngularSpacing.UsePitchOption </td> <td> 
         
        Angle </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.IncludeSeedToggle </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.RadialSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PatternService.CircularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.PatternFill.FillMargin.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        PatternService.PatternFill.FillOptions </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.PatternOrientation.OrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        PatternService.PatternType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.XSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        PatternService.RectangularDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  PatternFeatureBuilder : public Features::FeatureBuilder
        {
            /** the Pattern method options. */
            public: enum PatternMethodOptions
            {
                PatternMethodOptionsIdentical/** identical */,
                PatternMethodOptionsVariational/** variational */,
                PatternMethodOptionsSimple/** simple */
            };

            private: PatternFeatureBuilderImpl * m_patternfeaturebuilder_impl;
            private: friend class  _PatternFeatureBuilderBuilder;
            protected: PatternFeatureBuilder();
            public: ~PatternFeatureBuilder();
            /**Returns  the Pattern method  <br> License requirements : None */
            public: NXOpen::Features::PatternFeatureBuilder::PatternMethodOptions PatternMethod
            (
            );
            /**Sets  the Pattern method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPatternMethod
            (
                NXOpen::Features::PatternFeatureBuilder::PatternMethodOptions methodOption /** methodoption */ 
            );
            /**Returns  the Features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SelectFeatureList * FeatureList
            (
            );
            /**Returns  the reference point  <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the Pattern definition service  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternDefinition * PatternService
            (
            );
            /** Sets the references or selections from the input features which are to be reused for all instances.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferencesToReuse
            (
                const std::vector<NXOpen::NXObject *> & referencesFromInputFeatures /** referencesfrominputfeatures */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
