#ifndef NXOpen_PREFERENCES_SESSIONMODELING_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONMODELING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionModeling.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionModeling;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SessionModelingImpl;
        /** Represents the set of Modeling preferences applicable to entire session <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences Preferences::SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT  SessionModeling
        {
            /** Describes whether the display of New Face properties inherits from body or part default */
            public: enum NewFacePropertiesInheritance
            {
                NewFacePropertiesInheritanceBody/** Indicates that display of new face properties inherits from body  */,
                NewFacePropertiesInheritancePartDefault/** Indicates that display of new face properties inherits from part default */
            };

            /** Describes whether the display of Boolean Face properties inherits from target body or tool body */
            public: enum BooleanFacePropertiesInheritance
            {
                BooleanFacePropertiesInheritanceTargetBody/** Indicates that display of boolean face properties inherits from target body */,
                BooleanFacePropertiesInheritanceToolBody/** Indicates that display of boolean face properties inherits from tool body */
            };

            /** Describes whether the display of linked and extracted geometry properties inherits from parent object or part default */
            public: enum LinkedAndExtractedGeometryPropertiesInheritance
            {
                LinkedAndExtractedGeometryPropertiesInheritanceParentObject/** Indicates that display of linked and extracted geometry properties inherits from parent object  */,
                LinkedAndExtractedGeometryPropertiesInheritancePartDefault/** Indicates that display of linked and extracted geometry properties inherits from part default */
            };

            /** Describes whether the Dynamic Update type is not selected or selected as incremental or continuous */
            public: enum DynamicUpdateType
            {
                DynamicUpdateTypeNone/** Indicates that Dynamic Update type is not selected */,
                DynamicUpdateTypeIncremental/** Indicates that Dynamic Update type is incremental*/,
                DynamicUpdateTypeContinuous/** Indicates that Dynamic Update type is continuous */
            };

            /** Describes whether the Immediate Children type is selected for first level or for all */
            public: enum ImmediateChildrenType
            {
                ImmediateChildrenTypeFirstLevel/** Indicates that Immediate Children type is at first level */,
                ImmediateChildrenTypeAll/** Indicates that Immediate Children type is at all level  */
            };

            /** Describes whether the body type is solid or sheet */
            public: enum BodyTypeOption
            {
                BodyTypeOptionSolid/** Indicates Body Type is solid  */,
                BodyTypeOptionSheet/** Indicates Body Type is solid */
            };

            /** Describes whether the Free Form Construction Result is plane or B Surface  */
            public: enum FreeFormConstructionResultType
            {
                FreeFormConstructionResultTypePlane/** Indicates the construction result option is plane  */,
                FreeFormConstructionResultTypeBSurface/** Indicates the construction result option is B Surface  */
            };

            /** Specifies the command that should be invoked when double-clicking on a spline. 
                    The option applies to non-associative splines and Studio Spline features in the Shape Studio application only. */
            public: enum SplineDefaultActionTypes
            {
                SplineDefaultActionTypesStudioSpline/** Specifies Studio Spline for editing a spline */,
                SplineDefaultActionTypesXform/** Specifies X-form for editing a spline */
            };

            /** Describes whether the Curve Fit Method type is selected as cubic or quintic or advanced */
            public: enum CurveFitMethodType
            {
                CurveFitMethodTypeCubic/** Indicates the Curve Fit Method type is cubic */,
                CurveFitMethodTypeQuintic/** Indicates the Curve Fit Method type is quintic */,
                CurveFitMethodTypeAdvanced/** Indicates the Curve Fit Method type is advanced */
            };

            /** Freeform preview resolutions */
            public: enum PreviewResolutionType
            {
                PreviewResolutionTypeNone/** none */ ,
                PreviewResolutionTypeCoarse/** coarse */ ,
                PreviewResolutionTypeStandard/** standard */ ,
                PreviewResolutionTypeFine/** fine */ ,
                PreviewResolutionTypeExtraFine/** extra fine */ ,
                PreviewResolutionTypeSuperFine/** super fine */ ,
                PreviewResolutionTypeUltraFine/** ultra fine */ 
            };

            /** Double click action for sketches */
            public: enum SketchDefaultActionType
            {
                SketchDefaultActionTypeEditWithRollback/** Edit sketch with rollback on double click */,
                SketchDefaultActionTypeEdit/** Edit sketch without rollback on double click */
            };

            /** Edit option for sketches */
            public: enum SketchEditType
            {
                SketchEditTypeInTaskEnvironment/** Edit sketch in task environment */,
                SketchEditTypeDirect/** Edit sketch without entering task environment */
            };

            /** Styles for polylines of B curves and B surfaces  */
            public: enum PolylineStyleType
            {
                PolylineStyleTypeSolid = 1/** solid */ ,
                PolylineStyleTypeDashed/** dashed */ ,
                PolylineStyleTypePhantom/** phantom */ ,
                PolylineStyleTypeCenterline/** centerline */ ,
                PolylineStyleTypeDotted/** dotted */ ,
                PolylineStyleTypeLongdashed/** longdashed */ ,
                PolylineStyleTypeDotteddashed/** dotteddashed */ 
            };

            /** Styles for display poles of B curves and B surfaces  */
            public: enum PoleDisplayStyleType
            {
                PoleDisplayStyleTypeNone/** none */ ,
                PoleDisplayStyleTypeOpenCircle/** open circle */ ,
                PoleDisplayStyleTypeFilledCircle/** filled circle */ ,
                PoleDisplayStyleTypePlusSign/** plus sign */ ,
                PoleDisplayStyleTypeCross/** cross */ 
            };

            /** Styles for edit poles of B curves and B surfaces  */
            public: enum PoleEditStyleType
            {
                PoleEditStyleTypeSphere3d/** sphere3d */ ,
                PoleEditStyleTypeOpenCircle/** open circle */ ,
                PoleEditStyleTypeFilledCircle/** filled circle */ ,
                PoleEditStyleTypePlusSign/** plus sign */ ,
                PoleEditStyleTypeCross/** cross */ 
            };

            private: SessionModelingImpl * m_sessionmodeling_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /** Constructor */
            public: explicit SessionModeling(NXOpen::Preferences::SessionPreferences *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionModeling();
            /**Returns  the boolean face properties inheritance. Specifies whether the boolean face properties inherit from target body or tool body  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::BooleanFacePropertiesInheritance BooleanFaceProperties
            (
            );
            /**Sets  the boolean face properties inheritance. Specifies whether the boolean face properties inherit from target body or tool body  <br> License requirements : None */
            public: void SetBooleanFaceProperties
            (
                NXOpen::Preferences::SessionModeling::BooleanFacePropertiesInheritance booleanFaceProperties /** boolean face properties */ 
            );
            /**Returns  the new face properties inheritance. Specifies whether new face properties inherits from body or part default  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::NewFacePropertiesInheritance NewFaceProperties
            (
            );
            /**Sets  the new face properties inheritance. Specifies whether new face properties inherits from body or part default  <br> License requirements : None */
            public: void SetNewFaceProperties
            (
                NXOpen::Preferences::SessionModeling::NewFacePropertiesInheritance newFaceProperties /** new face properties */ 
            );
            /**Returns  the linked and extracted geometry properties inheritance. Specifies whether linked and extracted geometry properties inherits from parent object or part default  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::LinkedAndExtractedGeometryPropertiesInheritance LinkedAndExtractedGeometryProperties
            (
            );
            /**Sets  the linked and extracted geometry properties inheritance. Specifies whether linked and extracted geometry properties inherits from parent object or part default  <br> License requirements : None */
            public: void SetLinkedAndExtractedGeometryProperties
            (
                NXOpen::Preferences::SessionModeling::LinkedAndExtractedGeometryPropertiesInheritance linkedAndExtractedGeometryProperties /** linked and extracted geometry properties */ 
            );
            /**Returns  the dynamic update. Specifies that the system dynamically displays in real time with each 
                updation of parent curves, splines, bridge curves, lines or arcs  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::DynamicUpdateType DynamicUpdate
            (
            );
            /**Sets  the dynamic update. Specifies that the system dynamically displays in real time with each 
                updation of parent curves, splines, bridge curves, lines or arcs  <br> License requirements : None */
            public: void SetDynamicUpdate
            (
                NXOpen::Preferences::SessionModeling::DynamicUpdateType dynamicUpdate /** dynamic update */ 
            );
            /**Returns  the immediate children. Specifies to which level the dynamic updation is applicable.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::ImmediateChildrenType ImmediateChildren
            (
            );
            /**Sets  the immediate children. Specifies to which level the dynamic updation is applicable.  <br> License requirements : None */
            public: void SetImmediateChildren
            (
                NXOpen::Preferences::SessionModeling::ImmediateChildrenType immediateChildren /** immediate children */ 
            );
            /**Returns  the features/mark. Controls how often, during feature creation and editing, the system sets internal marks 
                used in updating. A Features/Mark value of 5, for example, means that one mark will be set after five features 
                are created or edited.  <br> License requirements : None */
            public: int PmarkFrequency
            (
            );
            /**Sets  the features/mark. Controls how often, during feature creation and editing, the system sets internal marks 
                used in updating. A Features/Mark value of 5, for example, means that one mark will be set after five features 
                are created or edited.  <br> License requirements : None */
            public: void SetPmarkFrequency
            (
                int pmarkFrequency /** pmark frequency */ 
            );
            /**Returns  the body type. Toggles between Solid and Sheet. When creating bodies through curves, the Body Type option provides
                 control to the type of body (for example, solid body vs. sheet body) that is created.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::BodyTypeOption BodyType
            (
            );
            /**Sets  the body type. Toggles between Solid and Sheet. When creating bodies through curves, the Body Type option provides
                 control to the type of body (for example, solid body vs. sheet body) that is created.  <br> License requirements : None */
            public: void SetBodyType
            (
                NXOpen::Preferences::SessionModeling::BodyTypeOption bodyType /** body type */ 
            );
            /**Returns  the toggle "Display Legacy Feature names" gives choice, how user wants feature name in "Name" Coulmn in Partnav
                 checked toggled(True) will show old feature names in "Name" column in Partnav, while
                 unchecked toggled(False) will show new translatable feature names in "Name" column in Partnav <br> License requirements : None */
            public: bool DisplayLegacyFeatureName
            (
            );
            /**Sets  the toggle "Display Legacy Feature names" gives choice, how user wants feature name in "Name" Coulmn in Partnav
                 checked toggled(True) will show old feature names in "Name" column in Partnav, while
                 unchecked toggled(False) will show new translatable feature names in "Name" column in Partnav <br> License requirements : None */
            public: void SetDisplayLegacyFeatureName
            (
                bool displayLegacyFeatureName /** preference to display_legacy_feature_name */
            );
            /**Returns  the curve fit method. Controls the fitting method used when curves must be approximated by splines.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::CurveFitMethodType CurveFitMethod
            (
            );
            /**Sets  the curve fit method. Controls the fitting method used when curves must be approximated by splines.  <br> License requirements : None */
            public: void SetCurveFitMethod
            (
                NXOpen::Preferences::SessionModeling::CurveFitMethodType bodyType /** body type */ 
            );
            /**Returns  the free form construction result. Controls free form feature creation when using the Through Curves, Through 
                Curve Mesh, Swept, and Ruled options.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::FreeFormConstructionResultType FreeFormConstructionResult
            (
            );
            /**Sets  the free form construction result. Controls free form feature creation when using the Through Curves, Through 
                Curve Mesh, Swept, and Ruled options.  <br> License requirements : None */
            public: void SetFreeFormConstructionResult
            (
                NXOpen::Preferences::SessionModeling::FreeFormConstructionResultType freeFormConstrResult /** free form constr result */ 
            );
            /**Returns  the value indicating the default action for a spline.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SplineDefaultActionTypes SplineDefaultActionType
            (
            );
            /**Sets  the value indicating the default action for a spline.  <br> License requirements : None */
            public: void SetSplineDefaultActionType
            (
                NXOpen::Preferences::SessionModeling::SplineDefaultActionTypes action /** action */ 
            );
            /**Returns  the associative edit free form option. Specify whether the output of editing certain free form features remain 
                as free form features or as unparameterized features.  <br> License requirements : None */
            public: bool AssociativeEditFreeForm
            (
            );
            /**Sets  the associative edit free form option. Specify whether the output of editing certain free form features remain 
                as free form features or as unparameterized features.  <br> License requirements : None */
            public: void SetAssociativeEditFreeForm
            (
                bool associativeEditFreeForm /** associative edit free form */ 
            );
            /**Returns  the position color  <br> License requirements : None */
            public: int PositionColor
            (
            );
            /**Sets  the position color  <br> License requirements : None */
            public: void SetPositionColor
            (
                int positionColor /** position color */ 
            );
            /**Returns  the tangent color  <br> License requirements : None */
            public: int TangentColor
            (
            );
            /**Sets  the tangent color  <br> License requirements : None */
            public: void SetTangentColor
            (
                int tangentColor /** tangent color */ 
            );
            /**Returns  the curvature color  <br> License requirements : None */
            public: int CurvatureColor
            (
            );
            /**Sets  the curvature color  <br> License requirements : None */
            public: void SetCurvatureColor
            (
                int curvatureColor /** curvature color */ 
            );
            /**Returns  the acceleration color  <br> License requirements : None */
            public: int AccelerationColor
            (
            );
            /**Sets  the acceleration color  <br> License requirements : None */
            public: void SetAccelerationColor
            (
                int accelerationColor /** acceleration color */ 
            );
            /**Returns  the B curve pole curve color. This is color of the pole control polygons for B-curves .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PoleDisplayColor or
                 Preferences.SessionModeling.PoleEditColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") int BCurvePoleCurveColor
            (
            );
            /**Sets  the B curve pole curve color. This is color of the pole control polygons for B-curves .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PoleDisplayColor or
                 Preferences.SessionModeling.PoleEditColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetBCurvePoleCurveColor
            (
                int bCurvePoleColor /** b curve pole color */ 
            );
            /**Returns  the B surface pole face color. This is color of the pole control polygons for B-surface .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PoleDisplayColor or
                 Preferences.SessionModeling.PoleEditColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") int BSurfacePoleFaceColor
            (
            );
            /**Sets  the B surface pole face color. This is color of the pole control polygons for B-surface .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PoleDisplayColor or
                 Preferences.SessionModeling.PoleEditColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetBSurfacePoleFaceColor
            (
                int bSurfacePoleFaceColor /** b surface pole face color */ 
            );
            /**Returns  the curve color option for B Curve. If true the user selected color is applied on curve .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PolepolyDisplayInheritColor or
                 Preferences.SessionModeling.PolepolyEditInheritColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") bool UseCurveColor
            (
            );
            /**Sets  the curve color option for B Curve. If true the user selected color is applied on curve .

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PolepolyDisplayInheritColor or
                 Preferences.SessionModeling.PolepolyEditInheritColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetUseCurveColor
            (
                bool useCurveColor /** use curve color */ 
            );
            /**Returns  the face color option for B Surface. If true the user selected color is applied on face.

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PolepolyDisplayInheritColor or
                 Preferences.SessionModeling.PolepolyEditInheritColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") bool UseFaceColor
            (
            );
            /**Sets  the face color option for B Surface. If true the user selected color is applied on face.

                 This property is deprecated. Use 
                 Preferences.SessionModeling.PolepolyDisplayInheritColor or
                 Preferences.SessionModeling.PolepolyEditInheritColor instead. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetUseFaceColor
            (
                bool useFaceColor /** use face color */ 
            );
            /**Returns  the pole color inherit option, for display with B curves.  <br> License requirements : None */
            public: bool PoleDisplayInheritColor
            (
            );
            /**Sets  the pole color inherit option, for display with B curves.  <br> License requirements : None */
            public: void SetPoleDisplayInheritColor
            (
                bool poleDisplayInheritColor /** pole display inherit color */ 
            );
            /**Returns  the polyline color inherit option, for display with B curves and B surfaces.  <br> License requirements : None */
            public: bool PolylineDisplayInheritColor
            (
            );
            /**Sets  the polyline color inherit option, for display with B curves and B surfaces.  <br> License requirements : None */
            public: void SetPolylineDisplayInheritColor
            (
                bool polylineDisplayInheritColor /** polyline display inherit color */ 
            );
            /**Returns  the color for display poles for B curves.  <br> License requirements : None */
            public: int PoleDisplayColor
            (
            );
            /**Sets  the color for display poles for B curves.  <br> License requirements : None */
            public: void SetPoleDisplayColor
            (
                int poleDisplayColor /** pole display color */ 
            );
            /**Returns  the color for display polylines for B curves and B surfaces  <br> License requirements : None */
            public: int PolylineDisplayColor
            (
            );
            /**Sets  the color for display polylines for B curves and B surfaces  <br> License requirements : None */
            public: void SetPolylineDisplayColor
            (
                int polylineDisplayColor /** polyline display color */ 
            );
            /**Returns  the style (3D ball, 2D disk, mark, etc.) of the poles for display of B curves.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PoleDisplayStyleType PoleDisplayStyle
            (
            );
            /**Sets  the style (3D ball, 2D disk, mark, etc.) of the poles for display of B curves.  <br> License requirements : None */
            public: void SetPoleDisplayStyle
            (
                NXOpen::Preferences::SessionModeling::PoleDisplayStyleType poleDisplayStyle /** pole display style */ 
            );
            /**Returns  the style (solid, dashed, etc.) of the polylines display for B curves and B surfaces.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PolylineStyleType PolylineDisplayStyle
            (
            );
            /**Sets  the style (solid, dashed, etc.) of the polylines display for B curves and B surfaces.  <br> License requirements : None */
            public: void SetPolylineDisplayStyle
            (
                NXOpen::Preferences::SessionModeling::PolylineStyleType polylineDisplayStyle /** polyline display style */ 
            );
            /**Returns  the pole color inherit option, for editing B curves and B surfaces.  <br> License requirements : None */
            public: bool PoleEditInheritColor
            (
            );
            /**Sets  the pole color inherit option, for editing B curves and B surfaces.  <br> License requirements : None */
            public: void SetPoleEditInheritColor
            (
                bool poleEditInheritColor /** pole edit inherit color */ 
            );
            /**Returns  the polyline color inherit option, for editing B curves and B surfaces.  <br> License requirements : None */
            public: bool PolylineEditInheritColor
            (
            );
            /**Sets  the polyline color inherit option, for editing B curves and B surfaces.  <br> License requirements : None */
            public: void SetPolylineEditInheritColor
            (
                bool polylineEditInheritColor /** polyline edit inherit color */ 
            );
            /**Returns  the color for editing poles for B curves and B surfaces.  <br> License requirements : None */
            public: int PoleEditColor
            (
            );
            /**Sets  the color for editing poles for B curves and B surfaces.  <br> License requirements : None */
            public: void SetPoleEditColor
            (
                int poleEditColor /** pole edit color */ 
            );
            /**Returns  the color for editing polylines for B curves and B surfaces.  <br> License requirements : None */
            public: int PolylineEditColor
            (
            );
            /**Sets  the color for editing polylines for B curves and B surfaces.  <br> License requirements : None */
            public: void SetPolylineEditColor
            (
                int polylineEditColor /** polyline edit color */ 
            );
            /**Returns  the style (3D ball, 2D disk, mark, etc.) of the poles for editing B curves and B surfaces.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PoleEditStyleType PoleEditStyle
            (
            );
            /**Sets  the style (3D ball, 2D disk, mark, etc.) of the poles for editing B curves and B surfaces.  <br> License requirements : None */
            public: void SetPoleEditStyle
            (
                NXOpen::Preferences::SessionModeling::PoleEditStyleType poleEditStyle /** pole edit style */ 
            );
            /**Returns  the style (solid, dashed, etc.) of the polylines for editing B curves and B surfaces.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PolylineStyleType PolylineEditStyle
            (
            );
            /**Sets  the style (solid, dashed, etc.) of the polylines for editing B curves and B surfaces.  <br> License requirements : None */
            public: void SetPolylineEditStyle
            (
                NXOpen::Preferences::SessionModeling::PolylineStyleType polylineEditStyle /** polyline edit style */ 
            );
            /**Returns  the update delayed option.  If the option is true, then an edited
                feature does not update until @link Update::DoUpdate Update::DoUpdate@endlink  is
                explicitly called.  If the option is false, then the edited feature
                updates immediately.  The default is false.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UpdateDelayed
            (
            );
            /**Sets  the update delayed option.  If the option is true, then an edited
                feature does not update until @link Update::DoUpdate Update::DoUpdate@endlink  is
                explicitly called.  If the option is false, then the edited feature
                updates immediately.  The default is false.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUpdateDelayed
            (
                bool option /** option */ 
            );
            /**Sets  the preview resolution setting.  <br> License requirements : None */
            public: void SetPreviewResolution
            (
                NXOpen::Preferences::SessionModeling::PreviewResolutionType resolution /** resolution */ 
            );
            /**Returns  the preview resolution setting.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PreviewResolutionType PreviewResolution
            (
            );
            /**Sets  the enable trimmed animation setting.  <br> License requirements : None */
            public: void SetEnableTrimmedAnimation
            (
                bool enable /** enable */ 
            );
            /**Returns  the enable trimmed animation setting.  <br> License requirements : None */
            public: bool EnableTrimmedAnimation
            (
            );
            /**Sets  the use triangular mesh setting setting.  <br> License requirements : None */
            public: void SetUseTriangularMesh
            (
                bool use /** use */ 
            );
            /**Returns  the use triangular mesh setting setting.  <br> License requirements : None */
            public: bool UseTriangularMesh
            (
            );
            /**Returns  the option "Edit with Rollback upon Double-Click" gives choice of what action to 
                be taken on feature upon Double clicking, either in partnavigator or in Graphics widow.
                if the option is true then edit with rollback will be happen upon Double-click.
                if the option is false then the previous default action will be executed  <br> License requirements : None */
            public: bool EditWithRollbackUponDoubleClick
            (
            );
            /**Sets  the option "Edit with Rollback upon Double-Click" gives choice of what action to 
                be taken on feature upon Double clicking, either in partnavigator or in Graphics widow.
                if the option is true then edit with rollback will be happen upon Double-click.
                if the option is false then the previous default action will be executed  <br> License requirements : None */
            public: void SetEditWithRollbackUponDoubleClick
            (
                bool defaultEditOption /** preference to Edit with Rollback upon Double-Click */
            );
            /**Returns  the option " Notify on Delete " gives choice, whether the user wants a 
                 notification message when a feature is being deleted will effect other features.
                 if the option is true then it popup a notification message.
                 if the option is true then it will not popup any notification message  <br> License requirements : None */
            public: bool NotifyOnDelete
            (
            );
            /**Sets  the option " Notify on Delete " gives choice, whether the user wants a 
                 notification message when a feature is being deleted will effect other features.
                 if the option is true then it popup a notification message.
                 if the option is true then it will not popup any notification message  <br> License requirements : None */
            public: void SetNotifyOnDelete
            (
                bool notifyOnDelete /** preference to Notify on Delete */
            );
            /**Returns  the option " Save Rollback Data " saves extra data with the part file 
                     for faster edits.  <br> License requirements : None */
            public: bool SaveRollbackData
            (
            );
            /**Sets  the option " Save Rollback Data " saves extra data with the part file 
                     for faster edits.  <br> License requirements : None */
            public: void SetSaveRollbackData
            (
                bool retainRollbackData /** preference to retain rollback data */
            );
            /**Returns  the option "Interrupt Update on Error" gives choice, whether the user 
                 wants the "Edit During Update" dialog to appear when features contain 
                 errors during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: bool InterruptUpdateOnError
            (
            );
            /**Sets  the option "Interrupt Update on Error" gives choice, whether the user 
                 wants the "Edit During Update" dialog to appear when features contain 
                 errors during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: void SetInterruptUpdateOnError
            (
                bool interruptOnError /** preference to Interrupt Update on Error */
            );
            /**Returns  the option "Interrupt Update on Warning" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 warnings during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: bool InterruptUpdateOnWarning
            (
            );
            /**Sets  the option "Interrupt Update on Warning" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 warnings during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: void SetInterruptUpdateOnWarning
            (
                bool interruptOnWarning /** preference to Interrupt Update on Warning */
            );
            /**Returns  the option "Interrupt Update on Missing References" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 missing references during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: bool InterruptUpdateOnMissingReferences
            (
            );
            /**Sets  the option "Interrupt Update on Missing References" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 missing references during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update. <br> License requirements : None */
            public: void SetInterruptUpdateOnMissingReferences
            (
                bool interruptOnMissingReferences /** preference to Interrupt Update on Missing References */
            );
            /**Returns  the option "Make Current on Error" gives choice, whether the user 
                 wants to make error feature current when features contain 
                 errors during feature update/playback.
                 If the option is true then the error feature will be made
                 current.
                 If the option is false then the error feature will not be made current feature
                  during feature update. <br> License requirements : None */
            public: bool MakeCurrentOnError
            (
            );
            /**Sets  the option "Make Current on Error" gives choice, whether the user 
                 wants to make error feature current when features contain 
                 errors during feature update/playback.
                 If the option is true then the error feature will be made
                 current.
                 If the option is false then the error feature will not be made current feature
                  during feature update. <br> License requirements : None */
            public: void SetMakeCurrentOnError
            (
                bool currentOnError /** preference to Make Error Feature Current on Error */
            );
            /**Returns  the option "Feature Alerts" gives choice, whether the
                 user wants the Diagnostic error and information prompts appear when 
                 features contain errors and/or information during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic prompts will appear.
                 if the option is false then prompts will not appear.

                 This property is deprecated. Use 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings, 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation instead.
                 Alerts are always displayed for errors. Display of alerts on warnings/information
                 can be changed by above mentioned properties.
                 Use of deprecated method @link FeatureAlerts FeatureAlerts@endlink  will 
                 always return true as the error alerts are always displayed. 
                 If @link SetFeatureAlerts SetFeatureAlerts@endlink  has no effect on error,
                 warning or information alerts. Use 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings, 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation instead to
                 control the display of warning/information alerts. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") bool FeatureAlerts
            (
            );
            /**Sets  the option "Feature Alerts" gives choice, whether the
                 user wants the Diagnostic error and information prompts appear when 
                 features contain errors and/or information during feature 
                 creation, edit, and update.
                 if the option is true then the diagnostic prompts will appear.
                 if the option is false then prompts will not appear.

                 This property is deprecated. Use 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings, 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation instead.
                 Alerts are always displayed for errors. Display of alerts on warnings/information
                 can be changed by above mentioned properties.
                 Use of deprecated method @link FeatureAlerts FeatureAlerts@endlink  will 
                 always return true as the error alerts are always displayed. 
                 If @link SetFeatureAlerts SetFeatureAlerts@endlink  has no effect on error,
                 warning or information alerts. Use 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings, 
                 Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation instead to
                 control the display of warning/information alerts. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetFeatureAlerts
            (
                bool featureAlerts /** preference to Feature Alerts */
            );
            /**Returns  the option "Update Failure Report" gives choice, whether the
                 user wants the update failure report to be generated for the features that 
                 failed during current update cycle.
                 If the option is true then the update failure report will be launched at the end
                 of every update cycle. It will list only those features that failed in that update 
                 cycle. If the option is false then no such report will be launched. <br> License requirements : None */
            public: bool UpdateFailureReportPreference
            (
            );
            /**Sets  the option "Update Failure Report" gives choice, whether the
                 user wants the update failure report to be generated for the features that 
                 failed during current update cycle.
                 If the option is true then the update failure report will be launched at the end
                 of every update cycle. It will list only those features that failed in that update 
                 cycle. If the option is false then no such report will be launched. <br> License requirements : None */
            public: void SetUpdateFailureReportPreference
            (
                bool updateFailureReport /** update failure report preference */
            );
            /**Returns  the option "allow_editing_of_dimension_of_internal_sketch" gives choice, 
                 whether or not the sketch dimensions will display and be possible to select and edit directly, 
                 without entering the Sketch task environment when a dialog (e.g. Extrude, Revolve, Hole etc.) is active 
                 which allows editing on an internal sketch. <br> License requirements : None */
            public: bool AllowEditingOfDimensionOfInternalSketch
            (
            );
            /**Sets  the option "allow_editing_of_dimension_of_internal_sketch" gives choice, 
                 whether or not the sketch dimensions will display and be possible to select and edit directly, 
                 without entering the Sketch task environment when a dialog (e.g. Extrude, Revolve, Hole etc.) is active 
                 which allows editing on an internal sketch. <br> License requirements : None */
            public: void SetAllowEditingOfDimensionOfInternalSketch
            (
                bool allowEditingOfDimensionOfInternalSketch /** allow sketch dim edit of internal sketch preference */
            );
            /**Returns  the option to specify whether simulation specific UI should show up in modeling  <br> License requirements : None */
            public: bool ShowSimuationUiInModeling
            (
            );
            /**Sets  the option to specify whether simulation specific UI should show up in modeling  <br> License requirements : None */
            public: void SetShowSimuationUiInModeling
            (
                bool showSimuationUiInModeling /** allow simulation specific UI in modeling */
            );
            /**Returns  the option specifying whether to automatically make the datums internal during  
                 the sketch creation. If the option is true then datums are automatically made internal to child sketches, else
                 datums are not automatically made internal to child sketches.  <br> License requirements : None */
            public: bool MakeDatumsInternal
            (
            );
            /**Sets  the option specifying whether to automatically make the datums internal during  
                 the sketch creation. If the option is true then datums are automatically made internal to child sketches, else
                 datums are not automatically made internal to child sketches.  <br> License requirements : None */
            public: void SetMakeDatumsInternal
            (
                bool makeDatumsInternal /** Flag indicating whether to make datums internal */
            );
            /**Returns  the option specifying whether to automatically make sketch internal during  
                 feature creation. If the option is true then external sketches are automatically made internal to child features, else
                 external sketches are not automatically made internal to child features.  <br> License requirements : None */
            public: bool MakeSketchesInternal
            (
            );
            /**Returns  the sketch default action  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SketchDefaultActionType SketchDefaultAction
            (
            );
            /**Sets  the sketch default action  <br> License requirements : None */
            public: void SetSketchDefaultAction
            (
                NXOpen::Preferences::SessionModeling::SketchDefaultActionType sketchAction /** default action on sketches */
            );
            /**Returns  the option that determines whether or not task environment is used to edit the sketch  <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SketchEditType SketchEditOption
            (
            );
            /**Sets  the option that determines whether or not task environment is used to edit the sketch  <br> License requirements : None */
            public: void SetSketchEditOption
            (
                NXOpen::Preferences::SessionModeling::SketchEditType sketchEditOption /** edit option on sketches */
            );
            /**Sets  the option specifying whether to automatically make sketch internal during  
                 feature creation. If the option is true then external sketches are automatically made internal to child features, else
                 external sketches are not automatically made internal to child features.  <br> License requirements : None */
            public: void SetMakeSketchesInternal
            (
                bool makeSketchesInternal /** Flag indicating whether to make sketches internal */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
