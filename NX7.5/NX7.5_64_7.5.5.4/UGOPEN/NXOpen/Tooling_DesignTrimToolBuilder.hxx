#ifndef NXOpen_TOOLING_DESIGNTRIMTOOLBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DESIGNTRIMTOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DesignTrimToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_DesignTrimToolBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class DesignTrimToolBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class NXObject;
    class SelectNXObject;
    namespace Tooling
    {
        class _DesignTrimToolBuilderBuilder;
        class DesignTrimToolBuilderImpl;
        /** Represents a builder to be used to create Mold Wizard design trim tool.  <br> To create a new instance of this class, use @link Tooling::DesignTrimToolCollection::CreateDesignTrimToolBuilder Tooling::DesignTrimToolCollection::CreateDesignTrimToolBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        NewSurfaceLayer </td> <td> 
         
        32 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  DesignTrimToolBuilder : public Builder
        {
            private: DesignTrimToolBuilderImpl * m_designtrimtoolbuilder_impl;
            private: friend class  _DesignTrimToolBuilderBuilder;
            protected: DesignTrimToolBuilder();
            public: ~DesignTrimToolBuilder();
            /**Returns  the face or sheet body.  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SourceObject
            (
            );
            /**Returns  the layer where the new trim surface is created.  <br> License requirements : None */
            public: int NewSurfaceLayer
            (
            );
            /**Sets  the layer where the new trim surface is created.  <br> License requirements : None */
            public: void SetNewSurfaceLayer
            (
                int newSurfaceLayer /** newsurfacelayer */ 
            );
            /** Set details of the trim data.  <br> License requirements : None */
            public: void SetTrimDataDetails
            (
                NXOpen::NXObject * trimPart /** the trim part where to create or edit or trim surface feature. */,
                NXOpen::NXObject * sourceObjectOcc /** the source object occurrence used to create a linked feature in the trim part. */,
                const NXString & currentTrimSurfaceName /** the name to set to the trim surface feature.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & previousTrimSurfaceName /** the previous name of the trim surface feature.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a new trim part component in the work part.  @return  the new component that is created.  <br> License requirements : None */
            public: NXOpen::Assemblies::Component * CreateNewComponent
            (
                const NXString & partName /** the part name for the new component.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & instanceName /** the instance name for the new component.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a Moldwizard default trim surface, including CORE_TRIM_SHEET, CAVITY_TRIM_SHEET, CORE_MOLD_SURFACE, CAVITY_MOLD_SURFACE.  @return  the new sheet that is created.  <br> License requirements : None */
            public: NXOpen::NXObject * CreateDefaultSheet
            (
                const NXString & surfaceName /** the name for the default sheet to create.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject * trimPart /** the trim part where to create the default trim surface feature. */,
                int sheetType /** the sheet type, parting sheet or mold surface. */,
                int layer /** the layer to put the new sheet feature. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
