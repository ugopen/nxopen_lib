#ifndef NXOpen_PREFERENCES_ROUTINGMECHANICAL_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGMECHANICAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingMechanical.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class RoutingMechanical;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Preferences
    {
        class RoutingMechanicalImpl;
        /** The RoutingMechanical object stores a set of route mechanical preferences.  <br> To obtain an instance of this class, refer to @link Preferences::RoutingApplicationView Preferences::RoutingApplicationView@endlink  <br> */
        class NXOPENCPPEXPORT  RoutingMechanical
        {
            /** Describes the Line color string definition types.  */
            public: enum LineColorType
            {
                LineColorTypeUnknown = -1/** unknown */ ,
                LineColorTypeName/** name */ ,
                LineColorTypeIndex/** index */ ,
                LineColorTypeRgb/** rgb */ ,
                LineColorTypeHex/** hex */ ,
                LineColorTypeMax/** max */ 
            };

            private: RoutingMechanicalImpl * m_routingmechanical_impl;
            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            /** Constructor */
            public: explicit RoutingMechanical(NXOpen::Preferences::RoutingApplicationView *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RoutingMechanical();
            /** Returns the information of whether the mechanical preferences section
                        exists in the application view file.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GetIsInitialized
            (
            );
            /** Returns the names of run type displays @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXString> GetRunTypeNames
            (
            );
            /** Returns the line font indices: line font to apply to segments in the run
                        (currently 1-7 supported), 0 indicates unknown line font  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<int> GetLineFontIndices
            (
            );
            /** Returns the names of line font to apply to segments, only used if
                        line_font_index is 0  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXString> GetLineFonts
            (
            );
            /** Returns the thicknesses of segments (currently 0-2 supported)  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<int> GetLineWidths
            (
            );
            /** Returns types of string in line_color field.  Valid values are
                        specified by the @link Preferences::RoutingMechanical::LineColorType Preferences::RoutingMechanical::LineColorType@endlink  .  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Preferences::RoutingMechanical::LineColorType> GetLineColorTypes
            (
            );
            /** Returns the name, index or rgb strings (hex or , seperated) of line color  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXString> GetLineColors
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
