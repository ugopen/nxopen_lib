#ifndef NXOpen_ROUTING_DESIGNRULE_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRule.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRule;
    }
    class NXObject;
    namespace Routing
    {
        class DesignRuleViolation;
    }
    namespace Routing
    {
        class _DesignRuleBuilder;
        class DesignRuleImpl;
        /** Represents @link Routing::DesignRule Routing::DesignRule@endlink  object  <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT  DesignRule : public NXObject
        {
            private: DesignRuleImpl * m_designrule_impl;
            private: friend class  _DesignRuleBuilder;
            protected: DesignRule();
            public: ~DesignRule();
            /**Returns  the name of the design rule is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Drname
            (
            );
            /**Returns  the description of the design rule is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Description
            (
            );
            /**Returns  the application of the design rule that it belongs to is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Application
            (
            );
            /** Violation of the design rule are returned  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::DesignRuleViolation *> GetViolations
            (
            );
            /** Violation are added to the design rule  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AddViolations
            (
                const std::vector<NXOpen::Routing::DesignRuleViolation *> & violations /** violations */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
