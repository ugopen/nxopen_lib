#ifndef NXOpen_BODYDES_ONESTEPUNFORMBUILDER_HXX_INCLUDED
#define NXOpen_BODYDES_ONESTEPUNFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BodyDes_OnestepUnformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BodyDes_OnestepUnformBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace BodyDes
    {
        class OnestepUnformBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    namespace BodyDes
    {
        class _OnestepUnformBuilderBuilder;
        class OnestepUnformBuilderImpl;
        /**
            Represents a @link BodyDes::OnestepUnformBuilder BodyDes::OnestepUnformBuilder@endlink . This allows the creation of an Onestep Unform.
             <br> To create a new instance of this class, use @link BodyDes::OnestepUnformCollection::CreateOnestepBuilder BodyDes::OnestepUnformCollection::CreateOnestepBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  OnestepUnformBuilder : public Features::FeatureBuilder
        {
            /** The process types of onestep unform. */
            public: enum Process
            {
                ProcessEntireUnform/**entire */,
                ProcessIntermediateUnform/**intermediate */,
                ProcessAdvancedUnform/**spring back */
            };

            /** The constraints of onestep unform. */
            public: enum Constraint
            {
                ConstraintCurveToCurve/**Curve to Curve Constraint, used for intermediate unform only */,
                ConstraintPointToPoint/**Point to Point Constraint, used for complete unform only*/,
                ConstraintCurveAlongCurve/**Curve along Curve Constraint, used for complete unform only */
            };

            /** The part types of onestep unform. */
            public: enum Part
            {
                PartWithAddendum/**part with addendum */,
                PartWithoutAddendum/**part without addendum */
            };

            /** The surface types of onestep unform. */
            public: enum Surface
            {
                SurfaceInner/**Onestep solver will offset inner surface and enlarge it*/,
                SurfaceMiddle/**Onestep solver will not offset middle surface */,
                SurfaceOuter/**Onestep solver will offset outer surface and shrink it */
            };

            /** The 2-D mesh element type of onestep unform. */
            public: enum MeshElement
            {
                MeshElementTriangle/**Generate 2D triangle mesh element*/,
                MeshElementQuadrate/**Generate 2D quadrate mesh element*/
            };

            /** The solver convergency level of onestep unform. */
            public: enum Convergency
            {
                ConvergencyLow/**Onestep solver convergency level is low*/,
                ConvergencyMedium/**Onestep solver convergency level is medium*/,
                ConvergencyHigh/**Onestep solver convergency level is high*/
            };

            /** The mode of display springback. */
            public: enum DisplaySpringbackMode
            {
                DisplaySpringbackModeDisplacement/**Onestep display springback mode is displacement*/,
                DisplaySpringbackModeAlongx/**Onestep display springback mode is along X*/,
                DisplaySpringbackModeAlongy/**Onestep display springback mode is along Y*/,
                DisplaySpringbackModeAlongz/**Onestep display springback mode is along Z*/
            };

            /** The Onesetp unfold mode of onestep unform. */
            public: enum UnfoldMode
            {
                UnfoldModeComplete/** Onestep unfold mode is complete */,
                UnfoldModeIntermediate/** Onestep unfold mode is intermediate */,
                UnfoldModeUnknown/** Onestep unfold mode is unknown */
            };

            private: OnestepUnformBuilderImpl * m_onestepunformbuilder_impl;
            private: friend class  _OnestepUnformBuilderBuilder;
            protected: OnestepUnformBuilder();
            public: ~OnestepUnformBuilder();
            /**Returns  the process type for onestep unform.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Process ProcessType
            (
            );
            /**Sets  the process type for onestep unform.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetProcessType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Process processType /** processtype */ 
            );
            /**Returns  the unform region which is a group of faces user chooses to unform.  <br> License requirements : None */
            public: NXOpen::ScCollector * UnformRegion
            (
            );
            /**Returns  the target region which is a group of faces user chooses to unfrom to.  <br> License requirements : None */
            public: NXOpen::ScCollector * TargetRegion
            (
            );
            /**Returns  the constraint type for intermediate unform or complete unform.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Constraint ConstraintType
            (
            );
            /**Sets  the constraint type for intermediate unform or complete unform.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetConstraintType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Constraint constraintType /** constrainttype */ 
            );
            /**Returns  the first match point for spring back calculation.  <br> License requirements : None */
            public: NXOpen::Point * MatchPointOne
            (
            );
            /**Sets  the first match point for spring back calculation.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMatchPointOne
            (
                NXOpen::Point * matchPointOne /** matchpointone */ 
            );
            /**Returns  the second match point for spring back calculation.  <br> License requirements : None */
            public: NXOpen::Point * MatchPointTwo
            (
            );
            /**Sets  the second match point for spring back calculation.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMatchPointTwo
            (
                NXOpen::Point * matchPointTwo /** matchpointtwo */ 
            );
            /**Returns  the third match point for spring back calculation.  <br> License requirements : None */
            public: NXOpen::Point * MatchPointThree
            (
            );
            /**Sets  the third match point for spring back calculation.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMatchPointThree
            (
                NXOpen::Point * matchPointThree /** matchpointthree */ 
            );
            /**Returns  the constraint curve used to define curve to curve or curve along curve constraint. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") NXOpen::ScCollector * ConstraintCurve
            (
            );
            /**Returns  the constraint point used to define point to point constraint for complete unform. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") NXOpen::Point * ConstraintPoint
            (
            );
            /**Sets  the constraint point used to define point to point constraint for complete unform. 
             @deprecated Deprecated in NX6.0.0 <br> 
             <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public:  NX_DEPRECATED("Deprecated in NX6.0.0") void SetConstraintPoint
            (
                NXOpen::Point * constraintPoint /** constraintpoint */ 
            );
            /**Returns  the part type for onestep unform.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Part PartType
            (
            );
            /**Sets  the part type for onestep unform.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetPartType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Part partType /** parttype */ 
            );
            /**Returns  the binder region which is a group of faces user chooses as holder.  <br> License requirements : None */
            public: NXOpen::ScCollector * BinderRegion
            (
            );
            /**Returns  the pressure on blank holder.  <br> License requirements : None */
            public: double Pressure
            (
            );
            /**Sets  the pressure on blank holder.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetPressure
            (
                double pressure /** pressure */ 
            );
            /**Returns  the force on blank holder.  <br> License requirements : None */
            public: double Force
            (
            );
            /**Sets  the force on blank holder.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetForce
            (
                double force /** force */ 
            );
            /**Returns  the force strength on blank holder.  <br> License requirements : None */
            public: double ForceStrength
            (
            );
            /**Sets  the force strength on blank holder.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetForceStrength
            (
                double forceStrength /** forcestrength */ 
            );
            /**Returns  the boundary which is a group of edges user chooses to apply on equivalent force.  <br> License requirements : None */
            public: NXOpen::ScCollector * PartBoundary
            (
            );
            /**Returns  the draw direction used to define the normal of unform base plane.  <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction used to define the normal of unform base plane.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the surface type used to determine offset direction.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Surface SurfaceType
            (
            );
            /**Sets  the surface type used to determine offset direction.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSurfaceType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Surface surfaceType /** surfacetype */ 
            );
            /**Returns  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input. <br> License requirements : None */
            public: bool InferThickness
            (
            );
            /**Sets  the option to infer thickness.
                    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetInferThickness
            (
                bool inferThickness /** inferthickness */ 
            );
            /**Returns  the thickness of sheet metal model.  <br> License requirements : None */
            public: double Thickness
            (
            );
            /**Sets  the thickness of sheet metal model.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetThickness
            (
                double thickness /** thickness */ 
            );
            /** Create FEM 2-D meshes based on the unform region surfaces and the target region surfaces. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void Mesh
            (
            );
            /**Returns  the material property elasticity(E) which enables a material to return to its original shape and dimension.  <br> License requirements : None */
            public: double MaterialPropertyE
            (
            );
            /**Sets  the material property elasticity(E) which enables a material to return to its original shape and dimension.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyE
            (
                double materialPropertyE /** materialpropertye */ 
            );
            /**Returns  the density of material.  <br> License requirements : None */
            public: double MaterialPropertyDensity
            (
            );
            /**Sets  the density of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyDensity
            (
                double materialPropertyDensity /** materialpropertydensity */ 
            );
            /**Returns  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension.  <br> License requirements : None */
            public: double MaterialPropertyPoisson
            (
            );
            /**Sets  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyPoisson
            (
                double materialPropertyPoisson /** materialpropertypoisson */ 
            );
            /**Returns  the yield stress of material.  <br> License requirements : None */
            public: double MaterialPropertyYieldStress
            (
            );
            /**Sets  the yield stress of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyYieldStress
            (
                double materialPropertyYieldStress /** materialpropertyyieldstress */ 
            );
            /**Returns  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour.  <br> License requirements : None */
            public: double MaterialPropertyN
            (
            );
            /**Sets  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyN
            (
                double materialPropertyN /** materialpropertyn */ 
            );
            /**Returns  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test.  <br> License requirements : None */
            public: double MaterialPropertyInitialStrain
            (
            );
            /**Sets  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyInitialStrain
            (
                double materialPropertyInitialStrain /** materialpropertyinitialstrain */ 
            );
            /**Returns  the friction of material.  <br> License requirements : None */
            public: double MaterialPropertyF
            (
            );
            /**Sets  the friction of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyF
            (
                double materialPropertyF /** materialpropertyf */ 
            );
            /**Returns  the K(Strength Coefficient) of material.  <br> License requirements : None */
            public: double MaterialPropertyK
            (
            );
            /**Sets  the K(Strength Coefficient) of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyK
            (
                double materialPropertyK /** materialpropertyk */ 
            );
            /**Returns  the r0(Anisotropy Coefficient) of material.  <br> License requirements : None */
            public: double MaterialPropertyR0
            (
            );
            /**Sets  the r0(Anisotropy Coefficient) of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyR0
            (
                double materialPropertyR0 /** materialpropertyr0 */ 
            );
            /**Returns  the r45(Anisotropy Coefficient) of material.  <br> License requirements : None */
            public: double MaterialPropertyR45
            (
            );
            /**Sets  the r45(Anisotropy Coefficient) of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyR45
            (
                double materialPropertyR45 /** materialpropertyr45 */ 
            );
            /**Returns  the r90(Anisotropy Coefficient) of material.  <br> License requirements : None */
            public: double MaterialPropertyR90
            (
            );
            /**Sets  the r90(Anisotropy Coefficient) of material.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMaterialPropertyR90
            (
                double materialPropertyR90 /** materialpropertyr90 */ 
            );
            /**Returns  the 2-D mesh element type, either triangle or quadrate element. <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::MeshElement MeshElementType
            (
            );
            /**Sets  the 2-D mesh element type, either triangle or quadrate element. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshElementType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::MeshElement meshElementType /** meshelementtype */ 
            );
            /**Returns  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input.  <br> License requirements : None */
            public: bool InferElementSize
            (
            );
            /**Sets  the option to infer 2-D element size. 
                    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetInferElementSize
            (
                bool inforElementSize /** inforelementsize */ 
            );
            /**Returns  the 2-D element size for mesh.  <br> License requirements : None */
            public: double MeshElementSize
            (
            );
            /**Sets  the 2-D element size for mesh.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshElementSize
            (
                double meshElementSize /** meshelementsize */ 
            );
            /**Returns  the option to split quadrate element to triangle element when creating meshes.  <br> License requirements : None */
            public: bool MeshSplitQuad
            (
            );
            /**Sets  the option to split quadrate element to triangle element when creating meshes.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshSplitQuad
            (
                bool meshSplitQuad /** meshsplitquad */ 
            );
            /**Returns  the maximum warp for meshing.  <br> License requirements : None */
            public: double MeshMaxWarp
            (
            );
            /**Sets  the maximum warp for meshing.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshMaxWarp
            (
                double meshMaxWarp /** meshmaxwarp */ 
            );
            /**Returns  the maximum Jacobian for mesh elements. It is used to control the element shape and quality.  <br> License requirements : None */
            public: double MeshMaxJacobian
            (
            );
            /**Sets  the maximum Jacobian for mesh elements. It is used to control the element shape and quality.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshMaxJacobian
            (
                double meshMaxJacobian /** meshmaxjacobian */ 
            );
            /**Returns  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping.  <br> License requirements : None */
            public: bool MeshAttemptMapping
            (
            );
            /**Sets  the option to attemp mapping for mesh elements. 
                    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshAttemptMapping
            (
                bool meshAttemptMapping /** meshattemptmapping */ 
            );
            /**Returns  the variation of mesh element size.  <br> License requirements : None */
            public: int MeshSizeVariation
            (
            );
            /**Sets  the variation of mesh element size.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshSizeVariation
            (
                int meshSizeVariation /** meshsizevariation */ 
            );
            /**Returns  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed.  <br> License requirements : None */
            public: bool MeshProcessFillet
            (
            );
            /**Sets  the option to process fillet for mesh element.
                    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshProcessFillet
            (
                bool meshProcessFillet /** meshprocessfillet */ 
            );
            /**Returns  the value of small feature for mesh setting <br> License requirements : None */
            public: double MeshSmallFeature
            (
            );
            /**Sets  the value of small feature for mesh setting <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetMeshSmallFeature
            (
                double meshSmallFeature /** meshsmallfeature */ 
            );
            /**Returns  the holding force while forming. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") double SolverHoldingForce
            (
            );
            /**Sets  the holding force while forming. 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void SetSolverHoldingForce
            (
                double solverHoldingForce /** solverholdingforce */ 
            );
            /**Returns  the convergency level of onestep solver.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::Convergency SolverConvergencyLevel
            (
            );
            /**Sets  the convergency level of onestep solver.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverConvergencyLevel
            (
                NXOpen::BodyDes::OnestepUnformBuilder::Convergency solverConvergencyLevel /** solverconvergencylevel */ 
            );
            /**Returns the maximum number of iteration steps in onestep solver.  <br> License requirements : None */
            public: int SolverMaxIterationSteps
            (
            );
            /**Sets the maximum number of iteration steps in onestep solver.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverMaxIterationSteps
            (
                int solverMaxIterationSteps /** solvermaxiterationsteps */ 
            );
            /**Returns  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature. <br> License requirements : None */
            public: bool SolverSaveAnalysisResultsIntoFeature
            (
            );
            /**Sets  the option to save analysis result into feature.
                    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverSaveAnalysisResultsIntoFeature
            (
                bool solverSaveAnalysisResultsIntoFeature /** solversaveanalysisresultsintofeature */ 
            );
            /**Returns  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves <br> License requirements : None */
            public: bool SolverJoinOutputCurves
            (
            );
            /**Sets  the option to join output curves.
                    If it is true, join output curves. If it is false, do not join output curves <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverJoinOutputCurves
            (
                bool solverJoinOutputCurves /** solverjoinoutputcurves */ 
            );
            /**Returns  the option to do springback calculation in onestep solver.
                    If it is true, the onestep solver will do springback calculation. If it is false, the solver will not do springback calculation. <br> License requirements : None */
            public: bool SolverDoSpringbackCalculation
            (
            );
            /**Sets  the option to do springback calculation in onestep solver.
                    If it is true, the onestep solver will do springback calculation. If it is false, the solver will not do springback calculation. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverDoSpringbackCalculation
            (
                bool solverDoSpringbackCalculation /** solverdospringbackcalculation */ 
            );
            /**Returns  the option for springback display. 
                    If it is true, it will display springback in absolution 3D distance, or projecte in x/y/z directions. <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::DisplaySpringbackMode SolverDisplaySpringbackMode
            (
            );
            /**Sets  the option for springback display. 
                    If it is true, it will display springback in absolution 3D distance, or projecte in x/y/z directions. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetSolverDisplaySpringbackMode
            (
                NXOpen::BodyDes::OnestepUnformBuilder::DisplaySpringbackMode solverDisplaySpringbackMode /** solverdisplayspringbackmode */ 
            );
            /**Returns  the option to display thickness information in report.
                    If it is true, the thickness information will be displayed in report. If it is false, the report will not display thickness information. <br> License requirements : None */
            public: bool ReportDisplayThickness
            (
            );
            /**Sets  the option to display thickness information in report.
                    If it is true, the thickness information will be displayed in report. If it is false, the report will not display thickness information. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplayThickness
            (
                bool reportDisplayThickness /** reportdisplaythickness */ 
            );
            /**Returns  the option to display stress in report.
                    If it is true, the stress information will be displayed in report. If it is false, the report will not display stress information. <br> License requirements : None */
            public: bool ReportDisplayStress
            (
            );
            /**Sets  the option to display stress in report.
                    If it is true, the stress information will be displayed in report. If it is false, the report will not display stress information. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplayStress
            (
                bool reportDisplayStress /** reportdisplaystress */ 
            );
            /**Returns  the option to display strain in report.
                    If it is true, the report will display strain information. If it is false, the report will not display strain information. <br> License requirements : None */
            public: bool ReportDisplayStrain
            (
            );
            /**Sets  the option to display strain in report.
                    If it is true, the report will display strain information. If it is false, the report will not display strain information. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplayStrain
            (
                bool reportDisplayStrain /** reportdisplaystrain */ 
            );
            /**Returns  the option to display springback result in report.
                    If it is true, the report will display springback result. If it is false, the springback will not be displayed. <br> License requirements : None */
            public: bool ReportDisplaySpringback
            (
            );
            /**Sets  the option to display springback result in report.
                    If it is true, the report will display springback result. If it is false, the springback will not be displayed. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplaySpringback
            (
                bool reportDisplaySpringback /** reportdisplayspringback */ 
            );
            /**Returns  the option to display result flatten shape in report.
                    If it is true, the report will display the flatten shape result. If it is false, the flatten shape will not be displayed in report. <br> License requirements : None */
            public: bool ReportDisplayFlattenShape
            (
            );
            /**Sets  the option to display result flatten shape in report.
                    If it is true, the report will display the flatten shape result. If it is false, the flatten shape will not be displayed in report. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplayFlattenShape
            (
                bool reportDisplayFlattenShape /** reportdisplayflattenshape */ 
            );
            /**Returns  the option to control view while creating screen image in report.
                    If it is true, customer can control the view when capturing the screen image. If it is false, default view will be used in report. <br> License requirements : None */
            public: bool ReportDisplayViewControl
            (
            );
            /**Sets  the option to control view while creating screen image in report.
                    If it is true, customer can control the view when capturing the screen image. If it is false, default view will be used in report. <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetReportDisplayViewControl
            (
                bool reportDisplayViewControl /** reportdisplayviewcontrol */ 
            );
            /**Returns  the onestep unfold mode.  <br> License requirements : None */
            public: NXOpen::BodyDes::OnestepUnformBuilder::UnfoldMode UnfoldModeType
            (
            );
            /**Sets  the onestep unfold mode.  <br> License requirements : nx_onestep_analysis ("NX Onestep Analysis") OR ug_body_design ("Body Design") OR die_engineering ("DIE ENGINEERING") OR aero_sheet_metal ("Aerospace Sheet Metal") */
            public: void SetUnfoldModeType
            (
                NXOpen::BodyDes::OnestepUnformBuilder::UnfoldMode unfoldModeType /** unfoldmodetype */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
