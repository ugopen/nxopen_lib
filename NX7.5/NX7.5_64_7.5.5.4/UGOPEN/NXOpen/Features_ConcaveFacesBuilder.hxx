#ifndef NXOpen_FEATURES_CONCAVEFACESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CONCAVEFACESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ConcaveFacesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ConcaveFacesBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ConcaveFacesBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXColor;
    class ScCollector;
    namespace Features
    {
        class _ConcaveFacesBuilderBuilder;
        class ConcaveFacesBuilderImpl;
        /**
            Represents a Concave Faces builder. These are faces which are concave with respect to the draw direction and whose 
            maximum radii is within the specified range.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateConcaveFacesBuilder Features::FeatureCollection::CreateConcaveFacesBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Lower.Value </td> <td> 
         
        3 (millimeters part), 0.118 (inches part) </td> </tr> 

        <tr><td> 
         
        SamplePoints </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        Upper.Value </td> <td> 
         
        6 (millimeters part), 0.236 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ConcaveFacesBuilder : public Features::FeatureBuilder
        {
            private: ConcaveFacesBuilderImpl * m_concavefacesbuilder_impl;
            private: friend class  _ConcaveFacesBuilderBuilder;
            protected: ConcaveFacesBuilder();
            public: ~ConcaveFacesBuilder();
            /**Returns  the collection of all the possible faces.  <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the vector representing the draw direction.  <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the vector representing the draw direction.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the lower limit of the maximum concave range.  <br> License requirements : None */
            public: NXOpen::Expression * Lower
            (
            );
            /**Returns  the upper limit of the maximum concave range.  <br> License requirements : None */
            public: NXOpen::Expression * Upper
            (
            );
            /**Returns  the number of sample points to apply to the analysis.  <br> License requirements : None */
            public: int SamplePoints
            (
            );
            /**Sets  the number of sample points to apply to the analysis.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSamplePoints
            (
                int samplePoints /** samplepoints */ 
            );
            /**Returns  the title if the face attribute.  <br> License requirements : None */
            public: NXString AttributeTitle
            (
            );
            /**Sets  the title if the face attribute.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeTitle
            (
                const NXString & attributeTitle /** attributetitle */ 
            );
            /**Returns  the value of the face attribute title.  <br> License requirements : None */
            public: NXString AttributeValue
            (
            );
            /**Sets  the value of the face attribute title.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeValue
            (
                const NXString & attributeValue /** attributevalue */ 
            );
            /**Returns  the color to be applied to the face.  <br> License requirements : None */
            public: NXOpen::NXColor * AttributeColor
            (
            );
            /**Sets  the color to be applied to the face.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAttributeColor
            (
                NXOpen::NXColor * attributeColor /** attributecolor */ 
            );
            /**Returns  the distance tolerance.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance.  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
