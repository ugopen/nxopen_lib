#ifndef NXOpen_VISUALREPORTING_VISUALREPORTBUILDER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_VISUALREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_VisualReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_GroupLabel.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/VisualReporting_Rule.hxx>
#include <NXOpen/VisualReporting_VisualReport.hxx>
#include <NXOpen/VisualReporting_VisualReportBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace VisualReporting
    {
        class VisualReportBuilder;
    }
    class Builder;
    namespace VisualReporting
    {
        class Condition;
    }
    namespace VisualReporting
    {
        class GroupLabel;
    }
    namespace VisualReporting
    {
        class Property;
    }
    namespace VisualReporting
    {
        class Rule;
    }
    namespace VisualReporting
    {
        class VisualReport;
    }
    namespace VisualReporting
    {
        class _VisualReportBuilderBuilder;
        class VisualReportBuilderImpl;
        /** A Builder for creating and editing @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink s.
             <br> To create a new instance of this class, use @link VisualReporting::VisualReportManager::CreateVisualReportBuilder VisualReporting::VisualReportManager::CreateVisualReportBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  VisualReportBuilder : public Builder
        {
            private: VisualReportBuilderImpl * m_visualreportbuilder_impl;
            private: friend class  _VisualReportBuilderBuilder;
            protected: VisualReportBuilder();
            public: ~VisualReportBuilder();
            /** Creates a new empty @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  and starts editing it.
                        The created @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  will not be added to the
                        @link VisualReporting::VisualReportManager VisualReporting::VisualReportManager@endlink  until @link Builder::Commit Builder::Commit@endlink 
                        or @link VisualReporting::VisualReportBuilder::CommitAsCopy VisualReporting::VisualReportBuilder::CommitAsCopy@endlink  is called on this builder.
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * CreateVisualReport
            (
            );
            /** Starts editing a @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink . The builder will create a
                        copy of the given VisualReport and all edits will be applied to that copy. When
                        @link Builder::Commit Builder::Commit@endlink  is called on this builder, the supplied
                        VisualReport will be deleted and replaced with the new one. Alternatively if
                        @link VisualReporting::VisualReportBuilder::CommitAsCopy VisualReporting::VisualReportBuilder::CommitAsCopy@endlink  is called the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink 
                        will be applied to the model without deleting the one given in this function.

                        Any current @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  which this builder is currently
                        building will be deleted when this function is called.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void EditVisualReport
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** The visual report */
            );
            /** When @link Builder::Commit Builder::Commit@endlink  is called on this builder, it will
                        delete the @link VisualReporting::VisualReportBuilder::ModelVisualReport VisualReporting::VisualReportBuilder::ModelVisualReport@endlink  and install the
                        @link VisualReporting::VisualReportBuilder::EditedVisualReport VisualReporting::VisualReportBuilder::EditedVisualReport@endlink  in the model.
                        
                        If it is required not to delete the @link VisualReporting::VisualReportBuilder::ModelVisualReport VisualReporting::VisualReportBuilder::ModelVisualReport@endlink 
                        then @link CommitAsCopy CommitAsCopy@endlink  can be called instead. This behaves
                        just like @link Builder::Commit Builder::Commit@endlink  except it does not delete the
                        @link VisualReporting::VisualReportBuilder::ModelVisualReport VisualReporting::VisualReportBuilder::ModelVisualReport@endlink .
                     @return    <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * CommitAsCopy
            (
            );
            /**Returns  the original the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  whose copy the builder is editing.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * ModelVisualReport
            (
            );
            /**Returns  the copy of the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  which the builder is editing.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * EditedVisualReport
            (
            );
            /** Sets the file-name of the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  being built by this
                        builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetFilenameOfVisualReport
            (
                const NXString & filename /** The file-name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the description of the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  being built by this
                        builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetDescriptionOfVisualReport
            (
                const NXString & description /** The description   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the ReportingStyle of
                        the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  being built by this builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetReportingStyleOfVisualReport
            (
                NXOpen::VisualReporting::VisualReport::ReportingStyleOption reportingStyle /** The reporting style being set */
            );
            /** Sets whether use of @link VisualReporting::VisualReport::UnmatchedGroupLabel VisualReporting::VisualReport::UnmatchedGroupLabel@endlink 
                        is enabled for the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  being built by this builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void EnableUnmatchedGroupOfVisualReport
            (
                bool enableUnmatchedGroup /** Whether the unmatched group is enabled */
            );
            /** Sets the @link VisualReporting::Property VisualReporting::Property@endlink  of this condition. If the
                        @link VisualReporting::Property VisualReporting::Property@endlink  is set to NULL, then it is
                        deleted.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetPropertyOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Property * property /** The property being set */
            );
            /** Removes the current @link VisualReporting::Property VisualReporting::Property@endlink  from this condition
                        without deleting it.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RemovePropertyFromCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */
            );
            /** Sets the @link VisualReporting::Condition::OperatorOption VisualReporting::Condition::OperatorOption@endlink  of this condition. Only valid if
                        @link VisualReporting::Condition::OperatorType VisualReporting::Condition::OperatorType@endlink  is
                        @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetOperatorTypeOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The operator type being set */
            );
            /** Add a new child @link VisualReporting::Condition VisualReporting::Condition@endlink  to this condition. If the child is already a
                        child of another @link VisualReporting::Condition VisualReporting::Condition@endlink  or @link VisualReporting::Rule VisualReporting::Rule@endlink , then it is
                        removed from that other object. The new child must have been created in the same
                        @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  as this parent condition. If this is a
                        @link VisualReporting::Condition::TypeOptionNotCondition VisualReporting::Condition::TypeOptionNotCondition@endlink  then
                        this replaces the existing child, and the existing child is deleted.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void AddChildToCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition * childCondition /** The child condition being added */
            );
            /** Removes a condition from its parent condition. If the condition has an associated @link VisualReporting::Property VisualReporting::Property@endlink 
                        that will be deleted too. If the condition has any child conditions, those will all
                        be deleted too.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RemoveChildFromCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                NXOpen::VisualReporting::Condition * childCondition /** The child condition being removed */
            );
            /** Sets @link VisualReporting::Condition::HasUserSpecifiedValue VisualReporting::Condition::HasUserSpecifiedValue@endlink  on the
                        specified @link VisualReporting::Condition VisualReporting::Condition@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetHasUserSpecifiedValueForCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                bool isUserSpecified /** Whether the condition's value should be user-specified */
            );
            /** Sets the @link VisualReporting::Condition::UserPrompt VisualReporting::Condition::UserPrompt@endlink  of the
                        specified @link VisualReporting::Condition VisualReporting::Condition@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetUserPromptOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const NXString & userPrompt /** The user-prompt    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the @link VisualReporting::Condition::Description VisualReporting::Condition::Description@endlink  of the
                        specified @link VisualReporting::Condition VisualReporting::Condition@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetDescriptionOfCondition
            (
                NXOpen::VisualReporting::Condition * condition /** The condition */,
                const NXString & description /** The description   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the Reporting @link VisualReporting::Rule::ClassifierOption VisualReporting::Rule::ClassifierOption@endlink  for this rule
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetClassifierTypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Rule::ClassifierOption classifierType /** The classifier type being set */
            );
            /** Sets the Reporting @link VisualReporting::Property VisualReporting::Property@endlink  for this rule. If the
                        @link VisualReporting::Rule::ReportingProperty VisualReporting::Rule::ReportingProperty@endlink  is set to NULL,
                        then it is deleted.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetReportingPropertyOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Property * reportingProperty /** The property being set */
            );
            /** Sets the datatype of this @link VisualReporting::Rule VisualReporting::Rule@endlink 's reporting property.

                        See @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink  for possible
                        values. However datatype must not be
                        @link VisualReporting::Property::DatatypeOptionUnknown VisualReporting::Property::DatatypeOptionUnknown@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetReportingDatatypeOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Property::DatatypeOption datatype /** The datatype being set */
            );
            /** Removes any existing filter @link VisualReporting::Condition VisualReporting::Condition@endlink  from this rule. This will not delete
                        the condition.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RemoveFilterConditionFromRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */
            );
            /** Sets the filter @link VisualReporting::Condition VisualReporting::Condition@endlink  from this rule. Setting this will delete
                        any existing @link VisualReporting::Rule::FilterCondition VisualReporting::Rule::FilterCondition@endlink  and all of its children
                        (except it won't delete the replacement @link VisualReporting::Condition VisualReporting::Condition@endlink  being set
                        by this call).
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetFilterConditionOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Condition * filterCondition /** The filter condition being set */
            );
            /** Sets whether the @link VisualReporting::VisualReport::ReportingStyleOption VisualReporting::VisualReport::ReportingStyleOption@endlink  of the given
                        @link VisualReporting::Rule VisualReporting::Rule@endlink  uses manual grouping. If it uses manual grouping then no
                        @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink s will be automatically generated, and they should
                        instead be added manually as required using @link VisualReporting::VisualReportBuilder::CreateGroupLabel VisualReporting::VisualReportBuilder::CreateGroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetManualGroupingForRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                bool isManualGrouping /** Whether manual grouping should be used */
            );
            /** Sets the @link VisualReporting::Rule::RangeMethodOption VisualReporting::Rule::RangeMethodOption@endlink  of the given
                        @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetRangeMethodOfRule
            (
                NXOpen::VisualReporting::Rule * rule /** The rule */,
                NXOpen::VisualReporting::Rule::RangeMethodOption rangeMethod /** The range method */
            );
            /** Deletes the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void DeleteGroupLabel
            (
                NXOpen::VisualReporting::Rule * rule /** The rule containing the group label */,
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Resets the @link VisualReporting::GroupLabel::IsNameUserSpecified VisualReporting::GroupLabel::IsNameUserSpecified@endlink 
                        status  of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink  so that the name is now
                        system-generated.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void UnsetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link NXObject::Name NXObject::Name@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink . Calling this function
                        will cause @link VisualReporting::GroupLabel::IsNameUserSpecified VisualReporting::GroupLabel::IsNameUserSpecified@endlink 
                        to return true.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetUserNameOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & name /** The name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the @link VisualReporting::GroupLabel::LowerBound VisualReporting::GroupLabel::LowerBound@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetLowerBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                double lowerBound /** The lower bound */
            );
            /** Sets the @link VisualReporting::GroupLabel::UpperBound VisualReporting::GroupLabel::UpperBound@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetUpperBoundOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                double upperBound /** The upper bound */
            );
            /** Sets the @link VisualReporting::GroupLabel::Value VisualReporting::GroupLabel::Value@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetValueOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXString & value /** The value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the @link VisualReporting::GroupLabel::DisplayStyle VisualReporting::GroupLabel::DisplayStyle@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink  to
                        @link VisualReporting::GroupLabel::DisplayStyleOptionDeEmphasis VisualReporting::GroupLabel::DisplayStyleOptionDeEmphasis@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetDeEmphasisForGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link VisualReporting::GroupLabel::DisplayStyle VisualReporting::GroupLabel::DisplayStyle@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink  to
                        @link VisualReporting::GroupLabel::DisplayStyleOptionOriginalColor VisualReporting::GroupLabel::DisplayStyleOptionOriginalColor@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetOriginalColorForGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */
            );
            /** Sets the @link VisualReporting::GroupLabel::Color VisualReporting::GroupLabel::Color@endlink 
                        of the given @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink . This also changes
                        @link VisualReporting::GroupLabel::DisplayStyle VisualReporting::GroupLabel::DisplayStyle@endlink 
                        to @link VisualReporting::GroupLabel::DisplayStyleOptionSpecifiedColor VisualReporting::GroupLabel::DisplayStyleOptionSpecifiedColor@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetColorOfGroupLabel
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** The group label */,
                const NXOpen::NXColor::Rgb & color /** The color */
            );
            /** Creates a new empty @link VisualReporting::Property VisualReporting::Property@endlink , but does not add it to a
                        @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink .
                     @return  The created property  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property * CreateProperty
            (
                NXOpen::VisualReporting::Property::TypeOption propertyType /** Property Type of the @link VisualReporting::Property VisualReporting::Property@endlink  being created */
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink , but does not add it to a
                        @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateAndCondition
            (
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink , but does not add it to a
                        @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateOrCondition
            (
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink , but does not add it to a
                        @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateNotCondition
            (
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink  is
                        @link VisualReporting::Property::DatatypeOptionString VisualReporting::Property::DatatypeOptionString@endlink ,
                        but does not add it to a @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateStringCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link VisualReporting::Property VisualReporting::Property@endlink  to which this condition will be applied */,
                const NXString & value /** The initial value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink  is
                        @link VisualReporting::Property::DatatypeOptionInteger VisualReporting::Property::DatatypeOptionInteger@endlink ,
                        but does not add it to a @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateIntegerCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link VisualReporting::Property VisualReporting::Property@endlink  to which this condition will be applied */,
                int value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink  is
                        @link VisualReporting::Property::DatatypeOptionReal VisualReporting::Property::DatatypeOptionReal@endlink ,
                        but does not add it to a @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateRealCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link VisualReporting::Property VisualReporting::Property@endlink  to which this condition will be applied */,
                double value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */,
                double tolerance /** The tolerance used in comparisons */
            );
            /** Creates a new empty @link VisualReporting::Condition VisualReporting::Condition@endlink  whose
                        @link VisualReporting::Condition::Datatype VisualReporting::Condition::Datatype@endlink  is
                        @link VisualReporting::Property::DatatypeOptionBoolean VisualReporting::Property::DatatypeOptionBoolean@endlink ,
                        but does not add it to a @link VisualReporting::Rule VisualReporting::Rule@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * CreateBooleanCondition
            (
                NXOpen::VisualReporting::Property * property /** The @link VisualReporting::Property VisualReporting::Property@endlink  to which this condition will be applied */,
                bool value /** The initial value */,
                NXOpen::VisualReporting::Condition::OperatorOption operatorType /** The initial operator */
            );
            /** Creates a new empty @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink , and adds it to the given
                        @link VisualReporting::Rule VisualReporting::Rule@endlink . This can only be called if the rule's
                        @link VisualReporting::Rule::GroupingMethod VisualReporting::Rule::GroupingMethod@endlink  is
                        @link VisualReporting::Rule::GroupingMethodOptionManual VisualReporting::Rule::GroupingMethodOptionManual@endlink .
                     @return  The created condition  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::GroupLabel * CreateGroupLabel
            (
                const NXString & name /** The initial name. If this name is empty then a system-generated name will be
                                                                                                                                    assigned when the owning @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  is next activated   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::VisualReporting::Rule * rule /** The rule to which to add it */,
                NXOpen::VisualReporting::GroupLabel * afterGroupLabel /** The group label after which to add it. If NULL then it is inserted
                                                                                                                                    at the beginning before any existing group labels */
            );
            /** Sets the keywords of the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  being built by this
                        builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetKeywordsOfVisualReport
            (
                const NXString & keywords /** A comma separated string of keywords   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the descriptive category of the @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink 
                        being built by this builder.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetDescriptiveCategoryOfVisualReport
            (
                const NXString & category /** The category being set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
