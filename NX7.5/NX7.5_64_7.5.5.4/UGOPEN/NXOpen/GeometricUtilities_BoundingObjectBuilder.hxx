#ifndef NXOpen_GEOMETRICUTILITIES_BOUNDINGOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_BOUNDINGOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_BoundingObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BoundingObjectBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class BoundingObjectBuilder;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Point;
    class SelectDisplayableObject;
    namespace GeometricUtilities
    {
        class _BoundingObjectBuilderBuilder;
        class BoundingObjectBuilderImpl;
        /**
            Represents a @link GeometricUtilities::BoundingObjectBuilder GeometricUtilities::BoundingObjectBuilder@endlink 
            */
        class NXOPENCPPEXPORT  BoundingObjectBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents Bounding Object option types. */
            public: enum Method
            {
                MethodExistingCurve/** Existing Curve */,
                MethodProjectPoint/** Project Point */,
                MethodLineBy2Points/** Line by 2 Points */,
                MethodPointAndVector/** Point and Vector */,
                MethodByPlane/** By Plane */
            };

            private: BoundingObjectBuilderImpl * m_boundingobjectbuilder_impl;
            private: friend class  _BoundingObjectBuilderBuilder;
            protected: BoundingObjectBuilder();
            public: ~BoundingObjectBuilder();
            /**Returns  the bounding object method  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BoundingObjectBuilder::Method BoundingObjectMethod
            (
            );
            /**Sets  the bounding object method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingObjectMethod
            (
                NXOpen::GeometricUtilities::BoundingObjectBuilder::Method boundingObjectMethod /** boundingobjectmethod */ 
            );
            /**Returns  the existing bounding curve. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodExistingCurve  GeometricUtilities::BoundingObjectBuilder::MethodExistingCurve@endlink   <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * BoundingCurve
            (
            );
            /**Returns  the bounding project point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodProjectPoint  GeometricUtilities::BoundingObjectBuilder::MethodProjectPoint@endlink   <br> License requirements : None */
            public: NXOpen::Point * BoundingProjectPoint
            (
            );
            /**Sets  the bounding project point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodProjectPoint  GeometricUtilities::BoundingObjectBuilder::MethodProjectPoint@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingProjectPoint
            (
                NXOpen::Point * projectPoint /** projectpoint */ 
            );
            /**Returns  the bounding point1. This represents first bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points@endlink   <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint1
            (
            );
            /**Sets  the bounding point1. This represents first bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint1
            (
                NXOpen::Point * point1 /** point1 */ 
            );
            /**Returns  the bounding point2. This represents second bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points@endlink   <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint2
            (
            );
            /**Sets  the bounding point2. This represents second bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points  GeometricUtilities::BoundingObjectBuilder::MethodLineBy2Points@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint2
            (
                NXOpen::Point * point2 /** point2 */ 
            );
            /**Returns  the bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector@endlink   <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint
            (
            );
            /**Sets  the bounding point. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the bounding vector. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector@endlink   <br> License requirements : None */
            public: NXOpen::Direction * BoundingVector
            (
            );
            /**Sets  the bounding vector. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector  GeometricUtilities::BoundingObjectBuilder::MethodPointAndVector@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the bounding plane. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodByPlane  GeometricUtilities::BoundingObjectBuilder::MethodByPlane@endlink   <br> License requirements : None */
            public: NXOpen::Plane * BoundingPlane
            (
            );
            /**Sets  the bounding plane. This is applicable for @link  GeometricUtilities::BoundingObjectBuilder::MethodByPlane  GeometricUtilities::BoundingObjectBuilder::MethodByPlane@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the intersection reference  <br> License requirements : None */
            public: NXOpen::Point * IntersectionReference
            (
            );
            /**Sets  the intersection reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetIntersectionReference
            (
                NXOpen::Point * intersectionReference /** intersectionreference */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
