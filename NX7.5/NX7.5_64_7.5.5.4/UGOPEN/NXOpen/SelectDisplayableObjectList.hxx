#ifndef NXOpen_SELECTDISPLAYABLEOBJECTLIST_HXX_INCLUDED
#define NXOpen_SELECTDISPLAYABLEOBJECTLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SelectDisplayableObjectList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CaeObjectType.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/InferSnapType.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/SelectionMethod.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SelectDisplayableObjectList;
    class DisplayableObject;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectObject;
    class SelectionMethod;
    class View;
    class _SelectDisplayableObjectListBuilder;
    class SelectDisplayableObjectListImpl;
    /** Represents a list of objects on a selection list.
    */
    class NXOPENCPPEXPORT  SelectDisplayableObjectList : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
    {
        private: SelectDisplayableObjectListImpl * m_selectdisplayableobjectlist_impl;
        private: friend class  _SelectDisplayableObjectListBuilder;
        protected: SelectDisplayableObjectList();
        public: ~SelectDisplayableObjectList();
        /** Adds an object to the list
             @return  True if succesully added to list;
                                          False if the object was already a member
                                          of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            NXOpen::DisplayableObject * object /** object to add */
        );
        /** Adds a set of objects to the list
             @return  True if succesully added all objects to the list;
                                          False if there was at least one object that was already a
                                          member of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects to add */
        );
        /** Adds the objects from a SelectionMethod to the list
             @return  True if succesully added all objects to the list;
                                          False if there was at least one object that was already a
                                          member of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            NXOpen::SelectionMethod * inputSelectionMethod /** selection method containing objects to add */
        );
        /** Adds the object with the objects view and objects point
             @return  True if succesully added to list;
                                          False if the object was already a member
                                          of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            NXOpen::DisplayableObject * selection /** selected object */,
            NXOpen::View * view /** selected object view*/,
            const NXOpen::Point3d & point /** selected object point*/
        );
        /** Remove specified object from list.
             @return  True if succesully removed from list;
                                            False if the object was not a member of the list  <br> License requirements : None */
        public: bool Remove
        (
            NXOpen::DisplayableObject * object /** Object to remove */
        );
        /** Remove specified object from list.
             @return  True if succesully removed from list;
                                            False if the object / view was not a member of the list  <br> License requirements : None */
        public: bool Remove
        (
            NXOpen::DisplayableObject * object /** Object to remove */,
            NXOpen::View * view /** with this view*/
        );
        /** Remove specified object from list.
             @return  True if succesully removed from list;
                                            False if the object was not a member of the list  <br> License requirements : None */
        public: bool Remove
        (
            NXOpen::InferSnapType::SnapType snapType /**  snap point type*/,
            NXOpen::DisplayableObject * selection1 /** first selected object */,
            NXOpen::View * view1 /** first selected object view*/,
            const NXOpen::Point3d & point1 /**first  selected object point*/,
            NXOpen::DisplayableObject * selection2 /** second selected object */,
            NXOpen::View * view2 /**second  selected object view*/,
            const NXOpen::Point3d & point2 /** second selected object point*/
        );
        /** Remove specified objects from list.
             @return  True if succesully removed from list;
                                            False if the object was not a member of the list  <br> License requirements : None */
        public: bool RemoveArray
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** Objects to remove */
        );
        /** Removes the objects from a SelectionMethod from the list
             @return  True if succesully removed all objects from the list;
                                            False if there was at least one object that was not a
                                            member of the list  <br> License requirements : None */
        public: bool Remove
        (
            NXOpen::SelectionMethod * inputSelectionMethod /** selection method containing objects to add */
        );
        /** Removes all items from the list.
             <br> License requirements : None */
        public: void Clear
        (
        );
        /** Returns whether the specified object is already in the list or not.
             @return  true if object is in the list, false otherwise  <br> License requirements : None */
        public: bool Contains
        (
            NXOpen::DisplayableObject * object /** object to check */
        );
        /**Returns  the number of objects in the list.
             <br> License requirements : None */
        public: int Size
        (
        );
        /**Returns  whether duplicate objects are allowed in the selection list.
             <br> License requirements : None */
        public: bool DuplicatesAllowed
        (
        );
        /** Sets the list of objects in the selection list. This will clear any existing
            items in the list.
             <br> License requirements : None */
        public: void SetArray
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** items to put in the list*/
        );
        /** Returns the list of objects in the selection list.
             @return  items in list  <br> License requirements : None */
        public: std::vector<NXOpen::DisplayableObject *> GetArray
        (
        );
        /** Returns the list of SelectObjects in the selection list.
             @return  items in list  <br> License requirements : None */
        public: std::vector<NXOpen::SelectObject *> GetSelectObjectArray
        (
        );
        /** The object being selected with the objects view and objects point and snap information.
             @return  True if succesully added all objects to the list;
                                          False if there was at least one object that was already a
                                          member of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            NXOpen::InferSnapType::SnapType snapType /**  snap point type*/,
            NXOpen::DisplayableObject * selection1 /** first selected object */,
            NXOpen::View * view1 /** first selected object view*/,
            const NXOpen::Point3d & point1 /**first  selected object point*/,
            NXOpen::DisplayableObject * selection2 /** second selected object */,
            NXOpen::View * view2 /**second  selected object view*/,
            const NXOpen::Point3d & point2 /** second selected object point*/
        );
        /** The object being selected with CAE set object information.
             @return  True if succesully added all objects to the list;
                                          False if there was at least one object that was already a
                                          member of the list and duplicates are not allowed  <br> License requirements : None */
        public: bool Add
        (
            NXOpen::DisplayableObject * selection /** selected object */,
            NXOpen::CaeObjectType::CaeSubType caeSubType /** CAE set object sub type*/,
            int caeSubId /** CAE set object sub id*/
        );
        /** Returns true if the inputs to the component are sufficient for 
                    commit to be called.  For example, if the component requires
                    you to set some property, this method will return false if
                    you haven't set it.  This method throws a not-yet-implemented
                    NXException for some components.
                 @return  Was self validation successful  <br> License requirements : None */
        public: virtual bool Validate
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
