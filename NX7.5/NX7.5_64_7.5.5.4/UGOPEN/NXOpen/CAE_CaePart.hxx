#ifndef NXOpen_CAE_CAEPART_HXX_INCLUDED
#define NXOpen_CAE_CAEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CaePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/CAE_BeamSectionOffsetOptions.hxx>
#include <NXOpen/CAE_BeamSectionOptions.hxx>
#include <NXOpen/CAE_BeamSectionOrientationOptions.hxx>
#include <NXOpen/CAE_CaeDataContainer.hxx>
#include <NXOpen/CAE_MaterialOptions.hxx>
#include <NXOpen/CAE_SolverAppendOption.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CaePart;
    }
    class BasePart;
    namespace CAE
    {
        class BeamSectionOffsetOptions;
    }
    namespace CAE
    {
        class BeamSectionOptions;
    }
    namespace CAE
    {
        class BeamSectionOrientationOptions;
    }
    namespace CAE
    {
        class CaeDataContainer;
    }
    namespace CAE
    {
        class CaeGroupCollection;
    }
    namespace CAE
    {
        class MaterialOptions;
    }
    namespace CAE
    {
        class MeshControlDisplayManager;
    }
    namespace CAE
    {
        class ModelCheckManager;
    }
    namespace CAE
    {
        class ModelDisplayBuilder;
    }
    namespace CAE
    {
        class ModelingObjectPropertyTableCollection;
    }
    namespace CAE
    {
        class NodeElementInfoManager;
    }
    namespace CAE
    {
        class PhysicalPropertyTableCollection;
    }
    namespace CAE
    {
        class SelectElementsManager;
    }
    namespace CAE
    {
        class ShowHideManager;
    }
    namespace CAE
    {
        class SmartSelectionManager;
    }
    namespace CAE
    {
        class SolverAppendOption;
    }
    namespace CAE
    {
        class _CaePartBuilder;
        class CaePartImpl;
        /**  @brief  This is an abstract class for NX parts of type .fem and .sim  

           <br> This is an abstract class <br> */
        class NXOPENCPPEXPORT  CaePart : public BasePart
        {
            private: CaePartImpl * m_caepart_impl;
            private: friend class  _CaePartBuilder;
            protected: CaePart();
            public: ~CaePart();
            /** Creates a @link  CAE::MaterialOptions   CAE::MaterialOptions @endlink 
                     @return  the material options object created  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::MaterialOptions * NewMaterialOptions
            (
            );
            /** Exports JT file
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportJt
            (
                const NXString & fileName /** the JT file name to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports the Simulation data for a @link  CAE::CaePart   CAE::CaePart @endlink .
                         <br> 
                        For a @link  CAE::SimPart   CAE::SimPart @endlink , the data will be exported for the
                        active solution @link  CAE::SimSolution   CAE::SimSolution @endlink  if its solver matches
                        the specified solverName.
                         <br>  <br> 
                        For a @link  CAE::FemPart   CAE::FemPart @endlink , the data will be exported only if the solver
                        defined for the @link  CAE::FemPart   CAE::FemPart @endlink  matches the specified solverName.
                         <br>  <br> 
                        Export is driven by the properties defined in the input
                        @link  CAE::CaeDataContainer   CAE::CaeDataContainer @endlink  propertyList.  The exact properties can vary from
                        solver to solver. An accurate list of property names is obtained by journaling the opertation first.
                         <br> 

                         <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ExportSimulation
            (
                const NXString & solverName /** the name of the solver export   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeDataContainer * propertyList /** the export parameters. See @link CAE::CaeSession::GetDataContainer  CAE::CaeSession::GetDataContainer @endlink .
                 */
            );
            /** Creates a @link  CAE::BeamSectionOptions   CAE::BeamSectionOptions @endlink 
                     @return  the syncrhonize options object created  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::BeamSectionOptions * NewBeamSectionOptions
            (
            );
            /** Creates a builder for model display controls command @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder * CreateModelDisplayBuilder
            (
            );
            /** Gets the description assoicated with the Cae part
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetDescription
            (
                std::vector<NXString> & description /** description */
            );
            /** Sets the description assoicated with the Cae part
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDescription
            (
                std::vector<NXString> & description /** description   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link  CAE::BeamSectionOrientationOptions   CAE::BeamSectionOrientationOptions @endlink 
                     @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::BeamSectionOrientationOptions * NewBeamSectionOrientationOptions
            (
            );
            /** Creates a @link  CAE::BeamSectionOffsetOptions   CAE::BeamSectionOffsetOptions @endlink 
                     @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::BeamSectionOffsetOptions * NewBeamSectionOffsetOptions
            (
            );
            /** Imports the solver specific data into an existing @link  CAE::FemPart   CAE::FemPart @endlink  or
                        @link  CAE::SimPart   CAE::SimPart @endlink .
                         <br> 
                        The data will be imported only if the solver defined for the @link  CAE::FemPart   CAE::FemPart @endlink 
                        or @link  CAE::SimPart   CAE::SimPart @endlink  matches the specified solverName.
                         <br>  <br> 
                        Import is driven by the properties defined in the input
                        @link  CAE::CaeDataContainer   CAE::CaeDataContainer @endlink  propertyList.  The exact properties can vary from
                        solver to solver. An accurate list of property names is obtained by journaling the opertation first.
                         <br> 
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ImportExistingSimulation
            (
                const NXString & solverName /** the name of the solver import   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeDataContainer * propertyList /** the import parameters. See @link CAE::CaeSession::GetDataContainer  CAE::CaeSession::GetDataContainer @endlink .
                 */
            );
            /** Returns a solver append option object for importing the solver specific data into an existing
                        @link  CAE::FemPart   CAE::FemPart @endlink  or @link  CAE::SimPart   CAE::SimPart @endlink .
                     @return  the object of solver append option  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SolverAppendOption * CreateSolverAppendOption
            (
            );
            /** Deletes a solver append option object for importing the solver specific data into an existing
                        @link  CAE::FemPart   CAE::FemPart @endlink  or @link  CAE::SimPart   CAE::SimPart @endlink .
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteSolverAppendOption
            (
                NXOpen::CAE::SolverAppendOption * appendOption /** the object of solver append option */
            );


            /** Returns the physical property table collection belonging to this CAE Part */
            public: NXOpen::CAE::PhysicalPropertyTableCollection *PhysicalPropertyTables();
            /** Returns the modeling object property table collection belonging to this CAE Part */
            public: NXOpen::CAE::ModelingObjectPropertyTableCollection *ModelingObjectPropertyTables();
            /** Returns the CAE Group collection belonging to this Part */
            public: NXOpen::CAE::CaeGroupCollection *CaeGroups();
            /** Returns the smart selection manager belonging to this part */
            public: NXOpen::CAE::SmartSelectionManager *SmartSelectionMgr();
            /** Returns the node element info manager belonging to this IFem */
            public: NXOpen::CAE::NodeElementInfoManager *NodeElementInfoMgr();
            /** Returns the select element manager belonging to this IFem */
            public: NXOpen::CAE::SelectElementsManager *SelectElementMgr();
            /** Returns the mesh control display manager belonging to this IFem */
            public: NXOpen::CAE::MeshControlDisplayManager *MeshControlDisplayMgr();
            /** Returns the select element manager belonging to this IFem */
            public: NXOpen::CAE::ModelCheckManager *ModelCheckMgr();
            /** Returns the show hide manager belonging to the part */
            public: NXOpen::CAE::ShowHideManager *ShowHideMgr();
        };
    }
}
#undef EXPORTLIBRARY
#endif
