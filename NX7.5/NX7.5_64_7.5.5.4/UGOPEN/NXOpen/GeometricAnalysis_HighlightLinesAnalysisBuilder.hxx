#ifndef NXOpen_GEOMETRICANALYSIS_HIGHLIGHTLINESANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_HIGHLIGHTLINESANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_HighlightLinesAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_HighlightLinesAnalysisBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class HighlightLinesAnalysisBuilder;
    }
    class Builder;
    class SelectDisplayableObjectList;
    class SelectPointList;
    namespace GeometricAnalysis
    {
        class _HighlightLinesAnalysisBuilderBuilder;
        class HighlightLinesAnalysisBuilderImpl;
        /** 
            Represents a
            @link GeometricAnalysis::HighlightLinesAnalysis GeometricAnalysis::HighlightLinesAnalysis@endlink 
            builder. Highlight Lines Analysis function can produce both reflection lines and projection
            lines which are used to evaluate the surface quality and continuity between adjacent surfaces.
             <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateHighlightLinesAnalysisBuilder GeometricAnalysis::AnalysisObjectCollection::CreateHighlightLinesAnalysisBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        LightNumber </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        LightSpacing </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        Resolution </td> <td> 
         
        Fine </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  HighlightLinesAnalysisBuilder : public Builder
        {
            /** three types of light methods */
            public: enum Types
            {
                TypesUniform/** Uniform: Lights are placed uniformly on light plane */,
                TypesThroughPoints/** Through Points: A highlight line is guaranteed to pass through a surface point. */,
                TypesBetweenPoints/** Between Points: Two highlight lines are guaranteed to
                        pass through two given surface points. More highlight lines
                        are created between these two highlight lines when light
                        number is more than two. */
            };

            /** resolution options */
            public: enum Resolutions
            {
                ResolutionsCoarse/** Coarse */,
                ResolutionsStandard/** Standard */,
                ResolutionsFine/** Fine */,
                ResolutionsExtraFine/** Extra Fine */,
                ResolutionsSuperFine/** Super Fine */,
                ResolutionsUltraFine/** Ultra Fine */
            };

            /** display methods */
            public: enum DisplayMethods
            {
                DisplayMethodsReflection/** Create reflection lines */,
                DisplayMethodsProjection/** Create projection lines */
            };

            private: HighlightLinesAnalysisBuilderImpl * m_highlightlinesanalysisbuilder_impl;
            private: friend class  _HighlightLinesAnalysisBuilderBuilder;
            protected: HighlightLinesAnalysisBuilder();
            public: ~HighlightLinesAnalysisBuilder();
            /**Returns  the face list  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Faces
            (
            );
            /**Returns  the through points  <br> License requirements : None */
            public: NXOpen::SelectPointList * ThroughPoints
            (
            );
            /**Returns  the between points  <br> License requirements : None */
            public: NXOpen::SelectPointList * BetweenPoints
            (
            );
            /**Returns  the number of lights. It's used by Uniform type and Between Points type.  <br> License requirements : None */
            public: int LightNumber
            (
            );
            /**Sets  the number of lights. It's used by Uniform type and Between Points type.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLightNumber
            (
                int lightNumber /** lightnumber */ 
            );
            /**Returns  the light spacing between two adjacent lights. It's used by Uniform type  <br> License requirements : None */
            public: double LightSpacing
            (
            );
            /**Sets  the light spacing between two adjacent lights. It's used by Uniform type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLightSpacing
            (
                double lightSpacing /** lightspacing */ 
            );
            /** Reinitialize light plane based on the selected faces. If
                    more faces are selected, you may need to change
                    light plane, so the light plane could be better centered.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void ReinitializePlane
            (
            );
            /**Returns  the origin of the light plane  <br> License requirements : None */
            public: NXOpen::Point3d LightPlaneOrigin
            (
            );
            /** Sets the origin of the light plane.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLightPlaneOrigin
            (
                const NXOpen::Point3d & origin /** coordinates of origin */
            );
            /**Returns  the x-axis of the light plane  <br> License requirements : None */
            public: NXOpen::Vector3d LightPlaneXAxis
            (
            );
            /** Sets the x-axis of the light plane.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLightPlaneXAxis
            (
                const NXOpen::Vector3d & xAxis /** x-axis vector */
            );
            /**Returns  the y-axis of the light plane  <br> License requirements : None */
            public: NXOpen::Vector3d LightPlaneYAxis
            (
            );
            /** Sets the y-axis of the light plane.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLightPlaneYAxis
            (
                const NXOpen::Vector3d & yAxis /** y-axis vector */
            );
            /**Returns  the display method  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::DisplayMethods DisplayMethod
            (
            );
            /**Sets  the display method  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDisplayMethod
            (
                NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::DisplayMethods displayMethod /** displaymethod */ 
            );
            /**Returns  the lock reflection. When the lock is on, the reflection lines will be freezed
                    while the view is changing. Otherwise, the reflection lines
                    will be updated continuously while view is changing.  <br> License requirements : None */
            public: bool IsReflectionLocked
            (
            );
            /**Sets  the lock reflection. When the lock is on, the reflection lines will be freezed
                    while the view is changing. Otherwise, the reflection lines
                    will be updated continuously while view is changing.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetReflectionLocked
            (
                bool isReflectionLocked /** isreflectionlocked */ 
            );
            /**Returns  the resolution.  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::Resolutions Resolution
            (
            );
            /**Sets  the resolution.  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetResolution
            (
                NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::Resolutions resolution /** resolution */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetType
            (
                NXOpen::GeometricAnalysis::HighlightLinesAnalysisBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
