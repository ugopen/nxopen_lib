#ifndef NXOpen_TOOLING_MOTIONSIMULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MOTIONSIMULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MotionSimulationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_MotionSimulationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class MotionSimulationBuilder;
    }
    class Builder;
    class Expression;
    class SelectBody;
    class SelectBodyList;
    namespace Tooling
    {
        class _MotionSimulationBuilderBuilder;
        class MotionSimulationBuilderImpl;
        /** Represents a @link Tooling::MotionSimulationBuilder Tooling::MotionSimulationBuilder@endlink  to support dynamic interference check.  <br> To create a new instance of this class, use @link Tooling::MotionSimulationCollection::CreateMotionSimulationBuilder Tooling::MotionSimulationCollection::CreateMotionSimulationBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CamDefinitionMethod </td> <td> 
         
        AutomaticalDefinedCam </td> </tr> 

        <tr><td> 
         
        CrankRadius.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CsysVisibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DiePitch.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IncludeBlank </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LiftHeight.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MachineStroke.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripTravel.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StrokeAngleStep.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TransferEndAngle.Value </td> <td> 
         
        250 </td> </tr> 

        <tr><td> 
         
        TransferStartAngle.Value </td> <td> 
         
        110 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  MotionSimulationBuilder : public Builder
        {
            /** Specifies the operation options of motion simulation. */
            public: enum Types
            {
                TypesAddKinematicModel/** Adds kinematic model */,
                TypesMountComponent/** Mounts die components to kinematic components*/,
                TypesDefineCam/** Defines cams */,
                TypesRunSimulation/** Runs simulation result */
            };

            /** Specifies the style type of moldbase, two-plate style or three-plate style */
            public: enum MoldbaseStyleType
            {
                MoldbaseStyleTypeTwo/**  Specifies two-plate style moldbase */,
                MoldbaseStyleTypeThree/** Specifies three-plate style moldbase */
            };

            /** Specifies the way to define cam, automatically or manually. */
            public: enum CamDefinitionType
            {
                CamDefinitionTypeAutomaticalDefinedCam/** Defines cam automatically */,
                CamDefinitionTypeUserDefinedCam/** Defines cam interactively */
            };

            private: MotionSimulationBuilderImpl * m_motionsimulationbuilder_impl;
            private: friend class  _MotionSimulationBuilderBuilder;
            protected: MotionSimulationBuilder();
            public: ~MotionSimulationBuilder();
            /**Returns  the target directory to save cloned kinematic model.  <br> License requirements : None */
            public: NXString TargetDirectory
            (
            );
            /**Sets  the target directory to save cloned kinematic model.  <br> License requirements : None */
            public: void SetTargetDirectory
            (
                const NXString & foldername /** foldername */ 
            );
            /**Returns  the renaming rule to clone kinematic model.  <br> License requirements : None */
            public: NXString RenameRule
            (
            );
            /**Sets  the renaming rule to clone kinematic model.  <br> License requirements : None */
            public: void SetRenameRule
            (
                const NXString & renameRule /** renamerule */ 
            );
            /**Returns  the csys visibility to specify if hide csys in kinematic model  <br> License requirements : None */
            public: bool CsysVisibility
            (
            );
            /**Sets  the csys visibility to specify if hide csys in kinematic model  <br> License requirements : None */
            public: void SetCsysVisibility
            (
                bool csysVisibility /** csysvisibility */ 
            );
            /**Returns  the include blank flag to specify if blanked bodies need to be mounted to kinematic model  <br> License requirements : None */
            public: bool IncludeBlank
            (
            );
            /**Sets  the include blank flag to specify if blanked bodies need to be mounted to kinematic model  <br> License requirements : None */
            public: void SetIncludeBlank
            (
                bool includeBlank /** includeblank */ 
            );
            /**Returns  the component to assign die components mounted to a kinematic component.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * Component
            (
            );
            /**Returns  the kinematic model to specify whose parameters need to be modified.  <br> License requirements : None */
            public: NXOpen::SelectBody * KinematicModel
            (
            );
            /**Returns  the moldbase style to control the visibility of process parameters for mold  <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::MoldbaseStyleType MoldbaseStyle
            (
            );
            /**Sets  the moldbase style to control the visibility of process parameters for mold  <br> License requirements : None */
            public: void SetMoldbaseStyle
            (
                NXOpen::Tooling::MotionSimulationBuilder::MoldbaseStyleType moldbaseStyle /** moldbasestyle */ 
            );
            /**Returns  the machine stroke to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * MachineStroke
            (
            );
            /**Returns  the crank radius to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * CrankRadius
            (
            );
            /**Returns  the strip travel to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * StripTravel
            (
            );
            /**Returns  the lift height to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * LiftHeight
            (
            );
            /**Returns  the die pitch to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * DiePitch
            (
            );
            /**Returns  the angle to specify when transfer starts moving.  <br> License requirements : None */
            public: NXOpen::Expression * TransferStartAngle
            (
            );
            /**Returns  the angle to specify when transfer stops moving.  <br> License requirements : None */
            public: NXOpen::Expression * TransferEndAngle
            (
            );
            /**Returns  the stroke angle step to calculate controller data.  <br> License requirements : None */
            public: NXOpen::Expression * StrokeAngleStep
            (
            );
            /**Returns  the constrol data to import to kinematic model  <br> License requirements : None */
            public: NXString ControlDataFile
            (
            );
            /**Sets  the constrol data to import to kinematic model  <br> License requirements : None */
            public: void SetControlDataFile
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the cam definition method, automatically or manually.  <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::CamDefinitionType CamDefinitionMethod
            (
            );
            /**Sets  the cam definition method, automatically or manually.  <br> License requirements : None */
            public: void SetCamDefinitionMethod
            (
                NXOpen::Tooling::MotionSimulationBuilder::CamDefinitionType camDefinitionMethod /** camdefinitionmethod */ 
            );
            /**Returns  the type to specify which operation of motion simulation takes effect.  <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::Types Type
            (
            );
            /**Sets  the type to specify which operation of motion simulation takes effect.  <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::MotionSimulationBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
