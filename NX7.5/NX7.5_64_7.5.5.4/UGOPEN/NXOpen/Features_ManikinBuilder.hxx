#ifndef NXOpen_FEATURES_MANIKINBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MANIKINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ManikinBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ManikinBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ManikinBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _ManikinBuilderBuilder;
        class ManikinBuilderImpl;
        /**
            Represents a @link Features::Manikin Features::Manikin@endlink  builder
             <br> To create a new instance of this class, use @link Features::AutomotiveCollection::CreateManikinBuilder Features::AutomotiveCollection::CreateManikinBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AHPHeight.Value </td> <td> 
         
        325 (millimeters part), 12.8 (inches part) </td> </tr> 

        <tr><td> 
         
        AHPLength.Value </td> <td> 
         
        698.5 (millimeters part), 27.5 (inches part) </td> </tr> 

        <tr><td> 
         
        AHPToSWCHeight.Value </td> <td> 
         
        620 (millimeters part), 24.41 (inches part) </td> </tr> 

        <tr><td> 
         
        AHPToSWCLength.Value </td> <td> 
         
        500 (millimeters part), 19.69 (inches part) </td> </tr> 

        <tr><td> 
         
        AllowPostureValueOutOfRange </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ArmLength.Value </td> <td> 
         
        296.12 (millimeters part), 11.66 (inches part) </td> </tr> 

        <tr><td> 
         
        BackAngle.Value </td> <td> 
         
        22 </td> </tr> 

        <tr><td> 
         
        Classification </td> <td> 
         
        ClassA </td> </tr> 

        <tr><td> 
         
        DrivingPostureCheck </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ForearmLength.Value </td> <td> 
         
        268.83 (millimeters part), 10.58 (inches part) </td> </tr> 

        <tr><td> 
         
        HandGripLength.Value </td> <td> 
         
        120.89 (millimeters part), 4.76 (inches part) </td> </tr> 

        <tr><td> 
         
        HandLength.Value </td> <td> 
         
        244.09 (millimeters part), 9.61 (inches part) </td> </tr> 

        <tr><td> 
         
        JointAngleReport </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LegLength.Value </td> <td> 
         
        436.82 (millimeters part), 17.20 (inches part) </td> </tr> 

        <tr><td> 
         
        PedalPlaneAngle.Value </td> <td> 
         
        51 </td> </tr> 

        <tr><td> 
         
        Position </td> <td> 
         
        Driver </td> </tr> 

        <tr><td> 
         
        SAEPercentile </td> <td> 
         
        J826Type95thPercentile </td> </tr> 

        <tr><td> 
         
        SgRPHeight.Value </td> <td> 
         
        650 (millimeters part), 25.6 (inches part) </td> </tr> 

        <tr><td> 
         
        SgRPLength.Value </td> <td> 
         
        1500 (millimeters part), 59 (inches part) </td> </tr> 

        <tr><td> 
         
        SgRPWidth.Value </td> <td> 
         
        -400 (millimeters part), -15.75 (inches part) </td> </tr> 

        <tr><td> 
         
        ShoulderToHipLength.Value </td> <td> 
         
        442 (millimeters part), 17.40 (inches part) </td> </tr> 

        <tr><td> 
         
        Standard </td> <td> 
         
        SAEJ826Jul1995 </td> </tr> 

        <tr><td> 
         
        ThighLength.Value </td> <td> 
         
        469.26 (millimeters part), 18.47 (inches part) </td> </tr> 

        <tr><td> 
         
        TorsoLength.Value </td> <td> 
         
        563 (millimeters part), 22.17 (inches part) </td> </tr> 

        <tr><td> 
         
        WheelAngle.Value </td> <td> 
         
        15 </td> </tr> 

        <tr><td> 
         
        WheelDiameter.Value </td> <td> 
         
        400 (millimeters part), 15.75 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ManikinBuilder : public Features::FeatureBuilder
        {
            /**the vehicle seat position type*/
            public: enum PositionType
            {
                PositionTypeDriver/**Driver Type*/,
                PositionTypePassenger/**Passenger Type*/
            };

            /**the vehicle classification type*/
            public: enum ClassificationType
            {
                ClassificationTypeClassA/**Class A Classification Type. The type of vehicles includes passenger cars, vans, and light trucks.*/,
                ClassificationTypeClassB/**Class B Classification Type. The type of vehicles includes heavy trucks, some buses and multipurpose passenger vehicles.*/
            };

            /**the vehicle standard type*/
            public: enum StandardType
            {
                StandardTypeSAEJ826Jul1995/**SAE j826 Standard Type*/,
                StandardTypeSaej833/**SAE j833 Standard Type*/,
                StandardTypeUserDefined/**User Defined Manikin Size Type*/
            };

            /**the vehicle percentile type*/
            public: enum SAEPercentileType
            {
                SAEPercentileTypeJ826Type95thPercentile/**95th Percentile SAE j826 Standard Type*/,
                SAEPercentileTypeJ826Type50thPercentile/**50th Percentile SAE j826 Standard Type*/,
                SAEPercentileTypeJ826Type10thPercentile/**10th Percentile SAE j826 Standard Type*/,
                SAEPercentileTypeJ833LargeHuman95thMale/**Large Human SAE j833 Standard Type*/,
                SAEPercentileTypeJ833MediumHumanHalfwayPosition/**Medium Human SAE j833 Standard Type*/,
                SAEPercentileTypeJ833SmallHuman5thFemale/**Small Human SAE j833 Standard Type*/
            };

            private: ManikinBuilderImpl * m_manikinbuilder_impl;
            private: friend class  _ManikinBuilderBuilder;
            protected: ManikinBuilder();
            public: ~ManikinBuilder();
            /**Returns  the position of the manikin in the vehicle  <br> License requirements : None */
            public: NXOpen::Features::ManikinBuilder::PositionType Position
            (
            );
            /**Sets  the position of the manikin in the vehicle  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPosition
            (
                NXOpen::Features::ManikinBuilder::PositionType position /** position */ 
            );
            /**Returns  the classification of the vehicle  <br> License requirements : None */
            public: NXOpen::Features::ManikinBuilder::ClassificationType Classification
            (
            );
            /**Sets  the classification of the vehicle  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetClassification
            (
                NXOpen::Features::ManikinBuilder::ClassificationType classification /** classification */ 
            );
            /**Returns  the standard used to define the manikin  <br> License requirements : None */
            public: NXOpen::Features::ManikinBuilder::StandardType Standard
            (
            );
            /**Sets  the standard used to define the manikin  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetStandard
            (
                NXOpen::Features::ManikinBuilder::StandardType standard /** standard */ 
            );
            /**Returns  the setting to indicate if posture values can be out of the standard range or not, 
                        true indicates the values can be out of range, false indicates the values cannot be out of range.  <br> License requirements : None */
            public: bool AllowPostureValueOutOfRange
            (
            );
            /**Sets  the setting to indicate if posture values can be out of the standard range or not, 
                        true indicates the values can be out of range, false indicates the values cannot be out of range.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAllowPostureValueOutOfRange
            (
                bool allowPostureValueOutOfRange /** allowposturevalueoutofrange */ 
            );
            /**Returns  the percentile limit that the manikin represents. 
                        If the Standard is set to @link Features::ManikinBuilder::StandardTypeSAEJ826Jul1995 Features::ManikinBuilder::StandardTypeSAEJ826Jul1995@endlink ,
                        then the valid settings are: @link Features::ManikinBuilder::SAEPercentileTypeJ826Type95thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type95thPercentile@endlink ,
                        @link Features::ManikinBuilder::SAEPercentileTypeJ826Type50thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type50thPercentile@endlink  and 
                        @link Features::ManikinBuilder::SAEPercentileTypeJ826Type10thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type10thPercentile@endlink .
                        If the standard is set to @link Features::ManikinBuilder::StandardTypeSaej833 Features::ManikinBuilder::StandardTypeSaej833@endlink ,
                        then the valid settings are: @link Features::ManikinBuilder::SAEPercentileTypeJ833LargeHuman95thMale Features::ManikinBuilder::SAEPercentileTypeJ833LargeHuman95thMale@endlink ,
                        @link Features::ManikinBuilder::SAEPercentileTypeJ833MediumHumanHalfwayPosition Features::ManikinBuilder::SAEPercentileTypeJ833MediumHumanHalfwayPosition@endlink  and
                        @link Features::ManikinBuilder::SAEPercentileTypeJ833SmallHuman5thFemale Features::ManikinBuilder::SAEPercentileTypeJ833SmallHuman5thFemale@endlink .  <br> License requirements : None */
            public: NXOpen::Features::ManikinBuilder::SAEPercentileType SAEPercentile
            (
            );
            /**Sets  the percentile limit that the manikin represents. 
                        If the Standard is set to @link Features::ManikinBuilder::StandardTypeSAEJ826Jul1995 Features::ManikinBuilder::StandardTypeSAEJ826Jul1995@endlink ,
                        then the valid settings are: @link Features::ManikinBuilder::SAEPercentileTypeJ826Type95thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type95thPercentile@endlink ,
                        @link Features::ManikinBuilder::SAEPercentileTypeJ826Type50thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type50thPercentile@endlink  and 
                        @link Features::ManikinBuilder::SAEPercentileTypeJ826Type10thPercentile Features::ManikinBuilder::SAEPercentileTypeJ826Type10thPercentile@endlink .
                        If the standard is set to @link Features::ManikinBuilder::StandardTypeSaej833 Features::ManikinBuilder::StandardTypeSaej833@endlink ,
                        then the valid settings are: @link Features::ManikinBuilder::SAEPercentileTypeJ833LargeHuman95thMale Features::ManikinBuilder::SAEPercentileTypeJ833LargeHuman95thMale@endlink ,
                        @link Features::ManikinBuilder::SAEPercentileTypeJ833MediumHumanHalfwayPosition Features::ManikinBuilder::SAEPercentileTypeJ833MediumHumanHalfwayPosition@endlink  and
                        @link Features::ManikinBuilder::SAEPercentileTypeJ833SmallHuman5thFemale Features::ManikinBuilder::SAEPercentileTypeJ833SmallHuman5thFemale@endlink .  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetSAEPercentile
            (
                NXOpen::Features::ManikinBuilder::SAEPercentileType sAEPercentile /** saepercentile */ 
            );
            /**Returns  the current manikin size string. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXString CurrentManikinSize
            (
            );
            /**Sets  the current manikin size string. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCurrentManikinSize
            (
                const NXString & currentManikinSize /** currentmanikinsize */ 
            );
            /**Returns  the thigh length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * ThighLength
            (
            );
            /**Returns  the leg length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * LegLength
            (
            );
            /**Returns  the arm length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * ArmLength
            (
            );
            /**Returns  the forearm length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * ForearmLength
            (
            );
            /**Returns  the torso length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * TorsoLength
            (
            );
            /**Returns  the shoulder to hip length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * ShoulderToHipLength
            (
            );
            /**Returns  the hand length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * HandLength
            (
            );
            /**Returns  the hand grip length. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * HandGripLength
            (
            );
            /** Save the manikin size definition into a file. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SaveToFile
            (
                const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Update the manikin size definition from a file. It is only used when the vehicle standard type is set to 
                        @link Features::ManikinBuilder::StandardTypeUserDefined Features::ManikinBuilder::StandardTypeUserDefined@endlink .  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void OpenFromFile
            (
                const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the SgRP length  <br> License requirements : None */
            public: NXOpen::Expression * SgRPLength
            (
            );
            /**Returns  the SgRP width  <br> License requirements : None */
            public: NXOpen::Expression * SgRPWidth
            (
            );
            /**Returns  the SgRP height  <br> License requirements : None */
            public: NXOpen::Expression * SgRPHeight
            (
            );
            /**Returns  the back angle  <br> License requirements : None */
            public: NXOpen::Expression * BackAngle
            (
            );
            /**Returns  the AHP length  <br> License requirements : None */
            public: NXOpen::Expression * AHPLength
            (
            );
            /**Returns  the AHP height  <br> License requirements : None */
            public: NXOpen::Expression * AHPHeight
            (
            );
            /**Returns  the pedal plane angle  <br> License requirements : None */
            public: NXOpen::Expression * PedalPlaneAngle
            (
            );
            /**Returns  the AHP to Steering Wheel Center length. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * AHPToSWCLength
            (
            );
            /**Returns  the AHP to Steering Wheel Center height. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * AHPToSWCHeight
            (
            );
            /**Returns  the wheel diameter. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * WheelDiameter
            (
            );
            /**Returns  the wheel angle. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink .  <br> License requirements : None */
            public: NXOpen::Expression * WheelAngle
            (
            );
            /**Returns  the driving posture check. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink 
                        and vehicle SAE percentile type is not small human type.  <br> License requirements : None */
            public: bool DrivingPostureCheck
            (
            );
            /**Sets  the driving posture check. It is only used when the vehicle style type is set to 
                        @link Features::ManikinBuilder::PositionTypeDriver Features::ManikinBuilder::PositionTypeDriver@endlink 
                        and vehicle SAE percentile type is not small human type.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetDrivingPostureCheck
            (
                bool drivingPostureCheck /** drivingposturecheck */ 
            );
            /**Returns  the joint angle report  <br> License requirements : None */
            public: bool JointAngleReport
            (
            );
            /**Sets  the joint angle report  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetJointAngleReport
            (
                bool jointAngleReport /** jointanglereport */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
