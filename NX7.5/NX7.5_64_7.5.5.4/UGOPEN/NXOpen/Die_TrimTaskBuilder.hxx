#ifndef NXOpen_DIE_TRIMTASKBUILDER_HXX_INCLUDED
#define NXOpen_DIE_TRIMTASKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_TrimTaskBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class TrimTaskBuilder;
    }
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ILocation;
    class IProfile;
    class ISurface;
    class View;
    namespace Die
    {
        class _TrimTaskBuilderBuilder;
        class TrimTaskBuilderImpl;
        /** Represents a Trim Task feature builder.  <br> To create a new instance of this class, use @link Die::DieCollection::TrimTask Die::DieCollection::TrimTask@endlink  <br> */
        class NXOPENCPPEXPORT  TrimTaskBuilder : public Features::FeatureBuilder
        {
            /** Settings for the cam type of the trim task. */
            public: enum CamTypes
            {
                CamTypesDirect = 2/** Direct */,
                CamTypesAerial = 0/** Aerial Cam */,
                CamTypesBaseMounted/** Base Mounted Cam */
            };

            /** Settings for the match cut type of the trim task. */
            public: enum MatchCutTypes
            {
                MatchCutTypesNone/** No match cut. */,
                MatchCutTypesAtStart/** At start plane only. */,
                MatchCutTypesAtEnd/** At end plane only. */,
                MatchCutTypesAtBoth/** At both start and end planes. */
            };

            private: TrimTaskBuilderImpl * m_trimtaskbuilder_impl;
            private: friend class  _TrimTaskBuilderBuilder;
            protected: TrimTaskBuilder();
            public: ~TrimTaskBuilder();
            /**Returns  the tipped product of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tippedProduct /** The tip of the operation where the trim
                                                                                   task resides. */
            );
            /** Sets the trim bounds of the trim task.
                    Note - @link Die::TrimTaskBuilder::SetTippedProduct Die::TrimTaskBuilder::SetTippedProduct@endlink  needs to be called before this function.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTrimBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** Profile entries that make up the 
                                                                                                              boundary of the trim task */
            );
            /** Gets the trim bounds of the trim task  @return  Profile entries that make up the 
                                                                                                       boundary of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetTrimBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /**Returns  the cam direction of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ILocation * CamDirection
            (
            );
            /**Sets  the cam direction of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamDirection
            (
                NXOpen::ILocation * camDirection /** cam direction */ 
            );
            /**Returns  the start plane of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ISurface * StartPlane
            (
            );
            /**Sets  the start plane of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetStartPlane
            (
                NXOpen::ISurface * startPlane /** start plane */ 
            );
            /**Returns  the end plane of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ISurface * EndPlane
            (
            );
            /**Sets  the end plane of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetEndPlane
            (
                NXOpen::ISurface * endPlane /** end plane */ 
            );
            /** Sets the scrap cutters of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetScrapCutters
            (
                const std::vector<NXOpen::ISurface *> & planes /** planes */ 
            );
            /** Gets the scrap cutters of the trim task  @return   <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::ISurface *> GetScrapCutters
            (
            );
            /** Sets the associative objects of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAssociativeObjects
            (
                const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
            );
            /** Gets the associative objects of the trim task  @return   <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::DisplayableObject *> GetAssociativeObjects
            (
            );
            /** Sets the camera views of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraViews
            (
                const std::vector<NXOpen::View *> & objects /** objects */ 
            );
            /** Gets the camera views of the trim task  @return   <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::View *> GetCameraViews
            (
            );
            /**Returns  the finish operation of the trim task 
                    True indicates the trim is to be a finish trim. False indicates rough trim.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FinishOperation
            (
            );
            /**Sets  the finish operation of the trim task 
                    True indicates the trim is to be a finish trim. False indicates rough trim.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFinishOperation
            (
                bool finishOperation /** finish operation */ 
            );
            /**Returns  the layout flange setting of the trim task. 
                    True indicates that the trim curve is to be laid out on the flange.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool LayoutFlange
            (
            );
            /**Sets  the layout flange setting of the trim task. 
                    True indicates that the trim curve is to be laid out on the flange.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetLayoutFlange
            (
                bool layoutFlange /** layout flange */ 
            );
            /**Returns  the create scrap setting of the trim task. 
                    True indicates that the scrap is to be created.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool CreateScrap
            (
            );
            /**Sets  the create scrap setting of the trim task. 
                    True indicates that the scrap is to be created.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCreateScrap
            (
                bool createScrap /** create scrap */ 
            );
            /**Returns  the reverse trim side setting of the trim task. 
                    True indicates that the trim side should be reversed.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool ReverseTrimSide
            (
            );
            /**Sets  the reverse trim side setting of the trim task. 
                    True indicates that the trim side should be reversed.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReverseTrimSide
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the match cut type of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::TrimTaskBuilder::MatchCutTypes MatchCutType
            (
            );
            /**Sets  the match cut type of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutType
            (
                NXOpen::Die::TrimTaskBuilder::MatchCutTypes matchCutType /** match cut type */ 
            );
            /**Returns  the cam type of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::TrimTaskBuilder::CamTypes CamType
            (
            );
            /**Sets  the cam type of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCamType
            (
                NXOpen::Die::TrimTaskBuilder::CamTypes camType /** cam type */ 
            );
            /**Returns  the angle tolerance of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
            /**Returns  the distance tolerance of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /** Sets the detailed description of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDetails
            (
                std::vector<NXString> & strings /** detail strings   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the detailed description of the trim task  @return  detail strings  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetDetails
            (
            );
            /**Returns  the match cut notch offset dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutNotchOffset
            (
            );
            /**Sets  the match cut notch offset dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutNotchOffset
            (
                double notchOffset /** notch offset from trim line */
            );
            /**Returns  the match cut first radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutFirstRadius
            (
            );
            /**Sets  the match cut first radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutFirstRadius
            (
                double firstRadius /** first radius after notch */
            );
            /**Returns  the match cut second radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutSecondRadius
            (
            );
            /**Sets  the match cut second radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutSecondRadius
            (
                double secondRadius /** second radius after notch */
            );
            /**Returns  the match cut offset length dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutOffsetLength
            (
            );
            /**Sets  the match cut offset length dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutOffsetLength
            (
                double offsetLength /** length of offset piece */
            );
            /**Returns  the match cut third radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutThirdRadius
            (
            );
            /**Sets  the match cut third radius dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutThirdRadius
            (
                double thirdRadius /** radius between offset piece and entension line */
            );
            /**Returns  the match cut extension angle dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutExtensionAngle
            (
            );
            /**Sets  the match cut extension angle dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutExtensionAngle
            (
                double extensionAngle /** angle of extension line from perpendicular */
            );
            /**Returns  the match cut scrap cutter length dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutScrapCutterLength
            (
            );
            /**Sets  the match cut scrap cutter length dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutScrapCutterLength
            (
                double scrapCutterLength /** entension line length */
            );
            /**Returns  the match cut offset from plane dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double MatchCutOffsetFromPlane
            (
            );
            /**Sets  the match cut offset from plane dimension of the trim task  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMatchCutOffsetFromPlane
            (
                double offsetFromPlane /** offset from scrap cutter plane */
            );
            /** Gets the camera layer settings and xmlp data  @return  1 layer setting string for each camera object. 
                                                                           the string needs to be 256 characters long 
                                                                           (one for each user layer) with either 0 for off
                                                                           or 1 for on.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraLayerAndXmlp
            (
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the camera layer settings and xmlp data  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraLayerAndXmlp
            (
                std::vector<NXString> & layerSettings /** 1 layer setting string for each camera object. 
                                                                               the string needs to be 256 characters long 
                                                                               (one for each user layer) with either 0 for off
                                                                               or 1 for on.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & xmlpData /** xmlp data */
            );
            /** Sets the names of the camera  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCameraNames
            (
                std::vector<NXString> & strings /** each string contains the name of a camera object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the names of the camera  @return  each string contains the name of a camera object  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetCameraNames
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
