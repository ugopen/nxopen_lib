#ifndef NXOpen_FEATURES_REVOLVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REVOLVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RevolveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RevolveBuilder;
    }
    class Axis;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class FeatureOffset;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class Limits;
    }
    class Section;
    namespace Features
    {
        class _RevolveBuilderBuilder;
        class RevolveBuilderImpl;
        /** Represents a revolve builder. 
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRevolveBuilder Features::FeatureCollection::CreateRevolveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RevolveBuilder : public Features::FeatureBuilder
        {
            private: RevolveBuilderImpl * m_revolvebuilder_impl;
            private: friend class  _RevolveBuilderBuilder;
            protected: RevolveBuilder();
            public: ~RevolveBuilder();
            /**Sets  the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSection
            (
                NXOpen::Section * section /** This parameter may not be NULL.*/
            );
            /**Returns  the section
                 <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Sets  the revolve axis
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** This parameter may not be NULL.*/
            );
            /**Returns  the revolve axis
                 <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Returns  the revolve offset
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOffset * Offset
            (
            );
            /**Returns  the revolve boolean
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns  the revolve tolerance
                 <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the revolve tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the limit data
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Limits * Limits
            (
            );
            /**Returns  the feature options
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
            /**Returns  the Offset enabled status 
                     <br> 
                    This is deprecated. Please use @link GeometricUtilities::FeatureOffset::Option GeometricUtilities::FeatureOffset::Option @endlink and @link GeometricUtilities::FeatureOffset::SetOption GeometricUtilities::FeatureOffset::SetOption @endlink  instead.    
                     <br>     
                
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") bool OffsetEnabled
            (
            );
            /**Sets  the Offset enabled status 
                     <br> 
                    This is deprecated. Please use @link GeometricUtilities::FeatureOffset::Option GeometricUtilities::FeatureOffset::Option @endlink and @link GeometricUtilities::FeatureOffset::SetOption GeometricUtilities::FeatureOffset::SetOption @endlink  instead.    
                     <br>     
                
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void SetOffsetEnabled
            (
                bool offsetEnabled /** If true then offset will be enabled on this revolve, else it will be disabled. */
            );
            /** If until selected option is used for start limit and the selected entity intersects the revolve
                    multiple times, this point (in parasolid units) will help the system determine which intersection to select.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartLimitHelperPoint
            (
                const std::vector<double> & startHelperPoint /**If given start trim limit intersects with revolve multiple times, solution closest to this point will be used.*/
            );
            /** If until selected option is used for end limit and the selected entity intersects the revolve
                    multiple times, this point (in parasolid units) will help the system determine which intersection to select.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndLimitHelperPoint
            (
                const std::vector<double> & endHelperPoint /**If given end trim limit intersects with revolve multiple times, solution closest to this point will be used.*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
