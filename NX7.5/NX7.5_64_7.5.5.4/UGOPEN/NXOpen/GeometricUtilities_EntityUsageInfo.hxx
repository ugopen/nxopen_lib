#ifndef NXOpen_GEOMETRICUTILITIES_ENTITYUSAGEINFO_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ENTITYUSAGEINFO_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_EntityUsageInfo.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_EntityUsageInfo.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class EntityUsageInfo;
    }
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace GeometricUtilities
    {
        class _EntityUsageInfoBuilder;
        class EntityUsageInfoImpl;
        /**
            Represents a @link GeometricUtilities::EntityUsageInfo GeometricUtilities::EntityUsageInfo@endlink . An object of this class provides the
            dependency information for a single reparentable entity (edge or face). The creation of @link GeometricUtilities::EntityUsageInfo GeometricUtilities::EntityUsageInfo@endlink 
            is restricted for internal use (see @link GeometricUtilities::ReplAsstBuilder GeometricUtilities::ReplAsstBuilder@endlink ).
            */
        class NXOPENCPPEXPORT  EntityUsageInfo : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** enum for usage status */
            public: enum Status
            {
                StatusUnused/** unused */,
                StatusIntraPart/** used in same part */,
                StatusInterPart/** used interpart */
            };

            private: EntityUsageInfoImpl * m_entityusageinfo_impl;
            private: friend class  _EntityUsageInfoBuilder;
            protected: EntityUsageInfo();
            public: ~EntityUsageInfo();
            /**Returns  the important entity.  <br> License requirements : None */
            public: NXOpen::DisplayableObject * Entity
            (
            );
            /** Query the dependent features of this entity. Use 'typeOfUsage' to restrict the query to
                        intra-part features or to include interpart features too.  <br> License requirements : None */
            public: void GetDependentFeatures
            (
                NXOpen::GeometricUtilities::EntityUsageInfo::Status typeOfUsage /** desired level of usage information */,
                std::vector<NXOpen::Features::Feature *> & dependentFeatures /** dependent features */,
                std::vector<NXString> & detailedUsageInfo /** detailed usage information for each dependent feature */
            );
            /** Query other dependents of this entity. Use 'typeOfUsage' to restrict the query to
                        intra-part dependents or to include interpart usage too.  <br> License requirements : None */
            public: void GetOtherDependents
            (
                NXOpen::GeometricUtilities::EntityUsageInfo::Status typeOfUsage /** desired level of usage information */,
                std::vector<NXOpen::NXObject *> & otherDependents /** dependent objects */,
                std::vector<NXString> & detailedUsageInfo /** detailed usage information for each dependent object */
            );
            /**Returns  the usage status of the corresponding entity  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EntityUsageInfo::Status UsageStatus
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
