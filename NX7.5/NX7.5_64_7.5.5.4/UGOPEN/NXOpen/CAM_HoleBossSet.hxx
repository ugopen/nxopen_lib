#ifndef NXOpen_CAM_HOLEBOSSSET_HXX_INCLUDED
#define NXOpen_CAM_HOLEBOSSSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_HoleBossSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_HoleBossSet.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class HoleBossSet;
    }
    namespace CAM
    {
        class InferredDouble;
    }
    class NXObject;
    namespace CAM
    {
        class _HoleBossSetBuilder;
        class HoleBossSetImpl;
        /** Represents a Cut Area Geometry builder  <br> To obtain an instance of this class use @link CAM::HoleBossSet CAM::HoleBossSet@endlink  <br> */
        class NXOPENCPPEXPORT  HoleBossSet : public TaggedObject
        {
            private: HoleBossSetImpl * m_holebossset_impl;
            private: friend class  _HoleBossSetBuilder;
            protected: HoleBossSet();
            public: ~HoleBossSet();
            /**Returns  the Depth  <br> License requirements : None */
            public: double Depth
            (
            );
            /**Sets  the Depth  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepth
            (
                double depthValue /** the Depth */
            );
            /**Returns  the Tool Axis  <br> License requirements : None */
            public: NXOpen::NXObject * ToolAxis
            (
            );
            /**Sets  the Tool Axis  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxis
            (
                NXOpen::NXObject * toolAxis /** the tool axis */
            );
            /**Returns  the Diameter  <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the Diameter  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDiameter
            (
                double holeBossValue /** the Diameter */
            );
            /**Returns  the Major Diameter  <br> License requirements : None */
            public: double MajorDiameter
            (
            );
            /**Sets  the Major Diameter  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMajorDiameter
            (
                double holeBossValue /** the Major Diameter */
            );
            /**Returns  the Minor Diameter  <br> License requirements : None */
            public: double MinorDiameter
            (
            );
            /**Sets  the Minor Diameter  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinorDiameter
            (
                double holeBossValue /** the Minor Diameter */
            );
            /**Returns  the Length  <br> License requirements : None */
            public: double Length
            (
            );
            /**Sets  the Length  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLength
            (
                double holeBossValue /** the Length */
            );
            /**Returns  the Size  <br> License requirements : None */
            public: NXString Size
            (
            );
            /**Sets  the Size  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSize
            (
                const NXString & holeBossValue /** the Size */
            );
            /**Returns  the depth builder  <br> License requirements : None */
            public: NXOpen::CAM::InferredDouble * DepthBuilder
            (
            );
            /**Returns  the diameter builder  <br> License requirements : None */
            public: NXOpen::CAM::InferredDouble * DiameterBuilder
            (
            );
            /**Returns  the length builder  <br> License requirements : None */
            public: NXOpen::CAM::InferredDouble * LengthBuilder
            (
            );
            /** save the infer logic information of the input entity, such as the orientation, pitch, diameter and height etc. into the feature <br> License requirements : None */
            public: void InferLogic
            (
                NXOpen::NXObject * entity /** the geometry*/
            );
            /** Reverses the direction of the feature <br> License requirements : None */
            public: void ReverseDirection
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
