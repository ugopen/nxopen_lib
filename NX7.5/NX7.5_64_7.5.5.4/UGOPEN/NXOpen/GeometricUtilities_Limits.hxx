#ifndef NXOpen_GEOMETRICUTILITIES_LIMITS_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_LIMITS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_Limits.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class Limits;
    }
    namespace GeometricUtilities
    {
        class Extend;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _LimitsBuilder;
        class LimitsImpl;
        /** Represents a limits data. 
            */
        class NXOPENCPPEXPORT  Limits : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the kind of offset 
             @deprecated Deprecated in NX5.0.0 <br> 
            */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") enum LimitOption
            {
                LimitOptionNoOffset/** No offset */,
                LimitOptionNonsymmetricOffset/** Offset with two different distances */,
                LimitOptionSymmetricOffset/** Offset with same distance in both directions */,
                LimitOptionSingleOffset/** Offset with single distance in one direction */
            };

            private: LimitsImpl * m_limits_impl;
            private: friend class  _LimitsBuilder;
            protected: Limits();
            public: ~Limits();
            /**Sets  the Limit Option
                         <br> 
                        This is deprecated. Please use @link GeometricUtilities::Extend::TrimType GeometricUtilities::Extend::TrimType @endlink and @link GeometricUtilities::Extend::SetTrimType GeometricUtilities::Extend::SetTrimType @endlink  instead.	
                         <br> 		
            		
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void SetLimitOpt
            (
                NXOpen::GeometricUtilities::Limits::LimitOption limitOpt /** Revolve limit option */
            );
            /**Returns  the Limit Option
                         <br> 
                        This is deprecated. Please use @link GeometricUtilities::Extend::TrimType GeometricUtilities::Extend::TrimType @endlink and @link GeometricUtilities::Extend::SetTrimType GeometricUtilities::Extend::SetTrimType @endlink  instead.	
                         <br> 		
            		
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") NXOpen::GeometricUtilities::Limits::LimitOption LimitOpt
            (
            );
            /**Returns  the start extend builder 
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Extend * StartExtend
            (
            );
            /**Returns  the end extend builder 
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Extend * EndExtend
            (
            );
            /**Sets  the symmetric option
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSymmetricOption
            (
                bool symmetricOption /** symmetric option */ 
            );
            /**Returns  the symmetric option
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool SymmetricOption
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
