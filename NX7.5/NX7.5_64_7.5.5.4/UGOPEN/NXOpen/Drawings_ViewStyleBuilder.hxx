#ifndef NXOpen_DRAWINGS_VIEWSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewStyleBaseBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleDetailBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleFPCalloutsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleFPCurvesBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleGeneralBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleHiddenLinesBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleInheritPmiBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleOrientationBuilder.hxx>
#include <NXOpen/Drawings_ViewStylePerspectiveBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleProjectedBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleSectionBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleSectionConstraintsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleShadingBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleSmoothEdgesBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleThreadsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleTraceLinesBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleVirtualIntersectionsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleVisibleLinesBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SheetMetal_FlatPatternSettings.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleBuilder;
    }
    namespace Drawings
    {
        class ViewStyleBaseBuilder;
    }
    namespace Drawings
    {
        class ViewStyleDetailBuilder;
    }
    namespace Drawings
    {
        class ViewStyleFPCalloutsBuilder;
    }
    namespace Drawings
    {
        class ViewStyleFPCurvesBuilder;
    }
    namespace Drawings
    {
        class ViewStyleGeneralBuilder;
    }
    namespace Drawings
    {
        class ViewStyleHiddenLinesBuilder;
    }
    namespace Drawings
    {
        class ViewStyleInheritPmiBuilder;
    }
    namespace Drawings
    {
        class ViewStyleOrientationBuilder;
    }
    namespace Drawings
    {
        class ViewStylePerspectiveBuilder;
    }
    namespace Drawings
    {
        class ViewStyleProjectedBuilder;
    }
    namespace Drawings
    {
        class ViewStyleSectionBuilder;
    }
    namespace Drawings
    {
        class ViewStyleSectionConstraintsBuilder;
    }
    namespace Drawings
    {
        class ViewStyleShadingBuilder;
    }
    namespace Drawings
    {
        class ViewStyleSmoothEdgesBuilder;
    }
    namespace Drawings
    {
        class ViewStyleThreadsBuilder;
    }
    namespace Drawings
    {
        class ViewStyleTraceLinesBuilder;
    }
    namespace Drawings
    {
        class ViewStyleVirtualIntersectionsBuilder;
    }
    namespace Drawings
    {
        class ViewStyleVisibleLinesBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewStyleBuilderBuilder;
        class ViewStyleBuilderImpl;
        /** Represents the View Style Button (Drawings.ViewStyleBuilder)
            */
        class NXOPENCPPEXPORT  ViewStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ViewStyleBuilderImpl * m_viewstylebuilder_impl;
            private: friend class  _ViewStyleBuilderBuilder;
            protected: ViewStyleBuilder();
            public: ~ViewStyleBuilder();
            /**Returns  the Base Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleBaseBuilder * ViewStyleBase
            (
            );
            /**Returns  the Detail Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleDetailBuilder * ViewStyleDetail
            (
            );
            /** Retrieve a specified Callout on the Flat Pattern Tab on the View Style Dialog  @return  Returns the particular Flat Pattern Callout sub-builder on View Style  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleFPCalloutsBuilder * GetViewStyleFPCallout
            (
                const NXString & type /** Indicates which flat pattern callout */
            );
            /** Retrieves all the Callouts on the Flat Pattern Tab on the View Style Dialog  @return  Returns all the Flat Pattern Callout sub-builders on View Style  <br> License requirements : drafting ("DRAFTING") */
            public: std::vector<NXOpen::Drawings::ViewStyleFPCalloutsBuilder *> GetAllViewStyleFPCallouts
            (
            );
            /** Retrieve a specified Curve on the Flat Pattern Tab on the View Style Dialog  @return  Returns the particular Flat Pattern Curve sub-builder on View Style  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleFPCurvesBuilder * GetViewStyleFPCurve
            (
                NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType type /** Indicates which flat pattern curve */
            );
            /** Retrieves all the Curves on the Flat Pattern Tab on the View Style Dialog  @return  Returns all the Flat Pattern Curve sub-builders on View Style  <br> License requirements : drafting ("DRAFTING") */
            public: std::vector<NXOpen::Drawings::ViewStyleFPCurvesBuilder *> GetAllViewStyleFPCurves
            (
            );
            /**Returns  the General Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleGeneralBuilder * ViewStyleGeneral
            (
            );
            /**Returns  the Hidden Lines Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleHiddenLinesBuilder * ViewStyleHiddenLines
            (
            );
            /**Returns  the Inherit PMI Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleInheritPmiBuilder * ViewStyleInheritPmi
            (
            );
            /**Returns  the Orientation Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleOrientationBuilder * ViewStyleOrientation
            (
            );
            /**Returns  the Perspective Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStylePerspectiveBuilder * ViewStylePerspective
            (
            );
            /**Returns  the Projected Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleProjectedBuilder * ViewStyleProjected
            (
            );
            /**Returns  the Section Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleSectionBuilder * ViewStyleSection
            (
            );
            /**Returns  the Section Constraints Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleSectionConstraintsBuilder * ViewStyleSectionConstraints
            (
            );
            /**Returns  the Shading Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleShadingBuilder * ViewStyleShading
            (
            );
            /**Returns  the Smooth Edges Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleSmoothEdgesBuilder * ViewStyleSmoothEdges
            (
            );
            /**Returns  the Threads Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleThreadsBuilder * ViewStyleThreads
            (
            );
            /**Returns  the Trace Lines Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleTraceLinesBuilder * ViewStyleTraceLines
            (
            );
            /**Returns  the Virtual Intersections Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleVirtualIntersectionsBuilder * ViewStyleVirtualIntersections
            (
            );
            /**Returns  the Visible Lines Tab on the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewStyleVisibleLinesBuilder * ViewStyleVisibleLines
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
