#ifndef NXOpen_GEOMETRICUTILITIES_SIMPLEDRAFT_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SIMPLEDRAFT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SimpleDraft.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SimpleDraft;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _SimpleDraftBuilder;
        class SimpleDraftImpl;
        /** Represents an Offset . 
            */
        class NXOPENCPPEXPORT  SimpleDraft : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the kind of simple_draft */
            public: enum SimpleDraftType
            {
                SimpleDraftTypeNoDraft/** No draft */,
                SimpleDraftTypeSimpleFromStart/** Draft using the start limit as the reference */,
                SimpleDraftTypeSimpleFromProfile/** Draft using the profile as the reference */,
                SimpleDraftTypeSymmetric/** Draft on both sides of the profile using the same angle */,
                SimpleDraftTypeMatchedEnds/** Draft on both sides of the profile such that the end profiles match in areas */,
                SimpleDraftTypeAsymmetric/** Draft on both sides of the profile using the not same angle */
            };

            private: SimpleDraftImpl * m_simpledraft_impl;
            private: friend class  _SimpleDraftBuilder;
            protected: SimpleDraft();
            public: ~SimpleDraft();
            /**Sets   the simple draft type
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDraftType
            (
                NXOpen::GeometricUtilities::SimpleDraft::SimpleDraftType type /** type */ 
            );
            /**Returns   the simple draft type
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SimpleDraft::SimpleDraftType DraftType
            (
            );
            /** Sets the draft angle 
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void SetDraftAngle
            (
                const NXString & draftAngle /** Draft angle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the draft angle
                     <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
