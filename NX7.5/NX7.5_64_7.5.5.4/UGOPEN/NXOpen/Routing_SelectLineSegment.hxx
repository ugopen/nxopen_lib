#ifndef NXOpen_ROUTING_SELECTLINESEGMENT_HXX_INCLUDED
#define NXOpen_ROUTING_SELECTLINESEGMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SelectLineSegment.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CaeObjectType.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/InferSnapType.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class SelectLineSegment;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Routing
    {
        class LineSegment;
    }
    class View;
    namespace Routing
    {
        class _SelectLineSegmentBuilder;
        class SelectLineSegmentImpl;
        /** Represents a single object selection.
        */
        class NXOPENCPPEXPORT  SelectLineSegment : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: SelectLineSegmentImpl * m_selectlinesegment_impl;
            private: friend class  _SelectLineSegmentBuilder;
            protected: SelectLineSegment();
            public: ~SelectLineSegment();
            /**Sets  the object being selected
                 <br> License requirements : None */
            public: void SetValue
            (
                NXOpen::Routing::LineSegment * selection /** selected object */
            );
            /**Returns  the object being selected
                 <br> License requirements : None */
            public: NXOpen::Routing::LineSegment * Value
            (
            );
            /** The object being selected with the object's view and object's point
                 <br> License requirements : None */
            public: void SetValue
            (
                NXOpen::Routing::LineSegment * selection /** selected object */,
                NXOpen::View * view /** selected object view*/,
                const NXOpen::Point3d & point /** selected object point*/
            );
            /** The object being selected with the object's view and point.
                 <br> License requirements : None */
            public: void GetValue
            (
                NXOpen::Routing::LineSegment ** selection /** selected object */,
                NXOpen::View ** view /** selected object view*/,
                NXOpen::Point3d* point /** selected object point*/
            );
            /** The object being selected with the objects view and objects point and snap information.
                 <br> License requirements : None */
            public: void SetValue
            (
                NXOpen::InferSnapType::SnapType snapType /**  snap point type*/,
                NXOpen::Routing::LineSegment * selection1 /** first selected object */,
                NXOpen::View * view1 /** first selected object view*/,
                const NXOpen::Point3d & point1 /** first selected object point*/,
                NXOpen::Routing::LineSegment * selection2 /** second selected object */,
                NXOpen::View * view2 /** second selected object view*/,
                const NXOpen::Point3d & point2 /** second selected object point*/
            );
            /** The object being selected with the objects view and point and snap information.
                 <br> License requirements : None */
            public: void GetValue
            (
                NXOpen::InferSnapType::SnapType* snapType /**  snap point type*/,
                NXOpen::Routing::LineSegment ** selection1 /** first selected object */,
                NXOpen::View ** view1 /** first selected object view*/,
                NXOpen::Point3d* point1 /** first selected object point*/,
                NXOpen::Routing::LineSegment ** selection2 /** second selected object */,
                NXOpen::View ** view2 /** second selected object view*/,
                NXOpen::Point3d* point2 /** second selected object point*/
            );
            /** The object being selected with CAE set object information.
                 <br> License requirements : None */
            public: void SetValue
            (
                NXOpen::Routing::LineSegment * selection /** selected object */,
                NXOpen::CaeObjectType::CaeSubType caeSubType /** CAE set object sub type*/,
                int caeSubId /** CAE set object sub id*/
            );
            /** The object being selected with CAE set object information.
                 @return  selected object  <br> License requirements : None */
            public: NXOpen::Routing::LineSegment * GetValue
            (
                NXOpen::CaeObjectType::CaeSubType* caeSubType /** CAE set object sub type*/,
                int* caeSubId /** CAE set object sub id*/
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
