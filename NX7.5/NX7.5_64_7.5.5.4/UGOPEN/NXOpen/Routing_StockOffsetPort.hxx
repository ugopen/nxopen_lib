#ifndef NXOpen_ROUTING_STOCKOFFSETPORT_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKOFFSETPORT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockOffsetPort.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockOffsetPort;
    }
    class NXObject;
    namespace Routing
    {
        class Port;
    }
    namespace Routing
    {
        class _StockOffsetPortBuilder;
        class StockOffsetPortImpl;
        /** @link Routing::StockOffsetPort Routing::StockOffsetPort@endlink  class handles the relationship
                between a component part's port occurrence and the dumb offset port in 
                the work part. The dumb port offsets based on expressions that use
                the stock diameter.  <br> Use @link Routing::PortCollection::CreateStockOffsetPort Routing::PortCollection::CreateStockOffsetPort@endlink  to create an instance of this class. <br> */
        class NXOPENCPPEXPORT  StockOffsetPort : public NXObject
        {
            private: StockOffsetPortImpl * m_stockoffsetport_impl;
            private: friend class  _StockOffsetPortBuilder;
            protected: StockOffsetPort();
            public: ~StockOffsetPort();
            /** Returns the original port occurrence from which the dumb port was extracted.
                        Returns NULL_TAG if the occurrence is not available because it is not loaded, or not in the current reference set, etc.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Port * GetPortOccurrence
            (
            );
            /** Returns the Stock Offset Port in the work part that was created from the original port occurrence.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Port * GetOffsetPort
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
