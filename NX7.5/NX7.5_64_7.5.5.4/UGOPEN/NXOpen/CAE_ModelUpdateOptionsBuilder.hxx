#ifndef NXOpen_CAE_MODELUPDATEOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELUPDATEOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelUpdateOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelUpdateOptionsBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ModelUpdateOptionsBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _ModelUpdateOptionsBuilderBuilder;
        class ModelUpdateOptionsBuilderImpl;
        /** Represents a @link CAE::ModelUpdateOptionsBuilder CAE::ModelUpdateOptionsBuilder@endlink   <br> To create a new instance of this class, use @link CAE::ModelUpdateSolution::CreateOptionsBuilder CAE::ModelUpdateSolution::CreateOptionsBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ModelUpdateOptionsBuilder : public Builder
        {
            private: ModelUpdateOptionsBuilderImpl * m_modelupdateoptionsbuilder_impl;
            private: friend class  _ModelUpdateOptionsBuilderBuilder;
            protected: ModelUpdateOptionsBuilder();
            public: ~ModelUpdateOptionsBuilder();
            /**Returns  the upper bound multiplier  <br> License requirements : None */
            public: double UpperBoundMultiplier
            (
            );
            /**Sets  the upper bound multiplier  <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetUpperBoundMultiplier
            (
                double upperBoundMultiplier /** upperboundmultiplier */ 
            );
            /**Returns  the rigid body tolerance  <br> License requirements : None */
            public: double RigidBodyTolerance
            (
            );
            /**Sets  the rigid body tolerance  <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetRigidBodyTolerance
            (
                double rigidBodyTolerance /** rigidbodytolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
