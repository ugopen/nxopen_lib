#ifndef NXOpen_CAM_FEEDSOPTIMIZATIONDATA_HXX_INCLUDED
#define NXOpen_CAM_FEEDSOPTIMIZATIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeedsOptimizationData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_FeedsOptimizationData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class FeedsOptimizationData;
    }
    namespace CAM
    {
        class _FeedsOptimizationDataBuilder;
        class FeedsOptimizationDataImpl;
        /**
            Represents a @link CAM::FeedsOptimizationData CAM::FeedsOptimizationData@endlink 
            */
        class NXOPENCPPEXPORT  FeedsOptimizationData : public TaggedObject
        {
            /** The Feed Rate Range options */
            public: enum FeedRateRangeType
            {
                FeedRateRangeTypePercent/** Percent */,
                FeedRateRangeTypeConstant/** Constant*/
            };

            private: FeedsOptimizationDataImpl * m_feedsoptimizationdata_impl;
            private: friend class  _FeedsOptimizationDataBuilder;
            protected: FeedsOptimizationData();
            public: ~FeedsOptimizationData();
            /**Returns  the nominal stepover  <br> License requirements : None */
            public: double NominalStepover
            (
            );
            /**Sets  the nominal stepover  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNominalStepover
            (
                double nominalStepover /** nominalstepover */ 
            );
            /**Returns  the nominal depth per cut  <br> License requirements : None */
            public: double NominalDepthPerCut
            (
            );
            /**Sets  the nominal depth per cut  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNominalDepthPerCut
            (
                double nominalDepthPerCut /** nominaldepthpercut */ 
            );
            /**Returns  the feed rate range  <br> License requirements : None */
            public: NXOpen::CAM::FeedsOptimizationData::FeedRateRangeType FeedRateRange
            (
            );
            /**Sets  the feed rate range  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedRateRange
            (
                NXOpen::CAM::FeedsOptimizationData::FeedRateRangeType feedRateRange /** feedraterange */ 
            );
            /**Returns  the percent of lower limit  <br> License requirements : None */
            public: double PercentLowerLimit
            (
            );
            /**Sets  the percent of lower limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPercentLowerLimit
            (
                double lowerLimit /** lowerlimit */ 
            );
            /**Returns  the percent of upper limit  <br> License requirements : None */
            public: double PercentUpperLimit
            (
            );
            /**Sets  the percent of upper limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPercentUpperLimit
            (
                double upperLimit /** upperlimit */ 
            );
            /**Returns  the constant lower limit  <br> License requirements : None */
            public: double ConstantLowerLimit
            (
            );
            /**Sets  the constant lower limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetConstantLowerLimit
            (
                double lowerLimit /** lowerlimit */ 
            );
            /**Returns  the constant upper limit  <br> License requirements : None */
            public: double ConstantUpperLimit
            (
            );
            /**Sets  the constant upper limit  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetConstantUpperLimit
            (
                double upperLimit /** upperlimit */ 
            );
            /**Returns  the length interval  <br> License requirements : None */
            public: double LengthInterval
            (
            );
            /**Sets  the length interval  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLengthInterval
            (
                double lengthInterval /** lengthinterval */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
