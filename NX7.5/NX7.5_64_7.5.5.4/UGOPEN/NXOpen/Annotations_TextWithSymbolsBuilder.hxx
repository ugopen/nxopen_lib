#ifndef NXOpen_ANNOTATIONS_TEXTWITHSYMBOLSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TEXTWITHSYMBOLSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_TextWithSymbolsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_TextWithSymbolsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class TextWithSymbolsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace Annotations
    {
        class _TextWithSymbolsBuilderBuilder;
        class TextWithSymbolsBuilderImpl;
        /** Represents a @link Annotations::TextWithSymbolsBuilder Annotations::TextWithSymbolsBuilder@endlink  which collects
                internationalized text strings from the user for processing on an annotation object.
              <br> This is a sub-builder class and cannot be directly instantiated <br> */
        class NXOPENCPPEXPORT  TextWithSymbolsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** sizing method for embedded user-defined symbols */
            public: enum SymbolSizingMethod
            {
                SymbolSizingMethodScaleAndAspectRatio/** Size using scale and aspect ratio */,
                SymbolSizingMethodLengthAndHeight/** Size using length and height */
            };

            private: TextWithSymbolsBuilderImpl * m_textwithsymbolsbuilder_impl;
            private: friend class  _TextWithSymbolsBuilderBuilder;
            protected: TextWithSymbolsBuilder();
            public: ~TextWithSymbolsBuilder();
            /** Returns the text of the annotation  @return   <br> License requirements : None */
            public: std::vector<NXString> GetText
            (
            );
            /** Sets the text of the annotation  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetText
            (
                const std::vector<NXString> & text /** text */ 
            );
            /**Returns  the method in which embedded user-defined symbols are scaled  <br> License requirements : None */
            public: NXOpen::Annotations::TextWithSymbolsBuilder::SymbolSizingMethod SymbolSizeMethod
            (
            );
            /**Sets  the method in which embedded user-defined symbols are scaled  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolSizeMethod
            (
                NXOpen::Annotations::TextWithSymbolsBuilder::SymbolSizingMethod symbolSizeMethod /** symbolsizemethod */ 
            );
            /**Returns  the scale of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio@endlink   <br> License requirements : None */
            public: double SymbolScale
            (
            );
            /**Sets  the scale of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio@endlink   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolScale
            (
                double symbolScale /** symbolscale */ 
            );
            /**Returns  the aspect ratio of the embedded user-defined symbols if the symbol size method is
                       @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio@endlink   <br> License requirements : None */
            public: double SymbolAspectRatio
            (
            );
            /**Sets  the aspect ratio of the embedded user-defined symbols if the symbol size method is
                       @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio Annotations::TextWithSymbolsBuilder::SymbolSizingMethodScaleAndAspectRatio@endlink   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolAspectRatio
            (
                double symbolAspectRatio /** symbolaspectratio */ 
            );
            /**Returns  the length of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight@endlink   <br> License requirements : None */
            public: double SymbolLength
            (
            );
            /**Sets  the length of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight@endlink   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolLength
            (
                double symbolLength /** symbollength */ 
            );
            /**Returns  the height of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight@endlink   <br> License requirements : None */
            public: double SymbolHeight
            (
            );
            /**Sets  the height of the embedded user-defined symbols if the symbol size method is
                        @link Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight Annotations::TextWithSymbolsBuilder::SymbolSizingMethodLengthAndHeight@endlink   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolHeight
            (
                double symbolHeight /** symbolheight */ 
            );
            /**Returns  the scale of the custom symbols   <br> License requirements : None */
            public: double CustomSymbolScale
            (
            );
            /**Sets  the scale of the custom symbols   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCustomSymbolScale
            (
                double customSymbolScale /** customsymbolscale */ 
            );
            /** Adds a symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void AddSymbol
            (
                NXOpen::NXObject * newObject /** symbol instance object */,
                const NXString & name /** symbol name */,
                int lineNo /** line number to insert token with index from 1 */,
                int cursorPos /** cursor position in the line with index from 1 */
            );
            /** Removes specified symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void RemoveSymbol
            (
                const NXString & path /** Symbol name */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
