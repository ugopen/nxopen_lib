#ifndef NXOpen_DIE_PRESSURESYSTEMPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_PRESSURESYSTEMPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PressureSystemParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class PressureSystemParentBuilder;
    }
    namespace Die
    {
        class PressureSystemChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _PressureSystemParentBuilderBuilder;
        class PressureSystemParentBuilderImpl;
        /** Represents a Die Pressure System Parent sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT  PressureSystemParentBuilder : public Features::FeatureBuilder
        {
            private: PressureSystemParentBuilderImpl * m_pressuresystemparentbuilder_impl;
            private: friend class  _PressureSystemParentBuilderBuilder;
            protected: PressureSystemParentBuilder();
            public: ~PressureSystemParentBuilder();
            /**Sets  the diameter of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the diameter of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Diameter
            (
            );
            /**Sets  the height of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHeight
            (
                double height /** height */ 
            );
            /**Returns  the height of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Height
            (
            );
            /**Sets  the clearance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetClearance
            (
                double clearance /** clearance */ 
            );
            /**Returns  the clearance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Clearance
            (
            );
            /**Sets  the x offset of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetXOffset
            (
                double xOffset /** x offset */ 
            );
            /**Returns  the x offset of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double XOffset
            (
            );
            /**Sets  the y offset of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetYOffset
            (
                double yOffset /** y offset */ 
            );
            /**Returns  the y offset of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double YOffset
            (
            );
            /**Sets  the x distance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetXDistance
            (
                double xDistance /** x distance */ 
            );
            /**Returns  the x distance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double XDistance
            (
            );
            /**Sets  the y distance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetYDistance
            (
                double yDistance /** y distance */ 
            );
            /**Returns  the y distance of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: double YDistance
            (
            );
            /**Sets  the x count of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetXCount
            (
                int xCount /** x count */ 
            );
            /**Returns  the x count of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: int XCount
            (
            );
            /**Sets  the y count of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetYCount
            (
                int yCount /** y count */ 
            );
            /**Returns  the y count of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: int YCount
            (
            );
            /**Sets  the design status of pressure systems, if true the pressure systems will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool designStatus /** design status */ 
            );
            /**Returns  the design status of pressure systems, if true the pressure systems will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of pressure systems, if true input data to the pressure systems will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool displayStatus /** display status */ 
            );
            /**Returns  the display status of pressure systems, if true input data to the pressure systems will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child pressure system.  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::PressureSystemChildBuilder * CreateChild
            (
            );
            /** Deletes a child pressure system.  <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::PressureSystemChildBuilder * diepressuresystemchild /** diepressuresystemchild */ 
            );
            /** Outputs the child pressure systems.  @return  The child pressure systems.  <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::PressureSystemChildBuilder *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
