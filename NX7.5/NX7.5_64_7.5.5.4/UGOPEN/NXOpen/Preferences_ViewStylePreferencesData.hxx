#ifndef NXOpen_PREFERENCES_VIEWSTYLEPREFERENCESDATA_HXX_INCLUDED
#define NXOpen_PREFERENCES_VIEWSTYLEPREFERENCESDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_ViewStylePreferencesData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        /** Represents the line font */
        enum Font
        {
            FontInvisible/** Invisible */,
            FontSolid/** Solid */,
            FontDashed/** Dashed */,
            FontPhantom/** Phantom */,
            FontCenterline/** Centerline */,
            FontDotted/** Dotted*/,
            FontLongDashed/** Long Dashed */,
            FontDottedDashed/** Dotted Dashed */
        };

        /** Represents the line width */
        enum Width
        {
            WidthOriginal/** Original */,
            WidthThin/** Thin */,
            WidthNormal/** Normal */,
            WidthThick/** Thick */
        };

        /** Represents the Inherit GD and T options */
        enum GdtOption
        {
            GdtOptionNone/** Does not inherit any GD and T display instances. */,
            GdtOptionInDrawingPlane/** inherit display instances of geometric tolerance features that are parallel to the drawing plane onto the drawing view. */,
            GdtOptionFromModelView/** inherit display instances of geometric tolerance features that exist in a particular modeling view (e.g. Top, Front, etc.). */
        };

        /** Represents the Inherit PMI options */
        enum PmiOption
        {
            PmiOptionNone/** Does not inherit PMI. */,
            PmiOptionFromModelView/** Inherit PMI from the parent model view. */,
            PmiOptionInDrawingPlaneFromView/** Inherit PMI that are parallel to the drawing plane from the model view. */,
            PmiOptionInDrawingPlaneFromPart/** Inherit PMI that are parallel to the drawing plane from the entire part. */
        };

        /** Represents the extracted edges options */
        enum GeneralExtractedEdgesOption
        {
            GeneralExtractedEdgesOptionNone/** None */,
            GeneralExtractedEdgesOptionAssociative/** Associative */,
            GeneralExtractedEdgesOptionNonAssociative/** Non-Associative */
        };

        /** Represents the wireframe color source options */
        enum GeneralWireframeColorSourceOption
        {
            GeneralWireframeColorSourceOptionFromBody/** From Body */,
            GeneralWireframeColorSourceOptionFromFace/** From Face */
        };

        /** Represents the display id options */
        enum GeneralDisplayIdOption
        {
            GeneralDisplayIdOptionNone/** None */,
            GeneralDisplayIdOptionOrientation/** Orientation */,
            GeneralDisplayIdOptionName/** Name */
        };

        /** Represents the boundary options */
        enum DetailBoundaryOption
        {
            DetailBoundaryOptionCircular/** Circular boundary */,
            DetailBoundaryOptionRectangular/** Rectangular boundary */
        };

        /** Represents the Interfering Solids options */
        enum HiddenLineInterferingSolidsOption
        {
            HiddenLineInterferingSolidsOptionNone/** None */,
            HiddenLineInterferingSolidsOptionYes/** Yes */,
            HiddenLineInterferingSolidsOptionInterferenceCurves/** Interference Curves */
        };

        /** Represents the small feature options */
        enum HiddenLineSmallFeatureOption
        {
            HiddenLineSmallFeatureOptionShowAll/** Show All */,
            HiddenLineSmallFeatureOptionSimplify/** Simplify */,
            HiddenLineSmallFeatureOptionHide/** Hide */
        };

        /** Represents the rendering style options */
        enum ShadingRenderingStyleOption
        {
            ShadingRenderingStyleOptionFullyShaded/** Fully shaded */,
            ShadingRenderingStyleOptionPartiallyShaded/** Partially Shaded */,
            ShadingRenderingStyleOptionWireframe/** Wireframe */
        };

        /** Represents the Shade tolerance options */
        enum ShadingToleranceOption
        {
            ShadingToleranceOptionCoarse/** Coarse */,
            ShadingToleranceOptionStandard/** Standard */,
            ShadingToleranceOptionFine/** Fine */,
            ShadingToleranceOptionExtraFine/** Extra Fine */,
            ShadingToleranceOptionUltraFine/** Ultra Fine */,
            ShadingToleranceOptionCustomize/** Customize */
        };

        /** Represents the General tolerance options */
        enum GeneralToleranceOption
        {
            GeneralToleranceOptionCoarse/** Coarse */,
            GeneralToleranceOptionMedium/** Medium */,
            GeneralToleranceOptionStandard/** Standard */,
            GeneralToleranceOptionFine/** Fine */,
            GeneralToleranceOptionExtraFine/** Extra Fine */,
            GeneralToleranceOptionCustomize/** Customize */
        };

    }
}
#undef EXPORTLIBRARY
#endif
