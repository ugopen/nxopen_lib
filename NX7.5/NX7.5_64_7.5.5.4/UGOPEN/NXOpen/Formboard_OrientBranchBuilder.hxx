#ifndef NXOpen_FORMBOARD_ORIENTBRANCHBUILDER_HXX_INCLUDED
#define NXOpen_FORMBOARD_ORIENTBRANCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_OrientBranchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Formboard_OrientBranchBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Formboard
    {
        class OrientBranchBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Formboard
    {
        class _OrientBranchBuilderBuilder;
        class OrientBranchBuilderImpl;
        /**  Builder for "Orient Branch" operation used in formboard.
                 Allows user to orient the branch by different methods.
              <br> To create a new instance of this class, use @link Formboard::FormboardManager::CreateOrientBranchBuilder Formboard::FormboardManager::CreateOrientBranchBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BranchAngleType </td> <td> 
         
        Angle </td> </tr> 

        <tr><td> 
         
        RotationAngle.Value </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  OrientBranchBuilder : public Builder
        {
            /** Enum to define the type of method to orient branch. */
            public: enum BranchAngleMethod
            {
                BranchAngleMethodAngle/** method to rotate branch by angle*/,
                BranchAngleMethodTwoPoints/** method to rotate branch by and angle between two points*/,
                BranchAngleMethodAlignAxisToVector/** method to rotate branch by an angle between two vectors*/,
                BranchAngleMethodAnglefromReferenceVector/**method to rotate branch with respect to selected vectors*/
            };

            private: OrientBranchBuilderImpl * m_orientbranchbuilder_impl;
            private: friend class  _OrientBranchBuilderBuilder;
            protected: OrientBranchBuilder();
            public: ~OrientBranchBuilder();
            /**Returns  the user selected branch @link  Routing::ISegment   Routing::ISegment @endlink 
                        for rotation.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Routing::RouteObjectCollector * SelectBranch
            (
            );
            /**Returns  the user selected @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::OrientBranchBuilder::BranchAngleMethod BranchAngleType
            (
            );
            /**Sets  the user selected @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetBranchAngleType
            (
                NXOpen::Formboard::OrientBranchBuilder::BranchAngleMethod branchAngleType /** branchangletype */ 
            );
            /**Returns  the angle for the rotation of branch when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAngle  Formboard::OrientBranchBuilder::BranchAngleMethodAngle@endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Expression * RotationAngle
            (
            );
            /**Returns  the angle for the rotation of branch when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector   Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Expression * RefRotationAngle
            (
            );
            /**Returns  the user selected from point when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints   Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the user selected from point when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints   Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetFromPoint
            (
                NXOpen::Point * fromPoint /** frompoint */ 
            );
            /**Returns  the user selected to point when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints   Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the user selected to point when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints   Formboard::OrientBranchBuilder::BranchAngleMethodTwoPoints @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the user selected from vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector   Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Direction * FromVector
            (
            );
            /**Sets  the user selected from vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector   Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetFromVector
            (
                NXOpen::Direction * fromVector /** fromvector */ 
            );
            /**Returns  the user selected to vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector   Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Direction * ToVector
            (
            );
            /**Sets  the user selected to vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector   Formboard::OrientBranchBuilder::BranchAngleMethodAlignAxisToVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetToVector
            (
                NXOpen::Direction * toVector /** tovector */ 
            );
            /** Rotates the branch by an appropriate rotation and transformation
                        which depends on the @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink 
                        selected by user.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void UpdateRotationAngle
            (
                double angle /** angle for rotation */
            );
            /** Starts the drag operation of selected object. Does nothing if drag has
                        already been started.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void StartDrag
            (
            );
            /** Stop the drag operation of selected object. Does nothing if drag has
                        not been started.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void StopDrag
            (
            );
            /**Returns  the user selected reference vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector   Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Direction * ReferenceVector
            (
            );
            /**Sets  the user selected reference vector when @link  Formboard::OrientBranchBuilder::BranchAngleMethod   Formboard::OrientBranchBuilder::BranchAngleMethod @endlink  is 
                        @link  Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector   Formboard::OrientBranchBuilder::BranchAngleMethodAnglefromReferenceVector @endlink .
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetReferenceVector
            (
                NXOpen::Direction * referenceVector /** referencevector */ 
            );
            /** Initializes or resets ( start or stop ) drag operation based on the 
                        input branch segment.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void InitializeFromSegment
            (
            );
            /** Sets the selected branch @link  Routing::ISegment   Routing::ISegment @endlink  when
                        a branch is selected by branch method by Routing Object Collector.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetBranchSeedObject
            (
                NXOpen::Routing::ISegment * segmentTag /** selected seed object */
            );
            /** Suppress the @link Positioning::Constraint  Positioning::Constraint @endlink  associated with selected branch @link  Routing::ISegment   Routing::ISegment @endlink 
                        when a branch is selected by branch method by Routing Object Collector.
                    
             @deprecated Deprecated in NX7.5.3 <br> 
             <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.3") void UnSuppressConstraints
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
