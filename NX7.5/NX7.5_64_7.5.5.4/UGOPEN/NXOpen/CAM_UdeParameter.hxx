#ifndef NXOpen_CAM_UDEPARAMETER_HXX_INCLUDED
#define NXOpen_CAM_UDEPARAMETER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_UdeParameter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_UdeParameter.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class UdeParameter;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _UdeParameterBuilder;
        class UdeParameterImpl;
        /** Represents a User Defined Event Parameter*/
        class NXOPENCPPEXPORT  UdeParameter : public TaggedObject
        {
            private: UdeParameterImpl * m_udeparameter_impl;
            private: friend class  _UdeParameterBuilder;
            protected: UdeParameter();
            public: ~UdeParameter();
            /**Returns  the name of the parameter <br> License requirements : None */
            public: NXString NameOfParameter
            (
            );
            /**Returns  the check to see if the parameter is optional <br> License requirements : None */
            public: bool ParameterOptional
            (
            );
            /**Returns  the check to see if paramter is active <br> License requirements : None */
            public: bool ParameterActive
            (
            );
            /**Sets  the check to see if paramter is active <br> License requirements : cam_base ("CAM BASE") */
            public: void SetParameterActive
            (
                bool parameterActive /** parameter is active*/
            );
            /**Returns  the integer value of the parameter <br> License requirements : None */
            public: int IntegerValue
            (
            );
            /**Sets  the integer value of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIntegerValue
            (
                int integerValue /** integer value of the parameter*/
            );
            /**Returns  the double value of the parameter <br> License requirements : None */
            public: double DoubleValue
            (
            );
            /**Sets  the double value of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDoubleValue
            (
                double doubleValue /** double value of the parameter*/
            );
            /**Returns  the string value of the parameter <br> License requirements : None */
            public: NXString StringValue
            (
            );
            /**Sets  the string value of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStringValue
            (
                const NXString & stringValue /** string value of the parameter*/
            );
            /**Returns  the boolean value of the parameter <br> License requirements : None */
            public: bool BooleanValue
            (
            );
            /**Sets  the boolean value of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBooleanValue
            (
                bool booleanValue /** boolean value of the parameter*/
            );
            /**Returns  the option value of the parameter <br> License requirements : None */
            public: NXString OptionValue
            (
            );
            /**Sets  the option value of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOptionValue
            (
                const NXString & optionValue /** option value of the parameter*/
            );
            /**Returns  the point of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * tagValue /** tagvalue */ 
            );
            /**Returns  the vector of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * Vector
            (
            );
            /**Sets  the vector of the parameter <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVector
            (
                NXOpen::NXObject * tagValue /** tagvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
