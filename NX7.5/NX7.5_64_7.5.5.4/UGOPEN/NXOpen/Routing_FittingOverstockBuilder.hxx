#ifndef NXOpen_ROUTING_FITTINGOVERSTOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_FITTINGOVERSTOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_FittingOverstockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_FittingOverstockBuilder.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class FittingOverstockBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    class Plane;
    namespace Routing
    {
        class PathStockBuilder;
    }
    class SelectFaceList;
    namespace Routing
    {
        class _FittingOverstockBuilderBuilder;
        class FittingOverstockBuilderImpl;
        /** Builder for creating or editing @link Routing::FittingOverstock Routing::FittingOverstock@endlink  objects.  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateFittingOverstockBuilder Routing::RouteManager::CreateFittingOverstockBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FaceTrimMethod </td> <td> 
         
        TrimPlane </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  FittingOverstockBuilder : public Builder
        {
            /** Overstock application method. This defines the way in which to apply
                        the overstock on faces of the routing parts.*/
            public: enum Types
            {
                TypesEntirePart/** Entire Part */,
                TypesEntireFace/** Entire Face */,
                TypesPartialFace/** Partial Face */
            };

            /** Trimming option. This defines the way the selected faces are to be trimmed
                        for @link Routing::FittingOverstockBuilder::TypesPartialFace Routing::FittingOverstockBuilder::TypesPartialFace@endlink 
                        method. */
            public: enum TrimMethod
            {
                TrimMethodTrimPlane/** Single Trim Plane */,
                TrimMethodBetweenPlanes/** Double Trim Planes */
            };

            private: FittingOverstockBuilderImpl * m_fittingoverstockbuilder_impl;
            private: friend class  _FittingOverstockBuilderBuilder;
            protected: FittingOverstockBuilder();
            public: ~FittingOverstockBuilder();
            /**Returns  the qualifed routing parts to apply overstock to.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Assemblies::SelectComponentList * RoutingParts
            (
            );
            /**Returns  the faces to apply overstock to. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectFaceList * Faces
            (
            );
            /**Returns  the stock settings for overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder * OverstockSettings
            (
            );
            /**Sets  the stock settings for overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetOverstockSettings
            (
                NXOpen::Routing::PathStockBuilder * stockBuilder /** stockbuilder */ 
            );
            /**Returns  the @link Routing::FittingOverstockBuilder::TrimMethod Routing::FittingOverstockBuilder::TrimMethod@endlink  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::FittingOverstockBuilder::TrimMethod FaceTrimMethod
            (
            );
            /**Sets  the @link Routing::FittingOverstockBuilder::TrimMethod Routing::FittingOverstockBuilder::TrimMethod@endlink  <br> License requirements : routing_combined ("Routing Combined") */
            public: void SetFaceTrimMethod
            (
                NXOpen::Routing::FittingOverstockBuilder::TrimMethod faceTrimMethod /** facetrimmethod */ 
            );
            /**Returns  the first trimming plane  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Plane * FirstPlane
            (
            );
            /**Sets  the first trimming plane  <br> License requirements : routing_combined ("Routing Combined") */
            public: void SetFirstPlane
            (
                NXOpen::Plane * firstPlane /** firstplane */ 
            );
            /**Returns  the second trimming plane  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Plane * SecondPlane
            (
            );
            /**Sets  the second trimming plane  <br> License requirements : routing_combined ("Routing Combined") */
            public: void SetSecondPlane
            (
                NXOpen::Plane * secondPlane /** secondplane */ 
            );
            /**Returns  the @link Routing::FittingOverstockBuilder::Type Routing::FittingOverstockBuilder::Type@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::FittingOverstockBuilder::Types Type
            (
            );
            /**Sets  the @link Routing::FittingOverstockBuilder::Type Routing::FittingOverstockBuilder::Type@endlink   <br> License requirements : routing_combined ("Routing Combined") */
            public: void SetType
            (
                NXOpen::Routing::FittingOverstockBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
