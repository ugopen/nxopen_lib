#ifndef NXOpen_CAE_DURABILITYEVENTOVERRIDESBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYEVENTOVERRIDESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityEventOverridesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurabilityEventOverridesBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class DurabilityEventOverridesBuilder;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class PhysicalMaterial;
    namespace CAE
    {
        class _DurabilityEventOverridesBuilderBuilder;
        class DurabilityEventOverridesBuilderImpl;
        /** Represents a builder class for Event Overrides.
                The user can override the set of elements and/or the material to be used
                for the computation of durability data for a certain event using Event Overrides.*/
        class NXOPENCPPEXPORT  DurabilityEventOverridesBuilder : public TaggedObject
        {
            /** the use elements enum.*/
            public: enum UseElementsEnum
            {
                UseElementsEnumAll/** All */,
                UseElementsEnumSelect/** Select */
            };

            private: DurabilityEventOverridesBuilderImpl * m_durabilityeventoverridesbuilder_impl;
            private: friend class  _DurabilityEventOverridesBuilderBuilder;
            protected: DurabilityEventOverridesBuilder();
            public: ~DurabilityEventOverridesBuilder();
            /**Returns  the use selected elements.  <br> License requirements : None */
            public: NXOpen::CAE::DurabilityEventOverridesBuilder::UseElementsEnum UseElements
            (
            );
            /**Sets  the use selected elements.  <br> License requirements : None */
            public: void SetUseElements
            (
                NXOpen::CAE::DurabilityEventOverridesBuilder::UseElementsEnum useElements /** useelements */ 
            );
            /**Returns  the select elements.  <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the override material.  <br> License requirements : None */
            public: bool OverrideMaterial
            (
            );
            /**Sets  the override material.  <br> License requirements : None */
            public: void SetOverrideMaterial
            (
                bool overrideMaterial /** overridematerial */ 
            );
            /**Returns  the material. <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * MaterialTag
            (
            );
            /**Sets  the material. <br> License requirements : None */
            public: void SetMaterialTag
            (
                NXOpen::PhysicalMaterial * materialTag /** materialtag */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
