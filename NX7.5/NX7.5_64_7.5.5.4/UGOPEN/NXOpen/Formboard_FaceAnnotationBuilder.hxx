#ifndef NXOpen_FORMBOARD_FACEANNOTATIONBUILDER_HXX_INCLUDED
#define NXOpen_FORMBOARD_FACEANNOTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_FaceAnnotationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Formboard_FaceAnnotationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Formboard
    {
        class FaceAnnotationBuilder;
    }
    class Builder;
    class Point;
    class SelectNXObject;
    namespace Formboard
    {
        class _FaceAnnotationBuilderBuilder;
        class FaceAnnotationBuilderImpl;
        /** Builder for Face Annotation functionality used in formboard. It allows 
                 importing CGM or Pattern file geometry and placing it on a drawing sheet
                 or model view. As a result of this a group of dumb geometry is placed such
                 that defined origin is located at the lower left hand of the bounding box 
                 containing the group of geometry.
              <br> To create a new instance of this class, use @link Formboard::FormboardManager::CreateFaceAnnotationBuilder Formboard::FormboardManager::CreateFaceAnnotationBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DestEnum </td> <td> 
         
        DrawingSheet </td> </tr> 

        <tr><td> 
         
        TogBlank </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  FaceAnnotationBuilder : public Builder
        {
            /** Enum which defines the type to import CGM/Pattern file*/
            public: enum Types
            {
                TypesComponentAttribute/** Import CGM file by selecting a component*/,
                TypesCgmFileSelection/** Import CGM file by browsing a CGM file*/,
                TypesPatternFileSelection/** Import a pattern file */
            };

            /** Enum which defines where the geometry is to be placed. The geometry
                        can be placed either in model or drawing sheet.
                    */
            public: enum DrwDestination
            {
                DrwDestinationDrawingSheet/** Place geometry in drawing sheet */,
                DrwDestinationModel/** Place geometry in model */
            };

            private: FaceAnnotationBuilderImpl * m_faceannotationbuilder_impl;
            private: friend class  _FaceAnnotationBuilderBuilder;
            protected: FaceAnnotationBuilder();
            public: ~FaceAnnotationBuilder();
            /**Returns  the user selected component which has a CGM_FILE or PATTERN_FILE attribute defined.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::SelectNXObject * CompSel
            (
            );
            /**Returns  the browser which enables selection of CGM file when @link 
                       Formboard::FaceAnnotationBuilder::Types 
                       Formboard::FaceAnnotationBuilder::Types@endlink  is @link 
                       Formboard::FaceAnnotationBuilder::TypesCgmFileSelection  
                       Formboard::FaceAnnotationBuilder::TypesCgmFileSelection @endlink .
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXString CgmflBrsr
            (
            );
            /**Sets  the browser which enables selection of CGM file when @link 
                       Formboard::FaceAnnotationBuilder::Types 
                       Formboard::FaceAnnotationBuilder::Types@endlink  is @link 
                       Formboard::FaceAnnotationBuilder::TypesCgmFileSelection  
                       Formboard::FaceAnnotationBuilder::TypesCgmFileSelection @endlink .
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetCgmflBrsr
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the string to display the name of Pattern file name selected by user.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXString StrAnnot
            (
            );
            /**Sets  the string to display the name of Pattern file name selected by user.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetStrAnnot
            (
                const NXString & strAnnot /** strannot */ 
            );
            /**Returns  the string to display the name of CGM name selected by user. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXString StrAnnotFileName
            (
            );
            /**Sets  the string to display the name of CGM name selected by user. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetStrAnnotFileName
            (
                const NXString & strAnnot /** strannot */ 
            );
            /**Returns  the user selected point where geometry will be placed  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Point * PntOrigin
            (
            );
            /**Sets  the user selected point where geometry will be placed  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetPntOrigin
            (
                NXOpen::Point * pntOrigin /** pntorigin */ 
            );
            /**Returns  the @link  Formboard::FaceAnnotationBuilder::DrwDestination   Formboard::FaceAnnotationBuilder::DrwDestination @endlink  selected by
                        user to place the geometry  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::FaceAnnotationBuilder::DrwDestination DestEnum
            (
            );
            /**Sets  the @link  Formboard::FaceAnnotationBuilder::DrwDestination   Formboard::FaceAnnotationBuilder::DrwDestination @endlink  selected by
                        user to place the geometry  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetDestEnum
            (
                NXOpen::Formboard::FaceAnnotationBuilder::DrwDestination destEnum /** destenum */ 
            );
            /**Returns  the toggle which defines whether the selected component is to be blanked or not  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: bool TogBlank
            (
            );
            /**Sets  the toggle which defines whether the selected component is to be blanked or not  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetTogBlank
            (
                bool togBlank /** togblank */ 
            );
            /**Returns  the @link  Formboard::FaceAnnotationBuilder::Types   Formboard::FaceAnnotationBuilder::Types @endlink 
                        selected by user  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::FaceAnnotationBuilder::Types Type
            (
            );
            /**Sets  the @link  Formboard::FaceAnnotationBuilder::Types   Formboard::FaceAnnotationBuilder::Types @endlink 
                        selected by user  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetType
            (
                NXOpen::Formboard::FaceAnnotationBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
