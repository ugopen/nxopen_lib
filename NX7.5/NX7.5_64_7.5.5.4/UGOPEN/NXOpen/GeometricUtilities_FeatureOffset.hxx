#ifndef NXOpen_GEOMETRICUTILITIES_FEATUREOFFSET_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FEATUREOFFSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FeatureOffset.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FeatureOffset;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        /** This enum represents the kind of offset */
        enum Type
        {
            TypeNoOffset/** No offset */,
            TypeNonsymmetricOffset/** Offset with two different distances */,
            TypeSymmetricOffset/** Offset with same distance in both directions */,
            TypeSingleOffset/** Offset with single distance in one direction */
        };

    }
    namespace GeometricUtilities
    {
        class _FeatureOffsetBuilder;
        class FeatureOffsetImpl;
        /** Represents a Offset .
            */
        class NXOPENCPPEXPORT  FeatureOffset : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: FeatureOffsetImpl * m_featureoffset_impl;
            private: friend class  _FeatureOffsetBuilder;
            protected: FeatureOffset();
            public: ~FeatureOffset();
            /** The Start Offset
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartOffset
            (
                const NXString & valueExpression /** value of start offset expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** The End Offset
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndOffset
            (
                const NXString & valueExpression /** value of end offset expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the Start Offset
                     <br> License requirements : None */
            public: NXOpen::Expression * StartOffset
            (
            );
            /**Returns  the End Offset
                     <br> License requirements : None */
            public: NXOpen::Expression * EndOffset
            (
            );
            /**Sets  the Offset option
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOption
            (
                NXOpen::GeometricUtilities::Type offsetType /** offset type */
            );
            /**Returns  the Offset option
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Type Option
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
