#ifndef NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECTDISPLAYCONTEXT_HXX_INCLUDED
#define NXOpen_USERDEFINEDOBJECTS_USERDEFINEDOBJECTDISPLAYCONTEXT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedObjects_UserDefinedObjectDisplayContext.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace UserDefinedObjects
    {
        class UserDefinedObjectDisplayContext;
    }
    namespace UserDefinedObjects
    {
    }
    namespace UserDefinedObjects
    {
        class UserDefinedObjectDisplayContextImpl;
        /** This class is used to display User Defined Objects */
        class NXOPENCPPEXPORT  UserDefinedObjectDisplayContext : public TransientObject
        {
            /** This enumerated type specifies the type of marker to be displayed. */
            public: enum PolyMarker
            {
                PolyMarkerNoMarker/** no marker */ ,
                PolyMarkerPoint/** point */ ,
                PolyMarkerDot/** dot */ ,
                PolyMarkerAsterisk/** asterisk */ ,
                PolyMarkerCircle/** circle */ ,
                PolyMarkerPoundsign/** poundsign */ ,
                PolyMarkerX/** x */ ,
                PolyMarkerGridpoint/** gridpoint */ ,
                PolyMarkerSquare/** square */ ,
                PolyMarkerTriangleMarker/** triangle marker */ ,
                PolyMarkerDiamond/** diamond */ ,
                PolyMarkerCenterline/** centerline */ ,
                PolyMarkerConsFix/** cons fix */ ,
                PolyMarkerConsHorizontal/** cons horizontal */ ,
                PolyMarkerConsVertical/** cons vertical */ ,
                PolyMarkerConsParallel/** cons parallel */ ,
                PolyMarkerConsPerpendicular/** cons perpendicular */ ,
                PolyMarkerConsTangent/** cons tangent */ ,
                PolyMarkerConsConcentric/** cons concentric */ ,
                PolyMarkerConsCoincident/** cons coincident */ ,
                PolyMarkerConsCollinear/** cons collinear */ ,
                PolyMarkerConsPointOnCurve/** cons point on curve */ ,
                PolyMarkerConsMidpoint/** cons midpoint */ ,
                PolyMarkerConsEqualLength/** cons equal length */ ,
                PolyMarkerConsEqualRadius/** cons equal radius */ ,
                PolyMarkerConsConstantLength/** cons constant length */ ,
                PolyMarkerConsConstantAngle/** cons constant angle */ ,
                PolyMarkerConsMirror/** cons mirror */ ,
                PolyMarkerDimRadius/** dim radius */ ,
                PolyMarkerDimDiameter/** dim diameter */ ,
                PolyMarkerDimParallel/** dim parallel */ ,
                PolyMarkerDimPerpendicular/** dim perpendicular */ ,
                PolyMarkerConsSlope/** cons slope */ ,
                PolyMarkerConsString/** cons string */ ,
                PolyMarkerConsUniformScaled/** cons uniform scaled */ ,
                PolyMarkerConsNonUniformScaled/** cons non uniform scaled */ ,
                PolyMarkerConsAssocTrim/** cons assoc trim */ ,
                PolyMarkerConsAssocOffset/** cons assoc offset */ ,
                PolyMarkerDisp2tResSpotWeld/** disp2t res spot weld */ ,
                PolyMarkerDisp3tResSpotWeld/** disp3t res spot weld */ ,
                PolyMarkerDisp4tResSpotWeld/** disp4t res spot weld */ ,
                PolyMarkerDisp2tDcSpotWeld/** disp2t dc spot weld */ ,
                PolyMarkerDisp3tDcSpotWeld/** disp3t dc spot weld */ ,
                PolyMarkerDisp4tDcSpotWeld/** disp4t dc spot weld */ ,
                PolyMarkerDisp2tKpcSpotWeld/** disp2t kpc spot weld */ ,
                PolyMarkerDisp3tKpcSpotWeld/** disp3t kpc spot weld */ ,
                PolyMarkerDisp4tKpcSpotWeld/** disp4t kpc spot weld */ ,
                PolyMarkerDisp2tProcSpotWeld/** disp2t proc spot weld */ ,
                PolyMarkerDisp3tProcSpotWeld/** disp3t proc spot weld */ ,
                PolyMarkerDisp4tProcSpotWeld/** disp4t proc spot weld */ ,
                PolyMarkerArcSpotWeld/** arc spot weld */ ,
                PolyMarkerClinchWeld/** clinch weld */ ,
                PolyMarkerAnchor/** anchor */ ,
                PolyMarkerLeftLeaderConnection/** left leader connection */ ,
                PolyMarkerRightLeaderConnection/** right leader connection */ ,
                PolyMarkerFilledCircle/** filled circle */ ,
                PolyMarkerFilledSquare/** filled square */ ,
                PolyMarkerLargeFilledSquare/** large filled square */ ,
                PolyMarkerDatumPoint/** datum point */ ,
                PolyMarkerSnappingDiamond/** snapping diamond */ ,
                PolyMarkerCircleInCircle/** circle in circle */ ,
                PolyMarkerCircleInSquare/** circle in square */ ,
                PolyMarkerSquareInSquare/** square in square */ ,
                PolyMarkerFilledLeftTriangle/** filled left triangle */ ,
                PolyMarkerFilledRightTriangle/** filled right triangle */ ,
                PolyMarkerFilledUpTriangle/** filled up triangle */ ,
                PolyMarkerFilledDownTriangle/** filled down triangle */ ,
                PolyMarkerFilledLeftTriangleInCircle/** filled left triangle in circle */ ,
                PolyMarkerFilledRightTriangleInCircle/** filled right triangle in circle */ ,
                PolyMarkerFilledUpTriangleInCircle/** filled up triangle in circle */ ,
                PolyMarkerFilledDownTriangleInCircle/** filled down triangle in circle */ ,
                PolyMarkerFilledLeftTriangleInSquare/** filled left triangle in square */ ,
                PolyMarkerFilledRightTriangleInSquare/** filled right triangle in square */ ,
                PolyMarkerFilledUpTriangleInSquare/** filled up triangle in square */ ,
                PolyMarkerFilledDownTriangleInSquare/** filled down triangle in square */ ,
                PolyMarkerRoundedCross/** rounded cross */ ,
                PolyMarkerFilledDiamond/** filled diamond */ ,
                PolyMarkerUpDownTriangles/** up down triangles */ ,
                PolyMarkerLeftRightTriangles/** left right triangles */ ,
                PolyMarkerSmallWheel/** small wheel */ ,
                PolyMarkerLargeWheel/** large wheel */ ,
                PolyMarkerHollowCircle/** hollow circle */ ,
                PolyMarkerPreviewPerpendicular/** preview perpendicular */ ,
                PolyMarkerPreviewHorizontal/** preview horizontal */ ,
                PolyMarkerPreviewVertical/** preview vertical */ ,
                PolyMarkerPreviewTangent/** preview tangent */ ,
                PolyMarkerPreviewParallel/** preview parallel */ ,
                PolyMarkerPreviewPointOnCurve/** preview point on curve */ ,
                PolyMarkerPreviewCollinear/** preview collinear */ ,
                PolyMarkerRuler/** ruler */ ,
                PolyMarkerProtractor/** protractor */ ,
                PolyMarkerSketchNotebook/** sketch notebook */ ,
                PolyMarkerArcEndPoint/** arc end point */ ,
                PolyMarkerDisp2PtArcMarker/** disp2pt arc marker */ ,
                PolyMarkerBigAsterisk/** big asterisk */ ,
                PolyMarkerLineInCircle/** line in circle */ ,
                PolyMarkerPlusInCircle/** plus in circle */ ,
                PolyMarkerCenterOfRotation/** center of rotation */ ,
                PolyMarkerPreviewX/** preview x */ ,
                PolyMarkerPreviewY/** preview y */ ,
                PolyMarkerPreviewZ/** preview z */ ,
                PolyMarkerDisp2tGeneralSpotWeld/** disp2t general spot weld */ ,
                PolyMarkerDisp3tGeneralSpotWeld/** disp3t general spot weld */ ,
                PolyMarkerDisp4tGeneralSpotWeld/** disp4t general spot weld */ ,
                PolyMarkerDisp2tVitalSpotWeld/** disp2t vital spot weld */ ,
                PolyMarkerDisp3tVitalSpotWeld/** disp3t vital spot weld */ ,
                PolyMarkerDisp4tVitalSpotWeld/** disp4t vital spot weld */ ,
                PolyMarkerDisp2tImportantSpotWeld/** disp2t important spot weld */ ,
                PolyMarkerDisp3tImportantSpotWeld/** disp3t important spot weld */ ,
                PolyMarkerDisp4tImportantSpotWeld/** disp4t important spot weld */ ,
                PolyMarkerDisp2tSemipanelSpotWeld/** disp2t semipanel spot weld */ ,
                PolyMarkerDisp3tSemipanelSpotWeld/** disp3t semipanel spot weld */ ,
                PolyMarkerDisp4tSemipanelSpotWeld/** disp4t semipanel spot weld */ ,
                PolyMarkerInvalidMarker/** invalid marker */ 
            };

            /** The enumerated type facet to be displayed */
            public: enum FacetType
            {
                FacetTypeTriangle/** The facet topology is a triangle facet */,
                FacetTypePolygon/** The facet topology is a polygon facet */,
                FacetTypeTristrip/** The facet topology is a tristrip facet */
            };

            /** This enumerated type specifies the type of reference point used in the text box. */
            public: enum TextRef
            {
                TextRefSystemDefault/** Display the text using the system default */,
                TextRefTopLeft/** Display the text in the top left of the text box */,
                TextRefTopCenter/** Display the text in the top center of the text box */,
                TextRefTopRight/** Display the text in the top right of the text box */,
                TextRefMiddleLeft/** Display the text in the middle left of the text box */,
                TextRefMiddleCenter/** Display the text in middle center of text box */,
                TextRefMiddleRight/** Display the text in middle right of text box */,
                TextRefBottomLeft/** Display the text in bottom left of text box */,
                TextRefBottomCenter/** Display the text in bottom center of text box */,
                TextRefBottomRight/** Display the text in bottom right of text box */
            };

            private: UserDefinedObjectDisplayContextImpl * m_userdefinedobjectdisplaycontext_impl;
            public: explicit UserDefinedObjectDisplayContext(void *ptr);
            /** Frees the memory associated with this object.  After invocation of this
                      method, the object is no longer valid.   <br> License requirements : None */
            public: virtual ~UserDefinedObjectDisplayContext();
            /** Displays an arc for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The arc will be created in a plane whose normal is the Z axis 
                        of the orientation matrix  
                         (matrix[0-2] is the X axis of the orientation matrix,  
                          matrix[3-5] is the Y axis of the orientation matrix, and
                          matrix[6-8] is the Y axis of the orientation matrix.)
                        The start and end angles are measured relative to
                        the X and Y axis of this orientation matrix.  <br> License requirements : None */
            public: void DisplayArc
            (
                const NXOpen::Point3d & center /** Center of the arc (absolute coordinates transformed by the orientation matrix) */,
                const NXOpen::Matrix3x3 & original /** Orientation matrix for the arc. */,
                double radius /** Radius of the arc.  Must be greater than zero. */,
                double startAngle /** Start angle in radians  */,
                double endAngle /** End angle in radians */
            );
            /** Displays a circle for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The circle will be created in a plane which is normal to
                        the Z axis of the orientation matrix.  
                         (matrix[0-2] is the X axis of the orientation matrix,  
                          matrix[3-5] is the Y axis of the orientation matrix, and
                          matrix[6-8] is the Y axis of the orientation matrix.)  <br> License requirements : None */
            public: void DisplayCircle
            (
                const NXOpen::Point3d & center /** Center of the arc (absolute coordinates transformed by the orientation matrix) */,
                const NXOpen::Matrix3x3 & original /** Orientation matrix for the arc. */,
                double radius /** Radius of the arc.  Must be greater than zero. */,
                bool filled /** True if the interior of the circle is solid filled, 
                                                         otherwise the interior is not filled */
            );
            /** Displays a polyline (a connected set of line segements) for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The line segments are defined by an array of points. <br> License requirements : None */
            public: void DisplayPolyline
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates which define the polyline.
                                                                                 points[0-2] defines the first point, points[3-5] defines the second point, etc. */
            );
            /** Displays a series of points for a @link UserDefinedObject UserDefinedObject@endlink .  <br> License requirements : None */
            public: void DisplayPoints
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates. 
                                                                                  points[0-2] defines the first point, points[3-5] defines the second point, etc.*/,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::PolyMarker markerType /** The type of marker displayed for each point */
            );
            /** Displays a polygon (a closed set of line segements) for a @link UserDefinedObject UserDefinedObject@endlink .  
                        The line segments are defined by an array of points.  <br> License requirements : None */
            public: void DisplayPolygon
            (
                const std::vector<NXOpen::Point3d> & points /** Array of point coordinates which define the polyline.
                                                                                  points[0-2] defines the first end point, points[3-5] defines the second end point, etc. */,
                bool filled /** True if the interior of the polygon is solid filled, 
                                                         otherwise the interior is not filled */
            );
            /** Displays a series of facets for a @link UserDefinedObject UserDefinedObject@endlink .  <br> License requirements : None */
            public: void DisplayFacets
            (
                int numVertices /** Number of points to define a facet. */,
                int numFacets /** Number of facets to display. */,
                const std::vector<NXOpen::Point3d> & vertices /** Array of point coordinates which define the vertices of the facets.
                            For example assume num_facets = 2 and num_vertices = 3, then vertices[0-2] defines the point of the first vertex of the first facet,
                            vertices[3-5] defines the second vertex point of the first facet, and vertices[6-8] defines the last vertex point of the first facet.
                            Next vertices[9-11] define the first vertex point of the second facet, vertices[12-14] is the second vertex of the second facet, and last
                            vertices[15-17] defines the last vertex of the second facet. */,
                const std::vector<NXOpen::Vector3d> & normals /** Array of vectors which define the normal to the facet at a vertex point.
                            Normal vectors must be unit vectors, and they should point out away from the faceted object.
                            For example assume num_facets = 2 and num_vertices = 3, then normals[0-8] define the normal vectors at each verte point in the first facet, 
                            and normals[9-17] define the normals for the vertex points of the second facet.  
                            More specifically normals[0-2] should define a unit normal vector out away from the facet at the point defined by vertices[0-2].  
                            Likewise normals[3-5] should define a unit normal vector out away from the facet at the point defined by vertices[3-5]. */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::FacetType typeOfFacet /** The format of the facet in the facet array */
            );
            /** Displays a text string for a @link UserDefinedObject UserDefinedObject@endlink .  <br> License requirements : None */
            public: void DisplayText
            (
                const NXString & text /**  Text string to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & textCoordinates /** Position of text box reference point in abs */,
                NXOpen::UserDefinedObjects::UserDefinedObjectDisplayContext::TextRef referencePoint /** Reference point of text box */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
