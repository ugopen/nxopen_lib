#ifndef NXOpen_FEATURES_MIRRORFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIRRORFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MirrorFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/Features_MirrorFaceBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MirrorFaceBuilder;
    }
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class SelectISurface;
    namespace Features
    {
        class _MirrorFaceBuilderBuilder;
        class MirrorFaceBuilderImpl;
        /**
            Represents a @link Features::MirrorFace Features::MirrorFace@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMirrorFaceBuilder Features::FeatureCollection::CreateMirrorFaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FaceToMirror.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.ThicknessChainEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceToMirror.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  MirrorFaceBuilder : public Features::FeatureBuilder
        {
            /** Represents the mirror plane options */
            public: enum MirrorPlaneOptions
            {
                MirrorPlaneOptionsExisting/** Existing Plane */,
                MirrorPlaneOptionsNew/** New Plane */
            };

            private: MirrorFaceBuilderImpl * m_mirrorfacebuilder_impl;
            private: friend class  _MirrorFaceBuilderBuilder;
            protected: MirrorFaceBuilder();
            public: ~MirrorFaceBuilder();
            /**Returns  the face to mirror. Please refer @link Features::FaceRecognitionBuilder Features::FaceRecognitionBuilder@endlink  for details.  <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * FaceToMirror
            (
            );
            /**Returns  the mirror plane option  <br> License requirements : None */
            public: NXOpen::Features::MirrorFaceBuilder::MirrorPlaneOptions MirrorPlaneOption
            (
            );
            /**Sets  the mirror plane option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMirrorPlaneOption
            (
                NXOpen::Features::MirrorFaceBuilder::MirrorPlaneOptions mirrorPlaneOptions /** mirror plane options */ 
            );
            /**Returns  the existing mirror plane  <br> License requirements : None */
            public: NXOpen::SelectISurface * ExistingMirrorPlane
            (
            );
            /**Returns  the new mirror plane  <br> License requirements : None */
            public: NXOpen::Plane * NewMirrorPlane
            (
            );
            /**Sets  the new mirror plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNewMirrorPlane
            (
                NXOpen::Plane * newMirrorPlane /** new mirror plane */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
