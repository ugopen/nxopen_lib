#ifndef NXOpen_DIE_QUICKBINDERBUILDER_HXX_INCLUDED
#define NXOpen_DIE_QUICKBINDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_QuickBinderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_QuickBinderBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class QuickBinderBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Limits;
    }
    class ScCollector;
    namespace Die
    {
        class _QuickBinderBuilderBuilder;
        class QuickBinderBuilderImpl;
        /** 
            Represents a @link Die::QuickBinderBuilder Die::QuickBinderBuilder@endlink  builder which builds a developable binder sheet
            body by adding cones, cylinders, or planes to an approximated face.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateQuickBinderBuilder Die::DieCollection::CreateQuickBinderBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  QuickBinderBuilder : public Features::FeatureBuilder
        {
            /** The method used to approximate the product faces. */
            public: enum Types
            {
                TypesPlanar/** planar */,
                TypesCylindrical/** cylindrical */,
                TypesConical/** conical */,
                TypesMonoArc/** mono arc */
            };

            /** The type of edit to be performed on the face. */
            public: enum EditTypes
            {
                EditTypesEdgeExtend/** Extend edge of a face. */,
                EditTypesEdgeExtendStart/** Extend start edge of a planar face. */,
                EditTypesEdgeExtendEnd/** Extend end edge of a planar face. */,
                EditTypesEdgeAngleStart/** Change the angle of the start edge of a planar face. */,
                EditTypesEdgeAngleEnd/** Change the angle of the end edge of a planar face. */,
                EditTypesFaceRadius/** Change the face radius of a conical/cylindrical face. */,
                EditTypesFaceCentralAngle/** Change the central angle of a conical/cylindrical face. */,
                EditTypesFaceReverseConvexity/** Reverse the convexity of a conical/cylindrical face. */,
                EditTypesTransform/** Transform body. */,
                EditTypesExtendUMinimum/** Extend the U Minimum edge of the anchor face. */,
                EditTypesExtendUMaximum/** Extend the U Maximum edge of the anchor face. */,
                EditTypesExtendVMinimum/** Extend the V Minimum edge of the anchor face. */,
                EditTypesExtendVMaximum/** Extend the V Maximum edge of the anchor face. */
            };

            private: QuickBinderBuilderImpl * m_quickbinderbuilder_impl;
            private: friend class  _QuickBinderBuilderBuilder;
            protected: QuickBinderBuilder();
            public: ~QuickBinderBuilder();
            /**Returns  the product faces used to perform the initial approximation.  <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the start length extension.  <br> License requirements : None */
            public: NXOpen::Expression * Start
            (
            );
            /**Returns  the end length extension.  <br> License requirements : None */
            public: NXOpen::Expression * End
            (
            );
            /**Returns  the value to extend both sides of a face.  <br> License requirements : None */
            public: NXOpen::Expression * Extend
            (
            );
            /**Returns  the radius value of a cylidrical face. <br> License requirements : None */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the base radius for a cone.  <br> License requirements : None */
            public: NXOpen::Expression * BaseRadius
            (
            );
            /**Returns  the radius value of a cylidrical anchor face. <br> License requirements : None */
            public: NXOpen::Expression * AnchorRadius
            (
            );
            /**Returns  the base radius for a conical anchor face.  <br> License requirements : None */
            public: NXOpen::Expression * AnchorBaseRadius
            (
            );
            /**Returns  the start angle of a planar face.  This angle rotates the side edge around the face normal with 
                        the rotation point being one of the endpoints of the edge that is attached to the previous face.
                     <br> License requirements : None */
            public: NXOpen::Expression * StartAngle
            (
            );
            /**Returns  the end angle of a planar face.  This angle rotates the side edge around the face normal with 
                        the rotation point being one of the endpoints of the edge that is attached to the previous face.
                     <br> License requirements : None */
            public: NXOpen::Expression * EndAngle
            (
            );
            /**Returns  the central angle of a cylinder/cone.  <br> License requirements : None */
            public: NXOpen::Expression * CentralAngle
            (
            );
            /**Returns  the central angle limits of cylinder/cone.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Limits * Limits
            (
            );
            /**Returns  the top radius for a cone.  <br> License requirements : None */
            public: NXOpen::Expression * TopRadius
            (
            );
            /**Returns  the top radius for a conical anchor face.  <br> License requirements : None */
            public: NXOpen::Expression * AnchorTopRadius
            (
            );
            /**Returns  the u minimum extension distance.  <br> License requirements : None */
            public: NXOpen::Expression * UMinimum
            (
            );
            /**Returns  the u maximum extension distance.  <br> License requirements : None */
            public: NXOpen::Expression * UMaximum
            (
            );
            /**Returns  the v minimum extension distance.  <br> License requirements : None */
            public: NXOpen::Expression * VMinimum
            (
            );
            /**Returns  the v maximum extension distance.  <br> License requirements : None */
            public: NXOpen::Expression * VMaximum
            (
            );
            /** Create initial face approximated from the selected faces.  @return  index of anchor face created  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: int CreateAnchorFace
            (
            );
            /** Edit the parameters of a face according to the type of edit previously indicated by 
                        @link Die::QuickBinderBuilder::EditType Die::QuickBinderBuilder::EditType@endlink .
                     <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void EditFace
            (
            );
            /** Add a component face to the binder body.  @return  index of component face created  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: int AddFace
            (
                NXOpen::Die::QuickBinderBuilder::Types type /** type of face to add */
            );
            /** Remove a face from the binder body.  Face to remove is indicated by 
                        @link Die::QuickBinderBuilder::FaceIndexToEdit Die::QuickBinderBuilder::FaceIndexToEdit@endlink .
                     <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void RemoveFace
            (
            );
            /**Returns  the type of initial face created by approximating the faces indicated by
                        @link Die::QuickBinderBuilder::Faces Die::QuickBinderBuilder::Faces@endlink .
                     <br> License requirements : None */
            public: NXOpen::Die::QuickBinderBuilder::Types Type
            (
            );
            /**Sets  the type of initial face created by approximating the faces indicated by
                        @link Die::QuickBinderBuilder::Faces Die::QuickBinderBuilder::Faces@endlink .
                     <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetType
            (
                NXOpen::Die::QuickBinderBuilder::Types type /** type */ 
            );
            /**Returns  the type edit to be performed on the face or edge.  <br> License requirements : None */
            public: NXOpen::Die::QuickBinderBuilder::EditTypes EditType
            (
            );
            /**Sets  the type edit to be performed on the face or edge.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetEditType
            (
                NXOpen::Die::QuickBinderBuilder::EditTypes type /** type */ 
            );
            /**Returns  the index of the face to edit.  <br> License requirements : None */
            public: int FaceIndexToEdit
            (
            );
            /**Sets  the index of the face to edit.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFaceIndexToEdit
            (
                int index /** index */ 
            );
            /**Returns  the index of the edge to edit.  <br> License requirements : None */
            public: int EdgeIndexToEdit
            (
            );
            /**Sets  the index of the edge to edit.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetEdgeIndexToEdit
            (
                int index /** index */ 
            );
            /** Set the point used to determine the start and end side of the face. Also used to determine
                        which end of the conic to edit.
                     <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReferencePoint
            (
                const NXOpen::Point3d & location /** Reference Point in absolute coordinates */
            );
            /**Returns  the new origin of binder sheet body transformation.  <br> License requirements : None */
            public: NXOpen::Point3d TransformOrigin
            (
            );
            /**Sets  the new origin of binder sheet body transformation.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTransformOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /** Get the edge indexes for a face.  Also returns corresponding points for each edge to be used as input to
                        @link Die::QuickBinderBuilder::SetReferencePoint Die::QuickBinderBuilder::SetReferencePoint@endlink .
                     <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void GetEdgesOfFace
            (
                int faceIndex /** face index */,
                std::vector<int> & edgeIndex /** edge indexes */,
                std::vector<NXOpen::Point3d> & referencePoints /** reference points corresponding to each edge */
            );
            /**Returns  the rotation matrix of binder sheet body transformation.  <br> License requirements : None */
            public: NXOpen::Matrix3x3 TransformMatrix
            (
            );
            /**Sets  the rotation matrix of binder sheet body transformation.  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTransformMatrix
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
