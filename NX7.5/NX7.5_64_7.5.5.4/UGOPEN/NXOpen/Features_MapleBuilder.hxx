#ifndef NXOpen_FEATURES_MAPLEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MAPLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MapleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_MapleBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MapleBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _MapleBuilderBuilder;
        class MapleBuilderImpl;
        /**
            Represents a @link Features::Maple Features::Maple@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMapleBuilder Features::FeatureCollection::CreateMapleBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssociativityEnumType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        AssociativityToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SettingsToggle </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  MapleBuilder : public Features::FeatureBuilder
        {
            /** the Associativity */
            public: enum AssociativityEnum
            {
                AssociativityEnumNone/** none */ ,
                AssociativityEnumNew/** new */ ,
                AssociativityEnumExisting/** existing */ 
            };

            private: MapleBuilderImpl * m_maplebuilder_impl;
            private: friend class  _MapleBuilderBuilder;
            protected: MapleBuilder();
            public: ~MapleBuilder();
            /**Returns  the file name returned by the Browser  <br> License requirements : None */
            public: NXString FileBrowser
            (
            );
            /**Sets  the file name returned by the Browser  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the associativity toggle  <br> License requirements : None */
            public: bool AssociativityToggle
            (
            );
            /**Sets  the associativity toggle  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativityToggle
            (
                bool associativityToggle /** associativitytoggle */ 
            );
            /**Returns  the associativity enum type  <br> License requirements : None */
            public: NXOpen::Features::MapleBuilder::AssociativityEnum AssociativityEnumType
            (
            );
            /**Sets  the associativity enum type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativityEnumType
            (
                NXOpen::Features::MapleBuilder::AssociativityEnum associativityEnumType /** associativityenumtype */ 
            );
            /**Returns  the settings toggle  <br> License requirements : None */
            public: bool SettingsToggle
            (
            );
            /**Sets  the settings toggle  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSettingsToggle
            (
                bool settingsToggle /** settingstoggle */ 
            );
            /**Returns  the number of input expressions  <br> License requirements : None */
            public: int Inputs
            (
            );
            /**Sets  the number of input expressions  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInputs
            (
                int numInputExpressions /** num input expressions */ 
            );
            /** The array of expressions  @return  array of expressions  <br> License requirements : None */
            public: std::vector<NXOpen::Expression *> GetExpressions
            (
            );
            /** Set the expressions in the Maple Builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** array of expressions */
            );
            /** The array of maple names  @return  array of names  <br> License requirements : None */
            public: std::vector<NXString> GetMaplenames
            (
            );
            /** Set the maple names corresponding to expressions in the Maple Builder <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaplenames
            (
                std::vector<NXString> & names /** array of names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
