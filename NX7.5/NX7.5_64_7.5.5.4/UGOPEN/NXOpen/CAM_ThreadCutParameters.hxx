#ifndef NXOpen_CAM_THREADCUTPARAMETERS_HXX_INCLUDED
#define NXOpen_CAM_THREADCUTPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ThreadCutParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ThreadCutParameters.hxx>
#include <NXOpen/CAM_CutParameters.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ThreadCutParameters;
    }
    namespace CAM
    {
        class CutParameters;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class PitchSetting;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class TurnThreadFinishPassesBuilder;
    }
    namespace CAM
    {
        class _ThreadCutParametersBuilder;
        class ThreadCutParametersImpl;
        /**
            Represents a @link CAM::ThreadCutParameters CAM::ThreadCutParameters@endlink 
            */
        class NXOPENCPPEXPORT  ThreadCutParameters : public CAM::CutParameters
        {
            private: ThreadCutParametersImpl * m_threadcutparameters_impl;
            private: friend class  _ThreadCutParametersBuilder;
            protected: ThreadCutParameters();
            public: ~ThreadCutParameters();
            /**Returns  the number of starts <br> License requirements : None */
            public: int NumberOfStarts
            (
            );
            /**Sets  the number of starts <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfStarts
            (
                int startNum /** the number of starts*/
            );
            /**Returns  the thread cut depth  <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * CutDepth
            (
            );
            /**Returns  the tolerance <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * Tolerance
            (
            );
            /**Returns  the pitch setting  <br> License requirements : None */
            public: NXOpen::CAM::PitchSetting * PitchSetting
            (
            );
            /**Returns  the finish passes  <br> License requirements : None */
            public: NXOpen::CAM::TurnThreadFinishPassesBuilder * FinishPasses
            (
            );
            /**Returns  the chase passes <br> License requirements : None */
            public: int ChasePasses
            (
            );
            /**Sets  the chase passes <br> License requirements : cam_base ("CAM BASE") */
            public: void SetChasePasses
            (
                int chasePasses /** the chase passes*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
