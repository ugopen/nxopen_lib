#ifndef NXOpen_ANNOTATIONS_DATUMREFERENCEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DATUMREFERENCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DatumReferenceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_DatumReferenceBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DatumReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _DatumReferenceBuilderBuilder;
        class DatumReferenceBuilderImpl;
        /**
            Represents a @link Annotations::DatumReferenceBuilder Annotations::DatumReferenceBuilder@endlink 
            */
        class NXOPENCPPEXPORT  DatumReferenceBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Specifies the material modifier condition for the datum reference */
            public: enum DatumReferenceMaterialCondition
            {
                DatumReferenceMaterialConditionNone/** none */,
                DatumReferenceMaterialConditionLeastMaterialCondition/** least material condition */,
                DatumReferenceMaterialConditionMaximumMaterialCondition/** maximum material condition */,
                DatumReferenceMaterialConditionRegardlessOfFeatureSize/** regardless of size */
            };

            private: DatumReferenceBuilderImpl * m_datumreferencebuilder_impl;
            private: friend class  _DatumReferenceBuilderBuilder;
            protected: DatumReferenceBuilder();
            public: ~DatumReferenceBuilder();
            /**Returns  the datum reference datum letter  <br> License requirements : None */
            public: NXString Letter
            (
            );
            /**Sets  the datum reference datum letter  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLetter
            (
                const NXString & datumReferenceDatum /** datumreferencedatum */ 
            );
            /**Returns  the datum reference material condition  <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder::DatumReferenceMaterialCondition MaterialCondition
            (
            );
            /**Sets  the datum reference material condition  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaterialCondition
            (
                NXOpen::Annotations::DatumReferenceBuilder::DatumReferenceMaterialCondition materialCondition /** materialcondition */ 
            );
            /**Returns  the datum reference free state  <br> License requirements : None */
            public: bool FreeState
            (
            );
            /**Sets  the datum reference free state  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFreeState
            (
                bool datumReferenceFreeState /** datumreferencefreestate */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
