#ifndef NXOpen_FEATURES_SEATBELTANCHORAGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SEATBELTANCHORAGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SeatBeltAnchorageBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SeatBeltAnchorageBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SeatBeltAnchorageBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    namespace Features
    {
        class _SeatBeltAnchorageBuilderBuilder;
        class SeatBeltAnchorageBuilderImpl;
        /**
            Represents a @link Features::SeatBeltAnchorage Features::SeatBeltAnchorage@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSeatBeltAnchorageBuilder Features::FeatureCollection::CreateSeatBeltAnchorageBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AnchorageLocation </td> <td> 
         
        VehicleStructure </td> </tr> 

        <tr><td> 
         
        BackAngleDbl </td> <td> 
         
        22 </td> </tr> 

        <tr><td> 
         
        BackAngleDim.Value </td> <td> 
         
        22 </td> </tr> 

        <tr><td> 
         
        BeltRouting </td> <td> 
         
        OutsideSeatThruSeatSpring </td> </tr> 

        <tr><td> 
         
        FloorHeightDim.Value </td> <td> 
         
        325 (millimeters part), 12.8 (inches part) </td> </tr> 

        <tr><td> 
         
        SeatPosition </td> <td> 
         
        Left </td> </tr> 

        <tr><td> 
         
        SeatType </td> <td> 
         
        MovableFront </td> </tr> 

        <tr><td> 
         
        SgrpXvalDim.Value </td> <td> 
         
        1500 (millimeters part), 59.06 (inches part) </td> </tr> 

        <tr><td> 
         
        SgrpYvalDim.Value </td> <td> 
         
        -400 (millimeters part), -15.75 (inches part) </td> </tr> 

        <tr><td> 
         
        SgrpZvalDim.Value </td> <td> 
         
        650 (millimeters part), 25.59 (inches part) </td> </tr> 

        <tr><td> 
         
        Standard </td> <td> 
         
        J383SeatBeltAnchorage </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  SeatBeltAnchorageBuilder : public Features::FeatureBuilder
        {
            /** the standard type */
            public: enum StandardTypes
            {
                StandardTypesJ383SeatBeltAnchorage/** j383 */,
                StandardTypesJ1369ChildRestraintTetherStraps/** j1369 */,
                StandardTypesBothJ383AndJ1369/** both */
            };

            /** the seat belt anchorage location type */
            public: enum AnchorageLocationTypes
            {
                AnchorageLocationTypesVehicleStructure/** vehicle structure */,
                AnchorageLocationTypesSeatAssembly/** seat assembly */
            };

            /** the seat belt routing type */
            public: enum RoutingTypes
            {
                RoutingTypesOutsideSeatThruSeatSpring/** outside */,
                RoutingTypesToAnchorage/** to anchorage */
            };

            /** the seat type */
            public: enum SeatTypes
            {
                SeatTypesMovableFront/** front */,
                SeatTypesMovableRear/** rear */,
                SeatTypesFixed/** fixed */
            };

            /** the seat position type */
            public: enum SeatPositionTypes
            {
                SeatPositionTypesLeft/** left */,
                SeatPositionTypesRight/** right */,
                SeatPositionTypesNotOutboard/** non-outboard */
            };

            private: SeatBeltAnchorageBuilderImpl * m_seatbeltanchoragebuilder_impl;
            private: friend class  _SeatBeltAnchorageBuilderBuilder;
            protected: SeatBeltAnchorageBuilder();
            public: ~SeatBeltAnchorageBuilder();
            /**Returns  the standard for seat belt anchorage  <br> License requirements : None */
            public: NXOpen::Features::SeatBeltAnchorageBuilder::StandardTypes Standard
            (
            );
            /**Sets  the standard for seat belt anchorage  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetStandard
            (
                NXOpen::Features::SeatBeltAnchorageBuilder::StandardTypes standard /** standard */ 
            );
            /** Shows an illustration picture for standard j383 <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void J383Illu
            (
            );
            /** Shows an illustration picture for standard j1369 <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void J1369Illu
            (
            );
            /**Returns  the dimension expression for the X coordinate of SgRp  <br> License requirements : None */
            public: NXOpen::Expression * SgrpXvalDim
            (
            );
            /**Returns  the dimension expression for the Y coordinate of SgRp  <br> License requirements : None */
            public: NXOpen::Expression * SgrpYvalDim
            (
            );
            /**Returns  the dimension expression for the Z coordinate of SgRp  <br> License requirements : None */
            public: NXOpen::Expression * SgrpZvalDim
            (
            );
            /**Returns  the SgRp point  <br> License requirements : None */
            public: NXOpen::Point * SgrpPoint
            (
            );
            /**Sets  the SgRp point  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetSgrpPoint
            (
                NXOpen::Point * sgrpPoint /** sgrppoint */ 
            );
            /**Returns  the dimension expression for back angle  <br> License requirements : None */
            public: NXOpen::Expression * BackAngleDim
            (
            );
            /**Returns  the value of back angle  <br> License requirements : None */
            public: double BackAngleDbl
            (
            );
            /**Sets  the value of back angle  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetBackAngleDbl
            (
                double backAngleDbl /** backangledbl */ 
            );
            /**Returns  the dimension expression for floor height  <br> License requirements : None */
            public: NXOpen::Expression * FloorHeightDim
            (
            );
            /**Returns  the anchorage location type  <br> License requirements : None */
            public: NXOpen::Features::SeatBeltAnchorageBuilder::AnchorageLocationTypes AnchorageLocation
            (
            );
            /**Sets  the anchorage location type  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAnchorageLocation
            (
                NXOpen::Features::SeatBeltAnchorageBuilder::AnchorageLocationTypes anchorageLocation /** anchoragelocation */ 
            );
            /**Returns  the belt routing type  <br> License requirements : None */
            public: NXOpen::Features::SeatBeltAnchorageBuilder::RoutingTypes BeltRouting
            (
            );
            /**Sets  the belt routing type  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetBeltRouting
            (
                NXOpen::Features::SeatBeltAnchorageBuilder::RoutingTypes beltRouting /** beltrouting */ 
            );
            /**Returns  the seat type  <br> License requirements : None */
            public: NXOpen::Features::SeatBeltAnchorageBuilder::SeatTypes SeatType
            (
            );
            /**Sets  the seat type  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetSeatType
            (
                NXOpen::Features::SeatBeltAnchorageBuilder::SeatTypes seatType /** seattype */ 
            );
            /**Returns  the seat position type  <br> License requirements : None */
            public: NXOpen::Features::SeatBeltAnchorageBuilder::SeatPositionTypes SeatPosition
            (
            );
            /**Sets  the seat position type  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetSeatPosition
            (
                NXOpen::Features::SeatBeltAnchorageBuilder::SeatPositionTypes seatPosition /** seatposition */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
