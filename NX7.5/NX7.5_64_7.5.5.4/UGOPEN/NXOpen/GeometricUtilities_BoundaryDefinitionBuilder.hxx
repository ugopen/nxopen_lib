#ifndef NXOpen_GEOMETRICUTILITIES_BOUNDARYDEFINITIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_BOUNDARYDEFINITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_BoundaryDefinitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BoundaryDefinitionBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class BoundaryDefinitionBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _BoundaryDefinitionBuilderBuilder;
        class BoundaryDefinitionBuilderImpl;
        /** Represents a @link GeometricUtilities::BoundaryDefinitionBuilder GeometricUtilities::BoundaryDefinitionBuilder@endlink .
                A boundary definition is a collection of ordered points which can be imagined to be
                connected by a polyline indicating a boundary. Any point in the collection can be 
                marked as a key point. Marking some points as key points helps to delete part of the 
                boundary efficiently. All the points in a boundary definition are co-planar. 
                A depth value can be specified to define a 3D boundary equivalent to an extrusion. */
        class NXOPENCPPEXPORT  BoundaryDefinitionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: BoundaryDefinitionBuilderImpl * m_boundarydefinitionbuilder_impl;
            private: friend class  _BoundaryDefinitionBuilderBuilder;
            protected: BoundaryDefinitionBuilder();
            public: ~BoundaryDefinitionBuilder();
            /** Appends a point to the boundary definition  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void AppendPoint
            (
                const NXOpen::Point3d & point /** Point to append */,
                bool isKeyPoint /** Flag indicating if point is a key point */
            );
            /** Closes the boundary by appending start point at the end of boundary definition  @return   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool Close
            (
            );
            /** Deletes all the points in the boundary definition  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeleteAll
            (
            );
            /** Deletes last key point and all the points from last key point up to and excluding its previous key point  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeleteLastKeyPoint
            (
            );
            /** Queries all the boundary definition points  @return   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: std::vector<NXOpen::Point3d> GetPoints
            (
            );
            /** Sets normal of the plane in which boundary is defined  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlaneNormal
            (
                const NXOpen::Vector3d & direction /** direction */ 
            );
            /**Returns  the region depth  <br> License requirements : None */
            public: NXOpen::Expression * Depth
            (
            );
            /** Translates the boundary from its current position using the direction and the magnitude of a vector.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void Translate
            (
                const NXOpen::Vector3d & vector /** vector */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
