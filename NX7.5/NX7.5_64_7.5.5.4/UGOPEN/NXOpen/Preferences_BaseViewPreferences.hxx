#ifndef NXOpen_PREFERENCES_BASEVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_BASEVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_BaseViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IBaseViewPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class BaseViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class IBaseViewPreferences;
    }
    namespace Preferences
    {
        class BaseViewPreferencesImpl;
        /** Represents set of Base View Preferences applicable to drafting views. 
                These settings apply to any newly created base view.
              <br> To obtain an instance of this class use @link Preferences::ViewPreferences::BaseView Preferences::ViewPreferences::BaseView@endlink  <br> */
        class NXOPENCPPEXPORT  BaseViewPreferences: public virtual Preferences::IBaseViewPreferences
        {
            private: BaseViewPreferencesImpl * m_baseviewpreferences_impl;
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            /** Constructor */
            public: explicit BaseViewPreferences(NXOpen::Preferences::ViewPreferences *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BaseViewPreferences();
            /** The status of faceted representation, if True the clipping bounds are inherited, else 
                        the imported model view is placed on the drawing with an Automatic Rectangular Boundary  <br> License requirements : drafting ("DRAFTING") */
            public: void SetFacetedRepresentation
            (
                bool isFacetedRepresentation /** is faceted representation */ 
            );
            /** The status of inherit clipping boundary, if True the model view's 
                        clipping boundary are inherited when model view is imported onto the drawing, else 
                        the imported model view is placed on the drawing with an Automatic Rectangular Boundary.
                      <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritClippingBoundary
            (
                bool isInheritClippingBoundary /** Inherit XY clipping boundaries of model */
            );
            /** The status of transfer annotation controls whether or not annotations created in 
                        a model view are transferred to the drawing when a view is imported.
                      <br> License requirements : drafting ("DRAFTING") */
            public: void SetTransferAnnotation
            (
                bool isTransferAnnotation /** is transfer annotation */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
