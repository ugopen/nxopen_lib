#ifndef NXOpen_FIELDS_SCALARFIELDWRAPPER_HXX_INCLUDED
#define NXOpen_FIELDS_SCALARFIELDWRAPPER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_ScalarFieldWrapper.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    class Expression;
    namespace Fields
    {
        class Field;
    }
    class NXObject;
    namespace Fields
    {
        class _ScalarFieldWrapperBuilder;
        class ScalarFieldWrapperImpl;
        /** This class defines a scalar value that is internally 
                backed up by a (optionally scaled) field or an expression. */
        class NXOPENCPPEXPORT  ScalarFieldWrapper : public NXObject
        {
            private: ScalarFieldWrapperImpl * m_scalarfieldwrapper_impl;
            private: friend class  _ScalarFieldWrapperBuilder;
            protected: ScalarFieldWrapper();
            public: ~ScalarFieldWrapper();
            /** Sets the implementation of the wrapper to the specified expression  <br> License requirements : None */
            public: void SetExpression
            (
                NXOpen::Expression * expression /** an existing expression that will be this wrapper's value */
            );
            /** Returns the implementation if the wrapper is backed up by an expression;
                        NULL otherwise  @return  an existing expression or NULL  <br> License requirements : None */
            public: NXOpen::Expression * GetExpression
            (
            );
            /** Sets the implementation of the wrapper to the specified field  <br> License requirements : None */
            public: void SetField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                double scaleFactor /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Returns the implementation if the wrapper is backed up by a field;
                        NULL otherwise  @return  an existing field or NULL  <br> License requirements : None */
            public: NXOpen::Fields::Field * GetField
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
