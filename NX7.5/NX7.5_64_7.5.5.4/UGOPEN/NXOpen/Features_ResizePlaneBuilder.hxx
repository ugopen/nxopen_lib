#ifndef NXOpen_FEATURES_RESIZEPLANEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RESIZEPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ResizePlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ResizePlaneBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ResizePlaneBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectDatumPlane;
    namespace Features
    {
        class _ResizePlaneBuilderBuilder;
        class ResizePlaneBuilderImpl;
        /**
            Represents a @link Features::ResizePlane Features::ResizePlane@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateResizePlaneBuilder Features::FeatureCollection::CreateResizePlaneBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ResizePlaneBuilder : public Features::FeatureBuilder
        {
            private: ResizePlaneBuilderImpl * m_resizeplanebuilder_impl;
            private: friend class  _ResizePlaneBuilderBuilder;
            protected: ResizePlaneBuilder();
            public: ~ResizePlaneBuilder();
            /**Returns  the plane  <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * Plane
            (
            );
            /** Sets the four corner points for resizing a datum plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCornerPoints
            (
                const std::vector<NXOpen::Point3d> & cornerPoints /** x,y,z coordinates of corner points */
            );
            /** Gets the four corner points for resizing a datum plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetCornerPoints
            (
                std::vector<NXOpen::Point3d> & cornerPoints /** x,y,z coordinates of corner points */
            );
            /**Returns  the flag for resizing a datum plane. If true, the datum plane is set to a default size  <br> License requirements : None */
            public: bool ResizeDuringUpdate
            (
            );
            /**Sets  the flag for resizing a datum plane. If true, the datum plane is set to a default size  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetResizeDuringUpdate
            (
                bool resizeDuringUpdate /** resizeduringupdate */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
