#ifndef NXOpen_ANNOTATIONS_DIMENSIONDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_AngularTolerance.hxx>
#include <NXOpen/Annotations_AppendedText.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_DimensionPreferences.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/Annotations_LinearTolerance.hxx>
#include <NXOpen/Annotations_UserSymbolPreferences.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DimensionData;
    }
    namespace Annotations
    {
        class AngularTolerance;
    }
    namespace Annotations
    {
        class AppendedText;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class DimensionPreferences;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
        class LinearTolerance;
    }
    namespace Annotations
    {
        class UserSymbolPreferences;
    }
    class Direction;
    class View;
    class Xform;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class DimensionDataImpl;
        /** Represents dimension data */
        class NXOPENCPPEXPORT  DimensionData : public TransientObject
        {
            private: DimensionDataImpl * m_dimensiondata_impl;
            public: explicit DimensionData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~DimensionData();
            /** Returns the associativity at specified index. Valid index values 
                        are {1, 2, 3}. 
                         <br> For ordinate dimensions, the associativity at index 1 stores the ordinate
                        origin data. <br> 

                         <br> The associativity at index 3 stores the following -  <br> 
                         <br> 1. Fold location for the folded radius dimension <br> 
                         <br> 2. Margin data for the ordinate dimensions <br>   @return  List of associativity objects  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::Associativity *> GetAssociativity
            (
                int associativityIndex /** Associativity index */
            );
            /** Sets the associativity at specified index. Valid index values 
                        are {1, 2, 3}. 

                         <br> For ordinate dimensions, the associativity at index 1 stores the ordinate
                        origin data. <br> 

                         <br> The associativity at index 3 stores the following -  <br> 
                         <br> 1. Fold location for the folded radius dimension <br> 
                         <br> 2. Margin data for the ordinate dimensions <br>   <br> License requirements : None */
            public: void SetAssociativity
            (
                int associativityIndex /** Associativity index */,
                const std::vector<NXOpen::Annotations::Associativity *> & associativity /** List of new associativity objects */
            );
            /** Returns the dimension preferences  @return  Dimension preferences  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionPreferences * GetDimensionPreferences
            (
            );
            /** Sets the dimension preferences  <br> License requirements : None */
            public: void SetDimensionPreferences
            (
                NXOpen::Annotations::DimensionPreferences * preferences /** New dimension preferences */
            );
            /** Returns the line and arrow preferences  @return  Line and arrow preferences  <br> License requirements : None */
            public: NXOpen::Annotations::LineAndArrowPreferences * GetLineAndArrowPreferences
            (
            );
            /** Sets the line and arrow preferences  <br> License requirements : None */
            public: void SetLineAndArrowPreferences
            (
                NXOpen::Annotations::LineAndArrowPreferences * prefs /** New line and arrow preferences */
            );
            /** Returns the lettering preferences  @return  Lettering preferences  <br> License requirements : None */
            public: NXOpen::Annotations::LetteringPreferences * GetLetteringPreferences
            (
            );
            /** Sets the lettering preferences  <br> License requirements : None */
            public: void SetLetteringPreferences
            (
                NXOpen::Annotations::LetteringPreferences * letteringPrefs /** New lettering preferences */
            );
            /** Returns the user defined symbol preferences  @return  User symbol preferences  <br> License requirements : None */
            public: NXOpen::Annotations::UserSymbolPreferences * GetUserSymbolPreferences
            (
            );
            /** Sets the user defined symbol preferences  <br> License requirements : None */
            public: void SetUserSymbolPreferences
            (
                NXOpen::Annotations::UserSymbolPreferences * userSymbolPrefs /** New user symbol preferences */
            );
            /**Returns  the leader orientation for the dimension  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderOrientation LeaderOrientation
            (
            );
            /**Sets  the leader orientation for the dimension  <br> License requirements : None */
            public: void SetLeaderOrientation
            (
                NXOpen::Annotations::LeaderOrientation leaderOrientation /** New leader orientation */
            );
            /** Returns the appended text  @return  Appended text  <br> License requirements : None */
            public: NXOpen::Annotations::AppendedText * GetAppendedText
            (
            );
            /** Sets the appended text  <br> License requirements : None */
            public: void SetAppendedText
            (
                NXOpen::Annotations::AppendedText * appendedText /** New appended text */
            );
            /** Get inferred annotation plane.

                        Before calling this method, you must fill in the associativities for the
                        Dimension by calling @link Annotations::DimensionData::SetAssociativity Annotations::DimensionData::SetAssociativity@endlink  for
                        the correct number of objects based on the type of Dimension you wish to create.

                        Also, you must specify the particular type of Dimension to be created
                        as the inferred Dimension plane depends on the type of the Dimension as well
                        as the geometry being measured.
                       @return   <br> License requirements : None */
            public: NXOpen::Xform * GetInferredPlane
            (
                NXOpen::Annotations::PmiDefaultPlane jaDefaultPlane /** ja default plane */ ,
                NXOpen::Annotations::DimensionType dimType /** dim type */ 
            );
            /** Returns the linear tolerances  @return  Linear tolerance  <br> License requirements : None */
            public: NXOpen::Annotations::LinearTolerance * GetLinearTolerance
            (
            );
            /** Sets the linear tolerances  <br> License requirements : None */
            public: void SetLinearTolerance
            (
                NXOpen::Annotations::LinearTolerance * tolerance /** New linear tolerance */
            );
            /** Returns the angular tolerances  @return  Angular tolerance  <br> License requirements : None */
            public: NXOpen::Annotations::AngularTolerance * GetAngularTolerance
            (
            );
            /** Sets the angular tolerances  <br> License requirements : None */
            public: void SetAngularTolerance
            (
                NXOpen::Annotations::AngularTolerance * tolerance /** New angular tolerance */
            );
            /**Returns  the measurement direction  <br> License requirements : None */
            public: NXOpen::Direction * MeasurementDirection
            (
            );
            /**Sets  the measurement direction  <br> License requirements : None */
            public: void SetMeasurementDirection
            (
                NXOpen::Direction * vector /** Direction */
            );
            /**Returns  the measurement direction view  <br> License requirements : None */
            public: NXOpen::View * MeasurementDirectionView
            (
            );
            /**Sets  the measurement direction view  <br> License requirements : None */
            public: void SetMeasurementDirectionView
            (
                NXOpen::View * view /** Measurement direction view */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
