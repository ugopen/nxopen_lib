#ifndef NXOpen_STEP214IMPORTER_HXX_INCLUDED
#define NXOpen_STEP214IMPORTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Step214Importer.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectTypeSelector.hxx>
#include <NXOpen/Step214Importer.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Step214Importer;
    class Builder;
    class ObjectTypeSelector;
    class _Step214ImporterBuilder;
    class Step214ImporterImpl;
    /**
        Represents a @link Step214Importer Step214Importer@endlink  to be used when importing the STEP Data
        This class is created using @link DexManager DexManager@endlink .  <br> To create a new instance of this class, use @link DexManager::CreateStep214Importer DexManager::CreateStep214Importer@endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    FlattenAssembly </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ImportTo </td> <td> 
     
    WorkPart </td> </tr> 

    <tr><td> 
     
    ImportToTeamcenter </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    LayerDefault </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    Optimize </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    SewSurfaces </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    SimplifyGeometry </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    SmoothBSurfaces </td> <td> 
     
    1 </td> </tr> 

    </table>  
    */
    class NXOPENCPPEXPORT  Step214Importer : public Builder
    {
        /** Create the builder */
        public: enum ImportToOption
        {
            ImportToOptionWorkPart/** import iges file to work part */,
            ImportToOptionNewPart/** import iges file to new part */
        };

        private: Step214ImporterImpl * m_step214importer_impl;
        private: friend class  _Step214ImporterBuilder;
        protected: Step214Importer();
        public: ~Step214Importer();
        /** The set user credentials - this will set user name, password and group in NX Manager mode <br> License requirements : None */
        public: void SetUserCredential
        (
            const NXString & user /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & passwd /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & group /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Saves the save settings - this will save the settings to a file specified  <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the input file - name of a file which is being imported <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file - name of a file which is being imported <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the import to - this option will determine the destination for imported iges file. it can
                    either be new part or work part.  <br> License requirements : None */
        public: NXOpen::Step214Importer::ImportToOption ImportTo
        (
        );
        /**Sets  the import to - this option will determine the destination for imported iges file. it can
                    either be new part or work part.  <br> License requirements : None */
        public: void SetImportTo
        (
            NXOpen::Step214Importer::ImportToOption importTo /** importto */ 
        );
        /**Returns  the output file - if iges file is imported to new part then this name will be used to
                    write the output.  <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - if iges file is imported to new part then this name will be used to
                    write the output.  <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  ImportToTeamcenter- if set to true then assembly will be imported into Teamcenter  <br> License requirements : None */
        public: bool ImportToTeamcenter
        (
        );
        /**Sets  ImportToTeamcenter- if set to true then assembly will be imported into Teamcenter  <br> License requirements : None */
        public: void SetImportToTeamcenter
        (
            bool importToTeamcenter /** importtoteamcenter */ 
        );
        /**Returns  the settings file - definition file for default options  <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - definition file for default options  <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the objectTypes - this is subcomponent being used to set object types filters. This
                    will be used to filter objects based on the types  <br> License requirements : None */
        public: NXOpen::ObjectTypeSelector * ObjectTypes
        (
        );
        /**Returns  the sew surfaces - if set to true surfaces will be sewed automatically  <br> License requirements : None */
        public: bool SewSurfaces
        (
        );
        /**Sets  the sew surfaces - if set to true surfaces will be sewed automatically  <br> License requirements : None */
        public: void SetSewSurfaces
        (
            bool sewSurfaces /** sewsurfaces */ 
        );
        /**Returns  the simplify geometry - if set to true geometry will be simplified automatically  <br> License requirements : None */
        public: bool SimplifyGeometry
        (
        );
        /**Sets  the simplify geometry - if set to true geometry will be simplified automatically  <br> License requirements : None */
        public: void SetSimplifyGeometry
        (
            bool simplifyGeometry /** simplifygeometry */ 
        );
        /**Returns  the optimize - if set to true Optimizes geometry  <br> License requirements : None */
        public: bool Optimize
        (
        );
        /**Sets  the optimize - if set to true Optimizes geometry  <br> License requirements : None */
        public: void SetOptimize
        (
            bool optimize /** optimize */ 
        );
        /**Returns  the Smooth B-Surfaces - if set to true smooth B-Surfaces  <br> License requirements : None */
        public: bool SmoothBSurfaces
        (
        );
        /**Sets  the Smooth B-Surfaces - if set to true smooth B-Surfaces  <br> License requirements : None */
        public: void SetSmoothBSurfaces
        (
            bool smoothBSurfaces /** smoothbsurfaces */ 
        );
        /**Returns  the flatten assembly - if set to true then assembly structure will not be retained  <br> License requirements : None */
        public: bool FlattenAssembly
        (
        );
        /**Sets  the flatten assembly - if set to true then assembly structure will not be retained  <br> License requirements : None */
        public: void SetFlattenAssembly
        (
            bool flattenAssembly /** flattenassembly */ 
        );
        /**Returns  the layer default for level 0 <br> License requirements : None */
        public: int LayerDefault
        (
        );
        /**Sets  the layer default for level 0 <br> License requirements : None */
        public: void SetLayerDefault
        (
            int layerDefault /** layerdefault */ 
        );
        /**Returns  the file open flag - set this to false if doing file import <br> License requirements : None */
        public: bool FileOpenFlag
        (
        );
        /**Sets  the file open flag - set this to false if doing file import <br> License requirements : None */
        public: void SetFileOpenFlag
        (
            bool doingFileOpen /** doingfileopen */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
