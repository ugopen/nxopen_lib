#ifndef NXOpen_TOOLING_COOLINGEXTENDBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_COOLINGEXTENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_CoolingExtendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_CoolingExtendBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class CoolingExtendBuilder;
    }
    class Builder;
    class Expression;
    class SelectBody;
    class SelectBodyList;
    namespace Tooling
    {
        class _CoolingExtendBuilderBuilder;
        class CoolingExtendBuilderImpl;
        /**The builder class for Channel Extend which assists you
               to extend the channel. <br> To create a new instance of this class, use @link Tooling::CoolingExtendCollection::CreateCoolingExtendBuilder Tooling::CoolingExtendCollection::CreateCoolingExtendBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AdjustBoundaryChannel </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        BoundaryChannelExtension </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ExtensionValue.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        TipAngle </td> <td> 
         
        118 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  CoolingExtendBuilder : public Builder
        {
            private: CoolingExtendBuilderImpl * m_coolingextendbuilder_impl;
            private: friend class  _CoolingExtendBuilderBuilder;
            protected: CoolingExtendBuilder();
            public: ~CoolingExtendBuilder();
            /**Returns  the cooling channel to be extended.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * ExtendChannel
            (
            );
            /**Returns  the value which specifies whether to reverse the channel direction or not. <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the value which specifies whether to reverse the channel direction or not. <br> License requirements : None */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the body used to be the boundary of the face extension.  <br> License requirements : None */
            public: NXOpen::SelectBody * LimitBody
            (
            );
            /**Returns  the value of the face extension  <br> License requirements : None */
            public: NXOpen::Expression * ExtensionValue
            (
            );
            /**Returns  the value which specifies whether to extend boundary channel or not.  <br> License requirements : None */
            public: bool AdjustBoundaryChannel
            (
            );
            /**Sets  the value which specifies whether to extend boundary channel or not.  <br> License requirements : None */
            public: void SetAdjustBoundaryChannel
            (
                bool adjustBoundaryChannel /** adjustboundarychannel */ 
            );
            /**Returns  the value of the boundary channel extension.  <br> License requirements : None */
            public: double BoundaryChannelExtension
            (
            );
            /**Sets  the value of the boundary channel extension.  <br> License requirements : None */
            public: void SetBoundaryChannelExtension
            (
                double boundaryChannelExtension /** boundarychannelextension */ 
            );
            /**Returns  the value for the tip angle of the channel.  <br> License requirements : None */
            public: double TipAngle
            (
            );
            /**Sets  the value for the tip angle of the channel.  <br> License requirements : None */
            public: void SetTipAngle
            (
                double tipAngle /** tipangle */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
