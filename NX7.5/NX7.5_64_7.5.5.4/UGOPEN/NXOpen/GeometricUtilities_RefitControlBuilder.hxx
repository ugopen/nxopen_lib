#ifndef NXOpen_GEOMETRICUTILITIES_REFITCONTROLBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_REFITCONTROLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_RefitControlBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/GeometricUtilities_RefitControlBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class RefitControlBuilder;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _RefitControlBuilderBuilder;
        class RefitControlBuilderImpl;
        /** This class is used to specify the parameter set to refit faces */
        class NXOPENCPPEXPORT  RefitControlBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Refit method */
            public: enum RefitControlMethod
            {
                RefitControlMethodKeepParameterization/** Keep parameterization */,
                RefitControlMethodDegreePatches/** Degree and patches  */,
                RefitControlMethodDegreeTolerance/** Degree and tolerance  */,
                RefitControlMethodPatchTolerance/** Patch and tolerance  */
            };

            /** Refit direction */
            public: enum RefitControlDirection
            {
                RefitControlDirectionUV/** u and v */,
                RefitControlDirectionU/** u  */,
                RefitControlDirectionV/** v  */
            };

            private: RefitControlBuilderImpl * m_refitcontrolbuilder_impl;
            private: friend class  _RefitControlBuilderBuilder;
            protected: RefitControlBuilder();
            public: ~RefitControlBuilder();
            /**Returns  the refit method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::RefitControlBuilder::RefitControlMethod RefitMethod
            (
            );
            /**Sets  the refit method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRefitMethod
            (
                NXOpen::GeometricUtilities::RefitControlBuilder::RefitControlMethod refitMethod /** refitmethod */ 
            );
            /**Returns  the refit direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::RefitControlBuilder::RefitControlDirection RefitDirection
            (
            );
            /**Sets  the refit direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRefitDirection
            (
                NXOpen::GeometricUtilities::RefitControlBuilder::RefitControlDirection refitDirection /** refitdirection */ 
            );
            /**Returns  the tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the refit degrees and  segments or patches      <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * DegreesAndSegmentsOrPatches
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
