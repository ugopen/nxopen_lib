#ifndef NXOpen_DRAWINGS_VIEWSTYLEFPCALLOUTSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEFPCALLOUTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleFPCalloutsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewStyleFPCalloutsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleFPCalloutsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewStyleFPCalloutsBuilderBuilder;
        class ViewStyleFPCalloutsBuilderImpl;
        /** Represents the Callout section of the Flat Pattern tab on the View Style Dialog (Drawings.ViewStyleFPCalloutsBuilder)
            */
        class NXOPENCPPEXPORT  ViewStyleFPCalloutsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ViewStyleFPCalloutsBuilderImpl * m_viewstylefpcalloutsbuilder_impl;
            private: friend class  _ViewStyleFPCalloutsBuilderBuilder;
            protected: ViewStyleFPCalloutsBuilder();
            public: ~ViewStyleFPCalloutsBuilder();
            /**Returns  the type of Flat Pattern Callout  <br> License requirements : None */
            public: NXString Type
            (
            );
            /**Returns  the state toggle on the Callout section of the Flat Pattern tab of the View Style Dialog  <br> License requirements : None */
            public: bool State
            (
            );
            /**Sets  the state toggle on the Callout section of the Flat Pattern tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetState
            (
                bool stateToggle /** Sets a new state toggle value on the callout section of the flat pattern sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
