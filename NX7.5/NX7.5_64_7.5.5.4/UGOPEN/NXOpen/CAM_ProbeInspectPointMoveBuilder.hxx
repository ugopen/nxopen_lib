#ifndef NXOpen_CAM_PROBEINSPECTPOINTMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_PROBEINSPECTPOINTMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ProbeInspectPointMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ProbeControlParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeInspectPointMoveBuilder.hxx>
#include <NXOpen/CAM_ProbeProtectedParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeStockParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeToleranceParametersBuilder.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ProbeInspectPointMoveBuilder;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    namespace CAM
    {
        class ProbeControlParametersBuilder;
    }
    namespace CAM
    {
        class ProbeProtectedParametersBuilder;
    }
    namespace CAM
    {
        class ProbeStockParametersBuilder;
    }
    namespace CAM
    {
        class ProbeToleranceParametersBuilder;
    }
    class Point;
    namespace CAM
    {
        class _ProbeInspectPointMoveBuilderBuilder;
        class ProbeInspectPointMoveBuilderImpl;
        /** Represents the Probe Inspect Point Move Builder  <br> To create a new instance of this class, use @link CAM::MoveCollection::CreateProbeInspectPointMoveBuilder CAM::MoveCollection::CreateProbeInspectPointMoveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ProbeInspectPointMoveBuilder : public CAM::MoveBuilder
        {
            /** the probing direction type */
            public: enum Direction
            {
                DirectionInferred/** Inferred using surface normal */,
                DirectionXm/** XM */,
                DirectionNegxm/** Negative XM */,
                DirectionYm/** YM */,
                DirectionNegym/** Negative YM */,
                DirectionZm/** ZM */,
                DirectionNegzm/** Negative ZM */
            };

            private: ProbeInspectPointMoveBuilderImpl * m_probeinspectpointmovebuilder_impl;
            private: friend class  _ProbeInspectPointMoveBuilderBuilder;
            protected: ProbeInspectPointMoveBuilder();
            public: ~ProbeInspectPointMoveBuilder();
            /**Returns  the point to probe  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point to probe  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the probing direction  <br> License requirements : None */
            public: NXOpen::CAM::ProbeInspectPointMoveBuilder::Direction DirectionType
            (
            );
            /**Sets  the probing direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDirectionType
            (
                NXOpen::CAM::ProbeInspectPointMoveBuilder::Direction dirType /** dirtype */ 
            );
            /**Returns  the probe protected parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeProtectedParametersBuilder * ProbeProtectedParameters
            (
            );
            /**Returns  the probe control  parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeControlParametersBuilder * ProbeControlParameters
            (
            );
            /**Returns  the probe stock  parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeStockParametersBuilder * ProbeStockParameters
            (
            );
            /**Returns  the probe tolerance parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeToleranceParametersBuilder * ProbeToleranceParameters
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
