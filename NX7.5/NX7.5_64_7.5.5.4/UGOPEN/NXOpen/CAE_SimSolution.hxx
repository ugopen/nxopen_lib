#ifndef NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
#define NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSolution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SimGroupContainer.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class CompanionResultCollection;
    }
    namespace CAE
    {
        class CorrelAlignmentBuilder;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimGroupContainer;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    namespace CAE
    {
        class _SimSolutionBuilder;
        class SimSolutionImpl;
        /**  @brief  Represents a solution in the .sim files  

           <br> To create a new instance of this class, use @link CAE::SimSimulation::CreateSolution CAE::SimSimulation::CreateSolution@endlink  <br> */
        class NXOPENCPPEXPORT  SimSolution : public CAE::SimGroupContainer
        {
            /** Solve Options */
            public: enum SolveOption
            {
                SolveOptionSolve/** write solver input file and launch solve */,
                SolveOptionWriteSolverInputFile/** write solver input file only*/,
                SolveOptionSolveInputFile/** launch solve with existing solver input file*/,
                SolveOptionWriteEditAndSolveInputFile/** write solver input file, allow edit and then launch solve*/,
                SolveOptionEditSolverInputFile/** edit existing solver input file */
            };

            /**  Model Setup Check Options */
            public: enum SetupCheckOption
            {
                SetupCheckOptionDoNotCheck/** do perform any set up checks */,
                SetupCheckOptionCheckAndStopAtFirstError/** perform set up checks but stop at first error */,
                SetupCheckOptionCompleteCheckAndOutputErrors/** perform all set up checks and report all errors */
            };

            private: SimSolutionImpl * m_simsolution_impl;
            private: friend class  _SimSolutionBuilder;
            protected: SimSolution();
            public: ~SimSolution();
            /** Rename Solution and optionally rename associated results files  <br> License requirements : None */
            public: void Rename
            (
                const NXString & name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool renameResults /** true if you what associated results files to be renamed as well  */
            );
            /**Returns  the property table associated with the solution object  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
            /**Returns  the property table associated with the solution's solver options  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * SolverOptionsPropertyTable
            (
            );
            /** Adds a step to the solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddStep
            (
                NXOpen::CAE::SimSolutionStep * step /** solution step to be added */
            );
            /** Creates a step and add to the solution
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the count of allowable step types
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int AllowedStepTypeCount
            (
            );
            /** Removes a step from the solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteStep
            (
                NXOpen::CAE::SimSolutionStep * step /** step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  to be added */
            );
            /**Returns  the active step   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * ActiveStep
            (
            );
            /**Sets  the active step   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveStep
            (
                NXOpen::CAE::SimSolutionStep * activeStep /** active step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  */
            );
            /**Returns  the number of steps
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int StepCount
            (
            );
            /** Returns the step at the index passed
                      @return  step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink  at the index  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * GetStepByIndex
            (
                int stepIndex /** index of the step */
            );
            /**Returns  the solver type
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolverType
            (
            );
            /**Returns  the analysis type
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString AnalysisType
            (
            );
            /**Returns  the solution type
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolutionType
            (
            );
            /** Add the bc to the solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be added */
            );
            /** Remove the bc from the solution
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be removed */
            );
            /** Runs  the Assisted Conflict Check Mechanism for all constraints  @link CAE::SimConstraint CAE::SimConstraint@endlink  
                      in an active solution @link CAE::SimSolution CAE::SimSolution@endlink  and/or in an active step @link CAE::SimSolutionStep CAE::SimSolutionStep@endlink , 
                      generating Resolve Objects @link CAE::SimResolveObject CAE::SimResolveObject@endlink  if there is an interaction between the constraints.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ResolveConstraintConflicts
            (
            );
            /** Solves the solution 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Solve
            (
                NXOpen::CAE::SimSolution::SolveOption solveOption /** solve option */,
                NXOpen::CAE::SimSolution::SetupCheckOption setupCheckOption /** setup check option */
            );
            /** Creates the builder object for test and imported solution alignment dialog  @return    <br> License requirements : nx_correl_base ("FE Correlation") */
            public: NXOpen::CAE::CorrelAlignmentBuilder * CreateAlignmentBuilder
            (
            );


            /** Returns the CAE Companion Results collection belonging to this Solution */
            public: NXOpen::CAE::CompanionResultCollection *CompanionResults();
        };
    }
}
#undef EXPORTLIBRARY
#endif
