#ifndef NXOpen_FORMBOARD_UPDATEFORMBOARDBUILDER_HXX_INCLUDED
#define NXOpen_FORMBOARD_UPDATEFORMBOARDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_UpdateFormboardBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Formboard_UpdateDiscrepancy.hxx>
#include <NXOpen/Formboard_UpdateFormboardBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Formboard
    {
        class UpdateFormboardBuilder;
    }
    class Builder;
    namespace Formboard
    {
        class LayoutLengthOptions;
    }
    namespace Formboard
    {
        class UpdateDiscrepancy;
    }
    class Part;
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Formboard
    {
        class _UpdateFormboardBuilderBuilder;
        class UpdateFormboardBuilderImpl;
        /** Class that performs the "update" of Formboard geometry.  
              <br> To create a new instance of this class, use @link Formboard::FormboardManager::CreateUpdateFormboardBuilder Formboard::FormboardManager::CreateUpdateFormboardBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  UpdateFormboardBuilder : public Builder
        {
            private: UpdateFormboardBuilderImpl * m_updateformboardbuilder_impl;
            private: friend class  _UpdateFormboardBuilderBuilder;
            protected: UpdateFormboardBuilder();
            public: ~UpdateFormboardBuilder();
            /**Returns  the length options for the update operation.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::LayoutLengthOptions * LengthOptions
            (
            );
            /** Gets the 3D harness part file to compare the formboard against.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Part * GetHarnessPart
            (
            );
            /** Sets the 3D harness part file to compare the formboard against. This clears
                      any discrepancies that have been discovered against the previous harness
                      part.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetHarnessPart
            (
                NXOpen::Part * harnessPart /** harnesspart */ 
            );
            /** Sets the harnesses within the harness part that the formboard must be 
                      compared with.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SetHarnesses
            (
                const std::vector<NXOpen::Routing::Electrical::HarnessDevice *> & harnesses /** Harnesses to compare against. */
            );
            /** Compute the mapping between the data in the formboard and the data in the
                       3D harness.  This method can take a very long time to execute.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void FindMapping
            (
            );
            /** Once the mapping has been determined, this method can find any discrepancies
                       between the 3D harness and the formboard.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void DetermineDiscrepancies
            (
            );
            /** Returns the number of discrepancies discovered by the 
                      @link Formboard::UpdateFormboardBuilder::DetermineDiscrepancies Formboard::UpdateFormboardBuilder::DetermineDiscrepancies@endlink .  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: int GetNumberOfDiscrepancies
            (
            );
            /** Returns the discrepancy at the given index.  The index must be
                        0 to @link Formboard::UpdateFormboardBuilder::GetNumberOfDiscrepancies Formboard::UpdateFormboardBuilder::GetNumberOfDiscrepancies@endlink .
                         @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::UpdateDiscrepancy * GetDiscrepancy
            (
                int index /** index */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
