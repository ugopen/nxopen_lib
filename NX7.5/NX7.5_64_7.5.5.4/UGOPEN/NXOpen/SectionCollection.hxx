#ifndef NXOpen_SECTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_SECTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SectionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SectionCollection;
    class BasePart;
    class Section;
    class NXObject;
    class SectionCollectionImpl;
    /** This class contains the factory methods for creating a section.  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT  SectionCollection : public TaggedObjectCollection
    {
        /** Defines how section are created in @link SectionCollection::CreateSectionsUsingCurves SectionCollection::CreateSectionsUsingCurves@endlink 
             */
        public: enum LoopOption
        {
            LoopOptionSeparate/** One section is created for each loop */,
            LoopOptionSeparateOuter/** One section per outer loop and enclosed inner loops */
        };

        private: SectionCollectionImpl * m_sectioncollection_impl;
        private: NXOpen::BasePart* m_owner;
        /** Constructor */
        public: explicit SectionCollection(NXOpen::BasePart *owner);
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~SectionCollection();
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Section * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            explicit iterator(NXOpen::SectionCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::SectionCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a section. 
             <br> 
            You should add selection intent rules to the section.
             <br> 
             <br> 
            See the documentation for @link Section::AddToSection Section::AddToSection@endlink  for more details. 
             <br> 
             <br> 
            You can remove selection intent rules or one section element from the section.
             <br> 
             <br> 
            See the documentation for @link Section::RemoveRules Section::RemoveRules@endlink  and
            @link Section::RemoveSingleSectionElement Section::RemoveSingleSectionElement@endlink  for more details.
             <br> 
             @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Section * CreateSection
        (
            double chainingTolerance /** Chaining tolerance */,
            double distanceTolerance /** Distance tolerance */,
            double angleTolerance /** Angle tolerance */
        );
        /** Creates a section using default values for chaining, distance, and angle tolerance.
             <br> 
            You should add selection intent rules to the section.
             <br> 
             <br> 
            See the documentation for @link Section::AddToSection Section::AddToSection@endlink  for more details. 
             <br> 
             <br> 
            You can remove selection intent rules or one section element from the section.
             <br> 
             <br> 
            See the documentation for @link Section::RemoveRules Section::RemoveRules@endlink  and
            @link Section::RemoveSingleSectionElement Section::RemoveSingleSectionElement@endlink  for more details.
             <br> 
             @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Section * CreateSection
        (
        );
        /** Creates sections using curves such that each section can be extruded to produce one body.
             <br> 
            Curves are first sorted into loops and then the loops are classified as exterior loops and interior loops. A section is created for each exterior loop of curves and includes closed loops that are enclosed in the exterior loop depending on the loop option.
             <br> 
             <br> 
            The inputs must be all curves. The curves must lie on the same plane.
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void CreateSectionsUsingCurves
        (
            const std::vector<NXOpen::NXObject *> & curves /** Curves */,
            NXOpen::SectionCollection::LoopOption loopOption /** Loop option */,
            double chainingTolerance /** Chaining tolerance */,
            double distanceTolerance /** Distance tolerance */,
            double angleTolerance /** Angle tolerance */,
            std::vector<NXOpen::Section *> & section /** section */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
