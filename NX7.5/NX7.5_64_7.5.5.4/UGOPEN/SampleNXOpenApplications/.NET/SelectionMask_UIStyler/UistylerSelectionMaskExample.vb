'===============================================================================
'
'                   Copyright (c) 2006 UGS PLM Solutions
'                    Unpublished - All rights reserved
'===============================================================================
'File description: Sample NX/Open Application for UIStyler
'===============================================================================
'
'===============================================================================

'===============================================================================
'Following example demonstrates the Selection Masking capability within UIStyler
'===============================================================================

'===============================================================================
'   WARNING!!  This file is overwritten by the UIStyler each time the Styler
'   file is saved.
'
'       Filename:  UistylerSelectionMaskExample.vb
'
'        This file was generated by the NX User Interface Styler
'        Created by: kudchi
'        Version: NX 5
'              Date: 12-14-2006
'              Time: 14:10
'
'   This template file is overwritten each time the UIStyler dialog is
'   saved.  Any modifications to this file will be lost.
'==============================================================================

'==============================================================================
'  Purpose:  This TEMPLATE file contains VB.NET source to guide you in the
'  construction of your NX Open application dialog. The generation of your
'  dialog file (.dlg extension) is the first step towards dialog construction
'  within NX.  You must now create a NX Open application that
'  utilizes this file (.dlg).

'  The information in this file provides you with the following:
'
'  1.  Help on how to load and display your UIStyler dialog in NX
'      using APIs provided in NXOpen.UIStyler namespace
'  2.  The empty callback methods (stubs) associated with your dialog items
'      have also been placed in this file. These empty methods have been
'      created simply to start you along with your coding requirements.
'      The method name, argument list and possible return values have already
'      been provided for you.
'==============================================================================

'------------------------------------------------------------------------------
' These imports are needed for the following template code
'------------------------------------------------------------------------------
Option Strict Off
Imports System
Imports System.Collections
Imports NXOpen
Imports NXOpen.UIStyler

'------------------------------------------------------------------------------
' Represents UI Styler application class
'------------------------------------------------------------------------------
Public Class UistylerSelectionMaskExample
    ' class members
    Private Shared theSession As Session
    Private Shared theUI As UI
    Public Shared theUistylerSelectionMaskExample As UistylerSelectionMaskExample
    Private theDialog As Dialog
    Private SELDialog As NXOpen.UIStyler.DialogItem
    Private SELSELECTBYTYPE As NXOpen.UIStyler.GroupBox
    Private SELSELECTIONOPTION As NXOpen.UIStyler.CollapsibleGroup
    Private SELSELECTALL As NXOpen.UIStyler.Toggle
    Private SELUNSELECTALL As NXOpen.UIStyler.Toggle
    Private SELLINE As NXOpen.UIStyler.Toggle
    Private SELARC As NXOpen.UIStyler.Toggle
    Private SELCIRCLE As NXOpen.UIStyler.Toggle
    Private SELSPLINE As NXOpen.UIStyler.Toggle
    Private SELELLIPSE As NXOpen.UIStyler.Toggle
    Private SELPARABOLA As NXOpen.UIStyler.Toggle
    Private SELHYPERBOLA As NXOpen.UIStyler.Toggle
    Private SELALLCURVES As NXOpen.UIStyler.Toggle
    Private SELSHEETBODY As NXOpen.UIStyler.Toggle
    Private SELSOLIDBODY As NXOpen.UIStyler.Toggle
    Private SELDATUMAXIS As NXOpen.UIStyler.Toggle
    Private SELPOINT As NXOpen.UIStyler.Toggle
    Private SELCSYS As NXOpen.UIStyler.Toggle
    Private SELNOTE As NXOpen.UIStyler.Toggle
    Private SELDATUMPLANE As NXOpen.UIStyler.Toggle
    Private SELALLOBJECTS As NXOpen.UIStyler.Toggle
    Private SELSETFILTER As NXOpen.UIStyler.PushButton
    Private SELMOVETOLAYER As NXOpen.UIStyler.IntegerItem
    Private SELLAYERNAME As NXOpen.UIStyler.WideString
    Private SELSEPERATER As NXOpen.UIStyler.Separator
    Private SELLAYERSETTINGINFORMATION As NXOpen.UIStyler.PushButton
    Public Shared isDisposeCalled As Boolean
    Dim selectionMask_array() As NXOpen.Selection.MaskTriple
    Dim selectH As SelectionHandle
    Dim htEdges As New Hashtable()
    Dim workPart As Part
    Dim displayPart As Part
    Dim ufsession As UF.UFSession
    Dim layercategoryarray() As Layer.Category
    Dim layercollection As Layer.CategoryCollection


#Region " UI Styler Dialog Designer generator code "
    '------------------------------------------------------------------------------
    ' Constructor for NX Styler class
    '------------------------------------------------------------------------------
    Public Sub New()
        Try
            theSession = Session.GetSession()
            theUI = UI.GetUI()
            theDialog = theUI.Styler.CreateStylerDialog("UistylerSelectionMaskExample.dlg")
            InitializeUIStylerDialog()
            isDisposeCalled = False
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    ' This method is required for UI styler dialog creation
    '------------------------------------------------------------------------------
    Private Sub InitializeUIStylerDialog()
        '------------------------------------------------------------------------------
        ' The following code snippets initializes all the styler items and associate
        ' respective callbacks. Attributes of the styler item can be accessed and
        ' modified only after calling Show() or RegisterWithUiMenu().
        '------------------------------------------------------------------------------
        Try
            SELDialog = theDialog.GetStylerItem("UF_STYLER_DIALOG_INDEX", NXOpen.UIStyler.Dialog.ItemType.DialogItem)
            SELDialog.AddConstructHandler(AddressOf ConstructorCallback, False)
            SELDialog.AddDestructHandler(AddressOf DestructorCallback, False)
            SELDialog.AddOkayHandler(AddressOf OkCallback, False)
            SELDialog.AddApplyHandler(AddressOf ApplyCallback, False)
            SELSELECTBYTYPE = theDialog.GetStylerItem("SELECTBYTYPE", NXOpen.UIStyler.Dialog.ItemType.GroupBox)
            SELSELECTIONOPTION = theDialog.GetStylerItem("SELECTIONOPTION", NXOpen.UIStyler.Dialog.ItemType.CollapsibleGroup)
            SELSELECTALL = theDialog.GetStylerItem("SELECTALL", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELSELECTALL.AddValueChangedHandler(AddressOf SelectAllCallback, False)
            SELUNSELECTALL = theDialog.GetStylerItem("UNSELECTALL", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELUNSELECTALL.AddValueChangedHandler(AddressOf UnSelectAllCallback, False)
            SELLINE = theDialog.GetStylerItem("LINE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELLINE.AddValueChangedHandler(AddressOf SelLineCallback, False)
            SELARC = theDialog.GetStylerItem("ARC", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELARC.AddValueChangedHandler(AddressOf SelArcCallback, False)
            SELCIRCLE = theDialog.GetStylerItem("CIRCLE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELCIRCLE.AddValueChangedHandler(AddressOf SelCircleCallback, False)
            SELSPLINE = theDialog.GetStylerItem("SPLINE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELSPLINE.AddValueChangedHandler(AddressOf SelSplineCallback, False)
            SELELLIPSE = theDialog.GetStylerItem("ELLIPSE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELELLIPSE.AddValueChangedHandler(AddressOf SelEllipseCallback, False)
            SELPARABOLA = theDialog.GetStylerItem("PARABOLA", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELPARABOLA.AddValueChangedHandler(AddressOf SelParabolaCallback, False)
            SELHYPERBOLA = theDialog.GetStylerItem("HYPERBOLA", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELHYPERBOLA.AddValueChangedHandler(AddressOf SelHyperbolaCallback, False)
            SELALLCURVES = theDialog.GetStylerItem("ALLCURVES", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELALLCURVES.AddValueChangedHandler(AddressOf AllCurvesCallback, False)
            SELSHEETBODY = theDialog.GetStylerItem("SHEETBODY", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELSHEETBODY.AddValueChangedHandler(AddressOf SelSheetbodyCallback, False)
            SELSOLIDBODY = theDialog.GetStylerItem("SOLIDBODY", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELSOLIDBODY.AddValueChangedHandler(AddressOf SelSolidbodyCallback, False)
            SELDATUMAXIS = theDialog.GetStylerItem("DATUMAXIS", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELDATUMAXIS.AddValueChangedHandler(AddressOf SelDatumAxisCallback, False)
            SELPOINT = theDialog.GetStylerItem("POINT", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELPOINT.AddValueChangedHandler(AddressOf SelPointCallback, False)
            SELCSYS = theDialog.GetStylerItem("CSYS", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELCSYS.AddValueChangedHandler(AddressOf SelCSYSCallback, False)
            SELNOTE = theDialog.GetStylerItem("NOTE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELNOTE.AddValueChangedHandler(AddressOf SelNoteCallback, False)
            SELDATUMPLANE = theDialog.GetStylerItem("DATUMPLANE", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELDATUMPLANE.AddValueChangedHandler(AddressOf SelDatumPlaneCallback, False)
            SELALLOBJECTS = theDialog.GetStylerItem("ALLOBJECTS", NXOpen.UIStyler.Dialog.ItemType.Toggle)
            SELALLOBJECTS.AddValueChangedHandler(AddressOf AllObjectsCallback, False)
            SELSETFILTER = theDialog.GetStylerItem("SETFILTER", NXOpen.UIStyler.Dialog.ItemType.PushButton)
            SELSETFILTER.AddActivateHandler(AddressOf SetFilterCallback, True)
            SELMOVETOLAYER = theDialog.GetStylerItem("MOVETOLAYER", NXOpen.UIStyler.Dialog.ItemType.IntegerItem)
            SELMOVETOLAYER.AddActivateHandler(AddressOf UistylerSelectionMaskExamplecallback, False)
            SELLAYERNAME = theDialog.GetStylerItem("LAYERNAME", NXOpen.UIStyler.Dialog.ItemType.WideString)
            SELLAYERNAME.AddActivateHandler(AddressOf LayerNameCallback, False)
            SELSEPERATER = theDialog.GetStylerItem("SEPERATER", NXOpen.UIStyler.Dialog.ItemType.Separator)
            SELLAYERSETTINGINFORMATION = theDialog.GetStylerItem("LAYERSETTINGINFORMATION", NXOpen.UIStyler.Dialog.ItemType.PushButton)
            SELLAYERSETTINGINFORMATION.AddActivateHandler(AddressOf LayerSettingInformationCallback, False)
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Sub

#End Region

    ' -------------------------- MENUBAR HOOKUP HELP Example ----------------------
    ' To launch this dialog from a NX menubar, you must follow the steps below:


    '      1)Add the following lines to your MenuScript file in order to
    '        associate a menu bar button with your dialog.  In this
    '        example, a cascade menu will be created and will be
    '        located just before the Help button on the main menubar.
    '        The button, MOVETOLAYER_BTN is set up to launch your dialog and
    '        will be positioned as the first button on your pulldown menu.
    '        If you wish to add the button to an existing cascade, simply
    '        add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
    '        to your menuscript file.

    '        The MenuScript file requires an extension of ".men".
    '        Make sure that you add the extension to the file and place
    '        the file in your startup directory:
    '             $UGII_USER_DIR/startup or
    '             $UGII_SITE_DIR/startup or
    '             $UGII_VENDOR_DIR/startup directory

    '        Move the contents between the dashed lines to your Menuscript file.
    '        !-----------------------------------------------------------------------------
    '        VERSION 120
    ' 
    '        EDIT UG_GATEWAY_MAIN_MENUBAR
    ' 
    '        BEFORE UG_HELP
    '        CASCADE_BUTTON UISTYLER_DLG_CASCADE_BTN
    '        LABEL Dialog Launcher
    '        END_OF_BEFORE
    ' 
    '        MENU UISTYLER_DLG_CASCADE_BTN
    '        BUTTON MOVETOLAYER_BTN
    '        LABEL Display UistylerSelectionMaskExample dialog
    '        ACTIONS UistylerSelectionMaskExample.dlg
    '        END_OF_MENU
    '        !-----------------------------------------------------------------------------

    '      2)Issue a call to the function, RegisterWithUiMenu() from the Startup()
    '        as shown below.
    '        To use this call, remove the conditional definitions:
    '             #If MENUBAR_COMMENTED_OUT Then
    '             #End If

    '      3)Place your compiled and linked DLL in 
    '             $UGII_USER_DIR/startup or
    '             $UGII_SITE_DIR/startup or
    '             $UGII_VENDOR_DIR/startup directory.

    '       NOTE:  The shared libraries must contain the proper extension .dll
    '       to make ensure that it is recognized by the MenuScript.  If it does not
    '       have the proper extension, it will NOT be recognized by MenuScript.

    '       The action name you have provided in your MenuScript must correspond to
    '       to the dialog name provided in the action structure.  This MUST match inorder
    '       to bind your dlg file to your MenuScript button.

    '      4)Copy your UIStyler dialog file to the proper directory.
    '        All dialog files (.dlg) must be located in 
    '             $UGII_USER_DIR/application or
    '             $UGII_SITE_DIR/application or
    '             $UGII_VENDOR_DIR/application directory
    '------------------------------------------------------------------------------
#If MENUBAR_COMMENTED_OUT Then

    Public Shared Function Startup() As Integer
        Try
            theUistylerSelectionMaskExample = New UistylerSelectionMaskExample()
            ' The following method registers the dialog with a menu item
            theUistylerSelectionMaskExample.RegisterWithUiMenu()

            Startup = 0

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function ' Startup ends

    '------------------------------------------------------------------------------
    ' The flag "isTopDialog", informs menubar about the dialog location.
    ' This flag MUST match the resource set in the dialog.
    ' DO NOT ASSUME that changing this field will update the location of the dialog.
    ' Please use the UIStyler to indicate the position of the dialog.
    '------------------------------------------------------------------------------
    Public Sub RegisterWithUiMenu()
        Try
            Dim isTopDialog As boolean = False
            theDialog.RegisterWithUiMenu(isTopDialog)
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Sub
#End If ' MENUBAR_COMMENTED_OUT


    ' --------------- DIALOG CREATION FROM A CALLBACK HELP Example -----------------
    ' If you wish to have this dialog displayed from the callback of another
    ' UIStyler dialog, you should:


    '      1)Make sure that the callback of your UIStyler dialog is
    '        designated as a dialog building callback.
    '      2)Remove the conditional definitions:
    '             #If DISPLAY_FROM_CALLBACK Then
    '             #End If

    '      3)Your callback should issue a call to this method.


    ' All dialog files must be located in
    '             $UGII_USER_DIR/application or
    '             $UGII_SITE_DIR/application or
    '             $UGII_VENDOR_DIR/application directory
    '------------------------------------------------------------------------------
#If DISPLAY_FROM_CALLBACK Then

    Public Shared Sub <enter the name of your function>(ByRef response As NXOpen.UIStyler.DialogResponse)
        Try
            theUistylerSelectionMaskExample = New UistylerSelectionMaskExample()
            ' The following method shows the dialog immediately
            response = theUistylerSelectionMaskExample.Show()
            UistylerSelectionMaskExample.theUistylerSelectionMaskExample.Dispose()
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Sub

#End If ' DISPLAY_FROM_CALLBACK


    '---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
    ' An example is shown below to create this dialog from a user exit.
    ' All dialog files must be located in
    '             $UGII_USER_DIR/application or
    '             $UGII_SITE_DIR/application or
    '             $UGII_VENDOR_DIR/application directory


    '      1)Remove the conditional definitions:
    '             #If DISPLAY_FROM_USER_EXIT Then
    '             #End If

    '      2)Add a user exit to the method name below, for example, Main().
    '      3)Consider how your shared library will be unloaded.  Take a look
    '        at the method GetUnloadOption().
    '------------------------------------------------------------------------------
    '#If DISPLAY_FROM_USER_EXIT Then

    Public Shared Sub Main()
        Try
            Dim response As NXOpen.UIStyler.DialogResponse
            ' For Journal play back uncommet calls for LockAccess and UnlockAccess
            ' UI.GetUI().LockAccess()
            theUistylerSelectionMaskExample = New UistylerSelectionMaskExample()
            ' The following method shows the dialog immediately
            response = theUistylerSelectionMaskExample.Show()
            theUistylerSelectionMaskExample.Dispose()
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        Finally
            ' theUI.UnlockAccess()
        End Try
    End Sub ' User exit ends

    '------------------------------------------------------------------------------
    ' This method specifies how a shared image is unloaded from memory
    ' within NX. This method gives you the capability to unload an
    ' internal NX Open application or user  exit from NX. Specify any
    ' one of the three constants as a return value to determine the type
    ' of unload to perform:


    '    Immediately : unload the library as soon as the automation program has completed
    '    Explicitly  : unload the library from the "Unload Shared Image" dialog
    '    AtTermination : unload the library when the NX session terminates


    ' NOTE:  A program which associates NX Open applications with the menubar
    ' MUST NOT use this option since it will UNLOAD your NX Open application image
    ' from the menubar.
    '------------------------------------------------------------------------------
    Public Shared Function GetUnloadOption(ByVal arg As String) As Integer
        ' Return code to indicate this library can be unloaded
        ' by the user.
        'Return CType(Session.LibraryUnloadOption.Explicitly, Integer)
        Return CType(Session.LibraryUnloadOption.Immediately, Integer)
        ' Return CType(Session.LibraryUnloadOption.AtTermination, Integer)
    End Function

    '------------------------------------------------------------------------------
    ' Following method cleanup any housekeeping chores that may be needed.
    ' This method is automatically called by NX.
    '------------------------------------------------------------------------------
    Public Shared Function UnloadLibrary(ByVal arg As String) As Integer
        Try
            theUistylerSelectionMaskExample.Dispose()
            Return 0
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function

    '#End If ' DISPLAY_FROM_USER_EXIT

    '------------------------------------------------------------------------------
    ' This method shows the dialog on the screen
    '------------------------------------------------------------------------------
    Public Function Show() As NXOpen.UIStyler.DialogResponse
        Try
            Show = theDialog.Show()
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function


    '------------------------------------------------------------------------------
    ' Following method disposes all the class members
    '------------------------------------------------------------------------------
    Sub Dispose()
        Try
            If (isDisposeCalled = False) Then
                SELDialog.Dispose()
                SELSELECTBYTYPE.Dispose()
                SELSELECTIONOPTION.Dispose()
                SELSELECTALL.Dispose()
                SELUNSELECTALL.Dispose()
                SELLINE.Dispose()
                SELARC.Dispose()
                SELCIRCLE.Dispose()
                SELSPLINE.Dispose()
                SELELLIPSE.Dispose()
                SELPARABOLA.Dispose()
                SELHYPERBOLA.Dispose()
                SELALLCURVES.Dispose()
                SELSHEETBODY.Dispose()
                SELSOLIDBODY.Dispose()
                SELDATUMAXIS.Dispose()
                SELPOINT.Dispose()
                SELCSYS.Dispose()
                SELNOTE.Dispose()
                SELDATUMPLANE.Dispose()
                SELALLOBJECTS.Dispose()
                SELSETFILTER.Dispose()
                SELMOVETOLAYER.Dispose()
                SELLAYERNAME.Dispose()
                SELSEPERATER.Dispose()
                SELLAYERSETTINGINFORMATION.Dispose()
                theDialog.Dispose()
            End If
            isDisposeCalled = True
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Sub

    '------------------------------------------------------------------------------
    '------------------------- UIStyler Callback Functions ------------------------
    '------------------------------------------------------------------------------


    '------------------------------------------------------------------------------
    ' Callback Name: ConstructorCallback
    ' Following callback is associated with the "SELDialog" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function ConstructorCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            workPart = theSession.Parts.Work
            displayPart = theSession.Parts.Display
            ufsession = UF.UFSession.GetUFSession()
            SELMOVETOLAYER.ItemValue = 1
            UistylerSelectionMaskExamplecallback(eventObject)
            UistylerSelectionMaskExamplecallback(eventObject)
            SELSETFILTER.Sensitivity = False
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        ConstructorCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        ' for this callback type. You must continue dialog construction.
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: DestructorCallback
    ' Following callback is associated with the "SELDialog" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function DestructorCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try


            ' ---- Enter your callback code here -----


        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        ' A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        ' for this callback type. You must continue dialog destruction.
        DestructorCallback = NXOpen.UIStyler.DialogState.ContinueDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: OkCallback
    ' Following callback is associated with the "SELDialog" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function OkCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            'We could check for the count first
            If htEdges.Count = 0 Then

                OkCallback = NXOpen.UIStyler.DialogState.ExitDialog

            Else

                Dim en As IDictionaryEnumerator = htEdges.GetEnumerator
                Dim objectarray(htEdges.Count - 1) As DisplayableObject
                Dim EdgeIndex As Integer
                EdgeIndex = 0
                OkCallback = NXOpen.UIStyler.DialogState.ExitDialog

                While en.MoveNext
                    Dim edgeVar As DisplayableObject = CType(en.Value, DisplayableObject)
                    objectarray(EdgeIndex) = edgeVar
                    EdgeIndex = EdgeIndex + 1
                End While

                workPart.Layers.MoveDisplayableObjects(SELMOVETOLAYER.ItemValue, objectarray)
                workPart.Layers.SetState(SELMOVETOLAYER.ItemValue, Layer.State.Hidden)
                htEdges = Nothing

            End If

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
            ' Here ContinueDialog is called so that the dialog does not close down after
            ' error is encountered in OkCallback. Hence returning ContinueDialog instead of ExitDialog.
            OkCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        End Try
        ' Callback acknowledged, terminate dialog
        ' It is STRONGLY recommanded that you exit your
        ' callback with NXOpen.UIStyler.DialogState.ExitDialog in a ok callback.        
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: ApplyCallback
    ' Following callback is associated with the "SELDialog" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function ApplyCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            If htEdges.Count = 0 Then

                ApplyCallback = NXOpen.UIStyler.DialogState.ContinueDialog

            Else

                Dim markId1 As Session.UndoMarkId
                markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Move Layer")
                Dim en As IDictionaryEnumerator = htEdges.GetEnumerator
                Dim objectarray(htEdges.Count - 1) As DisplayableObject
                Dim EdgeIndex As Integer
                EdgeIndex = 0

                While en.MoveNext
                    Dim edgeVar As DisplayableObject = CType(en.Value, DisplayableObject)
                    objectarray(EdgeIndex) = edgeVar
                    EdgeIndex = EdgeIndex + 1
                End While

                workPart.Layers.MoveDisplayableObjects(SELMOVETOLAYER.ItemValue, objectarray)
                workPart.Layers.SetState(SELMOVETOLAYER.ItemValue, Layer.State.Hidden)
                htEdges.Clear()
                SetFilterCallback(eventObject)

            End If

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        ' A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        ' for this callback type. You must respond to your apply button.
        ApplyCallback = NXOpen.UIStyler.DialogState.ContinueDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelectAllCallback
    ' Following callback is associated with the "SELSELECTALL" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelectAllCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            If SELSELECTALL.ItemValue = True Then
                SELUNSELECTALL.ItemValue = False
                SELSELECTALL.ItemValue = True
                SELLINE.ItemValue = True
                SELARC.ItemValue = True
                SELCIRCLE.ItemValue = True
                SELSPLINE.ItemValue = True
                SELELLIPSE.ItemValue = True
                SELPARABOLA.ItemValue = True
                SELHYPERBOLA.ItemValue = True
                SELALLCURVES.ItemValue = True
                SELSHEETBODY.ItemValue = True
                SELSOLIDBODY.ItemValue = True
                SELDATUMAXIS.ItemValue = True
                SELPOINT.ItemValue = True
                SELCSYS.ItemValue = True
                SELNOTE.ItemValue = True
                SELDATUMPLANE.ItemValue = True
                SELALLOBJECTS.ItemValue = True
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelectAllCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelectAllCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: UnSelectAllCallback
    ' Following callback is associated with the "SELUNSELECTALL" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function UnSelectAllCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            If SELUNSELECTALL.ItemValue = True Then
                SELSELECTALL.ItemValue = False
                SELSELECTALL.ItemValue = False
                SELLINE.ItemValue = False
                SELARC.ItemValue = False
                SELCIRCLE.ItemValue = False
                SELSPLINE.ItemValue = False
                SELELLIPSE.ItemValue = False
                SELPARABOLA.ItemValue = False
                SELHYPERBOLA.ItemValue = False
                SELALLCURVES.ItemValue = False
                SELSHEETBODY.ItemValue = False
                SELSOLIDBODY.ItemValue = False
                SELDATUMAXIS.ItemValue = False
                SELPOINT.ItemValue = False
                SELCSYS.ItemValue = False
                SELNOTE.ItemValue = False
                SELDATUMPLANE.ItemValue = False
                SELALLOBJECTS.ItemValue = False
            End If

            checkfiltersensitivity()


        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        UnSelectAllCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' UnSelectAllCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelLineCallback
    ' Following callback is associated with the "SELLINE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelLineCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELLINE.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelLineCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelLineCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelArcCallback
    ' Following callback is associated with the "SELARC" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelArcCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELARC.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelArcCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelArcCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelCircleCallback
    ' Following callback is associated with the "SELCIRCLE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelCircleCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELCIRCLE.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelCircleCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelCircleCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelSplineCallback
    ' Following callback is associated with the "SELSPLINE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelSplineCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELSPLINE.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelSplineCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelSplineCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelEllipseCallback
    ' Following callback is associated with the "SELELLIPSE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelEllipseCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELELLIPSE.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelEllipseCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelEllipseCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelParabolaCallback
    ' Following callback is associated with the "SELPARABOLA" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelParabolaCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELPARABOLA.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelParabolaCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelParabolaCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelHyperbolaCallback
    ' Following callback is associated with the "SELHYPERBOLA" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelHyperbolaCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELHYPERBOLA.ItemValue = False Then
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelHyperbolaCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelHyperbolaCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: AllCurvesCallback
    ' Following callback is associated with the "SELALLCURVES" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function AllCurvesCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELALLCURVES.ItemValue = True Then
                SELLINE.ItemValue = True
                SELARC.ItemValue = True
                SELCIRCLE.ItemValue = True
                SELSPLINE.ItemValue = True
                SELELLIPSE.ItemValue = True
                SELPARABOLA.ItemValue = True
                SELHYPERBOLA.ItemValue = True
            Else
                SELLINE.ItemValue = False
                SELARC.ItemValue = False
                SELCIRCLE.ItemValue = False
                SELSPLINE.ItemValue = False
                SELELLIPSE.ItemValue = False
                SELPARABOLA.ItemValue = False
                SELHYPERBOLA.ItemValue = False
                SELALLOBJECTS.ItemValue = False
                Areallobjectssensitive()
                Areallcurveobjectssensitive()
            End If
            checkfiltersensitivity()


        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        AllCurvesCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' AllCurvesCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelSheetbodyCallback
    ' Following callback is associated with the "SELSHEETBODY" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelSheetbodyCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELSHEETBODY.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelSheetbodyCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelSheetbodyCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelSolidbodyCallback
    ' Following callback is associated with the "SELSOLIDBODY" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelSolidbodyCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELSOLIDBODY.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelSolidbodyCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelSolidbodyCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelDatumAxisCallback
    ' Following callback is associated with the "SELDATUMAXIS" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelDatumAxisCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELDATUMAXIS.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelDatumAxisCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelDatumAxisCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelPointCallback
    ' Following callback is associated with the "SELPOINT" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelPointCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELPOINT.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelPointCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelPointCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelCSYSCallback
    ' Following callback is associated with the "SELCSYS" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelCSYSCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False
            If SELCSYS.ItemValue = False Then
                Areallobjectssensitive()
            End If
            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelCSYSCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelCSYSCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelNoteCallback
    ' Following callback is associated with the "SELNOTE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelNoteCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELNOTE.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelNoteCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelNoteCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SelDatumPlaneCallback
    ' Following callback is associated with the "SELDATUMPLANE" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SelDatumPlaneCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELDATUMPLANE.ItemValue = False Then
                Areallobjectssensitive()
            End If

            checkfiltersensitivity()

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SelDatumPlaneCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SelDatumPlaneCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: AllObjectsCallback
    ' Following callback is associated with the "SELALLOBJECTS" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function AllObjectsCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            SELUNSELECTALL.ItemValue = False
            SELSELECTALL.ItemValue = False

            If SELALLOBJECTS.ItemValue = True Then
                SELLINE.ItemValue = True
                SELARC.ItemValue = True
                SELCIRCLE.ItemValue = True
                SELSPLINE.ItemValue = True
                SELELLIPSE.ItemValue = True
                SELPARABOLA.ItemValue = True
                SELHYPERBOLA.ItemValue = True
                SELALLCURVES.ItemValue = True
                SELSHEETBODY.ItemValue = True
                SELSOLIDBODY.ItemValue = True
                SELDATUMAXIS.ItemValue = True
                SELPOINT.ItemValue = True
                SELCSYS.ItemValue = True
                SELNOTE.ItemValue = True
                SELDATUMPLANE.ItemValue = True
            Else
                SELLINE.ItemValue = False
                SELARC.ItemValue = False
                SELCIRCLE.ItemValue = False
                SELSPLINE.ItemValue = False
                SELELLIPSE.ItemValue = False
                SELPARABOLA.ItemValue = False
                SELHYPERBOLA.ItemValue = False
                SELALLCURVES.ItemValue = False
                SELSHEETBODY.ItemValue = False
                SELSOLIDBODY.ItemValue = False
                SELDATUMAXIS.ItemValue = False
                SELPOINT.ItemValue = False
                SELCSYS.ItemValue = False
                SELNOTE.ItemValue = False
                SELDATUMPLANE.ItemValue = False
            End If
            checkfiltersensitivity()


        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        AllObjectsCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' AllObjectsCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: SetFilterCallback
    ' Following callback is associated with the "SELSETFILTER" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function SetFilterCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            Dim EntitiesToSelectArray() As String = Nothing
            Dim mystring() As String = EntitiesToSelect(EntitiesToSelectArray)
            Dim NoOfMaskTriple As Integer = mystring.Length

            selectH = SELDialog.GetSelectionHandle()
            Array.Resize(selectionMask_array, NoOfMaskTriple)

            For i As Integer = 0 To (NoOfMaskTriple - 1)
                Dim Typeselected As String = mystring(i)
                selectionMask_array(i) = mymaskfunction(Typeselected)
            Next

            UI.GetUI().SelectionManager.SetSelectionMask(selectH, NXOpen.Selection.SelectionAction.ClearAndEnableSpecific, selectionMask_array)
            UI.GetUI().SelectionManager.SetSelectionCallbacks(selectH, AddressOf filter_cb, AddressOf sel_cb)

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        SetFilterCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' SetFilterCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: UistylerSelectionMaskExamplecallback
    ' Following callback is associated with the "SELMOVETOLAYER" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function UistylerSelectionMaskExamplecallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try
            If SELMOVETOLAYER.ItemValue = 0 Or SELMOVETOLAYER.ItemValue > 256 Then
                MsgBox("layer " & SELMOVETOLAYER.ItemValue & " is invalid, please enter a valid layer number", MsgBoxStyle.Information, "Move to Layer")
                SELMOVETOLAYER.ItemValue = 1
            Else

                Dim layernumber As Integer = SELMOVETOLAYER.ItemValue
                layercollection = workPart.LayerCategories
                layercategoryarray = layercollection.ToArray()
                Dim lop As Integer = layercategoryarray.Length

                If lop > 1 Then

                    For Each layercategory As Layer.Category In layercategoryarray
                        Dim categoryinfo As New UF.UFLayer.CategoryInfo
                        ufsession.Layer.AskCategoryInfo(layercategory.Tag, categoryinfo)

                        If categoryinfo.name = "ALL" Then

                            'do nothing here
                        Else

                            Dim nooflayersinlayercategory() As Integer = layercategory.GetMemberLayers

                            For Each layer As Integer In nooflayersinlayercategory
                                If layernumber = layer Then
                                    ufsession.Layer.AskCategoryInfo(layercategory.Tag, categoryinfo)
                                    SELLAYERNAME.ItemValue = categoryinfo.name
                                    Exit For
                                    Exit For
                                Else
                                    If layernumber > 80 Then
                                        SELLAYERNAME.ItemValue = "No Layer Category set"
                                    End If
                                End If
                            Next
                        End If
                    Next
                Else
                    SELLAYERNAME.ItemValue = "No Layer Category set"
                End If
            End If

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try

        ' Callback acknowledged, do not terminate dialog
        UistylerSelectionMaskExamplecallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' UistylerSelectionMaskExamplecallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: LayerNameCallback
    ' Following callback is associated with the "SELLAYERNAME" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function LayerNameCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            ' ---- Enter your callback code here -----

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        LayerNameCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' LayerNameCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    '------------------------------------------------------------------------------
    ' Callback Name: LayerSettingInformationCallback
    ' Following callback is associated with the "SELLAYERSETTINGINFORMATION" Styler item.
    ' Input: eventObject - object of UIStyler.StylerEvent class
    '------------------------------------------------------------------------------
    Public Function LayerSettingInformationCallback(ByVal eventObject As NXOpen.UIStyler.StylerEvent) As NXOpen.UIStyler.DialogState
        Try

            Dim counter As Integer = 1
            Dim listcategoryinfo As New UF.UFLayer.CategoryInfo

            ufsession.Ui.OpenListingWindow()
            ufsession.Ui.WriteListingWindow("================================================================" & vbCrLf)
            ufsession.Ui.WriteListingWindow("               ***** MOVE TO LAYER EXAMPLE *****                " & vbCrLf)
            ufsession.Ui.WriteListingWindow("================================================================" & vbCrLf)
            ufsession.Ui.WriteListingWindow("Sl.no.   Layer category     Layer   No of Objects" & vbCrLf)

            For Each categorylist As Layer.Category In layercategoryarray
                ufsession.Layer.AskCategoryInfo(categorylist.Tag, listcategoryinfo)
                If listcategoryinfo.name = "ALL" Then

                Else
                    Dim memberlayers() As Integer = categorylist.GetMemberLayers()
                    ufsession.Ui.WriteListingWindow(counter & "." & vbTab & vbTab & listcategoryinfo.name & vbCrLf)

                    For Each layer As Integer In memberlayers
                        Dim layermanager As Layer.LayerManager
                        layermanager = workPart.Layers
                        Dim noofobjectsonlayer() As NXObject = layermanager.GetAllObjectsOnLayer(layer)
                        ufsession.Ui.WriteListingWindow(vbTab & vbTab & vbTab & vbTab & vbTab & layer.ToString & vbTab)
                        ufsession.Ui.WriteListingWindow(vbTab & noofobjectsonlayer.Length & vbCrLf)
                    Next
                    counter = counter + 1
                End If
            Next
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        ' Callback acknowledged, do not terminate dialog
        LayerSettingInformationCallback = NXOpen.UIStyler.DialogState.ContinueDialog
        ' or Callback acknowledged, terminate dialog.
        ' LayerSettingInformationCallback = NXOpen.UIStyler.DialogState.ExitDialog
    End Function

    Public Function EntitiesToSelect(ByRef EntitiesToSelectArray() As String) As String()
        Try
            Dim ToggledOnItems() As String
            ToggledOnItems = Nothing
            Dim Count As Integer
            Count = 1
            If SELLINE.ItemValue = True Then
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "LINE"
            End If
            If SELARC.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "ARC"
            End If
            If SELCIRCLE.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "CIRCLE"
            End If
            If SELSPLINE.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "SPLINE"
            End If
            If SELELLIPSE.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "ELLIPSE"
            End If
            If SELPARABOLA.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "PARABOLA"
            End If
            If SELHYPERBOLA.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "HYPERBOLA"
            End If
            If SELSHEETBODY.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "SHEETBODY"
            End If
            If SELSOLIDBODY.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "SOLIDBODY"
            End If
            If SELDATUMAXIS.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "DATUMAXIS"
            End If
            If SELPOINT.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "POINT"
            End If
            If SELCSYS.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "CSYS"
            End If
            If SELNOTE.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "NOTE"
            End If
            If SELDATUMPLANE.ItemValue = True Then
                Count = Count + 1
                Array.Resize(ToggledOnItems, Count)
                ToggledOnItems(Count - 1) = "DATUMPLANE"
            End If

            EntitiesToSelectArray = ToggledOnItems
            Return EntitiesToSelectArray

        Catch ex As NXException
            Return Nothing
        End Try

    End Function

    Public Function mymaskfunction(ByVal str2 As String) As NXOpen.Selection.MaskTriple
        Dim selectionMask_return As NXOpen.Selection.MaskTriple
        selectionMask_return.SolidBodySubtype = 0
        If str2 = "LINE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_line_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_line_normal_subtype
        ElseIf str2 = "ARC" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_circle_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_circle_open_subtype
        ElseIf str2 = "CIRCLE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_circle_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_circle_closed_subtype
        ElseIf str2 = "SPLINE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_spline_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_spline_subtype
        ElseIf str2 = "ELLIPSE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_conic_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_conic_ellipse_subtype
        ElseIf str2 = "PARABOLA" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_conic_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_conic_parabola_subtype
        ElseIf str2 = "HYPERBOLA" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_conic_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_conic_hyperbola_subtype
        ElseIf str2 = "SHEETBODY" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_solid_type
            selectionMask_return.Subtype = 0
            selectionMask_return.SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_SHEET_BODY
        ElseIf str2 = "SOLIDBODY" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_solid_type
            selectionMask_return.Subtype = 0
            selectionMask_return.SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_SOLID_BODY
        ElseIf str2 = "DATUMAXIS" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_datum_axis_type
            selectionMask_return.Subtype = 0
        ElseIf str2 = "POINT" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_point_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_point_subtype
        ElseIf str2 = "CSYS" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_coordinate_system_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_csys_normal_subtype
        ElseIf str2 = "NOTE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_drafting_entity_type
            selectionMask_return.Subtype = NXOpen.UF.UFConstants.UF_draft_note_subtype
        ElseIf str2 = "DATUMPLANE" Then
            selectionMask_return.Type = NXOpen.UF.UFConstants.UF_datum_plane_type
            selectionMask_return.Subtype = 0
        End If
        Return (selectionMask_return)

    End Function
    Public Function sel_cb(ByVal selectedObjects As NXObject(), ByVal deselectedObjects() As NXObject, ByVal selectHandle As SelectionHandle) As Integer
        Try

            For Each selObj As NXObject In selectedObjects
                htEdges.Add(selObj.JournalIdentifier, selObj)
            Next

            For Each deselObj As NXObject In deselectedObjects
                htEdges.Remove(deselObj.JournalIdentifier)
            Next

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
        sel_cb = NXOpen.UIStyler.DialogState.ContinueDialog
    End Function
    Public Function filter_cb(ByVal selectedObject As NXOpen.NXObject, ByVal selectionMask As NXOpen.Selection.MaskTriple, ByVal selectHandle As SelectionHandle) As Integer

        Try
            Dim periodicity As Integer

            If selectedObject.GetType.ToString = "NXOpen.Arc" Then
                ufsession.Modl.AskCurvePeriodicity(selectedObject.Tag, periodicity)

                If (SELARC.ItemValue = True And periodicity = 0) Or _
                    (SELCIRCLE.ItemValue = True And periodicity = 1) Then
                    filter_cb = NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT
                End If

            Else
                filter_cb = NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT
            End If

        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function
    Public Function checkfiltersensitivity() As Integer
        Try
            If (SELLINE.ItemValue Or SELARC.ItemValue Or SELCIRCLE.ItemValue _
            Or SELSPLINE.ItemValue Or SELELLIPSE.ItemValue Or SELPARABOLA.ItemValue _
            Or SELHYPERBOLA.ItemValue Or SELALLCURVES.ItemValue Or SELSOLIDBODY.ItemValue _
            Or SELSHEETBODY.ItemValue Or SELDATUMAXIS.ItemValue Or SELPOINT.ItemValue _
            Or SELCSYS.ItemValue Or SELNOTE.ItemValue Or SELDATUMPLANE.ItemValue _
            Or SELALLOBJECTS.ItemValue) Then
                SELSETFILTER.Sensitivity = True
            Else
                SELSETFILTER.Sensitivity = False
            End If
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function
    Public Function Areallobjectssensitive() As Integer
        Try
            If (SELLINE.ItemValue And SELARC.ItemValue And SELCIRCLE.ItemValue _
            And SELSPLINE.ItemValue And SELELLIPSE.ItemValue And SELPARABOLA.ItemValue _
            And SELHYPERBOLA.ItemValue And SELALLCURVES.ItemValue And SELSOLIDBODY.ItemValue _
            And SELSHEETBODY.ItemValue And SELDATUMAXIS.ItemValue And SELPOINT.ItemValue _
            And SELCSYS.ItemValue And SELNOTE.ItemValue And SELDATUMPLANE.ItemValue _
            And SELALLOBJECTS.ItemValue) Then
                SELALLOBJECTS.ItemValue = True
            Else
                SELALLOBJECTS.ItemValue = False
            End If
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function
    Public Function Areallcurveobjectssensitive() As Integer
        Try
            If (SELLINE.ItemValue And SELARC.ItemValue And SELCIRCLE.ItemValue _
            And SELSPLINE.ItemValue And SELELLIPSE.ItemValue And SELPARABOLA.ItemValue _
            And SELHYPERBOLA.ItemValue) Then
                SELALLCURVES.ItemValue = True
            Else
                SELALLCURVES.ItemValue = False
            End If
        Catch ex As NXException
            ' ---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message)
        End Try
    End Function

End Class
