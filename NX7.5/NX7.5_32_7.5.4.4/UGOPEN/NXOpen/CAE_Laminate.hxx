#ifndef NXOpen_CAE_LAMINATE_HXX_INCLUDED
#define NXOpen_CAE_LAMINATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Laminate.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PhysicalPropertyTable.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class Laminate;
    }
    namespace CAE
    {
        class LaminatePlyGroupCollection;
    }
    namespace CAE
    {
        class PhysicalPropertyTable;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class _LaminateBuilder;
        class LaminateImpl;
        /**  @brief  Represents a Laminate, which is a specialized kind of @link CAE::PhysicalPropertyTable CAE::PhysicalPropertyTable@endlink   

         */
        class NXOPENCPPEXPORT  Laminate : public CAE::PhysicalPropertyTable
        {
            /** Type of zones to export */
            public: enum ZoneType
            {
                ZoneTypeOrphanElems/** Zone with elements that were not assigned to any zone */,
                ZoneTypeOverlapElems/** Zone with elements that were assigned to more that one layup */,
                ZoneTypeRegular/** Regular valid zone */,
                ZoneTypeAll/** Export all zones */
            };

            private: LaminateImpl * m_laminate_impl;
            private: friend class  _LaminateBuilder;
            protected: Laminate();
            public: ~Laminate();
            /**Returns  the intrinsic laminate properties that are not solver-specific  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::PropertyTable * Parameters
            (
            );
            /** Removes all the ply groups and plies from the laminate physical  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void ClearLayup
            (
            );
            /** Refresh the laminate linked ply group state  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void RefreshLinkedGroups
            (
            );
            /** Output laminate info to an info window 
                        Corresponds to the info button in the Validation section of the Laminate Modeler dialog. <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void Information
            (
                bool detailed /** detailed */ 
            );
            /** Export detailed laminate information to a CSV file. 
                        Corresponds to the CSV export button in the Validation section of the Laminate Modeler dialog.  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void ExportInformation
            (
                const NXString & csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export simple laminate definition to a csv file. 
                        Corresponds to the CSV layup export button in the Ply Layup section of the Laminate Modeler dialog.  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void ExportLayup
            (
                const NXString & csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Compute zones.  Reads the global layups, updates the draping and calculates the zones on the laminate.
                        Existing zones will be overriden.  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ComputeZones
            (
            );
            /** Export zone information to a CSV file.  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportZoneInformation
            (
                const NXString & csvFilename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** For each zone in the current laminate physical property, create an element group  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportZonesAsGroups
            (
                NXOpen::CAE::Laminate::ZoneType zoneType /** Type of zone to export */,
                int zoneIndex /** Zone Index. Not used if type is JA_FEM_LAMINATE_zone_type_all */
            );
            /** For each zone in the current laminate physical property, create an equivalent laminate physical property  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportZonesAsLaminates
            (
                NXOpen::CAE::Laminate::ZoneType zoneType /** Type of zone to export */,
                int zoneIndex /** Zone Index. Not used if type is JA_FEM_LAMINATE_zone_type_all */
            );


            /** Returns the PlyGroup collection defining the layup of this laminate */
            public: NXOpen::CAE::LaminatePlyGroupCollection *PlyGroups();
        };
    }
}
#undef EXPORTLIBRARY
#endif
