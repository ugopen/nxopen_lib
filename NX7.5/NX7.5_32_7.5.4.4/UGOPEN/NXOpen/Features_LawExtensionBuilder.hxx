#ifndef NXOpen_FEATURES_LAWEXTENSIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_LAWEXTENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_LawExtensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_LawExtensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class LawExtensionBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _LawExtensionBuilderBuilder;
        class LawExtensionBuilderImpl;
        /**
            Represents a @link Features::LawExtension Features::LawExtension@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateLawExtensionBuilder Features::FeatureCollection::CreateLawExtensionBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleLaw.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        AngleLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        AngleLaw.Parameter </td> <td> 
         
        t </td> </tr> 

        <tr><td> 
         
        LengthLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        MergeFacesIfPossible </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        OppositeSideLengthLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        Rebuild.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        Rebuild.RebuildType </td> <td> 
         
        None </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  LawExtensionBuilder : public Features::FeatureBuilder
        {
            /** Law extension creation types */
            public: enum Types
            {
                TypesFaces/** Reference faces */,
                TypesVector/** Reference vector */
            };

            /** Opposite side extension options */
            public: enum OppositeSideExtensionOptions
            {
                OppositeSideExtensionOptionsNone/** No extension on opposite side */,
                OppositeSideExtensionOptionsSymmetric/** Symmetric extension */,
                OppositeSideExtensionOptionsAsymmetric/** Asymmetric extension */
            };

            private: LawExtensionBuilderImpl * m_lawextensionbuilder_impl;
            private: friend class  _LawExtensionBuilderBuilder;
            protected: LawExtensionBuilder();
            public: ~LawExtensionBuilder();
            /**Returns  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Features::LawExtensionBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetType
            (
                NXOpen::Features::LawExtensionBuilder::Types type /** type */ 
            );
            /**Returns  the base profile  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Section * BaseProfile
            (
            );
            /**Returns  the faces. Faces are used only when @link Features::LawExtensionBuilder::Types Features::LawExtensionBuilder::Types@endlink  is  
                        @link Features::LawExtensionBuilder::TypesFaces Features::LawExtensionBuilder::TypesFaces@endlink . The faces must be
                        sew able to form a single sheet body. The normal of the sewed sheet body and base profile
                        direction provide local reference co-ordinate system for the orientation of the surface rule lines.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  a value indicating whether to reverse the reference face normal. When @link Features::LawExtensionBuilder::Types Features::LawExtensionBuilder::Types@endlink  is  
                        @link Features::LawExtensionBuilder::TypesFaces Features::LawExtensionBuilder::TypesFaces@endlink , the input faces are sewed to
                        form a single sheet body. The normal of the sheet body is decided based on the face which
                        is nearest to the parametric mid point of the base profile and acts as the reference face normal.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: bool IsReferenceFaceNormalReversed
            (
            );
            /**Sets  a value indicating whether to reverse the reference face normal. When @link Features::LawExtensionBuilder::Types Features::LawExtensionBuilder::Types@endlink  is  
                        @link Features::LawExtensionBuilder::TypesFaces Features::LawExtensionBuilder::TypesFaces@endlink , the input faces are sewed to
                        form a single sheet body. The normal of the sheet body is decided based on the face which
                        is nearest to the parametric mid point of the base profile and acts as the reference face normal.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetReferenceFaceNormalReversed
            (
                bool reverseNormal /** reversenormal */ 
            );
            /**Returns  the vector. Vector is used only when @link Features::LawExtensionBuilder::Types Features::LawExtensionBuilder::Types@endlink  is  
                        @link Features::LawExtensionBuilder::TypesVector Features::LawExtensionBuilder::TypesVector@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector. Vector is used only when @link Features::LawExtensionBuilder::Types Features::LawExtensionBuilder::Types@endlink  is  
                        @link Features::LawExtensionBuilder::TypesVector Features::LawExtensionBuilder::TypesVector@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the length law  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::GeometricUtilities::LawBuilder * LengthLaw
            (
            );
            /**Returns  the angle law  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::GeometricUtilities::LawBuilder * AngleLaw
            (
            );
            /**Returns  the opposite side extension option  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Features::LawExtensionBuilder::OppositeSideExtensionOptions OppositeSideExtensionOption
            (
            );
            /**Sets  the opposite side extension option  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetOppositeSideExtensionOption
            (
                NXOpen::Features::LawExtensionBuilder::OppositeSideExtensionOptions oppositeSideExtension /** oppositesideextension */ 
            );
            /**Returns  the opposite side length law. Opposite side extension law is required only when
                        @link Features::LawExtensionBuilder::OppositeSideExtensionOptions Features::LawExtensionBuilder::OppositeSideExtensionOptions@endlink  is  
                        @link Features::LawExtensionBuilder::OppositeSideExtensionOptionsAsymmetric Features::LawExtensionBuilder::OppositeSideExtensionOptionsAsymmetric@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::GeometricUtilities::LawBuilder * OppositeSideLengthLaw
            (
            );
            /**Returns  the spine. Spine is optional  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::Section * Spine
            (
            );
            /**Returns  a value indicating whether to merge the faces if possible  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: bool MergeFacesIfPossible
            (
            );
            /**Sets  a value indicating whether to merge the faces if possible  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetMergeFacesIfPossible
            (
                bool mergeFacesIfPossible /** mergefacesifpossible */ 
            );
            /**Returns  the rebuild data. This data is used to rebuild the surface in the base profile direction.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: NXOpen::GeometricUtilities::Rebuild * Rebuild
            (
            );
            /**Returns  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
