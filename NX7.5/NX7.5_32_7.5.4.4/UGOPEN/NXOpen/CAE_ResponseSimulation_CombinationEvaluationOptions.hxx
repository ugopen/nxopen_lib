#ifndef NXOpen_CAE_RESPONSESIMULATION_COMBINATIONEVALUATIONOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_COMBINATIONEVALUATIONOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_CombinationEvaluationOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class CombinationEvaluationOptions;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _CombinationEvaluationOptionsBuilder;
            class CombinationEvaluationOptionsImpl;
            /** Represents the setting for combination evaluation. */
            class NXOPENCPPEXPORT  CombinationEvaluationOptions : public TaggedObject
            {
                /** Specifies the calculation method of combination evaluation */
                public: enum EvaluationMethod
                {
                    EvaluationMethodAbs/** abs */ ,
                    EvaluationMethodSrss/** srss */ ,
                    EvaluationMethodNrl/** nrl */ ,
                    EvaluationMethodCqc/** cqc */ ,
                    EvaluationMethodNqcDoubleSum/** nqc double sum */ 
                };

                /** Specifies combination method for multiple excitation combination */
                public: enum MultipleExcitationCombinationMethod
                {
                    MultipleExcitationCombinationMethodAbs/** abs */ ,
                    MultipleExcitationCombinationMethodSrs/** srs */ 
                };

                private: CombinationEvaluationOptionsImpl * m_combinationevaluationoptions_impl;
                private: friend class  _CombinationEvaluationOptionsBuilder;
                protected: CombinationEvaluationOptions();
                public: ~CombinationEvaluationOptions();
                /**Returns  the calculation method  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethod EvaluationMethodOption
                (
                );
                /**Sets  the calculation method  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetEvaluationMethodOption
                (
                    NXOpen::CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethod method /** method */ 
                );
                /**Returns  the combination method for multiple excitation combination  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::CombinationEvaluationOptions::MultipleExcitationCombinationMethod CombinationMethod
                (
                );
                /**Sets  the combination method for multiple excitation combination  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetCombinationMethod
                (
                    NXOpen::CAE::ResponseSimulation::CombinationEvaluationOptions::MultipleExcitationCombinationMethod combinationMethod /** combination method */ 
                );
                /**Returns  the neighboring factor. Must be specified when calculation method is 
                        @link  CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNrl  CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNrl@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double NeighboringFactor
                (
                );
                /**Sets  the neighboring factor. Must be specified when calculation method is 
                        @link  CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNrl  CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNrl@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetNeighboringFactor
                (
                    double neighboringFactor /** neighboring factor */ 
                );
                /**Returns  the time duration in second. Must be specified when calculation method is 
                        @link CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNqcDoubleSum CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNqcDoubleSum@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: double TimeDuration
                (
                );
                /**Sets  the time duration in second. Must be specified when calculation method is 
                        @link CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNqcDoubleSum CAE::ResponseSimulation::CombinationEvaluationOptions::EvaluationMethodNqcDoubleSum@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetTimeDuration
                (
                    double timeDuration /** time duration */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
