#ifndef NXOpen_ROUTING_LINEARPATHSETTINGS_HXX_INCLUDED
#define NXOpen_ROUTING_LINEARPATHSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LinearPathSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_LinearPathSettings.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class LinearPathSettings;
    }
    class Builder;
    namespace Routing
    {
        class _LinearPathSettingsBuilder;
        class LinearPathSettingsImpl;
        /** Helper object used the by @link Routing::LinearPathBuilder Routing::LinearPathBuilder@endlink  builder. 
                Determines various settings to be applied when the path is created.
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateLinearPathSettings Routing::RouteManager::CreateLinearPathSettings@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        LockToSelectedObject </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  LinearPathSettings : public Builder
        {
            private: LinearPathSettingsImpl * m_linearpathsettings_impl;
            private: friend class  _LinearPathSettingsBuilder;
            protected: LinearPathSettings();
            public: ~LinearPathSettings();
            /**Returns  the preference to assign the current default corner to new segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AssignDefaultCorner
            (
            );
            /**Sets  the preference to assign the current default corner to new segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetAssignDefaultCorner
            (
                bool assign /** assign */ 
            );
            /**Returns  the preference to find and assign a default elbow to new segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AssignDefaultElbow
            (
            );
            /**Sets  the preference to find and assign a default elbow to new segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetAssignDefaultElbow
            (
                bool assign /** assign */ 
            );
            /**Returns  the preference to determine if the new segments and control points
                            should be constrained to the objects selected by the user.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool LockToSelectedObject
            (
            );
            /**Sets  the preference to determine if the new segments and control points
                            should be constrained to the objects selected by the user.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLockToSelectedObject
            (
                bool lock /** lock */ 
            );
            /**Returns  the preference to determine if the length of new segments should
                         be constrained.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool LockLength
            (
            );
            /**Sets  the preference to determine if the length of new segments should
                         be constrained.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLockLength
            (
                bool lock /** lock */ 
            );
            /**Returns  the preference to determine if the angle between segments should
                            be constrained.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool LockAngle
            (
            );
            /**Sets  the preference to determine if the angle between segments should
                            be constrained.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLockAngle
            (
                bool lock /** lock */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
