#ifndef NXOpen_ROUTING_CLOCKPARTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_CLOCKPARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ClockPartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Routing_ClockPartBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class ClockPartBuilder;
    }
    class Builder;
    class Expression;
    namespace Routing
    {
        class Port;
    }
    class SelectNXObject;
    namespace Routing
    {
        class _ClockPartBuilderBuilder;
        class ClockPartBuilderImpl;
        /** Builder class for clock part object  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateClockPartBuilder Routing::RouteManager::CreateClockPartBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RotationAngle.Value </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ClockPartBuilder : public Builder
        {
            private: ClockPartBuilderImpl * m_clockpartbuilder_impl;
            private: friend class  _ClockPartBuilderBuilder;
            protected: ClockPartBuilder();
            public: ~ClockPartBuilder();
            /**Returns  the user selected @link Routing::Port  Routing::Port @endlink  for rotation of compoent  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObject * PortSelection
            (
            );
            /**Returns  the rotation angle applied to the component for rotation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * RotationAngle
            (
            );
            /** Begin a drag operation.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void StartDrag
            (
            );
            /** Drag the selected objects by the given translation and rotation.  Only
                        call after invoking the @link Routing::ClockPartBuilder::StartDrag Routing::ClockPartBuilder::StartDrag@endlink 
                        method.  After finished dragging, call 
                        @link Routing::ClockPartBuilder::StopDrag Routing::ClockPartBuilder::StopDrag@endlink . <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void DragByTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied.*/,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** End a drag operation.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void StopDrag
            (
            );
            /** Suppress the constraind applied to the selected @link  Routing::Port   Routing::Port @endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SuppressPortConstraint
            (
                NXOpen::Routing::Port * portTag /** Routing Port whose
                                                                                     constraint is to be suppressed */,
                bool suppress /** true to suppress , false to unsuppress */
            );
            /** Suppress the constraind applied to the selected @link  Routing::Port   Routing::Port @endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UpdateRotationAngle
            (
                double angle /** true to suppress , false to unsuppress */
            );
            /** Initializes (or resets) the builder based off of the input line segment.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void InitializeFromPort
            (
                NXOpen::Routing::Port * port /** port object, may be NULL*/
            );
            /**Set RotationLock of builder attribute <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLockRotation
            (
                bool lockRotation /** Lock Rotation*/
            );
            /**Set EngagementLock of builder attribute <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLockEngagement
            (
                bool lockEngagement /** Lock Engagement*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
