#ifndef NXOpen_MECHATRONICS_COLLISIONBODYBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_COLLISIONBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_CollisionBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_CollisionShapeBuilder.hxx>
#include <NXOpen/Mechatronics_CollisionBodyBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Mechatronics
    {
        class CollisionBodyBuilder;
    }
    namespace Mechatronics
    {
        class CollisionMaterial;
    }
    namespace Mechatronics
    {
        class CollisionShapeBuilder;
    }
    class SelectNXObjectList;
    namespace Mechatronics
    {
        class _CollisionBodyBuilderBuilder;
        class CollisionBodyBuilderImpl;
        /** Represents a @link Mechatronics::CollisionBodyBuilder Mechatronics::CollisionBodyBuilder@endlink .  <br> To create a new instance of this class, use @link Mechatronics::CollisionBodyCollection::CreateCollisionBodyBuilder Mechatronics::CollisionBodyCollection::CreateCollisionBodyBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  CollisionBodyBuilder : public Mechatronics::CollisionShapeBuilder
        {
            /** the collide shape types. */
            public: enum CollisionShapeTypes
            {
                CollisionShapeTypesBox/** Box */,
                CollisionShapeTypesSphere/** Sphere */,
                CollisionShapeTypesCapsule/** Capsule */,
                CollisionShapeTypesConvex/** Convex */
            };

            /** the shape calculation option. */
            public: enum ShapePropertyTypes
            {
                ShapePropertyTypesAutomatic/** automatic */,
                ShapePropertyTypesUserDefined/** user defined */
            };

            private: CollisionBodyBuilderImpl * m_collisionbodybuilder_impl;
            private: friend class  _CollisionBodyBuilderBuilder;
            protected: CollisionBodyBuilder();
            public: ~CollisionBodyBuilder();
            /**Returns  the geometries. This can be a @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink , @link Point Point@endlink 
                    @link Face Face@endlink , @link Edge Edge@endlink , bodies and curves. <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the shape type.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::CollisionBodyBuilder::CollisionShapeTypes CollisionShape
            (
            );
            /**Sets  the shape type.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCollisionShape
            (
                NXOpen::Mechatronics::CollisionBodyBuilder::CollisionShapeTypes collisionShape /** collisionshape */ 
            );
            /**Returns  the shape option.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::CollisionBodyBuilder::ShapePropertyTypes CollisionProperties
            (
            );
            /**Sets  the shape option.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCollisionProperties
            (
                NXOpen::Mechatronics::CollisionBodyBuilder::ShapePropertyTypes collisionProperties /** collisionproperties */ 
            );
            /**Returns  the category. It should be between 0 and 16.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: int Category
            (
            );
            /**Sets  the category. It should be between 0 and 16.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCategory
            (
                int category /** category */ 
            );
            /**Returns  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString Name
            (
            );
            /**Sets  the name.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the material.  This can be a @link CollisionMaterial CollisionMaterial@endlink .  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::CollisionMaterial * CollisionMaterial
            (
            );
            /**Sets  the material.  This can be a @link CollisionMaterial CollisionMaterial@endlink .  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCollisionMaterial
            (
                NXOpen::Mechatronics::CollisionMaterial * collisionMaterial /** collisionmaterial */ 
            );
            /** The convex of the collide. Call this function to generate convext when 
                    @link Mechatronics::CollisionBodyBuilder::CollisionShape Mechatronics::CollisionBodyBuilder::CollisionShape@endlink  is set 
                   to @link Mechatronics::CollisionBodyBuilder::CollisionShapeTypesConvex Mechatronics::CollisionBodyBuilder::CollisionShapeTypesConvex@endlink .  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void CalculateConvex
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
