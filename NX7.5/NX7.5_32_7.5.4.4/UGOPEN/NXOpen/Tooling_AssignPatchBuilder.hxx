#ifndef NXOpen_TOOLING_ASSIGNPATCHBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ASSIGNPATCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AssignPatchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_AssignPatchBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class AssignPatchBuilder;
    }
    class Body;
    class Builder;
    class SelectBodyList;
    namespace Tooling
    {
        class _AssignPatchBuilderBuilder;
        class AssignPatchBuilderImpl;
        /** Represents a builder to be used to add sheet bodies as patch surfaces or delete patch surfaces.  <br> To create a new instance of this class, use @link Tooling::AssignPatchCollection::CreateBuilder Tooling::AssignPatchCollection::CreateBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        KeepSheet </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  AssignPatchBuilder : public Builder
        {
            private: AssignPatchBuilderImpl * m_assignpatchbuilder_impl;
            private: friend class  _AssignPatchBuilderBuilder;
            protected: AssignPatchBuilder();
            public: ~AssignPatchBuilder();
            /**Returns  the selected surfaces added as patch surfaces or deleted from patch surfaces.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * PatchSurfaces
            (
            );
            /** Get the defined color of patch surfaces.  <br> License requirements : None */
            public: void GetPatchColor
            (
                double* redValue /** red value between 0 and 1 */,
                double* greenValue /** green value between 0 and 1 */,
                double* blueValue /** blue value between 0 and 1 */
            );
            /** Set the defined color of patch surfaces.  <br> License requirements : None */
            public: void SetPatchColor
            (
                double redValue /** red value between 0 and 1 */,
                double greenValue /** green value between 0 and 1 */,
                double blueValue /** blue value between 0 and 1 */
            );
            /**Returns  the flag indicating whether to Keep the sheet body or just delete it when deleting a patch surface.  <br> License requirements : None */
            public: bool KeepSheet
            (
            );
            /**Sets  the flag indicating whether to Keep the sheet body or just delete it when deleting a patch surface.  <br> License requirements : None */
            public: void SetKeepSheet
            (
                bool keepSheet /** keepsheet */ 
            );
            /** Add selected face to select list.  <br> License requirements : None */
            public: void AddSelectFace
            (
                NXOpen::Body * addFace /** face to add to user selected face list */
            );
            /** Get initial patched and parting faces to do delete surface function.  <br> License requirements : None */
            public: void InitOnEnter
            (
            );
            /** Get all the related sheets in one feature set.  <br> License requirements : None */
            public: void PrepareAllRemovingSheets
            (
                const std::vector<NXOpen::Body *> & sheets /** The sheets to find their related originals */
            );
            /** Clear the m_addingCandidates list.  <br> License requirements : None */
            public: void ClearAddingCandidates
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
