#ifndef NXOpen_GEOMETRICUTILITIES_ALONGSPINEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ALONGSPINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_AlongSpineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongSpineBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimWithValueBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class AlongSpineBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimWithValueBuilder;
    }
    class ObjectList;
    class Section;
    namespace GeometricUtilities
    {
        class _AlongSpineBuilderBuilder;
        class AlongSpineBuilderImpl;
        /**
            Represents a @link GeometricUtilities::AlongSpineBuilder GeometricUtilities::AlongSpineBuilder@endlink 
            */
        class NXOPENCPPEXPORT  AlongSpineBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the Spine option. This option will be used while editing the lagecy feaures (Feaures having profile without section in it). */
            public: enum RetainSpineOption
            {
                RetainSpineOptionKeepOriginal/** Keeps the original profile as it is during edit of pre NX3 parms */,
                RetainSpineOptionReplace/** Deletes the old profile, so that user has to select new one during edit of pre NX3 parms */
            };

            private: AlongSpineBuilderImpl * m_alongspinebuilder_impl;
            private: friend class  _AlongSpineBuilderBuilder;
            protected: AlongSpineBuilder();
            public: ~AlongSpineBuilder();
            /**Returns  the alongSpineOption.  This will be used only during the edit of Pre NX3 feature Parms  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongSpineBuilder::RetainSpineOption SpineOption
            (
            );
            /**Sets  the alongSpineOption.  This will be used only during the edit of Pre NX3 feature Parms  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSpineOption
            (
                NXOpen::GeometricUtilities::AlongSpineBuilder::RetainSpineOption spineOption /** spine option */ 
            );
            /**Returns  the Spine  <br> License requirements : None */
            public: NXOpen::Section * Spine
            (
            );
            /**Returns  the Spine set by the owning feature of the law  <br> License requirements : None */
            public: NXOpen::Section * FeatureSpine
            (
            );
            /**Returns  the list of spine points.  <br> License requirements : None */
            public: NXOpen::ObjectList * SpinePointList
            (
            );
            /** Returns the all SpinePointData objects  <br> License requirements : None */
            public: void GetSpinePoints
            (
                std::vector<NXOpen::GeometricUtilities::OnPathDimWithValueBuilder *> & spPoints /** Array of SpinePointData Objects */
            );
            /** Set the spine sent by the owning feaure dynamically into builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFeatureSpine
            (
                NXOpen::Section * featureSpine /** Set the Spine into builder */
            );
            /** Reset the spine   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void ResetSpine
            (
            );
            /** Creates a new spine point  @return  OnPathDimWithValueBuilder Object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * CreateSpinePoint
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
