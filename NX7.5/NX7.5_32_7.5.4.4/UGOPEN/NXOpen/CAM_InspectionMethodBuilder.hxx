#ifndef NXOpen_CAM_INSPECTIONMETHODBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONMETHODBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionMethodBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/CAM_MethodBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionMethodBuilder;
    }
    namespace CAM
    {
        class MethodBuilder;
    }
    class NXColor;
    namespace CAM
    {
        class _InspectionMethodBuilderBuilder;
        class InspectionMethodBuilderImpl;
        /** Represents the builder for a CMM Inspection method.  <br> To create a new instance of this class, use @link CAM::InspectionGroupCollection::CreateInspectionMethodBuilder CAM::InspectionGroupCollection::CreateInspectionMethodBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionMethodBuilder : public CAM::MethodBuilder
        {
            /** CMM Inspection modes. */
            public: enum InspectionModes
            {
                InspectionModesProgramDefault/** Program Default */,
                InspectionModesProgram/** Program */,
                InspectionModesManual/** Manual */,
                InspectionModesAuto/** Auto */
            };

            /** CMM Inspection operation types. */
            public: enum OperationTypes
            {
                OperationTypesNone/** None */,
                OperationTypesManualPoint/** Manual Point */,
                OperationTypesUVGrid/** Rectangular UV Grid */,
                OperationTypesPointHelix/** Point Helix */,
                OperationTypesLineScan/** Line Scan */,
                OperationTypesCircularScan/** Circular Scan */,
                OperationTypesCurveScan/** Curve Scan */,
                OperationTypesHelicalScan/** Helical Scan */
            };

            /** CMM Inspection transition modes. */
            public: enum TransitionTypes
            {
                TransitionTypesNone/** No Transition Point */,
                TransitionTypesManual/** Manual Transition Point */,
                TransitionTypesSafePlane/** Safe Plane Transition Point */
            };

            /** CMM Inspection method feature type. */
            public: enum MethodTypes
            {
                MethodTypesNone/** None */,
                MethodTypesArc/** Arc */,
                MethodTypesCircle/** Circle */,
                MethodTypesPoint/** Point */,
                MethodTypesSphere/** Sphere */,
                MethodTypesSurface/** Surface */,
                MethodTypesPattern/** Pattern */,
                MethodTypesCurve/** Curve */,
                MethodTypesCylinder/** Cylinder */,
                MethodTypesCone/** Cone */,
                MethodTypesPlane/** Plane */,
                MethodTypesLine/** Line */,
                MethodTypesCParln/** Bounded Slot Tab */,
                MethodTypesSlotTab/** Slot Tab */,
                MethodTypesSurfaceOfRevolution/** Surface of Revolution */,
                MethodTypesTorus/** Torus */
            };

            /** the UV modes */
            public: enum UVModeTypes
            {
                UVModeTypesPercentage/** Percentage */,
                UVModeTypesDistance/** Distance from start and end in part units */,
                UVModeTypesFull/** Full circumference */,
                UVModeTypesDegrees/** Angle from start and end */,
                UVModeTypesSweep/** Start angle and sweep angle */
            };

            /** the point sequence modes */
            public: enum PointSequenceModeTypes
            {
                PointSequenceModeTypesZig/** Zig only */,
                PointSequenceModeTypesZigZag/** Zig and Zag */,
                PointSequenceModeTypesNearest/** Nearest point */
            };

            /** the point sequence start location */
            public: enum PointSequenceStartTypes
            {
                PointSequenceStartTypesUminVmin/** Umin - Vmin */,
                PointSequenceStartTypesUminVmax/** Umin - Vmax */,
                PointSequenceStartTypesUmaxVmin/** Umax - Vmin */,
                PointSequenceStartTypesUmaxVmax/** Umax - Vmax */
            };

            /** the point sequence start direction */
            public: enum PointSequenceDirectionTypes
            {
                PointSequenceDirectionTypesU/** Order by U */,
                PointSequenceDirectionTypesV/** Order by V */
            };

            /** the scan curve mode */
            public: enum ScanCurveModeTypes
            {
                ScanCurveModeTypesExistingCurve/** Use existing curve */,
                ScanCurveModeTypesAutoCurve/** Autogenerate curves */,
                ScanCurveModeTypesOffsetCurve/** Offset curve */
            };

            private: InspectionMethodBuilderImpl * m_inspectionmethodbuilder_impl;
            private: friend class  _InspectionMethodBuilderBuilder;
            protected: InspectionMethodBuilder();
            public: ~InspectionMethodBuilder();
            /**Returns  the method feature type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::MethodTypes MethodType
            (
            );
            /**Sets  the method feature type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMethodType
            (
                NXOpen::CAM::InspectionMethodBuilder::MethodTypes type /** type */ 
            );
            /**Returns  the number of path points  <br> License requirements : None */
            public: int PointCount
            (
            );
            /**Sets  the number of path points  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointCount
            (
                int pointCount /** pointcount */ 
            );
            /**Returns  the number of points in U direction  <br> License requirements : None */
            public: int UCount
            (
            );
            /**Sets  the number of points in U direction  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUCount
            (
                int uCount /** ucount */ 
            );
            /**Returns  the number of points in V direction  <br> License requirements : None */
            public: int VCount
            (
            );
            /**Sets  the number of points in V direction  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVCount
            (
                int vCount /** vcount */ 
            );
            /**Returns  the U start parameter  <br> License requirements : None */
            public: double UStart
            (
            );
            /**Sets  the U start parameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStart
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end parameter  <br> License requirements : None */
            public: double UEnd
            (
            );
            /**Sets  the U end parameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEnd
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start parameter  <br> License requirements : None */
            public: double VStart
            (
            );
            /**Sets  the V start parameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStart
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end parameter  <br> License requirements : None */
            public: double VEnd
            (
            );
            /**Sets  the V end parameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEnd
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start distance  <br> License requirements : None */
            public: double UStartDist
            (
            );
            /**Sets  the U start distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartDist
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end distance  <br> License requirements : None */
            public: double UEndDist
            (
            );
            /**Sets  the U end distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndDist
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start distance  <br> License requirements : None */
            public: double VStartDist
            (
            );
            /**Sets  the V start distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartDist
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end distance  <br> License requirements : None */
            public: double VEndDist
            (
            );
            /**Sets  the V end distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndDist
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start degrees  <br> License requirements : None */
            public: double UStartDeg
            (
            );
            /**Sets  the U start degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartDeg
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U end degrees  <br> License requirements : None */
            public: double UEndDeg
            (
            );
            /**Sets  the U end degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndDeg
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start degrees  <br> License requirements : None */
            public: double VStartDeg
            (
            );
            /**Sets  the V start degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartDeg
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V end degrees  <br> License requirements : None */
            public: double VEndDeg
            (
            );
            /**Sets  the V end degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndDeg
            (
                double vEnd /** vend */ 
            );
            /**Returns  the U start sweep degrees  <br> License requirements : None */
            public: double UStartSweep
            (
            );
            /**Sets  the U start sweep degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartSweep
            (
                double uStart /** ustart */ 
            );
            /**Returns  the U sweep degrees  <br> License requirements : None */
            public: double UEndSweep
            (
            );
            /**Sets  the U sweep degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndSweep
            (
                double uEnd /** uend */ 
            );
            /**Returns  the V start sweep degrees  <br> License requirements : None */
            public: double VStartSweep
            (
            );
            /**Sets  the V start sweep degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartSweep
            (
                double vStart /** vstart */ 
            );
            /**Returns  the V sweep degrees  <br> License requirements : None */
            public: double VEndSweep
            (
            );
            /**Sets  the V sweep degrees  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndSweep
            (
                double vEnd /** vend */ 
            );
            /**Returns  the start U mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes UStartMode
            (
            );
            /**Sets  the start U mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUStartMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end U mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes UEndMode
            (
            );
            /**Sets  the end U mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUEndMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the start V mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes VStartMode
            (
            );
            /**Sets  the start V mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVStartMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the end V mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::UVModeTypes VEndMode
            (
            );
            /**Sets  the end V mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVEndMode
            (
                NXOpen::CAM::InspectionMethodBuilder::UVModeTypes uvMode /** uvmode */ 
            );
            /**Returns  the approach distance  <br> License requirements : None */
            public: double ApproachDistance
            (
            );
            /**Sets  the approach distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the retract distance  <br> License requirements : None */
            public: double RetractDistance
            (
            );
            /**Sets  the retract distance  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRetractDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the default inspection mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::InspectionModes InspectionMode
            (
            );
            /**Sets  the default inspection mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInspectionMode
            (
                NXOpen::CAM::InspectionMethodBuilder::InspectionModes inspectionMode /** inspectionmode */ 
            );
            /**Returns  the default inspection operation type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::OperationTypes DefaultOperationType
            (
            );
            /**Sets  the default inspection operation type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDefaultOperationType
            (
                NXOpen::CAM::InspectionMethodBuilder::OperationTypes operationType /** operationtype */ 
            );
            /**Returns  the type of entry transition  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::TransitionTypes EntryTransition
            (
            );
            /**Sets  the type of entry transition  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryTransition
            (
                NXOpen::CAM::InspectionMethodBuilder::TransitionTypes entryTransition /** entrytransition */ 
            );
            /**Returns  a flag to indicate if an entry point is required  <br> License requirements : None */
            public: bool EntryPoint
            (
            );
            /**Sets  a flag to indicate if an entry point is required  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryPoint
            (
                bool entryPoint /** entrypoint */ 
            );
            /**Returns  a flag to indicate if collision avoidance is required at entry  <br> License requirements : None */
            public: bool EntryAvoidance
            (
            );
            /**Sets  a flag to indicate if collision avoidance is required at entry  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryAvoidance
            (
                bool entryAvoidance /** entryavoidance */ 
            );
            /**Returns  the distance from the entry or exit point to safe plane  <br> License requirements : None */
            public: double EntryExitDistance
            (
            );
            /**Sets  the distance from the entry or exit point to safe plane  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEntryExitDistance
            (
                double entryExitDistance /** entryexitdistance */ 
            );
            /**Returns  a flag to indicate if collision avoidance is required at exit  <br> License requirements : None */
            public: bool ExitAvoidance
            (
            );
            /**Sets  a flag to indicate if collision avoidance is required at exit  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitAvoidance
            (
                bool exitAvoidance /** exitavoidance */ 
            );
            /**Returns  a flag to indicate if an exit point is required  <br> License requirements : None */
            public: bool ExitPoint
            (
            );
            /**Sets  a flag to indicate if an exit point is required  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitPoint
            (
                bool exitPoint /** exitpoint */ 
            );
            /**Returns  the type of exit transition  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::TransitionTypes ExitTransition
            (
            );
            /**Sets  the type of exit transition  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExitTransition
            (
                NXOpen::CAM::InspectionMethodBuilder::TransitionTypes exitTransition /** exittransition */ 
            );
            /**Returns  the default animation speed setting  <br> License requirements : None */
            public: int Speed
            (
            );
            /**Sets  the default animation speed setting  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSpeed
            (
                int speed /** speed */ 
            );
            /**Returns  the color used for displaying transition elements  <br> License requirements : None */
            public: NXOpen::NXColor * ColorTransition
            (
            );
            /**Sets  the color used for displaying transition elements  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorTransition
            (
                NXOpen::NXColor * colorTransition /** colortransition */ 
            );
            /**Returns  the color used for displaying approach elements  <br> License requirements : None */
            public: NXOpen::NXColor * ColorApproach
            (
            );
            /**Sets  the color used for displaying approach elements  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorApproach
            (
                NXOpen::NXColor * colorApproach /** colorapproach */ 
            );
            /**Returns  the color used for displaying retract elements  <br> License requirements : None */
            public: NXOpen::NXColor * ColorRetract
            (
            );
            /**Sets  the color used for displaying retract elements  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorRetract
            (
                NXOpen::NXColor * colorRetract /** colorretract */ 
            );
            /**Returns  the color used for displaying entry and exit elements  <br> License requirements : None */
            public: NXOpen::NXColor * ColorEntryExit
            (
            );
            /**Sets  the color used for displaying entry and exit elements  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorEntryExit
            (
                NXOpen::NXColor * colorEntryExit /** colorentryexit */ 
            );
            /**Returns  the color used for displaying measured points  <br> License requirements : None */
            public: NXOpen::NXColor * ColorMeasurePoint
            (
            );
            /**Sets  the color used for displaying measured points  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorMeasurePoint
            (
                NXOpen::NXColor * colorMeasurePoint /** colormeasurepoint */ 
            );
            /**Returns  the color used for displaying path lines  <br> License requirements : None */
            public: NXOpen::NXColor * ColorLine
            (
            );
            /**Sets  the color used for displaying path lines  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetColorLine
            (
                NXOpen::NXColor * colorLine /** colorline */ 
            );
            /**Returns  a flag to indicate if manual point creation is allowed  <br> License requirements : None */
            public: bool ManualPoint
            (
            );
            /**Sets  a flag to indicate if manual point creation is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetManualPoint
            (
                bool manualPoint /** manualpoint */ 
            );
            /**Returns  a flag to indicate if rectangular UV grid is allowed  <br> License requirements : None */
            public: bool UVGrid
            (
            );
            /**Sets  a flag to indicate if rectangular UV grid is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUVGrid
            (
                bool uvGrid /** uvgrid */ 
            );
            /**Returns  a flag to indicate if point helix is allowed  <br> License requirements : None */
            public: bool PointHelix
            (
            );
            /**Sets  a flag to indicate if point helix is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointHelix
            (
                bool pointHelix /** pointhelix */ 
            );
            /**Returns  a flag to indicate if scan line is allowed  <br> License requirements : None */
            public: bool LineScan
            (
            );
            /**Sets  a flag to indicate if scan line is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineScan
            (
                bool lineScan /** linescan */ 
            );
            /**Returns  a flag to indicate if scan arc is allowed  <br> License requirements : None */
            public: bool CircularScan
            (
            );
            /**Sets  a flag to indicate if scan arc is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCircularScan
            (
                bool circularScan /** circularscan */ 
            );
            /**Returns  a flag to indicate if scan curve is allowed  <br> License requirements : None */
            public: bool CurveScan
            (
            );
            /**Sets  a flag to indicate if scan curve is allowed  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurveScan
            (
                bool curveScan /** curvescan */ 
            );
            /**Returns  the point sequence mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes PointSequenceMode
            (
            );
            /**Sets  the point sequence mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceMode
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceModeTypes ptSeqMode /** ptseqmode */ 
            );
            /**Returns  the point sequence start location  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes PointSequenceStart
            (
            );
            /**Sets  the point sequence start location  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceStart
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceStartTypes ptSeqStart /** ptseqstart */ 
            );
            /**Returns  the point sequence start direction  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes PointSequenceDirection
            (
            );
            /**Sets  the point sequence start direction  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointSequenceDirection
            (
                NXOpen::CAM::InspectionMethodBuilder::PointSequenceDirectionTypes ptSeqDir /** ptseqdir */ 
            );
            /**Returns  the scan curve mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes ScanCurveMode
            (
            );
            /**Sets  the scan curve mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScanCurveMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes mode /** mode */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
