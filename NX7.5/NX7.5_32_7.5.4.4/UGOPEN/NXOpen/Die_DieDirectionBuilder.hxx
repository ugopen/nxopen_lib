#ifndef NXOpen_DIE_DIEDIRECTIONBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIEDIRECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieDirectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieDirectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class DieDirectionBuilder;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectNXObject;
    namespace Die
    {
        class _DieDirectionBuilderBuilder;
        class DieDirectionBuilderImpl;
        /**
            Represents a @link Die::DieDirectionBuilder Die::DieDirectionBuilder@endlink . The Die 
            Direction is a helper to the main Die Design feature to gather the 
            vector for items such as Trim direction or Flange direction. Note that
            if a coordinate system is specified, then the direction will be -Z of
            that coordinate system.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateDieDirection Die::DieCollection::CreateDieDirection@endlink  <br> */
        class NXOPENCPPEXPORT  DieDirectionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the options available for defining the direction */
            public: enum DirectionType
            {
                DirectionTypeSelection/** Select a coordinate system (-Z) or plane for the direction. */,
                DirectionTypeCoordinateSystem/** Define a coordinate system (-Z) for the direction. */,
                DirectionTypeVector/** Define a vector for the direction. */
            };

            private: DieDirectionBuilderImpl * m_diedirectionbuilder_impl;
            private: friend class  _DieDirectionBuilderBuilder;
            protected: DieDirectionBuilder();
            public: ~DieDirectionBuilder();
            /**Returns  the type of input that defined the direction  <br> License requirements : None */
            public: NXOpen::Die::DieDirectionBuilder::DirectionType InputType
            (
            );
            /**Sets  the type of input that defined the direction  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetInputType
            (
                NXOpen::Die::DieDirectionBuilder::DirectionType inputType /** inputtype */ 
            );
            /**Returns  the selected direction  <br> License requirements : None */
            public: NXOpen::SelectNXObject * Direction
            (
            );
            /**Returns  the specified vector  <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the specified vector  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the coordinate system origin  <br> License requirements : None */
            public: NXOpen::Point3d CoordinateSystemOrigin
            (
            );
            /**Sets  the coordinate system origin  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemOrigin
            (
                const NXOpen::Point3d & coordinateSystemOrigin /** coordinatesystemorigin */ 
            );
            /**Returns  the coordinate system matrix  <br> License requirements : None */
            public: NXOpen::Matrix3x3 CoordinateSystemMatrix
            (
            );
            /**Sets  the coordinate system matrix  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemMatrix
            (
                const NXOpen::Matrix3x3 & coordinateSystemMatrix /** coordinatesystemmatrix */ 
            );
            /**Returns  the indication if the source's direction should be reversed. True indicates the source's direction should be reversed <br> License requirements : None */
            public: bool ReverseSourceDirection
            (
            );
            /**Sets  the indication if the source's direction should be reversed. True indicates the source's direction should be reversed <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReverseSourceDirection
            (
                bool reverseSourceDirection /** reversesourcedirection */ 
            );
            /**Returns  the type of source that defined the direction. Functions are obsolete, please use input_type. 
             @deprecated Deprecated in NX7.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.0.0") NXOpen::Die::DieDirectionBuilder::DirectionType SourceDataType
            (
            );
            /**Sets  the type of source that defined the direction. Functions are obsolete, please use input_type. 
             @deprecated Deprecated in NX7.0.0 <br> 
             <br> License requirements : ug_die_design ("Die Design") */
            public:  NX_DEPRECATED("Deprecated in NX7.0.0") void SetSourceDataType
            (
                NXOpen::Die::DieDirectionBuilder::DirectionType sourceDataType /** sourcedatatype */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
