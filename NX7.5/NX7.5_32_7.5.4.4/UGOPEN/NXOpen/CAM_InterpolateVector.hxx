#ifndef NXOpen_CAM_INTERPOLATEVECTOR_HXX_INCLUDED
#define NXOpen_CAM_INTERPOLATEVECTOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InterpolateVector.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ToolAxisInterpolate.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InterpolateVector;
    }
    namespace CAM
    {
        class ToolAxisInterpolate;
    }
    class Direction;
    class NXObject;
    class Point;
    namespace CAM
    {
        class _InterpolateVectorBuilder;
        class InterpolateVectorImpl;
        /** Represents builder of Interpolate Vector, one option of Tool Axis  */
        class NXOPENCPPEXPORT  InterpolateVector : public CAM::ToolAxisInterpolate
        {
            private: InterpolateVectorImpl * m_interpolatevector_impl;
            private: friend class  _InterpolateVectorBuilder;
            protected: InterpolateVector();
            public: ~InterpolateVector();
            /** Add a new item <br> License requirements : cam_base ("CAM BASE") */
            public: void Insert
            (
                int inputIndex /** the new created item index */,
                NXOpen::Point * point /** the point */,
                NXOpen::NXObject * view /** the view */,
                NXOpen::Direction * vector /** the vector */
            );
            /** Modify an existing item by index  <br> License requirements : cam_base ("CAM BASE") */
            public: void Modify
            (
                int index /** the index of modified item */,
                NXOpen::Point * point /** the point */,
                NXOpen::Direction * vector /** the vector */
            );
            /** Delete an existing item by index  <br> License requirements : cam_base ("CAM BASE") */
            public: void Erase
            (
                int index /** the index of deleted item */
            );
            /** Move up an item  <br> License requirements : None */
            public: void MoveUp
            (
                int index /** the index of item which should be moved up*/
            );
            /** Move down an item  <br> License requirements : None */
            public: void MoveDown
            (
                int index /** the index of item which should be moved down*/
            );
            /**Returns  the tilt angle  <br> License requirements : None */
            public: double TiltAngle
            (
            );
            /**Sets  the tilt angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTiltAngle
            (
                double tiltAngle /** the tilt angle value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
