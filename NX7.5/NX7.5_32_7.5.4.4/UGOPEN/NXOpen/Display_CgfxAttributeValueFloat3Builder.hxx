#ifndef NXOpen_DISPLAY_CGFXATTRIBUTEVALUEFLOAT3BUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_CGFXATTRIBUTEVALUEFLOAT3BUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_CgfxAttributeValueFloat3Builder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_CgfxAttributeValueFloat3Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class CgfxAttributeValueFloat3Builder;
    }
    class Builder;
    namespace Display
    {
        class _CgfxAttributeValueFloat3BuilderBuilder;
        class CgfxAttributeValueFloat3BuilderImpl;
        /** Represents a @link Display::CgfxAttributeValueFloat3Builder Display::CgfxAttributeValueFloat3Builder@endlink  builder  <br>  <br> */
        class NXOPENCPPEXPORT  CgfxAttributeValueFloat3Builder : public Builder
        {
            private: CgfxAttributeValueFloat3BuilderImpl * m_cgfxattributevaluefloat3builder_impl;
            private: friend class  _CgfxAttributeValueFloat3BuilderBuilder;
            protected: CgfxAttributeValueFloat3Builder();
            public: ~CgfxAttributeValueFloat3Builder();
            /** Gets the CgFX material attribute's array of 3 double values; these are float data types in a CgFX file  @return  array of 3 doubles  <br> License requirements : None */
            public: std::vector<double> GetFloat3Value
            (
            );
            /** Sets the CgFX material attribute's array of 3 double values; these are float data types in a CgFX file  <br> License requirements : None */
            public: void SetFloat3Value
            (
                const std::vector<double> & doubleTableValue /** array of 3 doubles */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
