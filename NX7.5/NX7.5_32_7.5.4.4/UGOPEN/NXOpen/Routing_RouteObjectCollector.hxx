#ifndef NXOpen_ROUTING_ROUTEOBJECTCOLLECTOR_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTEOBJECTCOLLECTOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteObjectCollector.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectNXObjectList;
    namespace Routing
    {
        class _RouteObjectCollectorBuilder;
        class RouteObjectCollectorImpl;
        /** Represents a @link Routing::RouteObjectCollector Routing::RouteObjectCollector@endlink  class
                to create objects for getting routing objects.
            */
        class NXOPENCPPEXPORT  RouteObjectCollector : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: RouteObjectCollectorImpl * m_routeobjectcollector_impl;
            private: friend class  _RouteObjectCollectorBuilder;
            protected: RouteObjectCollector();
            public: ~RouteObjectCollector();
            /**Returns  the selected routing object list  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObjectList * RoutingObjects
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
