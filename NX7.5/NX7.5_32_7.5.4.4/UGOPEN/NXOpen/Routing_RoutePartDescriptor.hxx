#ifndef NXOpen_ROUTING_ROUTEPARTDESCRIPTOR_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTEPARTDESCRIPTOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RoutePartDescriptor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class RoutePartDescriptor;
    }
    namespace Routing
    {
        class _RoutePartDescriptorBuilder;
        class RoutePartDescriptorImpl;
        /** Represents a part descriptor chrx.  <br> To create a new instance of this class, use @link Routing::RoutePartDescriptorCollection::CreatePartDescriptor Routing::RoutePartDescriptorCollection::CreatePartDescriptor@endlink  <br> */
        class NXOPENCPPEXPORT  RoutePartDescriptor : public TaggedObject
        {
            /** Descriptor Type for a @link RoutePartDescriptor RoutePartDescriptor@endlink . */
            public: enum SourceType
            {
                SourceTypeNull/** null */ ,
                SourceTypePartAttribute/** part attribute */ ,
                SourceTypeExpression/** expression */ ,
                SourceTypeDumbCopy/** dumb copy */ 
            };

            /** Charx Type for a @link RoutePartDescriptor RoutePartDescriptor@endlink . */
            public: enum CharxType
            {
                CharxTypeInt/** int */ ,
                CharxTypeReal/** real */ ,
                CharxTypeSting = 4/** sting */ ,
                CharxTypeAny = 6/** any */ ,
                CharxTypeRef = 10/** ref */ ,
                CharxTypeAnyRef = 12/** any ref */ 
            };

            private: RoutePartDescriptorImpl * m_routepartdescriptor_impl;
            private: friend class  _RoutePartDescriptorBuilder;
            protected: RoutePartDescriptor();
            public: ~RoutePartDescriptor();
            /**Returns  the descriptor type for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RoutePartDescriptor::SourceType DescriptorSourceType
            (
            );
            /**Sets  the descriptor type for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDescriptorSourceType
            (
                NXOpen::Routing::RoutePartDescriptor::SourceType type /** type */ 
            );
            /**Returns  the charx type for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RoutePartDescriptor::CharxType DescriptorCharxType
            (
            );
            /**Sets  the charx type for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDescriptorCharxType
            (
                NXOpen::Routing::RoutePartDescriptor::CharxType type /** type */ 
            );
            /**Returns  the title for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Title
            (
            );
            /**Sets  the title for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTitle
            (
                const NXString & title /** title */ 
            );
            /**Returns  the expression for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Expression
            (
            );
            /**Sets  the expression for the part descriptor used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetExpression
            (
                const NXString & expression /** expression */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
