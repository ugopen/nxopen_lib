#ifndef NXOpen_DRAWINGS_VIEWSCALEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSCALEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewScaleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewScaleBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewScaleBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewScaleBuilderBuilder;
        class ViewScaleBuilderImpl;
        /** Represents the View Scale (Drawings.ViewScaleBuilder)
            */
        class NXOPENCPPEXPORT  ViewScaleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** The view scale type */
            public: enum Type
            {
                TypeRatio/** determine scale from numerator / denominator */,
                TypeExpression/** determine scale from expression */
            };

            private: ViewScaleBuilderImpl * m_viewscalebuilder_impl;
            private: friend class  _ViewScaleBuilderBuilder;
            protected: ViewScaleBuilder();
            public: ~ViewScaleBuilder();
            /**Returns  the scale type  <br> License requirements : None */
            public: NXOpen::Drawings::ViewScaleBuilder::Type ScaleType
            (
            );
            /**Sets  the scale type  <br> License requirements : drafting ("DRAFTING") */
            public: void SetScaleType
            (
                NXOpen::Drawings::ViewScaleBuilder::Type type /** sets the scale type. */
            );
            /**Returns  the scale numerator  <br> License requirements : None */
            public: double Numerator
            (
            );
            /**Sets  the scale numerator  <br> License requirements : drafting ("DRAFTING") */
            public: void SetNumerator
            (
                double numerator /** sets the numerator for the view's scale */
            );
            /**Returns  the scale denominator  <br> License requirements : None */
            public: double Denominator
            (
            );
            /**Sets  the scale denominator  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDenominator
            (
                double denominator /** sets the denominator for the view's scale */
            );
            /**Returns  the scale expression  <br> License requirements : None */
            public: NXOpen::Expression * Expression
            (
            );
            /**Sets  the scale expression  <br> License requirements : drafting ("DRAFTING") */
            public: void SetExpression
            (
                NXOpen::Expression * expression /** sets the expression used to determine the view scale.  It will only be used if type is set to @link Drawings::ViewScaleBuilder::TypeExpression Drawings::ViewScaleBuilder::TypeExpression@endlink .*/
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
