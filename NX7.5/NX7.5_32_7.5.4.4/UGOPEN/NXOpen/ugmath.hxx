#ifndef NXOpen_UGMATH_HXX_INCLUDED
#define NXOpen_UGMATH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ugmath.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
     /** Represents three-dimensional cartesian coordinates for a point */

    struct  Point3d
    {
        public: /** x */ double X;
        public: /** y */ double Y;
        public: /** z */ double Z;
        public: Point3d() :
            X(),
            Y(),
            Z()
        {
        }
        /** Constructor for the Point3d struct. */ 
        public: Point3d(double xInitial /** x */ , 
                double yInitial /** y */ , 
                double zInitial /** z */ ) :
            X(xInitial),
            Y(yInitial),
            Z(zInitial)
        {
        }
    };

     /** Represents a three-dimensional vector */

    struct  Vector3d
    {
        public: /** x */ double X;
        public: /** y */ double Y;
        public: /** z */ double Z;
        public: Vector3d() :
            X(),
            Y(),
            Z()
        {
        }
        /** Constructor for the Vector3d struct. */ 
        public: Vector3d(double xInitial /** x */ , 
                double yInitial /** y */ , 
                double zInitial /** z */ ) :
            X(xInitial),
            Y(yInitial),
            Z(zInitial)
        {
        }
    };

     /** Represents a 3 x 3 matrix */

    struct  Matrix3x3
    {
        public: /** xx */ double Xx;
        public: /** xy */ double Xy;
        public: /** xz */ double Xz;
        public: /** yx */ double Yx;
        public: /** yy */ double Yy;
        public: /** yz */ double Yz;
        public: /** zx */ double Zx;
        public: /** zy */ double Zy;
        public: /** zz */ double Zz;
        public: Matrix3x3() :
            Xx(),
            Xy(),
            Xz(),
            Yx(),
            Yy(),
            Yz(),
            Zx(),
            Zy(),
            Zz()
        {
        }
        /** Constructor for the Matrix3x3 struct. */ 
        public: Matrix3x3(double xxInitial /** xx */ , 
                double xyInitial /** xy */ , 
                double xzInitial /** xz */ , 
                double yxInitial /** yx */ , 
                double yyInitial /** yy */ , 
                double yzInitial /** yz */ , 
                double zxInitial /** zx */ , 
                double zyInitial /** zy */ , 
                double zzInitial /** zz */ ) :
            Xx(xxInitial),
            Xy(xyInitial),
            Xz(xzInitial),
            Yx(yxInitial),
            Yy(yyInitial),
            Yz(yzInitial),
            Zx(zxInitial),
            Zy(zyInitial),
            Zz(zzInitial)
        {
        }
    };

     /** Represents two-dimensional cartesian coordinates for a point */

    struct  Point2d
    {
        public: /** x */ double X;
        public: /** y */ double Y;
        public: Point2d() :
            X(),
            Y()
        {
        }
        /** Constructor for the Point2d struct. */ 
        public: Point2d(double xInitial /** x */ , 
                double yInitial /** y */ ) :
            X(xInitial),
            Y(yInitial)
        {
        }
    };

}
#undef EXPORTLIBRARY
#endif
