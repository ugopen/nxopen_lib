#ifndef NXOpen_GEOMETRICUTILITIES_INTERACTIVESECTIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_INTERACTIVESECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_InteractiveSectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_InteractiveSectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_SectionPlaneData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class InteractiveSectionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class SectionPlaneData;
    }
    namespace GeometricUtilities
    {
        class _InteractiveSectionBuilderBuilder;
        class InteractiveSectionBuilderImpl;
        /** Represents a @link GeometricUtilities::InteractiveSectionBuilder GeometricUtilities::InteractiveSectionBuilder@endlink .
                The interactive section block uses 2 points to draw a line or a section.*/
        class NXOPENCPPEXPORT  InteractiveSectionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: InteractiveSectionBuilderImpl * m_interactivesectionbuilder_impl;
            private: friend class  _InteractiveSectionBuilderBuilder;
            protected: InteractiveSectionBuilder();
            public: ~InteractiveSectionBuilder();
            /** Appends a plane  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void AppendPlane
            (
                const NXOpen::Point3d & point1 /** Point 1 of the interactive line */,
                const NXOpen::Point3d & point2 /** Point 2 of the interactive line */,
                const NXOpen::Point3d & origin /** Origin of the plane */,
                const NXOpen::Vector3d & normal /** Normal of the plane */
            );
            /** Deletes last point or the plane created <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeleteLast
            (
            );
            /** Get the number of planes  @return  number of planes  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int GetNumPlanes
            (
            );
            /** Get the Nth plane  @return  plane found at index <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::SectionPlaneData * GetNthPlane
            (
                int index /** index of the plane */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
