#ifndef NXOpen_FEATURES_OFFSETSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OFFSETSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OffsetSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceSetOffset;
    }
    namespace GeometricUtilities
    {
        class FaceSetOffsetList;
    }
    class ObjectList;
    namespace Features
    {
        class _OffsetSurfaceBuilderBuilder;
        class OffsetSurfaceBuilderImpl;
        /** This class represents a offset surface builder, used for creating or editing an
               offset surface feature. The offset surface feature allows different face sets to
               be offset by different distances.
              <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateOffsetSurfaceBuilder Features::FeatureCollection::CreateOffsetSurfaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ApproxOption </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        OutputOption </td> <td> 
         
        OneFeatureForConnectedFaces </td> </tr> 

        <tr><td> 
         
        PartialOption </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        StepOption </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  OffsetSurfaceBuilder : public Features::FeatureBuilder
        {
            /** Represents the type of output option. The faces to be offset can be disconnected 
                   and also from multiple bodies. If either is the case, then multiple features are created.
                   For deciding whether there should be one feature for each topologically connected set of
                   faces or one feature for each face selected the enum below has been provided */
            public: enum OutputOptionType
            {
                OutputOptionTypeOneFeatureForConnectedFaces/** one feature for connected faces */ ,
                OutputOptionTypeOneFeatureForEachFace/** one feature for each face */ ,
                OutputOptionTypeOneFeatureForAllFaces/** one feature for all faces */ 
            };

            /** Represents the type of orientation method. This is applicable only if the output
                   output is @link Features::OffsetSurfaceBuilder::OutputOptionTypeOneFeatureForEachFace Features::OffsetSurfaceBuilder::OutputOptionTypeOneFeatureForEachFace@endlink . 
                   The first enum value implies that the offset direction will be that of the surface normal whereas the
                   second enum value implies that am interior position will be specified and the offset direction
                   will be away from this point */
            public: enum OrientationMethodType
            {
                OrientationMethodTypeUseExistingNormals/** use existing normals */ ,
                OrientationMethodTypeSpecifyInteriorPosition/** specify interior position */ 
            };

            private: OffsetSurfaceBuilderImpl * m_offsetsurfacebuilder_impl;
            private: friend class  _OffsetSurfaceBuilderBuilder;
            protected: OffsetSurfaceBuilder();
            public: ~OffsetSurfaceBuilder();
            /**Returns  the list of face sets. Each element defines a set of faces, and an offset distance applied to those faces.
                  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceSetOffsetList * FaceSets
            (
            );
            /**Sets  the offset surface output option based on the enum @link Features::OffsetSurfaceBuilder::OutputOptionType Features::OffsetSurfaceBuilder::OutputOptionType@endlink 
                  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOutputOption
            (
                NXOpen::Features::OffsetSurfaceBuilder::OutputOptionType outputOption /** Output option */
            );
            /**Returns  the offset surface output option based on the enum @link Features::OffsetSurfaceBuilder::OutputOptionType Features::OffsetSurfaceBuilder::OutputOptionType@endlink 
                  <br> License requirements : None */
            public: NXOpen::Features::OffsetSurfaceBuilder::OutputOptionType OutputOption
            (
            );
            /**Sets  the option to create approximate offset surface if the offset surface has 
                   self-intersections.
                  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApproxOption
            (
                bool approxOption /** Approximate offset option */
            );
            /**Returns  the option to create approximate offset surface if the offset surface has 
                   self-intersections.
                  <br> License requirements : None */
            public: bool ApproxOption
            (
            );
            /**Sets  the offset surface allow step boundaries option. If this option is true 
                   then side faces will be created along any smooth edge between a face 
                   which is offset and one which is not.
                  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStepOption
            (
                bool stepOption /** Allow step boundaries option */
            );
            /**Returns  the offset surface allow step boundaries option. If this option is true 
                   then side faces will be created along any smooth edge between a face 
                   which is offset and one which is not.
                  <br> License requirements : None */
            public: bool StepOption
            (
            );
            /**Returns  the offset surface tolerance
                 <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the offset surface tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** Tolerance */
            );
            /** Sets the orientation method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOrientationMethod
            (
                NXOpen::Features::OffsetSurfaceBuilder::OrientationMethodType orientationMethod /** Orientation method */
            );
            /** Returns the offset surface orientation method based on the @link Features::OffsetSurfaceBuilder::OutputOptionType Features::OffsetSurfaceBuilder::OutputOptionType@endlink 
                  @return  Orientation method  <br> License requirements : None */
            public: NXOpen::Features::OffsetSurfaceBuilder::OrientationMethodType GetOrientationMethod
            (
            );
            /** Sets the offset surface interior position for specify interior position method. This allows
                 *  the specified faces to be offset away from the interior position.
                  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInteriorPosition
            (
                const NXOpen::Point3d & point /** Interior position for specify interior position method */
            );
            /** Gets the offset surface interior position for specify interior position method. 
                  @return  Interior position for specify interior position method  <br> License requirements : None */
            public: NXOpen::Point3d GetInteriorPosition
            (
            );
            /** Gets the list of face sets. This list is a simple variable length array of any JA object.
                 *  This method is deprecated. Please use @link FaceSets FaceSets@endlink  instead.
                    
                  @return  Face set list
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") NXOpen::ObjectList * GetFaceSetList
            (
            );
            /** Gets the face sets. A face set is a combination of a face collector and an offset
                   distance.
                   This method is deprecated. Please use @link FaceSets FaceSets@endlink  instead.
                  @return  Face set list
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") std::vector<NXOpen::GeometricUtilities::FaceSetOffset *> GetFaceSets
            (
            );
            /** Deletes a face set at the specified index from the face set list
                   This method is deprecated. Please use @link FaceSets FaceSets@endlink  instead.
                 
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void DeleteFaceSet
            (
                int index /** Index of face set to be deleted */
            );
            /** Finds and returns a face set at the specified index from the face set list
                   This method is deprecated. Please use @link FaceSets FaceSets@endlink  instead.
                  @return  Face set returned
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") NXOpen::GeometricUtilities::FaceSetOffset * FindFaceSet
            (
                int index /** Index of face set to be returned */
            );
            /** Adds face sets to the face set list
                   This method is deprecated. Please use @link FaceSets FaceSets@endlink  instead.
                 
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void AddFaceSets
            (
                const std::vector<NXOpen::GeometricUtilities::FaceSetOffset *> & faceSets /** Face set list*/
            );
            /**Returns  the option to pursue a partial offset result
                 <br> License requirements : None */
            public: bool PartialOption
            (
            );
            /**Sets  the option to pursue a partial offset result
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPartialOption
            (
                bool partialOption /** partialoption */ 
            );
            /**Returns  the maximum excluded objects during partial offset. If the excluded objects reach this number, the partial offset will stop.
                  <br> License requirements : None */
            public: int MaximumExcludedObjects
            (
            );
            /**Sets  the maximum excluded objects during partial offset. If the excluded objects reach this number, the partial offset will stop.
                  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumExcludedObjects
            (
                int maximumExcludedObjects /** Maximum excluded objects */
            );
            /**Returns  the option to remove problem vertices
                 <br> License requirements : None */
            public: bool RemoveProblemVerticesOption
            (
            );
            /**Sets  the option to remove problem vertices
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRemoveProblemVerticesOption
            (
                bool removeProblemVerticesOption /** removeproblemverticesoption */ 
            );
            /**Returns  the radius for error vertex excision during partial offset
                 <br> License requirements : None */
            public: NXOpen::Expression * Radius
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
