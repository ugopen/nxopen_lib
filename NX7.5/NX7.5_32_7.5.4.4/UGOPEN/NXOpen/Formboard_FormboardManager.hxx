#ifndef NXOpen_FORMBOARD_FORMBOARDMANAGER_HXX_INCLUDED
#define NXOpen_FORMBOARD_FORMBOARDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_FormboardManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Formboard
    {
        class FormboardManager;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Formboard
    {
        class FaceAnnotationBuilder;
    }
    namespace Formboard
    {
        class FlipComponentBuilder;
    }
    namespace Formboard
    {
        class FormboardLayoutBuilder;
    }
    namespace Formboard
    {
        class ObjectAttributeReferenceBuilder;
    }
    namespace Formboard
    {
        class OrientBranchBuilder;
    }
    namespace Formboard
    {
        class PathLengthAnnotationBuilder;
    }
    namespace Formboard
    {
        class ShapeSegmentBuilder;
    }
    namespace Formboard
    {
        class UpdateFormboardBuilder;
    }
    class NXObject;
    class Part;
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Formboard
    {
        class FormboardManagerImpl;
        /**  Contains information about flattened harness drawing and drafting data for
                 harness manufacturing drawings (Formboard Drawings).  
              <br> To obtain an instance of this class, refer to @link Routing::RouteManager Routing::RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT  FormboardManager
        {
            private: FormboardManagerImpl * m_formboardmanager_impl;
            private: NXOpen::Routing::RouteManager* m_owner;
            /** Constructor */
            public: explicit FormboardManager(NXOpen::Routing::RouteManager *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FormboardManager();
            /** Returns whether or not the part containing this @link Formboard::FormboardManager Formboard::FormboardManager@endlink  is
                      actually a Formboard Drawing part file.   @return  whether or not the part is a formboard.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: bool IsFormboard
            (
            );
            /** Examines the input list of harnesses and stores information from the harnesses into the part containing
                     this @link Formboard::FormboardManager Formboard::FormboardManager@endlink .   The harnesses must from a sub-component of
                     this part.  The harnesses must form a fully-connected set of geometry.   This method does not actually
                     flatten or copy the harness geometry.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void StoreHarnessesToFlatten
            (
                const std::vector<NXOpen::Routing::Electrical::HarnessDevice *> & harnesses /** Harnesses to flatten into this part. */
            );
            /** Sets the input part as the part containing the potential harnesses to flatten.  
                       This method will add the input part as a new component of this assembly if there
                       is not already an instance of the input part in the work part assembly.  This
                       method is only necessary if the reference between the formboard and it's parent
                       3D harness assembly has been removed.  
                      
                       Passing in NULL for the harness part will sever the link between
                       the formboard and it's current 3D harness part file.
                        <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void AddPartAs3dHarness
            (
                NXOpen::Part * harnessPart /** Part containing the harnesses to flatten into this part. */
            );
            /** Creates a @link Formboard::FormboardLayoutBuilder Formboard::FormboardLayoutBuilder@endlink  that can flatten and layout
                        new formboard geometry, or modify the layout of existing formboard geometry.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::FormboardLayoutBuilder * CreateLayoutBuilder
            (
            );
            /** Creates a @link Formboard::OrientBranchBuilder Formboard::OrientBranchBuilder@endlink  object for rotating
                        branches in formboard about Z axis.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::OrientBranchBuilder * CreateOrientBranchBuilder
            (
            );
            /** Creates a @link Formboard::FlipComponentBuilder Formboard::FlipComponentBuilder@endlink  object for
                        flipping of formboard component about an axis orthogonal to Z axis to ensure that
                        after flipping component lies in XY plane.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::FlipComponentBuilder * CreateFlipComponentBuilder
            (
            );
            /** Creates a @link Formboard::ShapeSegmentBuilder Formboard::ShapeSegmentBuilder@endlink  that can shape formboard segments.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::ShapeSegmentBuilder * CreateShapeSegmentBuilder
            (
                NXOpen::Routing::ISegment * segment /** The routing segment to shape. */
            );
            /** Creates a @link Formboard::FaceAnnotationBuilder Formboard::FaceAnnotationBuilder@endlink  object for importing
                        CGM or Pattern file geometry and placing it on a drawing sheet or model view.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::FaceAnnotationBuilder * CreateFaceAnnotationBuilder
            (
            );
            /** Creates a @link Formboard::ObjectAttributeReferenceBuilder Formboard::ObjectAttributeReferenceBuilder@endlink  that creates a tabular note
                        object which reads values from the single object selected by the user. It also creates leader for the
                        annotation associated with the object selected by user.
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::ObjectAttributeReferenceBuilder * CreateObjectAttributeReferenceBuilder
            (
            );
            /** Creates a @link Formboard::PathLengthAnnotationBuilder Formboard::PathLengthAnnotationBuilder@endlink   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::PathLengthAnnotationBuilder * CreatePathLengthAnnotationBuilder
            (
                NXOpen::Annotations::Annotation * annotation /** The Formboard Path Length annotation. */
            );
            /** Creates a @link Formboard::UpdateFormboardBuilder Formboard::UpdateFormboardBuilder@endlink  that compares and
                        updates formboard geometry to match a modified master 3D harness.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Formboard::UpdateFormboardBuilder * CreateUpdateFormboardBuilder
            (
            );
            /** Gets @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  which are associated to the formboard plane. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void GetFmbdPlaneConstraints
            (
                NXOpen::NXObject * fmbdPlane /** fmbdplane */ ,
                std::vector<NXOpen::Positioning::ComponentConstraint *> & constraints /** constraints */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
