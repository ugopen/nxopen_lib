#ifndef NXOpen_ROUTING_STOCK_HXX_INCLUDED
#define NXOpen_ROUTING_STOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Stock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class Stock;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    namespace Features
    {
        class Feature;
    }
    class INXObject;
    class NXObject;
    namespace Routing
    {
        class Anchor;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class CrossSection;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        class StockPort;
    }
    namespace Routing
    {
        /** Describes whether the stock profile is located at the first segment in the
                path or the last segment.  */
        enum ProfileFrom
        {
            ProfileFromStart/**  Profile is at the start of the first segment. */,
            ProfileFromEnd/**  Profile is at the end of the last segment. */
        };

        /** Describes whether the stock profile is flipped, see the user help documenation on Orient Stock.  */
        enum Flip
        {
            FlipNotFlipped/**  Profile is not flipped. */,
            FlipFlipped/**  Profile is flipped. */
        };

        /** Describes how the stock is used. */
        enum StockUse
        {
            StockUseLegacyStock/** Normal Legacy Stock. */,
            StockUseBundled/** Legacy Stock that was generated by the bundling algorithm */,
            StockUseStockAsComponent/** Stock as Component stock in the work part. */,
            StockUseStockInComponent/** Stock as Component stock in the component part. User
                                                                        should not modify this stock.  */,
            StockUseDeformed/** Stock has been deformed using the "Deform Component"
                                                                        functionality.  User should not modify this stock. */
        };

        /** Describes whether or not a component associated with a Stock as Compoents Stock has
                been renamed by the user with a permanent name using the @link Routing::Stock::RenameComponent Routing::Stock::RenameComponent@endlink 
                method. */
        enum ComponentName
        {
            ComponentNameTemporary/** Component name is temporary, it has not been renamed. */,
            ComponentNamePermanent/** Component has been renamed by the user. */
        };

    }
    namespace Routing
    {
        class _StockBuilder;
        class StockImpl;
        /**
                
                    The @link Routing::Stock Routing::Stock@endlink  object represents a material (such as as pipe or tube)
                    that covers a path of segments.  The material is defined in the @link Routing::StockData Routing::StockData@endlink 
                    object.  @link Routing::Stock Routing::Stock@endlink  consists of a @link Routing::StockData Routing::StockData@endlink 
                    object, as well as references to at most one of the @link Routing::CrossSection Routing::CrossSection@endlink  and
                    @link Routing::Anchor Routing::Anchor@endlink  objects that are associated with that 
                    @link Routing::StockData Routing::StockData@endlink .   
                
                 <br> 
                    A @link Routing::Stock Routing::Stock@endlink  object may exist in one of two modes ; Legacy Stock or 
                    Stock as Components Stock.  Legacy Stock is modeled as a sweep feature in the work part.  Stock
                    as Components Stock is modeled as a child component (of the work part) that contains a sweep 
                    feature.  Legacy Stock and Stock as Components stock cannot exist in the same part file with
                    the exception of Bundled stock.
                 <br> 
                    Stock as Components Stock creates a component file, and creates a copy of itself inside of
                    that part file.  Segments, anchors, and all other necessary information are copied into 
                    the component part file.  The stock inside of the component file should not be edited or
                    modified as it is completely controlled by the Stock as Component Stock in the work part.
                 <br> 
                 <br> 
                    @link Routing::Stock Routing::Stock@endlink  object that have automatically been generated by the bundling
                    algorithm used for routing wires are Bundled stock.  Bundled stocks are always created as
                    Legacy Stocks (even in parts containing Stock as Component stocks).  Any @link Routing::StockData
                     Routing::StockData
                    @endlink  object that defines a bundled stock has a type of @link Routing::StockDataTypeBundled
                     Routing::StockDataTypeBundled
                    @endlink .  Editing the segments or the stock data of a Bundled stock may result in undefined
                    behavior.
                 <br> 
                    With the exception of stock style, there are no functional differences between the two 
                    stock types.  Stock as Components Stock always uses the @link Routing::StockStyleDetailed Routing::StockStyleDetailed@endlink 
                    style (if availble, otherwise it uses the @link Routing::StockStyleDetailed Routing::StockStyleDetailed@endlink  style) and
                    the stocks style cannot be changed.
                 <br> 
              <br> Creator not available in KF because transient objects are not supported. <br> */
        class NXOPENCPPEXPORT  Stock : public NXObject, public virtual Routing::ICharacteristic
        {
            private: StockImpl * m_stock_impl;
            private: friend class  _StockBuilder;
            protected: Stock();
            public: ~Stock();
            /** Gets the @link Routing::StockData Routing::StockData@endlink .   @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockData * GetStockData
            (
            );
            /** Sets the @link Routing::StockData Routing::StockData@endlink . After setting the StockData, the
                        caller must also make sure to set the CrossSection and Anchor so that the @link Routing::Stock Routing::Stock@endlink 
                        object only references objects associated with this @link Routing::StockData Routing::StockData@endlink  object. <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetStockData
            (
                NXOpen::Routing::StockData * stockData /** stock data */ 
            );
            /** Gets the @link Routing::CrossSection Routing::CrossSection@endlink  that currently defines the profile for the stock.   @return  Returns NULL if this object is using stock style @link 
                                                         Routing::StockStyleNone 
                                                         Routing::StockStyleNone@endlink   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::CrossSection * GetCrossSection
            (
            );
            /** Sets the @link Routing::CrossSection Routing::CrossSection@endlink . The given object must be one of the 
                        @link Routing::CrossSection Routing::CrossSection@endlink  objects referenced by the @link Routing::StockData Routing::StockData@endlink  
                        object that defines this @link Routing::Stock Routing::Stock@endlink  object.  @link Routing::Stock::SetStockStyle
                         Routing::Stock::SetStockStyle
                        @endlink  should be used (when possible) instead of this routine.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetCrossSection
            (
                NXOpen::Routing::CrossSection * crossSection /** Must be referenced by the @link Routing::StockData Routing::StockData@endlink 
                                                                associated with this @link Routing::Stock Routing::Stock@endlink  object. */
            );
            /** Gets the @link Routing::Anchor Routing::Anchor@endlink  that currently modifies the profile for the stock.   @return  Returns NULL if this object isn't using an @link Routing::Anchor
                                                   Routing::Anchor
                                                  @endlink   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::Anchor * GetAnchor
            (
            );
            /** Sets the @link Routing::Anchor Routing::Anchor@endlink . The given object must be one of the 
                        @link Routing::Anchor Routing::Anchor@endlink  objects referenced by the @link Routing::StockData Routing::StockData@endlink  
                        object that defines this @link Routing::Stock Routing::Stock@endlink  object.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAnchor
            (
                NXOpen::Routing::Anchor * anchor /** Must be referenced by the @link Routing::StockData Routing::StockData@endlink 
                                                          associated with this @link Routing::Stock Routing::Stock@endlink  object. */
            );
            /** Gets the @link Routing::StockStyle Routing::StockStyle@endlink  of the @link Routing::Stock Routing::Stock@endlink .  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockStyle GetStockStyle
            (
            );
            /** Sets the @link Routing::StockStyle Routing::StockStyle@endlink  of the @link Routing::Stock Routing::Stock@endlink . This may
                        cause update to fire, and can be a time-consuming operation as it may require the building of a 
                        new sweep feature.  When style is set to @link Routing::StockStyleNone Routing::StockStyleNone@endlink  this routine
                        deletes the stock sweep feature.  Only call on Legacy Stocks.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetStockStyle
            (
                NXOpen::Routing::StockStyle style /** style */ 
            );
            /** Gets the segments that the @link Routing::Stock Routing::Stock@endlink  object is placed on top of.  @return    <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Curve *> GetSegments
            (
            );
            /** Adds new segments to this object.  If the new segments (added to the old segments) do not form 
                       a single continuous path, the @link Routing::Stock Routing::Stock@endlink  will split so that there is a 
                       copy of this object on each continuous path formed by the input segments.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void AddSegments
            (
                const std::vector<NXOpen::Curve *> & segments /**  List of segments to add.  Ignores any segments that
                                                                  are already referenced by this object. */
            );
            /** Removes segments from this object.  If the segments of this object (after removing the input
                       segments) do not form a single continuous path, the @link Routing::Stock Routing::Stock@endlink  will split so 
                       that there is a copy of this object on each continuous path.   This object will delete itself inside of
                       update if all segments are removed.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void RemoveSegments
            (
                const std::vector<NXOpen::Curve *> & segments /**  List of segments to remove.  Ignores any segments that
                                                                  are not already referenced by this object. */
            );
            /** Gets the rotation angle applied to the profile.   @return  The angle in radians.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: double GetRotationAngle
            (
            );
            /** Sets the rotation angle applied to the profile.  See the user help documentation on 
                        Orient Stock for more information.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetRotationAngle
            (
                double rotationAngle /** The angle in radians. Valid values are 0.0 to ( 2 * Pi ). */
            );
            /** Gets the twist angle applied to the profile.   @return  The angle in radians.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: double GetTwistAngle
            (
            );
            /** Sets the twist angle applied to the profile.  See the user help documentation on 
                        Orient Stock for more information.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetTwistAngle
            (
                double twistAngle /** The angle in radians. Valid values are 0.0 to ( 2 * Pi ). */
            );
            /** Gets the end that defines profile.   @return    <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::ProfileFrom GetProfileEnd
            (
            );
            /** Sets the end that defines profile.  See the user help documentation on 
                        Orient Stock for more information. <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetProfileEnd
            (
                NXOpen::Routing::ProfileFrom profileEnd /** profile end */ 
            );
            /** Gets whether or not the profile is flipped.  @return    <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::Flip GetFlippedStatus
            (
            );
            /** Sets whether or not the profile is flipped. See the user help documentation on 
                        Orient Stock for more information. <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetFlippedStatus
            (
                NXOpen::Routing::Flip flipped /** flipped */ 
            );
            /** Returns the @link Routing::StockPort Routing::StockPort@endlink  at each end of the stock.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void GetPorts
            (
                NXOpen::Routing::StockPort ** startPort /** Port at the start of the first segment. */,
                NXOpen::Routing::StockPort ** endPort /** Port at the end of the last segment. */
            );
            /** Returns the use of the stock.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockUse GetStockUse
            (
            );
            /** Returns the sweep features that are created and controlled by this object.  For
                      Stock as Components stock, the features exist in a seperate part file.  For Legacy Stock
                      the features exist in the same part as the input object.   @return  Sweep features.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Returns the @link Assemblies::Component Assemblies::Component@endlink  created and controlled by the stock for a
                       Stock as Components stock.  Only returns a component if the stock type is
                       @link Routing::StockUseStockAsComponent Routing::StockUseStockAsComponent@endlink .  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Assemblies::Component * GetComponent
            (
            );
            /** Renames the component associated with a Stock as Components Stock.  Executes the STOCK_COMPONENT_NAME 
                        plugin to determine the new name of the component.  Only call on Stock as Components Stock.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void RenameComponent
            (
            );
            /** Returns whether or not the component associated with a Stock as Components Stock has a 
                        permanent or temporary name.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::ComponentName GetNameStatus
            (
            );
            /** Returns the original length for a stock that has been deformed (it's use is 
                      @link Routing::StockUseDeformed Routing::StockUseDeformed@endlink ).  This is the length of the original stock
                      in the component part at the time that the deformed stock was created.  @return  The original length in units of the original part file.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: double GetOriginalLength
            (
            );
            /** Colors the solid bodies of the stock based on the COLOR characteristic specified in the 
                        @link Routing::StockData Routing::StockData@endlink  of the stock.  The color string can contain 
                        the name of a color, a hex string specifying the RGB values, a comma separated list of RGB integer values and
                        a simple integer specifying the color index directly.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void ColorBodies
            (
            );
            /** Set the characteristics of the given stock's
                        component so that it has the same characteristics as the @link Routing::Stock Routing::Stock@endlink  and its stock data.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SyncComponentAttrs
            (
                bool isNewPart /** Is the part new? */
            );
            /**Returns  the negate offsets flag of this @link Routing::Stock Routing::Stock@endlink .  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: bool NegateOffsetsFlag
            (
            );
            /**Sets  the negate offsets flag of this @link Routing::Stock Routing::Stock@endlink .  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetNegateOffsetsFlag
            (
                bool offsetFlag /** offset flag */ 
            );
            /** Makes the stock "featurable" by generating a sweep feature over every segment of the stock, 
                        with a boolean feature uniting all of the sweeps to form a single body.  
                        Features can then be applied to each individual sweep by suppressing the unite features.  
                        This will help features to survive stock splitting and merging as this ensures that no sweep feature is deleted during a merge.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void EnableFeatures
            (
            );
            /** Align stock to new rotation vector.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void AlignStock
            (
                const NXOpen::Vector3d & vector /** Rotation vector. */
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
