#ifndef NXOpen_FIELDS_FIELDEVALUATOR_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDEVALUATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldEvaluator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_FieldEvaluator.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class FieldEvaluator;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class _FieldEvaluatorBuilder;
        class FieldEvaluatorImpl;
        /**  @brief  Represents a Field Evaluator which can be used to evaluate a @link Fields::Field Fields::Field@endlink . 
                          Use @link Fields::Field::GetFieldEvaluator Fields::Field::GetFieldEvaluator@endlink  to obtain a 
                          @link Fields::FieldEvaluator Fields::FieldEvaluator@endlink  object.      
                 

           <br> This is an abstract class <br> */
        class NXOPENCPPEXPORT  FieldEvaluator : public TaggedObject
        {
            /**  Interpolation type */
            public: enum InterpolationEnum
            {
                InterpolationEnumNone/** No interpolation method; table can only be used as a lookup */,
                InterpolationEnumLinear1d/** Standard linear interpolation between bounding points */,
                InterpolationEnumNearestNeighbor1d/** Locates the nearest point and returns its value */,
                InterpolationEnumInverseDistanceWeighting1d/** Sum of the weighted value of all points, based on the inverse of the distance */,
                InterpolationEnumDelaunay2dFast/** Triangulates the independent values and uses the bounding triangle, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay2dMedium/** Triangulates the independent values and uses the bounding triangle, compromise between accuracy and speed */,
                InterpolationEnumDelaunay2dAccurate/** Triangulates the independent values and uses the bounding triangle, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor2d/** Locates the nearest point in a plane and returns its value */,
                InterpolationEnumRenkaShepard2d/** Refined inverse distance weighting in 2D space */,
                InterpolationEnumInverseDistanceWeighting2d/** Sum of the weighted value of all points in 2D space, based on the inverse of the distance */,
                InterpolationEnumDelaunay3dFast/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay3dMedium/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, compromise between accuracy and speed */,
                InterpolationEnumDelaunay3dAccurate/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor3d/** Locates the nearest point in space and returns its value */,
                InterpolationEnumRenkaShepard3d/** Refined inverse distance weighting in 3D space */,
                InterpolationEnumInverseDistanceWeighting3d/** Sum of the weighted value of all points in 3D space, based on the inverse of the distance */,
                InterpolationEnumNearestNeighborNd/** Locates the nearest point in N dimensional space and returns its value */,
                InterpolationEnumRenkaShepardNd/** Refined inverse distance weighting in N dimensional space */,
                InterpolationEnumInverseDistanceWeightingNd/** Sum of the weighted value of all points in N dimensional, based on the inverse of the distance */
            };

            private: FieldEvaluatorImpl * m_fieldevaluator_impl;
            private: friend class  _FieldEvaluatorBuilder;
            protected: FieldEvaluator();
            public: ~FieldEvaluator();
            /** Returns the dependent variables for this @link Fields::FieldEvaluator Fields::FieldEvaluator@endlink   
                     @return  dependent variables for this @link Fields::FieldEvaluator Fields::FieldEvaluator@endlink    <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetDependentVariables
            (
            );
            /** Returns the independent variables for this @link Fields::FieldEvaluator Fields::FieldEvaluator@endlink   
                     @return  independent variables for this @link Fields::FieldEvaluator Fields::FieldEvaluator@endlink    <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetIndependentVariables
            (
            );
            /** Sets values at which the Field will be evaluated for this independent variable @link Fields::FieldVariable Fields::FieldVariable@endlink . 
                        The number of input values mush be the same for independent variables and these values are assumed to be in the same units as the 
                        independent variable @link Fields::FieldVariable Fields::FieldVariable@endlink .   
                     <br> License requirements : None */
            public: void SetIndependentVariableValues
            (
                NXOpen::Fields::FieldVariable * independentVariable /** independent variable whose values are being set. */,
                const std::vector<double> & values /** the values for this independent variable where the field will be evaluated at. */
            );
            /** Evaluate the Field at the specified independent variable @link Fields::FieldVariable Fields::FieldVariable@endlink  values and return the values for the specified dependent variable. 
                        The number of output values will be the same as number of independent variables specified and these values will be in the same units as the 
                        dependent variable @link Fields::FieldVariable Fields::FieldVariable@endlink .   
                     @return  the values evaluated for this dependent variable  <br> License requirements : None */
            public: std::vector<double> Evaluate
            (
                NXOpen::Fields::FieldVariable * dependentVariable /** dependent variable whose values are to be evaluated */
            );
            /**Returns   
                    the interpolation method used when this table data is evaluated.
                     <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator::InterpolationEnum InterpolationMethod
            (
            );
            /**Sets   
                    the interpolation method used when this table data is evaluated.
                     <br> License requirements : None */
            public: void SetInterpolationMethod
            (
                NXOpen::Fields::FieldEvaluator::InterpolationEnum interpolationMethod /** the interpolation method  */
            );
            /** Delete this field evaluator; destroys the field evaluator and removes all references to it.
                     <br> License requirements : None */
            public: void Delete
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
