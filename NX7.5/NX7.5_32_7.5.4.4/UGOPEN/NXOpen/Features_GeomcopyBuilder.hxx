#ifndef NXOpen_FEATURES_GEOMCOPYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_GEOMCOPYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_GeomcopyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_GeomcopyBuilder.hxx>
#include <NXOpen/GeometricUtilities_BetweenLocationsData.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class GeomcopyBuilder;
    }
    class Axis;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BetweenLocationsData;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Plane;
    class Section;
    class SelectObjectList;
    namespace Features
    {
        class _GeomcopyBuilderBuilder;
        class GeomcopyBuilderImpl;
        /**
            Represents a @link Features::Geomcopy Features::Geomcopy@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateGeomcopyBuilder Features::FeatureCollection::CreateGeomcopyBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        CsysMirrorOption </td> <td> 
         
        MirrorYAndZ </td> </tr> 

        <tr><td> 
         
        FillPathLength </td> <td> 
         
        FillPathLength </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  GeomcopyBuilder : public Features::FeatureBuilder
        {
            /** user input transform types. */
            public: enum TransformTypes
            {
                TransformTypesBetweenLocations/** between two point or csys locations */,
                TransformTypesMirror/** mirror about a plane */,
                TransformTypesTranslation/** translation along a direction */,
                TransformTypesRotation/** rotation about an axis */,
                TransformTypesAlongCurve/** along a path */,
                TransformTypesOffset/** offset */
            };

            /** along path distance options */
            public: enum AlongPathDistanceOptions
            {
                AlongPathDistanceOptionsFillPathLength/** fill path length option */,
                AlongPathDistanceOptionsArcLength/** arc length option */
            };

            /** CSYS mirror options */
            public: enum CsysMirrorOptions
            {
                CsysMirrorOptionsMirrorXAndY/** Mirror X and Y and derive Z*/,
                CsysMirrorOptionsMirrorYAndZ/** Mirror Y and Z and derive X*/,
                CsysMirrorOptionsMirrorZAndX/** Mirror X and Z and derive Y*/
            };

            private: GeomcopyBuilderImpl * m_geomcopybuilder_impl;
            private: friend class  _GeomcopyBuilderBuilder;
            protected: GeomcopyBuilder();
            public: ~GeomcopyBuilder();
            /**Returns  the transformation type of instancing, such as Between Locations, or Mirror.  <br> License requirements : None */
            public: NXOpen::Features::GeomcopyBuilder::TransformTypes Type
            (
            );
            /**Sets  the transformation type of instancing, such as Between Locations, or Mirror.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::GeomcopyBuilder::TransformTypes transformType /** transform type */ 
            );
            /**Returns  the selected object list of geometry to instance.  <br> License requirements : None */
            public: NXOpen::SelectObjectList * GeometryToInstance
            (
            );
            /**Returns  the between locations data for between locations type of the transformation.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BetweenLocationsData * BetweenLocations
            (
            );
            /**Returns  the translation vector for translation type of instancing.  <br> License requirements : None */
            public: NXOpen::Direction * TranslationVector
            (
            );
            /**Sets  the translation vector for translation type of instancing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTranslationVector
            (
                NXOpen::Direction * translationVector /** translationvector */ 
            );
            /**Returns  the mirror plane for mirror type of instancing.  <br> License requirements : None */
            public: NXOpen::Plane * MirrorPlane
            (
            );
            /**Sets  the mirror plane for mirror type of instancing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMirrorPlane
            (
                NXOpen::Plane * mirrorPlane /** mirrorplane */ 
            );
            /**Returns  the rotation axis for rotation type of instancing.  <br> License requirements : None */
            public: NXOpen::Axis * RotationAxis
            (
            );
            /**Sets  the rotation axis for rotation type of instancing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAxis
            (
                NXOpen::Axis * rotationAxis /** rotationaxis */ 
            );
            /**Returns  the section path for along path type of instancing.  <br> License requirements : None */
            public: NXOpen::Section * Path
            (
            );
            /**Sets  the section path for along path type of instancing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPath
            (
                NXOpen::Section * path /** path */ 
            );
            /**Returns  the distance dimension used for translation type of instancing.  <br> License requirements : None */
            public: NXOpen::Expression * TranslateDistance
            (
            );
            /**Returns  the distance dimension used for rotation type of instancing.  <br> License requirements : None */
            public: NXOpen::Expression * RotateDistance
            (
            );
            /**Returns  the onpath distance dimension used for along path type of instancing.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * OnPathDistance
            (
            );
            /**Returns  the angle dimension used for rotation type of instancing.  <br> License requirements : None */
            public: NXOpen::Expression * RotateAngle
            (
            );
            /**Returns  the angle dimension used for along path type of instancing.  <br> License requirements : None */
            public: NXOpen::Expression * AlongPathAngle
            (
            );
            /**Returns  the number of copies to make for the geometry to instance.  <br> License requirements : None */
            public: NXOpen::Expression * NumberOfCopies
            (
            );
            /**Returns  the fill path length, a distance option for along path type of instancing.  <br> License requirements : None */
            public: NXOpen::Features::GeomcopyBuilder::AlongPathDistanceOptions FillPathLength
            (
            );
            /**Sets  the fill path length, a distance option for along path type of instancing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFillPathLength
            (
                NXOpen::Features::GeomcopyBuilder::AlongPathDistanceOptions fillPathLength /** fillpathlength */ 
            );
            /**Returns  the associative, a logical flag to indicate if the copies are associative.  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative, a logical flag to indicate if the copies are associative.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the hide original  <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the hide original  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the Alternate Datum CSYS mirror method option  <br> License requirements : None */
            public: NXOpen::Features::GeomcopyBuilder::CsysMirrorOptions CsysMirrorOption
            (
            );
            /**Sets  the Alternate Datum CSYS mirror method option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCsysMirrorOption
            (
                NXOpen::Features::GeomcopyBuilder::CsysMirrorOptions csysMirrorOption /** csysmirroroption */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
