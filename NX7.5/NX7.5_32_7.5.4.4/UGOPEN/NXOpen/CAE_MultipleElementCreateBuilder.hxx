#ifndef NXOpen_CAE_MULTIPLEELEMENTCREATEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MULTIPLEELEMENTCREATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MultipleElementCreateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_MultipleElementCreateBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class MultipleElementCreateBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class _MultipleElementCreateBuilderBuilder;
        class MultipleElementCreateBuilderImpl;
        /**
            Represents a @link CAE::MultipleElementCreateBuilder CAE::MultipleElementCreateBuilder@endlink  which can be used to create 
            mutiple elements in one efficient opertation.
             <br> 
            The general procedure for creating elements is to:
            <ol>
            <li>Define the type of elements to be create through the @link CAE::ElementTypeBuilder CAE::ElementTypeBuilder@endlink  and the 
            properties of @link CAE::ElementTypeBuilder::ElementTypeName CAE::ElementTypeBuilder::ElementTypeName @endlink and @link CAE::ElementTypeBuilder::SetElementTypeName CAE::ElementTypeBuilder::SetElementTypeName @endlink   </li>
            <li>Optionally define elements labeling requirements through 
            @link CAE::MultipleElementCreateBuilder::StartLabel CAE::MultipleElementCreateBuilder::StartLabel @endlink and @link CAE::MultipleElementCreateBuilder::SetStartLabel CAE::MultipleElementCreateBuilder::SetStartLabel @endlink  and 
            @link CAE::MultipleElementCreateBuilder::LabelIncrement CAE::MultipleElementCreateBuilder::LabelIncrement @endlink and @link CAE::MultipleElementCreateBuilder::SetLabelIncrement CAE::MultipleElementCreateBuilder::SetLabelIncrement @endlink   </li>    
            <li>Define elements through   @link CAE::MultipleElementCreateBuilder::AddElement CAE::MultipleElementCreateBuilder::AddElement@endlink     </li>
            <li>Create Mesh and elements through @link Builder::Commit Builder::Commit@endlink  or
            @link CAE::MultipleElementCreateBuilder::CommitElements CAE::MultipleElementCreateBuilder::CommitElements@endlink .  Commiting the builder removes 
            the current element defintions so that it can be reused to create more elements.</li>
            </ol>
            The 
             <br> 
            <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateMultipleElementCreateBuilder CAE::NodeElementManager::CreateMultipleElementCreateBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  MultipleElementCreateBuilder : public Builder
        {
            private: MultipleElementCreateBuilderImpl * m_multipleelementcreatebuilder_impl;
            private: friend class  _MultipleElementCreateBuilderBuilder;
            protected: MultipleElementCreateBuilder();
            public: ~MultipleElementCreateBuilder();
            /**Returns  the starting label used to assign element labels, if no explicit labels were defined. If no start 
                        label is specified, the next available element for this part.  <br> License requirements : None */
            public: int StartLabel
            (
            );
            /**Sets  the starting label used to assign element labels, if no explicit labels were defined. If no start 
                        label is specified, the next available element for this part.  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetStartLabel
            (
                int label /** label */ 
            );
            /**Returns  the label increment used when calculating next element label when assigning element labels  <br> License requirements : None */
            public: int LabelIncrement
            (
            );
            /**Sets  the label increment used when calculating next element label when assigning element labels  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the element type builder. Through the @link CAE::ElementTypeBuilder CAE::ElementTypeBuilder@endlink  you can 
                        specify both the type of element to create as well as the destination 
                        @link CAE::MeshCollector CAE::MeshCollector@endlink  the new elements will be placed in.    <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /** Adds new element definition defined by the list of input @link CAE::FENode CAE::FENode@endlink  
                        objects.  New element will be created only after 
                        @link CAE::MultipleElementCreateBuilder::CommitElements CAE::MultipleElementCreateBuilder::CommitElements@endlink   
                        is done. Since element labels weren't specified, the builder 
                        will assign them automatically based on the setting of 
                        @link CAE::MultipleElementCreateBuilder::StartLabel CAE::MultipleElementCreateBuilder::StartLabel @endlink and @link CAE::MultipleElementCreateBuilder::SetStartLabel CAE::MultipleElementCreateBuilder::SetStartLabel @endlink  
                        and  @link CAE::MultipleElementCreateBuilder::LabelIncrement CAE::MultipleElementCreateBuilder::LabelIncrement @endlink and @link CAE::MultipleElementCreateBuilder::SetLabelIncrement CAE::MultipleElementCreateBuilder::SetLabelIncrement @endlink  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AddElement
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** input list of nodes  */
            );
            /** Adds new element definition defined by the list of input @link CAE::FENode CAE::FENode@endlink  
                        objects.  New element will be created only after 
                        @link CAE::MultipleElementCreateBuilder::CommitElements CAE::MultipleElementCreateBuilder::CommitElements@endlink   
                        is done.  
                        <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AddElement
            (
                const std::vector<NXOpen::CAE::FENode *> & nodes /** input list of nodes,  The number 
                                                                                               of nodes and the order of the nodes 
                                                                                               must be consistent with the 
                                                                                               defined element type.  */,
                int label /** new FEElement label. If the specified label is 
                                                                                less than or equal to 0 then the builder will 
                                                                                automatically assign a valid label based on the 
                                                                                builders labeling rules. 
                                                                                If a label is specified it must be unique in this part. */
            );
            /** Commits the Builder, which creates elements as they were defined and returns the newly create elements.
                        The method @link Builder::Commit Builder::Commit@endlink  will also do the same thing
                        except instead of returning elements, it will return the newly created @link CAE::Mesh CAE::Mesh@endlink  which
                        contains the new elements.
                        @link Builder::GetCommittedObjects Builder::GetCommittedObjects@endlink 
                        can't be used to return elements since they are not of type @link  NXObject  NXObject@endlink .  It will however 
                        return the newly created @link CAE::Mesh CAE::Mesh@endlink 
                      @return  new FEElements positions  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::FEElement *> CommitElements
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
