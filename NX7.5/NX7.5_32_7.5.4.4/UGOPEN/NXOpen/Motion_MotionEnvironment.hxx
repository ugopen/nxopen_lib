#ifndef NXOpen_MOTION_MOTIONENVIRONMENT_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONENVIRONMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionEnvironment.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class MotionEnvironment;
    }
    namespace Motion
    {
        class MotionSession;
    }
    namespace Motion
    {
        class MotionEnvironmentImpl;
        /** Represents a Motion Environment  <br> To obtain an instance of this class, refer to @link Motion::MotionSession Motion::MotionSession@endlink  <br> */
        class NXOPENCPPEXPORT  MotionEnvironment
        {
            /** Represents analysis type of current mechanisms */
            public: enum Analysis
            {
                AnalysisNoType/** No analysis type*/,
                AnalysisKinematics/** Kinematics analysis type */,
                AnalysisDynamics/** Dynamics analysis type*/
            };

            private: MotionEnvironmentImpl * m_motionenvironment_impl;
            private: NXOpen::Motion::MotionSession* m_owner;
            /** Constructor */
            public: explicit MotionEnvironment(NXOpen::Motion::MotionSession *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~MotionEnvironment();
            /** Sets the the analysis type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnalysisType
            (
                NXOpen::Motion::MotionEnvironment::Analysis analysisType /** The analysis type */
            );
            /** Checks the motor license  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CheckMotorLicense
            (
                bool checkMotorLicense /** Checks out or checks in motor license */
            );
            /** Checks the co-simulation license  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CheckCosimLicense
            (
                bool checkCosimLicense /** Checks out or checks in co-simulation license */
            );
            /** Checks the flexible body dynamic license  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CheckFlexbodyLicense
            (
                bool checkFlexbodyLicense /** Checks out or checks in flexible body dynamic license */
            );
            /** Sets component based mechanisim  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetComponentBasedMechanism
            (
                bool componentBasedMech /** Sets component based mechanism */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
