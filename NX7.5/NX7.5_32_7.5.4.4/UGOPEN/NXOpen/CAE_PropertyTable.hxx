#ifndef NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
#define NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PropertyTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BeamSectionOffsetOptions.hxx>
#include <NXOpen/CAE_BeamSectionOptions.hxx>
#include <NXOpen/CAE_BeamSectionOrientationOptions.hxx>
#include <NXOpen/CAE_MaterialOptions.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ScalarMatrixValue.hxx>
#include <NXOpen/ScalarTableValue.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class PropertyTable;
    }
    class Axis;
    namespace CAE
    {
        class BeamSectionOffsetOptions;
    }
    namespace CAE
    {
        class BeamSectionOptions;
    }
    namespace CAE
    {
        class BeamSectionOrientationOptions;
    }
    namespace CAE
    {
        class MaterialOptions;
    }
    namespace CAE
    {
        class NamedPropertyTable;
    }
    namespace CAE
    {
        class SetManager;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class FieldWrapper;
    }
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    namespace Fields
    {
        class VectorFieldWrapper;
    }
    class NXObject;
    class PhysicalMaterial;
    class Point;
    class ScalarMatrixValue;
    class ScalarTableValue;
    class Unit;
    namespace CAE
    {
        class _PropertyTableBuilder;
        class PropertyTableImpl;
        /**  @brief  Represents a property table  

           <br> This is a sub object <br> */
        class NXOPENCPPEXPORT  PropertyTable : public NXObject
        {
            /** Property Types */
            public: enum PropertyType
            {
                PropertyTypeUnknown/** unknown */ ,
                PropertyTypeString/** string */ ,
                PropertyTypeText/** text */ ,
                PropertyTypeBoolean/** boolean */ ,
                PropertyTypeInteger/** integer */ ,
                PropertyTypeDouble/** double */ ,
                PropertyTypeFieldExpression/** field expression */ ,
                PropertyTypeFieldWrapper/** field wrapper */ ,
                PropertyTypeScalarFieldWrapper/** scalar field wrapper */ ,
                PropertyTypeVectorFieldWrapper/** vector field wrapper */ ,
                PropertyTypeVector/** vector */ ,
                PropertyTypeCoordinateSystem/** coordinate system */ ,
                PropertyTypeReference/** reference */ ,
                PropertyTypePoint/** point */ ,
                PropertyTypeDoubleArray/** double array */ ,
                PropertyTypeDateTime/** date time */ ,
                PropertyTypeNamedPropertyTableArray/** named property table array */ ,
                PropertyTypeIntegerArray/** integer array */ ,
                PropertyTypeSetManager/** set manager */ ,
                PropertyTypeNamedPropertyTable/** named property table */ ,
                PropertyTypeAxis/** axis */ ,
                PropertyTypePhysicalMaterial/** physical material */ ,
                PropertyTypeCaeSection/** cae section */ ,
                PropertyTypeMatrix/** matrix */ ,
                PropertyTypeScalarTable/** scalar table */ ,
                PropertyTypeSectionOrientation/** section orientation */ ,
                PropertyTypeSectionOffset/** section offset */ 
            };

            private: PropertyTableImpl * m_propertytable_impl;
            private: friend class  _PropertyTableBuilder;
            protected: PropertyTable();
            public: ~PropertyTable();
            /**The count of properties in the table  @return  count of properties  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetPropertyCount
            (
            );
            /** Returns the name of the property  @return  name of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetPropertyNameByIndex
            (
                int index /** index of the property */
            );
            /** Returns the type of the property  @return  type of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable::PropertyType GetPropertyType
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the string value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetStringPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the string value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStringPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & propertyValue /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the text value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetTextPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the text value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTextPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & propertyValue /** value of the property */
            );
            /** Returns the boolean value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GetBooleanPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the boolean value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBooleanPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool propertyValue /** value of the property */
            );
            /** Returns the integer value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the integer value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int propertyValue /** value of the property */
            );
            /** Returns the double value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetDoublePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the double value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDoublePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double propertyValue /** value of the property */
            );
            /** Returns the double value of the property with units
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double* propertyValue /** The current double value of the Scalar */,
                NXOpen::Unit ** unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a constant double value with units.
                        Use @link CAE::PropertyTable::SetScalarPropertyValue CAE::PropertyTable::SetScalarPropertyValue@endlink  to enable
                        Design Logic for this property.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double propertyValue /** The double value for the Scalar */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Sets the the Scalar property as a string value with units.
                        When the string does not represent a constant number, then an expression is created.
                        Once a property has an expression, subsequent set commands will retain the expression
                        and edit the new string into it.
                        The string must not be empty. To set this property to empty, use @link CAE::PropertyTable::SetTablePropertyWithoutValue CAE::PropertyTable::SetTablePropertyWithoutValue@endlink .
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarWithDataPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & propertyValue /** The string value for the Scalar   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** Unit type for the Scalar NULL if the Scalar has no units */
            );
            /** Returns the expression @link Expression Expression@endlink  value of the property
                        Use @link CAE::PropertyTable::SetScalarWithDataPropertyValue CAE::PropertyTable::SetScalarWithDataPropertyValue@endlink 
                        for a constant value when an expression @link Expression Expression@endlink  is not needed.
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * GetScalarPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the expression @link Expression Expression@endlink  value of the property
                        Use @link CAE::PropertyTable::SetScalarWithDataPropertyValue CAE::PropertyTable::SetScalarWithDataPropertyValue@endlink 
                        for a constant value when an expression @link Expression Expression@endlink  is not needed.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Expression * propertyValue /** value of the property */
            );
            /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::FieldExpression * GetScalarFieldPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarFieldPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldExpression * propertyValue /** value of the property */
            );
            /** Returns the direction @link Direction Direction@endlink  value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Direction * GetVectorPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the direction @link Direction Direction@endlink  value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetVectorPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Returns the coordinate system @link CoordinateSystem CoordinateSystem@endlink  
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CoordinateSystem * GetCoordinateSystemPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the coordinate system @link CoordinateSystem CoordinateSystem@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinateSystemPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CoordinateSystem * propertyValue /** value of the property */
            );
            /** Returns the referenced object value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::NXObject * GetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject * propertyValue /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::CAEVertex CAE::CAEVertex@endlink 
                                                                                            @link CAE::CAEEdge CAE::CAEEdge@endlink 
                                                                                            @link CAE::CAEFace CAE::CAEFace@endlink 
                                                                                            @link CAE::CAEBody CAE::CAEBody@endlink 
                                                                                          */
            );
            /** Returns the point value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point * GetPointPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the point value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPointPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Returns the scalar array and unit value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetScalarArrayWithUnitsPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<double> & propertyValue /** array of values of the property */,
                NXOpen::Unit ** unitType /** Unit type for the Array NULL if the Array has no units */
            );
            /** Sets the scalar array and unit value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarArrayWithUnitsPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & propertyValue /** value of the property */,
                NXOpen::Unit * unitType /** Unit type for the Array */
            );
            /** Returns the scalar array value of the property.
                        Use @link CAE::PropertyTable::GetScalarArrayWithUnitsPropertyValue CAE::PropertyTable::GetScalarArrayWithUnitsPropertyValue@endlink 
                        when other than base units are set.
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<double> GetScalarArrayPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the scalar array value of the property.
                        Use @link CAE::PropertyTable::SetScalarArrayWithUnitsPropertyValue CAE::PropertyTable::SetScalarArrayWithUnitsPropertyValue@endlink 
                        when other than base units are set.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarArrayPropertyValue
            (
                const NXString & propertyName /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & propertyValue /** value of the property */
            );
            /** Returns the date time value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetDateTimePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* propertyYear /** year of the property */,
                int* propertyMonth /** month of the property */,
                int* propertyDay /** day of the property */,
                int* propertyHour /** hour of the property */,
                int* propertyMin /** minute of the property */,
                int* propertySecond /** second of the property */,
                int* propertyMsec /** milisecond of the property */
            );
            /** Returns the date time value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDateTimePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int propertyYear /** year of the property */,
                int propertyMonth /** month of the property */,
                int propertyDay /** day of the property */,
                int propertyHour /** hour of the property */,
                int propertyMin /** minute of the property */,
                int propertySecond /** second of the property */,
                int propertyMsec /** milisecond of the property */
            );
            /** Returns the referenced array object value of the property
                      @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::NamedPropertyTable *> GetNamedPropertyTableArrayPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object array value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNamedPropertyTableArrayPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::NamedPropertyTable *> & propertyValue /** property value */ 
            );
            /** Returns the integer array value of the property
                      @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<int> GetIntegerArrayPropertyValue
            (
                const NXString & propertyName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the integer array value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntegerArrayPropertyValue
            (
                const NXString & propertyName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & propertyValue /** property value */ 
            );
            /** Returns the referenced SetManager value of the property
                      @return  Value of Set Manager Reference  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SetManager * GetSetManagerPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the referenced referenced named property table object value of the property
                      @return  Value of Named Proeprty Table Reference  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::NamedPropertyTable * GetNamedPropertyTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced named property table object value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNamedPropertyTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::NamedPropertyTable * namedPropertyTable /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::PhysicalPropertyTable CAE::PhysicalPropertyTable@endlink  
                                                                                            @link CAE::Laminate CAE::Laminate@endlink 
                                                                                          */
            );
            /** Returns the axis @link Axis Axis@endlink 
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Axis * GetAxisPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the axis @link Axis Axis@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAxisPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Axis * propertyValue /** value of the property */
            );
            /** Returns the  material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      @return  material options  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::MaterialOptions * GetPhysicalMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhysicalMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::MaterialOptions * materialOptions /** material options */
            );
            /** Sets the material value
                      <br> License requirements : None */
            public: void SetMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool materialInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
                NXOpen::PhysicalMaterial * material /** the material value to assign */
            );
            /** Returns the  beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      @return  material options  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BeamSectionOptions * GetCaeSectionPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCaeSectionPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOptions * beamSectionOptions /** material options */
            );
            /** Returns the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink  
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::FieldWrapper * GetFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the field wrapper @link Fields::FieldWrapper Fields::FieldWrapper@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldWrapper * propertyValue /** value of the property */
            );
            /** Returns the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink  
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::ScalarFieldWrapper * GetScalarFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the scalar field wrapper @link Fields::ScalarFieldWrapper Fields::ScalarFieldWrapper@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::ScalarFieldWrapper * propertyValue /** value of the property */
            );
            /** Returns the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink  
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::VectorFieldWrapper * GetVectorFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the vector field wrapper @link Fields::VectorFieldWrapper Fields::VectorFieldWrapper@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetVectorFieldWrapperPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::VectorFieldWrapper * propertyValue /** value of the property */
            );
            /** Returns a matrix cell value from the matrix value of the property
                      @return  NxM Scalar matrix  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::ScalarMatrixValue * GetMatrixPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set a matrix cell value from the matrix value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMatrixPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::ScalarMatrixValue * matrix /** NxM Scalar matrix */
            );
            /** Returns a scalar table value value from the scalar table value of the property
                      @return  NxM Scalar table  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::ScalarTableValue * GetScalarTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set a scalar table value from the scalar table value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarTablePropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::ScalarTableValue * table /** NxM Scalar table */
            );
            /** Returns the  beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                      @return  section orientation options  <br> License requirements : None */
            public: NXOpen::CAE::BeamSectionOrientationOptions * GetSectionOrientationPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section orientation options @link CAE::BeamSectionOrientationOptions CAE::BeamSectionOrientationOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectionOrientationPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOrientationOptions * beamSectionOptions /** section orientation options */
            );
            /** Returns the  beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                      @return  section offset options  <br> License requirements : None */
            public: NXOpen::CAE::BeamSectionOffsetOptions * GetSectionOffsetPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section offset options @link CAE::BeamSectionOffsetOptions CAE::BeamSectionOffsetOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectionOffsetPropertyValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOffsetOptions * beamSectionOptions /** section offset options */
            );
            /** Unset a property. Cause a property to be output to the solver as a blank so that the solver uses its default value 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTablePropertyWithoutValue
            (
                const NXString & propertyName /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
