#ifndef NXOpen_CAM_INSPECTIONCURVEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCURVEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCurveFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionCurveFeatureBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionCurveFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionCurveFeatureBuilderBuilder;
        class InspectionCurveFeatureBuilderImpl;
        /** Represents a CMM Inspection Curve Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCurveFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionCurveFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionCurveFeatureBuilder : public CAM::OperationBuilder
        {
            private: InspectionCurveFeatureBuilderImpl * m_inspectioncurvefeaturebuilder_impl;
            private: friend class  _InspectionCurveFeatureBuilderBuilder;
            protected: InspectionCurveFeatureBuilder();
            public: ~InspectionCurveFeatureBuilder();
            /**Returns  the selected curves  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedCurves
            (
            );
            /**Returns  the underlying surfaces selector.   <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedSurfaces
            (
            );
            /**Returns  the approach direction  <br> License requirements : None */
            public: NXOpen::Direction * ApproachDirection
            (
            );
            /**Sets  the approach direction  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDirection
            (
                NXOpen::Direction * approachDirection /** approachdirection */ 
            );
            /**Returns  the name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
