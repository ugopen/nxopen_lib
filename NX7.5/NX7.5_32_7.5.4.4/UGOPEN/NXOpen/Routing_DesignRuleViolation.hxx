#ifndef NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleViolation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleViolation;
    }
    class NXObject;
    namespace Routing
    {
        class DesignRuleOverride;
    }
    namespace Routing
    {
        class DesignRuleViolationLocation;
    }
    namespace Routing
    {
        class _DesignRuleViolationBuilder;
        class DesignRuleViolationImpl;
        /** Represents @link Routing::DesignRuleViolation Routing::DesignRuleViolation@endlink  object  <br> Design Rule Violation object is created automatically during design rule check <br> */
        class NXOPENCPPEXPORT  DesignRuleViolation : public NXObject
        {
            /** Design Rule Violation Location Object Blank Option */
            public: enum BlankOption
            {
                BlankOptionBlank/** blank */ ,
                BlankOptionUnblank/** unblank */ 
            };

            private: DesignRuleViolationImpl * m_designruleviolation_impl;
            private: friend class  _DesignRuleViolationBuilder;
            protected: DesignRuleViolation();
            public: ~DesignRuleViolation();
            /**Returns  the short description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString ShortDescription
            (
            );
            /**Sets  the short description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetShortDescription
            (
                const NXString & shortDescription /** short description */ 
            );
            /**Returns  the long description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString LongDescription
            (
            );
            /**Sets  the long description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLongDescription
            (
                const NXString & longDescription /** long description */ 
            );
            /** Get the array of objects in violation  @return  Caller frees the array  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetObjects
            (
            );
            /** Sets the array of objects in violation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** Caller frees the array */
            );
            /** Add an object in violation to the violation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AddObjects
            (
                const std::vector<NXOpen::Routing::DesignRuleViolation *> & objects /** objects */ 
            );
            /**Returns  the override object for the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::DesignRuleOverride * Override
            (
            );
            /**Sets  the override object for the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetOverride
            (
                NXOpen::Routing::DesignRuleOverride * overrideTag /** overridetag */ 
            );
            /**Returns  the date/time stamp of the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int TimeStamp
            (
            );
            /**Sets  the date/time stamp of the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTimeStamp
            (
                int timeStamp /** time stamp */ 
            );
            /** Sets the violation override  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetViolationOverride
            (
                const NXString & user /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & reason /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int timestamp /** timestamp */ 
            );
            /** Removes violation override from given violation object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void RemoveViolationOverride
            (
            );
            /** Violation is overridden or not is inquired  @return    <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool IsRuleOverridden
            (
            );
            /** Override object will be deleted  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteRuleOverride
            (
                NXOpen::Routing::DesignRuleOverride * deleteObject /** deleteobject */ 
            );
            /**  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLocations
            (
                const std::vector<NXOpen::Routing::DesignRuleViolationLocation *> & violationLocations /** violationlocations */ 
            );
            /** This will give all violation location objects stored in calling violation object.  @return  Array of @link Routing::DesignRuleViolationLocation Routing::DesignRuleViolationLocation@endlink  object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::DesignRuleViolationLocation *> GetLocations
            (
            );
            /** This will add given number of violation location objects.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AddViolationLocations
            (
                const std::vector<NXOpen::Routing::DesignRuleViolationLocation *> & locationObjects /** Array of violation locations to be added. */
            );
            /** This function will blank location objects of given violation.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void BlankLocationObjectsOfViolation
            (
                NXOpen::Routing::DesignRuleViolation::BlankOption blankOption /** blank option */ 
            );
            /** This will return violation location object stored at given postion of array.
                        If there is no object at the given position, it will give appropriate message.
                        and return NULL  @return  ViolationLocation object at given array position.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::DesignRuleViolationLocation * GetViolationLocation
            (
                int* arrayPosition /** array position */ 
            );
            /** This will set violation location object at given postion of array.
                        If there is already an object at the given position, it will delete that
                        object and set with new one.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetViolationLocation
            (
                int arrayPosition /** array position */ ,
                NXOpen::Routing::DesignRuleViolationLocation * locationObject /** ViolationLocation object to be set at given array position. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
