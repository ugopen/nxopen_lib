#ifndef NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CONICCROSSSECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ConicCrossSection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ConicCrossSection;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class _ConicCrossSectionBuilder;
        class ConicCrossSectionImpl;
        /** Represents a conic section data for face blend. 
            */
        class NXOPENCPPEXPORT  ConicCrossSection : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the offset options */
            public: enum OffsetMethod
            {
                OffsetMethodConstant/** Constant */,
                OffsetMethodLaw/** Control by law */
            };

            /** This enum represents the rho options */
            public: enum RhoMethod
            {
                RhoMethodConstant/** Constant */,
                RhoMethodLaw/** Control by law */,
                RhoMethodAutoEllipse/** Automatic Ellipse */
            };

            private: ConicCrossSectionImpl * m_coniccrosssection_impl;
            private: friend class  _ConicCrossSectionBuilder;
            protected: ConicCrossSection();
            public: ~ConicCrossSection();
            /**Returns  the first offset for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * FirstOffset
            (
            );
            /** Sets the first offset for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the second offset for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * SecondOffset
            (
            );
            /** Sets the second offset for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffset
            (
                const NXString & offset /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the first offset option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod FirstOffsetOption
            (
            );
            /**Sets  the first offset option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** method */ 
            );
            /**Returns  the second offset option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod SecondOffsetOption
            (
            );
            /**Sets  the second offset option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffsetOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::OffsetMethod method /** method */ 
            );
            /**Returns  the rho expression for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
            /** Sets a rho expression for the conic section with face blend.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRho
            (
                const NXString & rho /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the rho option for the conic section with face blend
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod RhoOption
            (
            );
            /**Sets  the rho option for the conic section with face blend
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRhoOption
            (
                NXOpen::GeometricUtilities::ConicCrossSection::RhoMethod method /** method */ 
            );
            /**Returns  the First Offset Law builder  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * FirstLawControl
            (
            );
            /**Returns  the Second Offset Law builder  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * SecondLawControl
            (
            );
            /**Returns  the Rho Law builder  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RhoLawControl
            (
            );
            /** Sets a constant radius for the first law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantFirstOffset
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a start radius for the first law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlFirstOffsetStartRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a end radius for the first law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlFirstOffsetEndRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a constant radius for the second law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantSecondOffset
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a start radius for the second law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlSecondOffsetStartRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a end radius for the second law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlSecondOffsetEndRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a constant radius for the rho law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlConstantRho
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a start radius for the rho law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlRhoStartRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets a end radius for the rho law control of the conic section with face blend.
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawControlRhoEndRadius
            (
                const NXString & radius /** The value to be set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
