#ifndef NXOpen_VALIDATE_VALIDATOR_HXX_INCLUDED
#define NXOpen_VALIDATE_VALIDATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_Validator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validate_CheckerNode.hxx>
#include <NXOpen/Validate_PartNode.hxx>
#include <NXOpen/Validation.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Validate
    {
        class Validator;
    }
    class Part;
    namespace Validate
    {
        class CheckerNode;
    }
    namespace Validate
    {
        class PartNode;
    }
    namespace Validate
    {
        class ValidatorOptions;
    }
    namespace Validate
    {
        class _ValidatorBuilder;
        class ValidatorImpl;
        /**Represents a NX @link Validate::Validator Validate::Validator@endlink .
             <br> To create a new instance of this class, use @link Validate::ValidationManager::CreateValidator Validate::ValidationManager::CreateValidator@endlink  <br> */
        class NXOPENCPPEXPORT  Validator : public TaggedObject
        {
            private: ValidatorImpl * m_validator_impl;
            private: friend class  _ValidatorBuilder;
            protected: Validator();
            public: ~Validator();
            /** Runs checking process and returns the checking status.
                        If failed checking statuses are found, it will return <ja_enum_value>Validation.result.failed</ja_enum_value>. 
                        Otherwise it will return <ja_enum_value>Validation.result.pass</ja_enum_value>. 
                     @return   <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validation::Result Commit
            (
            );
            /** Adds part node by part file name  <br> License requirements : None */
            public: void AppendPartNode
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds part node by part object  <br> License requirements : None */
            public: void AppendPartNode
            (
                NXOpen::Part * partObject /** partobject */ 
            );
            /** Adds part nodes by part file names  <br> License requirements : None */
            public: void AppendPartNodes
            (
                std::vector<NXString> & fileNames /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds part nodes by part objects  <br> License requirements : None */
            public: void AppendPartNodes
            (
                const std::vector<NXOpen::Part *> & partObject /** partobject */ 
            );
            /** Removes a part node  <br> License requirements : None */
            public: void ErasePartNode
            (
                int index /** index */ 
            );
            /** Clears part nodes  <br> License requirements : None */
            public: void ClearPartNodes
            (
            );
            /** Finds a part node  @return   <br> License requirements : None */
            public: NXOpen::Validate::PartNode * FindPartNode
            (
                int index /** index */ 
            );
            /** Returns all part nodes.  <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void GetPartNodes
            (
                std::vector<NXOpen::Validate::PartNode *> & partNodes /** partnodes */ 
            );
            /** Adds a checker node.
                     <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void AppendCheckerNode
            (
                const NXString & className /** checker class name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Adds checker nodes.
                     <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void AppendCheckerNodes
            (
                std::vector<NXString> & classNames /** checkers' class name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes a checker node.
                     <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void EraseCheckerNode
            (
                int delNdx /** del ndx */ 
            );
            /** Clears checker nodes  <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void ClearCheckerNodes
            (
            );
            /** Returns a checker node.
                     @return  checker node  <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::CheckerNode * FindCheckerNode
            (
                int index /** index */ 
            );
            /** Returns all checker nodes.
                     <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void GetCheckerNodes
            (
                std::vector<NXOpen::Validate::CheckerNode *> & checkerNode /** checker name array */
            );
            /**Returns  the run options.  <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::ValidatorOptions * ValidatorOptions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
