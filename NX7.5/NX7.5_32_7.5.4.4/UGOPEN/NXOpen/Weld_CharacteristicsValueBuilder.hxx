#ifndef NXOpen_WELD_CHARACTERISTICSVALUEBUILDER_HXX_INCLUDED
#define NXOpen_WELD_CHARACTERISTICSVALUEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_CharacteristicsValueBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Weld_CharacteristicsValueBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        class CharacteristicsValueBuilder;
    }
    class NXObject;
    namespace Weld
    {
        class _CharacteristicsValueBuilderBuilder;
        class CharacteristicsValueBuilderImpl;
        /** The object containing the information about the attribute to be 
            placed on the output of the weld feature. */
        class NXOPENCPPEXPORT  CharacteristicsValueBuilder : public NXObject
        {
            /** Settings to indicate the type of value contained in the attribute. */
            public: enum Type
            {
                TypeString/** Indicates the attribute value contains a string. */,
                TypeInteger/** Indicates the attribute value contains a integer. */,
                TypeDouble/** Indicates the attribute value contains a double. */,
                TypeOption/** Indicates the attribute value contains a pre set list of strings. */,
                TypeNone/** Indicates there is no attribute value. */
            };

            private: CharacteristicsValueBuilderImpl * m_characteristicsvaluebuilder_impl;
            private: friend class  _CharacteristicsValueBuilderBuilder;
            protected: CharacteristicsValueBuilder();
            public: ~CharacteristicsValueBuilder();
            /**Returns  the indication if the attribute is required to be placed on the output. true indicates
                    the attribute will always be placed on the output, false indicates the attribute does not 
                    have to be placed on the output.  <br> License requirements : None */
            public: bool Required
            (
            );
            /**Returns  the indication if the attribute is to be placed on the output. true indicates
                    the attribute will be placed on the output, false indicates the attribute will not
                    be placed on the output. Note that if Required is true, then this property cannot be 
                    set.  <br> License requirements : None */
            public: bool Active
            (
            );
            /**Sets  the indication if the attribute is to be placed on the output. true indicates
                    the attribute will be placed on the output, false indicates the attribute will not
                    be placed on the output. Note that if Required is true, then this property cannot be 
                    set.  <br> License requirements : ugweld ("UG WELD") */
            public: void SetActive
            (
                bool active /** active */ 
            );
            /**Returns  the title of this attribute.  <br> License requirements : None */
            public: NXString Title
            (
            );
            /**Returns  the type of this attribute.  <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsValueBuilder::Type AttributeType
            (
            );
            /**Returns  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeString Weld::CharacteristicsValueBuilder::TypeString@endlink  or
                        @link Weld::CharacteristicsValueBuilder::TypeOption Weld::CharacteristicsValueBuilder::TypeOption@endlink .  <br> License requirements : None */
            public: NXString ValueString
            (
            );
            /**Sets  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeString Weld::CharacteristicsValueBuilder::TypeString@endlink  or
                        @link Weld::CharacteristicsValueBuilder::TypeOption Weld::CharacteristicsValueBuilder::TypeOption@endlink .  <br> License requirements : ugweld ("UG WELD") */
            public: void SetValueString
            (
                const NXString & valueString /** valuestring */ 
            );
            /**Returns  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeInteger Weld::CharacteristicsValueBuilder::TypeInteger@endlink .  <br> License requirements : None */
            public: int ValueInteger
            (
            );
            /**Sets  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeInteger Weld::CharacteristicsValueBuilder::TypeInteger@endlink .  <br> License requirements : ugweld ("UG WELD") */
            public: void SetValueInteger
            (
                int valueInteger /** valueinteger */ 
            );
            /**Returns  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeDouble Weld::CharacteristicsValueBuilder::TypeDouble@endlink .  <br> License requirements : None */
            public: double ValueDouble
            (
            );
            /**Sets  the value of this attribute when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeDouble Weld::CharacteristicsValueBuilder::TypeDouble@endlink .  <br> License requirements : ugweld ("UG WELD") */
            public: void SetValueDouble
            (
                double valueDouble /** valuedouble */ 
            );
            /** The list of strings that are available to be set when AttributeType is @link Weld::CharacteristicsValueBuilder::TypeOption Weld::CharacteristicsValueBuilder::TypeOption@endlink .  <br> License requirements : None */
            public: void GetOptionStrings
            (
                std::vector<NXString> & strings /** Strings that are allowed for values. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
