#ifndef NXOpen_CAE_PRIMITIVEMESHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PRIMITIVEMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PrimitiveMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_PrimitiveMeshBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class PrimitiveMeshBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class _PrimitiveMeshBuilderBuilder;
        class PrimitiveMeshBuilderImpl;
        /** Represents Primitive Mesh
             *  Used to create a @link CAE::Mesh CAE::Mesh@endlink 
             <br> To create a new instance of this class, use @link CAE::MeshManager::CreatePrimitiveMeshBuilder CAE::MeshManager::CreatePrimitiveMeshBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  PrimitiveMeshBuilder : public Builder
        {
            private: PrimitiveMeshBuilderImpl * m_primitivemeshbuilder_impl;
            private: friend class  _PrimitiveMeshBuilderBuilder;
            protected: PrimitiveMeshBuilder();
            public: ~PrimitiveMeshBuilder();
            /**Returns  the mesh object name.  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXString Name
            (
            );
            /**Sets  the mesh object name.  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetName
            (
                const NXString & name /** The new name being assigned or set */
            );
            /**Returns  the element type builder.   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the property table associated with the mesh. 
                        The property table contains the parameters needed for the generation
                        of the mesh.   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
