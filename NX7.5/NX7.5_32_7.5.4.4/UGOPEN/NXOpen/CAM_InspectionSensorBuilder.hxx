#ifndef NXOpen_CAM_INSPECTIONSENSORBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONSENSORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionSensorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionSensorBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionSensorBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class _InspectionSensorBuilderBuilder;
        class InspectionSensorBuilderImpl;
        /** Represents the builder for a CMM Inspection Sensor.  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionSensorBuilder CAM::InspectionOperationCollection::CreateInspectionSensorBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionSensorBuilder : public CAM::OperationBuilder
        {
            /** the sensor type */
            public: enum SensorTypes
            {
                SensorTypesFixed/** Fixed */,
                SensorTypesIndex/** Indexable */
            };

            /** the sensor tip location method */
            public: enum SensorTipLocationTypes
            {
                SensorTipLocationTypesCartesian/** Cartesian */,
                SensorTipLocationTypesPolar/** Polar */,
                SensorTipLocationTypesVector/** Vector */
            };

            /** the sensor tip type */
            public: enum SensorTipTypes
            {
                SensorTipTypesSphere/** Sphere */,
                SensorTipTypesCylinder/** Cylinder */,
                SensorTipTypesDisk/** Disk */
            };

            private: InspectionSensorBuilderImpl * m_inspectionsensorbuilder_impl;
            private: friend class  _InspectionSensorBuilderBuilder;
            protected: InspectionSensorBuilder();
            public: ~InspectionSensorBuilder();
            /**Returns  the inspection sensor operation name  <br> License requirements : None */
            public: NXString SensorOpName
            (
            );
            /**Sets  the inspection sensor operation name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorOpName
            (
                const NXString & sensorOpName /** sensoropname */ 
            );
            /**Returns  the sensor label  <br> License requirements : None */
            public: NXString SensorOpLabel
            (
            );
            /**Sets  the sensor label  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorOpLabel
            (
                const NXString & label /** label */ 
            );
            /**Returns  the inspection probe tool name  <br> License requirements : None */
            public: NXString ToolName
            (
            );
            /**Sets  the inspection probe tool name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolName
            (
                const NXString & toolName /** toolname */ 
            );
            /**Returns  the sensor type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionSensorBuilder::SensorTypes SensorType
            (
            );
            /**Sets  the sensor type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorType
            (
                NXOpen::CAM::InspectionSensorBuilder::SensorTypes type /** type */ 
            );
            /**Returns  the sensor tip location method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionSensorBuilder::SensorTipLocationTypes SensorTipLocation
            (
            );
            /**Sets  the sensor tip location method  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipLocation
            (
                NXOpen::CAM::InspectionSensorBuilder::SensorTipLocationTypes type /** type */ 
            );
            /**Returns  the sensor tip type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionSensorBuilder::SensorTipTypes SensorTipType
            (
            );
            /**Sets  the sensor tip type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipType
            (
                NXOpen::CAM::InspectionSensorBuilder::SensorTipTypes type /** type */ 
            );
            /**Returns  the sensor tip diameter  <br> License requirements : None */
            public: double SensorTipDiameter
            (
            );
            /**Sets  the sensor tip diameter  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the sensor tip length  <br> License requirements : None */
            public: double SensorTipLength
            (
            );
            /**Sets  the sensor tip length  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipLength
            (
                double length /** length */ 
            );
            /**Returns  the sensor tip size  <br> License requirements : None */
            public: double SensorTipSize
            (
            );
            /**Sets  the sensor tip size  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipSize
            (
                double size /** size */ 
            );
            /** Get the sensor tip location cartesian coordinates  @return  the xyz values  <br> License requirements : None */
            public: std::vector<double> GetSensorTipXyz
            (
            );
            /** Set the sensor tip location cartesian coordinates  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipXyz
            (
                const std::vector<double> & xyz /** the xyz values */
            );
            /** Get the sensor tip location vector coordinates  @return  the ijk values  <br> License requirements : None */
            public: std::vector<double> GetSensorTipIjk
            (
            );
            /** Set the sensor tip location vector coordinates  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorTipIjk
            (
                const std::vector<double> & ijk /** the ijk values */
            );
            /**Returns  the sensor tip location tilt angle component  <br> License requirements : None */
            public: double AngleA
            (
            );
            /**Sets  the sensor tip location tilt angle component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleA
            (
                double angle /** angle */ 
            );
            /**Returns  the sensor tip location rotation angle component  <br> License requirements : None */
            public: double AngleB
            (
            );
            /**Sets  the sensor tip location rotation angle component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleB
            (
                double angle /** angle */ 
            );
            /**Returns  the probe tip number  <br> License requirements : None */
            public: int TipNumber
            (
            );
            /**Sets  the probe tip number  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTipNumber
            (
                int tipNumber /** tipnumber */ 
            );
            /**Returns  the master sensor label  <br> License requirements : None */
            public: NXString MasterOpLabel
            (
            );
            /**Sets  the master sensor label  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMasterOpLabel
            (
                const NXString & label /** label */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
