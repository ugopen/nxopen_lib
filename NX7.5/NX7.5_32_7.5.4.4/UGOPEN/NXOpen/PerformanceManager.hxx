#ifndef NXOpen_PERFORMANCEMANAGER_HXX_INCLUDED
#define NXOpen_PERFORMANCEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PerformanceManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class PerformanceManager;
    /** Represents the options to print all the performance statistics 
     information into output device */
    enum PerformanceManagerOutputDevice
    {
        PerformanceManagerOutputDeviceSyslog/** Print all data to sylog */,
        PerformanceManagerOutputDeviceListingWindow/** Print all data to listing window */,
        PerformanceManagerOutputDeviceXml/** Print all data to xml in autotest mode only*/,
        PerformanceManagerOutputDeviceNone/** No output */
    };

    class PerformanceManagerImpl;
    /** Represents class containing APIs used for monitoring performance.
    This class should not be made available to customers
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  PerformanceManager : public TransientObject
    {
        private: PerformanceManagerImpl * m_performancemanager_impl;
        public: explicit PerformanceManager(void *ptr);
        /** Frees the object from memory.  After this method is called,
            it is illegal to use the object.  In .NET, this method is automatically
            called when the object is deleted by the garbage collector.   <br> License requirements : None */
        public: virtual ~PerformanceManager();
        /**Returns  the CPU time for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: bool CpuTimeOption
        (
        );
        /**Sets  the CPU time for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: void SetCpuTimeOption
        (
            bool cpuTime /** cputime */ 
        );
        /**Returns  the CPU time validation tolerance is returned which is getting used for validating the
            autotest XML.The CPU time validation tolerance is set through <ja_propert_get>PerformanceManager.CpuTimeValidationTol</ja_property_get>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: int CpuTimeValidationTolerance
        (
        );
        /**Sets  the CPU time validation tolerance is returned which is getting used for validating the
            autotest XML.The CPU time validation tolerance is set through <ja_propert_get>PerformanceManager.CpuTimeValidationTol</ja_property_get>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: void SetCpuTimeValidationTolerance
        (
            int cpuTimeValidationTol /** cputimevalidationtol */ 
        );
        /**Returns  the Real time for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: bool RealTimeOption
        (
        );
        /**Sets  the Real time for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: void SetRealTimeOption
        (
            bool realTime /** realtime */ 
        );
        /**Returns  the Real time validation tolerance is returned which is getting used for validating the
            autotest XML. The Real time validation tolerance is set through <ja_propert_set>PerformanceManager.RealTimeValidationTol</ja_property_set>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing 
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: int RealTimeValidationTolerance
        (
        );
        /**Sets  the Real time validation tolerance is returned which is getting used for validating the
            autotest XML. The Real time validation tolerance is set through <ja_propert_set>PerformanceManager.RealTimeValidationTol</ja_property_set>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing 
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: void SetRealTimeValidationTolerance
        (
            int realTimeValidationTol /** realtimevalidationtol */ 
        );
        /**Returns  the process memory for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: bool ProcessMemoryOption
        (
        );
        /**Sets  the process memory for particular process/application is returned and is measured either 
            from the start or the last time performance statistics were gathered  <br> License requirements : None */
        public: void SetProcessMemoryOption
        (
            bool processMemory /** processmemory */ 
        );
        /**Returns  the process memory validation tolerance is returned which is getting used for validating the
            autotest XML.The process memory validation tolerance is set through <ja_propert_set>PerformanceManager.ProcessMemoryTol</ja_property_set>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing 
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: int ProcessMemoryValidationTolerance
        (
        );
        /**Sets  the process memory validation tolerance is returned which is getting used for validating the
            autotest XML.The process memory validation tolerance is set through <ja_propert_set>PerformanceManager.ProcessMemoryTol</ja_property_set>
            which is getting used for validating the autotest XML. User need to be very careful while seletcing 
            the tolerance values. Choose larger tolerances for smaller values  <br> License requirements : None */
        public: void SetProcessMemoryValidationTolerance
        (
            int processMemoryTol /** processmemorytol */ 
        );
        /**Returns  the delta CPU time obtaied during performance monitoring  <br> License requirements : None */
        public: double DeltaCpuTime
        (
        );
        /**Returns  the delta Real time obtaied during performance monitoring   <br> License requirements : None */
        public: double DeltaRealTime
        (
        );
        /**Returns  the delta BSM memory obtaied during performance monitoring   <br> License requirements : None */
        public: double DeltaBsmMemory
        (
        );
        /**Returns  the delta NX process memory obtaied during performance monitoring   <br> License requirements : None */
        public: double DeltaNxProcessMemory
        (
        );
        /**Returns  the BSM memory obtaied during performance monitoring   <br> License requirements : None */
        public: double BsmMemory
        (
        );
        /**Returns  the Max BSM memory obtaied during performance monitoring   <br> License requirements : None */
        public: double MaxBsmMemory
        (
        );
        /**Returns  the NX process memory obtaied during performance monitoring   <br> License requirements : None */
        public: double NxProcessMemory
        (
        );
        /** Start the performance monitor at any point of time typically before any 
            application/process  <br> License requirements : None */
        public: void StartPerformanceMonitor
        (
        );
        /** Record performance results at any point of time (once monitor is started).
            Mention where you want to put the output information by specifying outputDevice.
            Options(syslog, listing window and XML) to print all the performance statistics 
            information. By default, all information get printed to listing window. <br> License requirements : None */
        public: void RecordPerformanceResults
        (
        );
        /** Record the performance results and stop monitoring  <br> License requirements : None */
        public: void StopPerformanceMonitor
        (
        );
        /**Returns  the option to prompt for user comment, which is available only in autotest mode  <br> License requirements : None */
        public: bool PromptForUserCommentOption
        (
        );
        /**Sets  the option to prompt for user comment, which is available only in autotest mode  <br> License requirements : None */
        public: void SetPromptForUserCommentOption
        (
            bool userComment /** usercomment */ 
        );
        /**Returns  the User Comment string obtained while recording the performance results. 
                User comment field is populated only in autotest mode.  <br> License requirements : None */
        public: NXString UserComment
        (
        );
        /**Sets  the User Comment string obtained while recording the performance results. 
                User comment field is populated only in autotest mode.  <br> License requirements : None */
        public: void SetUserComment
        (
            const NXString & userComment /** usercomment */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
