#ifndef NXOpen_TOOLING_TRAVERSELOOPBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_TRAVERSELOOPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_TraverseLoopBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_TraverseLoopBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class TraverseLoopBuilder;
    }
    class Builder;
    class NXObject;
    class ScCollector;
    namespace Tooling
    {
        class _TraverseLoopBuilderBuilder;
        class TraverseLoopBuilderImpl;
        /** The builder class for Traverse Loop component which assists you 
                to select or traverse a string of adjacent curves or edges.  <br> To create a new instance of this class, use @link Tooling::TraverseLoopCollection::CreateBuilder Tooling::TraverseLoopCollection::CreateBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BridgeGap </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ByColor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EndEdge </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TolSetting </td> <td> 
         
        0.0254 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  TraverseLoopBuilder : public Builder
        {
            private: TraverseLoopBuilderImpl * m_traverseloopbuilder_impl;
            private: friend class  _TraverseLoopBuilderBuilder;
            protected: TraverseLoopBuilder();
            public: ~TraverseLoopBuilder();
            /**Returns  the selected edges and curves which will form the loop.  <br> License requirements : None */
            public: NXOpen::ScCollector * SelectEdge
            (
            );
            /** Traverse back action.  <br> License requirements : None */
            public: void ActBack
            (
            );
            /** Accept current path.  <br> License requirements : None */
            public: void ActAccept
            (
            );
            /** Cycle candidate path.  <br> License requirements : None */
            public: void ActCycle
            (
            );
            /** Close current loop.  <br> License requirements : None */
            public: void ActClose
            (
            );
            /** Exit current loop.  <br> License requirements : None */
            public: void ActExit
            (
            );
            /**Returns  Traverse loop by following face color or not.  <br> License requirements : None */
            public: bool ByColor
            (
            );
            /**Sets  Traverse loop by following face color or not.  <br> License requirements : None */
            public: void SetByColor
            (
                bool byColor /** bycolor */ 
            );
            /**Returns  the option to exit the current loop.  <br> License requirements : None */
            public: bool ExitLoop
            (
            );
            /**Sets  the option to exit the current loop.  <br> License requirements : None */
            public: void SetExitLoop
            (
                bool isExitLoop /** isexitloop */ 
            );
            /**Returns  Traverse loop by using start edge/end edge or not.  <br> License requirements : None */
            public: bool EndEdge
            (
            );
            /**Sets  Traverse loop by using start edge/end edge or not.  <br> License requirements : None */
            public: void SetEndEdge
            (
                bool endEdge /** endedge */ 
            );
            /**Returns  the chaining tolerance.  <br> License requirements : None */
            public: double TolSetting
            (
            );
            /**Sets  the chaining tolerance.  <br> License requirements : None */
            public: void SetTolSetting
            (
                double tolSetting /** tolsetting */ 
            );
            /** Start traverse after selecting edges or curve.  <br> License requirements : None */
            public: void ActEdgeSelection
            (
                const std::vector<NXOpen::NXObject *> & pTolSelObject /** Total selected objects.*/,
                const std::vector<NXOpen::NXObject *> & selections /** Last selected objects. */,
                const std::vector<NXOpen::NXObject *> & deselections /** Last deselected objects. */,
                const NXOpen::Point3d & cpoint /** Cursor point position when selecting one edge first time.*/,
                bool selectEndEdge /** Whether last selected object is the end edge. */
            );
            /** Reset traverse data after one loop closed.   <br> License requirements : None */
            public: void ResetTraverseData
            (
            );
            /** Move extract curves that are not parting lines to the invisible layer.  <br> License requirements : None */
            public: void MoveCurves
            (
                const std::vector<NXOpen::NXObject *> & pPartingLines /** parting lines obtained by Traverse Loop which can be edges or curves. */
            );
            /** Make parting layer as the work layer.  <br> License requirements : None */
            public: void SwitchToPartinglineLayer
            (
            );
            /** Set start and end points for traversal.  <br> License requirements : None */
            public: void SetTraverseStartEndPoint
            (
                NXOpen::NXObject * candidate /** First selected object. */,
                const NXOpen::Point3d & pointCloseCursor /** End point of selected object used to start traverse. */,
                const std::vector<NXOpen::NXObject *> & selections /** All selected objects to traverse. */
            );
            /**Returns  the option to bridge gap or not.  <br> License requirements : None */
            public: bool BridgeGap
            (
            );
            /**Sets  the option to bridge gap or not.  <br> License requirements : None */
            public: void SetBridgeGap
            (
                bool bridgeGap /** bridgegap */ 
            );
            /** Calculate the gap between last selected objects and existing loop string, and find out the nearest end point.  @return  The gap between nearPoint and end point of existing loop string.  <br> License requirements : None */
            public: double CheckGap
            (
                const std::vector<NXOpen::NXObject *> & selections /** Last selected objects. */,
                NXOpen::Point3d* nearPoint /** End point of  last selected object near to end point of existing loop string. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
