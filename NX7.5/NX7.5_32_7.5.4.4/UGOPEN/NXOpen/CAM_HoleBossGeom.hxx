#ifndef NXOpen_CAM_HOLEBOSSGEOM_HXX_INCLUDED
#define NXOpen_CAM_HOLEBOSSGEOM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_HoleBossGeom.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_HoleBossGeom.hxx>
#include <NXOpen/CAM_ThreadedBossSet.hxx>
#include <NXOpen/CAM_ThreadedHoleSet.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class HoleBossGeom;
    }
    namespace CAM
    {
        class ThreadedBossSet;
    }
    namespace CAM
    {
        class ThreadedBossSetList;
    }
    namespace CAM
    {
        class ThreadedHoleSet;
    }
    namespace CAM
    {
        class ThreadedHoleSetList;
    }
    class NXObject;
    class SelectTaggedObject;
    namespace CAM
    {
        class _HoleBossGeomBuilder;
        class HoleBossGeomImpl;
        /** Represents a CAM geometry builder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  HoleBossGeom : public TaggedObject
        {
            /** the hole or boss types */
            public: enum HoleBossTypes
            {
                HoleBossTypesThreadedHole/** Type: Threaded Hole */,
                HoleBossTypesThreadedBoss/** Type: Threaded Boss */
            };

            /** the form and pitch types */
            public: enum FormPitchTypes
            {
                FormPitchTypesSpecify/** Form and Pitch: Specify */,
                FormPitchTypesFromTable/** Form and Pitch: From Table */,
                FormPitchTypesFromTool/** Form and Pitch: From Tool */,
                FormPitchTypesFromModel/** Form and Pitch: From Model */
            };

            /** the rotation types */
            public: enum RotationTypes
            {
                RotationTypesRightHand/** Rotation: Right-hand */,
                RotationTypesLeftHand/** Rotation: Left-hand */
            };

            /** the depth limit types */
            public: enum DepthLimitTypes
            {
                DepthLimitTypesThrough/** Depth Limit: Through */,
                DepthLimitTypesBlind/** Depth Limit: Blind */
            };

            /** the Form types */
            public: enum FormTypes
            {
                FormTypesUnified/** Form: Unified */,
                FormTypesMetric/** Form: Metric */,
                FormTypesTrapezoidal/** Form: Trapezoidal */,
                FormTypesAcme/** Form: Acme */,
                FormTypesStubAcme/** Form: Stub Acme */,
                FormTypesLowernherz/** Form: Lowenherz */,
                FormTypesButtress/** Form: Buttress */,
                FormTypesSparkPlug/** Form: Spark Plug */,
                FormTypesNpt/** Form: NPT */,
                FormTypesHoseCoupling/** Form: Hose Coupling */,
                FormTypesFireHose/** Form: Fire Hose */,
                FormTypesUnj/** Form: UNJ */,
                FormTypesNps/** Form: NPS */,
                FormTypesBsp/** Form: BSP */,
                FormTypesBstp/** Form: BSTP */,
                FormTypesHelicoil/** Form: Helicoil */,
                FormTypesNs/** Form: NS */,
                FormTypesUserDefined/** Form: User-defined */
            };

            private: HoleBossGeomImpl * m_holebossgeom_impl;
            private: friend class  _HoleBossGeomBuilder;
            protected: HoleBossGeom();
            public: ~HoleBossGeom();
            /**Returns  the hole or boss types  <br> License requirements : None */
            public: NXOpen::CAM::HoleBossGeom::HoleBossTypes HoleBossGeomType
            (
            );
            /**Sets  the hole or boss types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHoleBossGeomType
            (
                NXOpen::CAM::HoleBossGeom::HoleBossTypes type /** the hole boss type*/
            );
            /**Returns  the Form and Pitch types  <br> License requirements : None */
            public: NXOpen::CAM::HoleBossGeom::FormPitchTypes FormAndPitch
            (
            );
            /**Sets  the Form and Pitch types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFormAndPitch
            (
                NXOpen::CAM::HoleBossGeom::FormPitchTypes type /** the Form and Pitch type*/
            );
            /** The Form types.
                        When the Form type is user defined, it will return the Form type(UserDefined) and User Defined Name;
                        When the Form type is NOT user defined, it will return the Form type and the formCustom is NULL.
                     <br> License requirements : None */
            public: void GetForm
            (
                NXOpen::CAM::HoleBossGeom::FormTypes* type /** the Form Standard type */,
                NXString* formCustom /** the User Defined Form  */
            );
            /** The Form types.
                        When the Form type is user defined, please set the Form type(UserDefined) and User Defined Name;
                        When the Form type is NOT user defined, please set the Form type and let the formCustom NULL.
                     <br> License requirements : cam_base ("CAM BASE") */
            public: void SetForm
            (
                NXOpen::CAM::HoleBossGeom::FormTypes type /** the Form Standard type*/,
                const NXString & formCustom /** the User Defined Form    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the Pitch  <br> License requirements : None */
            public: double Pitch
            (
            );
            /**Sets  the Pitch  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPitch
            (
                double holeBossValue /** the Pitch */
            );
            /**Returns  the Rotation types  <br> License requirements : None */
            public: NXOpen::CAM::HoleBossGeom::RotationTypes Rotation
            (
            );
            /**Sets  the Rotation types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRotation
            (
                NXOpen::CAM::HoleBossGeom::RotationTypes type /** the Rotation type*/
            );
            /**Returns  the Depth Limit types  <br> License requirements : None */
            public: NXOpen::CAM::HoleBossGeom::DepthLimitTypes DepthLimit
            (
            );
            /**Sets  the Depth Limit types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthLimit
            (
                NXOpen::CAM::HoleBossGeom::DepthLimitTypes type /** the Depth Limit type*/
            );
            /**Returns  the selection geometry  <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * Selection
            (
            );
            /**Returns  the threaded hole list  <br> License requirements : None */
            public: NXOpen::CAM::ThreadedHoleSetList * ThreadedHoleList
            (
            );
            /**Returns  the threaded boss list  <br> License requirements : None */
            public: NXOpen::CAM::ThreadedBossSetList * ThreadedBossList
            (
            );
            /** Create a new Thread Hole  @return  the Thread Hole Set builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadedHoleSet * CreateThreadedHoleBuilder
            (
                const std::vector<NXOpen::NXObject *> & entities /** the geometry*/,
                double tapDrillSize /** the tap drill size*/,
                double depth /** the depth*/,
                NXOpen::NXObject * toolAxis /** the tool axis*/,
                double majorDiameter /** the major diameter*/,
                double minorDiameter /** the minor diameter*/,
                double lengh /** the lengh*/,
                const NXString & size /** the size  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & radialEngage /** the radial engage  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double pitch /** the pitch*/,
                int rotation /** the rotation*/,
                NXOpen::CAM::HoleBossGeom::FormTypes form /** the form*/,
                const NXString & formUserDefined /** the user defined Form  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & tableStandard /** the Standard  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int depthLimit /** the depth limit*/
            );
            /** Create a new Thread Boss  @return  the Thread Hole Set builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadedBossSet * CreateThreadedBossBuilder
            (
                const std::vector<NXOpen::NXObject *> & entities /** the geometry*/,
                double diameter /** the diameter*/,
                double height /** the height*/,
                NXOpen::NXObject * toolAxis /** the tool axis*/,
                double majorDiameter /** the major diameter*/,
                double minorDiameter /** the minor diameter*/,
                double lengh /** the lengh*/,
                const NXString & size /** the size title  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double pitch /** the pitch*/,
                int rotation /** the rotation*/,
                NXOpen::CAM::HoleBossGeom::FormTypes form /** the form*/,
                const NXString & formUserDefined /** the user defined Form  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
