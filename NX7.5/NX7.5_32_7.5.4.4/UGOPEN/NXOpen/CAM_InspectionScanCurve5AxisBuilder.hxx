#ifndef NXOpen_CAM_INSPECTIONSCANCURVE5AXISBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONSCANCURVE5AXISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionScanCurve5AxisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/CAM_InspectionScanCurve5AxisBuilder.hxx>
#include <NXOpen/CAM_InspectionMoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionScanCurve5AxisBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InspectionMoveBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _InspectionScanCurve5AxisBuilderBuilder;
        class InspectionScanCurve5AxisBuilderImpl;
        /** Represents the builder for the CMM Inspection sub-operation Scan Curve.  <br> To create a new instance of this class, use @link CAM::InspectionMoveCollection::CreateInspectionScanCurve5axisBuilder CAM::InspectionMoveCollection::CreateInspectionScanCurve5axisBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionScanCurve5AxisBuilder : public CAM::InspectionMoveBuilder
        {
            private: InspectionScanCurve5AxisBuilderImpl * m_inspectionscancurve5axisbuilder_impl;
            private: friend class  _InspectionScanCurve5AxisBuilderBuilder;
            protected: InspectionScanCurve5AxisBuilder();
            public: ~InspectionScanCurve5AxisBuilder();
            /**Returns  the curve  <br> License requirements : None */
            public: NXOpen::NXObject * Curve
            (
            );
            /**Sets  the curve  <br> License requirements : None */
            public: void SetCurve
            (
                NXOpen::NXObject * curve /** curve */ 
            );
            /**Returns  the Number of Scan Points on the curve  <br> License requirements : None */
            public: int Nbpoints
            (
            );
            /**Sets  the Number of Scan Points on the curve  <br> License requirements : None */
            public: void SetNbpoints
            (
                int nbpoints /** nbpoints */ 
            );
            /**Returns  the Reverse Direction flag on the curve  <br> License requirements : None */
            public: bool Reversedirection
            (
            );
            /**Sets  the Reverse Direction flag on the curve  <br> License requirements : None */
            public: void SetReversedirection
            (
                bool reversedir /** reversedir */ 
            );
            /**Returns  the Start Distance of the Scan Curve  <br> License requirements : None */
            public: double StartDistance
            (
            );
            /**Sets  the Start Distance of the Scan Curve  <br> License requirements : None */
            public: void SetStartDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the End Distance of the Scan Curve  <br> License requirements : None */
            public: double EndDistance
            (
            );
            /**Sets  the End Distance of the Scan Curve  <br> License requirements : None */
            public: void SetEndDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the Merge Previous flag  <br> License requirements : None */
            public: bool MergePrevious
            (
            );
            /**Sets  the Merge Previous flag  <br> License requirements : None */
            public: void SetMergePrevious
            (
                bool mergeprevious /** mergeprevious */ 
            );
            /**Returns  the Minimum Spacing of points along the Scan Curve  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinSpacing
            (
            );
            /**Returns  the Maximum Spacing of points along the Scan Curve  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaxSpacing
            (
            );
            /**Returns  the Curvature Increase Factor for points along the Scan Curve  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * CurvatureFactor
            (
            );
            /**Returns  the curve specification mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes CurveMode
            (
            );
            /**Sets  the curve specification mode  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCurveMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ScanCurveModeTypes mode /** mode */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
