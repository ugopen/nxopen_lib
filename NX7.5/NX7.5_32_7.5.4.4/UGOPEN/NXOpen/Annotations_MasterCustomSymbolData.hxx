#ifndef NXOpen_ANNOTATIONS_MASTERCUSTOMSYMBOLDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_MASTERCUSTOMSYMBOLDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_MasterCustomSymbolData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class MasterCustomSymbolData;
    }
    class DisplayableObject;
    class Point;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class MasterCustomSymbolDataImpl;
        /** Represents master custom symbol data */
        class NXOPENCPPEXPORT  MasterCustomSymbolData : public TransientObject
        {
            private: MasterCustomSymbolDataImpl * m_mastercustomsymboldata_impl;
            public: explicit MasterCustomSymbolData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~MasterCustomSymbolData();
            /**Returns  the master part name  <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the master part name  <br> License requirements : None */
            public: void SetPartName
            (
                const NXString & name /** New master part name */
            );
            /**Returns  the symbol name  <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /**Sets  the symbol name  <br> License requirements : None */
            public: void SetSymbolName
            (
                const NXString & name /** New symbol name */
            );
            /**Returns  the anchor point  <br> License requirements : None */
            public: NXOpen::Point * Anchor
            (
            );
            /**Sets  the anchor point  <br> License requirements : None */
            public: void SetAnchor
            (
                NXOpen::Point * anchor /** New anchor point */
            );
            /** Specify the geometry for this master custom symbol data.  <br> License requirements : None */
            public: void SetGeometry
            (
                const std::vector<NXOpen::DisplayableObject *> & geom /** symbol geometry */
            );
            /** Get the path for part name  @return   Path  <br> License requirements : None */
            public: NXString GetPath
            (
            );
            /** Set the valid path for part name  <br> License requirements : None */
            public: void SetPath
            (
                const NXString & path /** New path */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
