#ifndef NXOpen_ROUTING_DIVISION_HXX_INCLUDED
#define NXOpen_ROUTING_DIVISION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Division.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_Division.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class Division;
    }
    class NXObject;
    namespace Routing
    {
        class _DivisionBuilder;
        class DivisionImpl;
        /** Represents @link Routing::Division Routing::Division@endlink   <br> Creator not available in KF because transient objects are not supported. <br> */
        class NXOPENCPPEXPORT  Division : public NXObject
        {
            /** The direction in which the cross-section is to be split */
            public: enum SplitDirectionType
            {
                SplitDirectionTypeSplitVertically/** Creates a vertical split */,
                SplitDirectionTypeSplitHorizontally/** Creates a horizontal split */
            };

            private: DivisionImpl * m_division_impl;
            private: friend class  _DivisionBuilder;
            protected: Division();
            public: ~Division();
            /**Returns  the direction of split, either vertical or horizontal  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::Division::SplitDirectionType SplitDirection
            (
            );
            /**Sets  the direction of split, either vertical or horizontal  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSplitDirection
            (
                NXOpen::Routing::Division::SplitDirectionType splitDirection /** splitdirection */ 
            );
            /** Creates splitting Curve.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void CreateSplitterCurve
            (
            );
            /** Update the Flow.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UpdateFlow
            (
                double leftChildFlow /** percentage absolute or relative flow in the left child division */,
                double rightChildFlow /** percentage absolute or relative flow in the right child division */,
                bool isAbsoluteFlow /** if TRUE: displays absolute flow percentage for each
                                                                                        division, else displays relative flow percentage */
            );
            /** Deletes all children divisions of the input division and the splitter curves
                        that were used to create the children divisions. In case the input division
                        is the root division or the immediate child of the root division then the
                        root division and the boundary curves are also deleted.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteAllChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
