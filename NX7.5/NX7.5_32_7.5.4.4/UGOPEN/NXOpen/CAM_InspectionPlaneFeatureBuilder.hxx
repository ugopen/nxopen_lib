#ifndef NXOpen_CAM_INSPECTIONPLANEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONPLANEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionPlaneFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_InspectionPlaneFeatureBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionPlaneFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionPlaneFeatureBuilderBuilder;
        class InspectionPlaneFeatureBuilderImpl;
        /** Represents a CMM Inspection Plane Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionPlaneFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionPlaneFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionPlaneFeatureBuilder : public CAM::OperationBuilder
        {
            private: InspectionPlaneFeatureBuilderImpl * m_inspectionplanefeaturebuilder_impl;
            private: friend class  _InspectionPlaneFeatureBuilderBuilder;
            protected: InspectionPlaneFeatureBuilder();
            public: ~InspectionPlaneFeatureBuilder();
            /**Returns  the selected plane  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectedPlane
            (
            );
            /**Returns  the normal vector  <br> License requirements : None */
            public: NXOpen::Direction * NormalVector
            (
            );
            /**Sets  the normal vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVector
            (
                NXOpen::Direction * normalVector /** normalvector */ 
            );
            /**Returns  the csys reference type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysReferenceType
            (
            );
            /**Sets  the csys reference type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysReferenceType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysReferenceType /** csysreferencetype */ 
            );
            /**Returns  the extent type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationExtenttypes ExtentType
            (
            );
            /**Sets  the extent type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtentType
            (
                NXOpen::CAM::CamInspectionOperationExtenttypes extentType /** extenttype */ 
            );
            /**Returns  the base point or plane center X coordinate  <br> License requirements : None */
            public: double BasePointX
            (
            );
            /**Sets  the base point or plane center X coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointX
            (
                double basePointX /** basepointx */ 
            );
            /**Returns  the base point or plane center Y coordinate  <br> License requirements : None */
            public: double BasePointY
            (
            );
            /**Sets  the base point or plane center Y coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointY
            (
                double basePointY /** basepointy */ 
            );
            /**Returns  the base point or plane center Z coordinate  <br> License requirements : None */
            public: double BasePointZ
            (
            );
            /**Sets  the base point or plane center Z coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointZ
            (
                double basePointZ /** basepointz */ 
            );
            /**Returns  the normal vector I component  <br> License requirements : None */
            public: double NormalVectorI
            (
            );
            /**Sets  the normal vector I component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorI
            (
                double normalVectorI /** normalvectori */ 
            );
            /**Returns  the normal vector J component  <br> License requirements : None */
            public: double NormalVectorJ
            (
            );
            /**Sets  the normal vector J component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorJ
            (
                double normalVectorJ /** normalvectorj */ 
            );
            /**Returns  the normal vector K component  <br> License requirements : None */
            public: double NormalVectorK
            (
            );
            /**Sets  the normal vector K component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorK
            (
                double normalVectorK /** normalvectork */ 
            );
            /**Returns  the plane inspection feature name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the plane inspection feature name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Updates plane inspection feature characteristic parameters based on selected geometry  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the plane inspection feature normal vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipNormal
            (
            );
            /** Updates plane inspection feature normal vector based on selected vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateNormalVector
            (
                const NXOpen::Vector3d & vector /** vector */ 
            );
            /**Returns  the reverse face normal flag  <br> License requirements : None */
            public: bool ReverseFaceNormal
            (
            );
            /**Sets  the reverse face normal flag  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseFaceNormal
            (
                bool reverseFaceNormal /** reversefacenormal */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
