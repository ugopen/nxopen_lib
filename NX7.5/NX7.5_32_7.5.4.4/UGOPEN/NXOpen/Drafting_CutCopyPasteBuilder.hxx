#ifndef NXOpen_DRAFTING_CUTCOPYPASTEBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_CUTCOPYPASTEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_CutCopyPasteBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Drafting_CutCopyPasteBuilder.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drafting
    {
        class CutCopyPasteBuilder;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class Plane;
    class SelectTaggedObjectList;
    class View;
    namespace Drafting
    {
        class _CutCopyPasteBuilderBuilder;
        class CutCopyPasteBuilderImpl;
        /**
                Represents a paste in Drafting.
             <br> To create a new instance of this class, use @link Drafting::DraftingApplicationManager::CreateCutCopyPasteBuilder Drafting::DraftingApplicationManager::CreateCutCopyPasteBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Transform.DeltaEnum </td> <td> 
         
        ReferenceWcsWorkPart </td> </tr> 

        <tr><td> 
         
        Transform.DeltaXc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Transform.DeltaYc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Transform.DeltaZc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Transform.Option </td> <td> 
         
        Distance </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  CutCopyPasteBuilder : public Builder
        {
            private: CutCopyPasteBuilderImpl * m_cutcopypastebuilder_impl;
            private: friend class  _CutCopyPasteBuilderBuilder;
            protected: CutCopyPasteBuilder();
            public: ~CutCopyPasteBuilder();
            /**Returns  the motion from the default paste position  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion * Transform
            (
            );
            /**Returns  the destination view.  Either a drafting view or sheet view.  <br> License requirements : None */
            public: NXOpen::View * DestinationView
            (
            );
            /**Sets  the destination view.  Either a drafting view or sheet view.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDestinationView
            (
                NXOpen::View * destinationView /** destinationview */ 
            );
            /** Get the default to point. The drop location.  @return  the drop location  <br> License requirements : None */
            public: NXOpen::Point3d GetDefaultToPoint
            (
            );
            /** Set the default to point.  The drop location.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDefaultToPoint
            (
                const NXOpen::Point3d & dropLocation /** the drop location */
            );
            /**Returns  the objects to copy list. May include drafting geometry, sketch objects
                        and simple annotations. <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * ObjectsToCopy
            (
            );
            /**Returns   the output Objects  <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * OutputObjects
            (
            );
            /**Returns   a plane to restrict motion  <br> License requirements : None */
            public: NXOpen::Plane * PlaneToRestrictMotion
            (
            );
            /**Sets   a plane to restrict motion  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPlaneToRestrictMotion
            (
                NXOpen::Plane * plan /** plan */ 
            );
            /** Set the final motion from the drop location.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMoveOnCommit
            (
                const NXOpen::Matrix3x3 & rot /** rotational part of motion */,
                const NXOpen::Vector3d & trans /** translation part of motion */
            );
            /** Make the initial drop.  <br> License requirements : drafting ("DRAFTING") */
            public: void InitPaste
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
