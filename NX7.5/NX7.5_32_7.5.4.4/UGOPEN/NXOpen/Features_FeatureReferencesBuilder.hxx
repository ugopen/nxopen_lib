#ifndef NXOpen_FEATURES_FEATUREREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FEATUREREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureReferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureReferencesBuilder.hxx>
#include <NXOpen/Features_MatchedReferenceBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class FeatureReferencesBuilder;
    }
    namespace Features
    {
        class MatchedReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        class _FeatureReferencesBuilderBuilder;
        class FeatureReferencesBuilderImpl;
        /**
            Represents a @link Features::FeatureReferencesBuilder Features::FeatureReferencesBuilder@endlink 
            */
        class NXOPENCPPEXPORT  FeatureReferencesBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: FeatureReferencesBuilderImpl * m_featurereferencesbuilder_impl;
            private: friend class  _FeatureReferencesBuilderBuilder;
            protected: FeatureReferencesBuilder();
            public: ~FeatureReferencesBuilder();
            /** Returns the MatchedReference Builders  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Features::MatchedReferenceBuilder *> GetMatchedReferences
            (
            );
            /** This function can perform two automatic feature reference matching operations based on: 
                            1. other reference matches;
                            2. parent names if match_based_on_name is true.
                     <br> License requirements : None */
            public: void AutomaticMatch
            (
                bool matchBasedOnName /** match by name or not */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
