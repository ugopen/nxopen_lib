#ifndef NXOpen_GEOMETRICUTILITIES_FACESETDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FACESETDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FaceSetData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceSetData.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FaceSetData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    class ScCollector;
    namespace GeometricUtilities
    {
        class _FaceSetDataBuilder;
        class FaceSetDataImpl;
        /**
            Represents a @link GeometricUtilities::FaceSetData GeometricUtilities::FaceSetData@endlink 
            */
        class NXOPENCPPEXPORT  FaceSetData : public NXObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: FaceSetDataImpl * m_facesetdata_impl;
            private: friend class  _FaceSetDataBuilder;
            protected: FaceSetData();
            public: ~FaceSetData();
            /**Returns  the face set collector  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceCollector
            (
            );
            /**Returns  the face set reverse direction flag  <br> License requirements : None */
            public: bool ReverseNormalFlag
            (
            );
            /**Sets  the face set reverse direction flag  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseNormalFlag
            (
                bool mReverseNormalFlag /** mreversenormalflag */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
