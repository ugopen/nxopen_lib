#ifndef NXOpen_DIE_DIELIMITSBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIELIMITSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieLimitsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class DieLimitsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class NXObject;
    class ScCollector;
    namespace Die
    {
        class _DieLimitsBuilderBuilder;
        class DieLimitsBuilderImpl;
        /** Limits a path to a segment of the path. */
        class NXOPENCPPEXPORT  DieLimitsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: DieLimitsBuilderImpl * m_dielimitsbuilder_impl;
            private: friend class  _DieLimitsBuilderBuilder;
            protected: DieLimitsBuilder();
            public: ~DieLimitsBuilder();
            /**Returns  the curve used to set the limits.  The string will be combined into a single curve and the endpoints of
                        the combined curve will be used to set the first and last limit points.
                     <br> License requirements : None */
            public: NXOpen::ScCollector * Curve
            (
            );
            /**Returns  the first limit point.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * Point1
            (
            );
            /**Returns  the last limit point.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * Point2
            (
            );
            /** Get the objects used to create the path.  <br> License requirements : None */
            public: void GetPathObjects
            (
                std::vector<NXOpen::NXObject *> & objectArray /** The opening objects that were used to create the path. */
            );
            /** Set the objects used to create the path.  <br> License requirements : None */
            public: void SetPathObjects
            (
                const std::vector<NXOpen::NXObject *> & objectArray /** The opening objects that were used to create the path. */
            );
            /**Returns  the indication that limit points should be reversed. Setting of 1 indicates to reverse.  <br> License requirements : None */
            public: int Reverse
            (
            );
            /**Sets  the indication that limit points should be reversed. Setting of 1 indicates to reverse.  <br> License requirements : None */
            public: void SetReverse
            (
                int reverse /** reverse */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
