#ifndef NXOpen_ANNOTATIONS_PMIDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMIDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AssociatedObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class PmiData;
    }
    namespace Annotations
    {
        class AssociatedObject;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class PmiDataImpl;
        /** Represents PMI(Product and Manufacturing Information) data */
        class NXOPENCPPEXPORT  PmiData : public TransientObject
        {
            private: PmiDataImpl * m_pmidata_impl;
            public: explicit PmiData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~PmiData();
            /** Returns the business modifiers  @return  List of business modifiers  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::BusinessModifier *> GetBusinessModifiers
            (
            );
            /** Sets the business modifiers  <br> License requirements : None */
            public: void SetBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Returns the associated object  @return  Associated objects  <br> License requirements : None */
            public: NXOpen::Annotations::AssociatedObject * GetAssociatedObject
            (
            );
            /** Sets the associated object  <br> License requirements : None */
            public: void SetAssociatedObject
            (
                NXOpen::Annotations::AssociatedObject * assocObj /** List of new associated objects */
            );
            /** Returns the index  @return   <br> License requirements : None */
            public: int GetIndex
            (
            );
            /** Sets the index  <br> License requirements : None */
            public: void SetIndex
            (
                int index /** index */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
