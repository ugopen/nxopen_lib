#ifndef NXOpen_CAM_INSPECTIONCREATEPATHSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCREATEPATHSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCreatePathsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_InspectionCreatePathsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionCreatePathsBuilder;
    }
    class Builder;
    namespace CAM
    {
        class InspectionGroup;
    }
    namespace CAM
    {
        class InspectionSetup;
    }
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionCreatePathsBuilderBuilder;
        class InspectionCreatePathsBuilderImpl;
        /** Create Paths Dialog builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCreatePathsBuilder CAM::InspectionOperationCollection::CreateInspectionCreatePathsBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionCreatePathsBuilder : public Builder
        {
            private: InspectionCreatePathsBuilderImpl * m_inspectioncreatepathsbuilder_impl;
            private: friend class  _InspectionCreatePathsBuilderBuilder;
            protected: InspectionCreatePathsBuilder();
            public: ~InspectionCreatePathsBuilder();
            /**Returns  the select features button  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectFeatures
            (
            );
            /**Returns  the tool to use for inspection  <br> License requirements : None */
            public: NXString ToolString
            (
            );
            /**Sets  the tool to use for inspection  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolString
            (
                const NXString & toolString /** toolstring */ 
            );
            /**Returns  the tip to use for inspection  <br> License requirements : None */
            public: NXString TipString
            (
            );
            /**Sets  the tip to use for inspection  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTipString
            (
                const NXString & tipString /** tipstring */ 
            );
            /**Returns  the angle specification  <br> License requirements : None */
            public: NXString AngleString
            (
            );
            /**Sets  the angle specification  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleString
            (
                const NXString & angleString /** anglestring */ 
            );
            /**Returns  the A angle  <br> License requirements : None */
            public: double AngleA
            (
            );
            /**Sets  the A angle  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleA
            (
                double angleA /** anglea */ 
            );
            /**Returns  the B angle  <br> License requirements : None */
            public: double AngleB
            (
            );
            /**Sets  the B angle  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleB
            (
                double angleB /** angleb */ 
            );
            /**Returns  the program location  <br> License requirements : None */
            public: NXString ProgramLocationString
            (
            );
            /**Sets  the program location  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramLocationString
            (
                const NXString & programLocationString /** programlocationstring */ 
            );
            /** Returns the selected features.  @return  Selected features  <br> License requirements : None */
            public: std::vector<NXString> GetSelectedFeatures
            (
            );
            /** Sets the selected features.  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectedFeatures
            (
                std::vector<NXString> & selectedFeatures /** Selected features   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates paths for the selected features.  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CreatePaths
            (
            );
            /**Returns  the setup  <br> License requirements : None */
            public: NXOpen::CAM::InspectionSetup * Setup
            (
            );
            /**Sets  the setup  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSetup
            (
                NXOpen::CAM::InspectionSetup * setup /** setup */ 
            );
            /**Returns  the program group  <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * ProgramGroup
            (
            );
            /**Sets  the program group  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramGroup
            (
                NXOpen::CAM::InspectionGroup * progGroup /** proggroup */ 
            );
            /**Returns  the tool group  <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * ToolGroup
            (
            );
            /**Sets  the tool group  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolGroup
            (
                NXOpen::CAM::InspectionGroup * toolGroup /** toolgroup */ 
            );
            /**Returns  the geometry group  <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * GeometryGroup
            (
            );
            /**Sets  the geometry group  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetGeometryGroup
            (
                NXOpen::CAM::InspectionGroup * geomGroup /** geomgroup */ 
            );
            /**Returns  the sensor group  <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * SensorGroup
            (
            );
            /**Sets  the sensor group  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSensorGroup
            (
                NXOpen::CAM::InspectionGroup * sensorGroup /** sensorgroup */ 
            );
            /**Returns  the method type name  <br> License requirements : None */
            public: NXString TypeName
            (
            );
            /**Sets  the method type name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTypeName
            (
                const NXString & typeName /** typename */ 
            );
            /** Returns the selected features method  @return  Selected feature method tags  <br> License requirements : None */
            public: std::vector<NXOpen::CAM::InspectionGroup *> GetFeatureMethods
            (
            );
            /** Sets the selected features method  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureMethods
            (
                const std::vector<NXOpen::CAM::InspectionGroup *> & featureMethods /** Selected feature method tags */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
