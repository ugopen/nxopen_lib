#ifndef NXOpen_CAM_STOCKPERPASSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_STOCKPERPASSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_StockPerPassBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_StockPerPassBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class StockPerPassBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _StockPerPassBuilderBuilder;
        class StockPerPassBuilderImpl;
        /** Represents a Builder which holds the data for a set of individual stock per pass.  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  StockPerPassBuilder : public Builder
        {
            private: StockPerPassBuilderImpl * m_stockperpassbuilder_impl;
            private: friend class  _StockPerPassBuilderBuilder;
            protected: StockPerPassBuilder();
            public: ~StockPerPassBuilder();
            /** Add a new item 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void Add
            (
                int passAfter /** the pass which new pass will be added after */,
                double stock /** the stock for new pass */
            );
            /** Modify item  <br> License requirements : cam_base ("CAM BASE") */
            public: void Modify
            (
                int pass /** the pass on which stock will be modified */,
                double stock /** the new value of stock */
            );
            /** Delete a item 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void Delete
            (
                int pass /** the pass to be deleted */
            );
            /** Move up a item 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void MoveUp
            (
                int pass /** the pass to be moved up */
            );
            /** Move down a item 
             @deprecated Deprecated in NX7.5.0 <br> 
             <br> License requirements : cam_base ("CAM BASE") */
            public:  NX_DEPRECATED("Deprecated in NX7.5.0") void MoveDown
            (
                int pass /** the pass to be moved down */
            );
            /** Update list dependent on rough and finish passes number.
                        Total pass number will be equal to (rough passes + finish passes -1),
                        so this function should be invoked as rough/finish passes changing  <br> License requirements : cam_base ("CAM BASE") */
            public: void UpdateList
            (
                int roughPass /** the rough passes */,
                int finishPass /** the finish passes */
            );
            /**Returns  the Tool Diameter. 
                        It is used to validate data of list items and should be 
                        consistant with tool diameter of main object. i.e wedm operation. So when 
                        tool diameter of main object is changed, it should be updated immediately.  <br> License requirements : cam_base ("CAM BASE") */
            public: double ToolDiameter
            (
            );
            /**Sets  the Tool Diameter. 
                        It is used to validate data of list items and should be 
                        consistant with tool diameter of main object. i.e wedm operation. So when 
                        tool diameter of main object is changed, it should be updated immediately.  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolDiameter
            (
                double diameter /** the tool diameter */
            );
            /** Get stock of the specific pass  @return  the stock of the pass <br> License requirements : cam_base ("CAM BASE") */
            public: double GetStockOfPass
            (
                int passIndex /** passindex */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
