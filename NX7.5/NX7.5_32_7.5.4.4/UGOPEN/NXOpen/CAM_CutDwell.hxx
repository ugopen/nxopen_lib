#ifndef NXOpen_CAM_CUTDWELL_HXX_INCLUDED
#define NXOpen_CAM_CUTDWELL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CutDwell.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CutDwell.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CutDwell;
    }
    namespace CAM
    {
        class _CutDwellBuilder;
        class CutDwellImpl;
        /**
            Represents a @link CAM::CutDwell CAM::CutDwell@endlink 
            */
        class NXOPENCPPEXPORT  CutDwell : public TaggedObject
        {
            /** the rough cut dwell mode options */
            public: enum Types
            {
                TypesNone/** Dwell after Rough Cut: None*/,
                TypesTime/** Dwell after Rough Cut: Time*/,
                TypesRevolutions/** Dwell after Rough Cut: Revolutions*/
            };

            private: CutDwellImpl * m_cutdwell_impl;
            private: friend class  _CutDwellBuilder;
            protected: CutDwell();
            public: ~CutDwell();
            /**Returns  the cut dwell type  <br> License requirements : None */
            public: NXOpen::CAM::CutDwell::Types Type
            (
            );
            /**Sets  the cut dwell type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::CAM::CutDwell::Types cutDwellValue /** the cut dwell type */
            );
            /**Returns  the cut dwell time  <br> License requirements : None */
            public: double Time
            (
            );
            /**Sets  the cut dwell time  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTime
            (
                double cutDwellTimeValue /** the cut dwell time */
            );
            /**Returns  the cut dwell revolutions  <br> License requirements : None */
            public: double Revolutions
            (
            );
            /**Sets  the cut dwell revolutions  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRevolutions
            (
                double cutDwellRevolutionsValue /** the cut dwell revolutions */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
