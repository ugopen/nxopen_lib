#ifndef NXOpen_CAM_TURNINGOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNINGOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurningOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurningOperationBuilder;
    }
    namespace CAM
    {
        class FeedsTurnBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class LayoutCiBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class _TurningOperationBuilderBuilder;
        class TurningOperationBuilderImpl;
        /** Represents a Turning Operation Builder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  TurningOperationBuilder : public CAM::OperationBuilder
        {
            /** The motion output options */
            public: enum MotionOutputOptions
            {
                MotionOutputOptionsLinearOnly/** Linear output only */,
                MotionOutputOptionsCircular/** Linear and circular motions output */
            };

            private: TurningOperationBuilderImpl * m_turningoperationbuilder_impl;
            private: friend class  _TurningOperationBuilderBuilder;
            protected: TurningOperationBuilder();
            public: ~TurningOperationBuilder();
            /**Returns  the feeds and speeds builder  <br> License requirements : None */
            public: NXOpen::CAM::FeedsTurnBuilder * FeedsBuilder
            (
            );
            /**Returns  the update IPW mode  <br> License requirements : None */
            public: bool UpdateIpw
            (
            );
            /**Sets  the update IPW mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUpdateIpw
            (
                bool updateIpwMode /** the update IPW mode */
            );
            /**Returns  the Layer and Layout  <br> License requirements : None */
            public: NXOpen::CAM::LayoutCiBuilder * LayoutAndLayer
            (
            );
            /**Returns  the Reorient Tool Holder toggle  <br> License requirements : None */
            public: bool ReorientToolHolder
            (
            );
            /**Sets  the Reorient Tool Holder toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReorientToolHolder
            (
                bool reorient /** Reorient Tool Holder */
            );
            /**Returns  the Tool Holder Angle <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ToolHolderAngle
            (
            );
            /**Returns  the Rotate Tracking Point toggle  <br> License requirements : None */
            public: bool RotateTrackingPoint
            (
            );
            /**Sets  the Rotate Tracking Point toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRotateTrackingPoint
            (
                bool rotate /** Rotate Tracking Point */
            );
            /**Returns  the Flip Tool Around Holder toggle <br> License requirements : None */
            public: bool FlipToolAroundHolder
            (
            );
            /**Sets  the Flip Tool Around Holder toggle <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFlipToolAroundHolder
            (
                bool machAAxis /** the machine's A-axis */
            );
            /**Returns  the Use Machine Cycle toggle  <br> License requirements : None */
            public: bool UseMachineCycle
            (
            );
            /**Sets  the Use Machine Cycle toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseMachineCycle
            (
                bool machineCycle /** the machine cycle */
            );
            /**Returns  the Additional Commands  <br> License requirements : None */
            public: NXString AdditionalCommands
            (
            );
            /**Sets  the Additional Commands  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAdditionalCommands
            (
                const NXString & additionalCommands /** the additional commands */
            );
            /**Returns  the motion output  <br> License requirements : None */
            public: NXOpen::CAM::TurningOperationBuilder::MotionOutputOptions MotionOutput
            (
            );
            /**Sets  the motion output  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMotionOutput
            (
                NXOpen::CAM::TurningOperationBuilder::MotionOutputOptions motionOutput /** the motion output */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
