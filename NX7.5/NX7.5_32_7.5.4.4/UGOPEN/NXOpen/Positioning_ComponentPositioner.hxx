#ifndef NXOpen_POSITIONING_COMPONENTPOSITIONER_HXX_INCLUDED
#define NXOpen_POSITIONING_COMPONENTPOSITIONER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_ComponentPositioner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Positioning_Positioner.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Positioning
    {
        class ComponentPositioner;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Positioning
    {
        class Positioner;
    }
    namespace Positioning
    {
        class _ComponentPositionerBuilder;
        class ComponentPositionerImpl;
        /**
          An instance of this class can be used to create @link Constraint Constraint@endlink s and
          associated objects.
         <br> To obtain an instance of this class, use @link Assemblies::ComponentAssembly::Positioner Assemblies::ComponentAssembly::Positioner@endlink  <br> */
        class NXOPENCPPEXPORT  ComponentPositioner : public Positioning::Positioner
        {
            private: ComponentPositionerImpl * m_componentpositioner_impl;
            private: friend class  _ComponentPositionerBuilder;
            protected: ComponentPositioner();
            public: ~ComponentPositioner();
            /**Returns  
                    the @link Assemblies::Arrangement Assemblies::Arrangement@endlink  in which the 
                    primary @link Positioning::Network Positioning::Network@endlink  will solve.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * PrimaryArrangement
            (
            );
            /**Sets  
                    the @link Assemblies::Arrangement Assemblies::Arrangement@endlink  in which the 
                    primary @link Positioning::Network Positioning::Network@endlink  will solve.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPrimaryArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /** The primary @link Assemblies::Arrangement Assemblies::Arrangement@endlink . */
            );
            /** 
                    Begins a mode of operation where (1) each new @link Positioning::Constraint Positioning::Constraint@endlink 
                    is created as transient and (2) a component transform is applied at the level where 
                    position is controlled for the component, typically in the component's immediate parent.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginMoveComponent
            (
            );
            /** 
                    Ends the mode of operation started by 
                    @link Positioning::ComponentPositioner::BeginMoveComponent Positioning::ComponentPositioner::BeginMoveComponent@endlink 
                    All constraints created while in that mode will be deleted.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndMoveComponent
            (
            );
            /** 
                    Begins a mode of operation where (1) each new @link Positioning::Constraint Positioning::Constraint@endlink 
                    created by this @link Positioning::ComponentPositioner Positioning::ComponentPositioner@endlink  applies to
                    components in the part of the positioner (or to components with variable component positioning
                    defined in the part of the positioner) and (2) and component transforms derived from
                    a @link Positioning::Network Positioning::Network@endlink  will apply to components in the part of the positioner.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginAssemblyConstraints
            (
            );
            /** 
                    Ends the mode of operation started by 
                    @link Positioning::ComponentPositioner::BeginAssemblyConstraints Positioning::ComponentPositioner::BeginAssemblyConstraints@endlink 
                    All non-persistent constraints in this @link Positioning::ComponentPositioner Positioning::ComponentPositioner@endlink 
                    will be deleted.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndAssemblyConstraints
            (
            );
            /**
                    Attempts to load all the parts that contain unloaded geometry that is referenced by the constraints
                    or by any related constraints. The constraints must be within the positioner otherwise an error will be
                    raised. Any constraints that are suppressed will be ignored.

                    If the number of constraints is zero then the function attempts to load the parts for every unsuppressed
                    constraint in the positioner.

                    Calling this function can cause objects to be logged for update and therefore the caller of this function
                    must call update.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void LoadConstraintGeometry
            (
                const std::vector<NXOpen::Positioning::ComponentConstraint *> & constraints /** Constraints */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
