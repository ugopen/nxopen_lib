#ifndef NXOpen_SIM_KINEMATICAXISBUILDER_HXX_INCLUDED
#define NXOpen_SIM_KINEMATICAXISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_KinematicAxisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace SIM
    {
        class KinematicAxisBuilder;
    }
    class Builder;
    namespace SIM
    {
        class KinematicJunction;
    }
    namespace SIM
    {
        class _KinematicAxisBuilderBuilder;
        class KinematicAxisBuilderImpl;
        /**  @brief  Represents the SimKimAxisBuilder class object  

            <br> Use the @link KinematicConfigurator KinematicConfigurator@endlink  class to create a KinematicAxisBuilder object. <br> */
        class NXOPENCPPEXPORT  KinematicAxisBuilder : public Builder
        {
            /** The axis direction type */
            public: enum AxisDirectionType
            {
                AxisDirectionTypePositiveX/** positive X-axis */,
                AxisDirectionTypeNegativeX/** negative X-axis */,
                AxisDirectionTypePositiveY/** positive Y-axis */,
                AxisDirectionTypeNegativeY/** negative Y-axis */,
                AxisDirectionTypePositiveZ/** positive Z-axis */,
                AxisDirectionTypeNegativeZ/** negative Z-axis */
            };

            /** The axis motions type */
            public: enum AxisMotionType
            {
                AxisMotionTypeLinearNcAxis/** linear NC-axis */,
                AxisMotionTypeRotaryNcAxis/** rotary NC-axis */,
                AxisMotionTypeLinear/** linear axis    */,
                AxisMotionTypeRotary/** rotary axis    */
            };

            private: KinematicAxisBuilderImpl * m_kinematicaxisbuilder_impl;
            private: friend class  _KinematicAxisBuilderBuilder;
            protected: KinematicAxisBuilder();
            public: ~KinematicAxisBuilder();
            /**Returns  the kinematic axis's name  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXString Name
            (
            );
            /**Sets  the kinematic axis's name  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetName
            (
                const NXString & name /** the axis's new name */
            );
            /**Returns  the junction  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::KinematicJunction * Junction
            (
            );
            /**Sets  the junction  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetJunction
            (
                NXOpen::SIM::KinematicJunction * jct /** the junction */
            );
            /**Returns  the axis direction  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::KinematicAxisBuilder::AxisDirectionType Direction
            (
            );
            /**Sets  the axis direction  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetDirection
            (
                NXOpen::SIM::KinematicAxisBuilder::AxisDirectionType axisDir /** the axis direction */
            );
            /**Returns  the axis motion  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::KinematicAxisBuilder::AxisMotionType Type
            (
            );
            /**Sets  the axis motion  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetType
            (
                NXOpen::SIM::KinematicAxisBuilder::AxisMotionType type /** the axis type */
            );
            /**Returns  the initial value  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: double InitialValue
            (
            );
            /**Sets  the initial value  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetInitialValue
            (
                double initial /** the initial value */
            );
            /**Returns  the axis limits flag  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool Limit
            (
            );
            /**Sets  the axis limits flag  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetLimit
            (
                bool onOff /** the axis limits flag */
            );
            /**Returns  the upper limit  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: double UpperLimit
            (
            );
            /**Sets  the upper limit  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetUpperLimit
            (
                double upper /** the upper limit */
            );
            /**Returns  the lower limit  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: double LowerLimit
            (
            );
            /**Sets  the lower limit  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetLowerLimit
            (
                double lower /** the lower limit */
            );
            /**Returns  the maximum velocity  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: double MaximumVelocity
            (
            );
            /**Sets  the maximum velocity  <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetMaximumVelocity
            (
                double velocity /** the maximum velocity */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
