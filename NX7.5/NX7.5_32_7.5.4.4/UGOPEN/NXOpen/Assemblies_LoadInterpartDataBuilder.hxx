#ifndef NXOpen_ASSEMBLIES_LOADINTERPARTDATABUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_LOADINTERPARTDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_LoadInterpartDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_LoadInterpartDataBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PartDelayedUpdateStatus.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class LoadInterpartDataBuilder;
    }
    class BasePart;
    class Builder;
    class PartDelayedUpdateStatus;
    class PartLoadStatus;
    namespace Assemblies
    {
        class _LoadInterpartDataBuilderBuilder;
        class LoadInterpartDataBuilderImpl;
        /** Represents a builder@link Assemblies::LoadInterpartDataBuilder Assemblies::LoadInterpartDataBuilder@endlink   <br> To create a new instance of this class, use @link Assemblies::AssemblyManager::CreateLoadInterpartDataBuilder Assemblies::AssemblyManager::CreateLoadInterpartDataBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        OpenUnloadedParents </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        SelectionScope </td> <td> 
         
        AllPartsInDisplayedAssembly </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  LoadInterpartDataBuilder : public Builder
        {
            /** Represents the load interpart selection scope types */
            public: enum SelectionScopeType
            {
                SelectionScopeTypeAllPartsInDisplayedAssembly/** Load interpart data 
                                                                                                                     for all parts in 
                                                                                                                     displayed assembly */,
                SelectionScopeTypeAllPartsInSession/** Load interpart data 
                                                                                                                     for all parts in session */
            };

            /** Represents the load interpart parent level types*/
            public: enum OpenUnloadedParentsType
            {
                OpenUnloadedParentsTypeNone/**Load all partially loaded parts 
                                                                                                          that contain links and all immediate 
                                                                                                          level parents parts if they are
                                                                                                          partially loaded*/,
                OpenUnloadedParentsTypeImmediateLevel/**Load all partially loaded parts 
                                                                                                          that contain links and all immediate 
                                                                                                          level parents parts regardless 
                                                                                                          of load status*/,
                OpenUnloadedParentsTypeAllLevels/**Load all partially loaded parts 
                                                                                                          that contain links and all level 
                                                                                                          parent parts regardless of load status*/
            };

            private: LoadInterpartDataBuilderImpl * m_loadinterpartdatabuilder_impl;
            private: friend class  _LoadInterpartDataBuilderBuilder;
            protected: LoadInterpartDataBuilder();
            public: ~LoadInterpartDataBuilder();
            /**Returns  the selection scope type <br> License requirements : None */
            public: NXOpen::Assemblies::LoadInterpartDataBuilder::SelectionScopeType SelectionScope
            (
            );
            /**Sets  the selection scope type <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSelectionScope
            (
                NXOpen::Assemblies::LoadInterpartDataBuilder::SelectionScopeType selectionScope /** selectionscope */ 
            );
            /**Returns  the open unloaded parents level type  <br> License requirements : None */
            public: NXOpen::Assemblies::LoadInterpartDataBuilder::OpenUnloadedParentsType OpenUnloadedParents
            (
            );
            /**Sets  the open unloaded parents level type  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetOpenUnloadedParents
            (
                NXOpen::Assemblies::LoadInterpartDataBuilder::OpenUnloadedParentsType openUnloadedParents /** openunloadedparents */ 
            );
            /**Returns an array of the parts that failed to load and update  @return  Array of the part tags failed to 
                                                                                                load and update <br> License requirements : None */
            public: std::vector<NXOpen::BasePart *> GetFailedParts
            (
            );
            /**Returns part load status and delayed update status for the part which failed to load and update <br> License requirements : None */
            public: void GetLoadInterpartDataStatus
            (
                NXOpen::BasePart * part /** Failed part tag*/,
                NXOpen::PartLoadStatus ** loadStatus /** Part load status for the failed part*/,
                NXOpen::PartDelayedUpdateStatus ** delayedUpdateStatus /** Delayed update status data status for the failed part*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
