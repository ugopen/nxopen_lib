#ifndef NXOpen_CAE_PRETESTSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PRETESTSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PreTestSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_PreTestSolutionBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class PreTestSolutionBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _PreTestSolutionBuilderBuilder;
        class PreTestSolutionBuilderImpl;
        /** Represents a @link CAE::PreTestSolution CAE::PreTestSolution@endlink  builder  <br> To create a new instance of this class, use @link CAE::PreTestSolutionCollection::CreatePretestBuilder CAE::PreTestSolutionCollection::CreatePretestBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  PreTestSolutionBuilder : public Builder
        {
            /** Enum type for the complex mode conversion settings */
            public: enum ModeConversionType
            {
                ModeConversionTypeSignedAmplitude/** No triax sensors required */,
                ModeConversionTypeComplexTransform/** All sensors must be triax */
            };

            private: PreTestSolutionBuilderImpl * m_pretestsolutionbuilder_impl;
            private: friend class  _PreTestSolutionBuilderBuilder;
            protected: PreTestSolutionBuilder();
            public: ~PreTestSolutionBuilder();
            /**Returns  the pre-test name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the pre-test name  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the pre-test working solution  <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * Solution
            (
            );
            /**Sets  the pre-test working solution  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetSolution
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /**Returns  the low-frequency filtering option  <br> License requirements : None */
            public: bool LowFrequencyFilteringMode
            (
            );
            /**Sets  the low-frequency filtering option  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyFilteringMode
            (
                bool lowFrequencyFilteringMode /** lowfrequencyfilteringmode */ 
            );
            /**Returns  the low-frequency cutoff  <br> License requirements : None */
            public: double LowFrequencyCutoff
            (
            );
            /**Sets  the low-frequency cutoff  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
            /**Returns  the high-frequency filtering option  <br> License requirements : None */
            public: bool HighFrequencyFilteringMode
            (
            );
            /**Sets  the high-frequency filtering option  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyFilteringMode
            (
                bool highFrequencyFilteringMode /** highfrequencyfilteringmode */ 
            );
            /**Returns  the high-frequency cutoff  <br> License requirements : None */
            public: double HighFrequencyCutoff
            (
            );
            /**Sets  the high-frequency cutoff  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
