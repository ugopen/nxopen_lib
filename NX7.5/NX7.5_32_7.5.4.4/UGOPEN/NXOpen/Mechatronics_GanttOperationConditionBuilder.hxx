#ifndef NXOpen_MECHATRONICS_GANTTOPERATIONCONDITIONBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_GANTTOPERATIONCONDITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_GanttOperationConditionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Mechatronics_GanttOperationConditionBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Mechatronics
    {
        class GanttOperationConditionBuilder;
    }
    class Builder;
    class NXObject;
    namespace Mechatronics
    {
        class _GanttOperationConditionBuilderBuilder;
        class GanttOperationConditionBuilderImpl;
        /** Represents a @link Mechatronics::GanttOperationConditionBuilder Mechatronics::GanttOperationConditionBuilder@endlink   <br> To create a new instance of this class, use @link Mechatronics::GanttCollection::CreateGanttOperationConditionBuilder Mechatronics::GanttCollection::CreateGanttOperationConditionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  GanttOperationConditionBuilder : public Builder
        {
            private: GanttOperationConditionBuilderImpl * m_ganttoperationconditionbuilder_impl;
            private: friend class  _GanttOperationConditionBuilderBuilder;
            protected: GanttOperationConditionBuilder();
            public: ~GanttOperationConditionBuilder();
            /**Returns  The sequence number of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: int Index
            (
            );
            /**Sets  The sequence number of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetIndex
            (
                int ind /** ind */ 
            );
            /**Returns  the id of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString ConditionId
            (
            );
            /**Sets  the id of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetConditionId
            (
                const NXString & id /** id */ 
            );
            /**Returns  condition type, if the condition is a group, the value is 'true'  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: bool IsGroup
            (
            );
            /**Sets  condition type, if the condition is a group, the value is 'true'  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetGroup
            (
                bool isGroup /** isgroup */ 
            );
            /**Returns  the parent id of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString ParentId
            (
            );
            /**Sets  the parent id of condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetParentId
            (
                const NXString & parentId /** parent id */ 
            );
            /**Returns  the judging condition from current condition,the value can be 'And' or 'Or'  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString Condition
            (
            );
            /**Sets  the judging condition from current condition,the value can be 'And' or 'Or'  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCondition
            (
                const NXString & strCondition /** strcondition */ 
            );
            /**Returns  the conditin object :it can be a physics object(Rigid Body, 
                        Collision, Constraints, Joints etc.), FunctionTable.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::NXObject * PhysicsObject
            (
            );
            /**Sets  the conditin object :it can be a physics object(Rigid Body, 
                        Collision, Constraints, Joints etc.), FunctionTable.  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetPhysicsObject
            (
                NXOpen::NXObject * physObj /** phys obj */ 
            );
            /**Returns  the selected property id in physics object  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: int PropertyId
            (
            );
            /**Sets  the selected property id in physics object  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetPropertyId
            (
                int prop /** prop */ 
            );
            /**Returns  the name of selected property  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString PropertyName
            (
            );
            /**Sets  the name of selected property  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetPropertyName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the operator of current condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString OperatorValue
            (
            );
            /**Sets  the operator of current condition  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetOperatorValue
            (
                const NXString & strOperator /** stroperator */ 
            );
            /**Returns  the condition value use to evaluate this condition for the selected property in condition object  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXString ConditionValue
            (
            );
            /**Sets  the condition value use to evaluate this condition for the selected property in condition object  <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetConditionValue
            (
                const NXString & strValue /** strvalue */ 
            );
            /**Returns  the condition value use to evaluate this condition for the selected property in condition object.
                        If selected property value type is not object, this property should be null, it can be a physics 
                        object(Rigid Body, Collision, Constraints, Joints etc.), Function Table, Material etc. <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::NXObject * ObjectValue
            (
            );
            /**Sets  the condition value use to evaluate this condition for the selected property in condition object.
                        If selected property value type is not object, this property should be null, it can be a physics 
                        object(Rigid Body, Collision, Constraints, Joints etc.), Function Table, Material etc. <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetObjectValue
            (
                NXOpen::NXObject * objValue /** objvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
