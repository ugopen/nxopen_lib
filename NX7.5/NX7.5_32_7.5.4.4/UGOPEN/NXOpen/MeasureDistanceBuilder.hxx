#ifndef NXOpen_MEASUREDISTANCEBUILDER_HXX_INCLUDED
#define NXOpen_MEASUREDISTANCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeasureDistanceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureBuilder.hxx>
#include <NXOpen/MeasureDistanceBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class MeasureDistanceBuilder;
    class Direction;
    class MeasureBuilder;
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    class _MeasureDistanceBuilderBuilder;
    class MeasureDistanceBuilderImpl;
    /**
    Represents a @link MeasureDistanceBuilder MeasureDistanceBuilder@endlink 
     <br> To create a new instance of this class, use @link MeasureManager::CreateMeasureDistanceBuilder MeasureManager::CreateMeasureDistanceBuilder@endlink  <br> */
    class NXOPENCPPEXPORT  MeasureDistanceBuilder : public MeasureBuilder
    {
        /** the type of distance measurement */
        public: enum DistanceType
        {
            DistanceTypeDistance/** distance */ ,
            DistanceTypeProjectedDistance/** projected distance */ ,
            DistanceTypeScreenDistance/** screen distance */ ,
            DistanceTypeLength/** length */ ,
            DistanceTypeRadius/** radius */ ,
            DistanceTypePointsOnCurves/** points on curves */ ,
            DistanceTypeRoutingPathLength/** routing path length */ ,
            DistanceTypeBetweenSets/** between sets */ 
        };

        /** the subtype of distance measurement */
        public: enum MeasureType
        {
            MeasureTypeToAPoint/** to apoint */ ,
            MeasureTypeMinimum/** minimum */ ,
            MeasureTypeLocalMinimum/** local minimum */ ,
            MeasureTypeMaximum/** maximum */ ,
            MeasureTypeMinClearance/** min clearance */ ,
            MeasureTypeMaxClearance/** max clearance */ 
        };

        private: MeasureDistanceBuilderImpl * m_measuredistancebuilder_impl;
        private: friend class  _MeasureDistanceBuilderBuilder;
        protected: MeasureDistanceBuilder();
        public: ~MeasureDistanceBuilder();
        /**Returns  the projection vector  <br> License requirements : None */
        public: NXOpen::Direction * ProjectionVector
        (
        );
        /**Sets  the projection vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetProjectionVector
        (
            NXOpen::Direction * projectionVector /** projectionvector */ 
        );
        /**Returns  the object1  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Object1
        (
        );
        /**Returns  the object2  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * Object2
        (
        );
        /**Returns  the length objects  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObjectList * LengthObjects
        (
        );
        /**Returns  the radius objects  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObject * RadiusObjects
        (
        );
        /**Returns  the set1  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObjectList * Set1
        (
        );
        /**Returns  the set2  <br> License requirements : None */
        public: NXOpen::SelectDisplayableObjectList * Set2
        (
        );
        /**Returns  the mtype  <br> License requirements : None */
        public: NXOpen::MeasureDistanceBuilder::MeasureType Mtype
        (
        );
        /**Sets  the mtype  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetMtype
        (
            NXOpen::MeasureDistanceBuilder::MeasureType mtype /** mtype */ 
        );
        /**Returns  the exact flag  <br> License requirements : None */
        public: bool IsExact
        (
        );
        /**Sets  the exact flag  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetExact
        (
            bool isExact /** isexact */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
