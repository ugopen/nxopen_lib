#ifndef NXOpen_MOTION_JOINTFRICTIONRECURDYN_HXX_INCLUDED
#define NXOpen_MOTION_JOINTFRICTIONRECURDYN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_JointFrictionRecurDyn.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class JointFrictionRecurDyn;
    }
    namespace Motion
    {
        class _JointFrictionRecurDynBuilder;
        class JointFrictionRecurDynImpl;
        /** Represents a recurdyn joint friction object */
        class NXOPENCPPEXPORT  JointFrictionRecurDyn : public TaggedObject
        {
            /** Joint friction effect */
            public: enum FrictionEffect
            {
                FrictionEffectAll/** all */ ,
                FrictionEffectStiction/** stiction */ ,
                FrictionEffectSliding/** sliding */ 
            };

            /** Joint friction yoke type */
            public: enum FrictionYokeType
            {
                FrictionYokeTypeI/** i */ ,
                FrictionYokeTypeJ/** j */ 
            };

            /** Joint friction overlap_delta */
            public: enum FrictionOverlapDelta
            {
                FrictionOverlapDeltaConstant/** constant */ ,
                FrictionOverlapDeltaIncrease/** increase */ ,
                FrictionOverlapDeltaDecrease/** decrease */ 
            };

            private: JointFrictionRecurDynImpl * m_jointfrictionrecurdyn_impl;
            private: friend class  _JointFrictionRecurDynBuilder;
            protected: JointFrictionRecurDyn();
            public: ~JointFrictionRecurDyn();
            /**Returns  the mu_static  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double MuStatic
            (
            );
            /**Sets  the mu_static  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMuStatic
            (
                double muStatic /** mu static */ 
            );
            /**Returns  the mu_dynamic  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double MuDynamic
            (
            );
            /**Sets  the mu_dynamic  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMuDynamic
            (
                double muDynamic /** mu dynamic */ 
            );
            /**Returns  the stiction_transition_velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double StictionTransitionVelocity
            (
            );
            /**Sets  the stiction_transition_velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStictionTransitionVelocity
            (
                double stictionTransitionVelocity /** stiction transition velocity */ 
            );
            /**Returns  the max_stiction_deformation  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double MaxStictionDeformation
            (
            );
            /**Sets  the max_stiction_deformation  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxStictionDeformation
            (
                double maxStictionDeformation /** max stiction deformation */ 
            );
            /**Returns  the effect  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::JointFrictionRecurDyn::FrictionEffect Effect
            (
            );
            /**Sets  the effect  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEffect
            (
                NXOpen::Motion::JointFrictionRecurDyn::FrictionEffect effect /** effect */ 
            );
            /**Returns  the preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool Preload
            (
            );
            /**Sets  the preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPreload
            (
                bool preload /** preload */ 
            );
            /**Returns  the reaction_force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool ReactionForce
            (
            );
            /**Sets  the reaction_force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionForce
            (
                bool reactionForce /** reaction force */ 
            );
            /**Returns  the bend_moment  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool BendMoment
            (
            );
            /**Sets  the bend_moment  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBendMoment
            (
                bool bendMoment /** bend moment */ 
            );
            /**Returns  the torsional_moment  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool TorsionalMoment
            (
            );
            /**Sets  the torsional_moment  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTorsionalMoment
            (
                bool torsionalMoment /** torsional moment */ 
            );
            /**Returns  the static_equ  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StaticEqu
            (
            );
            /**Sets  the static_equ  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticEqu
            (
                bool staticEqu /** static equ */ 
            );
            /**Returns  the yoke_type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::JointFrictionRecurDyn::FrictionYokeType YokeType
            (
            );
            /**Sets  the yoke_type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetYokeType
            (
                NXOpen::Motion::JointFrictionRecurDyn::FrictionYokeType yokeType /** yoke type */ 
            );
            /**Returns  the ball_radius  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double BallRadius
            (
            );
            /**Sets  the ball_radius  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBallRadius
            (
                double ballRadius /** ball radius */ 
            );
            /**Returns  the pin_radius  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double PinRadius
            (
            );
            /**Sets  the pin_radius  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPinRadius
            (
                double pinRadius /** pin radius */ 
            );
            /**Returns  the bending_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double BendingArm
            (
            );
            /**Sets  the bending_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBendingArm
            (
                double bendingArm /** bending arm */ 
            );
            /**Returns  the friction_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double FrictionArm
            (
            );
            /**Sets  the friction_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrictionArm
            (
                double frictionArm /** friction arm */ 
            );
            /**Returns  the reaction_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double ReactionArm
            (
            );
            /**Sets  the reaction_arm  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionArm
            (
                double reactionArm /** reaction arm */ 
            );
            /**Returns  the initial_overlap  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double InitialOverlap
            (
            );
            /**Sets  the initial_overlap  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInitialOverlap
            (
                double initialOverlap /** initial overlap */ 
            );
            /**Returns  the force_preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double ForcePreload
            (
            );
            /**Sets  the force_preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForcePreload
            (
                double forcePreload /** force preload */ 
            );
            /**Returns  the torque_preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double TorquePreload
            (
            );
            /**Sets  the torque_preload  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTorquePreload
            (
                double torquePreload /** torque preload */ 
            );
            /**Returns  the overlap_delta  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::JointFrictionRecurDyn::FrictionOverlapDelta OverlapDelta
            (
            );
            /**Sets  the overlap_delta  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetOverlapDelta
            (
                NXOpen::Motion::JointFrictionRecurDyn::FrictionOverlapDelta overlapDelta /** overlap delta */ 
            );
            /**Returns  the max friction force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double MaxFrictionForce
            (
            );
            /**Sets  the max friction force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxFrictionForce
            (
                double maxFrictionForce /** max friction force */ 
            );
            /**Returns  the enable force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool EnableForce
            (
            );
            /**Sets  the enable force  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableForce
            (
                bool enableForce /** enable force */ 
            );
            /**Returns  the max friction torque  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double MaxFrictionTorque
            (
            );
            /**Sets  the max friction torque  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxFrictionTorque
            (
                double maxFrictionTorque /** max friction torque */ 
            );
            /**Returns  the enable torque  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool EnableTorque
            (
            );
            /**Sets  the enable torque  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableTorque
            (
                bool enableTorque /** enable torque */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
