#ifndef NXOpen_CAM_PROBEINSPECTBOREBOSSMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_PROBEINSPECTBOREBOSSMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ProbeInspectBorebossMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ProbeControlParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeInspectBorebossMoveBuilder.hxx>
#include <NXOpen/CAM_ProbeProtectedParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeStockParametersBuilder.hxx>
#include <NXOpen/CAM_ProbeToleranceParametersBuilder.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ProbeInspectBorebossMoveBuilder;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    namespace CAM
    {
        class ProbeControlParametersBuilder;
    }
    namespace CAM
    {
        class ProbeProtectedParametersBuilder;
    }
    namespace CAM
    {
        class ProbeStockParametersBuilder;
    }
    namespace CAM
    {
        class ProbeToleranceParametersBuilder;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _ProbeInspectBorebossMoveBuilderBuilder;
        class ProbeInspectBorebossMoveBuilderImpl;
        /** Represents the Probe Inspect Bore Boss Move Builder  <br> To create a new instance of this class, use @link CAM::MoveCollection::CreateProbeInspectBorebossMoveBuilder CAM::MoveCollection::CreateProbeInspectBorebossMoveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ProbeInspectBorebossMoveBuilder : public CAM::MoveBuilder
        {
            /** the geometry type */
            public: enum Geometry
            {
                GeometryCylinder/** Cylinder */,
                GeometryPoint/** Point */
            };

            /** the cycle type */
            public: enum Cycle
            {
                CycleBore/** Bore */,
                CycleBoss/** Boss */
            };

            /** the angle type */
            public: enum Angle
            {
                AnglePredefined/** Predefined angles */,
                AngleCustom/** Custom angles */
            };

            /** the depth type */
            public: enum Depth
            {
                DepthMidpoint/** Midpoint of cylinder */,
                DepthSpecify/** Specify distance */
            };

            private: ProbeInspectBorebossMoveBuilderImpl * m_probeinspectborebossmovebuilder_impl;
            private: friend class  _ProbeInspectBorebossMoveBuilderBuilder;
            protected: ProbeInspectBorebossMoveBuilder();
            public: ~ProbeInspectBorebossMoveBuilder();
            /**Returns  the point defining the cylinder to inspect  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point defining the cylinder to inspect  <br> License requirements : None */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the cylinder to inspect  <br> License requirements : None */
            public: NXOpen::NXObject * Cylinder
            (
            );
            /**Sets  the cylinder to inspect  <br> License requirements : None */
            public: void SetCylinder
            (
                NXOpen::NXObject * face /** face */ 
            );
            /**Returns  the arc vector defining the cylinder to inspect  <br> License requirements : None */
            public: NXOpen::NXObject * ArcVector
            (
            );
            /**Sets  the arc vector defining the cylinder to inspect  <br> License requirements : None */
            public: void SetArcVector
            (
                NXOpen::NXObject * vector /** vector */ 
            );
            /**Returns  the geometry type  <br> License requirements : None */
            public: NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Geometry GeometryType
            (
            );
            /**Sets  the geometry type  <br> License requirements : None */
            public: void SetGeometryType
            (
                NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Geometry geomType /** geomtype */ 
            );
            /**Returns  the cycle type  <br> License requirements : None */
            public: NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Cycle CycleType
            (
            );
            /**Sets  the cycle type  <br> License requirements : None */
            public: void SetCycleType
            (
                NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Cycle cycleType /** cycletype */ 
            );
            /**Returns  the diameter defining the cylinder to probe  <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the diameter defining the cylinder to probe  <br> License requirements : None */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the depth type  <br> License requirements : None */
            public: NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Depth DepthType
            (
            );
            /**Sets  the depth type  <br> License requirements : None */
            public: void SetDepthType
            (
                NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Depth depthType /** depthtype */ 
            );
            /**Returns  the probing depth  <br> License requirements : None */
            public: double MeasurementDepth
            (
            );
            /**Sets  the probing depth  <br> License requirements : None */
            public: void SetMeasurementDepth
            (
                double measurementDepth /** measurement depth */ 
            );
            /**Returns  the angle type  <br> License requirements : None */
            public: NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Angle AngleType
            (
            );
            /**Sets  the angle type  <br> License requirements : None */
            public: void SetAngleType
            (
                NXOpen::CAM::ProbeInspectBorebossMoveBuilder::Angle angleType /** angletype */ 
            );
            /**Returns  the 1st custom angle to probe at  <br> License requirements : None */
            public: double Angle1
            (
            );
            /**Sets  the 1st custom angle to probe at  <br> License requirements : None */
            public: void SetAngle1
            (
                double angle1 /** angle1 */ 
            );
            /**Returns  the 2nd custom angle to probe at  <br> License requirements : None */
            public: double Angle2
            (
            );
            /**Sets  the 2nd custom angle to probe at  <br> License requirements : None */
            public: void SetAngle2
            (
                double angle2 /** angle2 */ 
            );
            /**Returns  the 3rd custom angle to probe at  <br> License requirements : None */
            public: double Angle3
            (
            );
            /**Sets  the 3rd custom angle to probe at  <br> License requirements : None */
            public: void SetAngle3
            (
                double angle3 /** angle3 */ 
            );
            /**Returns  the probe protected parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeProtectedParametersBuilder * ProbeProtectedParameters
            (
            );
            /**Returns  the probe control  parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeControlParametersBuilder * ProbeControlParameters
            (
            );
            /**Returns  the probe stock  parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeStockParametersBuilder * ProbeStockParameters
            (
            );
            /**Returns  the probe tolerance parameters builder  <br> License requirements : None */
            public: NXOpen::CAM::ProbeToleranceParametersBuilder * ProbeToleranceParameters
            (
            );
            /**Returns  the radial clearance from nominal target surface  <br> License requirements : None */
            public: double BossDimension
            (
            );
            /**Sets  the radial clearance from nominal target surface  <br> License requirements : None */
            public: void SetBossDimension
            (
                double radialClearance /** radialclearance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
