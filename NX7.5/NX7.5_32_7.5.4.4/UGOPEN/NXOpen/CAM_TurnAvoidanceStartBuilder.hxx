#ifndef NXOpen_CAM_TURNAVOIDANCESTARTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNAVOIDANCESTARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnAvoidanceStartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnAvoidanceStartBuilder;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _TurnAvoidanceStartBuilderBuilder;
        class TurnAvoidanceStartBuilderImpl;
        /** Represents an avoidance start Builder */
        class NXOPENCPPEXPORT  TurnAvoidanceStartBuilder : public TaggedObject
        {
            /** The start point motion type options */
            public: enum StartPointMotionTypes
            {
                StartPointMotionTypesNone/** Point is inactive. */,
                StartPointMotionTypesDirect/** Motion type: Direct to point. */,
                StartPointMotionTypesRadialThenAxial/** Motion type: Radial then axial to point. */,
                StartPointMotionTypesAxialThenRadial/** Motion type: Axial then axial to point. */,
                StartPointMotionTypesClearRadialThenDirect/** Motion type: Radial to clearance plane then direct to point. */,
                StartPointMotionTypesClearAxialThenDirect/** Motion type: Axial to clearance plane then direct to point. */
            };

            /** the start point mode options */
            public: enum StartPointModes
            {
                StartPointModesPoint/** Point is defined by point. */,
                StartPointModesDeltaAngleDistance/** Point is defined by angle and distance. */,
                StartPointModesDeltaVectorDistance/** Point is defined by vector and distance. */,
                StartPointModesDeltaMove/** Point is defined by delta move (X and Y coordinate). */
            };

            private: TurnAvoidanceStartBuilderImpl * m_turnavoidancestartbuilder_impl;
            private: friend class  _TurnAvoidanceStartBuilderBuilder;
            protected: TurnAvoidanceStartBuilder();
            public: ~TurnAvoidanceStartBuilder();
            /**Returns  the start point motion type  <br> License requirements : None */
            public: NXOpen::CAM::TurnAvoidanceStartBuilder::StartPointMotionTypes StartPointMotionType
            (
            );
            /**Sets  the start point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPointMotionType
            (
                NXOpen::CAM::TurnAvoidanceStartBuilder::StartPointMotionTypes startPointMotionType /** the start point motion type value */
            );
            /**Returns  the start point mode  <br> License requirements : None */
            public: NXOpen::CAM::TurnAvoidanceStartBuilder::StartPointModes StartPointMode
            (
            );
            /**Sets  the start point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPointMode
            (
                NXOpen::CAM::TurnAvoidanceStartBuilder::StartPointModes startPointMode /** the start point mode value */
            );
            /**Returns  the start point  <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** the start point value */
            );
            /**Returns  the start delta angle  <br> License requirements : None */
            public: double StartDeltaAngle
            (
            );
            /**Sets  the start delta angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaAngle
            (
                double startDeltaAngle /** the start delta angle value */
            );
            /**Returns  the start delta distance  <br> License requirements : None */
            public: double StartDeltaDistance
            (
            );
            /**Sets  the start delta distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaDistance
            (
                double startDeltaDistance /** the start delta distance value */
            );
            /**Returns  the start delta vector  <br> License requirements : None */
            public: NXOpen::NXObject * StartDeltaVector
            (
            );
            /**Sets  the start delta vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaVector
            (
                NXOpen::NXObject * startDeltaVector /** the start delta vector value */
            );
            /**Returns  the start delta X  <br> License requirements : None */
            public: double StartDeltaX
            (
            );
            /**Sets  the start delta X  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaX
            (
                double startDeltaX /** the start delta x value */
            );
            /**Returns  the start delta Y  <br> License requirements : None */
            public: double StartDeltaY
            (
            );
            /**Sets  the start delta Y  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaY
            (
                double startDeltaY /** the start delta x value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
