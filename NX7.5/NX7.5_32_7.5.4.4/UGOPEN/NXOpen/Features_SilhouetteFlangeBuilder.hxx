#ifndef NXOpen_FEATURES_SILHOUETTEFLANGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SILHOUETTEFLANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SilhouetteFlangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SilhouetteFlangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SilhouetteFlangeBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _SilhouetteFlangeBuilderBuilder;
        class SilhouetteFlangeBuilderImpl;
        /**
            Represents a @link Features::SilhouetteFlange Features::SilhouetteFlange@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSilhouetteFlangeBuilder Features::FeatureCollection::CreateSilhouetteFlangeBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleLaw.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        AngleLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        AngleLaw.Parameter </td> <td> 
         
        t </td> </tr> 

        <tr><td> 
         
        BaseFactor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        BasePipeContinuity.ContinuityType </td> <td> 
         
        G1 </td> </tr> 

        <tr><td> 
         
        CreateCurves </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ExtendFlange </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FlangeFactor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FlangePipeContinuity.ContinuityType </td> <td> 
         
        G0 </td> </tr> 

        <tr><td> 
         
        Gap.Value </td> <td> 
         
        5 (millimeters part), 0.2 (inches part) </td> </tr> 

        <tr><td> 
         
        LengthLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        MergeFacesIfPossible </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RadiusLaw.LawType </td> <td> 
         
        MultiTransition </td> </tr> 

        <tr><td> 
         
        ReferenceDirectionOption </td> <td> 
         
        NormalDraft </td> </tr> 

        <tr><td> 
         
        ShowPipe </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TrimBaseFaces </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        Basic </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  SilhouetteFlangeBuilder : public Features::FeatureBuilder
        {
            /** Silhouette flange creation types */
            public: enum Types
            {
                TypesBasic/** Basic Silhouette Flange */,
                TypesAbsoluteGap/** Absolute gap Silhouette Flange */,
                TypesVisualGap/** Visual gap Silhouette Flange */
            };

            /** Reference direction options */
            public: enum ReferenceDirectionOptions
            {
                ReferenceDirectionOptionsFaceNormal/** Create flange along face normal */,
                ReferenceDirectionOptionsVector/** Create flange along reference vector */,
                ReferenceDirectionOptionsNormalDraft/** Create flange along silhouette curve and face normal */,
                ReferenceDirectionOptionsVectorDraft/** Create flange along silhouette curve and reference vector */
            };

            /** Output surface options */
            public: enum OutputSurfaceOptions
            {
                OutputSurfaceOptionsBlendFlange/** Output blend and flange surfaces */,
                OutputSurfaceOptionsPipeOnly/** Output pipe */,
                OutputSurfaceOptionsFlangeOnly/** Output flange surface */
            };

            private: SilhouetteFlangeBuilderImpl * m_silhouetteflangebuilder_impl;
            private: friend class  _SilhouetteFlangeBuilderBuilder;
            protected: SilhouetteFlangeBuilder();
            public: ~SilhouetteFlangeBuilder();
            /**Returns  the base curves. Base curves must be G1 continuous.  <br> License requirements : None */
            public: NXOpen::Section * BaseCurves
            (
            );
            /**Returns  the parent feature. Parent feature must be a Silhouette
                    Flange feature. A @link Features::SilhouetteFlangeBuilder::TypesVisualGap Features::SilhouetteFlangeBuilder::TypesVisualGap@endlink 
                    silhouette flange and its parent Silhouette Flange feature should use parallel vectors as reference direction.  <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * ParentFeature
            (
            );
            /**Returns  the base faces. The base faces could be from different
                    sheet bodies, but they must be G1 continuous.  <br> License requirements : None */
            public: NXOpen::ScCollector * BaseFaces
            (
            );
            /**Returns  the reference direction option  <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptions ReferenceDirectionOption
            (
            );
            /**Sets  the reference direction option  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetReferenceDirectionOption
            (
                NXOpen::Features::SilhouetteFlangeBuilder::ReferenceDirectionOptions referenceDirectionOption /** referencedirectionoption */ 
            );
            /**Returns  the reference faces. If any reference face is selected for
                    @link Features::SilhouetteFlangeBuilder::ReferenceDirectionOptionsFaceNormal Features::SilhouetteFlangeBuilder::ReferenceDirectionOptionsFaceNormal@endlink 
                    case, the normal of reference face is used as the reference
                    direction. Otherwise, the normal of base faces will be used as the reference direction.  <br> License requirements : None */
            public: NXOpen::ScCollector * ReferenceFaces
            (
            );
            /**Returns  the reference vector  <br> License requirements : None */
            public: NXOpen::Direction * ReferenceVector
            (
            );
            /**Sets  the reference vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetReferenceVector
            (
                NXOpen::Direction * referenceVctor /** referencevctor */ 
            );
            /**Returns  the radius law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink .  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RadiusLaw
            (
            );
            /**Returns  the length law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink .  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * LengthLaw
            (
            );
            /**Returns  the angle law. The only supported law type is 
                    @link GeometricUtilities::LawBuilder::TypeMultiTransition GeometricUtilities::LawBuilder::TypeMultiTransition@endlink .  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * AngleLaw
            (
            );
            /** Update the spine curve in length/angle/radius laws. All
                    laws use the center line curve of the pipe as the spine curve. This API
                    should be called if the pipe should be reconstructed due to any
                    input change.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateLawSpine
            (
            );
            /**Returns  the gap  <br> License requirements : None */
            public: NXOpen::Expression * Gap
            (
            );
            /** A value indicating whether to flip the direction. If the
                    direction is flipped, the pipe is placed to the opposite side of base faces and flange direction is flipped.  @return   <br> License requirements : None */
            public: bool GetIsDirectionFlipped
            (
            );
            /**Sets a flag indicating if the direction is flipped.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetIsDirectionFlipped
            (
                bool flipDirection /** flipdirection */ 
            );
            /**Returns a value indicating whether to flip the side. If the side
                    is flipped, the pipe is placed to the other side of base
                    curves for Basic Type and 
                    the other side of the pipe of the parent feature for Absolute/Visual Gap Type.  @return   <br> License requirements : None */
            public: bool GetIsSideFlipped
            (
            );
            /** Sets a value indicating whether to flip the side. If the side
                    is flipped, the pipe is placed to the other side of base
                    curves for Basic Type and 
                    the other side of the pipe of the parent feature for Absolute/Visual Gap Type. <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetIsSideFlipped
            (
                bool flipSide /** flipside */ 
            );
            /**Returns  the base pipe continuity.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * BasePipeContinuity
            (
            );
            /**Returns  the base pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to build
                    the transition surface between the base faces and the pipe.  <br> License requirements : None */
            public: int BaseFactor
            (
            );
            /**Sets  the base pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to build
                    the transition surface between the base faces and the pipe.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetBaseFactor
            (
                int baseFactor /** basefactor */ 
            );
            /**Returns  the flange pipe continuity  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * FlangePipeContinuity
            (
            );
            /**Returns  the flange pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to
                    build the transition surface between the pipe and flange surface.  <br> License requirements : None */
            public: int FlangeFactor
            (
            );
            /**Sets  the flange pipe continuity factor. It's used to determine
                    what percentage of the arc will be trimmed away in order to
                    build the transition surface between the pipe and flange surface.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetFlangeFactor
            (
                int flangeFactor /** flangefactor */ 
            );
            /**Returns  the output surface option  <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::OutputSurfaceOptions OutputSurfaceOption
            (
            );
            /**Sets  the output surface option  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetOutputSurfaceOption
            (
                NXOpen::Features::SilhouetteFlangeBuilder::OutputSurfaceOptions outputSurfaceOption /** outputsurfaceoption */ 
            );
            /**Returns  a value that indicates whether to trim base faces  <br> License requirements : None */
            public: bool TrimBaseFaces
            (
            );
            /**Sets  a value that indicates whether to trim base faces  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetTrimBaseFaces
            (
                bool trimBaseFaces /** trimbasefaces */ 
            );
            /**Returns  a value that indicates whether to the merge faces if possible   <br> License requirements : None */
            public: bool MergeFacesIfPossible
            (
            );
            /**Sets  a value that indicates whether to the merge faces if possible   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetMergeFacesIfPossible
            (
                bool mergeFacesIfPossible /** mergefacesifpossible */ 
            );
            /**Returns  a value that indicates whether to extend flange until the
                    boundary edges of the base faces. This option will be enforced
                    if Trim Base Faces option is true. The base faces cannot be
                    trimmed if the pipe does not hit the boundary edges of base faces.  <br> License requirements : None */
            public: bool ExtendFlange
            (
            );
            /**Sets  a value that indicates whether to extend flange until the
                    boundary edges of the base faces. This option will be enforced
                    if Trim Base Faces option is true. The base faces cannot be
                    trimmed if the pipe does not hit the boundary edges of base faces.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetExtendFlange
            (
                bool extendFlange /** extendflange */ 
            );
            /**Returns  a value that indicates whether to create curves. When this option is true, the center line curve of the pipe and
                    silhouette flange curve at zero degrees will be output.  <br> License requirements : None */
            public: bool CreateCurves
            (
            );
            /**Sets  a value that indicates whether to create curves. When this option is true, the center line curve of the pipe and
                    silhouette flange curve at zero degrees will be output.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCreateCurves
            (
                bool createCurves /** createcurves */ 
            );
            /**Returns  a value that indicates whether to show pipe  <br> License requirements : None */
            public: bool ShowPipe
            (
            );
            /**Sets  a value that indicates whether to show pipe  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetShowPipe
            (
                bool showPipe /** showpipe */ 
            );
            /**Returns  the position tolerance  <br> License requirements : None */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance  <br> License requirements : None */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::SilhouetteFlangeBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::SilhouetteFlangeBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
