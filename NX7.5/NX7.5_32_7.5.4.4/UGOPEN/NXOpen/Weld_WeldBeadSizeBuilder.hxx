#ifndef NXOpen_WELD_WELDBEADSIZEBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDBEADSIZEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldBeadSizeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Weld_WeldBeadSizeBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        class WeldBeadSizeBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Section;
    namespace Weld
    {
        class _WeldBeadSizeBuilderBuilder;
        class WeldBeadSizeBuilderImpl;
        /** This builder is used to define the bead shape.  <br> To create a new instance of this class, use @link Weld::WeldBeadBuilder::NewSize Weld::WeldBeadBuilder::NewSize@endlink  <br> */
        class NXOPENCPPEXPORT  WeldBeadSizeBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Settings to indicate which standard size to use from the customer defaults file. */
            public: enum Size
            {
                SizeDefault1/** Default1 from the customer defaults */,
                SizeDefault2/** Default2 from the customer defaults */,
                SizeDefault3/** Default3 from the customer defaults */,
                SizeDefault4/** Default4 from the customer defaults */,
                SizeDefault5/** Default5 from the customer defaults */,
                SizeCustom/** Manually keyin value.               */
            };

            private: WeldBeadSizeBuilderImpl * m_weldbeadsizebuilder_impl;
            private: friend class  _WeldBeadSizeBuilderBuilder;
            protected: WeldBeadSizeBuilder();
            public: ~WeldBeadSizeBuilder();
            /**Returns  the standard size setting.  <br> License requirements : None */
            public: NXOpen::Weld::WeldBeadSizeBuilder::Size SizeString
            (
            );
            /**Sets  the standard size setting.  <br> License requirements : ugweld ("UG WELD") */
            public: void SetSizeString
            (
                NXOpen::Weld::WeldBeadSizeBuilder::Size sizeString /** sizestring */ 
            );
            /**Returns   the section containing the custom bead shape.  <br> License requirements : None */
            public: NXOpen::Section * CustomSection
            (
            );
            /**Returns  the location on the path to place the bead shape.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * PathLocation
            (
            );
            /**Returns  the semi minor size of an ellipse shaped bead. <br> License requirements : None */
            public: double SemiMinor
            (
            );
            /**Sets  the semi minor size of an ellipse shaped bead. <br> License requirements : ugweld ("UG WELD") */
            public: void SetSemiMinor
            (
                double semiMinor /** semiminor */ 
            );
            /**Returns  the semi the semi major size of an ellipse shaped bead.   <br> License requirements : None */
            public: double SemiMajor
            (
            );
            /**Sets  the semi the semi major size of an ellipse shaped bead.   <br> License requirements : ugweld ("UG WELD") */
            public: void SetSemiMajor
            (
                double semiMajor /** semimajor */ 
            );
            /**Returns  the diameter size of the tube shape.  <br> License requirements : None */
            public: double TubeDiameter
            (
            );
            /**Sets  the diameter size of the tube shape.  <br> License requirements : ugweld ("UG WELD") */
            public: void SetTubeDiameter
            (
                double tubeDiameter /** tubediameter */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
