#ifndef NXOpen_CAM_INSPECTIONLINKPMIBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONLINKPMIBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionLinkPmiBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_InspectionLinkPmiBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionLinkPmiBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _InspectionLinkPmiBuilderBuilder;
        class InspectionLinkPmiBuilderImpl;
        /** Create Link PMI Dialog Builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionLinkPmiBuilder CAM::InspectionOperationCollection::CreateInspectionLinkPmiBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionLinkPmiBuilder : public Builder
        {
            /** Specifies the scope of the link PMI command */
            public: enum PmiScopeTypes
            {
                PmiScopeTypesWorkpieceOnly/** Link PMI will be performed for the workpiece only */,
                PmiScopeTypesWorkpieceandComponents/** Link PMI will be performed for the workpiece and components */
            };

            /** Specifies whether paths will be created by Link PMI */
            public: enum CreatePathsOptions
            {
                CreatePathsOptionsYes/** Paths will be created by Link PMI */,
                CreatePathsOptionsNo/** Paths will not be created by Link PMI */
            };

            /** Specifies the Point Order Optimization Type */
            public: enum PointOrderTypes
            {
                PointOrderTypesOff/** No point order optimization will be done */,
                PointOrderTypesNearestNeighbor/** Point order optimization will use the nearest neighbor method */,
                PointOrderTypesShortestPath/** Point order optimization will use the shortest path method */
            };

            /** Specifies the Path Order Optimization Type */
            public: enum PathOrderTypes
            {
                PathOrderTypesOff/** No path order optimization will be done */,
                PathOrderTypesBySensor/** Path order optimization will use the by sensor method */,
                PathOrderTypesNearestNeighbor/** Path order optimization will use the nearest neighbor method */,
                PathOrderTypesShortestPath/** Path order optimization will use the shortest path method */
            };

            /** Specifies whether collision avoidance will be done */
            public: enum CollisionAvoidanceEnumType
            {
                CollisionAvoidanceEnumTypeOff/** Collision avoidance will not be done */,
                CollisionAvoidanceEnumTypeOn/** Collision avoidance will be done */
            };

            private: InspectionLinkPmiBuilderImpl * m_inspectionlinkpmibuilder_impl;
            private: friend class  _InspectionLinkPmiBuilderBuilder;
            protected: InspectionLinkPmiBuilder();
            public: ~InspectionLinkPmiBuilder();
            /**Returns  The name of the workpiece Link PMI will be done for  <br> License requirements : None */
            public: NXString WorkpieceString
            (
            );
            /**Sets  The name of the workpiece Link PMI will be done for  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetWorkpieceString
            (
                const NXString & workpieceString /** workpiecestring */ 
            );
            /**Returns  the scope of the Link PMI function  <br> License requirements : None */
            public: NXOpen::CAM::InspectionLinkPmiBuilder::PmiScopeTypes ScopeEnum
            (
            );
            /**Sets  the scope of the Link PMI function  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScopeEnum
            (
                NXOpen::CAM::InspectionLinkPmiBuilder::PmiScopeTypes scopeEnum /** scopeenum */ 
            );
            /**Returns  the PMI View selection string  <br> License requirements : None */
            public: NXString ViewString
            (
            );
            /**Sets  the PMI View selection string  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetViewString
            (
                const NXString & viewString /** viewstring */ 
            );
            /**Returns  the create paths enum  <br> License requirements : None */
            public: NXOpen::CAM::InspectionLinkPmiBuilder::CreatePathsOptions CreatePathsEnum
            (
            );
            /**Sets  the create paths enum  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCreatePathsEnum
            (
                NXOpen::CAM::InspectionLinkPmiBuilder::CreatePathsOptions createPathsEnum /** createpathsenum */ 
            );
            /**Returns  the tool to use for inspection string  <br> License requirements : None */
            public: NXString ToolString
            (
            );
            /**Sets  the tool to use for inspection string  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToolString
            (
                const NXString & toolString /** toolstring */ 
            );
            /**Returns  the tip to use for inspection string  <br> License requirements : None */
            public: NXString TipString
            (
            );
            /**Sets  the tip to use for inspection string  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTipString
            (
                const NXString & tipString /** tipstring */ 
            );
            /**Returns  the angle specification string  <br> License requirements : None */
            public: NXString AngleString
            (
            );
            /**Sets  the angle specification string  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleString
            (
                const NXString & angleString /** anglestring */ 
            );
            /**Returns  the A angle  <br> License requirements : None */
            public: double AngleA
            (
            );
            /**Sets  the A angle  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleA
            (
                double angleA /** anglea */ 
            );
            /**Returns  the B angle  <br> License requirements : None */
            public: double AngleB
            (
            );
            /**Sets  the B angle  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleB
            (
                double angleB /** angleb */ 
            );
            /** Button to select safe plane  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SafePlaneSelectAction
            (
            );
            /** Button to display selected safe plane  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SafePlaneDisplayAction
            (
            );
            /**Returns  the point order optimization type enum  <br> License requirements : None */
            public: NXOpen::CAM::InspectionLinkPmiBuilder::PointOrderTypes PointOrderEnum
            (
            );
            /**Sets  the point order optimization type enum  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointOrderEnum
            (
                NXOpen::CAM::InspectionLinkPmiBuilder::PointOrderTypes pointOrderEnum /** pointorderenum */ 
            );
            /**Returns  the path order optimization type enum  <br> License requirements : None */
            public: NXOpen::CAM::InspectionLinkPmiBuilder::PathOrderTypes PathOrderEnum
            (
            );
            /**Sets  the path order optimization type enum  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPathOrderEnum
            (
                NXOpen::CAM::InspectionLinkPmiBuilder::PathOrderTypes pathOrderEnum /** pathorderenum */ 
            );
            /**Returns  the collision avoidance enum  <br> License requirements : None */
            public: NXOpen::CAM::InspectionLinkPmiBuilder::CollisionAvoidanceEnumType CollisionAvoidanceEnum
            (
            );
            /**Sets  the collision avoidance enum  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCollisionAvoidanceEnum
            (
                NXOpen::CAM::InspectionLinkPmiBuilder::CollisionAvoidanceEnumType collisionAvoidanceEnum /** collisionavoidanceenum */ 
            );
            /**Returns  the program location string  <br> License requirements : None */
            public: NXString ProgramLocationString
            (
            );
            /**Sets  the program location string  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramLocationString
            (
                const NXString & programLocationString /** programlocationstring */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
