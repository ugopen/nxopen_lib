#ifndef NXOpen_ROUTING_PLACEMENTSOLUTIONSBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PLACEMENTSOLUTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PlacementSolutionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_PlacementSolutionsBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class PlacementSolutionsBuilder;
    }
    class Builder;
    class TaggedObject;
    namespace Routing
    {
        class _PlacementSolutionsBuilderBuilder;
        class PlacementSolutionsBuilderImpl;
        /** 
            
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreatePlacementSolutionsBuilder Routing::RouteManager::CreatePlacementSolutionsBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  PlacementSolutionsBuilder : public Builder
        {
            private: PlacementSolutionsBuilderImpl * m_placementsolutionsbuilder_impl;
            private: friend class  _PlacementSolutionsBuilderBuilder;
            protected: PlacementSolutionsBuilder();
            public: ~PlacementSolutionsBuilder();
            /** Initialize Placement Data <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void InitializePlacementData
            (
                NXOpen::TaggedObject * part /** Tag of the part which the new part was dropped on. */,
                const NXOpen::Point3d & placementPos /** Location the part was placed */,
                NXOpen::TaggedObject * partToPlace /** The part being placed. */
            );
            /** Cycle to the next solution.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void NextSolution
            (
            );
            /** Cycle to the first solution.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void FirstSolution
            (
            );
            /** Cycle to the previous solution  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void PreviousSolution
            (
            );
            /** Commit the solution and apply constraints if needed.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ApplyConstraintsAndClear
            (
            );
            /** Commit the solution and apply constraints if needed.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ApplyConstraintsAndClear
            (
                bool lockEngagement /** Lock engagement if applicable. */,
                bool lockRotation /**  Lock Rotation if applicable. */
            );
            /** Applies a rotation to the component about the axis of the port being used for placement.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ApplyPortRotation
            (
                double angle /** Angle to apply. */
            );
            /** Commit the solution and apply constraints if needed.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ApplyConstraintsAndClear
            (
                bool lockEngagement /** Lock engagement if applicable. */,
                bool lockRotation /** Lock Rotation if applicable. */,
                bool fixPart /** Fix Part if applicable. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
