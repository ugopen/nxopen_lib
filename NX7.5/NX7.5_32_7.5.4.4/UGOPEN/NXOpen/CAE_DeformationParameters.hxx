#ifndef NXOpen_CAE_DEFORMATIONPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_DEFORMATIONPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DeformationParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DeformationParameters.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class DeformationParameters;
    }
    namespace CAE
    {
        class BaseResultType;
    }
    namespace CAE
    {
        class _DeformationParametersBuilder;
        class DeformationParametersImpl;
        /** This class is worked as a packet of information that can be be used to deform @link CAE::Post CAE::Post@endlink  objects.
                <br/>Use @link CAE::ResultManager CAE::ResultManager@endlink  to create an @link CAE::DeformationParameters CAE::DeformationParameters@endlink 
                
                <br/>You can modifiy these values but validation of correctness will only be performed 
                when this object is set to a @link CAE::Post CAE::Post@endlink  object
             <br> To obtain an instance of this class use @link Session::ResultManager Session::ResultManager@endlink . <br> */
        class NXOPENCPPEXPORT  DeformationParameters : public TaggedObject
        {
            private: DeformationParametersImpl * m_deformationparameters_impl;
            private: friend class  _DeformationParametersBuilder;
            protected: DeformationParameters();
            public: ~DeformationParameters();
            /**Returns  the result type that will be used for deforming the model <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BaseResultType * GenericType
            (
            );
            /**Sets  the result type that will be used for deforming the model <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGenericType
            (
                NXOpen::CAE::BaseResultType * type /** type */ 
            );
            /**Returns  the complexity criterion. If the result type is complex @link CAE::BaseResultType::Complex CAE::BaseResultType::Complex @endlink and @link CAE::BaseResultType::SetComplex CAE::BaseResultType::SetComplex @endlink  the complexity criterion defines which value is used for deformation(like @link CAE::Result::ComplexReal CAE::Result::ComplexReal@endlink  or @link CAE::Result::ComplexImaginary CAE::Result::ComplexImaginary@endlink )  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Complex ComplexCriterion
            (
            );
            /**Sets  the complexity criterion. If the result type is complex @link CAE::BaseResultType::Complex CAE::BaseResultType::Complex @endlink and @link CAE::BaseResultType::SetComplex CAE::BaseResultType::SetComplex @endlink  the complexity criterion defines which value is used for deformation(like @link CAE::Result::ComplexReal CAE::Result::ComplexReal@endlink  or @link CAE::Result::ComplexImaginary CAE::Result::ComplexImaginary@endlink )  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetComplexCriterion
            (
                NXOpen::CAE::Result::Complex complex /** complex */ 
            );
            /**Returns  the phase angle at which result will be evaluated and used for deformation.  If the result type is complex @link CAE::BaseResultType::Complex CAE::BaseResultType::Complex @endlink and @link CAE::BaseResultType::SetComplex CAE::BaseResultType::SetComplex @endlink  and the @link DeformationParameters::ComplexCriterion DeformationParameters::ComplexCriterion @endlink and @link DeformationParameters::SetComplexCriterion DeformationParameters::SetComplexCriterion @endlink  is set to @link CAE::Result::ComplexPhaseAngle CAE::Result::ComplexPhaseAngle@endlink  , the Phaseangle will be used to evaluate the value of the complex result  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double PhaseAngle
            (
            );
            /**Sets  the phase angle at which result will be evaluated and used for deformation.  If the result type is complex @link CAE::BaseResultType::Complex CAE::BaseResultType::Complex @endlink and @link CAE::BaseResultType::SetComplex CAE::BaseResultType::SetComplex @endlink  and the @link DeformationParameters::ComplexCriterion DeformationParameters::ComplexCriterion @endlink and @link DeformationParameters::SetComplexCriterion DeformationParameters::SetComplexCriterion @endlink  is set to @link CAE::Result::ComplexPhaseAngle CAE::Result::ComplexPhaseAngle@endlink  , the Phaseangle will be used to evaluate the value of the complex result  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhaseAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the scale to be applied to the deformation value  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double Scale
            (
            );
            /**Sets  the scale to be applied to the deformation value  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  a value of true means the reference node will be used  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool IsReferenceNode
            (
            );
            /**Sets  a value of true means the reference node will be used  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetReferenceNode
            (
                bool isReferenceNode /** isreferencenode */ 
            );
            /**Returns  the node label which identifies the reference node used when deforming the model if 
                    @link  CAE::DeformationParameters::IsReferenceNode   CAE::DeformationParameters::IsReferenceNode  @endlink and @link  CAE::DeformationParameters::SetReferenceNode   CAE::DeformationParameters::SetReferenceNode  @endlink  is set to  true  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ReferenceNodeLabel
            (
            );
            /**Sets  the node label which identifies the reference node used when deforming the model if 
                    @link  CAE::DeformationParameters::IsReferenceNode   CAE::DeformationParameters::IsReferenceNode  @endlink and @link  CAE::DeformationParameters::SetReferenceNode   CAE::DeformationParameters::SetReferenceNode  @endlink  is set to  true  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetReferenceNodeLabel
            (
                int referenceNodeLabel /** referencenodelabel */ 
            );
            /**Returns  the result component that is used for deforming the model. <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Component Component
            (
            );
            /**Sets  the result component that is used for deforming the model. <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetComponent
            (
                NXOpen::CAE::Result::Component component /** component */ 
            );
            /**Returns  the type of scale used for deforming the model  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::DeformationScale DeformationType
            (
            );
            /**Sets  the type of scale used for deforming the model  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDeformationType
            (
                NXOpen::CAE::Result::DeformationScale unit /** unit */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
