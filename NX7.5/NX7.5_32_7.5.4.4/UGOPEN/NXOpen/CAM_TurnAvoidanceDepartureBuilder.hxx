#ifndef NXOpen_CAM_TURNAVOIDANCEDEPARTUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNAVOIDANCEDEPARTUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnAvoidanceDepartureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnAvoidanceDepartureBuilder;
    }
    namespace CAM
    {
        class TurnAvoidancePathPointsBuilder;
    }
    namespace CAM
    {
        class _TurnAvoidanceDepartureBuilderBuilder;
        class TurnAvoidanceDepartureBuilderImpl;
        /** Represents an avoidance start of engage Builder */
        class NXOPENCPPEXPORT  TurnAvoidanceDepartureBuilder : public TaggedObject
        {
            /** The departure path mode options */
            public: enum DeparturePathModes
            {
                DeparturePathModesNone/** Path is inactive. */,
                DeparturePathModesPoints/** Path is defined by points. */,
                DeparturePathModesSameAsApproach/** Path is locked to approach path. */,
                DeparturePathModesPointsBeforeToolChange/** Path is defined by points, but applied only before tool change. */,
                DeparturePathModesSameAsApproachBeforeToolChange/** Path is locked to approach path, but applied only before tool change. */
            };

            private: TurnAvoidanceDepartureBuilderImpl * m_turnavoidancedeparturebuilder_impl;
            private: friend class  _TurnAvoidanceDepartureBuilderBuilder;
            protected: TurnAvoidanceDepartureBuilder();
            public: ~TurnAvoidanceDepartureBuilder();
            /**Returns  the departure path mode  <br> License requirements : None */
            public: NXOpen::CAM::TurnAvoidanceDepartureBuilder::DeparturePathModes DeparturePathMode
            (
            );
            /**Sets  the departure path mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDeparturePathMode
            (
                NXOpen::CAM::TurnAvoidanceDepartureBuilder::DeparturePathModes departurePathMode /** the departure path mode value */
            );
            /**Returns  the avoidance path points list builder  <br> License requirements : None */
            public: NXOpen::CAM::TurnAvoidancePathPointsBuilder * DeparturePathPointsListBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
