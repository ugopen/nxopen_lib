#ifndef NXOpen_CAE_LAMINATEQUICKPOSTREPORTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEQUICKPOSTREPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateQuickPostReportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_LaminateQuickPostReportBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class LaminateQuickPostReportBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _LaminateQuickPostReportBuilderBuilder;
        class LaminateQuickPostReportBuilderImpl;
        /** Represents a @link CAE::LaminateQuickPostReport CAE::LaminateQuickPostReport@endlink  builder  <br> To create a new instance of this class, use @link CAE::SimSimulation::CreateLaminateQuickPostReportBuilder CAE::SimSimulation::CreateLaminateQuickPostReportBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        PlyFailureEnum </td> <td> 
         
        AbsMax </td> </tr> 

        <tr><td> 
         
        PlyFailureToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PlyStrainsEnum </td> <td> 
         
        MaxMin </td> </tr> 

        <tr><td> 
         
        PlyStrainsToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PlyStrengthEnum </td> <td> 
         
        Min </td> </tr> 

        <tr><td> 
         
        PlyStrengthToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PlyStressesEnum </td> <td> 
         
        MaxMin </td> </tr> 

        <tr><td> 
         
        PlyStressesToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShellResultantsEnum </td> <td> 
         
        AbsMax </td> </tr> 

        <tr><td> 
         
        ShellResultantsToggle </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  LaminateQuickPostReportBuilder : public Builder
        {
            /** Results Envelope Types */
            public: enum ShellStressType
            {
                ShellStressTypeMaxMin/** Max and Min */,
                ShellStressTypeMin/** Min */,
                ShellStressTypeMax/** Max */,
                ShellStressTypeAbsMax/** Absolute Max */
            };

            /** Results Envelope Types */
            public: enum PlyStressesType
            {
                PlyStressesTypeMaxMin/** Max and Min */,
                PlyStressesTypeMin/** Min */,
                PlyStressesTypeMax/** Max */,
                PlyStressesTypeAbsMax/** Absolute Max */
            };

            /** Results Envelope Types */
            public: enum PlyStrainsType
            {
                PlyStrainsTypeMaxMin/** Max and Min */,
                PlyStrainsTypeMin/** Min */,
                PlyStrainsTypeMax/** Max */,
                PlyStrainsTypeAbsMax/** Absolute Max */
            };

            /** Results Envelope Types */
            public: enum PlyFailureIndicesType
            {
                PlyFailureIndicesTypeMaxMin/** Max and Min */,
                PlyFailureIndicesTypeMin/** Min */,
                PlyFailureIndicesTypeMax/** Max */,
                PlyFailureIndicesTypeAbsMax/** Absolute Max */
            };

            /** Results Envelope Types */
            public: enum PlyStrengthRatiosType
            {
                PlyStrengthRatiosTypeMaxMin/** Max and Min */,
                PlyStrengthRatiosTypeMin/** Min */,
                PlyStrengthRatiosTypeMax/** Max */,
                PlyStrengthRatiosTypeAbsMax/** Absolute Max */
            };

            private: LaminateQuickPostReportBuilderImpl * m_laminatequickpostreportbuilder_impl;
            private: friend class  _LaminateQuickPostReportBuilderBuilder;
            protected: LaminateQuickPostReportBuilder();
            public: ~LaminateQuickPostReportBuilder();
            /**Returns  the shell stress resultants toggle  <br> License requirements : None */
            public: bool ShellResultantsToggle
            (
            );
            /**Sets  the shell stress resultants toggle  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetShellResultantsToggle
            (
                bool shellstresstoggle /** shellstresstoggle */ 
            );
            /**Returns  the ply stresses toggle  <br> License requirements : None */
            public: bool PlyStressesToggle
            (
            );
            /**Sets  the ply stresses toggle  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStressesToggle
            (
                bool plystressestoggle /** plystressestoggle */ 
            );
            /**Returns  the ply strains toggle  <br> License requirements : None */
            public: bool PlyStrainsToggle
            (
            );
            /**Sets  the ply strains toggle  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStrainsToggle
            (
                bool plystrainstoggle /** plystrainstoggle */ 
            );
            /**Returns  the ply failure indices toggle  <br> License requirements : None */
            public: bool PlyFailureToggle
            (
            );
            /**Sets  the ply failure indices toggle  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyFailureToggle
            (
                bool plyfailuretoggle /** plyfailuretoggle */ 
            );
            /**Returns  the ply strength ratios toggle  <br> License requirements : None */
            public: bool PlyStrengthToggle
            (
            );
            /**Sets  the ply strength ratios toggle  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStrengthToggle
            (
                bool plystrengthtoggle /** plystrengthtoggle */ 
            );
            /**Returns  the shell stress resultants value  <br> License requirements : None */
            public: NXOpen::CAE::LaminateQuickPostReportBuilder::ShellStressType ShellResultantsEnum
            (
            );
            /**Sets  the shell stress resultants value  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetShellResultantsEnum
            (
                NXOpen::CAE::LaminateQuickPostReportBuilder::ShellStressType shellstress /** shellstress */ 
            );
            /**Returns  the ply stresses value  <br> License requirements : None */
            public: NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStressesType PlyStressesEnum
            (
            );
            /**Sets  the ply stresses value  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStressesEnum
            (
                NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStressesType plystresses /** plystresses */ 
            );
            /**Returns  the ply strains value  <br> License requirements : None */
            public: NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStrainsType PlyStrainsEnum
            (
            );
            /**Sets  the ply strains value  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStrainsEnum
            (
                NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStrainsType plystrains /** plystrains */ 
            );
            /**Returns  the ply failure indices value  <br> License requirements : None */
            public: NXOpen::CAE::LaminateQuickPostReportBuilder::PlyFailureIndicesType PlyFailureEnum
            (
            );
            /**Sets  the ply failure indices value  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyFailureEnum
            (
                NXOpen::CAE::LaminateQuickPostReportBuilder::PlyFailureIndicesType plyfailure /** plyfailure */ 
            );
            /**Returns  the ply strength ratios value  <br> License requirements : None */
            public: NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStrengthRatiosType PlyStrengthEnum
            (
            );
            /**Sets  the ply strength ratios value  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetPlyStrengthEnum
            (
                NXOpen::CAE::LaminateQuickPostReportBuilder::PlyStrengthRatiosType plystrength /** plystrength */ 
            );
            /** Export quick post results to a csv file.  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void ExportResultsToCsv
            (
                const NXString & csvFilename /** forces and plies results will be written-out to this file.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** A method to set the num of selected solution  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNumSelectedResults
            (
                int numSol /** the num of selected solution */
            );
            /** A method to set the num of loadcases  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNumSelectedLoadCases
            (
                int nlcases /** num of loadcases */
            );
            /** A method to set the num of iterartions  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNumSelectedIterations
            (
                int niter /** num of iterations */
            );
            /** A method to set selected solution name  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetSelectedResultName
            (
                int iselsol /** selected solution */,
                const NXString & solname /** ...   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** A method to set selected loadcases  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetSelectedLoadCase
            (
                int iselsol /** selected solution */,
                int lcase /** loadcase */
            );
            /** A method to set selected iterations  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetSelectedIteration
            (
                int iselsol /** selected solution */,
                int iter /** iteration */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
