#ifndef NXOpen_DRAWINGS_VIEWSTYLEBASEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEBASEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleBaseBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_ArrangementsBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleBaseBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleBaseBuilder;
    }
    namespace Assemblies
    {
        class ArrangementsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Part;
    namespace Drawings
    {
        class _ViewStyleBaseBuilderBuilder;
        class ViewStyleBaseBuilderImpl;
        /** Represents the BASE tab on the View Style Dialog (Drawings.ViewStyleBaseBuilder)
            */
        class NXOPENCPPEXPORT  ViewStyleBaseBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: ViewStyleBaseBuilderImpl * m_viewstylebasebuilder_impl;
            private: friend class  _ViewStyleBaseBuilderBuilder;
            protected: ViewStyleBaseBuilder();
            public: ~ViewStyleBaseBuilder();
            /**Returns  the part on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Part * Part
            (
            );
            /**Sets  the part on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPart
            (
                NXOpen::Part * part /** Sets a new part on the base sub-builder */
            );
            /**Returns  the part name on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the part name on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartName
            (
                const NXString & partName /** Sets a new part name on the base sub-builder */
            );
            /**Returns  the arrangement on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Assemblies::ArrangementsBuilder * Arrangement
            (
            );
            /**Returns  the arrangement name on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: NXString ArrangementName
            (
            );
            /**Sets  the arrangement name on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrangementName
            (
                const NXString & arrangementName /** Sets a new arrangement name on the base sub-builder */
            );
            /**Returns  the faceted representation toggle on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: bool FacetedRepresentation
            (
            );
            /**Sets  the faceted representation toggle on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetFacetedRepresentation
            (
                bool facetedRepresentationToggle /** Sets a new faceted representation toggle value on the base sub-builder */
            );
            /**Returns  the inherit clipping boundary toggle on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: bool InheritClippingBoundary
            (
            );
            /**Sets  the inherit clipping boundary toggle on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritClippingBoundary
            (
                bool inheritClippingBoundaryToggle /** Sets a new inherit clipping boundary toggle value on the base sub-builder */
            );
            /**Returns  the transfer annotation toggle on the BASE tab of the View Style Dialog  <br> License requirements : None */
            public: bool TransferAnnotation
            (
            );
            /**Sets  the transfer annotation toggle on the BASE tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetTransferAnnotation
            (
                bool transferAnnotationToggle /** Sets a new transfer annotation toggle value on the base sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
