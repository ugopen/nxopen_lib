#ifndef NXOpen_FEATURES_REPLACEBLENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REPLACEBLENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ReplaceBlendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ReplaceBlendBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ReplaceBlendBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _ReplaceBlendBuilderBuilder;
        class ReplaceBlendBuilderImpl;
        /**
            Represents a builder for a Replace Blend feature.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateReplaceBlendBuilder Features::FeatureCollection::CreateReplaceBlendBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ControlRadius.Value </td> <td> 
         
        5.0 (millimeters part), 0.2 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ReplaceBlendBuilder : public Features::FeatureBuilder
        {
            private: ReplaceBlendBuilderImpl * m_replaceblendbuilder_impl;
            private: friend class  _ReplaceBlendBuilderBuilder;
            protected: ReplaceBlendBuilder();
            public: ~ReplaceBlendBuilder();
            /**Returns  the face collector.
                    This holds all the input faces to replace blend.
                     <br> License requirements : None */
            public: NXOpen::ScCollector * FaceToReblend
            (
            );
            /**Returns  the shape match.
                    This controls the Max tolerance to identify blend.
                      <br> License requirements : None */
            public: int ShapeMatch
            (
            );
            /**Sets  the shape match.
                    This controls the Max tolerance to identify blend.
                      <br> License requirements : None */
            public: void SetShapeMatch
            (
                int shapeMatch /** shapematch */ 
            );
            /**Returns  the inherit radius from face control.  <br> License requirements : None */
            public: bool InheritRadiusFromFace
            (
            );
            /**Sets  the inherit radius from face control.  <br> License requirements : None */
            public: void SetInheritRadiusFromFace
            (
                bool inheritRadiusFromFace /** inheritradiusfromface */ 
            );
            /**Returns  the control radius to replace blend. <br> License requirements : None */
            public: NXOpen::Expression * ControlRadius
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
