#ifndef NXOpen_CAM_BLADECUTLEVELS_HXX_INCLUDED
#define NXOpen_CAM_BLADECUTLEVELS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BladeCutLevels.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_BladeCutLevels.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class BladeCutLevels;
    }
    class Builder;
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _BladeCutLevelsBuilder;
        class BladeCutLevelsImpl;
        /** Represents a Blade Cut Levels Builder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  BladeCutLevels : public Builder
        {
            /** Available types for Depth Mode */
            public: enum DepthModeTypes
            {
                DepthModeTypesOffsetsFromHub/** Offsets from Hub */,
                DepthModeTypesOffsetsFromShroud/** Offsets from Shroud */,
                DepthModeTypesOffsetsAlongToolAxis/** Offsets along Tool Axis */,
                DepthModeTypesInterpolateFromShroudToHub/** Interpolate from Shroud to Hub */
            };

            /** Available types for Hub Extensions */
            public: enum HubExtensionsTypes
            {
                HubExtensionsTypesNone/** None */,
                HubExtensionsTypesToPreviousDepth/** To Previous Depth */,
                HubExtensionsTypesToTrailingEdge/** To Trailing Edge */
            };

            /** Available types for Depth per Cut */
            public: enum DepthPerCutTypes
            {
                DepthPerCutTypesConstant/** Constant */,
                DepthPerCutTypesScallop/** Scallop */
            };

            /** Available types for Range Depth */
            public: enum RangeDepthTypes
            {
                RangeDepthTypesAutomatic/** Automatic */,
                RangeDepthTypesSpecify/** Specify */
            };

            private: BladeCutLevelsImpl * m_bladecutlevels_impl;
            private: friend class  _BladeCutLevelsBuilder;
            protected: BladeCutLevels();
            public: ~BladeCutLevels();
            /**Returns  the depth mode  <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::DepthModeTypes DepthMode
            (
            );
            /**Sets  the depth mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthMode
            (
                NXOpen::CAM::BladeCutLevels::DepthModeTypes depthMode /** the depth mode */
            );
            /**Returns  the hub extensions  <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::HubExtensionsTypes HubExtensions
            (
            );
            /**Sets  the hub extensions  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHubExtensions
            (
                NXOpen::CAM::BladeCutLevels::HubExtensionsTypes hubExtensions /** the hub extensions */
            );
            /**Returns  the depth per cut  <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::DepthPerCutTypes DepthPerCut
            (
            );
            /**Sets  the depth per cut  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDepthPerCut
            (
                NXOpen::CAM::BladeCutLevels::DepthPerCutTypes depthPerCut /** the depth per cut */
            );
            /**Returns  the distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * Distance
            (
            );
            /**Returns  the scallop distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ScallopDistance
            (
            );
            /**Returns  the range depth  <br> License requirements : None */
            public: NXOpen::CAM::BladeCutLevels::RangeDepthTypes RangeDepth
            (
            );
            /**Sets  the range depth  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRangeDepth
            (
                NXOpen::CAM::BladeCutLevels::RangeDepthTypes rangeDepth /** the range depth */
            );
            /**Returns  the number of cuts  <br> License requirements : None */
            public: int NumberOfCuts
            (
            );
            /**Sets  the number of cuts  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumberOfCuts
            (
                int numberOfCuts /** the number of cuts */
            );
            /**Returns  the start %  <br> License requirements : None */
            public: int StartPercent
            (
            );
            /**Sets  the start %  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPercent
            (
                int start /** the start % */
            );
            /**Returns  the end %  <br> License requirements : None */
            public: int EndPercent
            (
            );
            /**Sets  the end %  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndPercent
            (
                int end /** the end % */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
