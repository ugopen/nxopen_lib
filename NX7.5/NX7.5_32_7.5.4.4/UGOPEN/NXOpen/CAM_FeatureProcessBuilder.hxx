#ifndef NXOpen_CAM_FEATUREPROCESSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_FEATUREPROCESSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeatureProcessBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_FeatureProcessBuilder.hxx>
#include <NXOpen/FeatureProcessBuilderStatus.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class FeatureProcessBuilder;
    }
    class Builder;
    namespace CAM
    {
        class CAMFeature;
    }
    namespace CAM
    {
        class Operation;
    }
    class FeatureProcessBuilderStatus;
    namespace CAM
    {
        class _FeatureProcessBuilderBuilder;
        class FeatureProcessBuilderImpl;
        /** The Create Feature Process Builder class creates operations and features groups  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateFeatureProcessBuilder CAM::CAMSetup::CreateFeatureProcessBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FeatureGrouping </td> <td> 
         
        UseExisting </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        RuleBased </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  FeatureProcessBuilder : public Builder
        {
            /** Type of creation */
            public: enum FeatureProcessType
            {
                FeatureProcessTypeRuleBased/** Rule based operation creation */,
                FeatureProcessTypeTemplateBased/** Template based operation creation */
            };

            /** Determines how features are allocated to feature groups */
            public: enum FeatureGroupingType
            {
                FeatureGroupingTypeAlwaysCreateNew/** Always create a new feature group */,
                FeatureGroupingTypePerFeature/** Create a feature group per feature */,
                FeatureGroupingTypeUseExisting/** Try to use existing feature groups */
            };

            private: FeatureProcessBuilderImpl * m_featureprocessbuilder_impl;
            private: friend class  _FeatureProcessBuilderBuilder;
            protected: FeatureProcessBuilder();
            public: ~FeatureProcessBuilder();
            /**Returns  the type of feature process creation  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: NXOpen::CAM::FeatureProcessBuilder::FeatureProcessType Type
            (
            );
            /**Sets  the type of feature process creation  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void SetType
            (
                NXOpen::CAM::FeatureProcessBuilder::FeatureProcessType type /** type */ 
            );
            /** Gets the template name and the feature process template <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void GetTemplate
            (
                NXString* activeTemplate /** the template used */,
                NXString* featureProcesTemplate /** the feature process sub type used */
            );
            /** Sets the active template name and the feature process template <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void SetTemplate
            (
                const NXString & activeTemplate /** the template used */,
                const NXString & featureProcesTemplate /** the feature process sub type used */
            );
            /** Sets the active rule libraries <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void SetRuleLibraries
            (
                std::vector<NXString> & ruleLibraries /** rulelibraries */ 
            );
            /** Gets the active rule libraries <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void GetRuleLibraries
            (
                std::vector<NXString> & ruleLibraries /** rulelibraries */ 
            );
            /** Returns the name of the geometry location of the generated feature processes  @return  The parent group  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: NXString GetGeometryLocation
            (
            );
            /** Returns the name of the geometry location of the generated feature processes  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void SetGeometryLocation
            (
                const NXString & geometryLocation /** The parent group */
            );
            /**Returns  the way features are grouped in feature processes  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: NXOpen::CAM::FeatureProcessBuilder::FeatureGroupingType FeatureGrouping
            (
            );
            /**Sets  the way features are grouped in feature processes  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: void SetFeatureGrouping
            (
                NXOpen::CAM::FeatureProcessBuilder::FeatureGroupingType featureGrouping /** featuregrouping */ 
            );
            /** Creates operations for a set of features based of the current setting of the builder  @return  List with created operations,  <br> License requirements : ug_holemaking ("UG Holemaking") */
            public: std::vector<NXOpen::CAM::Operation *> CreateFeatureProcesses
            (
                const std::vector<NXOpen::CAM::CAMFeature *> & features /** The manufacturing features*/,
                NXOpen::FeatureProcessBuilderStatus ** resultStatus /** Result status of creating processes. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
