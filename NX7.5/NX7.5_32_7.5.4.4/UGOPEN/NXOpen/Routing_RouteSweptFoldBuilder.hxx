#ifndef NXOpen_ROUTING_ROUTESWEPTFOLDBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTESWEPTFOLDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteSweptFoldBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Routing_RouteSweptFoldBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class RouteSweptFoldBuilder;
    }
    class Builder;
    class Curve;
    class Expression;
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace Routing
    {
        class Stock;
    }
    class SelectBody;
    namespace Routing
    {
        class _RouteSweptFoldBuilderBuilder;
        class RouteSweptFoldBuilderImpl;
        /** Represents a Rout Swept Fold Builder  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateRouteSweptFoldBuilder Routing::RouteManager::CreateRouteSweptFoldBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RouteSweptFoldBuilder : public Builder
        {
            private: RouteSweptFoldBuilderImpl * m_routesweptfoldbuilder_impl;
            private: friend class  _RouteSweptFoldBuilderBuilder;
            protected: RouteSweptFoldBuilder();
            public: ~RouteSweptFoldBuilder();
            /**Returns  the stock selection. This will be the solid body <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectBody * StockSelection
            (
            );
            /**Returns  the fold location  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * FoldLocation
            (
            );
            /**Returns  the reverse fixed segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool ReverseFixedSegment
            (
            );
            /**Sets  the reverse fixed segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetReverseFixedSegment
            (
                bool reverseFixedSegment /** reversefixedsegment */ 
            );
            /**Returns  the fold rotation angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * FoldRotationAngle
            (
            );
            /**Returns  the reverse fold rotation angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool ReverseFoldRotationAngle
            (
            );
            /**Sets  the reverse fold rotation angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetReverseFoldRotationAngle
            (
                bool reverseFoldRotationAngle /** reversefoldrotationangle */ 
            );
            /**Returns  the bend angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * BendAngle
            (
            );
            /**Returns  the reverse bend angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool ReverseBendAngle
            (
            );
            /**Sets  the reverse bend angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetReverseBendAngle
            (
                bool reverseBendAngle /** reversebendangle */ 
            );
            /**Returns  the fold start rotation angle  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * FoldStartRotationAngle
            (
            );
            /**Returns  the bend radius  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * BendRadius
            (
            );
            /**Returns  the length adjustment  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * LengthAdjustment
            (
            );
            /** Sets the value of stock, stock width and stock thickness to the builder. This will set the stock only if it has rectangular cross section. 
                        After setting the stock it will create and set the spline for the builder. It will also set the spline curves for the builder
                        if the stock has more than one segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStock
            (
                NXOpen::Routing::Stock * stock /** Selected Stock */
            );
            /**Returns  the spline stored in the builder.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Curve * Spline
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
