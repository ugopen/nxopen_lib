#ifndef NXOpen_ROUTING_ELECTRICAL_ELECTRICALSTOCKDEVICE_HXX_INCLUDED
#define NXOpen_ROUTING_ELECTRICAL_ELECTRICALSTOCKDEVICE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Electrical_ElectricalStockDevice.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_StockDevice.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CableDefinition;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class Connection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectorDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDefinition;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class LogicalTerminal;
    }
    namespace Routing
    {
        class StockDevice;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class _ElectricalStockDeviceBuilder;
            class ElectricalStockDeviceImpl;
            /**
                       The Electrical Stock Device is a non instantiable superclass to classify
                       all electrical stock-based single devices.
                     <br> Creator not available in KF. <br> */
            class NXOPENCPPEXPORT  ElectricalStockDevice : public Routing::StockDevice
            {
                /** Route types (manual/auto). */
                public: enum RouteTypes
                {
                    RouteTypesDefaultRoute = -1/** default route */ ,
                    RouteTypesAutoRoute/** auto route */ ,
                    RouteTypesManualRoute/** manual route */ 
                };

                /** Routing level. */
                public: enum RouteLevel
                {
                    RouteLevelPin/** pin */ ,
                    RouteLevelComp/** comp */ ,
                    RouteLevelMixed/** mixed */ 
                };

                /** Auto-route selections. */
                public: enum AutoRouteSel
                {
                    AutoRouteSelBundleDiameter/** bundle diameter */ ,
                    AutoRouteSelLeastBundles/** least bundles */ ,
                    AutoRouteSelDesignRules/** design rules */ ,
                    AutoRouteSelLeastSegments/** least segments */ ,
                    AutoRouteSelShortestLength/** shortest length */ 
                };

                private: ElectricalStockDeviceImpl * m_electricalstockdevice_impl;
                private: friend class  _ElectricalStockDeviceBuilder;
                protected: ElectricalStockDevice();
                public: ~ElectricalStockDevice();
                /** Calculates and sets cut length on object.  @return  Calculated cut length  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double CalculateCutLength
                (
                );
                /**Returns  the cut length.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double CutLength
                (
                );
                /**Sets  the cut length.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetCutLength
                (
                    double cutLength /** cut length */ 
                );
                /**Returns  the color name.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXString ColorName
                (
                );
                /**Sets  the color name.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetColorName
                (
                    const NXString & colorName /** color name */ 
                );
                /**Returns  the NX color value.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: int NxColorValue
                (
                );
                /**Sets  the NX color value.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetNxColorValue
                (
                    int nxColorValue /** nx color value */ 
                );
                /** Get nearest @link Routing::Electrical::HarnessDefinition Routing::Electrical::HarnessDefinition@endlink  encountered up the parent-child hierarchy.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::HarnessDefinition * FindNearestHarnessDefinition
                (
                );
                /** Get topmost @link Routing::Electrical::CableDefinition Routing::Electrical::CableDefinition@endlink  encountered up the parent-child hierarchy.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::CableDefinition * FindTopmostCableDefinition
                (
                );
                /** Find the from connector for this stock device. If there is no
                            from connector, NULL is returned.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ConnectorDevice * FindFromConnector
                (
                );
                /** Find the to connector for this stock device. If there is no
                            to connector, NULL is returned.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ConnectorDevice * FindToConnector
                (
                );
                /** Find the nearest @link Routing::Electrical::HarnessDevice Routing::Electrical::HarnessDevice@endlink  encountered up the parent-child hierarchy.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::HarnessDevice * FindNearestHarnessDevice
                (
                );
                /** Find the @link Routing::Electrical::Connection Routing::Electrical::Connection@endlink  implemented by this device.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::Connection * FindImplementedConnection
                (
                );
                /** Does this stock device have intermediate components?  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool HasIntermediateComponents
                (
                );
                /** Get intermediate components  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::Electrical::ConnectorDevice *> GetIntermediateComponents
                (
                );
                /** Get the intermediate terminals associated to this stock device.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::LogicalTerminal *> GetIntermediateTerminals
                (
                );
                /** Manually routes a @link Routing::Electrical::ElectricalStockDevice Routing::Electrical::ElectricalStockDevice@endlink . 
                                on given @link Routing::ISegment Routing::ISegment@endlink . The input segments should form a continuous 
                                path between two @link Routing::Electrical::ConnectorDevice Routing::Electrical::ConnectorDevice@endlink  objects.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void ManuallyRoute
                (
                    NXOpen::Routing::Electrical::ElectricalStockDevice::RouteLevel routeLevel /** Routing type. */,
                    const std::vector<NXOpen::Routing::ISegment *> & segments /** segments */ 
                );
                /** Adds this stockdevice as child of given HarnessDevice.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void ChangeHarness
                (
                    NXOpen::Routing::Electrical::HarnessDevice * harnessDevice /** harness device */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
