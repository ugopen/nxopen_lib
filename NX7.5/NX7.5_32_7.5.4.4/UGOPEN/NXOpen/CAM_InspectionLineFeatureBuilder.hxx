#ifndef NXOpen_CAM_INSPECTIONLINEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONLINEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionLineFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionLineFeatureBuilder.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionLineFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionLineFeatureBuilderBuilder;
        class InspectionLineFeatureBuilderImpl;
        /** Represents a CMM Inspection Line Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionLineFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionLineFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionLineFeatureBuilder : public CAM::OperationBuilder
        {
            private: InspectionLineFeatureBuilderImpl * m_inspectionlinefeaturebuilder_impl;
            private: friend class  _InspectionLineFeatureBuilderBuilder;
            protected: InspectionLineFeatureBuilder();
            public: ~InspectionLineFeatureBuilder();
            /**Returns  the selected line  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectLine
            (
            );
            /**Returns  the reverse direction button  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction button  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the line direction vector  <br> License requirements : None */
            public: NXOpen::Direction * LineDirection
            (
            );
            /**Sets  the line direction vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineDirection
            (
                NXOpen::Direction * lineDirection /** linedirection */ 
            );
            /**Returns  the underlying surface used to determine the normal and approach direction vectors  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectNormalSurface
            (
            );
            /**Returns  the coordinate system reference type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysRefType
            (
            );
            /**Sets  the coordinate system reference type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysRefType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysRefType /** csysreftype */ 
            );
            /**Returns  the extent type of the line (bounded or unbounded)  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationExtenttypes ExtentType
            (
            );
            /**Sets  the extent type of the line (bounded or unbounded)  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtentType
            (
                NXOpen::CAM::CamInspectionOperationExtenttypes extentType /** extenttype */ 
            );
            /**Returns  the length of the line  <br> License requirements : None */
            public: double Length
            (
            );
            /**Sets  the length of the line  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLength
            (
                double length /** length */ 
            );
            /**Returns  the X coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : None */
            public: double X
            (
            );
            /**Sets  the X coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetX
            (
                double x /** x */ 
            );
            /**Returns  the Y coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : None */
            public: double Y
            (
            );
            /**Sets  the Y coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetY
            (
                double y /** y */ 
            );
            /**Returns  the Z coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : None */
            public: double Z
            (
            );
            /**Sets  the Z coordinate of one end of a bounded line or any point on an unbounded line  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZ
            (
                double z /** z */ 
            );
            /**Returns  the I component of the lines direction vector  <br> License requirements : None */
            public: double ILine
            (
            );
            /**Sets  the I component of the lines direction vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetILine
            (
                double iLine /** iline */ 
            );
            /**Returns  the J component of the lines direction vector  <br> License requirements : None */
            public: double JLine
            (
            );
            /**Sets  the J component of the lines direction vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetJLine
            (
                double jLine /** jline */ 
            );
            /**Returns  the K component of the lines direction vector  <br> License requirements : None */
            public: double KLine
            (
            );
            /**Sets  the K component of the lines direction vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetKLine
            (
                double kLine /** kline */ 
            );
            /**Returns  the I component of the lines normal vector as determined by an underlying surface  <br> License requirements : None */
            public: double INormal
            (
            );
            /**Sets  the I component of the lines normal vector as determined by an underlying surface  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetINormal
            (
                double iNormal /** inormal */ 
            );
            /**Returns  the J component of the lines normal vector as determined by an underlying surface  <br> License requirements : None */
            public: double JNormal
            (
            );
            /**Sets  the J component of the lines normal vector as determined by an underlying surface  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetJNormal
            (
                double jNormal /** jnormal */ 
            );
            /**Returns  the K component of the lines normal vector as determined by an underlying surface  <br> License requirements : None */
            public: double KNormal
            (
            );
            /**Sets  the K component of the lines normal vector as determined by an underlying surface  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetKNormal
            (
                double kNormal /** knormal */ 
            );
            /**Returns  the name of the line feature  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the line feature  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Updates line inspection feature characteristic parameters based on selected geometry  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips direction of line.  Moves xyz location to other end of line  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipLineDirection
            (
            );
            /** Updates normal vector for line based on selecion of underlying plane  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateNormal
            (
            );
            /** Flips normal of underlying surface  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipNormal
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
