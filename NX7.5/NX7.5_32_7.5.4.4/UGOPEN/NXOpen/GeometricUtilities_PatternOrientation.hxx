#ifndef NXOpen_GEOMETRICUTILITIES_PATTERNORIENTATION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_PATTERNORIENTATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_PatternOrientation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_PatternOrientation.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class PatternOrientation;
    }
    class CoordinateSystem;
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class ScCollector;
    namespace GeometricUtilities
    {
        class _PatternOrientationBuilder;
        class PatternOrientationImpl;
        /** the pattern orientation definition.  Allows to speicify an orientation option and corresponding entities. */
        class NXOPENCPPEXPORT  PatternOrientation : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** pattern orientation options available.  For details on the interface of each type,
                        visit the corresponding definition class for each type. */
            public: enum Enum
            {
                EnumFixed/** same orientation as the seed. */,
                EnumNormalToPath/** normal to path orientation for Along Type first direction. */,
                EnumNormalToVector/** normal to vector orientation for Along Type first direction.  */,
                EnumParallelToVector/** parallel to vector orientation for Along Type first direction.  */,
                EnumThroughAxis/** through axis orientation for Along Type first direction.  */,
                EnumFollowPattern/** follow pattern orientation, for example, circular pattern type.  */,
                EnumFollowCSYS/** follow CSYS orientation, for general pattern type, when from/to is CSYS.  */,
                EnumCSYStoCSYS/** a relative orientation defined by two CSYSs to transform the seed to an instance location.  */
            };

            private: PatternOrientationImpl * m_patternorientation_impl;
            private: friend class  _PatternOrientationBuilder;
            protected: PatternOrientation();
            public: ~PatternOrientation();
            /**Returns  the orientationOption, an enum for instance orientation.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternOrientation::Enum OrientationOption
            (
            );
            /**Sets  the orientationOption, an enum for instance orientation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOrientationOption
            (
                NXOpen::GeometricUtilities::PatternOrientation::Enum orientationOption /** orientationoption */ 
            );
            /**Returns  the fromCSYS, a CSYS for certain pattern type orientation need.  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * FromCSYS
            (
            );
            /**Sets  the fromCSYS, a CSYS for certain pattern type orientation need.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromCSYS
            (
                NXOpen::CoordinateSystem * fromCSYS /** fromcsys */ 
            );
            /**Returns  the toCSYS, a CSYS for certain pattern type orientation need.  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ToCSYS
            (
            );
            /**Sets  the toCSYS, a CSYS for certain pattern type orientation need.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToCSYS
            (
                NXOpen::CoordinateSystem * toCSYS /** tocsys */ 
            );
            /**Returns  the vectorForAlong, a vector for Along type orientation need.  <br> License requirements : None */
            public: NXOpen::Direction * VectorForAlong
            (
            );
            /**Sets  the vectorForAlong, a vector for Along type orientation need.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVectorForAlong
            (
                NXOpen::Direction * vectorForAlong /** vectorforalong */ 
            );
            /**Returns  the followFaceToggle, a logical flag to indicate if the we need to modify the orientation to follow selected faces.  <br> License requirements : None */
            public: bool FollowFaceToggle
            (
            );
            /**Sets  the followFaceToggle, a logical flag to indicate if the we need to modify the orientation to follow selected faces.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFollowFaceToggle
            (
                bool followFaceToggle /** followfacetoggle */ 
            );
            /**Returns  the followFaceSelection, a sc collector to store selected faces.  <br> License requirements : None */
            public: NXOpen::ScCollector * FollowFaceSelection
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
