#ifndef NXOpen_VISUALREPORTING_VISUALREPORTMANAGER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_VISUALREPORTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_VisualReportManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/VisualReporting_VisualReport.hxx>
#include <NXOpen/VisualReporting_VisualReportBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace VisualReporting
    {
        class VisualReportManager;
    }
    class Session;
    namespace VisualReporting
    {
        class VisualReport;
    }
    namespace VisualReporting
    {
        class VisualReportBuilder;
    }
    namespace VisualReporting
    {
        class VisualReportCollection;
    }
    namespace VisualReporting
    {
        class VisualReportExplorer;
    }
    namespace VisualReporting
    {
        class VisualReportManagerImpl;
        /**
                A manager for load, creation and activation of visual reports.
             <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT  VisualReportManager
        {
            private: VisualReportManagerImpl * m_visualreportmanager_impl;
            private: NXOpen::Session* m_owner;
            /** Constructor */
            public: explicit VisualReportManager(NXOpen::Session *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~VisualReportManager();
            /** Creates a @link VisualReportBuilder VisualReportBuilder@endlink  and starts
                        editing a copy of the given @link VisualReport VisualReport@endlink .
                     @return  The created builder  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReportBuilder * CreateVisualReportBuilder
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** The VisualReport for which this builder is being created. Can be NULL */
            );
            /** Opens an existing @link VisualReport VisualReport@endlink , but does not set it to be the 
                        @link Current Current@endlink  visual report or activate it.
                        If the visual report file cannot be opened, or if there is a problem parsing the file,
                        then an exception will be raised.

                        If opening a managed report then it is recommended to use @link VisualReporting::VisualReportManager::OpenReports VisualReporting::VisualReportManager::OpenReports@endlink 
                        which can take a container path and list of dataset names
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * Open
            (
                const NXString & filename /** The filename of the visual report to open   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Opens existing @link VisualReport VisualReport@endlink , but does not set them to be the 
                        @link Current Current@endlink  visual report or activate them.
                        If the visual report file cannot be opened, or if there is a problem parsing the file,
                        then an exception will be raised.

                        This can be used in native mode by sending in a folder path and filenames, or in
                        managed mode using a container path and dataset names.
                     @return  array of opened reports  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::VisualReport *> OpenReports
            (
                std::vector<NXString> & folders /** array of folders to be searched   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & names /** array of report names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**  Activates the @link Current Current@endlink  visual report.  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void ActivateCurrentVisualReport
            (
            );
            /**  Deactivates the @link Current Current@endlink  visual report.  <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void DeactivateCurrentVisualReport
            (
            );
            /**Returns  
                        the current visual report.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * Current
            (
            );
            /**Sets  
                        the current visual report.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetCurrent
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** visualreport */ 
            );


            /** Returns the @link VisualReportCollection VisualReportCollection@endlink  belonging to this visual report manager */
            public: NXOpen::VisualReporting::VisualReportCollection *VisualReports();
            /** Returns the @link VisualReportExplorer VisualReportExplorer@endlink  belonging to this visual report manager */
            public: NXOpen::VisualReporting::VisualReportExplorer *VisualReportExplorer();
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
