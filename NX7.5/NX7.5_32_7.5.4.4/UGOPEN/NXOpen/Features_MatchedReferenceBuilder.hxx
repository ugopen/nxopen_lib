#ifndef NXOpen_FEATURES_MATCHEDREFERENCEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MATCHEDREFERENCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MatchedReferenceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_MatchedReferenceBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MatchedReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    namespace Features
    {
        class _MatchedReferenceBuilderBuilder;
        class MatchedReferenceBuilderImpl;
        /**
            Represents a @link Features::MatchedReferenceBuilder Features::MatchedReferenceBuilder@endlink 
            */
        class NXOPENCPPEXPORT  MatchedReferenceBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** MatchedReference block type*/
            public: enum Types
            {
                TypesCurve/** single curve or edge */,
                TypesFace/** single face or datum plane */,
                TypesCurveCollector/** curve collector or edge collector */,
                TypesFaceCollector/** face collector */,
                TypesSection/** section */,
                TypesPoint/** point */,
                TypesVector/** not currently used */,
                TypesObject/** general geometry such as the target body and the tool body for copying unite feature */,
                TypesBodyCollector/** body collector */
            };

            private: MatchedReferenceBuilderImpl * m_matchedreferencebuilder_impl;
            private: friend class  _MatchedReferenceBuilderBuilder;
            protected: MatchedReferenceBuilder();
            public: ~MatchedReferenceBuilder();
            /**Returns  the reverse direction  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the matched entity  <br> License requirements : None */
            public: NXOpen::NXObject * MatchedEntity
            (
            );
            /**Sets  the matched entity  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchedEntity
            (
                NXOpen::NXObject * matchedEntity /** matched entity */ 
            );
            /**Returns  the matchedReference type  <br> License requirements : None */
            public: NXOpen::Features::MatchedReferenceBuilder::Types Type
            (
            );
            /**Sets  the matchedReference type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::MatchedReferenceBuilder::Types type /** type */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
