#ifndef NXOpen_CAM_INSPECTIONTORUSFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONTORUSFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionTorusFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_InspectionTorusFeatureBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionTorusFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionTorusFeatureBuilderBuilder;
        class InspectionTorusFeatureBuilderImpl;
        /** Represents a CMM Inspection Torus Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionTorusFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionTorusFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  InspectionTorusFeatureBuilder : public CAM::OperationBuilder
        {
            private: InspectionTorusFeatureBuilderImpl * m_inspectiontorusfeaturebuilder_impl;
            private: friend class  _InspectionTorusFeatureBuilderBuilder;
            protected: InspectionTorusFeatureBuilder();
            public: ~InspectionTorusFeatureBuilder();
            /**Returns  the selected torus  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectedTorus
            (
            );
            /**Returns  the reverse direction  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** True if the axis vector should be reversed */
            );
            /**Returns  the csys reference type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysReferenceType
            (
            );
            /**Sets  the csys reference type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysReferenceType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysReferenceType /** csysreferencetype */ 
            );
            /**Returns  the inner outer type  <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationInneroutertypes InnerOuterType
            (
            );
            /**Sets  the inner outer type  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInnerOuterType
            (
                NXOpen::CAM::CamInspectionOperationInneroutertypes innerOuterType /** inneroutertype */ 
            );
            /**Returns  the major radius of the torus  <br> License requirements : None */
            public: double MajorRadius
            (
            );
            /**Sets  the major radius of the torus  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMajorRadius
            (
                double majorRadius /** majorradius */ 
            );
            /**Returns  the minor radius of the torus  <br> License requirements : None */
            public: double MinorRadius
            (
            );
            /**Sets  the minor radius of the torus  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinorRadius
            (
                double minorRadius /** minorradius */ 
            );
            /**Returns  the torus center point x coordinate  <br> License requirements : None */
            public: double CenterPointX
            (
            );
            /**Sets  the torus center point x coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointX
            (
                double centerPointX /** centerpointx */ 
            );
            /**Returns  the torus center point y coordinate  <br> License requirements : None */
            public: double CenterPointY
            (
            );
            /**Sets  the torus center point y coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointY
            (
                double centerPointY /** centerpointy */ 
            );
            /**Returns  the torus center point z coordinate  <br> License requirements : None */
            public: double CenterPointZ
            (
            );
            /**Sets  the torus center point z coordinate  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCenterPointZ
            (
                double centerPointZ /** centerpointz */ 
            );
            /**Returns  the axis direction vector i component  <br> License requirements : None */
            public: double AxisDirectionI
            (
            );
            /**Sets  the axis direction vector i component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionI
            (
                double axisDirectionI /** axisdirectioni */ 
            );
            /**Returns  the axis direction vector j component  <br> License requirements : None */
            public: double AxisDirectionJ
            (
            );
            /**Sets  the axis direction vector j component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionJ
            (
                double axisDirectionJ /** axisdirectionj */ 
            );
            /**Returns  the axis direction vector k component  <br> License requirements : None */
            public: double AxisDirectionK
            (
            );
            /**Sets  the axis direction vector k component  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionK
            (
                double axisDirectionK /** axisdirectionk */ 
            );
            /**Returns  the torus feature name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the torus feature name  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Updates torus inspection feature characteristic parameters based on selected geometry  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the torus inspection feature axis direction vector  <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipAxisDirection
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
