#ifndef NXOpen_FEATURES_GLOBALSHAPINGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_GLOBALSHAPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_GlobalShapingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_GlobalShapingBuilder.hxx>
#include <NXOpen/Features_GlobalShapingCurveOffsetBuilder.hxx>
#include <NXOpen/Features_GlobalShapingPointOffsetBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GlobalShapingCurveOffsetBuilder;
    }
    namespace Features
    {
        class GlobalShapingCurveOffsetBuilderList;
    }
    namespace Features
    {
        class GlobalShapingPointOffsetBuilder;
    }
    namespace Features
    {
        class GlobalShapingPointOffsetBuilderList;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    class SelectNXObjectList;
    namespace Features
    {
        class _GlobalShapingBuilderBuilder;
        class GlobalShapingBuilderImpl;
        /**
            Represents a @link Features::GlobalShaping Features::GlobalShaping@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateGlobalShapingBuilder Features::FeatureCollection::CreateGlobalShapingBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FirstRegionLimitCurveOffsetLaw.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        FirstRegionLimitCurveOffsetLaw.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        FirstRegionLimitCurveOffsetLaw.Parameter </td> <td> 
         
        t </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  GlobalShapingBuilder : public Features::FeatureBuilder
        {
            /**Represents the deformation type. */
            public: enum DeformationTypeValues
            {
                DeformationTypeValuesToPoint/** To point */,
                DeformationTypeValuesToCurves/** To curves */,
                DeformationTypeValuesOpenRegion/** Open region */,
                DeformationTypeValuesWallDeformation/** Wall deformation */,
                DeformationTypeValuesOverbend/** Overbend */,
                DeformationTypeValuesMatchToSheet/** Match to sheet */,
                DeformationTypeValuesStretchToPoint/** Stretch to point */,
                DeformationTypeValuesStretchToCurve/** Stretch to curve */,
                DeformationTypeValuesRadiusReduction/** Radius Reduction */,
                DeformationTypeValuesUnknown/** Unknown deformation */
            };

            /**Represents the point method type.*/
            public: enum PointMethodType
            {
                PointMethodTypeOffsetFromSheet/** Target point is offset from sheet */,
                PointMethodTypePointDefined/** Target point is the given point */
            };

            /**Represents the offset method type. */
            public: enum OffsetMethod
            {
                OffsetMethodConstant/** Constant offset */,
                OffsetMethodLawControlled/** Law controlled */,
                OffsetMethodCurveDefined/** Curve interpolated */
            };

            /**Represents the rotation type. */
            public: enum RotationMethodType
            {
                RotationMethodTypeAngle/** Rotation specified by angle */,
                RotationMethodTypeDistance/** Rotation specified by distance */
            };

            /**Represents the rotation method type. */
            public: enum RotationMethod
            {
                RotationMethodConstant/** Constant anlge rotation */,
                RotationMethodLawControlled/** Law controlled rotation */,
                RotationMethodCurveDefined/** Curve interpolated rotation */
            };

            /**Represents the direction method type. */
            public: enum DirectionMethodType
            {
                DirectionMethodTypeSameAsProjection/** Overcrown is same as projection direction */,
                DirectionMethodTypeNormalToSheet/** Overcrown is normal to sheet */
            };

            /**Represents the transition method type. */
            public: enum TransitionType
            {
                TransitionTypeFunction1/** Tangent continuous transition */,
                TransitionTypeFunction2/** Position continuous transition */,
                TransitionTypeLaw/** Transition by law */,
                TransitionTypeG2/** g2 continuous */
            };

            /**Represents the body method type. */
            public: enum BodyMethod
            {
                BodyMethodSolid/** Output solid */,
                BodyMethodSheet/** Output sheet */
            };

            /**Represents radius options used. */
            public: enum RadiusType
            {
                RadiusTypeQuintic/** Quintic method. A quintic curve is used to reduce the radius */,
                RadiusTypeRadius/** Radius method. A true arc with tangent lines at the ends is used to
                                                                                reduce radius. This should be used when you know that the input is
                                                                                an edge blend or face blend */
            };

            /**Represents the orientation of the target curve(s) to the limit curves. With parallel option you can specify only one law.
                       With the perpendicular option, you can specify multiple laws. */
            public: enum TargetCurveOrientationType
            {
                TargetCurveOrientationTypeParallel/** Target curve is parallel to the limit curves. */,
                TargetCurveOrientationTypePerpendicular/** Target curves are perpendicular to the limit curves. */
            };

            private: GlobalShapingBuilderImpl * m_globalshapingbuilder_impl;
            private: friend class  _GlobalShapingBuilderBuilder;
            protected: GlobalShapingBuilder();
            public: ~GlobalShapingBuilder();
            /**Returns  the deformation type  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::DeformationTypeValues DeformationType
            (
            );
            /**Sets  the deformation type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationType
            (
                NXOpen::Features::GlobalShapingBuilder::DeformationTypeValues deformationType /** deformationtype */ 
            );
            /**Returns  the sheet to deform  <br> License requirements : None */
            public: NXOpen::ScCollector * SheetToDeform
            (
            );
            /**Returns  the region to deform  <br> License requirements : None */
            public: NXOpen::Section * RegionToDeform
            (
            );
            /**Returns  the region to deform offset law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * FirstRegionLimitCurveOffsetLaw
            (
            );
            /**Returns  the bend curve  <br> License requirements : None */
            public: NXOpen::Section * BendCurve
            (
            );
            /**Returns  the rotation target curve  <br> License requirements : None */
            public: NXOpen::Section * RotationTargetCurve
            (
            );
            /**Returns  the region limit curve  <br> License requirements : None */
            public: NXOpen::Section * RegionLimitCurve
            (
            );
            /**Returns  the region edge curve  <br> License requirements : None */
            public: NXOpen::ScCollector * RegionEdgeCurve
            (
            );
            /**Returns  the first region limit curve  <br> License requirements : None */
            public: NXOpen::Section * FirstRegionLimitCurve
            (
            );
            /**Returns  the second region limit curve  <br> License requirements : None */
            public: NXOpen::Section * SecondRegionLimitCurve
            (
            );
            /**Returns  the second region limit curve offset law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * SecondRegionLimitCurveOffsetLaw
            (
            );
            /**Returns  the first region offset curve  <br> License requirements : None */
            public: NXOpen::ScCollector * FirstRegionOffsetCurve
            (
            );
            /**Returns  the second region offset curve  <br> License requirements : None */
            public: NXOpen::ScCollector * SecondRegionOffsetCurve
            (
            );
            /**Returns  the target sheet  <br> License requirements : None */
            public: NXOpen::ScCollector * TargetSheet
            (
            );
            /**Returns  the target point  <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the target point method  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::PointMethodType TargetPointMethod
            (
            );
            /**Sets  the target point method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetPointMethod
            (
                NXOpen::Features::GlobalShapingBuilder::PointMethodType targetPointMethod /** targetpointmethod */ 
            );
            /**Returns  the target point offset  <br> License requirements : None */
            public: NXOpen::Expression * TargetPointOffset
            (
            );
            /**Returns  the target curve  <br> License requirements : None */
            public: NXOpen::Section * TargetCurve
            (
            );
            /**Returns  the target curve offset type  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::OffsetMethod TargetCurveOffsetType
            (
            );
            /**Sets  the target curve offset type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetCurveOffsetType
            (
                NXOpen::Features::GlobalShapingBuilder::OffsetMethod targetCurveOffsetType /** targetcurveoffsettype */ 
            );
            /**Returns  the target curve offset  <br> License requirements : None */
            public: NXOpen::Expression * TargetCurveOffset
            (
            );
            /**Returns  the target curve offset law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * TargetCurveOffsetLaw
            (
            );
            /**Returns  the first target curve  <br> License requirements : None */
            public: NXOpen::ScCollector * FirstTargetCurve
            (
            );
            /**Returns  the first target curve offset  <br> License requirements : None */
            public: NXOpen::Expression * FirstTargetCurveOffset
            (
            );
            /**Returns  the projection direction  <br> License requirements : None */
            public: NXOpen::Direction * ProjectionDirection
            (
            );
            /**Sets  the projection direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirection
            (
                NXOpen::Direction * projectionDirection /** projectiondirection */ 
            );
            /**Returns  the stretch direction  <br> License requirements : None */
            public: NXOpen::Direction * StretchDirection
            (
            );
            /**Sets  the stretch direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStretchDirection
            (
                NXOpen::Direction * stretchDirection /** stretchdirection */ 
            );
            /**Returns  the second target curve  <br> License requirements : None */
            public: NXOpen::ScCollector * SecondTargetCurve
            (
            );
            /**Returns  the second target curve offset  <br> License requirements : None */
            public: NXOpen::Expression * SecondTargetCurveOffset
            (
            );
            /**Returns  the region boundary offset  <br> License requirements : None */
            public: NXOpen::Expression * RegionToDeformOffset
            (
            );
            /**Returns  the deformation direction method  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::DirectionMethodType DeformationDirectionMethod
            (
            );
            /**Sets  the deformation direction method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationDirectionMethod
            (
                NXOpen::Features::GlobalShapingBuilder::DirectionMethodType deformationDirectionMethod /** deformationdirectionmethod */ 
            );
            /**Returns  the deformation direction reverse  <br> License requirements : None */
            public: bool DeformationDirectionReverse
            (
            );
            /**Sets  the deformation direction reverse  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationDirectionReverse
            (
                bool deformationDirectionReverse /** deformationdirectionreverse */ 
            );
            /**Returns  the rotation angle type  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RotationMethod RotationAngleType
            (
            );
            /**Sets  the rotation angle type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAngleType
            (
                NXOpen::Features::GlobalShapingBuilder::RotationMethod rotationAngleType /** rotationangletype */ 
            );
            /**Returns  the rotation type  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RotationMethodType RotationType
            (
            );
            /**Sets  the rotation type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationType
            (
                NXOpen::Features::GlobalShapingBuilder::RotationMethodType rotationType /** rotationtype */ 
            );
            /**Returns  the rotation angle value  <br> License requirements : None */
            public: NXOpen::Expression * RotationAngle
            (
            );
            /**Returns  the rotation distance value  <br> License requirements : None */
            public: NXOpen::Expression * RotationDistance
            (
            );
            /**Returns  the rotation angle law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RotationAngleLaw
            (
            );
            /**Returns  the rotation distance law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RotationDistanceLaw
            (
            );
            /**Returns  the rotation angle reverse direction  <br> License requirements : None */
            public: bool RotationAngleReverseDirection
            (
            );
            /**Sets  the rotation angle reverse direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAngleReverseDirection
            (
                bool rotationAngleReverseDirection /** rotationanglereversedirection */ 
            );
            /**Returns  the transition options  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::TransitionType TransitionOptions
            (
            );
            /**Sets  the transition options  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionOptions
            (
                NXOpen::Features::GlobalShapingBuilder::TransitionType transitionOptions /** transitionoptions */ 
            );
            /**Returns  the transition law  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * TransitionLaw
            (
            );
            /**Returns  the transition shape control  <br> License requirements : None */
            public: double TransitionShapeControl
            (
            );
            /**Sets  the transition shape control  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionShapeControl
            (
                double transitionShapeControl /** transitionshapecontrol */ 
            );
            /**Returns  the radius reduction percent  <br> License requirements : None */
            public: NXOpen::Expression * RadiusReductionPercent
            (
            );
            /**Returns  the taper start. Distance at the start to apply the taper.  <br> License requirements : None */
            public: NXOpen::Expression * TaperStart
            (
            );
            /**Returns  the taper end. Distance at the end to apply the taper.   <br> License requirements : None */
            public: NXOpen::Expression * TaperEnd
            (
            );
            /**Returns  the radius options  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RadiusType RadiusOptions
            (
            );
            /**Sets  the radius options  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadiusOptions
            (
                NXOpen::Features::GlobalShapingBuilder::RadiusType radiusOptions /** radiusoptions */ 
            );
            /**Returns  the feature options  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
            /**Returns  the modify input sheet  <br> License requirements : None */
            public: bool ModifyInputSheet
            (
            );
            /**Sets  the modify input sheet  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModifyInputSheet
            (
                bool modifyInputSheet /** modifyinputsheet */ 
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /** Create a new target point  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingPointOffsetBuilder * NewTargetPoint
            (
            );
            /**Returns  the target points list  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingPointOffsetBuilderList * TargetPointsList
            (
            );
            /** Create a new target curve  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingCurveOffsetBuilder * NewTargetCurve
            (
            );
            /**Returns  the target curves list  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingCurveOffsetBuilderList * TargetCurvesList
            (
            );
            /**Returns  the maximum iterations count used for approximating the deformed sheet.  <br> License requirements : None */
            public: int IterationCount
            (
            );
            /**Sets  the maximum iterations count used for approximating the deformed sheet.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIterationCount
            (
                int iterationCount /** iterationcount */ 
            );
            /**Returns  the objects to transform with the deformation  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * AssociatedObjects
            (
            );
            /**Returns  the orientation of the target curve to the limit curves. Only used when 
                        deformation_type is <ja_enum_element>JA_GLOBAL_SHAPING_BUILDER_deformation_type_values_wall_deformation</ja_enum_element>.  <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::TargetCurveOrientationType TargetCurveOrientation
            (
            );
            /**Sets  the orientation of the target curve to the limit curves. Only used when 
                        deformation_type is <ja_enum_element>JA_GLOBAL_SHAPING_BUILDER_deformation_type_values_wall_deformation</ja_enum_element>.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetCurveOrientation
            (
                NXOpen::Features::GlobalShapingBuilder::TargetCurveOrientationType orientation /** orientation */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
