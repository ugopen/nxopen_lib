#ifndef NXOpen_CAE_MODELDISPLAYBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELDISPLAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelDisplayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelDisplayBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ModelDisplayBuilder;
    }
    class Builder;
    class NXColor;
    namespace CAE
    {
        class _ModelDisplayBuilderBuilder;
        class ModelDisplayBuilderImpl;
        /** This class provides Model Display Data Support  <br> To create a new instance of this class, use @link CAE::CaePart::CreateModelDisplayBuilder CAE::CaePart::CreateModelDisplayBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ElementColorCycler </td> <td> 
         
        Default </td> </tr> 

        <tr><td> 
         
        ElementDisplayQuality </td> <td> 
         
        Fine </td> </tr> 

        <tr><td> 
         
        ElementSelectInternal </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        GeomDisplayFreeEdges </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        GeomFreeEdgeColor </td> <td> 
         
        186 </td> </tr> 

        <tr><td> 
         
        GeomFreeEdgeEndMarker </td> <td> 
         
        Circle </td> </tr> 

        <tr><td> 
         
        GeomFreeEdgeFont </td> <td> 
         
        Solid </td> </tr> 

        <tr><td> 
         
        GeomFreeEdgeLineWidth </td> <td> 
         
        Thick </td> </tr> 

        <tr><td> 
         
        NodeMarker </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        NodeSelectInternal </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NodeUnattachedMarker </td> <td> 
         
        Asterisk </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ModelDisplayBuilder : public Builder
        {
            /** Indicates node marker display symbol type. */
            public: enum NodeMarkerType
            {
                NodeMarkerTypeNone/** None     */,
                NodeMarkerTypeDot/** Dot      */,
                NodeMarkerTypeAsterisk/** Asterisk */
            };

            /** Indicates unattached node marker display symbol type. */
            public: enum NodeUnattachedMarkerType
            {
                NodeUnattachedMarkerTypeNone/** None     */,
                NodeUnattachedMarkerTypeDot/** Dot      */,
                NodeUnattachedMarkerTypeAsterisk/** Asterisk */
            };

            /** Indicates element display quality. */
            public: enum ElmDispQuality
            {
                ElmDispQualityCoarse/** Coarse */,
                ElmDispQualityMedium/** Medium */,
                ElmDispQualityFine/** Fine   */
            };

            /** Indicates element color basis. */
            public: enum ElmClrBasis
            {
                ElmClrBasisDefault/** Default */,
                ElmClrBasisPhysicalPropertyTable/** Physical Property Table */,
                ElmClrBasisMaterialPropertyTable/** Material Property Table */,
                ElmClrBasisElemCollContainer/** Mesh Collector Property Table */,
                ElmClrBasisElemColl/** Mesh Property Table */
            };

            /** specifies object width for display for geometry free edges */
            public: enum FreeEdgeWidth
            {
                FreeEdgeWidthThin/** Thin */,
                FreeEdgeWidthNormal/** Normal */,
                FreeEdgeWidthThick/** Thick */
            };

            /** specifies the object font for geometry free edges */
            public: enum FreeEdgeFont
            {
                FreeEdgeFontSolid/** Solid font */,
                FreeEdgeFontDashed/** Dashed font */,
                FreeEdgeFontPhantom/** Phantom font */,
                FreeEdgeFontCenterline/** Centerline font */,
                FreeEdgeFontDotted/** Dotted font */,
                FreeEdgeFontLongDashed/** Long dashed font */,
                FreeEdgeFontDottedDashed/** Dotted dashed font */
            };

            /** specifies the marker for endpoints of geometry free edges */
            public: enum FreeEdgeMarker
            {
                FreeEdgeMarkerNone/** No marker */,
                FreeEdgeMarkerPlus/** Plus marker */,
                FreeEdgeMarkerDot/** Dot marker */,
                FreeEdgeMarkerAsterisk/** Asterisk marker */,
                FreeEdgeMarkerCircle/** Circle marker */,
                FreeEdgeMarkerPoundsign/** Pound sign marker */,
                FreeEdgeMarkerCross/** Cross marker */,
                FreeEdgeMarkerSquare/** Square marker */,
                FreeEdgeMarkerTriangle/** Triangle marker */,
                FreeEdgeMarkerDiamond/** Diamond marker */,
                FreeEdgeMarkerCenterLine/** Center line marker */
            };

            private: ModelDisplayBuilderImpl * m_modeldisplaybuilder_impl;
            private: friend class  _ModelDisplayBuilderBuilder;
            protected: ModelDisplayBuilder();
            public: ~ModelDisplayBuilder();
            /**Returns  the node marker display symbol type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::NodeMarkerType NodeMarker
            (
            );
            /**Sets  the node marker display symbol type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeMarker
            (
                NXOpen::CAE::ModelDisplayBuilder::NodeMarkerType nodeMarker /** nodemarker */ 
            );
            /**Returns  the unattached node marker display symbol type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::NodeUnattachedMarkerType NodeUnattachedMarker
            (
            );
            /**Sets  the unattached node marker display symbol type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeUnattachedMarker
            (
                NXOpen::CAE::ModelDisplayBuilder::NodeUnattachedMarkerType nodeUnattachedMarker /** nodeunattachedmarker */ 
            );
            /**Returns  the node color  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::NXColor * NodeColor
            (
            );
            /**Sets  the node color  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeColor
            (
                NXOpen::NXColor * nodeColor /** nodecolor */ 
            );
            /**Returns  the node select internal switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool NodeSelectInternal
            (
            );
            /**Sets  the node select internal switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeSelectInternal
            (
                bool nodeSelectInternal /** nodeselectinternal */ 
            );
            /**Returns  the element display quality setting  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::ElmDispQuality ElementDisplayQuality
            (
            );
            /**Sets  the element display quality setting  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDisplayQuality
            (
                NXOpen::CAE::ModelDisplayBuilder::ElmDispQuality elementDisplayQuality /** elementdisplayquality */ 
            );
            /**Returns  the element select internal switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool ElementSelectInternal
            (
            );
            /**Sets  the element select internal switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementSelectInternal
            (
                bool elementSelectInternal /** elementselectinternal */ 
            );
            /**Returns  the element color cycler basis  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::ElmClrBasis ElementColorCycler
            (
            );
            /**Sets  the element color cycler basis  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementColorCycler
            (
                NXOpen::CAE::ModelDisplayBuilder::ElmClrBasis elementColorCycler /** elementcolorcycler */ 
            );
            /**Returns  the geometry display free edges switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool GeomDisplayFreeEdges
            (
            );
            /**Sets  the geometry display free edges switch  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeomDisplayFreeEdges
            (
                bool geomDisplayFreeEdges /** geomdisplayfreeedges */ 
            );
            /**Returns  the geometry display free edges color  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::NXColor * GeomFreeEdgeColor
            (
            );
            /**Sets  the geometry display free edges color  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeomFreeEdgeColor
            (
                NXOpen::NXColor * geomFreeEdgeColor /** geomfreeedgecolor */ 
            );
            /**Returns  the geometry free edge line width  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::FreeEdgeWidth GeomFreeEdgeLineWidth
            (
            );
            /**Sets  the geometry free edge line width  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeomFreeEdgeLineWidth
            (
                NXOpen::CAE::ModelDisplayBuilder::FreeEdgeWidth freeEdgeWidth /** freeedgewidth */ 
            );
            /**Returns  the geometry free edge font   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::FreeEdgeFont GeomFreeEdgeFont
            (
            );
            /**Sets  the geometry free edge font   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeomFreeEdgeFont
            (
                NXOpen::CAE::ModelDisplayBuilder::FreeEdgeFont freeEdgeFont /** freeedgefont */ 
            );
            /**Returns  the marker for endpoints of geometry free edges   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ModelDisplayBuilder::FreeEdgeMarker GeomFreeEdgeEndMarker
            (
            );
            /**Sets  the marker for endpoints of geometry free edges   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeomFreeEdgeEndMarker
            (
                NXOpen::CAE::ModelDisplayBuilder::FreeEdgeMarker freeEdgeEndpointMarker /** freeedgeendpointmarker */ 
            );
            /** This method will set the colors from the current element color cycler 
                        on all of the meshes in the model.  
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetColorsOnMeshes
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
