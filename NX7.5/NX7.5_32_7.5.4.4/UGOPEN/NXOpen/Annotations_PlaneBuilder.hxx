#ifndef NXOpen_ANNOTATIONS_PLANEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class PlaneBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Xform;
    namespace Annotations
    {
        class _PlaneBuilderBuilder;
        class PlaneBuilderImpl;
        /**  Represents a @link Annotations::PlaneBuilder Annotations::PlaneBuilder@endlink  object.  This object
                 stored information about the plane in which an annotation lies.
             <br> This is a sub-builder class and cannot be directly instantiated <br> */
        class NXOPENCPPEXPORT  PlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** method used to compute the annotation plane */
            public: enum PlaneMethodType
            {
                PlaneMethodTypeXyPlane/** XY of the WCS */,
                PlaneMethodTypeXzPlane/** XZ of the WCS */,
                PlaneMethodTypeYzPlane/** YZ of the WCS */,
                PlaneMethodTypeModelView/** Model view plane */,
                PlaneMethodTypeUserDefined/** User define plane */
            };

            private: PlaneBuilderImpl * m_planebuilder_impl;
            private: friend class  _PlaneBuilderBuilder;
            protected: PlaneBuilder();
            public: ~PlaneBuilder();
            /**Returns  the plane method  <br> License requirements : None */
            public: NXOpen::Annotations::PlaneBuilder::PlaneMethodType PlaneMethod
            (
            );
            /**Sets  the plane method  <br> License requirements : None */
            public: void SetPlaneMethod
            (
                NXOpen::Annotations::PlaneBuilder::PlaneMethodType planeMethod /** planemethod */ 
            );
            /**Returns  the user-defined plane used by the operation  <br> License requirements : None */
            public: NXOpen::Xform * UserDefinedPlane
            (
            );
            /**Sets  the user-defined plane used by the operation  <br> License requirements : None */
            public: void SetUserDefinedPlane
            (
                NXOpen::Xform * userDefinedPlane /** user defined plane */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
