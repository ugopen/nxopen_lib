#ifndef NXOpen_CAM_IPWCONTAINMENTCURVESBUILDER_HXX_INCLUDED
#define NXOpen_CAM_IPWCONTAINMENTCURVESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_IpwContainmentCurvesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_IpwContainmentCurvesBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class IpwContainmentCurvesBuilder;
    }
    class Builder;
    class Point;
    namespace CAM
    {
        class _IpwContainmentCurvesBuilderBuilder;
        class IpwContainmentCurvesBuilderImpl;
        /**
            Represents a @link CAM::IpwContainmentCurvesBuilder CAM::IpwContainmentCurvesBuilder@endlink 
             <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  IpwContainmentCurvesBuilder : public Builder
        {
            /** the thickness method options */
            public: enum ThicknessModeValue
            {
                ThicknessModeValuePoint/** use thickness mode point*/,
                ThicknessModeValueDistance/** use thickness mode distance*/
            };

            private: IpwContainmentCurvesBuilderImpl * m_ipwcontainmentcurvesbuilder_impl;
            private: friend class  _IpwContainmentCurvesBuilderBuilder;
            protected: IpwContainmentCurvesBuilder();
            public: ~IpwContainmentCurvesBuilder();
            /**Returns  the thickness mode  <br> License requirements : None */
            public: NXOpen::CAM::IpwContainmentCurvesBuilder::ThicknessModeValue ThicknessMode
            (
            );
            /**Sets  the thickness mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetThicknessMode
            (
                NXOpen::CAM::IpwContainmentCurvesBuilder::ThicknessModeValue method /** method */ 
            );
            /**Returns  the specify point  <br> License requirements : None */
            public: NXOpen::Point * SpecifyPoint
            (
            );
            /**Sets  the specify point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSpecifyPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the specify distance  <br> License requirements : None */
            public: double SpecifyDistance
            (
            );
            /**Sets  the specify distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSpecifyDistance
            (
                double distanceValue /** distancevalue */ 
            );
            /**Returns  the feature name  <br> License requirements : None */
            public: NXString FeatureName
            (
            );
            /**Sets  the feature name  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeatureName
            (
                const NXString & featureName /** featurename */ 
            );
            /**Returns  the smoothing tolerance  <br> License requirements : None */
            public: double SmoothingTolerance
            (
            );
            /**Sets  the smoothing tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothingTolerance
            (
                double smoothingTolerance /** smoothingtolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
