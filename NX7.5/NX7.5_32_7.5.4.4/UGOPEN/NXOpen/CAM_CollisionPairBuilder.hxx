#ifndef NXOpen_CAM_COLLISIONPAIRBUILDER_HXX_INCLUDED
#define NXOpen_CAM_COLLISIONPAIRBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CollisionPairBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_CollisionPairBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CollisionPairBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _CollisionPairBuilderBuilder;
        class CollisionPairBuilderImpl;
        /**
            Represents a @link CAM::CollisionPairBuilder CAM::CollisionPairBuilder@endlink 
             <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  CollisionPairBuilder : public Builder
        {
            /** the collision selection filter value */
            public: enum Filter
            {
                FilterComponentValue/** component filter*/,
                FilterClassValue/** class filter*/,
                FilterComponentParentValue/** component parent filter*/
            };

            private: CollisionPairBuilderImpl * m_collisionpairbuilder_impl;
            private: friend class  _CollisionPairBuilderBuilder;
            protected: CollisionPairBuilder();
            public: ~CollisionPairBuilder();
            /**Returns  the first collision selection filter  <br> License requirements : None */
            public: NXOpen::CAM::CollisionPairBuilder::Filter FirstObjectFilter
            (
            );
            /**Sets  the first collision selection filter  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFirstObjectFilter
            (
                NXOpen::CAM::CollisionPairBuilder::Filter filter /** filter */ 
            );
            /**Returns  the second collision selection filter  <br> License requirements : None */
            public: NXOpen::CAM::CollisionPairBuilder::Filter SecondObjectFilter
            (
            );
            /**Sets  the second collision selection filter  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSecondObjectFilter
            (
                NXOpen::CAM::CollisionPairBuilder::Filter filter /** filter */ 
            );
            /**Returns  the first collision selection name  <br> License requirements : None */
            public: NXString FirstObjectName
            (
            );
            /**Sets  the first collision selection name  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFirstObjectName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the second collision selection name  <br> License requirements : None */
            public: NXString SecondObjectName
            (
            );
            /**Sets  the second collision selection name  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSecondObjectName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the collision clearance  <br> License requirements : None */
            public: double CollisionClearance
            (
            );
            /**Sets  the collision clearance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCollisionClearance
            (
                double collisionClearance /** collisionclearance */ 
            );
            /**Returns  the collision enable  <br> License requirements : None */
            public: bool CollisionEnable
            (
            );
            /**Sets  the collision enable  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCollisionEnable
            (
                bool collisionEnable /** collisionenable */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
