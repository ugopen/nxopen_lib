#ifndef NXOpen_TOOLING_POCKETBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_POCKETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_PocketBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_PocketBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class PocketBuilder;
    }
    class Builder;
    class SelectPartList;
    namespace Tooling
    {
        class _PocketBuilderBuilder;
        class PocketBuilderImpl;
        /** Mold Wizard pocket management builder  <br> To create a new instance of this class, use @link Tooling::PocketCollection::CreatePocketBuilder Tooling::PocketCollection::CreatePocketBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  PocketBuilder : public Builder
        {
            /** Represents the pocket operation method */
            public: enum ModeType
            {
                ModeTypeSubtract/** do subtract */,
                ModeTypeAdd/** do unite */
            };

            /** Represents the select type of tool */
            public: enum ToolType
            {
                ToolTypePart/** part */,
                ToolTypeSolid/** solid */
            };

            /** Represents the pocket refset types*/
            public: enum RsetType
            {
                RsetTypeFalse/** false */,
                RsetTypeTrue/** true */,
                RsetTypeBoth/** both */
            };

            private: PocketBuilderImpl * m_pocketbuilder_impl;
            private: friend class  _PocketBuilderBuilder;
            protected: PocketBuilder();
            public: ~PocketBuilder();
            /**Returns  the mode select types  <br> License requirements : None */
            public: NXOpen::Tooling::PocketBuilder::ModeType ModeSelection
            (
            );
            /**Sets  the mode select types  <br> License requirements : None */
            public: void SetModeSelection
            (
                NXOpen::Tooling::PocketBuilder::ModeType modeSelection /** modeselection */ 
            );
            /**Returns  the target part selection  <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectTarget
            (
            );
            /**Returns  the tool part selection  <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectTool
            (
            );
            /**Returns  the types of tool to select  <br> License requirements : None */
            public: NXOpen::Tooling::PocketBuilder::ToolType SelectTypes
            (
            );
            /**Sets  the types of tool to select  <br> License requirements : None */
            public: void SetSelectTypes
            (
                NXOpen::Tooling::PocketBuilder::ToolType selectTypes /** selecttypes */ 
            );
            /**Returns  the types of reference sets  <br> License requirements : None */
            public: NXOpen::Tooling::PocketBuilder::RsetType ReferenceSets
            (
            );
            /**Sets  the types of reference sets  <br> License requirements : None */
            public: void SetReferenceSets
            (
                NXOpen::Tooling::PocketBuilder::RsetType referenceSets /** referencesets */ 
            );
            /** The function to remove pocket  <br> License requirements : None */
            public: void RemovePocket
            (
            );
            /**Returns  the association setting access functions  <br> License requirements : None */
            public: bool AssociationSetting
            (
            );
            /**Sets  the association setting access functions  <br> License requirements : None */
            public: void SetAssociationSetting
            (
                bool associationSetting /** associationsetting */ 
            );
            /**Returns  the show or hide value access functions  <br> License requirements : None */
            public: bool ShowSetting
            (
            );
            /**Sets  the show or hide value access functions  <br> License requirements : None */
            public: void SetShowSetting
            (
                bool showSetting /** showsetting */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
