#ifndef NXOpen_ASSEMBLIES_REPLACECOMPONENTBUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_REPLACECOMPONENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ReplaceComponentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_ReplaceComponentBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class ReplaceComponentBuilder;
    }
    class Builder;
    class PartLoadStatus;
    class SelectDisplayableObjectList;
    namespace Assemblies
    {
        class _ReplaceComponentBuilderBuilder;
        class ReplaceComponentBuilderImpl;
        /** Represents a @link Assemblies::ReplaceComponentBuilder Assemblies::ReplaceComponentBuilder@endlink  builder  <br> To create a new instance of this class, use @link Assemblies::AssemblyManager::CreateReplaceComponentBuilder Assemblies::AssemblyManager::CreateReplaceComponentBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ComponentLayer </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentLayerOptionType </td> <td> 
         
        Maintain </td> </tr> 

        <tr><td> 
         
        ComponentName </td> <td> 
         
         </td> </tr> 

        <tr><td> 
         
        ComponentNameType </td> <td> 
         
        AsSpecified </td> </tr> 

        <tr><td> 
         
        MaintainRelationships </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ReplaceAllOccurrences </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ReplaceComponentBuilder : public Builder
        {
            /** Represents possible reference set for replacement part */
            public: enum ComponentReferenceSet
            {
                ComponentReferenceSetMaintain/** Maintain the reference set of the component being replaced out */,
                ComponentReferenceSetEntirePart/** Set the reference set to Entire Part */,
                ComponentReferenceSetEmpty/** Set the reference to Empty */,
                ComponentReferenceSetOthers/** Set the specified reference set */
            };

            /** Represents possible layer option for replacement part */
            public: enum ComponentLayerOption
            {
                ComponentLayerOptionMaintain/** Maintain the layer of the component being replaced out */,
                ComponentLayerOptionOriginal/** Set the layer to replacement part's original layer */,
                ComponentLayerOptionWork/** Set the layer to current work layer*/,
                ComponentLayerOptionAsSpecified/** Set the specified layer*/
            };

            /** Represents possible component name option for replace operation */
            public: enum ComponentNameOption
            {
                ComponentNameOptionMaintain/** Maintain the component name of the component being replaced out */,
                ComponentNameOptionOriginal/** Use the replacement part name as the component name */,
                ComponentNameOptionAsSpecified/** Set the specified component name*/
            };

            private: ReplaceComponentBuilderImpl * m_replacecomponentbuilder_impl;
            private: friend class  _ReplaceComponentBuilderBuilder;
            protected: ReplaceComponentBuilder();
            public: ~ReplaceComponentBuilder();
            /**Returns  the objects to be replaced.  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * ComponentsToReplace
            (
            );
            /**Returns  the replacement part.  <br> License requirements : None */
            public: NXString ReplacementPart
            (
            );
            /**Sets  the replacement part.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetReplacementPart
            (
                const NXString & replacementPart /** replacementpart */ 
            );
            /**Returns  the maintain relationships  <br> License requirements : None */
            public: bool MaintainRelationships
            (
            );
            /**Sets  the maintain relationships  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetMaintainRelationships
            (
                bool maintainRelationships /** maintainrelationships */ 
            );
            /**Returns  the replace all occurrences  <br> License requirements : None */
            public: bool ReplaceAllOccurrences
            (
            );
            /**Sets  the replace all occurrences  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetReplaceAllOccurrences
            (
                bool replaceAllOccurrences /** replacealloccurrences */ 
            );
            /**Returns  the component name options  <br> License requirements : None */
            public: NXOpen::Assemblies::ReplaceComponentBuilder::ComponentNameOption ComponentNameType
            (
            );
            /**Sets  the component name options  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetComponentNameType
            (
                NXOpen::Assemblies::ReplaceComponentBuilder::ComponentNameOption componentNameOption /** componentnameoption */ 
            );
            /**Returns  the component name  <br> License requirements : None */
            public: NXString ComponentName
            (
            );
            /**Sets  the component name  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetComponentName
            (
                const NXString & componentName /** componentname */ 
            );
            /** Get the  reference set  @return   <br> License requirements : None */
            public: NXOpen::Assemblies::ReplaceComponentBuilder::ComponentReferenceSet GetComponentReferenceSetType
            (
                NXString* referenceSetName /** Name of the reference set*/
            );
            /** Set the reference set  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetComponentReferenceSetType
            (
                NXOpen::Assemblies::ReplaceComponentBuilder::ComponentReferenceSet componentReferenceSet /** Reference set */,
                const NXString & referenceSetName /** Name of the reference set. Used only when componentReferenceSet is @link Assemblies::ReplaceComponentBuilder::ComponentReferenceSetOthers Assemblies::ReplaceComponentBuilder::ComponentReferenceSetOthers@endlink    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the layer options  <br> License requirements : None */
            public: NXOpen::Assemblies::ReplaceComponentBuilder::ComponentLayerOption ComponentLayerOptionType
            (
            );
            /**Sets  the layer options  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetComponentLayerOptionType
            (
                NXOpen::Assemblies::ReplaceComponentBuilder::ComponentLayerOption componentLayerOption /** componentlayeroption */ 
            );
            /**Returns  the layer for the new replacement part.
                        <ol>
                        <li>-1 means use the original layers defined in the component.</li>
                        <li>0 means use the work layer.</li>
                        <li>1-256 means use the specified layer.</li>
                       </ol>
                     <br> License requirements : None */
            public: int ComponentLayer
            (
            );
            /**Sets  the layer for the new replacement part.
                        <ol>
                        <li>-1 means use the original layers defined in the component.</li>
                        <li>0 means use the work layer.</li>
                        <li>1-256 means use the specified layer.</li>
                       </ol>
                     <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetComponentLayer
            (
                int componentLayer /** componentlayer */ 
            );
            /** Register the part load status with the replace operation. If during the operation
                        a part could not be loaded, then this object will be used to store error information.
                     @return   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PartLoadStatus * RegisterReplacePartLoadStatus
            (
            );
            /**Returns  the flag to determine whether unsaved parts are allowed to replace. If set to true, then this may result in loss of unsaved data. <br> License requirements : None */
            public: bool AllowTemporaryPartsToReplace
            (
            );
            /**Sets  the flag to determine whether unsaved parts are allowed to replace. If set to true, then this may result in loss of unsaved data. <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAllowTemporaryPartsToReplace
            (
                bool allowTemporaryPartsToReplace /** allowtemporarypartstoreplace */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
