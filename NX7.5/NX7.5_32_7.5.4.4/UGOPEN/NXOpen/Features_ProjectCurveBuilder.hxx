#ifndef NXOpen_FEATURES_PROJECTCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PROJECTCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ProjectCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ProjectCurveBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitJoin.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitJoin;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    class Plane;
    class Point;
    class Section;
    class SelectDisplayableObject;
    class SelectObjectList;
    namespace Features
    {
        class _ProjectCurveBuilderBuilder;
        class ProjectCurveBuilderImpl;
        /**
            Represents a @link Features::ProjectCurve Features::ProjectCurve@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateProjectCurveBuilder Features::FeatureCollection::CreateProjectCurveBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleToProjectionVector.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        BridgedGapSize </td> <td> 
         
        1.0 (millimeters part), 0.04 (inches part) </td> </tr> 

        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.FitOption </td> <td> 
         
        Cubic </td> </tr> 

        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EqualArcLengthMethod </td> <td> 
         
        BothXY </td> </tr> 

        <tr><td> 
         
        GapOption </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        InputCurvesOption.Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        NearestPointOption </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ProjectionDirectionMethod </td> <td> 
         
        AlongFaceNormal </td> </tr> 

        <tr><td> 
         
        ProjectionOption </td> <td> 
         
        None </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ProjectCurveBuilder : public Features::FeatureBuilder
        {
            /** Represents direction method */
            public: enum DirectionType
            {
                DirectionTypeAlongFaceNormal/** Represents Along Face Normal */,
                DirectionTypeTowardPoint/** Represents Towards Point */,
                DirectionTypeTowardLine/** Represents Towards Line */,
                DirectionTypeAlongVector/** Represents Along Vector */,
                DirectionTypeAngleToVector/** Represents Angle To Vector */
            };

            /** Represents projection option type used when direction type is along vector */
            public: enum ProjectionOptionType
            {
                ProjectionOptionTypeNone/** Represents None */,
                ProjectionOptionTypeProjectBothSides/** Represents Project Both Sides */,
                ProjectionOptionTypeEqualArcLength/** Represents Equal Arc Length */
            };

            /** Represents Equal Arc Length type */
            public: enum ArcLengthType
            {
                ArcLengthTypeBothXY/** Represents Both X and Y */,
                ArcLengthTypeFirstXThenY/** Represents First X then Y */,
                ArcLengthTypeFirstYThenX/** Represents First Y then X */,
                ArcLengthTypeXOnly/** Represents X only */,
                ArcLengthTypeYOnly/** Represents Y only */
            };

            private: ProjectCurveBuilderImpl * m_projectcurvebuilder_impl;
            private: friend class  _ProjectCurveBuilderBuilder;
            protected: ProjectCurveBuilder();
            public: ~ProjectCurveBuilder();
            /**Returns  the section to project  <br> License requirements : None */
            public: NXOpen::Section * SectionToProject
            (
            );
            /**Returns  the face to project to  <br> License requirements : None */
            public: NXOpen::SelectObjectList * FaceToProjectTo
            (
            );
            /**Returns  the plane to project to  <br> License requirements : None */
            public: NXOpen::Plane * PlaneToProjectTo
            (
            );
            /**Sets  the plane to project to  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlaneToProjectTo
            (
                NXOpen::Plane * projectedPlane /** projectedplane */ 
            );
            /**Returns  the projection direction method  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::DirectionType ProjectionDirectionMethod
            (
            );
            /**Sets  the projection direction method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirectionMethod
            (
                NXOpen::Features::ProjectCurveBuilder::DirectionType directionMethod /** directionmethod */ 
            );
            /**Returns  the point to project toward  <br> License requirements : None */
            public: NXOpen::Point * PointToProjectToward
            (
            );
            /**Sets  the point to project toward  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointToProjectToward
            (
                NXOpen::Point * towardPoint /** towardpoint */ 
            );
            /**Returns  the reference point for equal arc length  <br> License requirements : None */
            public: NXOpen::Point * ReferencePointForEqualArcLength
            (
            );
            /**Sets  the reference point for equal arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferencePointForEqualArcLength
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the line to project toward  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * LineToProjectToward
            (
            );
            /**Returns  the projection vector  <br> License requirements : None */
            public: NXOpen::Direction * ProjectionVector
            (
            );
            /**Sets  the projection vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionVector
            (
                NXOpen::Direction * alongVector /** alongvector */ 
            );
            /**Returns  the projection option type  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::ProjectionOptionType ProjectionOption
            (
            );
            /**Sets  the projection option type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionOption
            (
                NXOpen::Features::ProjectCurveBuilder::ProjectionOptionType projectionOption /** projectionoption */ 
            );
            /**Returns  the angle to projection vector  <br> License requirements : None */
            public: NXOpen::Expression * AngleToProjectionVector
            (
            );
            /**Returns  the x vector for equal arc length  <br> License requirements : None */
            public: NXOpen::Direction * XVectorForEqualArcLength
            (
            );
            /**Sets  the x vector for equal arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetXVectorForEqualArcLength
            (
                NXOpen::Direction * xVector /** xvector */ 
            );
            /**Returns  the equal arc length method  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::ArcLengthType EqualArcLengthMethod
            (
            );
            /**Sets  the equal arc length method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEqualArcLengthMethod
            (
                NXOpen::Features::ProjectCurveBuilder::ArcLengthType arcLengthMethod /** arclengthmethod */ 
            );
            /**Returns  the input curves option  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * InputCurvesOption
            (
            );
            /**Returns  the curve fit join method  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitJoin * CurveFitJoinData
            (
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the maximum bridged gap size. 
                        When gap distance is less than maximum bridged gap size and bigger than the default modeling tolerance,
                        NX project curve will add an internal bridge curve to close the gap between segments in projection curve.
                        This option is only valid if @link Features::ProjectCurveBuilder::GapOption Features::ProjectCurveBuilder::GapOption @endlink and @link Features::ProjectCurveBuilder::SetGapOption Features::ProjectCurveBuilder::SetGapOption @endlink  is true. 
                      <br> License requirements : None */
            public: double BridgedGapSize
            (
            );
            /**Sets  the maximum bridged gap size. 
                        When gap distance is less than maximum bridged gap size and bigger than the default modeling tolerance,
                        NX project curve will add an internal bridge curve to close the gap between segments in projection curve.
                        This option is only valid if @link Features::ProjectCurveBuilder::GapOption Features::ProjectCurveBuilder::GapOption @endlink and @link Features::ProjectCurveBuilder::SetGapOption Features::ProjectCurveBuilder::SetGapOption @endlink  is true. 
                      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBridgedGapSize
            (
                double bridgedGapSize /** bridgedgapsize */ 
            );
            /**Returns  the gap option whether to create curve to bridge gap or not  <br> License requirements : None */
            public: bool GapOption
            (
            );
            /**Sets  the gap option whether to create curve to bridge gap or not  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetGapOption
            (
                bool gapOption /** gapoption */ 
            );
            /**Returns  the nearest point option whether to project curve by nearest point or not. 
                        This option is only valid if @link Features::ProjectCurveBuilder::DirectionTypeAlongVector Features::ProjectCurveBuilder::DirectionTypeAlongVector@endlink  is used and 
                        @link Features::ProjectCurveBuilder::ProjectionOptionTypeNone Features::ProjectCurveBuilder::ProjectionOptionTypeNone@endlink  or 
                        @link Features::ProjectCurveBuilder::ProjectionOptionTypeProjectBothSides Features::ProjectCurveBuilder::ProjectionOptionTypeProjectBothSides@endlink  is used.
                      <br> License requirements : None */
            public: bool NearestPointOption
            (
            );
            /**Sets  the nearest point option whether to project curve by nearest point or not. 
                        This option is only valid if @link Features::ProjectCurveBuilder::DirectionTypeAlongVector Features::ProjectCurveBuilder::DirectionTypeAlongVector@endlink  is used and 
                        @link Features::ProjectCurveBuilder::ProjectionOptionTypeNone Features::ProjectCurveBuilder::ProjectionOptionTypeNone@endlink  or 
                        @link Features::ProjectCurveBuilder::ProjectionOptionTypeProjectBothSides Features::ProjectCurveBuilder::ProjectionOptionTypeProjectBothSides@endlink  is used.
                      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNearestPointOption
            (
                bool nearestPointOption /** nearestpointoption */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
