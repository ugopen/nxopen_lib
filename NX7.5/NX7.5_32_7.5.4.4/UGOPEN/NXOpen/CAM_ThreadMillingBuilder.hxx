#ifndef NXOpen_CAM_THREADMILLINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_THREADMILLINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ThreadMillingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ThreadMillingBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ThreadMillingBuilder;
    }
    namespace CAM
    {
        class NcmHoleMachining;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class ThreadMillingCutParameters;
    }
    namespace CAM
    {
        class _ThreadMillingBuilderBuilder;
        class ThreadMillingBuilderImpl;
        /** Represents a ThreadMilling Builder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateThreadMillingBuilder CAM::OperationCollection::CreateThreadMillingBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ThreadMillingBuilder : public CAM::OperationBuilder
        {
            private: ThreadMillingBuilderImpl * m_threadmillingbuilder_impl;
            private: friend class  _ThreadMillingBuilderBuilder;
            protected: ThreadMillingBuilder();
            public: ~ThreadMillingBuilder();
            /**Returns  the non-cutting moves builder   <br> License requirements : None */
            public: NXOpen::CAM::NcmHoleMachining * NonCuttingBuilder
            (
            );
            /**Returns  the Axial Stepover builder  <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * AxialStepover
            (
            );
            /**Returns  the Radial Stepover builder  <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * RadialStepover
            (
            );
            /**Returns  the Thread Milling Cut Parameters  <br> License requirements : None */
            public: NXOpen::CAM::ThreadMillingCutParameters * CutParameters
            (
            );
            /**Returns  the spring passes  <br> License requirements : None */
            public: int SpringPasses
            (
            );
            /**Sets  the spring passes  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSpringPasses
            (
                int springPasses /** the spring passes */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
