#ifndef NXOpen_SURFACEREBUILDDATA_HXX_INCLUDED
#define NXOpen_SURFACEREBUILDDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SurfaceRebuildData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SurfaceRebuildData;
    class SurfaceRebuildDataImpl;
    /** Represents surface rebuild data structure.  <br> To create a new instance of this class, use @link Features::MeshSurfaceBuilder::NewRebuildData Features::MeshSurfaceBuilder::NewRebuildData@endlink  <br> */
    class NXOPENCPPEXPORT  SurfaceRebuildData : public TransientObject
    {
        /** Surface rebuild types. */
        public: enum Type
        {
            TypeNone/** None   */,
            TypeManual/** Manual */,
            TypeAuto/** Auto   */
        };

        private: SurfaceRebuildDataImpl * m_surfacerebuilddata_impl;
        public: explicit SurfaceRebuildData(void *ptr);
        /** Dispose transient object.  <br> License requirements : None */
        public: virtual ~SurfaceRebuildData();
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetPrimaryRebuildType
        (
            NXOpen::SurfaceRebuildData::Type primaryRebuildType /** primary rebuild type */ 
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::SurfaceRebuildData::Type PrimaryRebuildType
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetPrimaryDegree
        (
            int degree /** degree. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int PrimaryDegree
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetPrimaryMaxDegree
        (
            int maxDegree /** max degree. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int PrimaryMaxDegree
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetPrimaryMaxSegments
        (
            int maxSegments /** max_segments. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int PrimaryMaxSegments
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetCrossRebuildType
        (
            NXOpen::SurfaceRebuildData::Type crossRebuildType /** cross rebuild type. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::SurfaceRebuildData::Type CrossRebuildType
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetCrossDegree
        (
            int degree /** degree. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int CrossDegree
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetCrossMaxDegree
        (
            int maxDegree /** max degree */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int CrossMaxDegree
        (
        );
        /**Sets   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetCrossMaxSegments
        (
            int maxSegments /** max_segments. */
        );
        /**Returns   <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int CrossMaxSegments
        (
        );
        /** Set surface rebubild tolerances. The tolerance array length is 4.
                tolerances[0] -\> G0 tolerance
                tolerances[1] -\> G1 tolerance
                tolerances[2] -\> G2 tolerance
                tolerances[3] -\> Intersection tolerance
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetTolerances
        (
            const std::vector<double> & tolerances /** tolerances array. */
        );
        /** Get surface rebubild tolerances. The tolerance array length is 4.
                tolerances[0] -\> G0 tolerance
                tolerances[1] -\> G1 tolerance
                tolerances[2] -\> G2 tolerance
                tolerances[3] -\> Intersection tolerance
             @return  tolerances array.  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: std::vector<double> GetTolerances
        (
            int numTolerances /** num tolerances */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
