#ifndef NXOpen_DRAFTINGAUTOTESTPRINT_HXX_INCLUDED
#define NXOpen_DRAFTINGAUTOTESTPRINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DraftingAutotestPrint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ValidationAnnotation2DCollectionValidator.hxx>
#include <NXOpen/ValidationAnnotation3DCollectionValidator.hxx>
#include <NXOpen/ValidationBaseUserSymbolValidator.hxx>
#include <NXOpen/ValidationCenterLineValidator.hxx>
#include <NXOpen/ValidationCurveValidator.hxx>
#include <NXOpen/ValidationDatumTargetValidator.hxx>
#include <NXOpen/ValidationDatumValidator.hxx>
#include <NXOpen/ValidationDimensionValidator.hxx>
#include <NXOpen/ValidationFcfValidator.hxx>
#include <NXOpen/ValidationHatchValidator.hxx>
#include <NXOpen/ValidationIdSymbolValidator.hxx>
#include <NXOpen/ValidationLabelOnParentValidator.hxx>
#include <NXOpen/ValidationMemberViewValidator.hxx>
#include <NXOpen/ValidationNoteValidator.hxx>
#include <NXOpen/ValidationPMIBalloonValidator.hxx>
#include <NXOpen/ValidationPartListValidator.hxx>
#include <NXOpen/ValidationSectionEdgesCollectionValidator.hxx>
#include <NXOpen/ValidationSectionLineCollectionValidator.hxx>
#include <NXOpen/ValidationSectionLineSegmentValidator.hxx>
#include <NXOpen/ValidationSectionLineValidator.hxx>
#include <NXOpen/ValidationSurfaceFinishValidator.hxx>
#include <NXOpen/ValidationTableValidator.hxx>
#include <NXOpen/ValidationThreadCurveCollectionValidator.hxx>
#include <NXOpen/ValidationThreadCurveValidator.hxx>
#include <NXOpen/ValidationVICurveCollectionValidator.hxx>
#include <NXOpen/ValidationViewCollectionValidator.hxx>
#include <NXOpen/ValidationViewLabelValidator.hxx>
#include <NXOpen/ValidationWeldValidator.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class DraftingAutotestPrint;
    class DebugSession;
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class BalloonNote;
    }
    namespace Annotations
    {
        class BaseDatum;
    }
    namespace Annotations
    {
        class BaseDatumTarget;
    }
    namespace Annotations
    {
        class BaseFcf;
    }
    namespace Annotations
    {
        class BaseNote;
    }
    namespace Annotations
    {
        class BaseSurfaceFinish;
    }
    namespace Annotations
    {
        class Centerline;
    }
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class Hatch;
    }
    namespace Annotations
    {
        class IdSymbol;
    }
    namespace Annotations
    {
        class Note;
    }
    namespace Annotations
    {
        class Weld;
    }
    class DisplayableObject;
    namespace Drawings
    {
        class DraftingView;
    }
    class Part;
    class ValidationAnnotation2DCollectionValidator;
    class ValidationAnnotation3DCollectionValidator;
    class ValidationBaseUserSymbolValidator;
    class ValidationCenterLineValidator;
    class ValidationCurveValidator;
    class ValidationDatumTargetValidator;
    class ValidationDatumValidator;
    class ValidationDimensionValidator;
    class ValidationFcfValidator;
    class ValidationHatchValidator;
    class ValidationIdSymbolValidator;
    class ValidationLabelOnParentValidator;
    class ValidationMemberViewValidator;
    class ValidationNoteValidator;
    class ValidationPMIBalloonValidator;
    class ValidationPartListValidator;
    class ValidationSectionEdgesCollectionValidator;
    class ValidationSectionLineCollectionValidator;
    class ValidationSectionLineSegmentValidator;
    class ValidationSectionLineValidator;
    class ValidationSurfaceFinishValidator;
    class ValidationTableValidator;
    class ValidationThreadCurveCollectionValidator;
    class ValidationThreadCurveValidator;
    class ValidationVICurveCollectionValidator;
    class ValidationViewCollectionValidator;
    class ValidationViewLabelValidator;
    class ValidationWeldValidator;
    class DraftingAutotestPrintImpl;
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link DebugSession DebugSession@endlink  <br> */
    class NXOPENDEBUGSESSIONCPPEXPORT  DraftingAutotestPrint
    {
        private: DraftingAutotestPrintImpl * m_draftingautotestprint_impl;
        private: NXOpen::DebugSession* m_owner;
        /** Constructor */
        public: explicit DraftingAutotestPrint(NXOpen::DebugSession *owner);
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~DraftingAutotestPrint();
        /** Creates a 2D annotation collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationAnnotation2DCollectionValidator * CreateAnnotation2dCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a 3D annotation collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationAnnotation3DCollectionValidator * CreateAnnotation3dCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a drafting view collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationViewCollectionValidator * CreateViewCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a drafting section edge collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationSectionEdgesCollectionValidator * CreateSectionEdgesCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a drafting section line collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationSectionLineCollectionValidator * CreateSectionLineCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a thread curve collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationThreadCurveCollectionValidator * CreateThreadCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a drafting virtual intersection curve collection validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationVICurveCollectionValidator * CreateViCurveCollectionValidator
        (
            NXOpen::Part * part /** part */ 
        );
        /** Creates a drafting note validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationNoteValidator * CreateNoteValidator
        (
            NXOpen::Annotations::BaseNote * note /** note */ 
        );
        /** Creates a drafting feature control frame validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationFcfValidator * CreateFcfValidator
        (
            NXOpen::Annotations::BaseFcf * fcf /** fcf */ 
        );
        /** Creates a drafting datum validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationDatumValidator * CreateDatumValidator
        (
            NXOpen::Annotations::BaseDatum * datum /** datum */ 
        );
        /** Creates a drafting datum target validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationDatumTargetValidator * CreateDatumTargetValidator
        (
            NXOpen::Annotations::BaseDatumTarget * datumTarget /** datum target */ 
        );
        /** Creates a drafting id symbol validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationIdSymbolValidator * CreateIdSymbolValidator
        (
            NXOpen::Annotations::IdSymbol * idSymbol /** id symbol */ 
        );
        /** Creates a drafting tabular note validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationTableValidator * CreateTableValidator
        (
            NXOpen::DisplayableObject * table /** table */ 
        );
        /** Creates a drafting parts list validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationPartListValidator * CreatePartListValidator
        (
            NXOpen::DisplayableObject * plist /** plist */ 
        );
        /** Creates a drafting crosshatch validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationHatchValidator * CreateHatchValidator
        (
            NXOpen::Annotations::Hatch * hatch /** hatch */ 
        );
        /** Creates a drafting centerline validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationCenterLineValidator * CreateCenterlineValidator
        (
            NXOpen::Annotations::Centerline * cline /** cline */ 
        );
        /** Creates a drawing view label validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationViewLabelValidator * CreateViewLabelValidator
        (
            NXOpen::Annotations::BaseNote * label /** label */ 
        );
        /** Creates a label on parent validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationLabelOnParentValidator * CreateLabelOnParentValidator
        (
            NXOpen::Annotations::Note * label /** label */ 
        );
        /** Creates a user symbol validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationBaseUserSymbolValidator * CreateBaseUserSymbolValidator
        (
            NXOpen::Annotations::Annotation * symbol /** symbol */ 
        );
        /** Creates a surface finish symbol validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationSurfaceFinishValidator * CreateSurfaceFinishValidator
        (
            NXOpen::Annotations::BaseSurfaceFinish * symbol /** symbol */ 
        );
        /** Creates a PMI balloon validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationPMIBalloonValidator * CreatePmiBalloonValidator
        (
            NXOpen::Annotations::BalloonNote * balloon /** balloon */ 
        );
        /** Creates a drafting curve validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationCurveValidator * CreateCurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );
        /** Creates a thread curve validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationThreadCurveValidator * CreateThreadCurveValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );
        /** Creates a section line validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationSectionLineValidator * CreateSectionLineValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );
        /** Creates a section line segment validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationSectionLineSegmentValidator * CreateSectionLineSegmentValidator
        (
            NXOpen::DisplayableObject * curve /** curve */ 
        );
        /** Creates a drafting member view validator  @return   <br> License requirements : None */
        public: NXOpen::ValidationMemberViewValidator * CreateMemberViewValidator
        (
            NXOpen::Drawings::DraftingView * view /** view */ 
        );
        /** Creates a dimension validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationDimensionValidator * CreateDimensionValidator
        (
            NXOpen::Annotations::Dimension * dimension /** dimension */ 
        );
        /** Creates a weld validator.  @return   <br> License requirements : None */
        public: NXOpen::ValidationWeldValidator * CreateWeldValidator
        (
            NXOpen::Annotations::Weld * weld /** weld */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
