#ifndef NXOpen_CAM_CAMFEATURE_HXX_INCLUDED
#define NXOpen_CAM_CAMFEATURE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMFeature.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMFeature.hxx>
#include <NXOpen/IFitTo.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CAMFeature;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class Operation;
    }
    class Face;
    class IFitTo;
    class INXObject;
    class NXObject;
    namespace CAM
    {
        class _CAMFeatureBuilder;
        class CAMFeatureImpl;
        /** Represents a CAM Feature  <br> To obtain an instance of this class use @link CAM::FeatureRecognitionBuilder CAM::FeatureRecognitionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  CAMFeature : public NXObject, public virtual IFitTo
        {
            /** Update status of the feature */
            public: enum State
            {
                StateDeleted/** Feature is not valid */,
                StateChanged/** Feature is changed and out of date */,
                StateUpdated/** Feature is changed and updated */,
                StateUpToDate/** Feature is up to date */
            };

            /** Process status of the feature */
            public: enum ProcessStatus
            {
                ProcessStatusEmpty/** Feature has no operations */,
                ProcessStatusRegenerate/** One or more of the feature's operation toolpaths need to regenerate */,
                ProcessStatusIncomplete/** One or more of the feature's operation toolpaths are not completed */,
                ProcessStatusComplete/** The feature's operation toolpaths are complete */
            };

            private: CAMFeatureImpl * m_camfeature_impl;
            private: friend class  _CAMFeatureBuilder;
            protected: CAMFeature();
            public: ~CAMFeature();
            /**Returns  the name of the CAMFeature  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the CAMFeature  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Returns  the update status of the CAMFeature  <br> License requirements : None */
            public: NXOpen::CAM::CAMFeature::State Status
            (
            );
            /**Returns  the type name of the CAMFeature  <br> License requirements : None */
            public: NXString Type
            (
            );
            /**Returns  the source of the CAMFeature  <br> License requirements : None */
            public: NXString SourceType
            (
            );
            /** Get the faces associated with the CAMFeature  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Face *> GetFaces
            (
            );
            /** Get the process status of the CAMFeature in the context of a feature group  @return   <br> License requirements : None */
            public: NXOpen::CAM::CAMFeature::ProcessStatus GetProcessStatus
            (
                NXOpen::CAM::NCGroup * group /** feature group for the operation process context */
            );
            /** Get the feature groups in which the CAMFeature is classified  @return   <br> License requirements : None */
            public: std::vector<NXOpen::CAM::NCGroup *> GetGroups
            (
            );
            /** Get the operations manufacturing the CAMFeature  @return   <br> License requirements : None */
            public: std::vector<NXOpen::CAM::Operation *> GetOperations
            (
            );
            /** Approve changes on a CAMFeature  <br> License requirements : cam_base ("CAM BASE") */
            public: void ApproveChanges
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
