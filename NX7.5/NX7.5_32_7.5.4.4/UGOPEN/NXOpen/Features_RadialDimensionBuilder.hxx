#ifndef NXOpen_FEATURES_RADIALDIMENSIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RADIALDIMENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RadialDimensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_DimensionBuilder.hxx>
#include <NXOpen/Features_RadialDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_OrientXpressBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RadialDimensionBuilder;
    }
    namespace Features
    {
        class DimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class OrientXpressBuilder;
    }
    namespace Features
    {
        class _RadialDimensionBuilderBuilder;
        class RadialDimensionBuilderImpl;
        /**
            Represents a @link Features::RadialDimension Features::RadialDimension@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRadialDimensionBuilder Features::FeatureCollection::CreateRadialDimensionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RadialDimensionBuilder : public Features::DimensionBuilder
        {
            /** the option for radius or diameter */
            public: enum ValueOption
            {
                ValueOptionRadius/** radius */ ,
                ValueOptionDiameter/** diameter */ 
            };

            private: RadialDimensionBuilderImpl * m_radialdimensionbuilder_impl;
            private: friend class  _RadialDimensionBuilderBuilder;
            protected: RadialDimensionBuilder();
            public: ~RadialDimensionBuilder();
            /**Returns  the dimension plane  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientXpressBuilder * DimensionPlane
            (
            );
            /**Returns  the radius diameter option  <br> License requirements : None */
            public: NXOpen::Features::RadialDimensionBuilder::ValueOption RadiusDiameterOption
            (
            );
            /**Sets  the radius diameter option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadiusDiameterOption
            (
                NXOpen::Features::RadialDimensionBuilder::ValueOption radiusDiameterOption /** radiusdiameteroption */ 
            );
            /**Returns  the pick point  <br> License requirements : None */
            public: NXOpen::Point3d PickPoint
            (
            );
            /**Sets  the pick point  <br> License requirements : None */
            public: void SetPickPoint
            (
                const NXOpen::Point3d & pickPoint /** pickpoint */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
