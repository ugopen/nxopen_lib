#ifndef NXOpen_DRAWINGS_ORIENTEDSECTIONLINEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_ORIENTEDSECTIONLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_OrientedSectionLineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_OrientedSectionLineBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class OrientedSectionLineBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace Drawings
    {
        class _OrientedSectionLineBuilderBuilder;
        class OrientedSectionLineBuilderImpl;
        /** Represents a @link Drawings::OrientedSectionLineBuilder Drawings::OrientedSectionLineBuilder@endlink .
                This class is used to create or edit a
                @link Drawings::OrientedSectionLine Drawings::OrientedSectionLine@endlink . */
        class NXOPENCPPEXPORT  OrientedSectionLineBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: OrientedSectionLineBuilderImpl * m_orientedsectionlinebuilder_impl;
            private: friend class  _OrientedSectionLineBuilderBuilder;
            protected: OrientedSectionLineBuilder();
            public: ~OrientedSectionLineBuilder();
            /**Returns  the 3D cut location  <br> License requirements : None */
            public: NXOpen::Point * CutLocation3D
            (
            );
            /**Sets  the 3D cut location  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCutLocation3D
            (
                NXOpen::Point * cutLocation3D /** cutlocation3d */ 
            );
            /**Returns  the end location 1 which determines the position of the
                        first arrow segment in the section line.  <br> License requirements : None */
            public: NXOpen::Point * EndLocation1
            (
            );
            /**Sets  the end location 1 which determines the position of the
                        first arrow segment in the section line.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetEndLocation1
            (
                NXOpen::Point * endLocation1 /** endlocation1 */ 
            );
            /**Returns  the end location 2 which determines the position of the
                        second arrow segment in the section line  <br> License requirements : None */
            public: NXOpen::Point * EndLocation2
            (
            );
            /**Sets  the end location 2 which determines the position of the
                        second arrow segment in the section line  <br> License requirements : drafting ("DRAFTING") */
            public: void SetEndLocation2
            (
                NXOpen::Point * endLocation2 /** endlocation2 */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
