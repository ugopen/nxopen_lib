#ifndef NXOpen_ANNOTATIONS_ANNOTATIONMANAGER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ANNOTATIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AnnotationManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_AppendedText.hxx>
#include <NXOpen/Annotations_AssociateDimensionBuilder.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_AssociativityBuilder.hxx>
#include <NXOpen/Annotations_ComponentData.hxx>
#include <NXOpen/Annotations_CompoundDatumReferenceBuilder.hxx>
#include <NXOpen/Annotations_DatumReference.hxx>
#include <NXOpen/Annotations_DatumReferenceBuilder.hxx>
#include <NXOpen/Annotations_DimensionData.hxx>
#include <NXOpen/Annotations_DraftingDatumTargetBuilder.hxx>
#include <NXOpen/Annotations_DraftingFeatureControlFrameBuilder.hxx>
#include <NXOpen/Annotations_DraftingNoteBuilder.hxx>
#include <NXOpen/Annotations_EditLeaderBuilder.hxx>
#include <NXOpen/Annotations_FcfFrame.hxx>
#include <NXOpen/Annotations_FcfFrameData.hxx>
#include <NXOpen/Annotations_FeatureControlFrameDataBuilder.hxx>
#include <NXOpen/Annotations_LeaderBundle.hxx>
#include <NXOpen/Annotations_LeaderData.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/Annotations_MasterCustomSymbolData.hxx>
#include <NXOpen/Annotations_PmiData.hxx>
#include <NXOpen/Annotations_PmiDatumTargetBuilder.hxx>
#include <NXOpen/Annotations_PmiFeatureControlFrameBuilder.hxx>
#include <NXOpen/Annotations_PmiNoteBuilder.hxx>
#include <NXOpen/Annotations_QueryPmiBuilder.hxx>
#include <NXOpen/Annotations_TextWithEditControlsBuilder.hxx>
#include <NXOpen/Annotations_UserSymbolPreferences.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/LineWelds.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class AnnotationManager;
    }
    class Part;
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class AppendedText;
    }
    namespace Annotations
    {
        class AssociateDimensionBuilder;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class AssociativityBuilder;
    }
    namespace Annotations
    {
        class BusinessModifierCollection;
    }
    namespace Annotations
    {
        class CenterlineCollection;
    }
    namespace Annotations
    {
        class ComponentData;
    }
    namespace Annotations
    {
        class CompoundDatumReferenceBuilder;
    }
    namespace Annotations
    {
        class CustomSymbolCollection;
    }
    namespace Annotations
    {
        class DatumReference;
    }
    namespace Annotations
    {
        class DatumReferenceBuilder;
    }
    namespace Annotations
    {
        class DatumTarget;
    }
    namespace Annotations
    {
        class DatumTargetCollection;
    }
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class DimensionData;
    }
    namespace Annotations
    {
        class DimensionSetCollection;
    }
    namespace Annotations
    {
        class DraftingDatumTarget;
    }
    namespace Annotations
    {
        class DraftingDatumTargetBuilder;
    }
    namespace Annotations
    {
        class DraftingFeatureControlFrameBuilder;
    }
    namespace Annotations
    {
        class DraftingNoteBuilder;
    }
    namespace Annotations
    {
        class DraftingSurfaceFinishCollection;
    }
    namespace Annotations
    {
        class EditLeaderBuilder;
    }
    namespace Annotations
    {
        class Fcf;
    }
    namespace Annotations
    {
        class FcfCollection;
    }
    namespace Annotations
    {
        class FcfDatumReference;
    }
    namespace Annotations
    {
        class FcfFrame;
    }
    namespace Annotations
    {
        class FcfFrameData;
    }
    namespace Annotations
    {
        class FeatureControlFrameData;
    }
    namespace Annotations
    {
        class FeatureControlFrameDataBuilder;
    }
    namespace Annotations
    {
        class Gdt;
    }
    namespace Annotations
    {
        class GdtDatumCollection;
    }
    namespace Annotations
    {
        class HatchCollection;
    }
    namespace Annotations
    {
        class IdSymbolCollection;
    }
    namespace Annotations
    {
        class IntersectionSymbolCollection;
    }
    namespace Annotations
    {
        class Label;
    }
    namespace Annotations
    {
        class LeaderBundle;
    }
    namespace Annotations
    {
        class LeaderData;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
        class LineWeld;
    }
    namespace Annotations
    {
        class MasterCustomSymbolData;
    }
    namespace Annotations
    {
        class Note;
    }
    namespace Annotations
    {
        class OffsetCenterPointCollection;
    }
    namespace Annotations
    {
        class OrdinateMarginCollection;
    }
    namespace Annotations
    {
        class PartSymbolFolderCollection;
    }
    namespace Annotations
    {
        class PmiData;
    }
    namespace Annotations
    {
        class PmiDatumTargetBuilder;
    }
    namespace Annotations
    {
        class PmiFeatureControlFrameBuilder;
    }
    namespace Annotations
    {
        class PmiFilterCollection;
    }
    namespace Annotations
    {
        class PmiNoteBuilder;
    }
    namespace Annotations
    {
        class QueryPmiBuilder;
    }
    namespace Annotations
    {
        class SimpleDraftingAid;
    }
    namespace Annotations
    {
        class TargetPointCollection;
    }
    namespace Annotations
    {
        class TextWithEditControlsBuilder;
    }
    namespace Annotations
    {
        class UserSymbolPreferences;
    }
    namespace Annotations
    {
        class WeldCollection;
    }
    class DisplayableObject;
    class ModelingView;
    namespace Preferences
    {
        class AnnotationPreferences;
    }
    class SymbolFont;
    class Xform;
    namespace Annotations
    {
        class AnnotationManagerImpl;
        /** Represents an object that manages annotation and PMI (Product and Manufacturing Information) 
                display instance objects.
                This class contains the collection objects for creating and iterating over annotations and PMI
                display instances.  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT  AnnotationManager
        {
            private: AnnotationManagerImpl * m_annotationmanager_impl;
            private: NXOpen::Part* m_owner;
            /** Constructor */
            public: explicit AnnotationManager(NXOpen::Part *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AnnotationManager();
            /** Creates a note  @return  the new note  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Note * CreateNote
            (
                std::vector<NXString> & textLines /** text for the note */,
                const NXOpen::Point3d & origin /** origin for the note */,
                NXOpen::AxisOrientation orientation /** determines whether the note will be horizontal or vertical */,
                NXOpen::Annotations::LetteringPreferences * letteringPreferences /** 
                                    lettering preferences.  If NULL, the global lettering preferences will be used */,
                NXOpen::Annotations::UserSymbolPreferences * userSymbolPreferences /** 
                                    user symbol preferences.  If NULL, the scale and aspect ratio will be set to 1.0 */
            );
            /** Converts a simple drafting aid into a line weld by creating a new line weld
                    using the text, origin, and preferences from the drafting aid.  
                    If there are other annotations that are dependent on the drafting aid,
                    (for example, a line weld that has a leader attached to the drafting aid),
                    those dependencies will NOT be copied over.  @return  the new line weld  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::LineWeld * ConvertToLineWeld
            (
                NXOpen::Annotations::LineWeld * draftingAid /** the drafting aid to convert */,
                bool keepDraftingAid /** whether to keep the drafting aid.  If false,
                                                    the drafting aid will be deleted */,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the new label.
                                    The leader type must be Plain, Around, PlainAligned, or AroundAligned.
                                    To use any other type of leader, you must create a GDT instead. */
            );
            /** Converts a simple drafting aid into a note by creating a new note
                    using the text, origin, and preferences from the drafting aid.  
                    If there are other annotations that are dependent on the drafting aid,
                    (for example, a label that has a leader attached to the drafting aid),
                    those dependencies will NOT be copied over.  @return  the new note  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Note * ConvertToNote
            (
                NXOpen::Annotations::SimpleDraftingAid * draftingAid /** the drafting aid to convert */,
                bool keepDraftingAid /** whether to keep the drafting aid.  If false,
                                                    the drafting aid will be deleted */
            );
            /** Converts a simple drafting aid into a label by creating a new label
                    using the text, origin, and preferences from the drafting aid.  
                    If there are other annotations that are dependent on the drafting aid,
                    (for example, a label that has a leader attached to the drafting aid),
                    those dependencies will NOT be copied over.  @return  the new label  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Label * ConvertToLabel
            (
                NXOpen::Annotations::SimpleDraftingAid * draftingAid /** the drafting aid to convert */,
                bool keepDraftingAid /** whether to keep the drafting aid.  If false,
                                                    the drafting aid will be deleted */,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the new label.
                                    The leader type must be Plain, Around, PlainAligned, or AroundAligned.
                                    To use any other type of leader, you must create a GDT instead. */
            );
            /** Converts a simple drafting aid into a GDT by creating a new GDT
                    using the text, origin, and preferences from the drafting aid.  
                    If there are other annotations that are dependent on the drafting aid,
                    (for example, a label that has a leader attached to the drafting aid),
                    those dependencies will NOT be copied over.  @return  the new GDT  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Gdt * ConvertToGdt
            (
                NXOpen::Annotations::SimpleDraftingAid * draftingAid /** the drafting aid to convert */,
                bool keepDraftingAid /** whether to keep the drafting aid.  If false,
                                                    the drafting aid will be deleted */,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the new GDT */
            );
            /** Converts a simple drafting aid into an ID symbol by creating a new
                    ID symbol using the text, origin, and preferences from the drafting aid.  
                    If there are other annotations that are dependent on the drafting aid,
                    (for example, a label that has a leader attached to the drafting aid),
                    those dependencies will NOT be copied over.  @return  the new ID Symbol  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::SimpleDraftingAid * ConvertToIdSymbol
            (
                NXOpen::Annotations::SimpleDraftingAid * draftingAid /** the drafting aid to convert */,
                bool keepDraftingAid /** whether to keep the drafting aid.  If false,
                                                    the drafting aid will be deleted */,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the new ID Symbol */
            );
            /** Creates a label.
                    The leader type must be Plain, Around, PlainAligned, or AroundAligned.
                    To use any other type of leader, you must create a GDT instead.  @return  the new label  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Label * CreateLabel
            (
                std::vector<NXString> & textLines /** text for the label */,
                const NXOpen::Point3d & origin /** origin for the label */,
                NXOpen::Annotations::LetteringPreferences * letteringPreferences /** 
                                    lettering preferences.  If NULL, the global lettering preferences will be used */,
                NXOpen::Annotations::UserSymbolPreferences * userSymbolPreferences /** 
                                    user symbol preferences.  If NULL, the scale and aspect ratio will be set to 1.0 */,
                NXOpen::Annotations::LineAndArrowPreferences * lineArrowPreferences /** 
                                    line and arrow preferences.  If NULL, the global line and arrow preferences will be used */,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the label */
            );
            /** Creates a GDT symbol  @return  the new GDT  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Gdt * CreateGdt
            (
                std::vector<NXString> & textLines /** text for the GDT */,
                const NXOpen::Point3d & origin /** origin for the GDT */,
                NXOpen::Annotations::LetteringPreferences * letteringPreferences /** 
                                    lettering preferences.  If NULL, the global lettering preferences will be used */,
                NXOpen::Annotations::UserSymbolPreferences * userSymbolPreferences /** 
                                    user symbol preferences.  If NULL, the scale and aspect ratio will be set to 1.0 */,
                NXOpen::Annotations::LineAndArrowPreferences * lineArrowPreferences /** 
                                    line and arrow preferences.  If NULL, the global line and arrow preferences will be used */,
                bool alwaysVertical /** always vertical */ ,
                NXOpen::Annotations::LeaderBundle * leader /** specifies the leaders for the GDT.
                                    The following leader types are not valid for GDT symbols:
                                    PlainNostub and AlignedNostub */
            );
            /** Constructs a new UserSymbolPreferences object  @return  the new object  <br> License requirements : None */
            public: NXOpen::Annotations::UserSymbolPreferences * NewUserSymbolPreferences
            (
                NXOpen::Annotations::UserSymbolPreferences::SizeType type /** Whether to use length and height or scale and aspect ratio */,
                double lengthOrScale /** Length or scale */,
                double heightOrAspectRatio /** Height or aspect ratio */
            );
            /** Constructs a new LeaderBundle object  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LeaderBundle * NewLeaderBundle
            (
            );
            /**Sets  the symbol font definition file. @link LoadSymbolFontFromSbfFile LoadSymbolFontFromSbfFile@endlink 
                    will read from this file  <br> License requirements : None */
            public: void SetCurrentSbfFile
            (
                const NXString & fileName /** file name */ 
            );
            /**Returns  the symbol font definition file. @link LoadSymbolFontFromSbfFile LoadSymbolFontFromSbfFile@endlink 
                    will read from this file  <br> License requirements : None */
            public: NXString CurrentSbfFile
            (
            );
            /** Loads a symbol font from the current symbol font definition file  @return   <br> License requirements : None */
            public: NXOpen::SymbolFont * LoadSymbolFontFromSbfFile
            (
                const NXString & symbolName /** name of the symbol   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double* symbolWidth /** symbol width */ ,
                double* symbolHeight /** symbol height */ 
            );
            /** Reads the names of all symbol fonts in the current symbol font definition file  @return  
                                                array of names of all symbol fonts in the file  <br> License requirements : None */
            public: std::vector<NXString> ReadAllSymbolNamesFromSbfFile
            (
            );
            /** Save a new master Custom Symbol file. 
                         Use builder class <class>Annot.MasterSymbolBuilder</class> 
                         methods instead of this method.
             @deprecated Deprecated in NX7.5.2 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.2") void SaveUserSymbolPart
            (
                NXOpen::Annotations::MasterCustomSymbolData * symData /** New master part data */
            );
            /** Creates a new PmiData object  @return  New PMIData object  <br> License requirements : None */
            public: NXOpen::Annotations::PmiData * NewPmiData
            (
            );
            /** Creates a new AppendedText object  @return  New AppendedText object  <br> License requirements : None */
            public: NXOpen::Annotations::AppendedText * NewAppendedText
            (
            );
            /** Creates new DimensionData object  @return  New DimensionData  object  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionData * NewDimensionData
            (
            );
            /** Creates a new Associativity object  @return  New Associativity object  <br> License requirements : None */
            public: NXOpen::Annotations::Associativity * NewAssociativity
            (
            );
            /** Creates a new FcfFrame object  @return  New FcfFrame object  <br> License requirements : None */
            public: NXOpen::Annotations::FcfFrame * NewFcfFrame
            (
            );
            /** Creates a new DatumReference object  @return  New DatumReference object  <br> License requirements : None */
            public: NXOpen::Annotations::DatumReference * NewDatumReference
            (
            );
            /** Creates a new MasterCustomSymbolData object  @return  New MasterCustomSymbolData object  <br> License requirements : None */
            public: NXOpen::Annotations::MasterCustomSymbolData * NewMasterCustomSymbolData
            (
            );
            /** Returns the default annotation plane for the specified part  @return   <br> License requirements : None */
            public: NXOpen::Xform * GetDefaultAnnotationPlane
            (
                NXOpen::Annotations::PmiDefaultPlane jaDefaultPlane /** ja default plane */ 
            );
            /** Creates the Query PMI builder  @return   <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::QueryPmiBuilder * CreateQueryPmiBuilder
            (
            );
            /** Finds all PMI symbols that reference the given geometry as an 
                        associated object.  The geometry types supported are limited
                        to those supported by @link Annotations::AssociatedObject Annotations::AssociatedObject@endlink . @return  PMI symbols that reference the geometry  <br> License requirements : geometric_tol ("GDT") */
            public: std::vector<NXOpen::Annotations::Annotation *> QueryPmiFromGeometry
            (
                const std::vector<NXOpen::DisplayableObject *> & geom /** Geometry to be searched */
            );
            /** Creates a model view displaying the given PMI symbols.
                        This method would ordinarily be invoked with the PMI
                        symbols resulting from a call to @link 
                        Annotations::AnnotationManager::QueryPmiFromGeometry 
                        Annotations::AnnotationManager::QueryPmiFromGeometry@endlink .  @return  Model view displaying the given PMI symbols  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::ModelingView * CreateQueryView
            (
                const std::vector<NXOpen::Annotations::Annotation *> & pmiSymbols /** List of PMI symbols, ordinarily from a geometry query */
            );
            /** Creates a new Fcf Frame Data object  @return  New Fcf Frame Data object  <br> License requirements : None */
            public: NXOpen::Annotations::FcfFrameData * NewFcfFrameData
            (
            );
            /** Creates the Dimension Associativity builder  @return  AssociateDimensionBuilder object  <br> License requirements : None */
            public: NXOpen::Annotations::AssociativityBuilder * CreateAssociativityBuilder
            (
                NXOpen::Annotations::Dimension * dimension /** @link Annotations::Dimension Annotations::Dimension@endlink  to be edited */,
                int assocIndex /** Associativity index */
            );
            /** Creates the Dimension Associativity builder  @return  AssociateDimensionBuilder object  <br> License requirements : None */
            public: NXOpen::Annotations::AssociateDimensionBuilder * CreateAssociateDimensionBuilder
            (
                NXOpen::Annotations::Dimension * dimension /** @link Annotations::Dimension Annotations::Dimension@endlink  to be edited */
            );
            /** Creates a @link Annotations::LeaderData Annotations::LeaderData@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::LeaderData * CreateLeaderData
            (
            );
            /** Flag the annotation as PMI object. Once flagged,
                        the annotation particiaptes in all PMI specific 
                        behaviors, so you can manage it from Part Navigator, 
                        inherit on a drawing view, control its display in 
                        different model views etc..  <br> License requirements : geometric_tol ("GDT") */
            public: void MakePmi
            (
                NXOpen::Annotations::Annotation * annotation /** @link Annotations::Annotation Annotations::Annotation@endlink  to be edited */
            );
            /** Remove PMI flag from annotation. After the flag is removed, 
                        the annotation can't be managed as PMI. However it retains 
                        all its properties.  <br> License requirements : geometric_tol ("GDT") */
            public: void RemovePmi
            (
                NXOpen::Annotations::Annotation * annotation /** @link Annotations::Annotation Annotations::Annotation@endlink  to be edited */
            );
            /** Creates a @link Annotations::DraftingNoteBuilder Annotations::DraftingNoteBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::DraftingNoteBuilder * CreateDraftingNoteBuilder
            (
                NXOpen::Annotations::SimpleDraftingAid * annotation /** @link Annotations::SimpleDraftingAid Annotations::SimpleDraftingAid@endlink  to be edited */
            );
            /** Creates a @link Annotations::PmiNoteBuilder Annotations::PmiNoteBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::PmiNoteBuilder * CreatePmiNoteBuilder
            (
                NXOpen::Annotations::SimpleDraftingAid * annotation /** @link Annotations::SimpleDraftingAid Annotations::SimpleDraftingAid@endlink  to be edited */
            );
            /** Creates a @link Annotations::TextWithEditControlsBuilder Annotations::TextWithEditControlsBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::TextWithEditControlsBuilder * CreateTextWithEditControlsBuilder
            (
                NXOpen::Annotations::Annotation * annotation /** @link Annotations::Annotation Annotations::Annotation@endlink  to be edited */
            );
            /** Creates a @link Annotations::DraftingFeatureControlFrameBuilder Annotations::DraftingFeatureControlFrameBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::DraftingFeatureControlFrameBuilder * CreateDraftingFeatureControlFrameBuilder
            (
                NXOpen::Annotations::Gdt * fcf /** the fcf symbol to be edited,
                                                                            if NULL,  then create an fcf symbol */
            );
            /** Creates a @link Annotations::DraftingDatumTargetBuilder Annotations::DraftingDatumTargetBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::DraftingDatumTargetBuilder * CreateDraftingDatumTargetBuilder
            (
                NXOpen::Annotations::DraftingDatumTarget * datumTarget /** Datum to edit */
            );
            /** Creates a @link Annotations::PmiDatumTargetBuilder Annotations::PmiDatumTargetBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::PmiDatumTargetBuilder * CreatePmiDatumTargetBuilder
            (
                NXOpen::Annotations::DatumTarget * datumTarget /** Datum to edit */
            );
            /** Creates a @link Annotations::PmiFeatureControlFrameBuilder Annotations::PmiFeatureControlFrameBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::PmiFeatureControlFrameBuilder * CreatePmiFeatureControlFrameBuilder
            (
                NXOpen::Annotations::Fcf * fcf /** the fcf symbol to be edited,
                                                                            if NULL,  then create an fcf symbol */
            );
            /** Creates a @link Annotations::FeatureControlFrameDataBuilder Annotations::FeatureControlFrameDataBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder * CreateFeatureControlFrameDataBuilder
            (
                NXOpen::Annotations::FeatureControlFrameData * frame /** the fcf symbol to be edited,
                                                                                                  if NULL, then create an fcf symbol */
            );
            /** Creates a @link Annotations::DatumReferenceBuilder Annotations::DatumReferenceBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * CreateDatumReferenceBuilder
            (
                NXOpen::Annotations::FcfDatumReference * datumReference /** the datum reference to be edited,
                                                                                                           if NULL, then create an fcf symbol */
            );
            /** Creates a new compound datum dialog  @return   <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::CompoundDatumReferenceBuilder * CreateCompoundDatumReferenceBuilder
            (
            );
            /** Creates a @link Annotations::EditLeaderBuilder Annotations::EditLeaderBuilder@endlink   @return   <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::EditLeaderBuilder * CreateEditLeaderBuilder
            (
                NXOpen::DisplayableObject * tableTag /** the table object to edit */
            );
            /** Creates a @link Annotations::ComponentData Annotations::ComponentData@endlink  for an annotation. @return   <br> License requirements : None */
            public: NXOpen::Annotations::ComponentData * CreateComponentData
            (
                NXOpen::Annotations::Annotation * annotationTag /** the annotation whose component data
                                                                                             will be available with this object */
            );
            /**Sets  the weld standard for the part file. <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetWeldStandard
            (
                NXOpen::Annotations::WeldStandard standard /** Weld standard */
            );
            /**Returns  the weld standard for the part file. <br> License requirements : None */
            public: NXOpen::Annotations::WeldStandard WeldStandard
            (
            );
            /** This method writes master custom symbol name 
                    to the predefined quick access folder and saves the part.
                    The given part should correspond to the part file of 
                    native symbol part file otherwise error will be raised. <br> License requirements : drafting ("DRAFTING") */
            public: void SetMasterSymbolNameInQaf
            (
            );


            /** Global annotation preferences */
            public: NXOpen::Preferences::AnnotationPreferences *Preferences();
            /** PmiFilter collection */
            public: NXOpen::Annotations::PmiFilterCollection *PmiFilters();
            /** Fcf collection */
            public: NXOpen::Annotations::FcfCollection *Fcfs();
            /** Datum collection */
            public: NXOpen::Annotations::GdtDatumCollection *Datums();
            /** DatumTarget collection */
            public: NXOpen::Annotations::DatumTargetCollection *DatumTargets();
            /** Weld collection */
            public: NXOpen::Annotations::WeldCollection *Welds();
            /** CustomSymbol collection */
            public: NXOpen::Annotations::CustomSymbolCollection *CustomSymbols();
            /** IdSymbol collection */
            public: NXOpen::Annotations::IdSymbolCollection *IdSymbols();
            /** BusinessModifier collection */
            public: NXOpen::Annotations::BusinessModifierCollection *BusinessModifiers();
            /** OrdinateMargin collection */
            public: NXOpen::Annotations::OrdinateMarginCollection *OrdinateMargins();
            /** DimensionSet collection */
            public: NXOpen::Annotations::DimensionSetCollection *DimensionSets();
            /** Centerlines collection */
            public: NXOpen::Annotations::CenterlineCollection *Centerlines();
            /** IntersectionSymbol collection */
            public: NXOpen::Annotations::IntersectionSymbolCollection *IntersectionSymbols();
            /** TargetPoint collection */
            public: NXOpen::Annotations::TargetPointCollection *TargetPoints();
            /** OffsetCenterPoint collection */
            public: NXOpen::Annotations::OffsetCenterPointCollection *OffsetCenterPoints();
            /** Hatch collection */
            public: NXOpen::Annotations::HatchCollection *Hatches();
            /** Drafting surface finish collection */
            public: NXOpen::Annotations::DraftingSurfaceFinishCollection *DraftingSurfaceFinishSymbols();
            /** Part Symbol Folder collection */
            public: NXOpen::Annotations::PartSymbolFolderCollection *PartSymbolFolders();
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
