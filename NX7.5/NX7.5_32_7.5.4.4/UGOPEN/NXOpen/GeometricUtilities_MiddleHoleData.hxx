#ifndef NXOpen_GEOMETRICUTILITIES_MIDDLEHOLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MIDDLEHOLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_MiddleHoleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_MiddleHoleData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class MiddleHoleData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _MiddleHoleDataBuilder;
        class MiddleHoleDataImpl;
        /** Represents a @link GeometricUtilities::MiddleHoleData GeometricUtilities::MiddleHoleData@endlink  */
        class NXOPENCPPEXPORT  MiddleHoleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: MiddleHoleDataImpl * m_middleholedata_impl;
            private: friend class  _MiddleHoleDataBuilder;
            protected: MiddleHoleData();
            public: ~MiddleHoleData();
            /**Returns  the match dim of start hole  <br> License requirements : None */
            public: bool MatchDimOfStartHole
            (
            );
            /**Sets  the match dim of start hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchDimOfStartHole
            (
                bool matchDimOfStartHole /** matchdimofstarthole */ 
            );
            /**Returns  the fit option <br> License requirements : None */
            public: NXString FitOption
            (
            );
            /**Sets  the fit option <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                const NXString & fitOption /** fitoption */ 
            );
            /**Returns  the hole diameter  <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the start chamfer enabled  <br> License requirements : None */
            public: bool StartChamferEnabled
            (
            );
            /**Sets  the start chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartChamferEnabled
            (
                bool startChamferEnabled /** startchamferenabled */ 
            );
            /**Returns  the start chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * StartChamferOffset
            (
            );
            /**Returns  the start chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * StartChamferAngle
            (
            );
            /**Returns  the end chamfer enabled  <br> License requirements : None */
            public: bool EndChamferEnabled
            (
            );
            /**Sets  the end chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndChamferEnabled
            (
                bool endChamferEnabled /** endchamferenabled */ 
            );
            /**Returns  the end chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * EndChamferOffset
            (
            );
            /**Returns  the end chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * EndChamferAngle
            (
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
