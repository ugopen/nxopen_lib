#ifndef NXOpen_ROUTING_CORNER_HXX_INCLUDED
#define NXOpen_ROUTING_CORNER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Corner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class Corner;
    }
    class NXObject;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _CornerBuilder;
        class CornerImpl;
        /** 
                The Routing Corner is the abstract parent class of all other corner objects. The
                corner object defines some behavior associated with segments and stocks that
                are connected at a single routing control point.
              <br> Corners are abstract objects. <br> */
        class NXOPENCPPEXPORT  Corner : public NXObject
        {
            /** Various Corner subtypes. */
            public: enum Type
            {
                TypeBend/** Bend corner */,
                TypeMiter/** Miter corner. */,
                TypeCope/** Cope corner. */,
                TypeDiscontinuity/** Discontinuity corner. */,
                TypeNone/** No corner. */
            };

            private: CornerImpl * m_corner_impl;
            private: friend class  _CornerBuilder;
            protected: Corner();
            public: ~Corner();
            /**Returns  the corner ControlPoint referenced by the Corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * Rcp
            (
            );
            /**Sets  the corner ControlPoint referenced by the Corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetRcp
            (
                NXOpen::Routing::ControlPoint * rcp /** rcp */ 
            );
            /** Returns the stocks that are assigned to segments affected by
                     * this corner object.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::Stock *> GetStocks
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
