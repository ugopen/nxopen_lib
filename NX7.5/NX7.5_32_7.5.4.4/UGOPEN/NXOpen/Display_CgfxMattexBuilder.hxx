#ifndef NXOpen_DISPLAY_CGFXMATTEXBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_CGFXMATTEXBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_CgfxMattexBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_CgfxMattexBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class CgfxMattexBuilder;
    }
    class Builder;
    class NXObject;
    namespace Display
    {
        class _CgfxMattexBuilderBuilder;
        class CgfxMattexBuilderImpl;
        /** Represents a @link Display::CgfxMattex  Display::CgfxMattex @endlink  builder  <br>  <br> */
        class NXOPENCPPEXPORT  CgfxMattexBuilder : public Builder
        {
            /** The technique is an index to a technique name in a list found in the CgFX file.  There is is unknown until the CgFX file is loaded. */
            public: enum Technique
            {
                TechniqueBase/**  place holder for variable technique list */
            };

            /** The texture space type indicates the texture space type to use for CgFX shader */
            public: enum TextureSpace
            {
                TextureSpaceDefaultUv/** scale 1, 0 offset uv texture space */,
                TextureSpaceEdited/** the one edited using the material texture dialog */
            };

            /** The texture space shader type indicates the type of texture space shader to use for CgFX shader */
            public: enum TextureSpaceShader
            {
                TextureSpaceShaderArbitraryPlane/** based on specified plane*/,
                TextureSpaceShaderCylindrical/** for cylindrical model*/,
                TextureSpaceShaderSpherical/** for spherical geometry*/,
                TextureSpaceShaderWcsAutoAxis/** auto tri plane*/,
                TextureSpaceShaderUv/** scale 1, 0 offset uv texture space */,
                TextureSpaceShaderCameraDirectionPlane/** scale 1, 0 offset uv texture space */
            };

            /** The option indicates which texture space vectors are updated upon Update Texture to Camera Direction action*/
            public: enum UseCameraDirectionPlane
            {
                UseCameraDirectionPlaneNormalVector/** normal vector is updated based on camera direction */,
                UseCameraDirectionPlaneNormalAndUpVector/** both normal and up vectors are updated based on camera direction*/
            };

            private: CgfxMattexBuilderImpl * m_cgfxmattexbuilder_impl;
            private: friend class  _CgfxMattexBuilderBuilder;
            protected: CgfxMattexBuilder();
            public: ~CgfxMattexBuilder();
            /**Returns  the material name  <br> License requirements : None */
            public: NXString MaterialName
            (
            );
            /**Sets  the material name  <br> License requirements : None */
            public: void SetMaterialName
            (
                const NXString & materialName /** materialname */ 
            );
            /**Returns  the flag indicating if shadow casting is disabled  <br> License requirements : None */
            public: bool ShadowCastingDisabled
            (
            );
            /**Sets  the flag indicating if shadow casting is disabled  <br> License requirements : None */
            public: void SetShadowCastingDisabled
            (
                bool disableShadowCasting /** disableshadowcasting */ 
            );
            /**Returns  the display techniques  <br> License requirements : None */
            public: NXOpen::Display::CgfxMattexBuilder::Technique TechniqueType
            (
            );
            /**Sets  the display techniques  <br> License requirements : None */
            public: void SetTechniqueType
            (
                NXOpen::Display::CgfxMattexBuilder::Technique technique /** technique */ 
            );
            /**  Returns the attribute values @return   <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetAttributeValues
            (
            );
            /** Sets the attribute values <br> License requirements : None */
            public: void SetAttributeValues
            (
                const std::vector<NXOpen::NXObject *> & attributeValues /** attribute values */
            );
            /**Returns  the texture space type
             @deprecated Deprecated in NX7.5.2 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.2") NXOpen::Display::CgfxMattexBuilder::TextureSpace TextureSpaceType
            (
            );
            /**Sets  the texture space type
             @deprecated Deprecated in NX7.5.2 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX7.5.2") void SetTextureSpaceType
            (
                NXOpen::Display::CgfxMattexBuilder::TextureSpace textureSpaceType /** texture space type */ 
            );
            /**Returns  the texture space shader type <br> License requirements : None */
            public: NXOpen::Display::CgfxMattexBuilder::TextureSpaceShader TextureSpaceShaderType
            (
            );
            /**Sets  the texture space shader type <br> License requirements : None */
            public: void SetTextureSpaceShaderType
            (
                NXOpen::Display::CgfxMattexBuilder::TextureSpaceShader textureSpaceShaderType /** texture space shader type */ 
            );
            /**Returns  the use camera direction plane option  <br> License requirements : None */
            public: NXOpen::Display::CgfxMattexBuilder::UseCameraDirectionPlane UseCameraDirectionPlaneOption
            (
            );
            /**Sets  the use camera direction plane option  <br> License requirements : None */
            public: void SetUseCameraDirectionPlaneOption
            (
                NXOpen::Display::CgfxMattexBuilder::UseCameraDirectionPlane useCameraDiretionPlaneOption /** use camera diretion plane option */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
