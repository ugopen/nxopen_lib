#ifndef NXOpen_FORMBOARD_SHAPESEGMENTBUILDER_HXX_INCLUDED
#define NXOpen_FORMBOARD_SHAPESEGMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_ShapeSegmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Formboard_ShapeSegmentBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Formboard
    {
        class ShapeSegmentBuilder;
    }
    class Builder;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    class TaggedObject;
    namespace Formboard
    {
        class _ShapeSegmentBuilderBuilder;
        class ShapeSegmentBuilderImpl;
        /** Builder for Face Annotation functionality used in formboard. It allows 
                 importing CGM or Pattern file geometry and placing it on a drawing sheet
                 or model view. As a result of this a group of dumb geometry is placed such
                 that defined origin is located at the lower left hand of the bounding box 
                 containing the group of geometry.
              <br> To create a new instance of this class, use @link Formboard::FormboardManager::CreateShapeSegmentBuilder Formboard::FormboardManager::CreateShapeSegmentBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  ShapeSegmentBuilder : public Builder
        {
            private: ShapeSegmentBuilderImpl * m_shapesegmentbuilder_impl;
            private: friend class  _ShapeSegmentBuilderBuilder;
            protected: ShapeSegmentBuilder();
            public: ~ShapeSegmentBuilder();
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void ChangeType
            (
                int newType /** newtype */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void NewSegment
            (
                NXOpen::Routing::ISegment * newSegment /** newsegment */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void UpdateLineAngleVec
            (
                const NXOpen::Vector3d & newDir /** newdir */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void GetLineData
            (
                NXOpen::Routing::ISegment ** anchorSeg /** anchorseg */ ,
                NXOpen::Routing::ControlPoint ** anchorRcp /** anchorrcp */ ,
                double* angle /** angle */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void CreateNewRadialBend
            (
                const NXOpen::Point3d & firstPivot /** firstpivot */ ,
                int firstBendMethod /** firstbendmethod */ ,
                double firstBendValue /** firstbendvalue */ ,
                const NXOpen::Point3d & secondPivot /** secondpivot */ ,
                int secondBendMethod /** secondbendmethod */ ,
                double secondBendValue /** secondbendvalue */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void AddRadialPivot
            (
                const NXOpen::Point3d & pivotLocation /** pivotlocation */ ,
                int bendMethod /** bendmethod */ ,
                double bendValue /** bendvalue */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void RemoveRadialPivot
            (
                int pivotIndex /** pivotindex */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void UpdateRadialPivot
            (
                int pivotIndex /** pivotindex */ ,
                const NXOpen::Point3d & newLocation /** newlocation */ ,
                int newBendMethod /** newbendmethod */ ,
                double newBendValue /** newbendvalue */ 
            );
            /**
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void CreateNewSpline
            (
                const NXOpen::Point3d & anchorLocation /** anchorlocation */ ,
                const NXOpen::Point3d & firstPoint /** firstpoint */ ,
                const NXOpen::Point3d & secondPoint /** secondpoint */ 
            );
            /**
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void RemoveSplinePoint
            (
                int pointIndex /** pointindex */ 
            );
            /**
                    Adds a point to the existing spline. 
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: int AddSplinePoint
            (
                const NXOpen::Point3d & pointLocation /** pointlocation */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void UpdateSplinePoint
            (
                int pointIndex /** pointindex */ ,
                const NXOpen::Point3d & pointLocation /** pointlocation */ ,
                bool inDrag /** indrag */ 
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void CommitCurrentOperation
            (
            );
            /** 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
            public: void SwapAnchorEnd
            (
            );
            public: void SetActiveView
            (
                NXOpen::TaggedObject * view /** view */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
