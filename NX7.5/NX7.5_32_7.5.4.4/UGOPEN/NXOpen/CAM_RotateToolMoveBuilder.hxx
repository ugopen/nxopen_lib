#ifndef NXOpen_CAM_ROTATETOOLMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ROTATETOOLMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_RotateToolMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_RotateToolMoveBuilder.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class RotateToolMoveBuilder;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    namespace CAM
    {
        class _RotateToolMoveBuilderBuilder;
        class RotateToolMoveBuilderImpl;
        /** Represents the Rotate Tool Move Builder  <br> To create a new instance of this class, use @link CAM::MoveCollection::CreateRotateToolMoveBuilder CAM::MoveCollection::CreateRotateToolMoveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  RotateToolMoveBuilder : public CAM::MoveBuilder
        {
            private: RotateToolMoveBuilderImpl * m_rotatetoolmovebuilder_impl;
            private: friend class  _RotateToolMoveBuilderBuilder;
            protected: RotateToolMoveBuilder();
            public: ~RotateToolMoveBuilder();
            /**Returns  the Orient Angle  <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the Orient Angle  <br> License requirements : None */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the X offset Toggle Status  <br> License requirements : None */
            public: bool XoffsetToggle
            (
            );
            /**Sets  the X offset Toggle Status  <br> License requirements : None */
            public: void SetXoffsetToggle
            (
                bool xoffstat /** xoffstat */ 
            );
            /**Returns  the X offset  <br> License requirements : None */
            public: double Xoffset
            (
            );
            /**Sets  the X offset  <br> License requirements : None */
            public: void SetXoffset
            (
                double xoff /** xoff */ 
            );
            /**Returns  the Y offset Toggle Status  <br> License requirements : None */
            public: bool YoffsetToggle
            (
            );
            /**Sets  the Y offset Toggle Status  <br> License requirements : None */
            public: void SetYoffsetToggle
            (
                bool yoffstat /** yoffstat */ 
            );
            /**Returns  the Y offset  <br> License requirements : None */
            public: double Yoffset
            (
            );
            /**Sets  the Y offset  <br> License requirements : None */
            public: void SetYoffset
            (
                double yoff /** yoff */ 
            );
            /**Returns  the Z offset Toggle Status  <br> License requirements : None */
            public: bool ZoffsetToggle
            (
            );
            /**Sets  the Z offset Toggle Status  <br> License requirements : None */
            public: void SetZoffsetToggle
            (
                bool zoffstat /** zoffstat */ 
            );
            /**Returns  the Z offset  <br> License requirements : None */
            public: double Zoffset
            (
            );
            /**Sets  the Z offset  <br> License requirements : None */
            public: void SetZoffset
            (
                double zoff /** zoff */ 
            );
            /**Returns  the Adjust register Toggle Status  <br> License requirements : None */
            public: bool AdjregToggle
            (
            );
            /**Sets  the Adjust register Toggle Status  <br> License requirements : None */
            public: void SetAdjregToggle
            (
                bool adjregstat /** adjregstat */ 
            );
            /**Returns  the Adjust register  <br> License requirements : None */
            public: int Adjreg
            (
            );
            /**Sets  the Adjust register  <br> License requirements : None */
            public: void SetAdjreg
            (
                int adjreg /** adjreg */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
