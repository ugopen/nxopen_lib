#ifndef NXOpen_ANNOTATIONS_UNITSSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_UNITSSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_UnitsStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_UnitsStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class UnitsStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _UnitsStyleBuilderBuilder;
        class UnitsStyleBuilderImpl;
        /**
            Represents a @link Annotations::UnitsStyleBuilder Annotations::UnitsStyleBuilder@endlink .
            This class queries and sets units and format preferences when creating or editing a dimension. */
        class NXOPENCPPEXPORT  UnitsStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: UnitsStyleBuilderImpl * m_unitsstylebuilder_impl;
            private: friend class  _UnitsStyleBuilderBuilder;
            protected: UnitsStyleBuilder();
            public: ~UnitsStyleBuilder();
            /**Returns  the decimal point character  <br> License requirements : None */
            public: NXOpen::Annotations::DecimalPointCharacter DecimalPointCharacter
            (
            );
            /**Sets  the decimal point character  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDecimalPointCharacter
            (
                NXOpen::Annotations::DecimalPointCharacter decimalPointCharacter /** decimalpointcharacter */ 
            );
            /**Returns  the dimension tolerance placement relative to the dimension value  <br> License requirements : None */
            public: NXOpen::Annotations::TolerancePlacement DimensionTolerancePlacement
            (
            );
            /**Sets  the dimension tolerance placement relative to the dimension value  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionTolerancePlacement
            (
                NXOpen::Annotations::TolerancePlacement dimensionTolerancePlacement /** dimensiontoleranceplacement */ 
            );
            /**Returns  the display trailing zeros setting for linear dimensions and tolerances  <br> License requirements : None */
            public: bool DisplayTrailingZeros
            (
            );
            /**Sets  the display trailing zeros setting for linear dimensions and tolerances  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayTrailingZeros
            (
                bool displayTrailingZeros /** displaytrailingzeros */ 
            );
            /**Returns  the display leading dimension zeros setting for
                        linear dimensions and fractional angular dimensions  <br> License requirements : None */
            public: bool DisplayLeadingDimensionZeros
            (
            );
            /**Sets  the display leading dimension zeros setting for
                        linear dimensions and fractional angular dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayLeadingDimensionZeros
            (
                bool displayLeadingDimensionZeros /** displayleadingdimensionzeros */ 
            );
            /**Returns  the display leading tolerance zeros setting for
                        linear dimensions and fractional angular dimensions  <br> License requirements : None */
            public: bool DisplayLeadingToleranceZeros
            (
            );
            /**Sets  the display leading tolerance zeros setting for
                        linear dimensions and fractional angular dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDisplayLeadingToleranceZeros
            (
                bool displayLeadingToleranceZeros /** displayleadingtolerancezeros */ 
            );
            /**Returns  the decimal and fraction text format for nonmetric dimensions  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat LinearFractionType
            (
            );
            /**Sets  the decimal and fraction text format for nonmetric dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLinearFractionType
            (
                NXOpen::Annotations::DimensionTextFormat linearFractionType /** linearfractiontype */ 
            );
            /**Returns  the dimension linear units  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DimensionLinearUnits
            (
            );
            /**Sets  the dimension linear units  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionLinearUnits
            (
                NXOpen::Annotations::DimensionUnit dimensionLinearUnits /** dimensionlinearunits */ 
            );
            /**Returns  the dimension angular format and precision  <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat DimensionAngularFormat
            (
            );
            /**Sets  the dimension angular format and precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionAngularFormat
            (
                NXOpen::Annotations::AngularDimensionFormat dimensionAngularFormat /** dimensionangularformat */ 
            );
            /**Returns  the tolerance angular format and precision  <br> License requirements : None */
            public: NXOpen::Annotations::AngularDimensionFormat ToleranceAngularFormat
            (
            );
            /**Sets  the tolerance angular format and precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceAngularFormat
            (
                NXOpen::Annotations::AngularDimensionFormat toleranceAngularFormat /** toleranceangularformat */ 
            );
            /**Returns  the angular suppress zeros option  <br> License requirements : None */
            public: NXOpen::Annotations::AngularSuppressZeros AngularSuppressZeros
            (
            );
            /**Sets  the angular suppress zeros option  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularSuppressZeros
            (
                NXOpen::Annotations::AngularSuppressZeros angularSuppressZeros /** angularsuppresszeros */ 
            );
            /**Returns  the dual dimension format.
                        This specifies both the creation and position of the dual dimension  <br> License requirements : None */
            public: NXOpen::Annotations::DualDimensionPlacement DualDimensionFormat
            (
            );
            /**Sets  the dual dimension format.
                        This specifies both the creation and position of the dual dimension  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionFormat
            (
                NXOpen::Annotations::DualDimensionPlacement dualDimensionFormat /** dualdimensionformat */ 
            );
            /**Returns  the dual dimension units  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionUnit DualDimensionUnits
            (
            );
            /**Sets  the dual dimension units  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionUnits
            (
                NXOpen::Annotations::DimensionUnit dualDimensionUnits /** dualdimensionunits */ 
            );
            /**Returns  the decimal and fraction format for dual nonmetric dimensions  <br> License requirements : None */
            public: NXOpen::Annotations::DimensionTextFormat DualFractionType
            (
            );
            /**Sets  the decimal and fraction format for dual nonmetric dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualFractionType
            (
                NXOpen::Annotations::DimensionTextFormat dualFractionType /** dualfractiontype */ 
            );
            /**Returns  the convert primary tolerance option.
                        A value of True means that the dual dimension tolerance is automatically
                        set by converting the primary dimension tolerance value to the dual dimension units  <br> License requirements : None */
            public: bool ConvertPrimaryTolerance
            (
            );
            /**Sets  the convert primary tolerance option.
                        A value of True means that the dual dimension tolerance is automatically
                        set by converting the primary dimension tolerance value to the dual dimension units  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetConvertPrimaryTolerance
            (
                bool convertPrimaryTolerance /** convertprimarytolerance */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
