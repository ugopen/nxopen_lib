#ifndef NXOpen_ROUTING_STOCKOFFSETPOINTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKOFFSETPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockOffsetPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_StockOffsetPointBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockOffsetPointBuilder;
    }
    class Builder;
    class Direction;
    class Point;
    class SelectNXObject;
    namespace Routing
    {
        class _StockOffsetPointBuilderBuilder;
        class StockOffsetPointBuilderImpl;
        /** Applies Assemblies Constraints to a selected @link Point Point@endlink  or 
                @link Routing::ControlPoint Routing::ControlPoint@endlink  to mimic the update/move behavior of
                the input smart @link Point Point@endlink .    The smart point may be a Routing
                stock offset point (see @link PointCollection::CreateStockOffsetPoint PointCollection::CreateStockOffsetPoint@endlink ) or
                any of the points created using the @link PointCollection PointCollection@endlink  class.  
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateStockOffsetPointBuilder Routing::RouteManager::CreateStockOffsetPointBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  StockOffsetPointBuilder : public Builder
        {
            /** Point Type */
            public: enum PointType
            {
                PointTypeNormal/** Normal smart point. */,
                PointTypeStockOffset/** Routing stock offset point. */
            };

            private: StockOffsetPointBuilderImpl * m_stockoffsetpointbuilder_impl;
            private: friend class  _StockOffsetPointBuilderBuilder;
            protected: StockOffsetPointBuilder();
            public: ~StockOffsetPointBuilder();
            /**Returns  the point selection.  Stores the point or Routing control point selected by the user.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObject * PointSelection
            (
            );
            /** Gets the stock offset data from the currently selected point or routing
                        control point.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetPointData
            (
                NXOpen::Routing::StockOffsetPointBuilder::PointType* pointType /** Type of point currently defined. */,
                NXOpen::Point ** basePoint /** Base point for stock offset points, NULL for
                @link Routing::StockOffsetPointBuilder::PointTypeNormal Routing::StockOffsetPointBuilder::PointTypeNormal@endlink  points. */,
                NXOpen::Direction ** offsetDir /** Offset direction for stock offset points, NULL for
                @link Routing::StockOffsetPointBuilder::PointTypeNormal Routing::StockOffsetPointBuilder::PointTypeNormal@endlink  points. */,
                NXString* offsetExpression /** Offset expression for stock offset points, NULL for
                @link Routing::StockOffsetPointBuilder::PointTypeNormal Routing::StockOffsetPointBuilder::PointTypeNormal@endlink  points. */
            );
            /**Returns  the point that defines the location of the selected point.  On commit, this
                        point is used for determining the set of Assemblies Constraints to apply to the
                        selected point (or Routing control point).  The input point itself is not used
                        after the commit method.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Point * ConstraintPoint
            (
            );
            /**Sets  the point that defines the location of the selected point.  On commit, this
                        point is used for determining the set of Assemblies Constraints to apply to the
                        selected point (or Routing control point).  The input point itself is not used
                        after the commit method.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetConstraintPoint
            (
                NXOpen::Point * point /** point */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
