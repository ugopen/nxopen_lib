#ifndef NXOpen_VISUALREPORTING_VISUALREPORT_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_VISUALREPORT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_VisualReport.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_GroupLabel.hxx>
#include <NXOpen/VisualReporting_Rule.hxx>
#include <NXOpen/VisualReporting_VisualReport.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace VisualReporting
    {
        class VisualReport;
    }
    class NXObject;
    namespace VisualReporting
    {
        class GroupLabel;
    }
    namespace VisualReporting
    {
        class Rule;
    }
    namespace VisualReporting
    {
        class _VisualReportBuilder;
        class VisualReportImpl;
        /**
                A visual report can be activated by the @link VisualReporting::VisualReportManager VisualReporting::VisualReportManager@endlink  to 
                apply colors to objects in the graphics window.
                An active visual report groups objects according to filtering conditions and classification 
                rules.  The contents of the groups can be accessed via @link VisualReporting::VisualReport::GetGroupLabels VisualReporting::VisualReport::GetGroupLabels@endlink 
                and @link VisualReporting::VisualReport::GetObjectsInGroup VisualReporting::VisualReport::GetObjectsInGroup@endlink .
            */
        class NXOPENCPPEXPORT  VisualReport : public NXObject
        {
            /** Represents the possible ReportingStyle options.
                       for a VisualReport.
                    */
            public: enum ReportingStyleOption
            {
                ReportingStyleOptionColorObject/** Matching objects will be colored */,
                ReportingStyleOptionTagObject/** Matching objects will be tagged */,
                ReportingStyleOptionColorAndTagObject/** Matching objects will be both colored and tagged */
            };

            private: VisualReportImpl * m_visualreport_impl;
            private: friend class  _VisualReportBuilder;
            protected: VisualReport();
            public: ~VisualReport();
            /** Saves this @link VisualReporting::VisualReport VisualReporting::VisualReport@endlink  to its current @link VisualReporting::VisualReport::Filename VisualReporting::VisualReport::Filename@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void Save
            (
            );
            /**Returns  the filename where this visual report was opened from or will be saved to.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString Filename
            (
            );
            /**Returns  the description of this visual report
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString Description
            (
            );
            /** Return the specified @link VisualReporting::Rule VisualReporting::Rule@endlink  from this visual report
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Rule * GetRule
            (
                int index /** The index of the returned @link VisualReporting::Rule VisualReporting::Rule@endlink . */
            );
            /** Returns all the @link VisualReporting::Rule VisualReporting::Rule@endlink s in this visual report
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::Rule *> GetRules
            (
            );
            /**Returns  the @link VisualReporting::VisualReport::ReportingStyleOption VisualReporting::VisualReport::ReportingStyleOption@endlink  of this visual report.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport::ReportingStyleOption ReportingStyle
            (
            );
            /**Sets  the @link VisualReporting::VisualReport::ReportingStyleOption VisualReporting::VisualReport::ReportingStyleOption@endlink  of this visual report.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetReportingStyle
            (
                NXOpen::VisualReporting::VisualReport::ReportingStyleOption reportingStyle /** reportingstyle */ 
            );
            /** Returns the @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink s associated with this visual report.
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::GroupLabel *> GetGroupLabels
            (
            );
            /**Returns  whether use of @link VisualReporting::VisualReport::UnmatchedGroupLabel VisualReporting::VisualReport::UnmatchedGroupLabel@endlink 
                        is enabled.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool IsUnmatchedGroupEnabled
            (
            );
            /**Returns  the @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink  which is used for unmatched object. 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::GroupLabel * UnmatchedGroupLabel
            (
            );
            /** Returns the @link NXObject NXObject@endlink s that belong to the group
                        with this @link VisualReporting::GroupLabel VisualReporting::GroupLabel@endlink .
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::NXObject *> GetObjectsInGroup
            (
                NXOpen::VisualReporting::GroupLabel * groupLabel /** A group label of this visual report */
            );
            /**Returns  the category of this visual report.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString DescriptiveCategory
            (
            );
            /** Returns a comma separated string of the keywords for this visual report.
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString GetKeywords
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
