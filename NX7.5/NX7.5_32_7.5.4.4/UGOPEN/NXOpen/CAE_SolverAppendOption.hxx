#ifndef NXOpen_CAE_SOLVERAPPENDOPTION_HXX_INCLUDED
#define NXOpen_CAE_SOLVERAPPENDOPTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SolverAppendOption.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SolverAppendOption.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class SolverAppendOption;
    }
    class NXObject;
    namespace CAE
    {
        class _SolverAppendOptionBuilder;
        class SolverAppendOptionImpl;
        /**  @brief  This class provides access to the append option setting for importing solver specific data into existing Fem/Sim  

           <br> Not support KF. <br> */
        class NXOPENCPPEXPORT  SolverAppendOption : public NXObject
        {
            private: SolverAppendOptionImpl * m_solverappendoption_impl;
            private: friend class  _SolverAppendOptionBuilder;
            protected: SolverAppendOption();
            public: ~SolverAppendOption();
            /**Returns  the solver name  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolverName
            (
            );
            /**Sets  the solver name  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolverName
            (
                const NXString & solverName /** the solver name to indicate what type of data is being imported */
            );
            /** Gets the highest node label from the work Fem/Sim  @return  the highest node label  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestNodeLabel
            (
            );
            /**Returns  the node offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int NodeOffset
            (
            );
            /**Sets  the node offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeOffset
            (
                int nodeOffset /** the node offset */
            );
            /** Gets the highest element label from the work Fem/Sim  @return  the highest element label  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestElementLabel
            (
            );
            /**Returns  the element offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ElementOffset
            (
            );
            /**Sets  the element offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElementOffset
            (
                int elemOffset /** the element offset */
            );
            /** Gets the highest coordinate system label from the work Fem/Sim  @return  the highest coordinate system label  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestCoordinateSystemLabel
            (
            );
            /**Returns  the coordinate system offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int CoordinateSystemOffset
            (
            );
            /**Sets  the coordinate system offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinateSystemOffset
            (
                int csOffset /** the coordinate system offset */
            );
            /** Gets the highest physical property label from the work Fem/Sim  @return  the highest physical property label  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestPhysicalPropertyLabel
            (
            );
            /**Returns  the physical property offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int PhysicalPropertyOffset
            (
            );
            /**Sets  the physical property offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhysicalPropertyOffset
            (
                int physicalPropertyOffset /** the physical property offset */
            );
            /** Gets the highest label for all other entities from the work Fem/Sim  @return  the highest label for all other entities <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetHighestOthersLabel
            (
            );
            /**Returns  the offset for all other entities  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int OthersOffset
            (
            );
            /**Sets  the offset for all other entities  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetOthersOffset
            (
                int othersOffset /** the offset for all other entities */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
