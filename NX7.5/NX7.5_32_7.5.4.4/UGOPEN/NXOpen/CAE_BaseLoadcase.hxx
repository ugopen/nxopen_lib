#ifndef NXOpen_CAE_BASELOADCASE_HXX_INCLUDED
#define NXOpen_CAE_BASELOADCASE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_BaseLoadcase.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseLoadcase.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class BaseLoadcase;
    }
    namespace CAE
    {
        class BaseIteration;
    }
    class TaggedObject;
    namespace CAE
    {
        class _BaseLoadcaseBuilder;
        class BaseLoadcaseImpl;
        /** This class provides interfaces to query loadcase attributes  <br> An instance of this class can not be obtained <br> */
        class NXOPENCPPEXPORT  BaseLoadcase : public TaggedObject
        {
            private: BaseLoadcaseImpl * m_baseloadcase_impl;
            private: friend class  _BaseLoadcaseBuilder;
            protected: BaseLoadcase();
            public: ~BaseLoadcase();
            /**Returns  the NX assigned name of the loadcase  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString Name
            (
            );
            /** Get iteration present in this loadcase  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::BaseIteration *> GetIterations
            (
            );
            /** Returns a @link CAE::BaseIteration CAE::BaseIteration@endlink    @return   <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
