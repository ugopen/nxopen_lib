#ifndef NXOpen_ROUTING_CONNECTPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_CONNECTPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ConnectPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_ConnectPathBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class ConnectPathBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    namespace Routing
    {
        class _ConnectPathBuilderBuilder;
        class ConnectPathBuilderImpl;
        /** Represents a @link Routing::ConnectPathBuilder Routing::ConnectPathBuilder@endlink . 
                Routing.ConnectPathBuilderis used to control the connecting of 
                Routing.ControlPoints within the distance tolerance specified.
                This eliminates duplicate Routing.ControlPoints such that only one 
                Routing.ControlPoint remains.  The Routing.Segments that were defined 
                by the duplicate Routing.ControlPoints are now defined by the remaining 
                Routing.ControlPoint.  Routing.ConnectPath is the reverse operation to 
                Routing.DiscontinuityCorner.  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateConnectPathBuilder Routing::RouteManager::CreateConnectPathBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Tolerance </td> <td> 
         
        0.01 (millimeters part), 0.001 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  ConnectPathBuilder : public Builder
        {
            private: ConnectPathBuilderImpl * m_connectpathbuilder_impl;
            private: friend class  _ConnectPathBuilderBuilder;
            protected: ConnectPathBuilder();
            public: ~ConnectPathBuilder();
            /**Returns  the Routing.ControlPoints that are selected.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObjectList * Selection
            (
            );
            /**Returns  the 3D distance within which Routing.ControlPoints will be considered duplicates 
                        and some will be merged away so that only one Routing.ControlPoint remains.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double Tolerance
            (
            );
            /**Sets  the 3D distance within which Routing.ControlPoints will be considered duplicates 
                        and some will be merged away so that only one Routing.ControlPoint remains.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
