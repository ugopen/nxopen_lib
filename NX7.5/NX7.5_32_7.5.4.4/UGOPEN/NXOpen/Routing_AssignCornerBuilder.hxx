#ifndef NXOpen_ROUTING_ASSIGNCORNERBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_ASSIGNCORNERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_AssignCornerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_AssignCornerBuilder.hxx>
#include <NXOpen/Routing_CornerTypeBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class AssignCornerBuilder;
    }
    class Builder;
    namespace Routing
    {
        class CornerTypeBuilder;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    class SelectNXObject;
    namespace Routing
    {
        class _AssignCornerBuilderBuilder;
        class AssignCornerBuilderImpl;
        /** Builder class for Assign Corner which creates corner <br> To create a new instance of this class, use @link Routing::RouteManager::CreateAssignCornerBuilder Routing::RouteManager::CreateAssignCornerBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RouteAssignCornerCornerBlock.RouteCornerBendOptions </td> <td> 
         
        Radius </td> </tr> 

        <tr><td> 
         
        RouteAssignCornerCornerBlock.RouteCornerRadius.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        RouteAssignCornerCornerBlock.RouteCornerRatioToDiameter.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        RouteAssignCornerCornerBlock.RouteCornerRequireLinearSolution </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RouteAssignCornerCornerBlock.RouteCornerTypeOptions </td> <td> 
         
        None </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  AssignCornerBuilder : public Builder
        {
            private: AssignCornerBuilderImpl * m_assigncornerbuilder_impl;
            private: friend class  _AssignCornerBuilderBuilder;
            protected: AssignCornerBuilder();
            public: ~AssignCornerBuilder();
            /**Returns  the route assign corner start objects.  Valid start objects are @link Routing::ControlPoint Routing::ControlPoint@endlink 
                        and @link Routing::ISegment Routing::ISegment@endlink  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObject * RouteAssignCornerStartObject
            (
            );
            /**Returns  the route assign corner end objects.  Valid start objects objects are @link Routing::ControlPoint Routing::ControlPoint@endlink 
                        and @link Routing::ISegment Routing::ISegment@endlink  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectNXObject * RouteAssignCornerEndObject
            (
            );
            /**Returns  the route assign corner corner block  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::CornerTypeBuilder * RouteAssignCornerCornerBlock
            (
            );
            /**Returns  the routing object colletor  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RouteObjectCollector * RouteAssignCornerRouteSelection
            (
            );
            /**Returns  the value to store whether reverse order (for bend creation) or not <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int ReverseValue
            (
            );
            /**Sets  the value to store whether reverse order (for bend creation) or not <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetReverseValue
            (
                int num /** num */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
