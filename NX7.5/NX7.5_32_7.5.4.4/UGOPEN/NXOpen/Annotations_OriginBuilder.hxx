#ifndef NXOpen_ANNOTATIONS_ORIGINBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ORIGINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_OriginBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_Annotation.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_PlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class PlaneBuilder;
    }
    namespace Drawings
    {
        class SelectDraftingView;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    class SelectDisplayableObject;
    class View;
    namespace Annotations
    {
        class _OriginBuilderBuilder;
        class OriginBuilderImpl;
        /**
            Represents a @link Annotations::OriginBuilder Annotations::OriginBuilder@endlink 
             <br> This is a sub-builder class and cannot be directly instantiated <br> */
        class NXOPENCPPEXPORT  OriginBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** alignment position on the annotation */
            public: enum AlignmentPosition
            {
                AlignmentPositionTopLeft/** Top left position */,
                AlignmentPositionTopCenter/** Top center position */,
                AlignmentPositionTopRight/** Top right position */,
                AlignmentPositionMidLeft/** Mid left position */,
                AlignmentPositionMidCenter/** Mid center position */,
                AlignmentPositionMidRight/** Mid right position */,
                AlignmentPositionBottomLeft/** Bottom left position */,
                AlignmentPositionBottomCenter/** Bottom center position */,
                AlignmentPositionBottomRight/** Bottom right position */
            };

            private: OriginBuilderImpl * m_originbuilder_impl;
            private: friend class  _OriginBuilderBuilder;
            protected: OriginBuilder();
            public: ~OriginBuilder();
            /**Returns  the anchor location of the origin on the annotation  <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder::AlignmentPosition Anchor
            (
            );
            /**Sets  the anchor location of the origin on the annotation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetAnchor
            (
                NXOpen::Annotations::OriginBuilder::AlignmentPosition anchor /** anchor */ 
            );
            /**Returns  the origin  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * Origin
            (
            );
            /**Returns  the plane  <br> License requirements : None */
            public: NXOpen::Annotations::PlaneBuilder * Plane
            (
            );
            /**Returns  the view of the annotation (drafting member views only)  <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingView * AnnotationView
            (
            );
            /**Returns  the origin point  <br> License requirements : None */
            public: NXOpen::Point3d OriginPoint
            (
            );
            /**Sets  the origin point  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetOriginPoint
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /** Gets the data that specifies the origin's associativity  @return  associativity data  <br> License requirements : None */
            public: NXOpen::Annotations::Annotation::AssociativeOriginData GetAssociativeOrigin
            (
            );
            /** Associates the annotation's origin to the specified objects  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativeOrigin
            (
                const NXOpen::Annotations::Annotation::AssociativeOriginData & assocOrigin /** associativity data */
            );
            /** Infers a relative to geometry associative on commit if no other associativity has been applied  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetInferRelativeToGeometry
            (
                bool inferRelativeToGeometry /** relative to geometry flag */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
