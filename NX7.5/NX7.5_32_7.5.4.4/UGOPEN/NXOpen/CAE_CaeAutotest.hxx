#ifndef NXOpen_CAE_CAEAUTOTEST_HXX_INCLUDED
#define NXOpen_CAE_CAEAUTOTEST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CaeAutotest.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CaeObjValidationBuilder.hxx>
#include <NXOpen/SmartDiffValidatorBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CaeAutotest;
    }
    class DebugSession;
    class CaeObjValidationBuilder;
    class SmartDiffValidatorBuilder;
    namespace CAE
    {
        class CaeAutotestImpl;
        /** Represents a class that is used for NX CAE testing.  This class should not
            be made available to customers  <br> To obtain an instance of this class, refer to @link DebugSession DebugSession@endlink  <br> */
        class NXOPENDEBUGSESSIONCPPEXPORT  CaeAutotest
        {
            /** Tolerance type  
                      */
            public: enum ToleranceType
            {
                ToleranceTypeRelative/** Tolerance value is relative    */,
                ToleranceTypeAbsolute/** Tolerance value is absolute    */
            };

            /** Status return from file differencing 
                      */
            public: enum DifferenceStatus
            {
                DifferenceStatusErrorInSetUp = -1/** There was a error in the difference setup, see syslog   */,
                DifferenceStatusFilesIdentical/** The files are identical given difference parameters   */,
                DifferenceStatusFilesDifferent/** The files are different given difference parameters  */
            };

            private: CaeAutotestImpl * m_caeautotest_impl;
            private: NXOpen::DebugSession* m_owner;
            /** Constructor */
            public: explicit CaeAutotest(NXOpen::DebugSession *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CaeAutotest();
            /** Difference two files for the purposes of an Autotest.
                        If the files match ( based on smart differencing ) then this 
                        function passes, else if there are differences the function 
                        will fail and difference will be written to log file.  
                     @return   <br> License requirements : None */
            public: NXOpen::CAE::CaeAutotest::DifferenceStatus CompareFiles
            (
                const NXString & newFileName /** New text file to be compared against   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & benchMarkFilename /** Benchmark file used as base line   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & diffFilename /** This file will contain file differences.
                                                                  It will be created or overwritten   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & optGlobalCfgsFilename /** Optional *.cfgs file which defines  
                                                                  differencing Rules. 
                                                                  Input NULL to accept default config file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & optCfgsFilename /** Optional *.cfgs file which can be used to 
                                                                  supply Case specific differencing Rules
                                                                <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a @link SmartDiffValidatorBuilder SmartDiffValidatorBuilder@endlink . This API de not support edit. @return   <br> License requirements : None */
            public: NXOpen::SmartDiffValidatorBuilder * CreateSmartDiffValidatorBuilder
            (
            );
            /** Creates a @link CaeObjValidationBuilder CaeObjValidationBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::CaeObjValidationBuilder * CreateCaeObjValidationBuilder
            (
            );
            /** Print nodal results test data to autotest XML file given node ids and postview id.  <br> License requirements : None */
            public: void NodalResultsPrintTestData
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & nodeIds /** node ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ 
            );
            /** Print nodal results test data to autotest XML file given node ids and postview id.  <br> License requirements : None */
            public: void NodalResultsPrintTestDataZeroTol
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & nodeIds /** node ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ ,
                double zeroToleranceValue /** zero tolerance value */ 
            );
            /** Print element results test data to autotest XML file given element ids and postview id.  <br> License requirements : None */
            public: void ElementResultsPrintTestData
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & elemIds /** elem ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ 
            );
            /** Print element results test data to autotest XML file given element ids and postview id.  <br> License requirements : None */
            public: void ElementResultsPrintTestDataZeroTol
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & elemIds /** elem ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ ,
                double zeroToleranceValue /** zero tolerance value */ 
            );
            /** Print element nodal results test data to autotest XML file given element/node ids and postview id.  <br> License requirements : None */
            public: void ElementNodalResultsPrintTestData
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & elemIds /** elem ids */ ,
                const std::vector<int> & nodeIds /** node ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ 
            );
            /** Print element nodal results test data to autotest XML file given element/node ids and postview id.  <br> License requirements : None */
            public: void ElementNodalResultsPrintTestDataZeroTol
            (
                int postviewId /** postview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & elemIds /** elem ids */ ,
                const std::vector<int> & nodeIds /** node ids */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ ,
                double zeroToleranceValue /** zero tolerance value */ 
            );
            /** Print location results test data to autotest XML file given locations and xsecview id.  <br> License requirements : None */
            public: void SectionResultsPrintTestData
            (
                int xsecviewId /** xsecview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Point3d> & points /** points */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ 
            );
            /** Print location results test data to autotest XML file given locations and xsecview id.  <br> License requirements : None */
            public: void SectionResultsPrintTestDataZeroTol
            (
                int xsecviewId /** xsecview id */ ,
                const NXString & resultName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Point3d> & points /** points */ ,
                NXOpen::CAE::CaeAutotest::ToleranceType toleranceType /** tolerance type */ ,
                double toleranceValue /** tolerance value */ ,
                double zeroToleranceValue /** zero tolerance value */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
