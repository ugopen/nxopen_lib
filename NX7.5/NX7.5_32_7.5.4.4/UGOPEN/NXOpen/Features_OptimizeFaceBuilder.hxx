#ifndef NXOpen_FEATURES_OPTIMIZEFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OPTIMIZEFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OptimizeFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Features_OptimizeFaceBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class OptimizeFaceBuilder;
    }
    class Builder;
    class ScCollector;
    namespace Features
    {
        class _OptimizeFaceBuilderBuilder;
        class OptimizeFaceBuilderImpl;
        /** Represents a builder of optimize face <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateOptimizeFaceBuilder Features::FeatureCollection::CreateOptimizeFaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CleanBody </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Report </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  OptimizeFaceBuilder : public Builder
        {
            private: OptimizeFaceBuilderImpl * m_optimizefacebuilder_impl;
            private: friend class  _OptimizeFaceBuilderBuilder;
            protected: OptimizeFaceBuilder();
            public: ~OptimizeFaceBuilder();
            /**Returns  the faces to optimize  <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToOptimize
            (
            );
            /**Returns  the clean body flag. If true, cleans body before optimization, else doesn't.  <br> License requirements : None */
            public: bool CleanBody
            (
            );
            /**Sets  the clean body flag. If true, cleans body before optimization, else doesn't.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCleanBody
            (
                bool cleanBody /** cleanbody */ 
            );
            /**Returns  the report flag. If true, generates a report of changed faces and edges before and after the face optimization. 
                    If false, no report is generated.  <br> License requirements : None */
            public: bool Report
            (
            );
            /**Sets  the report flag. If true, generates a report of changed faces and edges before and after the face optimization. 
                    If false, no report is generated.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReport
            (
                bool report /** report */ 
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
