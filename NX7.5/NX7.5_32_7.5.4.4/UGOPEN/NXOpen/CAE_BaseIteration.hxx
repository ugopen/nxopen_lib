#ifndef NXOpen_CAE_BASEITERATION_HXX_INCLUDED
#define NXOpen_CAE_BASEITERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_BaseIteration.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseIteration.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class BaseIteration;
    }
    namespace CAE
    {
        class BaseResultType;
    }
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class _BaseIterationBuilder;
        class BaseIterationImpl;
        /** This class provides interfaces to query iteration attributes  <br> An instance of this class can not be obtained <br> */
        class NXOPENCPPEXPORT  BaseIteration : public TaggedObject
        {
            /** The type of value that is stored in a iteration object */
            public: enum IterationValueType
            {
                IterationValueTypeUnknown = -1/** Value has an Unknown type  */,
                IterationValueTypeTime/** Value represents a Time */,
                IterationValueTypeFrequency/** Value represents a Frequency  */,
                IterationValueTypeLoadFactor/** Value represents a LoadFactor  */,
                IterationValueTypeEigenvalue/** Value represents a Eigenvalue  */
            };

            /** The Analysis type of a iteration object */
            public: enum IterationType
            {
                IterationTypeUnknown = -1/** Iteration has an Unknown type  */,
                IterationTypeStatic/** Static Analysis Iteration    */,
                IterationTypeMode/** Modal Analysis Iteration    */,
                IterationTypeConstraintMode/** Constraint Modal Analysis Iteration    */,
                IterationTypeTransient/** Transient Analysis Iteration    */,
                IterationTypeBuckling/** Buckling Analysis Iteration    */,
                IterationTypeNonlinear/** NonLinear Analysis Iteration    */,
                IterationTypeFrequencyResponse/** Frequency Response Analysis Iteration    */
            };

            private: BaseIterationImpl * m_baseiteration_impl;
            private: friend class  _BaseIterationBuilder;
            protected: BaseIteration();
            public: ~BaseIteration();
            /**Returns  the type of the iteration  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BaseIteration::IterationType Type
            (
            );
            /**Returns  the iteration value   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double Value
            (
            );
            /**Returns  the units for the iteration value  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Unit * Unit
            (
            );
            /**Returns  the iteration value type  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BaseIteration::IterationValueType ValueType
            (
            );
            /**Returns  the name of the iteration  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString Name
            (
            );
            /**Returns the result types present in this iteration  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::BaseResultType *> GetResultTypes
            (
            );
            /** Returns a @link CAE::BaseResultType CAE::BaseResultType@endlink   @return   <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
