#ifndef NXOpen_CAM_CAMSESSION_HXX_INCLUDED
#define NXOpen_CAM_CAMSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CAMSession;
    }
    class Session;
    namespace CAM
    {
        class Preferences;
    }
    namespace CAM
    {
        class CAMSessionImpl;
        /** Represents cam session  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT  CAMSession
        {
            /** the template subtype class */
            public: enum ObjectSubtype
            {
                ObjectSubtypeSetup/** Setup */,
                ObjectSubtypeOperation/** Operations */,
                ObjectSubtypeProgram/** NC Program */,
                ObjectSubtypeTool/** Machine Tools and Cutters */,
                ObjectSubtypeMethod/** Machining Method*/,
                ObjectSubtypeGeometry/** Geometry */
            };

            private: CAMSessionImpl * m_camsession_impl;
            private: NXOpen::Session* m_owner;
            /** Constructor */
            public: explicit CAMSession(NXOpen::Session *owner);
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CAMSession();
            /** Specify the configuration file of the current cam session <br> License requirements : cam_base ("CAM BASE") */
            public: void SpecifyConfiguration
            (
                const NXString & configFile /** the name of the configuration file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the names of the available template types.  @return  the names of the template types  <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXString> GetTemplateTypes
            (
            );
            /** Get the names of the available template subypes for the specified template type. Only
                        those subtypes have the specified subtype class are returned. @return  the names of available subtypes  <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXString> GetTemplateSubtypes
            (
                const NXString & typeName /** the name of the template type  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSession::ObjectSubtype subtypeClass /** the subtype class*/
            );
            /** Create Cam Preferences builder.  @return  created cam preferences builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Preferences * CreateCamPreferences
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}
#undef EXPORTLIBRARY
#endif
