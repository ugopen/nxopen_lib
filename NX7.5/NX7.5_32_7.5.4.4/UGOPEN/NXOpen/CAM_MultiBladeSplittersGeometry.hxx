#ifndef NXOpen_CAM_MULTIBLADESPLITTERSGEOMETRY_HXX_INCLUDED
#define NXOpen_CAM_MULTIBLADESPLITTERSGEOMETRY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MultiBladeSplittersGeometry.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_MultiBladeSplittersGeometry.hxx>
#include <NXOpen/CAM_Splitter.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class MultiBladeSplittersGeometry;
    }
    namespace CAM
    {
        class Splitter;
    }
    namespace CAM
    {
        class SplitterList;
    }
    class NXObject;
    namespace CAM
    {
        class _MultiBladeSplittersGeometryBuilder;
        class MultiBladeSplittersGeometryImpl;
        /** Represents a selectoin list geometry Builder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT  MultiBladeSplittersGeometry : public TaggedObject
        {
            private: MultiBladeSplittersGeometryImpl * m_multibladesplittersgeometry_impl;
            private: friend class  _MultiBladeSplittersGeometryBuilder;
            protected: MultiBladeSplittersGeometry();
            public: ~MultiBladeSplittersGeometry();
            /**Returns  the splitter list builder   <br> License requirements : None */
            public: NXOpen::CAM::SplitterList * SplitterList
            (
            );
            /** Create a new splitter  @return  new splitter builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Splitter * CreateSplitter
            (
                const std::vector<NXOpen::NXObject *> & wallFaces /** the wall faces */,
                const std::vector<NXOpen::NXObject *> & blendFaces /** the wall faces */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
