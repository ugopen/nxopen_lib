#ifndef NXOpen_ANNOTATIONS_CENTERMARKSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CENTERMARKSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CenterMarkSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CenterMarkSettingsBuilder.hxx>
#include <NXOpen/Annotations_CenterlineSettingsBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class CenterMarkSettingsBuilder;
    }
    namespace Annotations
    {
        class CenterlineSettingsBuilder;
    }
    namespace Annotations
    {
        class _CenterMarkSettingsBuilderBuilder;
        class CenterMarkSettingsBuilderImpl;
        /** Represents a Builder for CenterMark Settings. This can be used for all types of centerlines */
        class NXOPENCPPEXPORT  CenterMarkSettingsBuilder : public Annotations::CenterlineSettingsBuilder
        {
            private: CenterMarkSettingsBuilderImpl * m_centermarksettingsbuilder_impl;
            private: friend class  _CenterMarkSettingsBuilderBuilder;
            protected: CenterMarkSettingsBuilder();
            public: ~CenterMarkSettingsBuilder();
            /**Returns  the size parameter for centerline. The size parameter gives offset value for
                      @link Annotations::SymmetricalCenterline Annotations::SymmetricalCenterline@endlink  and gives Center Cross Size for
                      @link Annotations::CenterMark Annotations::CenterMark@endlink  and @link Annotations::CircleCenterline Annotations::CircleCenterline@endlink 
                       <br> License requirements : None */
            public: double Size
            (
            );
            /**Sets  the size parameter for centerline. The size parameter gives offset value for
                      @link Annotations::SymmetricalCenterline Annotations::SymmetricalCenterline@endlink  and gives Center Cross Size for
                      @link Annotations::CenterMark Annotations::CenterMark@endlink  and @link Annotations::CircleCenterline Annotations::CircleCenterline@endlink 
                       <br> License requirements : drafting ("DRAFTING") */
            public: void SetSize
            (
                double size /** size */ 
            );
            /**Returns  the extension parameter for centerline  <br> License requirements : None */
            public: double Extension
            (
            );
            /**Sets  the extension parameter for centerline  <br> License requirements : drafting ("DRAFTING") */
            public: void SetExtension
            (
                double extension /** extension */ 
            );
            /**Returns  the individual extension distance On/Off parameter for CenterMark  <br> License requirements : None */
            public: bool IndividualDistance
            (
            );
            /**Sets  the individual extension distance On/Off parameter for CenterMark  <br> License requirements : drafting ("DRAFTING") */
            public: void SetIndividualDistance
            (
                bool individualDistance /** individualdistance */ 
            );
            /**Returns  the inherit angle option for Center Marks  <br> License requirements : None */
            public: bool InheritAngle
            (
            );
            /**Sets  the inherit angle option for Center Marks  <br> License requirements : drafting ("DRAFTING") */
            public: void SetInheritAngle
            (
                bool inheritAngle /** inheritangle */ 
            );
            /**Returns  the angle of rotation for Center Marks  <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle of rotation for Center Marks  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the show center point option for Center Marks  <br> License requirements : None */
            public: bool ShowCenterPoint
            (
            );
            /**Sets  the show center point option for Center Marks  <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowCenterPoint
            (
                bool showCenterPoint /** showcenterpoint */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
