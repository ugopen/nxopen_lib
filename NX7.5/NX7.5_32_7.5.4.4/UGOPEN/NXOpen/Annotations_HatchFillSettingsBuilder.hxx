#ifndef NXOpen_ANNOTATIONS_HATCHFILLSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HATCHFILLSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HatchFillSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_HatchFillSettingsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class HatchFillSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _HatchFillSettingsBuilderBuilder;
        class HatchFillSettingsBuilderImpl;
        /** This class is used to construct the Crosshatch and area Fill setting block . */
        class NXOPENCPPEXPORT  HatchFillSettingsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the valid types of hatch objects */
            public: enum AnnotationTypes
            {
                AnnotationTypesCrosshatch/** Crosshatch */,
                AnnotationTypesAreaFill/** Area Fill  */
            };

            private: HatchFillSettingsBuilderImpl * m_hatchfillsettingsbuilder_impl;
            private: friend class  _HatchFillSettingsBuilderBuilder;
            protected: HatchFillSettingsBuilder();
            public: ~HatchFillSettingsBuilder();
            /**Returns  the type of hatch object  <br> License requirements : None */
            public: NXOpen::Annotations::HatchFillSettingsBuilder::AnnotationTypes AnnotationType
            (
            );
            /**Sets  the type of hatch object  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnnotationType
            (
                NXOpen::Annotations::HatchFillSettingsBuilder::AnnotationTypes type /** type */ 
            );
            /**Returns  the crosshatch file  <br> License requirements : None */
            public: NXString CrosshatchFile
            (
            );
            /**Sets  the crosshatch file  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCrosshatchFile
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the pattern  <br> License requirements : None */
            public: NXString Pattern
            (
            );
            /**Sets  the pattern  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPattern
            (
                const NXString & identifier /** identifier */ 
            );
            /**Returns  the distance  <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the distance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the area fill material  <br> License requirements : None */
            public: NXOpen::Annotations::AreaFillMaterial Material
            (
            );
            /**Sets  the area fill material  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMaterial
            (
                NXOpen::Annotations::AreaFillMaterial areaFillMaterial /** areafillmaterial */ 
            );
            /**Returns  the scale  <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale  <br> License requirements : drafting ("DRAFTING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the angle  <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the areafill angle  <br> License requirements : None */
            public: double AreafillAngle
            (
            );
            /**Sets  the areafill angle  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAreafillAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the color  <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color  <br> License requirements : drafting ("DRAFTING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth Width
            (
            );
            /**Sets  the width  <br> License requirements : drafting ("DRAFTING") */
            public: void SetWidth
            (
                NXOpen::Annotations::LineWidth width /** width */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
