#ifndef NXOpen_GEOMETRICUTILITIES_CONTINUITY_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CONTINUITY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_Continuity.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class ScCollector;
    namespace GeometricUtilities
    {
        class _ContinuityBuilder;
        class ContinuityImpl;
        /**
            Represents a @link GeometricUtilities::Continuity GeometricUtilities::Continuity@endlink 
            Allows user to specify continuity constraint surface construction.
            */
        class NXOPENCPPEXPORT  Continuity : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Continuity type. 
                    */
            public: enum ContinuityTypes
            {
                ContinuityTypesG0/** G0 continuity */,
                ContinuityTypesG1/** G1 continuity */,
                ContinuityTypesG2/** G2 continuity */,
                ContinuityTypesG3/** G3 continuity*/,
                ContinuityTypesFree/** Free continuity */
            };

            private: ContinuityImpl * m_continuity_impl;
            private: friend class  _ContinuityBuilder;
            protected: Continuity();
            public: ~Continuity();
            /**Returns  the continuity type. If continuity = G0, then constraint face selector is disabled.
                     <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity::ContinuityTypes ContinuityType
            (
            );
            /**Sets  the continuity type. If continuity = G0, then constraint face selector is disabled.
                     <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetContinuityType
            (
                NXOpen::GeometricUtilities::Continuity::ContinuityTypes continuityType /** continuitytype */ 
            );
            /**Returns  the constraint face collector.
                     <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::ScCollector * ConstraintFaces
            (
            );
            /**Returns  the value indicating if a continuity constraint is of fixed type.
                        This flag is valid for 
                        @link Continuity::ContinuityTypesG1 Continuity::ContinuityTypesG1@endlink ,
                        @link Continuity::ContinuityTypesG2 Continuity::ContinuityTypesG2@endlink ,
                        @link Continuity::ContinuityTypesG3 Continuity::ContinuityTypesG3@endlink 
                        types only.  <br> License requirements : None */
            public: bool IsFixed
            (
            );
            /**Sets  the value indicating if a continuity constraint is of fixed type.
                        This flag is valid for 
                        @link Continuity::ContinuityTypesG1 Continuity::ContinuityTypesG1@endlink ,
                        @link Continuity::ContinuityTypesG2 Continuity::ContinuityTypesG2@endlink ,
                        @link Continuity::ContinuityTypesG3 Continuity::ContinuityTypesG3@endlink 
                        types only.  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFixed
            (
                bool isFixed /** isfixed */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
