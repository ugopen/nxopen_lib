#ifndef NXOpen_TOOLING_INSERTAUXILIARYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_INSERTAUXILIARYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_InsertAuxiliaryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_InsertAuxiliaryBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class InsertAuxiliaryBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    class ScCollector;
    class Section;
    class SelectBody;
    class SelectBodyList;
    class SelectEdge;
    namespace Tooling
    {
        class _InsertAuxiliaryBuilderBuilder;
        class InsertAuxiliaryBuilderImpl;
        /** PDW insert auxiliary builder to design various auxiliaries of insert group  <br> To create a new instance of this class, use @link Tooling::InsertAuxiliaryCollection::CreateInsertAuxiliaryBuilder Tooling::InsertAuxiliaryCollection::CreateInsertAuxiliaryBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BottomPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CircDeleteAllComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CircularOperation </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        ClearanceValue </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DesignTool </td> <td> 
         
        Copy </td> </tr> 

        <tr><td> 
         
        FalseBodyHeight.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        HeelHeight </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        HeelLength </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        HeelRadian </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        HeelWidth </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        OffsetAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OffsetX </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OffsetY </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchShankParaC </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PunchShankParaFL </td> <td> 
         
        45 </td> </tr> 

        <tr><td> 
         
        PunchShankParaL1 </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        PunchShankParaLength </td> <td> 
         
        8 </td> </tr> 

        <tr><td> 
         
        PunchShankParaPL </td> <td> 
         
        40 </td> </tr> 

        <tr><td> 
         
        PunchShankParaR </td> <td> 
         
        13 </td> </tr> 

        <tr><td> 
         
        PunchShankParaWidth </td> <td> 
         
        8 </td> </tr> 

        <tr><td> 
         
        RampShankHeight.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        RectDeleteAllComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RectangularOperation </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        ShankShape </td> <td> 
         
        Flange </td> </tr> 

        <tr><td> 
         
        StripperPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TotalAlongX </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TotalAlongY </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TotalNumber </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        UseBottomPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseClearance </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        UsePunchPlateClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseStripperPlateClearance </td> <td> 
         
        0 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  InsertAuxiliaryBuilder : public Builder
        {
            /** Specifies the insert auxiliary type. */
            public: enum Types
            {
                TypesInsertShank/** insert shank*/,
                TypesPunchMount/** punch mount*/,
                TypesTools/** tools*/
            };

            /** Specifies the shank shape. */
            public: enum ShankShapeTypes
            {
                ShankShapeTypesFlange/** flange*/,
                ShankShapeTypesRamp/** ramp*/,
                ShankShapeTypesHeel/** heel*/
            };

            /** Specifies the design tool option. */
            public: enum DesignToolOption
            {
                DesignToolOptionCopy/** copy*/,
                DesignToolOptionArray/** array*/,
                DesignToolOptionDelete/** delete*/
            };

            /** Specifies the rectangular array option. */
            public: enum RectOperationOption
            {
                RectOperationOptionCreate/** create*/,
                RectOperationOptionEdit/** edit*/,
                RectOperationOptionDelete/** delete*/
            };

            /** Specifies the options of circular array. */
            public: enum CircOperationTypes
            {
                CircOperationTypesCreate/** create*/,
                CircOperationTypesEdit/** edit*/,
                CircOperationTypesDelete/** delete*/
            };

            private: InsertAuxiliaryBuilderImpl * m_insertauxiliarybuilder_impl;
            private: friend class  _InsertAuxiliaryBuilderBuilder;
            protected: InsertAuxiliaryBuilder();
            public: ~InsertAuxiliaryBuilder();
            /**Returns  the insert auxiliary type.  <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::Types Type
            (
            );
            /**Sets  the insert auxiliary type.  <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::Types type /** type */ 
            );
            /**Returns  the shank shape.  <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::ShankShapeTypes ShankShape
            (
            );
            /**Sets  the shank shape.  <br> License requirements : None */
            public: void SetShankShape
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::ShankShapeTypes shankShape /** shankshape */ 
            );
            /**Returns  the punch shank parameter length.  <br> License requirements : None */
            public: double PunchShankParaLength
            (
            );
            /**Sets  the punch shank parameter length.  <br> License requirements : None */
            public: void SetPunchShankParaLength
            (
                double punchShankParaL /** punchshankparal */ 
            );
            /**Returns  the punch shank parameter width.  <br> License requirements : None */
            public: double PunchShankParaWidth
            (
            );
            /**Sets  the punch shank parameter width.  <br> License requirements : None */
            public: void SetPunchShankParaWidth
            (
                double punchShankParaW /** punchshankparaw */ 
            );
            /**Returns  the punch shank parameter for true body and false body length.  <br> License requirements : None */
            public: double PunchShankParaL1
            (
            );
            /**Sets  the punch shank parameter for true body and false body length.  <br> License requirements : None */
            public: void SetPunchShankParaL1
            (
                double punchShankParaL1 /** punchshankparal1 */ 
            );
            /**Returns  the punch shank parameter for clearance between true body and false body.  <br> License requirements : None */
            public: double PunchShankParaC
            (
            );
            /**Sets  the punch shank parameter for clearance between true body and false body.  <br> License requirements : None */
            public: void SetPunchShankParaC
            (
                double punchShankParaC /** punchshankparac */ 
            );
            /**Returns  the punch shank parameter for true body radius.  <br> License requirements : None */
            public: double PunchShankParaR
            (
            );
            /**Sets  the punch shank parameter for true body radius.  <br> License requirements : None */
            public: void SetPunchShankParaR
            (
                double punchShankParaR /** punchshankparar */ 
            );
            /**Returns  the punch shank parameter for true body height.  <br> License requirements : None */
            public: double PunchShankParaPL
            (
            );
            /**Sets  the punch shank parameter for true body height.  <br> License requirements : None */
            public: void SetPunchShankParaPL
            (
                double punchShankParaPL /** punchshankparapl */ 
            );
            /**Returns  the punch shank parameter false body height.  <br> License requirements : None */
            public: double PunchShankParaFL
            (
            );
            /**Sets  the punch shank parameter false body height.  <br> License requirements : None */
            public: void SetPunchShankParaFL
            (
                double punchShankParaFL /** punchshankparafl */ 
            );
            /**Returns  the selected punch.  <br> License requirements : None */
            public: NXOpen::SelectBody * Punch
            (
            );
            /**Returns  the selected shank profile.  <br> License requirements : None */
            public: NXOpen::Section * SelectShankProfile
            (
            );
            /**Returns  the ramp shank height.  <br> License requirements : None */
            public: NXOpen::Expression * RampShankHeight
            (
            );
            /**Returns  the false body height.  <br> License requirements : None */
            public: NXOpen::Expression * FalseBodyHeight
            (
            );
            /**Returns  the sweep face for editing ramp.  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceForRamp
            (
            );
            /**Returns  the vector to determintate the datum plane normal that the sweep guide curve in.  <br> License requirements : None */
            public: NXOpen::Direction * VectorForRamp
            (
            );
            /**Sets  the vector to determintate the datum plane normal that the sweep guide curve in.  <br> License requirements : None */
            public: void SetVectorForRamp
            (
                NXOpen::Direction * vectorForRamp /** vectorforramp */ 
            );
            /**Returns  the tangent point for the sweep guide curve  <br> License requirements : None */
            public: NXOpen::Point * PointForRamp
            (
            );
            /**Sets  the tangent point for the sweep guide curve  <br> License requirements : None */
            public: void SetPointForRamp
            (
                NXOpen::Point * pointForRamp /** pointforramp */ 
            );
            /**Returns  the the sweep guide curve radius.  <br> License requirements : None */
            public: NXOpen::Expression * RadiusForRamp
            (
            );
            /**Returns  the heel length.  <br> License requirements : None */
            public: double HeelLength
            (
            );
            /**Sets  the heel length.  <br> License requirements : None */
            public: void SetHeelLength
            (
                double heelLength /** heellength */ 
            );
            /**Returns  the heel width.  <br> License requirements : None */
            public: double HeelWidth
            (
            );
            /**Sets  the heel width.  <br> License requirements : None */
            public: void SetHeelWidth
            (
                double heelWidth /** heelwidth */ 
            );
            /**Returns  the heel radius.  <br> License requirements : None */
            public: double HeelRadian
            (
            );
            /**Sets  the heel radius.  <br> License requirements : None */
            public: void SetHeelRadian
            (
                double heelRadian /** heelradian */ 
            );
            /**Returns  the heel height.  <br> License requirements : None */
            public: double HeelHeight
            (
            );
            /**Sets  the heel height.  <br> License requirements : None */
            public: void SetHeelHeight
            (
                double heelHeight /** heelheight */ 
            );
            /**Returns  the option to use punch plate clearance.  <br> License requirements : None */
            public: bool UsePunchPlateClearance
            (
            );
            /**Sets  the option to use punch plate clearance.  <br> License requirements : None */
            public: void SetUsePunchPlateClearance
            (
                bool usePPClearance /** useppclearance */ 
            );
            /**Returns  the punch plate clearance.  <br> License requirements : None */
            public: double PunchPlateClearance
            (
            );
            /**Sets  the punch plate clearance.  <br> License requirements : None */
            public: void SetPunchPlateClearance
            (
                double punchPlateClr /** punchplateclr */ 
            );
            /**Returns  the option to use bottoming plate clearance.  <br> License requirements : None */
            public: bool UseBottomPlateClearance
            (
            );
            /**Sets  the option to use bottoming plate clearance.  <br> License requirements : None */
            public: void SetUseBottomPlateClearance
            (
                bool useBPClearance /** usebpclearance */ 
            );
            /**Returns  the bottom plate clearance.  <br> License requirements : None */
            public: double BottomPlateClearance
            (
            );
            /**Sets  the bottom plate clearance.  <br> License requirements : None */
            public: void SetBottomPlateClearance
            (
                double bottomPlateClr /** bottomplateclr */ 
            );
            /**Returns  the option to stripper plate clearance.  <br> License requirements : None */
            public: bool UseStripperPlateClearance
            (
            );
            /**Sets  the option to stripper plate clearance.  <br> License requirements : None */
            public: void SetUseStripperPlateClearance
            (
                bool useSPClearance /** usespclearance */ 
            );
            /**Returns  the stripper plate clearance.  <br> License requirements : None */
            public: double StripperPlateClearance
            (
            );
            /**Sets  the stripper plate clearance.  <br> License requirements : None */
            public: void SetStripperPlateClearance
            (
                double stripperPlateClr /** stripperplateclr */ 
            );
            /**Returns  the option to use clearance.  <br> License requirements : None */
            public: bool UseClearance
            (
            );
            /**Sets  the option to use clearance.  <br> License requirements : None */
            public: void SetUseClearance
            (
                bool useClearance /** useclearance */ 
            );
            /**Returns  the clearance value.  <br> License requirements : None */
            public: double ClearanceValue
            (
            );
            /**Sets  the clearance value.  <br> License requirements : None */
            public: void SetClearanceValue
            (
                double clearanceValue /** clearancevalue */ 
            );
            /**Returns  the punch edge.  <br> License requirements : None */
            public: NXOpen::SelectEdge * PunchEdge
            (
            );
            /**Returns  the punch shank.  <br> License requirements : None */
            public: NXOpen::ScCollector * PunchShankFace
            (
            );
            /**Returns  the insert edge.  <br> License requirements : None */
            public: NXOpen::SelectEdge * InsertEdge
            (
            );
            /**Returns  the insert shank face.  <br> License requirements : None */
            public: NXOpen::ScCollector * InsertShankFace
            (
            );
            /**Returns  the punch edge to place the mount.  <br> License requirements : None */
            public: NXOpen::SelectEdge * MountPunchEdge
            (
            );
            /**Returns  the punch face to place the mount.  <br> License requirements : None */
            public: NXOpen::ScCollector * MountPunchFace
            (
            );
            /** Design mount head for insert.   <br> License requirements : None */
            public: void DesignMountHead
            (
            );
            /**Returns  the design tool.  <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::DesignToolOption DesignTool
            (
            );
            /**Sets  the design tool.  <br> License requirements : None */
            public: void SetDesignTool
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::DesignToolOption designTool /** designtool */ 
            );
            /**Returns  the insert to be copied.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * CopySelectInsert
            (
            );
            /**Returns  the control point for the copy operation.  <br> License requirements : None */
            public: NXOpen::Point * ControlPoint
            (
            );
            /**Sets  the control point for the copy operation.  <br> License requirements : None */
            public: void SetControlPoint
            (
                NXOpen::Point * specifyControlPoint /** specifycontrolpoint */ 
            );
            /**Returns  the destination point for the copy operation.  <br> License requirements : None */
            public: NXOpen::Point * DestinationPoint
            (
            );
            /**Sets  the destination point for the copy operation.  <br> License requirements : None */
            public: void SetDestinationPoint
            (
                NXOpen::Point * specifyDestinationPoint /** specifydestinationpoint */ 
            );
            /**Returns  the insert to do rectangular array .  <br> License requirements : None */
            public: NXOpen::SelectBody * RectangularInsert
            (
            );
            /**Returns  the rectangular array operation.  <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::RectOperationOption RectangularOperation
            (
            );
            /**Sets  the rectangular array operation.  <br> License requirements : None */
            public: void SetRectangularOperation
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::RectOperationOption rectOperationType /** rectoperationtype */ 
            );
            /**Returns  the option to delete all components in rectangular array.  <br> License requirements : None */
            public: bool RectDeleteAllComponents
            (
            );
            /**Sets  the option to delete all components in rectangular array.  <br> License requirements : None */
            public: void SetRectDeleteAllComponents
            (
                bool rectDeleteAllComponents /** rectdeleteallcomponents */ 
            );
            /**Returns  the X vector for rectangular array.  <br> License requirements : None */
            public: NXOpen::Direction * RectangularXVector
            (
            );
            /**Sets  the X vector for rectangular array.  <br> License requirements : None */
            public: void SetRectangularXVector
            (
                NXOpen::Direction * rectSpecifyVectorX /** rectspecifyvectorx */ 
            );
            /**Returns  the total number of insert along X.  <br> License requirements : None */
            public: int TotalAlongX
            (
            );
            /**Sets  the total number of insert along X.  <br> License requirements : None */
            public: void SetTotalAlongX
            (
                int totalNumberX /** totalnumberx */ 
            );
            /**Returns  the offset value along X.  <br> License requirements : None */
            public: double OffsetX
            (
            );
            /**Sets  the offset value along X.  <br> License requirements : None */
            public: void SetOffsetX
            (
                double offsetX /** offsetx */ 
            );
            /**Returns  the Y vector for rectangular array.  <br> License requirements : None */
            public: NXOpen::Direction * RectangularYVector
            (
            );
            /**Sets  the Y vector for rectangular array.  <br> License requirements : None */
            public: void SetRectangularYVector
            (
                NXOpen::Direction * rectSpecifyVectorY /** rectspecifyvectory */ 
            );
            /**Returns  the total number of insert along Y.  <br> License requirements : None */
            public: int TotalAlongY
            (
            );
            /**Sets  the total number of insert along Y.  <br> License requirements : None */
            public: void SetTotalAlongY
            (
                int totalNumberY /** totalnumbery */ 
            );
            /**Returns  the offset value along Y.  <br> License requirements : None */
            public: double OffsetY
            (
            );
            /**Sets  the offset value along Y.  <br> License requirements : None */
            public: void SetOffsetY
            (
                double offsetY /** offsety */ 
            );
            /**Returns  the insert to do circular array.  <br> License requirements : None */
            public: NXOpen::SelectBody * CircularInsert
            (
            );
            /**Returns  the circular array operation.  <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::CircOperationTypes CircularOperation
            (
            );
            /**Sets  the circular array operation.  <br> License requirements : None */
            public: void SetCircularOperation
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::CircOperationTypes circOperationType /** circoperationtype */ 
            );
            /**Returns  the option to delete all components in circular array.  <br> License requirements : None */
            public: bool CircDeleteAllComponents
            (
            );
            /**Sets  the option to delete all components in circular array.  <br> License requirements : None */
            public: void SetCircDeleteAllComponents
            (
                bool circDeleteAllComponents /** circdeleteallcomponents */ 
            );
            /**Returns  the specified vector for defining circular array axis.  <br> License requirements : None */
            public: NXOpen::Direction * CircularVector
            (
            );
            /**Sets  the specified vector for defining circular array axis.  <br> License requirements : None */
            public: void SetCircularVector
            (
                NXOpen::Direction * circSpecifyVector /** circspecifyvector */ 
            );
            /**Returns  the total number of insert for circular array.  <br> License requirements : None */
            public: int TotalNumber
            (
            );
            /**Sets  the total number of insert for circular array.  <br> License requirements : None */
            public: void SetTotalNumber
            (
                int totalNumber /** totalnumber */ 
            );
            /**Returns  the offset angle of circular array.  <br> License requirements : None */
            public: double OffsetAngle
            (
            );
            /**Sets  the offset angle of circular array.  <br> License requirements : None */
            public: void SetOffsetAngle
            (
                double offsetAngle /** offsetangle */ 
            );
            /**Returns  the insert objects to be deleted.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * InsertsToDelete
            (
            );
            /**Returns  the faces of those to be deleted shanks.  <br> License requirements : None */
            public: NXOpen::ScCollector * ShanksToDelete
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
