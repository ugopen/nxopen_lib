#ifndef NXOpen_ROUTING_ELECTRICAL_ELECTRICALSTOCKDEFINITION_HXX_INCLUDED
#define NXOpen_ROUTING_ELECTRICAL_ELECTRICALSTOCKDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Electrical_ElectricalStockDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_StockDefinition.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDefinition;
        }
    }
    namespace Routing
    {
        class StockDefinition;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class _ElectricalStockDefinitionBuilder;
            class ElectricalStockDefinitionImpl;
            /** Represents @link Routing::Electrical::ElectricalStockDefinition Routing::Electrical::ElectricalStockDefinition@endlink  object  <br> Creator not available in KF. <br> */
            class NXOPENCPPEXPORT  ElectricalStockDefinition : public Routing::StockDefinition
            {
                /** Stock section type. */
                public: enum SectionType
                {
                    SectionTypeCircular/** circular */ ,
                    SectionTypeRectangular/** rectangular */ 
                };

                private: ElectricalStockDefinitionImpl * m_electricalstockdefinition_impl;
                private: friend class  _ElectricalStockDefinitionBuilder;
                protected: ElectricalStockDefinition();
                public: ~ElectricalStockDefinition();
                /**Returns  the width of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double Width
                (
                );
                /**Sets  the width of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetWidth
                (
                    double widthValue /** widthvalue */ 
                );
                /**Returns   the height of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double Height
                (
                );
                /**Sets   the height of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetHeight
                (
                    double heightValue /** heightvalue */ 
                );
                /**Returns   the gauge of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double Gauge
                (
                );
                /**Sets   the gauge of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetGauge
                (
                    double gaugeValue /** gaugevalue */ 
                );
                /**Returns   the wire type of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXString WireType
                (
                );
                /**Sets   the wire type of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetWireType
                (
                    const NXString & wireType /** wiretype */ 
                );
                /**Returns   the linear density of stock   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double LinearDensity
                (
                );
                /**Sets   the linear density of stock   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetLinearDensity
                (
                    double densityValue /** densityvalue */ 
                );
                /**Returns   the min bend radius of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: double MinBendRadius
                (
                );
                /**Sets   the min bend radius of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetMinBendRadius
                (
                    double radiusValue /** radiusvalue */ 
                );
                /**Returns   the cross section type of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ElectricalStockDefinition::SectionType CrossSectionType
                (
                );
                /**Sets   the cross section type of stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetCrossSectionType
                (
                    NXOpen::Routing::Electrical::ElectricalStockDefinition::SectionType sectionType /** sectiontype */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
