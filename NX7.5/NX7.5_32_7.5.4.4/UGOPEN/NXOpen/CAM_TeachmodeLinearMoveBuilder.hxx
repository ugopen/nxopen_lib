#ifndef NXOpen_CAM_TEACHMODELINEARMOVEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TEACHMODELINEARMOVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TeachmodeLinearMoveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_MoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TeachmodeLinearMoveBuilder;
    }
    namespace CAM
    {
        class MoveBuilder;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _TeachmodeLinearMoveBuilderBuilder;
        class TeachmodeLinearMoveBuilderImpl;
        /** Represents a TeachmodeLinearMove  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateTeachmodeTurningBuilder CAM::OperationCollection::CreateTeachmodeTurningBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  TeachmodeLinearMoveBuilder : public CAM::MoveBuilder
        {
            /** the movement types */
            public: enum MoveTypes
            {
                MoveTypesDirect/** Direct */,
                MoveTypesRadial/** Radial only */,
                MoveTypesAxial/** Axial only */,
                MoveTypesRadialAxial/** Radial then Axial */,
                MoveTypesAxialRadial/** Axial then Radial */
            };

            /** the end position definition types */
            public: enum EndPositionTypes
            {
                EndPositionTypesPoint/** Point */,
                EndPositionTypesCurves/** Curves */
            };

            /** the types for positioning to curves */
            public: enum CurveToolPositionTypes
            {
                CurveToolPositionTypesTo/** To Curve */,
                CurveToolPositionTypesOn/** On Curve */,
                CurveToolPositionTypesPast/** Past Curve */
            };

            /** the initial retract choices */
            public: enum InitialRetractTypes
            {
                InitialRetractTypesNone/** None */,
                InitialRetractTypesLinearAuto/** Automatic Linear */,
                InitialRetractTypesLinear/** Linear */
            };

            private: TeachmodeLinearMoveBuilderImpl * m_teachmodelinearmovebuilder_impl;
            private: friend class  _TeachmodeLinearMoveBuilderBuilder;
            protected: TeachmodeLinearMoveBuilder();
            public: ~TeachmodeLinearMoveBuilder();
            /**Returns  the Movement Type  <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder::MoveTypes MoveType
            (
            );
            /**Sets  the Movement Type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMoveType
            (
                NXOpen::CAM::TeachmodeLinearMoveBuilder::MoveTypes newValue /** the move type */
            );
            /**Returns  the Type of End Position Definition  <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder::EndPositionTypes EndPositionType
            (
            );
            /**Sets  the Type of End Position Definition  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndPositionType
            (
                NXOpen::CAM::TeachmodeLinearMoveBuilder::EndPositionTypes newValue /** the end position type */
            );
            /**Returns  the Point  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the Point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * newValue /** the point */
            );
            /**Returns  the First Curve  <br> License requirements : None */
            public: NXOpen::NXObject * FirstCurve
            (
            );
            /**Sets  the First Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFirstCurve
            (
                NXOpen::NXObject * newValue /** the first curve */
            );
            /**Returns  the Tool Position to first Curve  <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder::CurveToolPositionTypes FirstCurveToolPosition
            (
            );
            /**Sets  the Tool Position to first Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFirstCurveToolPosition
            (
                NXOpen::CAM::TeachmodeLinearMoveBuilder::CurveToolPositionTypes newValue /** the tool position type */
            );
            /**Returns  the Stock on first Curve  <br> License requirements : None */
            public: double FirstCurveStock
            (
            );
            /**Sets  the Stock on first Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFirstCurveStock
            (
                double newValue /** the stock on first curve */
            );
            /**Returns  the Second Curve  <br> License requirements : None */
            public: NXOpen::NXObject * SecondCurve
            (
            );
            /**Sets  the Second Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSecondCurve
            (
                NXOpen::NXObject * newValue /** the second curve */
            );
            /**Returns  the Tool Position to second Curve  <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder::CurveToolPositionTypes SecondCurveToolPosition
            (
            );
            /**Sets  the Tool Position to second Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSecondCurveToolPosition
            (
                NXOpen::CAM::TeachmodeLinearMoveBuilder::CurveToolPositionTypes newValue /** the tool position type */
            );
            /**Returns  the Stock on second Curve  <br> License requirements : None */
            public: double SecondCurveStock
            (
            );
            /**Sets  the Stock on second Curve  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSecondCurveStock
            (
                double newValue /** the stock on second curve */
            );
            /**Returns  the Initial Retract Type  <br> License requirements : None */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder::InitialRetractTypes InitialRetractType
            (
            );
            /**Sets  the Initial Retract Type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialRetractType
            (
                NXOpen::CAM::TeachmodeLinearMoveBuilder::InitialRetractTypes newValue /** the initial retract type */
            );
            /**Returns  the initial retract angle  <br> License requirements : None */
            public: double InitialRetractAngle
            (
            );
            /**Sets  the initial retract angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialRetractAngle
            (
                double newValue /** the initial retract angle */
            );
            /**Returns  the initial retract distance  <br> License requirements : None */
            public: double InitialRetractDistance
            (
            );
            /**Sets  the initial retract distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInitialRetractDistance
            (
                double newValue /** the initial retract distance */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
