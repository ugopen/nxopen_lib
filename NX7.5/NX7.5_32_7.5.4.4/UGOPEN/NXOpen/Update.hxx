#ifndef NXOpen_UPDATE_HXX_INCLUDED
#define NXOpen_UPDATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Update.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Update;
    class Session;
    class ErrorList;
    class NXObject;
    class Part;
    class UpdateImpl;
    /** Provides methods for update and delete.  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT  Update
    {
        /** Specifies whether a method should perform an update or not.  Methods that choose not
                to perform an update will need to call @link Update::DoUpdate Update::DoUpdate@endlink  at a
                later time.  Some methods in the Common API may perform an update.  In an effort to
                improve performance, these methods take an option as input to not perform an update.  
                For example, a method called in a loop may set the option to not update and then perform
                an explicit update after the loop completes. */
        public: enum Option
        {
            OptionNow/** Perform an update immediately */,
            OptionLater/** Do not perform an update */
        };

        /** Specifies the action to take when an object fails to update.
            */
        public: enum FailureOption
        {
            FailureOptionNoOption/** No option */,
            FailureOptionUndo/** Perform undo */,
            FailureOptionSuppress/** Suppress failing object */,
            FailureOptionSuppressAll/** Suppress failing objects and subsequent objects */,
            FailureOptionAccept/** Accept failure of failing objects */,
            FailureOptionAcceptAll/** Accept failure of failing objects and subsequent objects */,
            FailureOptionDelete/** Delete failing object */,
            FailureOptionDeleteDependents/** Delete failing object and its dependents */,
            FailureOptionInterrupt/** Interrupt update upon failure */
        };

        private: UpdateImpl * m_update_impl;
        private: NXOpen::Session* m_owner;
        /** Constructor */
        public: explicit Update(NXOpen::Session *owner);
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~Update();
        /** Adds objects to the global delete list.
            The objects in the global delete list will be deleted when the next update is performed.  
            An update can be performed through the @link Update::DoUpdate Update::DoUpdate@endlink  method. 
             <br> 
            Note:  if you are removing objects from a sketch, @link Sketch::DeleteObjects Sketch::DeleteObjects@endlink 
            should be used instead.  
             <br> 
             @return  The number of errors in the update module's
                                       error list.  If errors occurred during the execution
                                       of this method, they will be added to that error list.
                                       To obtain a list of these errors, 
                                       use @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int AddToDeleteList
        (
            const std::vector<NXOpen::NXObject *> & objects /** The objects to be deleted */
        );
        /** Adds an object to the global delete list.
            The objects in the global delete list will be deleted when the next update is performed.  
            An update can be performed through the @link Update::DoUpdate Update::DoUpdate@endlink  method. 
            
             <br> 
            Note:  if you are removing objects from a sketch, @link Sketch::DeleteObjects Sketch::DeleteObjects@endlink 
            should be used instead.  
             <br> 
             @return  The number of errors in the update module's
                                       error list.  If errors occurred during the execution
                                       of this method, they will be added to that error list.
                                       To obtain a list of these errors, 
                                       use @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int AddToDeleteList
        (
            NXOpen::NXObject * object /** The object to be deleted */
        );
        /** Removes objects from the global delete list.
            Note: if the object is not in the delete list, it will be ignored.  An exception
            will not be raised.  <br> License requirements : None */
        public: void RemoveFromDeleteList
        (
            const std::vector<NXOpen::NXObject *> & objects /** The objects to be removed from the delete list */
        );
        /** Returns the global delete list  @return   <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetDeleteList
        (
        );
        /** Clears the contents of the global delete list.  (Does not delete any of the objects on the list.)   <br> License requirements : None */
        public: void ClearDeleteList
        (
        );
        /** Updates the current session  @return  The number of errors in the update module's error list.
                                       If errors occurred during update they will be added to that
                                       error list.  To obtain a list of these errors, use
                                       @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int DoUpdate
        (
            NXOpen::Session::UndoMarkId undoMark /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        /**Returns  the list of all the errors that the Update module has encountered
            since the last time that the list was cleared.  To clear the list,
            use @link Update::ClearErrorList Update::ClearErrorList@endlink .  <br> License requirements : None */
        public: NXOpen::ErrorList * ErrorList
        (
        );
        /** Clears the error list. See @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: void ClearErrorList
        (
        );
        /**Sets  the state of the interpart delay flag.  If interpart delay is turned on, then
                updates will not be propagated beyond the work part. If off, then updates will be
                applied across all parts in the session.
             <br> License requirements : None */
        public: void SetInterpartDelay
        (
            bool delayed /** The new state of the interpart delay flag. */
        );
        /**Returns  the state of the interpart delay flag.  If interpart delay is turned on, then
                updates will not be propagated beyond the work part. If off, then updates will be
                applied across all parts in the session.
             <br> License requirements : None */
        public: bool InterpartDelay
        (
        );
        /** Performs an interpart update. This ensures that all parts in the session are updated 
                with respect to any changes on other loaded parts. Note that this update will always
                occur regardless of the state of the interpart delay flag. See @link Update::SetInterpartDelay Update::SetInterpartDelay@endlink 
             <br> License requirements : None */
        public: void DoInterpartUpdate
        (
            NXOpen::Session::UndoMarkId undoMark /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        /**Sets  the current state of the automatically load for interpart update switch.
             <br> License requirements : None */
        public: void SetAutomaticLoadForInterpartUpdate
        (
            bool autoload /** The new state of the Automatically Load for Interpart Update flag. */
        );
        /**Returns  the current state of the automatically load for interpart update switch.
             <br> License requirements : None */
        public: bool AutomaticLoadForInterpartUpdate
        (
        );
        /** Depending on the state of the automatically load for interpart update flag,
                the parts containing out-of-date interpart relations are fully loaded to log the interpart relations to update.
                Whether or not they update is further controlled by the state of the interpart delay flag.
                See @link Update::SetInterpartDelay Update::SetInterpartDelay@endlink  
             <br> License requirements : None */
        public: void AutoloadForInterpartUpdate
        (
        );
        /** Action to take when an object fails to update.  <br> License requirements : None */
        public: void SetUpdateFailureAction
        (
            NXOpen::NXObject * object /** The object that fails to update */,
            NXOpen::Update::FailureOption failureAction /** The update failure action */
        );
        /** Remove update failure action.  <br> License requirements : None */
        public: void RemoveUpdateFailureAction
        (
            NXOpen::NXObject * object /** The object that fails to update */
        );
        /**Returns  the state of the assembly constraints delay flag. If true, then all the assembly constraints
                in the session will be delayed from update. If false, then updates will be applied across all
                parts in the session.
             <br> License requirements : None */
        public: bool AssemblyConstraintsDelay
        (
        );
        /**Sets  the state of the assembly constraints delay flag. If true, then all the assembly constraints
                in the session will be delayed from update. If false, then updates will be applied across all
                parts in the session.
             <br> License requirements : None */
        public: void SetAssemblyConstraintsDelay
        (
            bool delayed /** The new state of the assembly constraints delay flag. */
        );
        /** Performs an assembly constraints update. This ensures that the specified part containing out-of-date assembly
                constraints is updated.
             <br> License requirements : None */
        public: void DoAssemblyConstraintsUpdateInPart
        (
            NXOpen::Part * partTag /** parttag */ ,
            NXOpen::Session::UndoMarkId undoMarkId /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        /** Performs an assembly constraints update. This ensures that all parts containing out-of-date assembly
                constraints in this session are updated.
             <br> License requirements : None */
        public: void DoAssemblyConstraintsUpdate
        (
            NXOpen::Session::UndoMarkId undoMarkId /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        /** Set an update mark. This ensures that only entities added into update list since the mark setting are updated 
                 when the next update is performed before the mark is cleared.To perform update,use @link Update::DoUpdate Update::DoUpdate@endlink .
                 To clear the mark, use @link Update::EndLocalUpdate Update::EndLocalUpdate@endlink .
                  <br> 
                 Note: [1] Any entities updated while the mark was in place will not be updated during the next update even if 
                           they depend on entities on the newly restored list.
                       [2] Local update may not be nested.i.e.if a local update process is started and not yet ended, you cannot start another one.
                  <br>        
            <br> License requirements : None */
        public: void StartLocalUpdate
        (
        );
        /** Clear the update mark.See@link Update::StartLocalUpdate Update::StartLocalUpdate@endlink .  <br> License requirements : None */
        public: void EndLocalUpdate
        (
        );
        /** Undelay an Object <br> License requirements : None */
        public: void UndelayObjectUpdate
        (
            NXOpen::NXObject * object /** The object to be undelayed*/
        );
        /**Log Object for Update  <br> License requirements : None */
        public: void LogForUpdate
        (
            NXOpen::NXObject * object /** The object to be updated */
        );
    }; //lint !e1712 default constructor not defined for class  

}
#undef EXPORTLIBRARY
#endif
