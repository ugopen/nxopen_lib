#ifndef NXOpen_CAE_DURABILITYEVENTSTRENGTHSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYEVENTSTRENGTHSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityEventStrengthSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurabilityEventStrengthSettingsBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class DurabilityEventStrengthSettingsBuilder;
    }
    namespace CAE
    {
        class _DurabilityEventStrengthSettingsBuilderBuilder;
        class DurabilityEventStrengthSettingsBuilderImpl;
        /** Represents a builder class for the event strength settings.
                The event strength settings are the data which describe how to evaluate
                the strength and what to output for strength results.
            */
        class NXOPENCPPEXPORT  DurabilityEventStrengthSettingsBuilder : public TaggedObject
        {
            /** the stress criterion enum.*/
            public: enum StressCriterionEnum
            {
                StressCriterionEnumUltimateStress/** Ultimate Stress */,
                StressCriterionEnumYieldStress/** Yield Stress */
            };

            /** the stress type enum.*/
            public: enum StressTypeEnum
            {
                StressTypeEnumVonMises/** Von Mises*/,
                StressTypeEnumTresca/** Tresca */,
                StressTypeEnumMaximumPrincipal/** Maximum Principal*/,
                StressTypeEnumMinimumPrincipal/** Minimum Principal*/
            };

            private: DurabilityEventStrengthSettingsBuilderImpl * m_durabilityeventstrengthsettingsbuilder_impl;
            private: friend class  _DurabilityEventStrengthSettingsBuilderBuilder;
            protected: DurabilityEventStrengthSettingsBuilder();
            public: ~DurabilityEventStrengthSettingsBuilder();
            /**Returns  the stress criterion.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityEventStrengthSettingsBuilder::StressCriterionEnum StressCriterion
            (
            );
            /**Sets  the stress criterion.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetStressCriterion
            (
                NXOpen::CAE::DurabilityEventStrengthSettingsBuilder::StressCriterionEnum stressCriterion /** stresscriterion */ 
            );
            /**Returns  the stress type.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityEventStrengthSettingsBuilder::StressTypeEnum StressType
            (
            );
            /**Sets  the stress type.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetStressType
            (
                NXOpen::CAE::DurabilityEventStrengthSettingsBuilder::StressTypeEnum stressType /** stresstype */ 
            );
            /**Returns  the strength safety factor.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool StrengthSafetyFactor
            (
            );
            /**Sets  the strength safety factor.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetStrengthSafetyFactor
            (
                bool strengthSafetyFactor /** strengthsafetyfactor */ 
            );
            /**Returns  the margin of safety.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MarginOfSafety
            (
            );
            /**Sets  the margin of safety.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMarginOfSafety
            (
                bool marginOfSafety /** marginofsafety */ 
            );
            /**Returns  the factor of safety.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double FactorOfSafety
            (
            );
            /**Sets  the factor of safety.  <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetFactorOfSafety
            (
                double factorOfSafety /** factorofsafety */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
