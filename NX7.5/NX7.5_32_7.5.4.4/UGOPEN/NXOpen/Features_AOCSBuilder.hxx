#ifndef NXOpen_FEATURES_AOCSBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_AOCSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AOCSBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitJoin.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class AOCSBuilder;
    }
    class Direction;
    class Expression;
    class ExpressionSectionSetList;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitJoin;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class NXObject;
    class ObjectList;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _AOCSBuilderBuilder;
        class AOCSBuilderImpl;
        /** Represents a Offset In Face(aka Associative offset curve on face)feature builder.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateAocsBuilder Features::FeatureCollection::CreateAocsBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.FitOption </td> <td> 
         
        Cubic </td> </tr> 

        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitJoinData.CurveFitOptions.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Law.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        Law.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        Law.Parameter </td> <td> 
         
        t </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  AOCSBuilder : public Features::FeatureBuilder
        {
            /** AOCS builder offset type enum. */
            public: enum OffsetType
            {
                OffsetTypeChordal/** offset_type_chordal */,
                OffsetTypeArclength/** offset_type_arclength */,
                OffsetTypeGeodesic/** offset_type_geodesic */,
                OffsetTypeTangential/** offset_type_tangential */,
                OffsetTypeProjectdistance/** offset_type_projectdistance */
            };

            /** AOCS builder trim and extend type enum. 
             @deprecated Deprecated in NX5.0.0 <br> 
            */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") enum TrimExtend
            {
                TrimExtendNone/** no extension */,
                TrimExtendTangent/** tangent extension */
            };

            /** AOCS builder trim to each other within section type enum. */
            public: enum Trim
            {
                TrimNone/** no trimming */,
                TrimWithinSection/** allow trimming */
            };

            /** AOCS builder extend to each other within section type enum. */
            public: enum Extend
            {
                ExtendNone/** no extension */,
                ExtendWithinSection/** allow extension */
            };

            /** AOCS builder extend to face edges type enum. */
            public: enum ExtendToFace
            {
                ExtendToFaceNone/** no extentsion */,
                ExtendToFaceBoundary/** extend till face boundary */
            };

            /** AOCS builder offset distance type enum. */
            public: enum OffsetDistanceType
            {
                OffsetDistanceTypeConstant/** constant offset*/,
                OffsetDistanceTypeVariable/** variable offset */
            };

            /** AOCS builder offset direction type enum. */
            public: enum OffsetDirection
            {
                OffsetDirectionNormalToCurve/** traditional curve normal*/,
                OffsetDirectionNormalToVector/** offset pependicular to vector */
            };

            /** AOCS builder   fillet options type enum. */
            public: enum FilletOptions
            {
                FilletOptionsNoFillet/** No fillet*/,
                FilletOptionsVector/**  Vector given*/,
                FilletOptionsBestFit/** Best fitting*/,
                FilletOptionsProjectedVector/** Use Project Vector to fillet*/
            };

            private: AOCSBuilderImpl * m_aocsbuilder_impl;
            private: friend class  _AOCSBuilderBuilder;
            protected: AOCSBuilder();
            public: ~AOCSBuilder();
            /**Returns  the face collector.  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceCollector
            (
            );
            /**Sets  the face collector.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceCollector
            (
                NXOpen::ScCollector * collector /** collector */ 
            );
            /**Returns  the list of offsets. This is deprecated. Please use
                        @link Features::AOCSBuilder::Offsets Features::AOCSBuilder::Offsets@endlink  instead. Note that it is no
                        longer necessary to set this list, as a new list is automatically created when
                        a new instance of this class is instantiated.
                    
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") NXOpen::ObjectList * OffsetStringsList
            (
            );
            /**Sets  the list of offsets. This is deprecated. Please use
                        @link Features::AOCSBuilder::Offsets Features::AOCSBuilder::Offsets@endlink  instead. Note that it is no
                        longer necessary to set this list, as a new list is automatically created when
                        a new instance of this class is instantiated.
                    
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void SetOffsetStringsList
            (
                NXOpen::ObjectList * seldimlist /** seldimlist */ 
            );
            /**Returns  the list of offsets.  <br> License requirements : None */
            public: NXOpen::ExpressionSectionSetList * Offsets
            (
            );
            /**Returns  the offset mode for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::OffsetType OffsetMode
            (
            );
            /**Sets  the offset mode for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetMode
            (
                NXOpen::Features::AOCSBuilder::OffsetType offsetMode /** offset mode */ 
            );
            /**Returns  the extend method option for the AOCS operation.
                         This is deprecated. Please use
                        @link Features::AOCSBuilder::TrimMethod Features::AOCSBuilder::TrimMethod@endlink  and
                        @link Features::AOCSBuilder::ExtendMethod Features::AOCSBuilder::ExtendMethod@endlink instead.
                    
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") NXOpen::Features::AOCSBuilder::TrimExtend TrimExtendMethod
            (
            );
            /**Sets  the extend method option for the AOCS operation.
                         This is deprecated. Please use
                        @link Features::AOCSBuilder::TrimMethod Features::AOCSBuilder::TrimMethod@endlink  and
                        @link Features::AOCSBuilder::ExtendMethod Features::AOCSBuilder::ExtendMethod@endlink instead.
                    
             @deprecated Deprecated in NX5.0.0 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX5.0.0") void SetTrimExtendMethod
            (
                NXOpen::Features::AOCSBuilder::TrimExtend extendMethod /** extend method */ 
            );
            /**Returns  the trim method option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::Trim TrimMethod
            (
            );
            /**Sets  the trim method option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimMethod
            (
                NXOpen::Features::AOCSBuilder::Trim trimMethod /** trim method */ 
            );
            /**Returns  the extend method option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::Extend ExtendMethod
            (
            );
            /**Sets  the extend method option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendMethod
            (
                NXOpen::Features::AOCSBuilder::Extend extendMethod /** extend method */ 
            );
            /**Returns  the cross boundary option for the AOCS operation.  <br> License requirements : None */
            public: bool TrimToFaceEdgesOption
            (
            );
            /**Sets  the cross boundary option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimToFaceEdgesOption
            (
                bool trimToFaceEdges /** trim to face edges */ 
            );
            /**Returns  the span option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::ExtendToFace ExtendToFaceOption
            (
            );
            /**Sets  the span option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendToFaceOption
            (
                NXOpen::Features::AOCSBuilder::ExtendToFace extendToFaceOption /** extend to face option */ 
            );
            /**Returns  the distance tolerance for the AOCS operation.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /**Returns  the angular tolerance for the AOCS operation.  <br> License requirements : None */
            public: double AngularTolerance
            (
            );
            /**Sets  the angular tolerance for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularTolerance
            (
                double angularTolerance /** angular tolerance */ 
            );
            /**Returns  the associative output option for the AOCS operation.  <br> License requirements : None */
            public: bool AssociativeOutputOption
            (
            );
            /**Sets  the associative output option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativeOutputOption
            (
                bool associative /** associative */ 
            );
            /** Reverse the direction of all offsets of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipAllOffsetsOfSection
            (
                NXOpen::Section * section /** input section */
            );
            /** Reverse the offset direction.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipOffset
            (
                NXOpen::NXObject * seldimitem /** input list item */
            );
            /**Sets  the offset distance type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetDistType
            (
                NXOpen::Features::AOCSBuilder::OffsetDistanceType type /** type */ 
            );
            /**Returns  the offset distance type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder::OffsetDistanceType OffsetDistType
            (
            );
            /**Sets  the law string <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawString
            (
                NXOpen::Section * lawString /** law string */ 
            );
            /**Returns  the law string <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * LawString
            (
            );
            /**Sets  the law string flip flag  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLawStringFlip
            (
                bool flip /** flip */ 
            );
            /**Returns  the law string flip flag  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool LawStringFlip
            (
            );
            /**Returns  the  law. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::LawBuilder * Law
            (
            );
            /**Sets  the offset direction vector <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetDirectionOption
            (
                NXOpen::Features::AOCSBuilder::OffsetDirection direction /** direction */ 
            );
            /**Returns  the offset direction vector <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder::OffsetDirection OffsetDirectionOption
            (
            );
            /**Sets  the offset diection vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirectionVector
            (
                NXOpen::Direction * offsetDirection /** offset direction */ 
            );
            /**Returns  the offset diection vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * DirectionVector
            (
            );
            /**Sets  the fillet option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFilletOption
            (
                NXOpen::Features::AOCSBuilder::FilletOptions options /** options */ 
            );
            /**Returns  the fillet option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder::FilletOptions FilletOption
            (
            );
            /**Sets  the fillet vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFilletDirectionVector
            (
                NXOpen::Direction * tipDirection /** tip direction */ 
            );
            /**Returns  the fillet vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * FilletDirectionVector
            (
            );
            /**Sets  the project plane vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectPlaneNormal
            (
                NXOpen::Direction * projectPlaneNormal /** project plane normal */ 
            );
            /**Returns  the project plane vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * ProjectPlaneNormal
            (
            );
            /**Sets  the fillet radius  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFilletRadius
            (
                NXOpen::Expression * radius /** radius */ 
            );
            /**Returns  the fillet radius  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * FilletRadius
            (
            );
            /** Update the post-process status flag. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdatePostStatusFlag
            (
                bool postStatusChanged /** whether the post status changed*/
            );
            /** Update result curve status.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateCurvesStatus
            (
                bool updateLawParm /** whether to update law parm */
            );
            /**Returns  the remove self intersections flag .  <br> License requirements : None */
            public: bool RemoveSelfIntersections
            (
            );
            /**Sets  the remove self intersections flag .  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRemoveSelfIntersections
            (
                bool removeSelfIntersections /** remove self intersections */ 
            );
            /**Returns  the curve fit join method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::CurveFitJoin * CurveFitJoinData
            (
            );
            /** Clone section.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * CloneSection
            (
                bool constToVariable /** whether the type change is from constant to variable */,
                NXOpen::Section * sectionFrom /**  section to be cloned*/
            );
            /** Synchronize the second section data  consistent  to the first one  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SynchronizeSections
            (
                bool constToVariable /** whether the type change is from constant to variable */,
                NXOpen::Section * firstSection /**  section  as input*/,
                NXOpen::Section * secondSection /** section to be st=ynchronized*/
            );
            /** Update face.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateFaces
            (
            );
            /** Update section data for offset @return  flag indicating if offset direction flipped <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool UpdateSectionData
            (
                NXOpen::Section * section /**  section  as input*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
