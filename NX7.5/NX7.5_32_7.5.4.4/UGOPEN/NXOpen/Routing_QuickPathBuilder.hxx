#ifndef NXOpen_ROUTING_QUICKPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_QUICKPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_QuickPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Routing_QuickPathBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class QuickPathBuilder;
    }
    class Builder;
    class ErrorList;
    class Expression;
    class Point;
    class PointList;
    namespace Routing
    {
        class LinearPathSettings;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class _QuickPathBuilderBuilder;
        class QuickPathBuilderImpl;
        /** 
                Builder for creating a collision free path between points.
                This builder takes a list of points and a stock and builds a 
                collision-free path through those points.  The built path is created
                as linear segments with bend corners (or elbows) depending on
                the settings chosen by the user (@link Routing::LinearPathSettings Routing::LinearPathSettings@endlink )).

                After invoking the commit method, invoke the 
                @link Routing::QuickPathBuilder::PathErrors Routing::QuickPathBuilder::PathErrors@endlink  method to find
                out which sections between points contained errors.  
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateQuickPathBuilder Routing::RouteManager::CreateQuickPathBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Clearance.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MaximumNumberOfBends </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        MinimumStraightLength.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        PathSettings.LockToSelectedObject </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT  QuickPathBuilder : public Builder
        {
            private: QuickPathBuilderImpl * m_quickpathbuilder_impl;
            private: friend class  _QuickPathBuilderBuilder;
            protected: QuickPathBuilder();
            public: ~QuickPathBuilder();
            /**Returns  the list of goal path points.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::PointList * PointList
            (
            );
            /**Returns  the stock settings for this path.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder * StockSettings
            (
            );
            /**Sets  the stock settings for this path.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockSettings
            (
                NXOpen::Routing::PathStockBuilder * stockBuilder /** stock builder */ 
            );
            /**Returns  the linear path settings for this path.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::LinearPathSettings * PathSettings
            (
            );
            /**Sets  the linear path settings for this path.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPathSettings
            (
                NXOpen::Routing::LinearPathSettings * pathSettings /** path settings */ 
            );
            /**Returns  the errors associated with this path. The list will be NULL if the
                        commit method has not been invoked yet. 
                        <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::ErrorList * PathErrors
            (
            );
            /**Returns  the minimum straight length value.  This value specifies the desired
                        minimum value between bend corner points.  This is a soft constraint
                        so it is possible that the returned path will have sections that violate
                        the minimum straight length.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * MinimumStraightLength
            (
            );
            /**Returns  the obstacle clearance value.  This value specifies the desired
                        minimum distance between the path and obstacles in the assembly.  This
                        is a soft constraint so it is possible that the returned path will have 
                        sections that violate the clearance value.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * Clearance
            (
            );
            /**Returns  the maximum number of bends in a path.  This value specifies the desired
                        maximum number of bends.  This is a soft constraint so it is possible 
                        that the returned path may have more than this number of bends.  The number
                        must be \>= 0.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int MaximumNumberOfBends
            (
            );
            /**Sets  the maximum number of bends in a path.  This value specifies the desired
                        maximum number of bends.  This is a soft constraint so it is possible 
                        that the returned path may have more than this number of bends.  The number
                        must be \>= 0.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetMaximumNumberOfBends
            (
                int maximumNumberOfBends /** maximum number of bends */ 
            );
            /**Returns  the seed number to use for the random number generator.  Quick Path uses
                         the random number generator for finding random sample points in space.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int Seed
            (
            );
            /**Sets  the seed number to use for the random number generator.  Quick Path uses
                         the random number generator for finding random sample points in space.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSeed
            (
                int seed /** seed */ 
            );
            /** Assigns a direction as well as a forward and backward distance to
                        the given point.  Quick Path will treat this as a collision-free
                        reserved space and will ensure there is a segment going through
                        the point along the given direction.  The forward and backward
                        values define the minimimum starting and ending locations, the
                        path will include those locations but may extend past those 
                        locations.
                         <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AssignExtension
            (
                NXOpen::Point * point /** point */ ,
                const NXOpen::Vector3d & direction /** direction */ ,
                double backValue /** back value */ ,
                double fwdValue /** fwd value */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
