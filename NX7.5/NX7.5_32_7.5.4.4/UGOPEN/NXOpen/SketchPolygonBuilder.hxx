#ifndef NXOpen_SKETCHPOLYGONBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHPOLYGONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchPolygonBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SketchPolygonBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SketchPolygonBuilder;
    class Builder;
    class Expression;
    class Point;
    class _SketchPolygonBuilderBuilder;
    class SketchPolygonBuilderImpl;
    /** Represents a @link SketchPolygon SketchPolygon@endlink  builder  <br> To create a new instance of this class, use @link SketchCollection::CreateSketchPolygonBuilder SketchCollection::CreateSketchPolygonBuilder@endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    LengthDimension.Value </td> <td> 
     
    100 (millimeters part), 3.937 (inches part) </td> </tr> 

    <tr><td> 
     
    NumberOfSides </td> <td> 
     
    6 </td> </tr> 

    <tr><td> 
     
    RadiusDimension.Value </td> <td> 
     
    100 (millimeters part), 3.937 (inches part) </td> </tr> 

    <tr><td> 
     
    RotationDimension.Value </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    Size </td> <td> 
     
    InscribedRadius </td> </tr> 

    </table>  
    */
    class NXOPENCPPEXPORT  SketchPolygonBuilder : public Builder
    {
        /** Polygon type */
        public: enum SizeType
        {
            SizeTypeInscribedRadius/** inscribed radius */,
            SizeTypeCircumscribedRadius/** circumscribed radius */,
            SizeTypeSideLength/** side length */
        };

        private: SketchPolygonBuilderImpl * m_sketchpolygonbuilder_impl;
        private: friend class  _SketchPolygonBuilderBuilder;
        protected: SketchPolygonBuilder();
        public: ~SketchPolygonBuilder();
        /**Returns  the center point  <br> License requirements : None */
        public: NXOpen::Point * CenterPoint
        (
        );
        /**Sets  the center point  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetCenterPoint
        (
            NXOpen::Point * centerPoint /** centerpoint */ 
        );
        /**Returns  the number of sides  <br> License requirements : None */
        public: int NumberOfSides
        (
        );
        /**Sets  the number of sides  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetNumberOfSides
        (
            int numberOfSides /** numberofsides */ 
        );
        /**Returns  the size point  <br> License requirements : None */
        public: NXOpen::Point * SizePoint
        (
        );
        /**Sets  the size point  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetSizePoint
        (
            NXOpen::Point * sizePoint /** sizepoint */ 
        );
        /**Returns  the size type  <br> License requirements : None */
        public: NXOpen::SketchPolygonBuilder::SizeType Size
        (
        );
        /**Sets  the size type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetSize
        (
            NXOpen::SketchPolygonBuilder::SizeType size /** size */ 
        );
        /**Returns  the radius dimension.   This value is only used if @link SketchPolygonBuilder::Size SketchPolygonBuilder::Size@endlink  is set to @link SketchPolygonBuilder::SizeTypeInscribedRadius SketchPolygonBuilder::SizeTypeInscribedRadius@endlink  or @link SketchPolygonBuilder::SizeTypeCircumscribedRadius SketchPolygonBuilder::SizeTypeCircumscribedRadius@endlink  <br> License requirements : None */
        public: NXOpen::Expression * RadiusDimension
        (
        );
        /**Returns  the length dimension.  This value is only used if @link SketchPolygonBuilder::Size SketchPolygonBuilder::Size@endlink  is set to @link SketchPolygonBuilder::SizeTypeSideLength SketchPolygonBuilder::SizeTypeSideLength@endlink  <br> License requirements : None */
        public: NXOpen::Expression * LengthDimension
        (
        );
        /**Returns  the angular dimension  <br> License requirements : None */
        public: NXOpen::Expression * RotationDimension
        (
        );
        /** The flag to indicate if we need to create length dimension  <br> License requirements : None */
        public: void CreateLengthDimension
        (
            bool createDim /** true, to create the length dimension */
        );
        /** The flag to indicate if we need to create radius dimension  <br> License requirements : None */
        public: void CreateRadiusDimension
        (
            bool createDim /** true, to create the radius dimension */
        );
        /** The flag to indicate if we need to create angle dimension  <br> License requirements : None */
        public: void CreateAngleDimension
        (
            bool createDim /** true, to create the angle dimension */
        );
    };
}
#undef EXPORTLIBRARY
#endif
