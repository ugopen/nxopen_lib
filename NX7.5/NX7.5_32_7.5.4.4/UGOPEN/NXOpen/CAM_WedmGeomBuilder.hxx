#ifndef NXOpen_CAM_WEDMGEOMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_WEDMGEOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_WedmGeomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NCGroupBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class WedmGeomBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class LayoutCiBuilder;
    }
    namespace CAM
    {
        class NCGroupBuilder;
    }
    namespace CAM
    {
        class NcmWedmBuilder;
    }
    namespace CAM
    {
        class WedmArcOutputTypeCiBuilder;
    }
    namespace CAM
    {
        class WedmCutParameters;
    }
    namespace CAM
    {
        class WedmStatusControlCiBuilder;
    }
    namespace CAM
    {
        class _WedmGeomBuilderBuilder;
        class WedmGeomBuilderImpl;
        /** Represents a WedmGeom Builder  <br> To create a new instance of this class, use @link CAM::NCGroupCollection::CreateWedmGeomBuilder CAM::NCGroupCollection::CreateWedmGeomBuilder@endlink  <br> */
        class NXOPENCPPEXPORT  WedmGeomBuilder : public CAM::NCGroupBuilder
        {
            /** the types available for wedm backburn passes */
            public: enum BackburnPassesTypes
            {
                BackburnPassesTypesSingle/** single backburn pass */,
                BackburnPassesTypesMultipleRegionFirst/** multiple backburn passes - region first */,
                BackburnPassesTypesMultipleCutoffFirst/** multiple backburn passes - cutoff first */
            };

            /** the types available for wedm stop point */
            public: enum StopPointFlagTypes
            {
                StopPointFlagTypesNone/** stop point option none */,
                StopPointFlagTypesSpecify/** stop point option specify */
            };

            /** the types available for wedm stop point */
            public: enum StopPointTypes
            {
                StopPointTypesOpstop/** stop point option opstop */,
                StopPointTypesStop/** stop point option stop */
            };

            /** the types available for smooth_lead_in */
            public: enum SmoothLeadInTypes
            {
                SmoothLeadInTypesNone/** smooth leadin type none */,
                SmoothLeadInTypesSpecify/** smooth leadin type specify */
            };

            /** the types available for smooth_lead_out_types */
            public: enum SmoothLeadOutTypes
            {
                SmoothLeadOutTypesNone/** smooth leadin type none */,
                SmoothLeadOutTypesSpecify/** smooth leadin type specify */
            };

            /** the types available for convex corner control */
            public: enum ConvexCornerTypes
            {
                ConvexCornerTypesRollAround/** roll around */,
                ConvexCornerTypesLoops/** loop */,
                ConvexCornerTypesExtendAndTrim/** extend tangents */
            };

            /** the types available for corner smoothing */
            public: enum CornerSmoothingType
            {
                CornerSmoothingTypeNone/** none */,
                CornerSmoothingTypeAllPasses/** all passes */
            };

            private: WedmGeomBuilderImpl * m_wedmgeombuilder_impl;
            private: friend class  _WedmGeomBuilderBuilder;
            protected: WedmGeomBuilder();
            public: ~WedmGeomBuilder();
            /**Returns  the Backburn Passes  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::BackburnPassesTypes BackburnPasses
            (
            );
            /**Sets  the Backburn Passes  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBackburnPasses
            (
                NXOpen::CAM::WedmGeomBuilder::BackburnPassesTypes backburnPasses /** the Backburn Passes  */
            );
            /**Returns  the Stop Point Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::StopPointFlagTypes StopPointFlag
            (
            );
            /**Sets  the Stop Point Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopPointFlag
            (
                NXOpen::CAM::WedmGeomBuilder::StopPointFlagTypes stopPointFlag /** the Stop Point Flag  */
            );
            /**Returns  the Stop Point Type  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::StopPointTypes StopPointType
            (
            );
            /**Sets  the Stop Point Type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopPointType
            (
                NXOpen::CAM::WedmGeomBuilder::StopPointTypes stopPointType /** the Stop Point Type  */
            );
            /**Returns  the Smooth Leadin Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::SmoothLeadInTypes SmoothLeadInOption
            (
            );
            /**Sets  the Smooth Leadin Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothLeadInOption
            (
                NXOpen::CAM::WedmGeomBuilder::SmoothLeadInTypes leadInFlag /** the Smooth Leadin Flag  */
            );
            /**Returns  the Smooth Leadout Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::SmoothLeadOutTypes SmoothLeadOutOption
            (
            );
            /**Sets  the Smooth Leadout Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothLeadOutOption
            (
                NXOpen::CAM::WedmGeomBuilder::SmoothLeadOutTypes leadOutOption /** the Smooth Leadout Flag  */
            );
            /**Returns  the Tab Points  <br> License requirements : cam_base ("CAM BASE") */
            public: int NumTabs
            (
            );
            /**Sets  the Tab Points  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumTabs
            (
                int numTabs /** the Num Tabs  */
            );
            /**Returns  the Tab Points Region Method  <br> License requirements : cam_base ("CAM BASE") */
            public: int RegionMethod
            (
            );
            /**Sets  the Tab Points Region Method  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionMethod
            (
                int regionMethod /** the Tab Points Region Method  */
            );
            /**Returns  the Save Layer/Layout builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LayoutCiBuilder * LayoutCiBuilder
            (
            );
            /**Returns  the Cutoff Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: int CutoffFlag
            (
            );
            /**Sets  the Cutoff Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutoffFlag
            (
                int cutoffFlag /** the Cutoff Flag  */
            );
            /**Returns  the Rough and Backburn Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: int BackburnFlag
            (
            );
            /**Sets  the Rough and Backburn Flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBackburnFlag
            (
                int backburnFlag /** the Backburn Flag  */
            );
            /**Returns  the convex_corner  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::ConvexCornerTypes ConvexCorner
            (
            );
            /**Sets  the convex_corner  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetConvexCorner
            (
                NXOpen::CAM::WedmGeomBuilder::ConvexCornerTypes convexCorner /** the cutcom_reg  */
            );
            /**Returns  the smoothing  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmGeomBuilder::CornerSmoothingType Smoothing
            (
            );
            /**Sets  the smoothing  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSmoothing
            (
                NXOpen::CAM::WedmGeomBuilder::CornerSmoothingType smoothing /** the smoothing  */
            );
            /**Returns  the loop radius  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * LoopRadius
            (
            );
            /**Returns  the minimum loop angle  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinimumLoopAngle
            (
            );
            /**Returns  the maximum loop angle  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaximumLoopAngle
            (
            );
            /**Returns  the rough_passes builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * RoughPassesBuilder
            (
            );
            /**Returns  the finish_passes builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * FinishPassesBuilder
            (
            );
            /**Returns  the stop_point_distance builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * StopPointDistanceBuilder
            (
            );
            /**Returns  the smooth_lead_out_distance builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * SmoothLeadOutDistanceBuilder
            (
            );
            /**Returns  the cutoff_stock builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * CutoffStockBuilder
            (
            );
            /**Returns  the cutoff_distance builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * CutoffDistanceBuilder
            (
            );
            /**Returns  the cutoff_flag builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * CutoffFlagBuilder
            (
            );
            /**Returns  the backburn_distance builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * BackburnDistanceBuilder
            (
            );
            /**Returns  the nocore_stock builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * NocoreStockBuilder
            (
            );
            /**Returns  the corner_radius builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * CornerRadiusBuilder
            (
            );
            /**Returns  the corner_minimum_angle builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * CornerMinimumAngleBuilder
            (
            );
            /**Returns  the corner_maximum_angle builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * CornerMaximumAngleBuilder
            (
            );
            /**Returns  the lead_in_radius_builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * LeadInRadiusBuilder
            (
            );
            /**Returns  the lead_in_circle_angle_builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * LeadInCircleAngleBuilder
            (
            );
            /**Returns  the lead_out_radius_builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * LeadOutRadiusBuilder
            (
            );
            /**Returns  the lead_out_circle_angle_builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * LeadOutCircleAngleBuilder
            (
            );
            /**Returns  the cut parameter object  <br> License requirements : None */
            public: NXOpen::CAM::WedmCutParameters * CutParameters
            (
            );
            /**Returns  the non-cutting builder <br> License requirements : None */
            public: NXOpen::CAM::NcmWedmBuilder * NcmWedmBuilder
            (
            );
            /**Returns  the wedm arc output type Builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmArcOutputTypeCiBuilder * WedmArcOutputTypeCiBuilder
            (
            );
            /**Returns  the wedm status control ci Builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmStatusControlCiBuilder * WedmStatusControlCiBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
