//=============================================================================
//
//                   Copyright (c) 2006 UGS PLM Solutions
//                    Unpublished - All rights reserved
//===============================================================================
//File description: Sample NX/Open Application for UIStyler
//===============================================================================
//

//'==============================================================================
//'Following example demonstrates the Selection capability within UIStyler
//'==============================================================================
//==============================================================================
//   WARNING!!  This file is overwritten by the UIStyler each time the Styler
//   file is saved.
//
//       Filename:  UIStylerSelectionExample.java
//
//        This file was generated by the NX User Interface Styler
//        Created by: mishraa
//        Version: NX 5
//              Date: 12-13-2006
//              Time: 18:35
//
//   This template file is overwritten each time the UIStyler dialog is
//   saved.  Any modifications to this file will be lost.
//==============================================================================


//==============================================================================
//  Purpose:  This TEMPLATE file contains JAVA source to guide you in the
//  construction of your NX Open application dialog. The generation of your
//  dialog file (.dlg extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlg).


//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your UIStyler dialog in NX
//      using APIs provided in nxopen.uistyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================


//------------------------------------------------------------------------------
// These imports are needed for the following template code
//------------------------------------------------------------------------------

import java.rmi.RemoteException;
import java.util.Enumeration;
import java.util.Hashtable;
import nxopen.*;
import nxopen.Selection.MaskTriple;
import nxopen.uf.UFConstants;
import nxopen.uistyler.*;


//------------------------------------------------------------------------------
// Represents UI Styler application class
//------------------------------------------------------------------------------
public class UIStylerSelectionExample implements DialogItem.Apply, DialogItem.Construct, DialogItem.Okay, RealItem.Activate, StringItem.Activate, Toggle.ValueChanged,Selection.FilterCallback,Selection.SelectionCallback
{
    /* (non-Javadoc)
     * @see nxopen.Selection.FilterCallback#filterCallback(nxopen.NXObject, nxopen.Selection.MaskTriple, nxopen.SelectionHandle)
     */
    /* (non-Javadoc)
     * @see nxopen.Selection.SelectionCallback#selectionCallback(nxopen.NXObject[], nxopen.NXObject[], nxopen.SelectionHandle)
     */
    //'Following is Hash table which collectes all selected edges of the block
    Hashtable htEdges=new Hashtable();
    //'Following is Selection Callback - This function gets invoked whenever all the selected edges are stored in Hash table.

    public int selectionCallback(NXObject[] selectedObjects, NXObject[] deSelectedObjects, SelectionHandle selectH) throws NXException, RemoteException
    {
        try{
            
            if(selectedObjects!=null)
            {
                for(int i=0;i<selectedObjects.length;i++)
                {
                    htEdges.put(selectedObjects[i].journalIdentifier(),selectedObjects[i]);
                }
        
            }
            
            if(deSelectedObjects!=null)
            {
                for(int j=0;j<deSelectedObjects.length;j++)
                {
                    htEdges.remove(deSelectedObjects[j].journalIdentifier());
                }
        
            }
        
            CHANGELABEL1.setLabel("Select Edges ("+htEdges.size()+")");
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        
        return 0;
    }

    // Following is Filter Callback - This function gets invoked during selection. 
    // Here, we can put a logic to accept or reject the selected entities. In this example "Edge * 6 *1" is rejected.

    public int filterCallback(NXObject selectedObject, MaskTriple selectionMask, SelectionHandle arg2) throws NXException, RemoteException
    {
        if(selectedObject.journalIdentifier().compareTo("EDGE * 6 * 1")==0)
        {
            return UFConstants.UF_UI_SEL_REJECT;
        }
        else
        {
            return UFConstants.UF_UI_SEL_ACCEPT;
        }
    }

    // class members
    public static Session theSession = null;
    public static UI theUI = null;
    static UIStylerSelectionExample theUIStylerSelectionExample;
    nxopen.uistyler.Dialog theDialog;
    nxopen.uistyler.DialogItem CHANGEDialog;
    nxopen.uistyler.GroupBox CHANGEGRBEG1;
    nxopen.uistyler.BitMap CHANGEBITMAP1;
    nxopen.uistyler.LabelItem CHANGELABEL1;
    nxopen.uistyler.StringItem CHANGESTR0;
    nxopen.uistyler.CollapsibleGroup CHANGECGBEG5;
    nxopen.uistyler.Toggle CHANGETOGGLE6;
    nxopen.uistyler.RealItem CHANGEREAL6;
    static int isDisposeCalled;

//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
    public UIStylerSelectionExample() throws NXException, RemoteException
    {
        try
        {
            theSession = (Session)SessionFactory.get("Session");
            theUI = (UI)SessionFactory.get("UI");
            theDialog = theUI.styler().createStylerDialog("UIStylerSelectionJavaExample.dlg");
            initializeUIStylerDialog();
            isDisposeCalled = 0;
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

//------------------------------------------------------------------------------
// This method is required for UI styler dialog creation
//------------------------------------------------------------------------------
    private void initializeUIStylerDialog() throws NXException, RemoteException
    {
        try
        {
            //------------------------------------------------------------------------------
            // The following code snippets initializes all the styler items and associate
            // respective callbacks. Attributes of the styler item can be accessed and
            // modified only after calling Show() or RegisterWithUiMenu().
            //------------------------------------------------------------------------------
            CHANGEDialog = (nxopen.uistyler.DialogItem)theDialog.getStylerItem("UF_STYLER_DIALOG_INDEX", nxopen.uistyler.Dialog.ItemType.DIALOG_ITEM);
            // Register the callback: constructor_cb
            CHANGEDialog.addConstructHandler(this, false);
            // Register the callback: ok_cb
            CHANGEDialog.addOkayHandler(this, false);
            // Register the callback: apply_cb
            CHANGEDialog.addApplyHandler(this, false);
            CHANGEGRBEG1 = (nxopen.uistyler.GroupBox)theDialog.getStylerItem("GR_BEG_1", nxopen.uistyler.Dialog.ItemType.GROUP_BOX);
            CHANGEBITMAP1 = (nxopen.uistyler.BitMap)theDialog.getStylerItem("BITMAP_1", nxopen.uistyler.Dialog.ItemType.BITMAP);
            CHANGELABEL1 = (nxopen.uistyler.LabelItem)theDialog.getStylerItem("LABEL_1", nxopen.uistyler.Dialog.ItemType.LABEL_ITEM);
            CHANGESTR0 = (nxopen.uistyler.StringItem)theDialog.getStylerItem("STR_0", nxopen.uistyler.Dialog.ItemType.STRING_ITEM);
            // Register the callback: bend_radius_cb
            CHANGESTR0.addActivateHandler(this, false);
            CHANGECGBEG5 = (nxopen.uistyler.CollapsibleGroup)theDialog.getStylerItem("CG_BEG_5", nxopen.uistyler.Dialog.ItemType.COLLAPSIBLE_GROUP);
            CHANGETOGGLE6 = (nxopen.uistyler.Toggle)theDialog.getStylerItem("TOGGLE_6", nxopen.uistyler.Dialog.ItemType.TOGGLE);
            // Register the callback: remove_surface_self_intersections_cb
            CHANGETOGGLE6.addValueChangedHandler(this, false);
            CHANGEREAL6 = (nxopen.uistyler.RealItem)theDialog.getStylerItem("REAL_6", nxopen.uistyler.Dialog.ItemType.REAL_ITEM);
            // Register the callback: tolerance_cb
            CHANGEREAL6.addActivateHandler(this, false);
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }

    //------------------------------------------------------------------------------
    // This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public DialogResponse show() throws NXException, RemoteException
    {
        DialogResponse response = DialogResponse.OK;
        try
        {
            response = theDialog.show();
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return response;
    }

    //------------------------------------------------------------------------------
    // Following method disposes all the class members
    //------------------------------------------------------------------------------
    private void dispose() throws NXException, RemoteException
    {
        try
        {
            if(isDisposeCalled == 0)
            {
                CHANGEDialog.dispose();
                CHANGEGRBEG1.dispose();
                CHANGEBITMAP1.dispose();
                CHANGELABEL1.dispose();
                CHANGESTR0.dispose();
                CHANGECGBEG5.dispose();
                CHANGETOGGLE6.dispose();
                CHANGEREAL6.dispose();
                theDialog.dispose();
            }
            isDisposeCalled = 1;
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }
  

    //---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
    // An example is shown below to create this dialog from a user exit.
    // All dialog files must be located in
    //             $UGII_USER_DIR/application or
    //             $UGII_SITE_DIR/application or
    //             $UGII_VENDOR_DIR/application directory
    

    //      1)Add a user exit to the method name below, for example, main().
    //      2)Consider how your shared library will be unloaded.  Take a look
    //        at the method getUnloadOption().
    //------------------------------------------------------------------------------
    public static void main(String [] argv) throws Exception // main() or  a valid user exit
    {
        try
        {
            DialogResponse response;
            theUIStylerSelectionExample = new UIStylerSelectionExample();
            // The following method shows the dialog immediately
            response = theUIStylerSelectionExample.show();
            theUIStylerSelectionExample.dispose();
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    } // User exit ends

    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    

    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    

    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    public static final int getUnloadOption()
    {
        // return BaseSession.LibraryUnloadOption.EXPLICITLY;
        return BaseSession.LibraryUnloadOption.IMMEDIATELY;
        // return BaseSession.LibraryUnloadOption.AT_TERMINATION;
    }

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void onUnload() throws NXException, RemoteException
    {
        try
        {
            theUIStylerSelectionExample.dispose();
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
    }



    //------------------------------------------------------------------------------
    //------------------------ UIStyler Event Implementation -----------------------
    //------------------------------------------------------------------------------

    public nxopen.uistyler.DialogState activate(nxopen.uistyler.StylerEvent e) throws NXException, RemoteException
    {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try
        {
            if(e.getStylerItem().isEqualTo(CHANGESTR0))
            {
                retValue = bend_radius_cb(e);
            }
            if(e.getStylerItem().isEqualTo(CHANGEREAL6))
            {
                retValue = tolerance_cb(e);
            }
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    public nxopen.uistyler.DialogState apply(nxopen.uistyler.StylerEvent e) throws NXException, RemoteException
    {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try
        {
            if(e.getStylerItem().isEqualTo(CHANGEDialog))
            {
                retValue = apply_cb(e);
            }
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }
    public nxopen.uistyler.DialogState construct(nxopen.uistyler.StylerEvent e) throws NXException, RemoteException
    {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try
        {
            if(e.getStylerItem().isEqualTo(CHANGEDialog))
            {
                retValue = constructor_cb(e);
            }
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }
    public nxopen.uistyler.DialogState okay(nxopen.uistyler.StylerEvent e) throws NXException, RemoteException
    {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.EXIT_DIALOG;
        try
        {
            if(e.getStylerItem().isEqualTo(CHANGEDialog))
            {
                retValue = ok_cb(e);
            }
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }
    public nxopen.uistyler.DialogState valueChanged(nxopen.uistyler.StylerEvent e) throws NXException, RemoteException
    {
        nxopen.uistyler.DialogState retValue = nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        try
        {
            if(e.getStylerItem().isEqualTo(CHANGETOGGLE6))
            {
                retValue = remove_surface_self_intersections_cb(e);
            }
        }
        catch(NXException ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        return retValue;
    }

    //------------------------------------------------------------------------------
    //------------------------- UIStyler Callback Functions ------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    // Callback Name: constructor_cb
    // Following callback is associated with the "CHANGEDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState constructor_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
            SelectionHandle selectH=CHANGEDialog.getSelectionHandle();
            Selection.MaskTriple selection_MaskArray[]=new Selection.MaskTriple[1];
            selection_MaskArray[0] = new Selection.MaskTriple();
            selection_MaskArray[0].type=UFConstants.UF_solid_type;
            selection_MaskArray[0].subtype=UFConstants.UF_solid_body_subtype;
            selection_MaskArray[0].solidBodySubtype=UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE;
            // Following sets the Selection mask for Edge
            theUI.selectionManager().setSelectionMask(selectH,Selection.SelectionAction.CLEAR_AND_ENABLE_SPECIFIC,selection_MaskArray);
            // Following sets the Selection and Filter callbacks which are invoked during selection    
            theUI.selectionManager().setSelectionCallbacks(selectH,this,this);
            
            CHANGETOGGLE6.setItemValue(true);
            
            CHANGESTR0.setItemValue("5.0");
            
            CHANGELABEL1.setLabel("Set Label 0");
            
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of nxopen.uistyler.DialogState.EXIT_DIALOG will not be accepted
        // for this callback type. You must continue dialog construction.
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
    }
    //------------------------------------------------------------------------------
    // Callback Name: ok_cb
    // Following callback is associated with the "CHANGEDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState ok_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
           apply_cb(e);
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, terminate dialog
        // It is STRONGLY recommanded that you exit your
        // callback with nxopen.uistyler.DialogState.EXIT_DIALOG in a ok callback.
        return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }
    //------------------------------------------------------------------------------
    // Callback Name: apply_cb
    // Following callback is associated with the "CHANGEDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    
    // Following is Apply Callback - This function is responsible for creating Edge Blend.
    public DialogState apply_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
               //We should check for the count first.
               if(htEdges.size() == 0)
                   throw new Exception("No Edge is selected.");
            
               Session theSession = (Session)SessionFactory.get("Session");
               Part workPart = theSession.parts().work();
               Part displayPart = theSession.parts().display();
               // ----------------------------------------------
               //   Menu: Insert->Detail Feature->Edge Blend...
               // ----------------------------------------------
               int markId1;
               markId1 = theSession.setUndoMark(nxopen.Session.MarkVisibility.VISIBLE, "Start");
                
               nxopen.features.Feature nullFeatures_Feature = null;
               nxopen.features.EdgeBlendBuilder edgeBlendBuilder1;
               edgeBlendBuilder1 = workPart.features().createEdgeBlendBuilder(nullFeatures_Feature);
               theSession.setUndoMarkName(markId1, "Edge Blend");
               ScCollector scCollector1;
               scCollector1 = workPart.scCollectors().createCollector();
               nxopen.features.Block block1 = ((nxopen.features.Block)workPart.features().findObject("BLOCK(1)"));
               Edge [] seedEdges1  = new Edge[htEdges.size()    ];
               int i=0;
               for (Enumeration en = htEdges.elements() ; en.hasMoreElements() ;) 
               {
                    seedEdges1[i]=(Edge)en.nextElement();
                    i++;
               }
               EdgeMultipleSeedTangentRule edgeMultipleSeedTangentRule1;
               edgeMultipleSeedTangentRule1 = workPart.scRuleFactory().createRuleEdgeMultipleSeedTangent(seedEdges1, 0.5, true);
                
               SelectionIntentRule [] rules1  = new SelectionIntentRule[1];
               rules1[0] = edgeMultipleSeedTangentRule1;
               scCollector1.replaceRules(rules1, false);
                
               int markId2;
               markId2 = theSession.setUndoMark(nxopen.Session.MarkVisibility.INVISIBLE, "Edge Blend");
               edgeBlendBuilder1.limitsListData().capsList().clear(nxopen.ObjectList.DeleteOption.DELETE);
               // Following  sets the Tolerance for Edge Blend.
               edgeBlendBuilder1.setTolerance(0.0254);
               edgeBlendBuilder1.setAllInstancesOption(false);
               // Following sets the Remove Self Intersection option for the Edge Blend.
               edgeBlendBuilder1.setRemoveSelfIntersection(true);
               edgeBlendBuilder1.setConvexConcaveY(false);
               edgeBlendBuilder1.setRollOverSmoothEdge(true);
               edgeBlendBuilder1.setRollOntoEdge(true);
               edgeBlendBuilder1.setMoveSharpEdge(true);
               edgeBlendBuilder1.setOverlapOption(nxopen.features.EdgeBlendBuilder.Overlap.ANY_CONVEXITY_ROLL_OVER);
               edgeBlendBuilder1.setBlendOrder(nxopen.features.EdgeBlendBuilder.OrderOfBlending.CONVEX_FIRST);
               edgeBlendBuilder1.setSetbackOption(nxopen.features.EdgeBlendBuilder.Setback.SEPARATE_FROM_CORNER);
                
               int csIndex1;
               // Following sets the value for Blend Radius.
               csIndex1 = edgeBlendBuilder1.addChainset(scCollector1, CHANGESTR0.itemValue());
                
               nxopen.features.Feature feature1;
               feature1 = edgeBlendBuilder1.commitFeature();
                
               theSession.deleteUndoMark(markId2, null);
                
               edgeBlendBuilder1.destroy();
               htEdges.clear();
        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of nxopen.uistyler.DialogState.EXIT_DIALOG will not be accepted
        // for this callback type. You must respond to your apply button.
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
    }
    //------------------------------------------------------------------------------
    // Callback Name: bend_radius_cb
    // Following callback is associated with the "CHANGESTR0" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState bend_radius_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            // theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }
    //------------------------------------------------------------------------------
    // Callback Name: remove_surface_self_intersections_cb
    // Following callback is associated with the "CHANGETOGGLE6" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState remove_surface_self_intersections_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            // theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }
    //------------------------------------------------------------------------------
    // Callback Name: tolerance_cb
    // Following callback is associated with the "CHANGEREAL6" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public DialogState tolerance_cb(StylerEvent e) throws NXException, RemoteException
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch(Exception ex)
        {
            // ---- Enter your exception handling code here -----
            // theUI.nxmessageBox().show("UI Styler", nxopen.NXMessageBox.DialogType.ERROR, ex.getMessage());
        }
        // Callback acknowledged, do not terminate dialog
        return nxopen.uistyler.DialogState.CONTINUE_DIALOG;
        // or Callback acknowledged, terminate dialog.
        // return nxopen.uistyler.DialogState.EXIT_DIALOG;
    }
}
