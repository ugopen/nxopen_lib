$$ ===================================================================
$$
$$      Copyright (c) 1996,1997 Electronic Data Systems Corporation
$$                   Unpublished - All rights reserved
$$
$$ ===================================================================

$$*****************************************************************************
$$                                                                            
$$ DESCRIPTION -                                                              
$$   This program shows how to use the following UG/Open GRIP command(s):     
$$                                                                            
$$         grargs                                             
$$                                                                            
$$ PROGRAM DESCRIPTION -                                                      
$$   The following example works in conjunction with the ufd_ask_grip_args.c   
$$   example file. Compile and link this GRIP source file with GRADE.    
$$   You then compile and link ufd_ask_grip_args.c as an internal UG/Open API.
$$   Open a part with a box, then execute the GRIP program. The GRIP program
$$   calls the UG/Open API program.
$$
$$              
$$                                                                            
$$*****************************************************************************

$$
$$ GRIP calling UG/Open API sample program
$$
$$ This program uses GRIP interaction to gather the information
$$ needed to create a simple hole.  It then passes this data to an
$$ internal UG/Open API program which creates the simple hole
$$ and reports errors.
$$
$$ This interaction prompts for the specification of:
$$   IDENT : the face on which the hole is created,
$$           and an optional through face.
$$   PARAM : the diameter, depth, angle, and absolute position of the
$$           hole.
$$
$$ The direction of the hole is always perpendicular to the face.
$$
$$ Declarations
    gripsw / declrv
    entity / hfaces(2)
    number / poswcs(3), posabs(3), dirwcs(3), dirabs(3), facdat(20),$ 
		usresp
    number / dianum,      depnum,      angnum
    string / diastr(132), depstr(132), angstr(132), errstr(132)
$$ Initialize defaults
step0:
    dianum    = 0.25
    depnum    = 0.25
    angnum    = 0.00
    poswcs(1) = 0.00
    poswcs(2) = 0.00
    poswcs(3) = 0.00
$$ Select the placement face
step1:
    hfaces(1) = &nulent
    hfaces(2) = &nulent
    mask  / 71
    ident / 'Select Placement Face [,Thru Face]', hfaces, usresp
    jump  / halt:, halt:, usresp
$$ Specify the simple hole parameters
step2:
    param / 'Specify Simple Hole Parameters',   $
                'Diameter     = ', dianum,      $
                'Depth        = ', depnum,      $
                'Angle        = ', angnum,      $
                'Position(xc) = ', poswcs(1),   $
                'Position(yc) = ', poswcs(2),   $
                'Position(zc) = ', poswcs(3),     usresp
    jump  / step1:, halt:, usresp
$$ Convert data and determine the hole direction
step3:
    posabs    =  map / poswcs, from, &wcs, to, &abs
    diastr    =  fstr(dianum)
    depstr    =  fstr(depnum)
    angstr    =  fstr(angnum)
    facdat    =  spropf( hfaces(1), 0.5, 0.5 )
    dirwcs(1) = -facdat(16)
    dirwcs(2) = -facdat(17)
    dirwcs(3) = -facdat(18)
    dirwcs    =  poswcs + dirwcs
    dirabs    =  map / dirwcs, from, &wcs, to, &abs
    dirabs    =  dirabs - posabs
$$ Create the simple hole
step4:
    errstr = 'Unknown error.'
    grargs / posabs, dirabs, diastr, depstr, angstr, hfaces, errstr
    xspawn / ufun, 'ufd_ask_grip_args'
$$ Inform user of any errors
step5:
    ifthen / errstr <> 'No error.'
        eject / print
        print / 'The hole was not added to the face.'
        print / '  Reason: ' + errstr
    endif
$$ Done
halt:
    halt
