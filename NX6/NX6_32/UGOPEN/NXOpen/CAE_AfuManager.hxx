#ifndef NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
#define NXOpen_CAE_AFUMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuData.hxx>
#include <NXOpen/CAE_AfuHeaderId.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AfuManager;
    }
    class Session;
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        class AfuDataConvertor;
    }
    namespace CAE
    {
        class AfuHeaderId;
    }
    namespace CAE
    {
        class AfuMathOperation;
    }
    namespace CAE
    {
        /** AFU File and Data Record Manager  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT AfuManager
        {
            /** This enumeration defines the modes of outputting information to a file */
            public: enum WritingFileMode
            {
                WritingFileModeOverride/** Opens an empty file for writing. If the given file exists, its contents are destroyed. */,
                WritingFileModeAppend/** Opens a file for appending data to the end of the file */
            };

            private: NXOpen::Session* m_owner;
            public: explicit AfuManager(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Create a new AFU Data Record.
                    Application type and usage type are specified to
                    set the function data type of the AFU Data Record.
                    Timestamp is outputted.
                     @return  Time stamp string indicates when the record was created  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString CreateRecord
            (
                NXOpen::CAE::XyFunctionMacroType macroType /** Application type of AFU Data Record used */,
                NXOpen::CAE::XyFunctionGeneralType dataType /** Usage type of AFU Data Record used */,
                NXOpen::CAE::AfuData * afuData /** Afu data used to create AFU Data Record */
            );
            /** Edit an existing AFU Data Record.
                    Application type and usage type are specified to set
                    the function data type of the AFU Data Record.
                    Timestamp is outputted.
                     @return  Time stamp string indicates when the data record was last edited  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString EditRecord
            (
                NXOpen::CAE::XyFunctionMacroType macroType /** Application type of AFU Data Record used */,
                NXOpen::CAE::XyFunctionGeneralType dataType /** Usage type of AFU Data Record used */,
                int afuRecordIndex /** Index of the AFU Data Record in the AFU file. Must begin with 1 */,
                NXOpen::CAE::AfuData * afuData /** Afu data used to create the AFU Data Record */
            );
            /** Copy multiple AFU Data Records to an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CopyRecords
            (
                std::vector<NXString> & sourceAfuFileNames /** List of the AFU Files to be copied (full filenames)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & recordIndexes /** Indexes of the AFU Data Records to be copied. Each index Must begin with 1 */,
                const NXString & destinationAfuFileName /** Destination AFU file (full filename)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete multiple AFU Data Records from an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void DeleteRecords
            (
                const NXString & afuFileName /** AFU file full name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & afuRecordIndexes /** List of Indexes of data records to be deleted from the AFU file. (Indexes begin with 1) */
            );
            /** Return data from an AFU Data Record  @return  Time stamp string indicates the last time the AFU Data Record was edited  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString GetAfuData
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int recordIndex /** Index of the AFU Data Record in the AFU file. Must begin with 1*/,
                NXOpen::CAE::AfuData ** afuData /** AFU record data queried */
            );
            /** Create an AFU Data Record object  @return  AFU Data Record  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::AfuData * CreateAfuData
            (
            );
            /** Create a new empty AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CreateNewAfuFile
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete an AFU file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void DeleteAfuFile
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Import AFU Data Records from a CSV, MAT, DAC or RPCIII file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ImportAfu
            (
                const NXString & importFileName /** Filename for the file to be imported   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & afuFileName /** AFU Filename to import data into   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export an AFU Data Record to a CSV, MAT or DAC file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ExportAfu
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int recordIndex /** Index of the AFU Data Record to be exported */,
                const NXString & exportFileName /** Name of destination file to which AFU Data Record is exported   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Rename an AFU Data Record  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void RenameRecord
            (
                const NXString & afuFileName /** AFU Filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int recordIndex /** Index of the AFU Data Record in the AFU file. Must begin with 1. */,
                const NXString & newRecordName /** New Data Record name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Return indices of all Data Records in an AFU file  @return  Index array of all Data Records in the AFU file.  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<int> GetRecordIndexes
            (
                const NXString & afuFileName /** AFU Filename  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** List the AFU Data Record information to listing window or a specified output file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ListRecordInformation
            (
                const NXString & afuFileName /** AFU Filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int recordIndex /** Index of the AFU Data Record to be listed */,
                bool listPointData /** List control flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const NXString & outputFileName /** Output file to which the record information is written. If NULL, the information is only output to the listing window.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Overwrite or Append Output Mode for file output. Only valid when output file name is not NULL.*/
            );
            /** List header information of all AFU Data Records in an AFU file to listing window or a specified output file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ListFileInformation
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool listPointData /** List Control Flag. If true, the record XY data will be listed. Otherwise only AFU header information is listed. */,
                const NXString & outputFileName /** Output file to which the record information is written. If NULL, the information is only output to the listing window  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::AfuManager::WritingFileMode mode /** Overwrite or Append Output Mode for file output. Only valid when output file name is not NULL.*/
            );
            /** Export all Data Records of an AFU to a RPCIII file  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void ExportAfuFile
            (
                const NXString & afuFileName /** AFU filename   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & exportFileName /** Name of destination file to which AFU Data Record is exported   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a new AFU Data Record.
                    Application type and usage type are NOT specified.
                    The function data type of the AFU Data Record
                    will be set by @link CAE::AfuData::SetFunctionDataType CAE::AfuData::SetFunctionDataType@endlink .
                    Timestamp is NOT outputted.
                     <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void CreateRecord
            (
                NXOpen::CAE::AfuData * afuData /** Afu data used to create AFU Data Record */
            );
            /** Edit an existing AFU Data Record.
                    Application type and usage type are NOT specified.
                    The function data type of the AFU Data Record
                    will be set by @link CAE::AfuData::SetFunctionDataType CAE::AfuData::SetFunctionDataType@endlink .
                    Timestamp is NOT outputted.
                     <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: void EditRecord
            (
                int afuRecordIndex /** Index of the AFU Data Record in the AFU file. Must begin with 1 */,
                NXOpen::CAE::AfuData * afuData /** Afu data used to create the AFU Data Record */
            );
            /** Create an AFU Header Id object  @return  AFU Header Id data  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::AfuHeaderId * CreateAfuHeaderId
            (
            );
            /** Return the unit type text of AFU data like "Displacement", "Time" etc.  @return  Unit type text of AFU data  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString GetAfuUnitTypeText
            (
                NXOpen::CAE::XyFunctionUnit unit /** Unit Code of AFU data */
            );
            /** Return the unit text of AFU data like "mm", "sec" etc.  @return  Unit text of AFU data  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXString GetAfuUnitText
            (
                NXOpen::CAE::XyFunctionUnit unit /** Unit Code of AFU data */
            );


            private: NXOpen::CAE::AfuDataConvertor *afuDataConvertor;
            /** Contains FFT operations for AFU data */
            public: NXOpen::CAE::AfuDataConvertor *AfuDataConvertor()
            {
                return afuDataConvertor;
            }
            private: NXOpen::CAE::AfuMathOperation *afuMathOperation;
            /** Contains Math Operations for AFU data */
            public: NXOpen::CAE::AfuMathOperation *AfuMathOperation()
            {
                return afuMathOperation;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
