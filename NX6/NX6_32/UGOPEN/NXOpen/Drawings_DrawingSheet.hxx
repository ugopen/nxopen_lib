#ifndef NXOpen_DRAWINGS_DRAWINGSHEET_HXX_INCLUDED
#define NXOpen_DRAWINGS_DRAWINGSHEET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_DrawingSheet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class DrawingSheet;
    }
    namespace Drawings
    {
        class DraftingView;
    }
    namespace Drawings
    {
        class SheetDraftingViewCollection;
    }
    namespace Drawings
    {
        class SheetSectionLineCollection;
    }
    class NXObject;
    class View;
    namespace Drawings
    {
        class _DrawingSheetBuilder;
        /** Represents a drawing sheet.   <br> To obtain an instance of this class, see 
                @link Drawings::DrawingSheetCollection Drawings::DrawingSheetCollection@endlink  <br> */
        class NXOPENCPPEXPORT DrawingSheet : public NXObject
        {
            /** Specifies the units of the drawing sheet. */
            public: enum Unit
            {
                UnitInches = 1/** inches */ ,
                UnitMillimeters/** millimeters */ 
            };

            /** Standard Drawing sizes */
            public: enum StandardSheetSize
            {
                StandardSheetSizeA/** 8.5 x 11 inches */,
                StandardSheetSizeB/** 11 X 17 inches*/,
                StandardSheetSizeC/** 17 X 22 inches*/,
                StandardSheetSizeD/** 22 X 34 inches*/,
                StandardSheetSizeE/** 34 X 44 inches */,
                StandardSheetSizeF/** 28 X 40 inches */,
                StandardSheetSizeH/** 28 X 44 inches */,
                StandardSheetSizeJ/** 34 X 55 inches */,
                StandardSheetSizeA0/** 841 x 1189 millimeters */,
                StandardSheetSizeA1/** 594 X 841 millimeters */,
                StandardSheetSizeA2/** 420 X 594 millimeters */,
                StandardSheetSizeA3/** 297 X 420 millimeters */,
                StandardSheetSizeA4/** 210 X 297 millimeters */
            };

            /** Specifies the projection angle of a drawing sheet.  All projected views 
                    and sections will then comply with the projection angle.  Imported model views however,
                    are not affected by projection angle.
                    */
            public: enum ProjectionAngleType
            {
                ProjectionAngleTypeFirstAngle = 1/** first angle */ ,
                ProjectionAngleTypeThirdAngle/** third angle */ 
            };

            private: friend class  _DrawingSheetBuilder;
            protected: DrawingSheet();
            /** Displays and activates the drawing sheet so that it can be edited.  <br> License requirements : None */
            public: void Open
            (
            );
            /** Returns the @link Drawings::DraftingView Drawings::DraftingView@endlink s on a sheet.  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Drawings::DraftingView *> GetDraftingViews
            (
            );
            /**Returns  the @link View View@endlink  that represents this drawing sheet.  <br> License requirements : None */
            public: NXOpen::View * View
            (
            );
            /**Returns  the status on whether this @link Drawings::DrawingSheet Drawings::DrawingSheet@endlink  is out of date.  <br> License requirements : None */
            public: bool IsOutOfDate
            (
            );
            /**Returns  the projection angle of the drawing sheet.  <br> License requirements : None */
            public: NXOpen::Drawings::DrawingSheet::ProjectionAngleType ProjectionAngle
            (
            );
            /**Returns  the units of the drawing sheet. To change the units of drawing sheet, use 
                        @link Drawings::DrawingSheet::SetParameters Drawings::DrawingSheet::SetParameters@endlink   <br> License requirements : None */
            public: NXOpen::Drawings::DrawingSheet::Unit Units
            (
            );
            /** Returns the scale of the drawing sheet. The scale of views that are
                    defined by an expression, will not modified by this method. <br> License requirements : None */
            public: void GetScale
            (
                double* numerator /** numerator */ ,
                double* denominator /** denominator */ 
            );
            /**Returns  the height of the drawing sheet.  <br> License requirements : None */
            public: double Height
            (
            );
            /**Returns  the length of the drawing sheet.  <br> License requirements : None */
            public: double Length
            (
            );
            /** Sets the parameters of the drawing sheet.  The scale of those @link Drawings::DraftingView Drawings::DraftingView@endlink s that are
                    defined by an expression, will not modified by this method.  Currently this method only works for
                    drawings that are opened. <br> License requirements : drafting ("DRAFTING") */
            public: void SetParameters
            (
                double height /** height */ ,
                double length /** length */ ,
                double numerator /** numerator */ ,
                double denominator /** denominator */ ,
                NXOpen::Drawings::DrawingSheet::Unit units /** units */ ,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** projection angle */ ,
                std::vector<NXOpen::Drawings::DraftingView *> & associatedViews /** List of  Drafting Views that did not have their scale modified
                                        due to being defined by an expression. */
            );
            /** Sets this drawingsheet's view as the active sketch view. 
                        Note: Can only activate a drawing sheet view for 
                              an active drawing sheet  <br> License requirements : drafting ("DRAFTING") */
            public: void ActivateForSketching
            (
            );
            /**Returns  true if this drawing sheet's view is the active sketch view.  <br> License requirements : drafting ("DRAFTING") */
            public: bool IsActiveForSketching
            (
            );


            private: NXOpen::Drawings::SheetDraftingViewCollection *sheetDraftingViews;
            /** Returns the SheetDraftingViewCollection instance belonging to this drawing sheet */
            public: NXOpen::Drawings::SheetDraftingViewCollection *SheetDraftingViews()
            {
                return sheetDraftingViews;
            }
            private: NXOpen::Drawings::SheetSectionLineCollection *sheetSectionLines;
            /** Returns the SheetSectionLineCollection instance belonging to this drawing sheet */
            public: NXOpen::Drawings::SheetSectionLineCollection *SheetSectionLines()
            {
                return sheetSectionLines;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
