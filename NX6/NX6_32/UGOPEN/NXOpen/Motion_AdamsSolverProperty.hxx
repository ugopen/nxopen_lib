#ifndef NXOpen_MOTION_ADAMSSOLVERPROPERTY_HXX_INCLUDED
#define NXOpen_MOTION_ADAMSSOLVERPROPERTY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AdamsSolverProperty.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_AdamsSolverProperty.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class AdamsSolverProperty;
    }
    namespace Motion
    {
        class _AdamsSolverPropertyBuilder;
        /** Represents a @link Motion::AdamsSolverProperty Motion::AdamsSolverProperty@endlink  */
        class NXOPENCPPEXPORT AdamsSolverProperty : public TaggedObject
        {
            private: friend class  _AdamsSolverPropertyBuilder;
            protected: AdamsSolverProperty();
            /**Returns  The max step size  <br> License requirements : None */
            public: double MaxStepSize
            (
            );
            /**Sets  The max step size  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxStepSize
            (
                double maxStepSize /** maxstepsize */ 
            );
            /**Returns  The max solver error  <br> License requirements : None */
            public: double MaxSolverError
            (
            );
            /**Sets  The max solver error  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxSolverError
            (
                double maxSolverError /** maxsolvererror */ 
            );
            /**Returns  The max iteration  <br> License requirements : None */
            public: int MaxIteration
            (
            );
            /**Sets  The max iteration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxIteration
            (
                int maxIteration /** maxiteration */ 
            );
            /**Returns  The max kinematic iteration  <br> License requirements : None */
            public: int MaxKinematicIteration
            (
            );
            /**Sets  The max kinematic iteration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxKinematicIteration
            (
                int maxKinematicIteration /** maxkinematiciteration */ 
            );
            /**Returns  The max static iteration  <br> License requirements : None */
            public: int MaxStaticIteration
            (
            );
            /**Sets  The max static iteration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaxStaticIteration
            (
                int maxStaticIteration /** maxstaticiteration */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
