#ifndef NXOpen_DIE_CLAMPINGSLOTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_CLAMPINGSLOTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_ClampingSlotBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_ClampingSlotBuilder.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/Die_DieDirectionBuilder.hxx>
#include <NXOpen/Die_DieLocationsBuilder.hxx>
#include <NXOpen/Die_DiePlaneBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class ClampingSlotBuilder;
    }
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DieDirectionBuilder;
    }
    namespace Die
    {
        class DieLocationsBuilder;
    }
    namespace Die
    {
        class DiePlaneBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Section;
    class SelectCartesianCoordinateSystem;
    class SelectNXObject;
    namespace Die
    {
        class _ClampingSlotBuilderBuilder;
        /**
            Represents a Clamping Slot feature builder
             <br> To create a new instance of this class, use @link Die::DieCollection::ClampingSlot Die::DieCollection::ClampingSlot@endlink  <br> 
        Default values:
        CenterlineLength.RightHandSide: 40 (millimeters part), 1.57 (inches part)
        FlangeThickness.RightHandSide: 45 (millimeters part), 1.77 (inches part)
        InnerWidth.RightHandSide: 45 (millimeters part), 1.77 (inches part)
        LocationOffset.RightHandSide: 0 (millimeters part), 0 (inches part)
        LocationOnFlange: false
        NotchAngle.RightHandSide: 0 (millimeters part), 0 (inches part)
        NotchHeight.RightHandSide: 0 (millimeters part), 0 (inches part)
        NotchWidth.RightHandSide: 0 (millimeters part), 0 (inches part)
        OffsetWidth.RightHandSide: 150 (millimeters part), 5.9 (inches part)
        Overhang.RightHandSide: 0 (millimeters part), 0 (inches part)
        PadHeight.RightHandSide: 63.5 (millimeters part), 2.5 (inches part)
        PadLength.RightHandSide: 80 (millimeters part), 3.15 (inches part)
        PadOffset.RightHandSide: 0 (millimeters part), 0 (inches part)
        PadRadius.RightHandSide: 25 (millimeters part), 1.0 (inches part)
        PadWidth.RightHandSide: 110 (millimeters part), 4.33 (inches part)
        SlotLength.RightHandSide: 40 (millimeters part), 1.57 (inches part)
        SlotRadius.RightHandSide: 20 (millimeters part), 0.787 (inches part)
        SlotWidth.RightHandSide: 45 (millimeters part), 1.77 (inches part)
        TopLength.RightHandSide: 60 (millimeters part), 2.36 (inches part)
        */
        class NXOPENCPPEXPORT ClampingSlotBuilder : public Features::FeatureBuilder
        {
            /** Clamping slot types */
            public: enum Types
            {
                TypesHydraulic/** hydraulic */ ,
                TypesTraveling/** traveling */ ,
                TypesAutomatic/** automatic */ 
            };

            private: friend class  _ClampingSlotBuilderBuilder;
            protected: ClampingSlotBuilder();
            /**Returns  the target solid the clamp slots will be united with  <br> License requirements : None */
            public: NXOpen::SelectNXObject * Target
            (
            );
            /**Returns  the locations for the clamping slots  <br> License requirements : None */
            public: NXOpen::Die::DieLocationsBuilder * Locations
            (
            );
            /**Returns  the direction to offset the clampslot locations if needed  <br> License requirements : None */
            public: NXOpen::Die::DieDirectionBuilder * LocationOffsetDirection
            (
            );
            /**Returns  the base plane of the clamping slot pad  <br> License requirements : None */
            public: NXOpen::Die::DiePlaneBuilder * BasePlane
            (
            );
            /**Returns  the die centerline coordinate system for orienting the slot  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * DieCenterlineCoordinateSystem
            (
            );
            /**Returns  the top orientation plane of the clamping slot pad  <br> License requirements : None */
            public: NXOpen::Die::DiePlaneBuilder * OrientationPlane
            (
            );
            /**Returns  the closed profile of the flange base  <br> License requirements : None */
            public: NXOpen::Section * FlangeBaseProfile
            (
            );
            /**Returns  the length from the location to the flange  <br> License requirements : None */
            public: NXOpen::Expression * CenterlineLength
            (
            );
            /**Returns  the width of the cutout at the back of the slot  <br> License requirements : None */
            public: NXOpen::Expression * InnerWidth
            (
            );
            /**Returns  the width of the slot  <br> License requirements : None */
            public: NXOpen::Expression * SlotWidth
            (
            );
            /**Returns  the length of the slot  <br> License requirements : None */
            public: NXOpen::Expression * SlotLength
            (
            );
            /**Returns  the distance from the front of the slot to the back cutout  <br> License requirements : None */
            public: NXOpen::Expression * TopLength
            (
            );
            /**Returns  the radius of the back cutout  <br> License requirements : None */
            public: NXOpen::Expression * SlotRadius
            (
            );
            /**Returns  the width of the pad  <br> License requirements : None */
            public: NXOpen::Expression * PadWidth
            (
            );
            /**Returns  the height of the pad  <br> License requirements : None */
            public: NXOpen::Expression * PadHeight
            (
            );
            /**Returns  the length of the pad from front to back  <br> License requirements : None */
            public: NXOpen::Expression * PadLength
            (
            );
            /**Returns  the radius of the pad at the back corners  <br> License requirements : None */
            public: NXOpen::Expression * PadRadius
            (
            );
            /**Returns  the amount the pad will overhang from the flange  <br> License requirements : None */
            public: NXOpen::Expression * Overhang
            (
            );
            /**Returns  the width from the center of the slot to the outer edge of the notch  <br> License requirements : None */
            public: NXOpen::Expression * NotchWidth
            (
            );
            /**Returns  the height of the notch on the pad from the base  <br> License requirements : None */
            public: NXOpen::Expression * NotchHeight
            (
            );
            /**Returns  the angle of the notch with respect to the base of the pad <br> License requirements : None */
            public: NXOpen::Expression * NotchAngle
            (
            );
            /**Returns  the thickness of the flange  <br> License requirements : None */
            public: NXOpen::Expression * FlangeThickness
            (
            );
            /**Returns  the width of the additional flange casting added for pad support  <br> License requirements : None */
            public: NXOpen::Expression * OffsetWidth
            (
            );
            /**Returns  the toggle to identify if the location should be mapped to the flange before building  <br> License requirements : None */
            public: bool LocationOnFlange
            (
            );
            /**Sets  the toggle to identify if the location should be mapped to the flange before building  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocationOnFlange
            (
                bool locationOnFlange /** locationonflange */ 
            );
            /**Returns  the amount to move along the location offset direction if specified  <br> License requirements : None */
            public: NXOpen::Expression * LocationOffset
            (
            );
            /**Returns  the amount to offset from the pad orientation to determine true top of pad  <br> License requirements : None */
            public: NXOpen::Expression * PadOffset
            (
            );
            /**Returns  the attributes for the pad faces <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * PadFacesAttributes
            (
            );
            /**Returns  the attributes for the slot faces  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * SlotFacesAttributes
            (
            );
            /**Returns  the attributes for the end faces of the slot <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * SlotEndFacesAttributes
            (
            );
            /**Returns  the attributes for the notch faces  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * NotchFacesAttributes
            (
            );
            /**Returns  the attributes for the overhang faces  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * OverhangFacesAttributes
            (
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the clamping slot type to build  <br> License requirements : None */
            public: NXOpen::Die::ClampingSlotBuilder::Types Type
            (
            );
            /**Sets  the clamping slot type to build  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetType
            (
                NXOpen::Die::ClampingSlotBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
