#ifndef NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONUSERINTERFACEUI_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionUserInterfaceUI.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionUserInterfaceUI;
    }
    class UI;
    namespace Preferences
    {
        /** Represents all UI based session user interface preferneces. Other User Interface settings are 
        available with @link SessionUserInterface SessionUserInterface@endlink  for settings applicable to session and 
        with @link PartUserInterface PartUserInterface@endlink  for User Interface Preferences applicable
        to part  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
        class NXOPENUICPPEXPORT SessionUserInterfaceUI
        {
            /** Describes whether the resource bar is displayed on left or right of window */
            public: enum DisplayResourceBar
            {
                DisplayResourceBarLeft/** left */ ,
                DisplayResourceBarRight/** right */ 
            };

            private: NXOpen::UI* m_owner;
            public: explicit SessionUserInterfaceUI(NXOpen::UI *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the save layout at exit flag.  <br> License requirements : None */
            public: bool SaveLayoutAtExit
            (
            );
            /**Sets  the save layout at exit flag.  <br> License requirements : None */
            public: void SetSaveLayoutAtExit
            (
                bool saveLayoutFlag /** save layout flag */ 
            );
            /**Returns  the home page URL  <br> License requirements : None */
            public: NXString HomePageURL
            (
            );
            /**Sets  the home page URL  <br> License requirements : None */
            public: void SetHomePageURL
            (
                const NXString & homePageUrl /** home page url */ 
            );
            /**Returns  the pages automatically fly outflag  <br> License requirements : None */
            public: bool PagesAutomaticallyFlyOut
            (
            );
            /**Sets  the pages automatically fly outflag  <br> License requirements : None */
            public: void SetPagesAutomaticallyFlyOut
            (
                bool pagesAutomaticallyFlyOut /** pages automatically fly out */ 
            );
            /**Returns  the display resource bar option  <br> License requirements : None */
            public: NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar DisplayResourceBarOption
            (
            );
            /**Sets  the display resource bar option  <br> License requirements : None */
            public: void SetDisplayResourceBarOption
            (
                NXOpen::Preferences::SessionUserInterfaceUI::DisplayResourceBar displayResourceBar /** display resource bar */ 
            );
            /**Returns  the use system precision flag. True uses the system precision  <br> License requirements : None */
            public: bool UseSystemPrecision
            (
            );
            /**Sets  the use system precision flag. True uses the system precision  <br> License requirements : None */
            public: void SetUseSystemPrecision
            (
                bool useSystemPrecision /** use system precision */ 
            );
            /**Returns  the confirm undo flag  <br> License requirements : None */
            public: bool ConfirmUndo
            (
            );
            /**Sets  the confirm undo flag  <br> License requirements : None */
            public: void SetConfirmUndo
            (
                bool confirmUndo /** confirm undo */ 
            );
            /**Returns  the pause duration  <br> License requirements : None */
            public: int PauseDuration
            (
            );
            /**Sets  the pause duration  <br> License requirements : None */
            public: void SetPauseDuration
            (
                int pauseDuration /** pause duration */ 
            );
            /**Returns  the listing decimal places <br> License requirements : None */
            public: int ListingDecimalPlaces
            (
            );
            /**Sets  the listing decimal places <br> License requirements : None */
            public: void SetListingDecimalPlaces
            (
                int listingDecimalPlaces /** listing decimal places */ 
            );
            /**Returns  the dialog box decimal places  <br> License requirements : None */
            public: int DialogBarDecimalPlaces
            (
            );
            /**Sets  the dialog box decimal places  <br> License requirements : None */
            public: void SetDialogBarDecimalPlaces
            (
                int dialogBarDecimalPlaces /** dialog bar decimal places */ 
            );
            /**Returns  the dialog bar tracking flag  <br> License requirements : None */
            public: bool DialogBarTracking
            (
            );
            /**Sets  the dialog bar tracking flag  <br> License requirements : None */
            public: void SetDialogBarTracking
            (
                bool dialogBarTrackingFlag /** dialog bar tracking flag */ 
            );
            /**Returns  the display dialogs in playback flag  <br> License requirements : None */
            public: bool DisplayDialogsInPlayback
            (
            );
            /**Sets  the display dialogs in playback flag  <br> License requirements : None */
            public: void SetDisplayDialogsInPlayback
            (
                bool displayDialogInPlaybackFlag /** display dialog in playback flag */ 
            );
            /**Returns  the record all transform flag  <br> License requirements : None */
            public: bool RecordAllTransform
            (
            );
            /**Sets  the record all transform flag  <br> License requirements : None */
            public: void SetRecordAllTransform
            (
                bool recordAllTransformFlag /** record all transform flag */ 
            );
            /**Returns  the initial dialog display flag  <br> License requirements : None */
            public: bool InitialDialogDisplay
            (
            );
            /**Sets  the initial dialog display flag  <br> License requirements : None */
            public: void SetInitialDialogDisplay
            (
                bool initialDialogDisplay /** initial dialog display */ 
            );
            /** Resets all dialog box settings  <br> License requirements : None */
            public: void ResetDialogBoxSettings
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
