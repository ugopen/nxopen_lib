#ifndef NXOpen_ASSEMBLIES_WAVEQUERY_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_WAVEQUERY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_WaveQuery.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class WaveQuery;
    }
    namespace Assemblies
    {
        /**
                 NX Event types
             */
        enum AssembliesEventTypes
        {
            AssembliesEventTypesBrowserUpdate/** update all relations in the browser event */,
            AssembliesEventTypesDeselectAll/** deselect all that is currently selected event */,
            AssembliesEventTypesPartSelectAll/** select all parts event */,
            AssembliesEventTypesPartDeselectAll/** deselect all parts event */,
            AssembliesEventTypesPartSelect/** select specified parts event */,
            AssembliesEventTypesPartDeselect/** deselect specified parts event */,
            AssembliesEventTypesPartFullyLoad/** part fully load event */,
            AssembliesEventTypesPartMakeDisplayed/** part make displayed part event */,
            AssembliesEventTypesPartMakeWork/** part make work part event */,
            AssembliesEventTypesLinkedObjectSelectAll/** select all linked objects event */,
            AssembliesEventTypesLinkedObjectDeselectAll/** deselect all linked objects event */,
            AssembliesEventTypesLinkedObjectSelect/** select specified linked objects event */,
            AssembliesEventTypesLinkedObjectDeselect/** deselect specified linked objects event */,
            AssembliesEventTypesLinkedFeatureEdit/** linked feature edit event */,
            AssembliesEventTypesLinkedFeatureBreak/** linked feature break event */,
            AssembliesEventTypesLinkedFeatureAcceptBroken/** linked feature accept broken event */,
            AssembliesEventTypesLaunch/** browser successfully launched event */,
            AssembliesEventTypesExit/** browser exit event */
        };

    }
    namespace Assemblies
    {
        /**
                Provides information about the inter-part relations (e.g. WAVE, inter-part
                expressions) in a NX model. The returned XML string contains information from
                parts loaded in the NX session and from published TeamCenter data. The XML
                must be unmarshaled using the Browser_model_schema.xsd.The XML identifiers
                are valid for the life of the session and are used in sequent queries.
                
                For the selected parts, the queries return the first level parent (source) and
                child (target) parts. The object-object relations that comprise a part-part
                relation are included if the information is available. Each query provides a
                context for the meaning of a selected part. For example, the work part is the
                only selected part for GetWorkPartWithPartRelationsXml. However, the method
                GetPartsInContextAssemblyXml considers all the unique parts in the context
                assembly to be selected.
                
                Since the queries also return the first level parent and child parents, these
                non-selected parts could exist only in TeamCenter.
              <br> This is an abstract class, and cannot be created. <br> */
        class NXOPENCPPEXPORT WaveQuery : public TransientObject
        {
            public: explicit WaveQuery(void *ptr);
            /**
                        Free resources associated with the instance. After this method
                        is called, it is illegal to use the object.  In .NET, this method
                        is automatically called when the object is deleted by the garbage
                        collector.
                      <br> License requirements : None */
            public: virtual ~WaveQuery();
            /**
                        Gets the part's preview image.
                      <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void GetPartPreview
            (
                const NXString & partSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int partIdentifier /** part's in-session identifier */,
                int* height /** height of preview image */,
                int* width /** width of preview image */,
                std::vector<int> & pixels /** the pixels */
            );
            /**
                        Gets the parts that are in-session. The parts are not necessarily fully loaded.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetInSessionPartsXml
            (
                bool includeOnlyWithLinks /** true if only parts that own inter-part links are returned */
            );
            /**
                        Gets the parts that are in the context assembly. The parts are not necessarily fully loaded.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetPartsInContextAssemblyXml
            (
                bool includeOnlyWithLinks /** true if only parts that own inter-part links are returned */
            );
            /**
                        Gets all the parts in the current selection list in the NX session.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetAllSelectedPartsXml
            (
                bool includeOnlyWithLinks /** true if only parts that own inter-part links are returned */
            );
            /**
                        Gets the current work part. 
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetWorkPartWithPartRelationsXml
            (
            );
            /**
                        Gets the child parts for a given part. The parts are not necessarily fully loaded.
                        The specified part and its children are considered to be "selected" parts.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetChildPartRelationsXml
            (
                const NXString & parentPartSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int parentPartIdentifier /** part's in-session identifier */,
                bool walkAll /** true if children of all descendants are obtained */
            );
            /**
                        Gets the parent parts for a given part. The parts are not necessarily fully loaded.
                        The specified part and its parents are considered to be "selected" parts.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetParentPartRelationsXml
            (
                const NXString & childPartSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int childPartIdentifier /** part's in-session identifier */,
                bool walkAll /** true if parents of all ancestors are obtained */
            );
            /**
                        Gets the product interfaces and their references for a given part. The owning part is the
                        "selected" part.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetProductInterfacesXml
            (
                const NXString & partSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int partIdentifier /** part's in-session identifier */
            );
            /**
                        Gets the inter-part links and their sources for a given part. The owning part is the
                        "selected" part.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetInterPartLinksXml
            (
                const NXString & partSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int partIdentifier /** part's in-session identifier */
            );
            /**
                        Gets a product interface's referencing objects. The owning part is the "selected" part.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetReferencesToProductInterfaceXml
            (
                const NXString & owningPartSpec /** the owning part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int owningPartIdentifier /** owning part's in-session identifier */,
                const NXString & prodintHandle /** the product interface's handle   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int prodintIdentifier /** product interface's in-session identifier */
            );
            /**
                        Provides application (e.g. the graphical browser) event processing by NX.
                        Some events refer to part level actions while others refer to part object level actions.
                      @return  the return status of this method  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: int HandleApplicationEvents
            (
                NXOpen::Assemblies::AssembliesEventTypes eventType /** type of event for processing */,
                const NXString & eventDescription /** textual description of the event for reporting   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & entitySpecs /** the NX part specifications or the handles of the objects   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & entityIdentifiers /** the NX part or object identifiers */
            );
            /**
                        Gets the feature dependency lists for a fully loaded part.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetPartFeatureDependenciesXml
            (
                const NXString & partSpec /** the part's specification   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int partIdentifier /** part's in-session identifier */
            );
            /**
                        Gets information about the specified parts. The parts are not necessarily fully loaded.
                      @return  the XML  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: NXString GetSpecifiedPartRelationsXml
            (
                std::vector<NXString> & partSpecs /** the NX part specifications   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & partIdentifiers /** the NX part identifiers */,
                bool includeOnlyWithLinks /** true if only parts that own inter-part links are returned */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
