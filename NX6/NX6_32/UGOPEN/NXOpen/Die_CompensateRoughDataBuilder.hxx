#ifndef NXOpen_DIE_COMPENSATEROUGHDATABUILDER_HXX_INCLUDED
#define NXOpen_DIE_COMPENSATEROUGHDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_CompensateRoughDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_CompensateRoughDataBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class CompensateRoughDataBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class Section;
    class SelectBodyList;
    namespace Die
    {
        class _CompensateRoughDataBuilderBuilder;
        /**
            Represents a @link Die::CompensateRoughDataBuilder Die::CompensateRoughDataBuilder@endlink . This class is used to edit
            and create a Compensate Rough Curve or Compensate Rough Sheet feature.
             <br> To create a new instance of this class, use @link Die::DieCollection::CompensateRoughData Die::DieCollection::CompensateRoughData@endlink  <br> 
        Default values:
        AngleTolerance: 0.5
        Approximation: Coarse
        DistanceTolerance: 0.0254 (millimeters part), 0.001 (inches part)
        JoinOutputCurves: 0
        MaximumGap: 5.0 (millimeters part), 0.2 (inches part)
        ModifyInputSheet: 0
        */
        class NXOPENCPPEXPORT CompensateRoughDataBuilder : public Features::FeatureBuilder
        {
            /** Settings for the type of data being compensated. */
            public: enum Types
            {
                TypesSheetBody/** Sheet bodies being compensated. */,
                TypesCurve/** Curves being compensated. */
            };

            /** Settings for the amount of approximation to perform. */
            public: enum ApproximationType
            {
                ApproximationTypeCoarse/** Perform a coarse approximation. */,
                ApproximationTypeRough/** Perform a rough approximation. */,
                ApproximationTypeFine/** Perform a fine approximation. */,
                ApproximationTypeExact/** Perform no approximation. */
            };

            private: friend class  _CompensateRoughDataBuilderBuilder;
            protected: CompensateRoughDataBuilder();
            /**Returns  the curve collector containing the curves that will be approximated.  <br> License requirements : None */
            public: NXOpen::Section * CurveCollector
            (
            );
            /**Returns  the sheet bodies that will be approximated.  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SheetBodies
            (
            );
            /**Returns  the faces to project the output curves onto. If faces are selected then the output curves will be 
                        projected normal to these faces.  <br> License requirements : None */
            public: NXOpen::ScCollector * ProjectToFaces
            (
            );
            /**Returns  the join output curves setting, true indicates that the output curves will be joined
                        into a single curve.  <br> License requirements : None */
            public: bool JoinOutputCurves
            (
            );
            /**Sets  the join output curves setting, true indicates that the output curves will be joined
                        into a single curve.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetJoinOutputCurves
            (
                bool joinOutputCurves /** joinoutputcurves */ 
            );
            /**Returns  the modify input sheet setting. If true the input sheet will be modified, otherwise
                        a new sheet will be created.  <br> License requirements : None */
            public: bool ModifyInputSheet
            (
            );
            /**Sets  the modify input sheet setting. If true the input sheet will be modified, otherwise
                        a new sheet will be created.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModifyInputSheet
            (
                bool modifyInputSheet /** modifyinputsheet */ 
            );
            /**Returns  the approximation desired.  <br> License requirements : None */
            public: NXOpen::Die::CompensateRoughDataBuilder::ApproximationType Approximation
            (
            );
            /**Sets  the approximation desired.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApproximation
            (
                NXOpen::Die::CompensateRoughDataBuilder::ApproximationType approximation /** approximation */ 
            );
            /**Returns  the distance tolerance.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance.  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the maximum gap.  <br> License requirements : None */
            public: double MaximumGap
            (
            );
            /**Sets  the maximum gap.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumGap
            (
                double maximumGap /** maximumgap */ 
            );
            /**Returns  the type of input data being supplied.  <br> License requirements : None */
            public: NXOpen::Die::CompensateRoughDataBuilder::Types Type
            (
            );
            /**Sets  the type of input data being supplied.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Die::CompensateRoughDataBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
