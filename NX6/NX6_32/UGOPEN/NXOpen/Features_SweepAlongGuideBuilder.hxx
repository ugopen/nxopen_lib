#ifndef NXOpen_FEATURES_SWEEPALONGGUIDEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SWEEPALONGGUIDEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SweepAlongGuideBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SweepAlongGuideBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SweepAlongGuideBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    class Section;
    namespace Features
    {
        class _SweepAlongGuideBuilderBuilder;
        /**
            Represents a @link Features::SweepAlongGuide Features::SweepAlongGuide@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSweepAlongGuideBuilder Features::FeatureCollection::CreateSweepAlongGuideBuilder@endlink  <br> 
        Default values:
        FirstOffset.RightHandSide: 0.0 (millimeters part), 0.0 (inches part)
        SecondOffset.RightHandSide: 0.0 (millimeters part), 0.0 (inches part)
        */
        class NXOPENCPPEXPORT SweepAlongGuideBuilder : public Features::FeatureBuilder
        {
            private: friend class  _SweepAlongGuideBuilderBuilder;
            protected: SweepAlongGuideBuilder();
            /**Returns  the section  <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the guide  <br> License requirements : None */
            public: NXOpen::Section * Guide
            (
            );
            /**Returns  the first offset  <br> License requirements : None */
            public: NXOpen::Expression * FirstOffset
            (
            );
            /**Returns  the second offset  <br> License requirements : None */
            public: NXOpen::Expression * SecondOffset
            (
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns  the chaining tolerance  <br> License requirements : None */
            public: double ChainingTolerance
            (
            );
            /**Sets  the chaining tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetChainingTolerance
            (
                double chainingTolerance /** chainingtolerance */ 
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the feature options  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
