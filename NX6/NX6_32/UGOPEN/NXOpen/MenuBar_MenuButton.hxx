#ifndef NXOpen_MENUBAR_MENUBUTTON_HXX_INCLUDED
#define NXOpen_MENUBAR_MENUBUTTON_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MenuBar_MenuButton.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace MenuBar
    {
        class MenuButton;
    }
    namespace MenuBar
    {
    }
    namespace MenuBar
    {
        /** Implements the Object for Menu Buttons */
        class NXOPENUICPPEXPORT MenuButton : public TransientObject
        {
            /** Available button types */
            public: enum Type
            {
                TypeCascadeButton/** cascade button */ ,
                TypePushButton/** push button */ ,
                TypeToggleButton/** toggle button */ ,
                TypeSeparator/** separator */ ,
                TypeApplicationButton/** application button */ ,
                TypeNullButton/** null button */ 
            };

            /** Sensitivity Status */
            public: enum SensitivityStatus
            {
                SensitivityStatusSensitive/** The button is sensitive. */,
                SensitivityStatusInsensitive/** The button is insensitive. */
            };

            /** Toggle Status */
            public: enum Toggle
            {
                ToggleOn/** The toggle is on. */,
                ToggleOff/** The toggle is off. */
            };

            public: explicit MenuButton(void *ptr);
            /** Frees the object from memory.  After this method is
                        called, it is illegal to use the object.  In .NET and Java,
                        his method is automatically called when the object is
                        deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~MenuButton();
            /**Returns  the name of the button.  <br> License requirements : None */
            public: NXString ButtonName
            (
            );
            /**Returns  the identifier of the button.  <br> License requirements : None */
            public: int ButtonId
            (
            );
            /**Returns  the type of the button.  <br> License requirements : None */
            public: NXOpen::MenuBar::MenuButton::Type ButtonType
            (
            );
            /**Returns  the type name of the button.  <br> License requirements : None */
            public: NXString ButtonTypeName
            (
            );
            /**Returns  the sensitivity of the button.  <br> License requirements : None */
            public: NXOpen::MenuBar::MenuButton::SensitivityStatus ButtonSensitivity
            (
            );
            /**Sets  the sensitivity of the button.  <br> License requirements : None */
            public: void SetButtonSensitivity
            (
                NXOpen::MenuBar::MenuButton::SensitivityStatus sensitivity /** sensitivity */ 
            );
            /**Returns  the toggle status of the button.  <br> License requirements : None */
            public: NXOpen::MenuBar::MenuButton::Toggle ToggleStatus
            (
            );
            /**Sets  the toggle status of the button.  <br> License requirements : None */
            public: void SetToggleStatus
            (
                NXOpen::MenuBar::MenuButton::Toggle toggleStatus /** toggle status */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
