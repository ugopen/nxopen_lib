#ifndef NXOpen_ANNOTATIONS_HATCHBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HATCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HatchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_BoundaryBuilder.hxx>
#include <NXOpen/Annotations_HatchBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class HatchBuilder;
    }
    namespace Annotations
    {
        class BoundaryBuilder;
    }
    class Builder;
    class NXColor;
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _HatchBuilderBuilder;
        /**
            This class is used to construct the crosshatching that lies within a boundary.
             <br> To create a new instance of this class, use @link Annotations::HatchCollection::CreateHatchBuilder Annotations::HatchCollection::CreateHatchBuilder@endlink  <br> */
        class NXOPENCPPEXPORT HatchBuilder : public Builder
        {
            /** the valid types of hatch objects */
            public: enum AnnotationTypes
            {
                AnnotationTypesCrosshatch/** Crosshatch */,
                AnnotationTypesAreaFill/** Area Fill  */
            };

            private: friend class  _HatchBuilderBuilder;
            protected: HatchBuilder();
            /**Returns  the type of hatch object  <br> License requirements : None */
            public: NXOpen::Annotations::HatchBuilder::AnnotationTypes AnnotationType
            (
            );
            /**Sets  the type of hatch object  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnnotationType
            (
                NXOpen::Annotations::HatchBuilder::AnnotationTypes type /** type */ 
            );
            /**Returns  the boundary  <br> License requirements : None */
            public: NXOpen::Annotations::BoundaryBuilder * Boundary
            (
            );
            /**Returns  the select annotation to exclude  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * AnnotationToExclude
            (
            );
            /**Returns  the exclude text.  This is not used if @link Annotations::BoundaryBuilder::SelectionMethodCurves Annotations::BoundaryBuilder::SelectionMethodCurves@endlink  is set.  <br> License requirements : None */
            public: bool AutomaticallyExcludeText
            (
            );
            /**Sets  the exclude text.  This is not used if @link Annotations::BoundaryBuilder::SelectionMethodCurves Annotations::BoundaryBuilder::SelectionMethodCurves@endlink  is set.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticallyExcludeText
            (
                bool excludeText /** excludetext */ 
            );
            /**Returns  the crosshatch file  <br> License requirements : None */
            public: NXString CrosshatchFile
            (
            );
            /**Sets  the crosshatch file  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCrosshatchFile
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the pattern  <br> License requirements : None */
            public: NXString Pattern
            (
            );
            /**Sets  the pattern  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPattern
            (
                const NXString & identifier /** identifier */ 
            );
            /**Returns  the distance  <br> License requirements : None */
            public: double Distance
            (
            );
            /**Sets  the distance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the area fill material  <br> License requirements : None */
            public: NXOpen::Annotations::AreaFillMaterial Material
            (
            );
            /**Sets  the area fill material  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMaterial
            (
                NXOpen::Annotations::AreaFillMaterial areaFillMaterial /** areafillmaterial */ 
            );
            /**Returns  the scale  <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale  <br> License requirements : drafting ("DRAFTING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the angle  <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the color  <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color  <br> License requirements : drafting ("DRAFTING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth Width
            (
            );
            /**Sets  the width  <br> License requirements : drafting ("DRAFTING") */
            public: void SetWidth
            (
                NXOpen::Annotations::LineWidth width /** width */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
