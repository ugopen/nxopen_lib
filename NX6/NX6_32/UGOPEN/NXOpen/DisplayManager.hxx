#ifndef NXOpen_DISPLAYMANAGER_HXX_INCLUDED
#define NXOpen_DISPLAYMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DisplayManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayModification.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class DisplayManager;
    class Session;
    class DisplayModification;
    class DisplayableObject;
    /** Manages the display and changes to it  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT DisplayManager
    {
         /** 3d interface color definition */
        public:
        struct J3dColor
        {
            public: /** red value in the range 0.0 to 1.0 */double Red;
            public: /** blue color value */double Green;
            public: /** green color value */double Blue;
            public: J3dColor() :
                Red(),
                Green(),
                Blue()
            {
            }
            /** Constructor for the J3dColor struct. */ 
            public: J3dColor(double INIT_red /** red value in the range 0.0 to 1.0 */, 
                    double INIT_green /** blue color value */, 
                    double INIT_blue /** green color value */) :
                Red(INIT_red),
                Green(INIT_green),
                Blue(INIT_blue)
            {
            }
        };

         /** 3d interface material definition */
        public:
        struct J3dMaterial
        {
            public: /** object color */NXOpen::DisplayManager::J3dColor Color;
            public: /** object highlight color */NXOpen::DisplayManager::J3dColor HighlightColor;
            public: /** surface roughness parameter */double Roughness;
            public: /** specular reflection coeficient */double SpecularFactor;
            public: /** diffuse reflection coeficient */double DiffuseFactor;
            public: /** ambient light coeficient */double AmbientFactor;
            public: /** 0.0 is opaque, 1.0 is totally transparent */double Transparency;
            public: J3dMaterial() :
                Color(),
                HighlightColor(),
                Roughness(),
                SpecularFactor(),
                DiffuseFactor(),
                AmbientFactor(),
                Transparency()
            {
            }
            /** Constructor for the J3dMaterial struct. */ 
            public: J3dMaterial(NXOpen::DisplayManager::J3dColor INIT_color /** object color */, 
                    NXOpen::DisplayManager::J3dColor INIT_highlight_color /** object highlight color */, 
                    double INIT_roughness /** surface roughness parameter */, 
                    double INIT_specular_factor /** specular reflection coeficient */, 
                    double INIT_diffuse_factor /** diffuse reflection coeficient */, 
                    double INIT_ambient_factor /** ambient light coeficient */, 
                    double INIT_transparency /** 0.0 is opaque, 1.0 is totally transparent */) :
                Color(INIT_color),
                HighlightColor(INIT_highlight_color),
                Roughness(INIT_roughness),
                SpecularFactor(INIT_specular_factor),
                DiffuseFactor(INIT_diffuse_factor),
                AmbientFactor(INIT_ambient_factor),
                Transparency(INIT_transparency)
            {
            }
        };

         /** 3d interface structure */
        public:
        struct J3dData
        {
            public: /** NX identifier for this shape */NXOpen::DisplayableObject * Eid;
            public: /** true if an assembly transform is used */bool HasTransform;
            public: /** true if this is a sheet body */bool Sheet;
            public: /** entity name */NXString Name;
            public: /** material properties */NXOpen::DisplayManager::J3dMaterial Material;
            public: J3dData() :
                Eid(),
                HasTransform(),
                Sheet(),
                Name(),
                Material()
            {
            }
            /** Constructor for the J3dData struct. */ 
            public: J3dData(NXOpen::DisplayableObject * INIT_eid /** NX identifier for this shape */, 
                    bool INIT_has_transform /** true if an assembly transform is used */, 
                    bool INIT_sheet /** true if this is a sheet body */, 
                    NXString INIT_name /** entity name */, 
                    NXOpen::DisplayManager::J3dMaterial INIT_material /** material properties */) :
                Eid(INIT_eid),
                HasTransform(INIT_has_transform),
                Sheet(INIT_sheet),
                Name(INIT_name),
                Material(INIT_material)
            {
            }
        };

        /** Controls the type of object to show or hide. See @link ShowByType ShowByType@endlink  
                and @link HideByType HideByType@endlink  */
        public: enum ShowHideType
        {
            ShowHideTypeAll/** Show or hide all of the following objects */,
            ShowHideTypeGeometry/** Show or hide all geometry objects. This 
                                                                    includes all bodies, components, and datums */,
            ShowHideTypeBodies/** Show or hide all bodies.
                                                                  This includes solid, sheet, and facetted bodies */,
            ShowHideTypeComponents/** Show or hide components */,
            ShowHideTypeSolidBodies/** Show or hide solid bodies */,
            ShowHideTypeSheetBodies/** Show or hide sheet bodies */,
            ShowHideTypeFacetedBodies/** Show or hide faceted bodies */,
            ShowHideTypePolygonBodies/** Show or hide polygon bodies */,
            ShowHideTypeDatums/** Show or hide Datums i.e Coordinate Systems
                                                                  Datum Axes, Datum Planes, Datum Plane Grids,
                                                                  Points */,
            ShowHideTypePoints/** Show or hide points */,
            ShowHideTypeDatumAxes/** Show or hide datum axes */,
            ShowHideTypeDatumPlanes/** Show or hide datum planes */,
            ShowHideTypeDatumPlaneGrids/** Show or hide datum plane grids */,
            ShowHideTypeCsys/** Show or hide coordinate systems */,
            ShowHideTypeSketches/** Show or hide sketches */,
            ShowHideTypeCurves/** Show or hide curves */,
            ShowHideTypeDraftingAnnotations/** Show or hide all drafting types.
                                                                                This includes drafting notes, dimensions, symbols and gdt */,
            ShowHideTypeDraftingDimensions/** Show or hide drafting dimensions */,
            ShowHideTypeDraftingNotes/** Show or hide drafting notes */,
            ShowHideTypeDraftingSymbols/** Show or hide drafting symbols */,
            ShowHideTypeDraftingGdt/** Show or hide drafting gdt */,
            ShowHideTypePmi/** Show or hide all pmi types.
                                                                    This includes pmi notes, dimensions, symbols and gdt */,
            ShowHideTypePmiDimensions/** Show or hide pmi dimensions */,
            ShowHideTypePmiNotes/** Show or hide pmi notes */,
            ShowHideTypePmiSymbols/** Show or hide pmi symbols */,
            ShowHideTypePmiGdt/** Show or hide pmi gdt */,
            ShowHideTypeAssemblyConstraints/** Show or hide assembly constraints */,
            ShowHideTypePmiGeometry/** Show or hide pmi geometry */
        };

        /** Controls the scope for the show hide operation. See @link ShowByType ShowByType@endlink  
                and @link HideByType HideByType@endlink  */
        public: enum ShowHideScope
        {
            ShowHideScopeAnyInAssembly/** Show and hide objects from the entire displayed part */,
            ShowHideScopeWorkPartAndOccurrence/** Show and hide objects only from the work part and its children */
        };

        /** Represents the layer settings when the objects to show are in invisible layers */
        public: enum LayerSetting
        {
            LayerSettingMoveObjectsToWorkLayer/** Move the objects to work layer if they are in invisible layer */,
            LayerSettingChangeLayerToSelectable/** Change the layer to selectable if it is invisible */,
            LayerSettingInvalid/** Last value, should not be used. */
        };

        private: NXOpen::Session* m_owner;
        public: explicit DisplayManager(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** 
              Constructs a new @link DisplayModification DisplayModification@endlink  object.
              @return  The new DisplayModification instance  <br> License requirements : None */
        public: NXOpen::DisplayModification * NewDisplayModification
        (
        );
        /** Blank a set of displayable objects  <br> License requirements : None */
        public: void BlankObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Unblank a set of displayable objects  <br> License requirements : None */
        public: void UnblankObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Shows a set of objects by type  @return  The number of objects shown  <br> License requirements : None */
        public: int ShowByType
        (
            NXOpen::DisplayManager::ShowHideType type /** The type of object to show */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Hides a set of objects by type  @return  The number of objects hidden  <br> License requirements : None */
        public: int HideByType
        (
            NXOpen::DisplayManager::ShowHideType type /** The type of object to hide */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Show a set of displayable objects. The objects selectable are:
            @link Curve Curve@endlink , @link Point Point@endlink , @link CAE::MeshPoint CAE::MeshPoint@endlink ,
            CSYS, @link Plane Plane@endlink , Mesh, @link CAE::CAEBody CAE::CAEBody@endlink ,
            @link CAE::CAEFace CAE::CAEFace@endlink , Load, Constraint and Simulation Object <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
        public: void ShowOnly
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Display objects adjacent to a set of displayable objects(@link CAE::CAEFace CAE::CAEFace@endlink ,
            @link CAE::CAEEdge CAE::CAEEdge@endlink ). 
            If @link CAE::CAEFace CAE::CAEFace@endlink  selected, display all it's neighbouring faces and associated edges.
            If @link CAE::CAEEdge CAE::CAEEdge@endlink  selected, display it's associated faces and their associated edges. <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
        public: void ShowAdjacent
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Ensures that previously invoked display operations are complete.  Called only by
                NXOpen applications that directly invoke Windows, MFC, or Motif
                functions to display dialogs.  This function is not needed when
                NXOpen dialogs are used.
             <br> License requirements : None */
        public: void MakeUpToDate
        (
        );
        /** Returns the list of displayable entities along with display information for 
                each entity in the displayed part.  @return  Array of entities and display data  <br> License requirements : None */
        public: std::vector<NXOpen::DisplayManager::J3dData> GetJ3dData
        (
        );
        /** Returns polygon/vector information for an entity  @return  true if vector data produced  <br> License requirements : None */
        public: bool GetJ3dGeometry
        (
            NXOpen::DisplayableObject * eid /** entity to tesselate */,
            double tolerance /** adjustment factor for tesselation tolerance */,
            bool wireframe /** if true generates wireframe solids */,
            std::vector<double> & points /** polygon/vector points */,
            std::vector<double> & normals /** polygon normals */,
            std::vector<int> & pointsPerStrip /** points for each triangle strip */
        );
        /** Unblank a set of displayable objects considering the following layer settings if the objects are in invisible layers. 
             <ol>
             <li>@link DisplayManager::LayerSettingMoveObjectsToWorkLayer DisplayManager::LayerSettingMoveObjectsToWorkLayer@endlink  - The objects will be moved to work layer before unblanking the objects if they are in invisible layer.</li>
             <li>@link DisplayManager::LayerSettingChangeLayerToSelectable DisplayManager::LayerSettingChangeLayerToSelectable@endlink  - The objects layer will be changed to selectable if the layer is invisible </li>
             </ol> <br> License requirements : None */
        public: void ShowObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** Objects to be shown */,
            NXOpen::DisplayManager::LayerSetting layerSetting /** Layer setting option */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
