#ifndef NXOpen_CGMBUILDER_HXX_INCLUDED
#define NXOpen_CGMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CGMBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CDF.hxx>
#include <NXOpen/CGMBuilder.hxx>
#include <NXOpen/PlotSourceBuilder.hxx>
#include <NXOpen/WidthDefinition.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class CGMBuilder;
    class Builder;
    class CDF;
    class PlotSourceBuilder;
    class WidthDefinition;
    class _CGMBuilderBuilder;
    /**
        Represents a @link CGMBuilder CGMBuilder@endlink  to be used when exporting the Current Display
        or drawing sheets to a CGM.  This class is created using @link PlotManager PlotManager@endlink .
        
        The user must specify the sheets to be exported by setting the appropriate fields 
        through the @link PlotSourceBuilder PlotSourceBuilder@endlink .  
        
        If running in native mode, use the Filenames field to specify the full path location 
        of the CGM(s).
        
        If running Teamcenter, there are several options:
            1. Exporting a single CGM.  More than one sheet can be exported to one CGM if the Multiple
               option is set to Single.  The Dataset Name field must be filled with one 
               dataset name.
            2. Exporting multiple CGMs.  This requires the Dataset Names field to be filled with the
               same number of dataset names as sheets selected for export.  The Multiple option
               needs to be set to Individual for this functionality.
            3. Overwriting an existing CGM.  This requires the Dataset Name field to be filled
               with the dataset name that is to be overwritten.
            4. Export CGM(s) locally.  This is possible by setting the Action option to File Browser.
               If exporting locally then the Filenames field must be set with full path filenames.
        All options when exporting to Teamcenter require the Dataset Type and Named Reference Type
        fields to be set.
         <br> To create a new instance of this class, use @link PlotManager::CreateCgmBuilder PlotManager::CreateCgmBuilder@endlink  <br> 
    Default values:
    Action: CreateNew
    Colors: AsDisplayed
    ImageResolution: Draft
    Multiple: Individual
    OutputText: Text
    RasterImages: 0
    Scale: 1
    ShadedGeometry: 0
    Size: FullScale
    Units: Metric
    VdcCoordinates: Real
    Widths: StandardWidths
    XDimension: 0
    YDimension: 0
    */
    class NXOPENCPPEXPORT CGMBuilder : public Builder
    {
        /** Specifies the action option to be used when running Teamcenter */
        public: enum ActionOption
        {
            ActionOptionCreateNew/** Creates a new dataset in Teamcenter */,
            ActionOptionOverwriteExisting/** Overwrites an existing dataset in Teamcenter */,
            ActionOptionFileBrowser/** Option allows for export of CGM file to local location when running Teamcenter */
        };

        /** Specifies how to export multiple drawing sheets in Native mode */
        public: enum MultipleOption
        {
            MultipleOptionIndividual/** Save Multiple sheets as individual CGMs */,
            MultipleOptionSingle/** Save Multiple sheets as one CGM */
        };

        /** Specifies the color option to use when creating the CGM */
        public: enum Color
        {
            ColorAsDisplayed/** As Displayed */,
            ColorPartColors/** Part Colors */,
            ColorCustomPalette/** Custom Palette, uses custom colors defined in CDF */,
            ColorBlackOnWhite/** Black on White */,
            ColorLegacyColors/** Translates current colors to 15 legacy colors */,
            ColorColorsByWidth/** Colors by Width, uses custom colors defined in CDF */
        };

        /** Specifies the primary selection of which type of width assignment to use. */
        public: enum Width
        {
            WidthStandardWidths/** Standard Widths */,
            WidthSingleWidth/** Single Width, uses custom widths defined in WidthDefinition */,
            WidthCustomThreeWidths/** Custom Three Widths, uses custom widths defined in WidthDefinition */,
            WidthCustomPalette/** Custom palette, uses custom widths defined in WidthDefinition */
        };

        /** Specifies the size option of the CGM. */
        public: enum SizeOption
        {
            SizeOptionFullScale/** Full Scale */,
            SizeOptionScaleFactor/** Scale Factor, scales the CGM based on user defined scale field */,
            SizeOptionDimension/** Dimension, uses the units along with X and Y dimensions to determine CGM size */
        };

        /** Specifies which units are associated to the dimensions */
        public: enum UnitsOption
        {
            UnitsOptionMetric/** Metric units */,
            UnitsOptionEnglish/** English units */
        };

        /** Specifies the text option, as either text or polylines */
        public: enum OutputTextOption
        {
            OutputTextOptionText/** Text is kept as text */,
            OutputTextOptionPolylines/** Text is exported as polylines */
        };

        /** Specifies the VDC coordinates to use when creating the CGM */
        public: enum Vdc
        {
            VdcInteger/** Integer */,
            VdcReal/** Real */
        };

        /** Specifies the image resolution when exporting a raster image */
        public: enum ImageResolutionOption
        {
            ImageResolutionOptionDraft/** Draft Resolution */,
            ImageResolutionOptionLow/** Low Resolution */,
            ImageResolutionOptionMedium/** Medium Resolution */,
            ImageResolutionOptionHigh/** High Resolution */
        };

        /** Specifies the relation to use when exporting a CGM to Teamcenter */
        public: enum RelationOption
        {
            RelationOptionSpecification/** Specification */,
            RelationOptionManifestation/** Manifestation */
        };

        private: friend class  _CGMBuilderBuilder;
        protected: CGMBuilder();
        /**Returns  the action option to be used when exporting the CGM file when in Teamcenter
                    mode.  File Browser allows for the CGM to be saved locally.  Overwrite allows
                    for the newly created CGM to overwrite a given existing CGM dataset in Teamcenter.
                    Create New allows for the CGM(s) to be created and imported as new datasets.  If
                    File Browser is selected, the Filenames field must be filled with full path filenames,
                    other wise the Dataset Names field must be filled.
                 <br> License requirements : None */
        public: NXOpen::CGMBuilder::ActionOption Action
        (
        );
        /**Sets  the action option to be used when exporting the CGM file when in Teamcenter
                    mode.  File Browser allows for the CGM to be saved locally.  Overwrite allows
                    for the newly created CGM to overwrite a given existing CGM dataset in Teamcenter.
                    Create New allows for the CGM(s) to be created and imported as new datasets.  If
                    File Browser is selected, the Filenames field must be filled with full path filenames,
                    other wise the Dataset Names field must be filled.
                 <br> License requirements : None */
        public: void SetAction
        (
            NXOpen::CGMBuilder::ActionOption action /** action */ 
        );
        /** Gets the dataset names to be used when creating CGMs in a Teamcenter
                    environment.  There will be one dataset name for each CGM.  @return   <br> License requirements : None */
        public: std::vector<NXString> GetDatasetNames
        (
        );
        /** Sets all the dataset names to be used when creating CGMs in a Teamcenter
                    environment.  The exact contents of this list will be used as the dataset
                    names, one for each CGM.  <br> License requirements : None */
        public: void SetDatasetNames
        (
            std::vector<NXString> & datasetNames /** datasetnames */ 
        );
        /**Returns  the multiple option is used when more than one drawing is exported.  If it is set to 
                    individual, then each drawing will be saved as an individual CGM.  In this case, the
                    number of filenames must equal the number of sheets selected.  If it is set to
                    single, then all drawings will be appended to one CGM file.  In this case, only one
                    filename is needed.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::MultipleOption Multiple
        (
        );
        /**Sets  the multiple option is used when more than one drawing is exported.  If it is set to 
                    individual, then each drawing will be saved as an individual CGM.  In this case, the
                    number of filenames must equal the number of sheets selected.  If it is set to
                    single, then all drawings will be appended to one CGM file.  In this case, only one
                    filename is needed.  <br> License requirements : None */
        public: void SetMultiple
        (
            NXOpen::CGMBuilder::MultipleOption multiple /** multiple */ 
        );
        /**Returns  the color option to be used when creating the CGM.  If the color option
                    is set to Custom Palette or Colors By Width then the CGM will be created
                    with the user defined color attributes belonging to the CDF object.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::Color Colors
        (
        );
        /**Sets  the color option to be used when creating the CGM.  If the color option
                    is set to Custom Palette or Colors By Width then the CGM will be created
                    with the user defined color attributes belonging to the CDF object.  <br> License requirements : None */
        public: void SetColors
        (
            NXOpen::CGMBuilder::Color colors /** colors */ 
        );
        /**Returns  the width option.  If the width option is set to Single Width, Custom Three Widths, 
                    or Custom Palette then the CGM will be created with the user defined width
                    attributes belonging to the WidthDefinition object.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::Width Widths
        (
        );
        /**Sets  the width option.  If the width option is set to Single Width, Custom Three Widths, 
                    or Custom Palette then the CGM will be created with the user defined width
                    attributes belonging to the WidthDefinition object.  <br> License requirements : None */
        public: void SetWidths
        (
            NXOpen::CGMBuilder::Width widths /** widths */ 
        );
        /**Returns  the size of the CGM.  If the size is set to Scale, then the CGM will 
                    use the user-defined Scale Factor.  If the size is set to dimension, then the CGM
                    will use the user-defined X and Y dimensions.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::SizeOption Size
        (
        );
        /**Sets  the size of the CGM.  If the size is set to Scale, then the CGM will 
                    use the user-defined Scale Factor.  If the size is set to dimension, then the CGM
                    will use the user-defined X and Y dimensions.  <br> License requirements : None */
        public: void SetSize
        (
            NXOpen::CGMBuilder::SizeOption size /** size */ 
        );
        /**Returns  the scale factor to be used when creating a CGM.  This value ranges from
                    0.00 to 1.00 and will only be used if the Size option is set to Scale.  <br> License requirements : None */
        public: double Scale
        (
        );
        /**Sets  the scale factor to be used when creating a CGM.  This value ranges from
                    0.00 to 1.00 and will only be used if the Size option is set to Scale.  <br> License requirements : None */
        public: void SetScale
        (
            double scale /** scale */ 
        );
        /**Returns  the units of the X and Y dimensions to be used when Dimension has been selected 
                    from the Size option.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::UnitsOption Units
        (
        );
        /**Sets  the units of the X and Y dimensions to be used when Dimension has been selected 
                    from the Size option.  <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::CGMBuilder::UnitsOption units /** units */ 
        );
        /**Returns  the x dimension to be used when Dimension has been selected from the Size option.  <br> License requirements : None */
        public: double XDimension
        (
        );
        /**Sets  the x dimension to be used when Dimension has been selected from the Size option.  <br> License requirements : None */
        public: void SetXDimension
        (
            double xDimension /** xdimension */ 
        );
        /**Returns  the y dimension to be used when Dimension has been selected from the Size option.  <br> License requirements : None */
        public: double YDimension
        (
        );
        /**Sets  the y dimension to be used when Dimension has been selected from the Size option.  <br> License requirements : None */
        public: void SetYDimension
        (
            double yDimension /** ydimension */ 
        );
        /**Returns  the output text of the CGM.  This will determine whether the drawing text will
                    be exported as text or as polylines.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::OutputTextOption OutputText
        (
        );
        /**Sets  the output text of the CGM.  This will determine whether the drawing text will
                    be exported as text or as polylines.  <br> License requirements : None */
        public: void SetOutputText
        (
            NXOpen::CGMBuilder::OutputTextOption outputText /** outputtext */ 
        );
        /**Returns  the Virtual Display Coordinates.  This option determines whether the CGM
                    will be created with real or integer vdc coordinates.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::Vdc VdcCoordinates
        (
        );
        /**Sets  the Virtual Display Coordinates.  This option determines whether the CGM
                    will be created with real or integer vdc coordinates.  <br> License requirements : None */
        public: void SetVdcCoordinates
        (
            NXOpen::CGMBuilder::Vdc vdc /** vdc */ 
        );
        /**Returns  the Raster Images option.  This option determines whether or not raster images will
                    be exported to the CGM.  <br> License requirements : None */
        public: bool RasterImages
        (
        );
        /**Sets  the Raster Images option.  This option determines whether or not raster images will
                    be exported to the CGM.  <br> License requirements : None */
        public: void SetRasterImages
        (
            bool rasterImages /** rasterimages */ 
        );
        /**Returns  the Shaded Geometry as Wireframe option.  If set to true, this option will show 
                    shaded objects as wireframes.  The shaded objects will be represented as shaded 
                    if this option is set to false.  <br> License requirements : None */
        public: bool ShadedGeometry
        (
        );
        /**Sets  the Shaded Geometry as Wireframe option.  If set to true, this option will show 
                    shaded objects as wireframes.  The shaded objects will be represented as shaded 
                    if this option is set to false.  <br> License requirements : None */
        public: void SetShadedGeometry
        (
            bool shadedGeometry /** shadedgeometry */ 
        );
        /**Returns  the resolution of images created for export of shaded views.  <br> License requirements : None */
        public: NXOpen::CGMBuilder::ImageResolutionOption ImageResolution
        (
        );
        /**Sets  the resolution of images created for export of shaded views.  <br> License requirements : None */
        public: void SetImageResolution
        (
            NXOpen::CGMBuilder::ImageResolutionOption imageResolution /** imageresolution */ 
        );
        /**Returns  the Source builder.  The Source builder contains all data involving the selected sheets.  <br> License requirements : None */
        public: NXOpen::PlotSourceBuilder * SourceBuilder
        (
        );
        /** Gets all the CGM filenames.  This list will contain the full path for each CGM
                    to be created.  @return   <br> License requirements : None */
        public: std::vector<NXString> GetFilenames
        (
        );
        /** Sets all the CGM filenames.  This list will contain the full path for each CGM
                    to be created.  If the Multiple option is set to Single, then only one filename
                    is needed.  If the Multiple option is set to Individual, then the number of
                    filenames must equal the number of sheets selected for export.  <br> License requirements : None */
        public: void SetFilenames
        (
            std::vector<NXString> & filenames /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** 
                    Creates and returns a @link CDF CDF@endlink  object representing the Color Palette.
                    This object contains all custom color information to be used when Custom Palette or
                    Colors By Width is selected from the Color option.  
                 @return  CDF object  <br> License requirements : None */
        public: NXOpen::CDF * CreateCdf
        (
        );
        /** 
                    Returns a @link CDF CDF@endlink  object representing the Color Palette.
                    This object contains all custom color information to be used when Custom Palette or
                    Colors By Width is selected from the Color option.  
                 @return  CDF object  <br> License requirements : None */
        public: NXOpen::CDF * GetCdf
        (
        );
        /** 
                    Creates and returns a @link WidthDefinition WidthDefinition@endlink  object representing 
                    the Width Palette.  This object contains all custom width information to be used 
                    when Single Width, Custom Three Widths, or Custom Palette is selected from the 
                    Width option.  
                 @return  WidthDefinition object  <br> License requirements : None */
        public: NXOpen::WidthDefinition * CreateWidthDefinition
        (
        );
        /** 
                    Returns a @link WidthDefinition WidthDefinition@endlink  object representing the Width Palette.
                    This object contains all custom width information to be used when Single Width, Custom
                    Three Widths, or Custom Palette is selected from the Width option.
                 @return  WidthDefinition object  <br> License requirements : None */
        public: NXOpen::WidthDefinition * GetWidthDefinition
        (
        );
        /**Returns  the relation to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: NXOpen::CGMBuilder::RelationOption Relation
        (
        );
        /**Sets  the relation to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: void SetRelation
        (
            NXOpen::CGMBuilder::RelationOption relation /** relation */ 
        );
        /**Returns  the dataset type to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: NXString DatasetType
        (
        );
        /**Sets  the dataset type to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: void SetDatasetType
        (
            const NXString & datasetType /** datasettype */ 
        );
        /**Returns  the named reference type to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: NXString NamedReferenceType
        (
        );
        /**Sets  the named reference type to be used when exporting a CGM to Teamcenter  <br> License requirements : None */
        public: void SetNamedReferenceType
        (
            const NXString & namedReferenceType /** namedreferencetype */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
