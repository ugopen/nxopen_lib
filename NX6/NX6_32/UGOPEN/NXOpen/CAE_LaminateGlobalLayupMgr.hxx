#ifndef NXOpen_CAE_LAMINATEGLOBALLAYUPMGR_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEGLOBALLAYUPMGR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateGlobalLayupMgr.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class LaminateGlobalLayupMgr;
    }
    namespace CAE
    {
        class FEModel;
    }
    namespace CAE
    {
        class GlobalLayupImportFromPptBuilder;
    }
    namespace CAE
    {
        class Laminate;
    }
    namespace CAE
    {
        class LaminateDrapingDataBuilder;
    }
    namespace CAE
    {
        class LaminateGlobalLayupCollection;
    }
    namespace CAE
    {
        class LaminatePly;
    }
    namespace CAE
    {
        class LayupGrowth;
    }
    namespace CAE
    {
        class LayupGrowthBuilder;
    }
    namespace CAE
    {
        class LayupGrowthCollection;
    }
    namespace CAE
    {
        class ViewLaminateBuilder;
    }
    namespace CAE
    {
        /** Represent the laminate global layup manager which manages all 
                the global layups in the laminate ply-based modeling project  <br> To obtain an instance of this class, refer to @link CAE::FEModel CAE::FEModel@endlink  <br> */
        class NXOPENCPPEXPORT LaminateGlobalLayupMgr
        {
            private: NXOpen::CAE::FEModel* m_owner;
            public: explicit LaminateGlobalLayupMgr(NXOpen::CAE::FEModel *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Creates a @link CAE::LaminateDrapingDataBuilder CAE::LaminateDrapingDataBuilder@endlink   @return  created builder  <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LaminateDrapingDataBuilder * CreateLaminateDrapingDataBuilder
            (
                NXOpen::CAE::LaminatePly * laminatePly /** ply for which we will edit the draping data */
            );
            /** Creates a @link CAE::GlobalLayupImportFromPptBuilder CAE::GlobalLayupImportFromPptBuilder@endlink   @return   <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::GlobalLayupImportFromPptBuilder * CreateGlobalLayupImportFromPptBuilder
            (
            );
            /** Creates a @link CAE::LayupGrowthBuilder CAE::LayupGrowthBuilder@endlink   @return   <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LayupGrowthBuilder * CreateLayupGrowthBuilder
            (
                NXOpen::CAE::LayupGrowth * layupgrowth /** Layup Growth */
            );
            /** Creates a @link CAE::ViewLaminateBuilder CAE::ViewLaminateBuilder@endlink   @return   <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::ViewLaminateBuilder * CreateViewLaminateBuilder
            (
                NXOpen::CAE::Laminate * laminate /** Inherited laminate physical */,
                int zoneIndex /** Zone index */
            );
            /** Creates a @link CAE::FlatPatternsBuilder CAE::FlatPatternsBuilder@endlink   @return   <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::GlobalLayupImportFromPptBuilder * CreateFlatPatternsBuilder
            (
            );


            private: NXOpen::CAE::LaminateGlobalLayupCollection *globalLayups;
            /** Collection of managed global layups */
            public: NXOpen::CAE::LaminateGlobalLayupCollection *GlobalLayups()
            {
                return globalLayups;
            }
            private: NXOpen::CAE::LayupGrowthCollection *layupGrowths;
            /** Collection of managed layup growth rules */
            public: NXOpen::CAE::LayupGrowthCollection *LayupGrowths()
            {
                return layupGrowths;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
