#ifndef NXOpen_ANNOTATIONS_PMIPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMIPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class PmiPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents line and arrow preferences */
        class NXOPENCPPEXPORT PmiPreferences : public TransientObject
        {
            public: explicit PmiPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~PmiPreferences();
            /**Returns  the default annotation plane for PMI symbols  <br> License requirements : None */
            public: NXOpen::Annotations::PmiDefaultPlane DefaultPlane
            (
            );
            /**Sets  the default annotation plane for PMI symbols  <br> License requirements : None */
            public: void SetDefaultPlane
            (
                NXOpen::Annotations::PmiDefaultPlane defaultPlane /** default plane */ 
            );
            /**Returns  the toggle for display through shaded models  <br> License requirements : None */
            public: bool ShadedDisplay
            (
            );
            /**  <br> License requirements : None */
            public: void SetShadedDisplay
            (
                bool shadedDisplay /** shaded display */ 
            );
            /**Returns  the initial letter for datum labels  <br> License requirements : None */
            public: NXString DatumLabel
            (
            );
            /**Sets  the initial letter for datum labels  <br> License requirements : None */
            public: void SetDatumLabel
            (
                const NXString & datumLabel /** datum label */ 
            );
            /**Returns  the flag indicating whether the PMI would be created view independent  <br> License requirements : None */
            public: bool CreateViewIndependent
            (
            );
            /**Sets  the flag indicating whether the PMI would be created view independent  <br> License requirements : None */
            public: void SetCreateViewIndependent
            (
                bool createViewIndependent /** create view independent */ 
            );
            /**Returns  the rectangular region width  <br> License requirements : None */
            public: double PmiRegionWidth
            (
            );
            /**Sets  the rectangular region width  <br> License requirements : None */
            public: void SetPmiRegionWidth
            (
                double width /** width */ 
            );
            /**Returns  the rectangular region height  <br> License requirements : None */
            public: double PmiRegionHeight
            (
            );
            /**Sets  the rectangular region height  <br> License requirements : None */
            public: void SetPmiRegionHeight
            (
                double height /** height */ 
            );
            /**Returns  the circular/annular region outer diameter  <br> License requirements : None */
            public: double PmiRegionOuterDiameter
            (
            );
            /**Sets  the circular/annular region outer diameter  <br> License requirements : None */
            public: void SetPmiRegionOuterDiameter
            (
                double outerDiameter /** outer diameter */ 
            );
            /**Returns  the circular/annular region inner diameter  <br> License requirements : None */
            public: double PmiRegionInnerDiameter
            (
            );
            /**Sets  the circular/annular region inner diameter  <br> License requirements : None */
            public: void SetPmiRegionInnerDiameter
            (
                double innerDiameter /** inner diameter */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
