#ifndef NXOpen_UISTYLER_FILEOPERATIONDATA_HXX_INCLUDED
#define NXOpen_UISTYLER_FILEOPERATIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_FileOperationData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class FileOperationData;
    }
    namespace UIStyler
    {
    }
    namespace UIStyler
    {
        /** Represents a FileOperationData for UI Styler */
        class NXOPENUICPPEXPORT FileOperationData : public TransientObject
        {
            /** Describes file operation */
            public: enum FileOperationType
            {
                FileOperationTypeNew/** New file operation */,
                FileOperationTypeOpen/** Open file operation */,
                FileOperationTypeSave/** Save file operation */,
                FileOperationTypeSaveAs/** Save as file operation */,
                FileOperationTypeSaveAll/** Save all file operation */,
                FileOperationTypeClose/** Close file operation */,
                FileOperationTypeQuit/** Quit file operation */,
                FileOperationTypeSaveAndExit/** Save and Exit file operation */,
                FileOperationTypeChangePart/** Chaneg part file operation */,
                FileOperationTypeExecute/** Execute file operation */,
                FileOperationTypeReopen/** Reopen file operation */,
                FileOperationTypeSaveAllAndClose/** Save all and close file operation */,
                FileOperationTypeSaveAndClose/** Save and close file operation */,
                FileOperationTypeSaveAsAndClose/** Save as and close file operation */
            };

            /** Describes file state */
            public: enum FileOperationState
            {
                FileOperationStateEnter/** Enter file state */,
                FileOperationStateExit/** Exit file state */
            };

            public: explicit FileOperationData(void *ptr);
            /** Free resources associated with the instance. After this method
                is called, it is illegal to use the object.  In .NET or Java, this 
                method is automatically called when the object is deleted by the 
                garbage collector.  <br> License requirements : None */
            public: virtual ~FileOperationData();
            /**Returns  the file operation type  <br> License requirements : None */
            public: NXOpen::UIStyler::FileOperationData::FileOperationType Type
            (
            );
            /**Returns  the state  <br> License requirements : None */
            public: NXOpen::UIStyler::FileOperationData::FileOperationState State
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
