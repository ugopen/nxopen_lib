#ifndef NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ElectrodeCopyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_ElectrodeCopyBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class ElectrodeCopyBuilder;
    }
    class Builder;
    class SelectBodyList;
    namespace Tooling
    {
        class _ElectrodeCopyBuilderBuilder;
        /** The ElectrodeCopy builder  <br> To create a new instance of this class, use @link Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder@endlink  <br> 
        Default values:
        DefNum: 1
        SelType: Transform
        */
        class NXOPENCPPEXPORT ElectrodeCopyBuilder : public Builder
        {
            /** The JA_ELECTRODE_COPY_BUILDER_copy is an index to copy type */
            public: enum Copy
            {
                CopyTransform/** the method is transform */,
                CopyMirror/** the method is mirror */
            };

            private: friend class  _ElectrodeCopyBuilderBuilder;
            protected: ElectrodeCopyBuilder();
            /**Returns  the copy type  <br> License requirements : None */
            public: NXOpen::Tooling::ElectrodeCopyBuilder::Copy SelType
            (
            );
            /**Sets  the copy type  <br> License requirements : None */
            public: void SetSelType
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::Copy selType /** seltype */ 
            );
            /**Returns  the selected electrode  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectElectrode
            (
            );
            /**Returns  the selected 'from' face  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectFromFace
            (
            );
            /**Returns  the selected 'to' face  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelToFace
            (
            );
            /**Returns  the mirror plane  <br> License requirements : None */
            public: NXOpen::SelectBodyList * MirrorPlane
            (
            );
            /**Returns  the number of transform  <br> License requirements : None */
            public: int DefNum
            (
            );
            /**Sets  the number of transform  <br> License requirements : None */
            public: void SetDefNum
            (
                int defNum /** defnum */ 
            );
            /**Returns  the new electrode name  <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the new electrode name  <br> License requirements : None */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
