#ifndef NXOpen_CAE_ASSYFEMODEL_HXX_INCLUDED
#define NXOpen_CAE_ASSYFEMODEL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AssyFEModel.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseFEModel.hxx>
#include <NXOpen/CAE_IHierarchicalFEModel.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AssyFEModel;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        class BaseFEModel;
    }
    namespace CAE
    {
        class BaseFemPart;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class IFEModel;
    }
    namespace CAE
    {
        class IHierarchicalFEModel;
    }
    class INXObject;
    class TaggedObject;
    namespace CAE
    {
        class _AssyFEModelBuilder;
        /**  @brief  This class represents an Assembly Finite Element Model.
                          This class will act as the gateway to the 
                          Finite Element Nodes (@link CAE::FENode CAE::FENode@endlink ) and Elements (@link CAE::FEElement CAE::FEElement@endlink ) in the model. 
                          Only one instance of this class will exist in each assyfem part file 

          */
        class NXOPENCPPEXPORT AssyFEModel : public CAE::BaseFEModel, public virtual CAE::IHierarchicalFEModel
        {
            private: friend class  _AssyFEModelBuilder;
            protected: AssyFEModel();
            /** Finds the @link  NXObject   NXObject @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return   <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: NXOpen::CAE::FEModelOccurrence * MapFemToAssemblyComponent
            (
                NXOpen::CAE::BaseFemPart * femPart /** base fem part */,
                NXOpen::Assemblies::Component * cadPartOcc /** component in an assembly */,
                bool workLayer /** true = Work layer or false = Original fem layer */
            );
            public: void UnmapFemFromAssemblyComponent
            (
                NXOpen::Assemblies::Component * cadPartOcc /** component in an assembly */
            );
            public: void RemoveFemMappedToAssemblyComponent
            (
                NXOpen::Assemblies::Component * cadPartOcc /** component in an assembly */
            );
            /**Returns  Returns parent fem of this object, can be NULL  <br> License requirements : None */
            public: virtual NXOpen::CAE::IFEModel * Parent
            (
            );
            /** Returns the child components of this component  @return   <br> License requirements : None */
            public: virtual std::vector<NXOpen::CAE::FEModelOccurrence *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
