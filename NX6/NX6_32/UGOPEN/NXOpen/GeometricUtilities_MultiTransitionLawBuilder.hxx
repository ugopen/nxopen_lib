#ifndef NXOpen_GEOMETRICUTILITIES_MULTITRANSITIONLAWBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MULTITRANSITIONLAWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_MultiTransitionLawBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_MultiTransitionLawBuilder.hxx>
#include <NXOpen/GeometricUtilities_TransitionLawNodeBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class MultiTransitionLawBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class TransitionLawNodeBuilder;
    }
    namespace GeometricUtilities
    {
        class TransitionLawNodeBuilderList;
    }
    class Section;
    namespace GeometricUtilities
    {
        class _MultiTransitionLawBuilderBuilder;
        /**
                Represents multiple transition law.
                
                This class represents @link LawBuilder::TypeMultiTransition LawBuilder::TypeMultiTransition@endlink  type
                of law in @link GeometricUtilities::LawBuilder GeometricUtilities::LawBuilder@endlink .
                Objects of class @link GeometricUtilities::TransitionLawNodeBuilder GeometricUtilities::TransitionLawNodeBuilder@endlink  are used
                as law nodes in @link GeometricUtilities::MultiTransitionLawBuilder GeometricUtilities::MultiTransitionLawBuilder@endlink . Spine
                definition in this class is mandatory. You can specify any number of law nodes on the spine.
                Minimum two law nodes are necessary to define the multi transition law along the spine.
                The law nodes must be specified in the parametrically increasing order in the spine direction.
                

                
                 <br> 
                Depending on the law node position on the spine following transition types are supported -
                 <br> 
                
                 <br> 
                Start node - All options in @link TransitionLawNodeBuilder::TransitionType TransitionLawNodeBuilder::TransitionType@endlink  except
                @link TransitionLawNodeBuilder::TransitionTypeUnknown TransitionLawNodeBuilder::TransitionTypeUnknown@endlink 
                 <br> 
                
                 <br> 
                End node - @link TransitionLawNodeBuilder::TransitionTypeBlend TransitionLawNodeBuilder::TransitionTypeBlend@endlink  and
                @link TransitionLawNodeBuilder::TransitionTypeMinmax TransitionLawNodeBuilder::TransitionTypeMinmax@endlink  only
                 <br> 
                
                 <br> 
                End node - All options in @link TransitionLawNodeBuilder::TransitionType TransitionLawNodeBuilder::TransitionType@endlink  may be supported.
                Consult the referencing class documentation to see when
                @link TransitionLawNodeBuilder::TransitionTypeUnknown TransitionLawNodeBuilder::TransitionTypeUnknown@endlink  is not supported
                at a law node.
                 <br> 
                
                
            */
        class NXOPENCPPEXPORT MultiTransitionLawBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _MultiTransitionLawBuilderBuilder;
            protected: MultiTransitionLawBuilder();
            /** Creates a new law node  @return  Law node  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::TransitionLawNodeBuilder * CreateNode
            (
            );
            /**Returns  the spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * Spine
            (
            );
            /** Update the builder based on current spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateSpine
            (
            );
            /**Returns  the list of law nodes.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::TransitionLawNodeBuilderList * NodeList
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
