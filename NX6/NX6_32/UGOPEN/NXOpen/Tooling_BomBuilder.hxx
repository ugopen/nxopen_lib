#ifndef NXOpen_TOOLING_BOMBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_BomBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class BomBuilder;
    }
    class Builder;
    class SelectPartList;
    namespace Tooling
    {
        class _BomBuilderBuilder;
        /** Represents a Tooling::BomBuilder builder  <br> To create a new instance of this class, use @link Tooling::BomCollection::CreateBomBuilder Tooling::BomCollection::CreateBomBuilder@endlink  <br> 
        Default values:
        EnumCompList: Bom
        */
        class NXOPENCPPEXPORT BomBuilder : public Builder
        {
            /** The JA_BOM_BUILDER_tree_list is an index to components list type. */
            public: enum TreeList
            {
                TreeListBom/** A list includes components in BOM */,
                TreeListHide/** A list includes hidden components */
            };

            /** The JA_BOM_BUILDER_shape is an index to the shape of stock size. */
            public: enum Shape
            {
                ShapeRectangular/** The rectangular type. */,
                ShapeCircular/** The circular type. */
            };

            /** The JA_BOM_BUILDER_circle is an index to the base circle type of cylinder shape. */
            public: enum Circle
            {
                CircleCircumcircle/** Circumcircle. */,
                CircleInscribedCircle/** Inscribed circle. */
            };

            private: friend class  _BomBuilderBuilder;
            protected: BomBuilder();
            /**Returns  the select component needed to get stocksize <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectComponent
            (
            );
            /**Returns  the stock shape will be generated, it can be a box or cylinder  <br> License requirements : None */
            public: NXOpen::Tooling::BomBuilder::Shape EnumStockType
            (
            );
            /**Sets  the stock shape will be generated, it can be a box or cylinder  <br> License requirements : None */
            public: void SetEnumStockType
            (
                NXOpen::Tooling::BomBuilder::Shape enumStockType /** enumstocktype */ 
            );
            /**Returns  the cylinder type may be used to generate a cylinder for the stock size  <br> License requirements : None */
            public: NXOpen::Tooling::BomBuilder::Circle EnumCylinderType
            (
            );
            /**Sets  the cylinder type may be used to generate a cylinder for the stock size  <br> License requirements : None */
            public: void SetEnumCylinderType
            (
                NXOpen::Tooling::BomBuilder::Circle enumCylinderType /** enumcylindertype */ 
            );
            /**Returns  the tree list shows which kind of components should be included in  <br> License requirements : None */
            public: NXOpen::Tooling::BomBuilder::TreeList EnumCompList
            (
            );
            /**Sets  the tree list shows which kind of components should be included in  <br> License requirements : None */
            public: void SetEnumCompList
            (
                NXOpen::Tooling::BomBuilder::TreeList enumCompList /** enumcomplist */ 
            );
            /**Returns  the size precision for the stock  <br> License requirements : None */
            public: int IntegerPrecision
            (
            );
            /**Sets  the size precision for the stock  <br> License requirements : None */
            public: void SetIntegerPrecision
            (
                int integerPrecision /** integerprecision */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
