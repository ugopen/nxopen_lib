#ifndef NXOpen_FEATURES_STYLEDBLENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STYLEDBLENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StyledBlendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_StyledBlendBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_FlowDirection.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class StyledBlendBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    namespace Features
    {
        class StyledBlend;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class FlowDirection;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class ScCollector;
    class Section;
    class SelectEdge;
    namespace Features
    {
        class _StyledBlendBuilderBuilder;
        /**
            Represents a @link Features::StyledBlend Features::StyledBlend@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateStyledBlendBuilder Features::FeatureCollection::CreateStyledBlendBuilder@endlink  <br> 
        Default values:
        DepthLaw.Function: ft
        DepthLaw.LawType: MultiTransition
        DepthLaw.Parameter: t
        IsCenterCurveUsedAsSpine: 0
        IsSingleTubeUsed: 1
        LinkHandles: 0
        RadiusConstraintType: None
        RadiusConstraintValue.RightHandSide: 1.0 (millimeters part), 2.54 (inches part)
        RebuildGuide.DegreeType: Quintic
        ShapeControl: TangentCurve1
        SkewLaw.LawType: MultiTransition
        TangentMagnitude1.LawType: MultiTransition
        TangentMagnitude2.LawType: MultiTransition
        TrimMethod: NoTrim
        TubeRadius1.LawType: MultiTransition
        TubeRadius2.LawType: MultiTransition
        */
        class NXOPENCPPEXPORT StyledBlendBuilder : public Features::FeatureBuilder
        {
            /** The styled blend types */
            public: enum Types
            {
                TypesLaw/** Law type */,
                TypesCurve/** Curve type */,
                TypesProfile/** Profile type */
            };

            /** The radius constraint type */
            public: enum StyledBlendRadiusConstraintType
            {
                StyledBlendRadiusConstraintTypeNone/** Non-radius constraint */,
                StyledBlendRadiusConstraintTypePeak/** Peak radius constraint */,
                StyledBlendRadiusConstraintTypeMinimum/** Minimum radius constraint */
            };

            /** The shape control types */
            public: enum StyledBlendShapeControlType
            {
                StyledBlendShapeControlTypeTangentCurve1/** Tangent curve 1 */,
                StyledBlendShapeControlTypeTangentCurve2/** Tangent curve 2 */,
                StyledBlendShapeControlTypeDepth/** Depth control */,
                StyledBlendShapeControlTypeSkew/** Skew control */,
                StyledBlendShapeControlTypeTangentMagnitude/** Tangent magnitude control */
            };

            /** The trim method types */
            public: enum StyledBlendTrimMethodType
            {
                StyledBlendTrimMethodTypeNoTrim/** Non-trim */,
                StyledBlendTrimMethodTypeTrimAndAttach/** Trim and attach */,
                StyledBlendTrimMethodTypeTrimInputWalls/** Trim input walls */,
                StyledBlendTrimMethodTypeTrimInputBlends/** Trim input blends */
            };

            private: friend class  _StyledBlendBuilderBuilder;
            protected: StyledBlendBuilder();
            /**Returns  the first wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::ScCollector * Wall1
            (
            );
            /**Returns  a value indicating whether to reverse the normal of the first wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsNormal1Reversed
            (
            );
            /**Sets  a value indicating whether to reverse the normal of the first wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetNormal1Reversed
            (
                bool reverseNormal1 /** reversenormal1 */ 
            );
            /**Returns  the second wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::ScCollector * Wall2
            (
            );
            /**Returns  a value indicating whether to reverse the normal of the second wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsNormal2Reversed
            (
            );
            /**Sets  a value indicating whether to reverse the normal of the second wall  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetNormal2Reversed
            (
                bool reverseNormal2 /** reversenormal2 */ 
            );
            /**Returns  the first tangent curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * TangentCurve1
            (
            );
            /**Returns  the second tangent curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * TangentCurve2
            (
            );
            /**Returns  the profile curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * ProfileCurve
            (
            );
            /**Returns  the center curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * CenterCurve
            (
            );
            /**Returns  a value indicating whether the center curve direction is reversed  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsCenterCurveDirectionReversed
            (
            );
            /**Sets  a value indicating whether the center curve direction is reversed  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCenterCurveDirectionReversed
            (
                bool reverseCenterCurveDirection /** reversecentercurvedirection */ 
            );
            /**Returns  the center curve start  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * CenterCurveStart
            (
            );
            /**Returns  the center curve end  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * CenterCurveEnd
            (
            );
            /**Returns  a value indicating whether the center curve is used as the spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsCenterCurveUsedAsSpine
            (
            );
            /**Sets  a value indicating whether the center curve is used as the spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCenterCurveUsedAsSpine
            (
                bool useCenterCurveAsSpine /** usecentercurveasspine */ 
            );
            /**Returns  the spine curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * SpineCurve
            (
            );
            /**Returns  the first adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectEdge * AdjacentBlend1
            (
            );
            /**Returns  the trim start of the first adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * AdjacentBlend1TrimStart
            (
            );
            /**Returns  the trim end of the first adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * AdjacentBlend1TrimEnd
            (
            );
            /**Returns  the second adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectEdge * AdjacentBlend2
            (
            );
            /**Returns  the trim start of the second adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * AdjacentBlend2TrimStart
            (
            );
            /**Returns  the trim end of the second adjacent blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * AdjacentBlend2TrimEnd
            (
            );
            /**Returns  a feature from which parameters will be inherited.  If you do not want to inherit parameters, do not set this  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SelectFeature * InheritFeatureParameters
            (
            );
            /**Returns  the radius constraint type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder::StyledBlendRadiusConstraintType RadiusConstraintType
            (
            );
            /**Sets  the radius constraint type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetRadiusConstraintType
            (
                NXOpen::Features::StyledBlendBuilder::StyledBlendRadiusConstraintType radiusConstraintType /** radiusconstrainttype */ 
            );
            /**Returns  the radius constraint value  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Expression * RadiusConstraintValue
            (
            );
            /**Returns  the first wall continuity  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Continuity * Wall1Continuity
            (
            );
            /**Returns  the second wall continuity  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Continuity * Wall2Continuity
            (
            );
            /**Returns  the first blend continuity  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Continuity * Blend1Continuity
            (
            );
            /**Returns  the second blend continuity  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Continuity * Blend2Continuity
            (
            );
            /**Returns  the first wall flow direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::FlowDirection * Wall1Direction
            (
            );
            /**Returns  the second wall flow direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::FlowDirection * Wall2Direction
            (
            );
            /**Returns  a value indicating whether the single tube is used  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsSingleTubeUsed
            (
            );
            /**Sets  a value indicating whether the single tube is used  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSingleTubeUsed
            (
                bool singleTube /** singletube */ 
            );
            /**Returns  the shape control  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder::StyledBlendShapeControlType ShapeControl
            (
            );
            /**Sets  the shape control  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetShapeControl
            (
                NXOpen::Features::StyledBlendBuilder::StyledBlendShapeControlType shapeControl /** shapecontrol */ 
            );
            /**Returns  a value indicating whether to link the handles  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool LinkHandles
            (
            );
            /**Sets  a value indicating whether to link the handles  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetLinkHandles
            (
                bool linkHandles /** linkhandles */ 
            );
            /**Returns  the first tube radius  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * TubeRadius1
            (
            );
            /**Returns  the second tube radius  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * TubeRadius2
            (
            );
            /**Returns  the depth  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * DepthLaw
            (
            );
            /**Returns  the skew  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * SkewLaw
            (
            );
            /**Returns  the tangent magnitude 1  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * TangentMagnitude1
            (
            );
            /**Returns  the tangent magnitude 2  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::LawBuilder * TangentMagnitude2
            (
            );
            /**Returns  the trim method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder::StyledBlendTrimMethodType TrimMethod
            (
            );
            /**Sets  the trim method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetTrimMethod
            (
                NXOpen::Features::StyledBlendBuilder::StyledBlendTrimMethodType trimMethod /** trimmethod */ 
            );
            /**Returns  the rebuild guide  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Rebuild * RebuildGuide
            (
            );
            /** Reverses the blend   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void ReverseBlend
            (
            );
            /**Returns  a value indicating whether the blend is extended  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsBlendExtended
            (
            );
            /**Sets  a value indicating whether the blend is extended  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetBlendExtended
            (
                bool isBlendExtended /** isblendextended */ 
            );
            /**Returns  the position tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::StyledBlendBuilder::Types type /** type */ 
            );
            /** Updates the spine in radius laws. You should call this
                    function whenever input walls or center curve have been changed  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateRadiusLawSpine
            (
            );
            /** Updates the spine in shape laws. You should call this
                    function whenever input walls, center curve, spine, tangent
                    curves or profile curve have been changed  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateShapeLawSpine
            (
                bool isDefaultSpine /** isdefaultspine */ 
            );
            /** Internally data processing of inherited parameters from other Styled Blend feature
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void ProcessInheritFeatureParameters
            (
                NXOpen::Features::StyledBlend * feature /** feature */ 
            );
            /** Updates the first wall. This API is used for recording
                    spine creation for the radius and shape laws  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool UpdateWall1
            (
            );
            /** Updates the second wall. This API is used for recording
                    spine creation for the radius and shape laws  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool UpdateWall2
            (
            );
            /** Updates the first tangent curve for Curve type. This API is used for recording
                    spine creation for the radius and shape laws  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateTangentCurve1
            (
            );
            /** Updates the second tangent curve for Curve Type. This API is used for recording
                    spine creation for the radius and shape laws  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateTangentCurve2
            (
            );
            /** Updates the spine curve. This API is used for recording
                    spine creation for the radius and shape laws  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateSpineCurve
            (
            );
            /** Updates the center curve. This API is used for recording
                    spine creation for the radius and shape laws  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateCenterCurve
            (
            );
            /** Updates the profile curve for Profile type. This API is used for recording
                    spine creation for the shape law  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateProfileCurve
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
