#ifndef NXOpen_FEATURES_REPLACEFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REPLACEFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ReplaceFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Features_FeatureReferencesBuilder.hxx>
#include <NXOpen/Features_ReplaceFeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ReplaceFeatureBuilder;
    }
    class Builder;
    namespace Features
    {
        class FeatureReferencesBuilder;
    }
    namespace Features
    {
        class SelectFeatureList;
    }
    class NXObject;
    namespace Features
    {
        class _ReplaceFeatureBuilderBuilder;
        /** Represents a replace feature builder. The replace features does not
            create a feature, but assists the user through the process of replacing
            a feature with a new one.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateReplaceFeatureBuilder Features::FeatureCollection::CreateReplaceFeatureBuilder@endlink  <br> 
        Default values:
        CopyReplacementFeature: 0
        KeepFeatureToReplace: 1
        MappingMethod: MapOnlyObjectsWithModelingDependencies
        */
        class NXOPENCPPEXPORT ReplaceFeatureBuilder : public Builder
        {
            /** Type of mapping method to be used for replace feature */
            public: enum MappingMethodType
            {
                MappingMethodTypeMapOnlyObjectsWithModelingDependencies/** map only objects with modeling dependencies */ ,
                MappingMethodTypeMapAllObjects/** Not supported yet */
            };

            private: friend class  _ReplaceFeatureBuilderBuilder;
            protected: ReplaceFeatureBuilder();
            /**Returns  the selection list of features to be replaced  <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * SelectFeature
            (
            );
            /**Returns  the selection list of replacement features  <br> License requirements : None */
            public: NXOpen::Features::SelectFeatureList * ReplacementFeature
            (
            );
            /**Returns  the mapping method  <br> License requirements : None */
            public: NXOpen::Features::ReplaceFeatureBuilder::MappingMethodType MappingMethod
            (
            );
            /**Sets  the mapping method  <br> License requirements : None */
            public: void SetMappingMethod
            (
                NXOpen::Features::ReplaceFeatureBuilder::MappingMethodType mappingMethod /** mappingmethod */ 
            );
            /**Returns  the distance tolerance to use for mapping  <br> License requirements : None */
            public: double MappingTolerance
            (
            );
            /**Sets  the distance tolerance to use for mapping  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMappingTolerance
            (
                double mappingTolerance /** mappingtolerance */ 
            );
            /**Returns  the feature references builder  <br> License requirements : None */
            public: NXOpen::Features::FeatureReferencesBuilder * FeatureReferences
            (
            );
            /**Returns  the indication on whether to keep or replace the feature. True indicates the feature should be kept.  <br> License requirements : None */
            public: bool KeepFeatureToReplace
            (
            );
            /**Sets  the indication on whether to keep or replace the feature. True indicates the feature should be kept.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeepFeatureToReplace
            (
                bool keepFeatureToReplace /** keepfeaturetoreplace */ 
            );
            /**Returns  the indication on whether to copy the replacement feature. True indicates that the replacement feature should be copied before replacing the specified feature.  <br> License requirements : None */
            public: bool CopyReplacementFeature
            (
            );
            /**Sets  the indication on whether to copy the replacement feature. True indicates that the replacement feature should be copied before replacing the specified feature.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCopyReplacementFeature
            (
                bool copyReplacementFeature /** copyreplacementfeature */ 
            );
            /** Set the matching reference using the index into the feature references  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchingForIndex
            (
                int indices /** Index to use in the feature references builder */,
                NXOpen::NXObject * matchingTag /** Matching value */
            );
            /** Set the matching reference using the parent to match in the feature references  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchingForParent
            (
                NXOpen::NXObject * parentTag /** Parent to match in the feature references builder */,
                NXOpen::NXObject * matchingTag /** Matching value */
            );
            /** Populate the feature references according to the replaced feature <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateMap
            (
            );
            /** Match the map automatically  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AutomatchMap
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
