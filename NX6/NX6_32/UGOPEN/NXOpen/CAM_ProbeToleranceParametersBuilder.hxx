#ifndef NXOpen_CAM_PROBETOLERANCEPARAMETERSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_PROBETOLERANCEPARAMETERSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ProbeToleranceParametersBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ProbeToleranceParametersBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ProbeToleranceParametersBuilder;
    }
    namespace CAM
    {
        class _ProbeToleranceParametersBuilderBuilder;
        /**
            Represents a @link CAM::ProbeToleranceParametersBuilder CAM::ProbeToleranceParametersBuilder@endlink 
            */
        class NXOPENCPPEXPORT ProbeToleranceParametersBuilder : public TaggedObject
        {
            private: friend class  _ProbeToleranceParametersBuilderBuilder;
            protected: ProbeToleranceParametersBuilder();
            /**Returns  the option to output the tolerance  <br> License requirements : None */
            public: bool OutputTolerance
            (
            );
            /**Sets  the option to output the tolerance  <br> License requirements : None */
            public: void SetOutputTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the option to output the cylindrical tolerance  <br> License requirements : None */
            public: bool OutputCylTolerance
            (
            );
            /**Sets  the option to output the cylindrical tolerance  <br> License requirements : None */
            public: void SetOutputCylTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the option to output the upper tolerance limit  <br> License requirements : None */
            public: bool OutputUpperTolerance
            (
            );
            /**Sets  the option to output the upper tolerance limit  <br> License requirements : None */
            public: void SetOutputUpperTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the option to output the null band tolerance zone  <br> License requirements : None */
            public: bool OutputNullBandTolerance
            (
            );
            /**Sets  the option to output the null band tolerance zone  <br> License requirements : None */
            public: void SetOutputNullBandTolerance
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : None */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the cyl tolerance  <br> License requirements : None */
            public: double CylTolerance
            (
            );
            /**Sets  the cyl tolerance  <br> License requirements : None */
            public: void SetCylTolerance
            (
                double cylTolerance /** cyltolerance */ 
            );
            /**Returns  the upper tolerance  <br> License requirements : None */
            public: double UpperTolerance
            (
            );
            /**Sets  the upper tolerance  <br> License requirements : None */
            public: void SetUpperTolerance
            (
                double upperTolerance /** uppertolerance */ 
            );
            /**Returns  the null band tolerance  <br> License requirements : None */
            public: double NullBandTolerance
            (
            );
            /**Sets  the null band tolerance  <br> License requirements : None */
            public: void SetNullBandTolerance
            (
                double nullBandTolerance /** nullbandtolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
