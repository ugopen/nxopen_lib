#ifndef NXOpen_CAE_MESHCOLLECTORBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MESHCOLLECTORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshCollectorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_MeshCollectorBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class MeshCollectorBuilder;
    }
    class Builder;
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class _MeshCollectorBuilderBuilder;
        /**
            Represents a @link CAE::MeshCollectorBuilder CAE::MeshCollectorBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::MeshManager::CreateCollectorBuilder CAE::MeshManager::CreateCollectorBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MeshCollectorBuilder : public Builder
        {
            /** Indicates the different element dimensions */
            public: enum ElementDimensionOption
            {
                ElementDimensionOptionPoint/** 0-d */,
                ElementDimensionOptionBeam/** 1-d */,
                ElementDimensionOptionShell/** 2-d */,
                ElementDimensionOptionSolid/** 3-d */,
                ElementDimensionOptionContactEdge/** edge contact */,
                ElementDimensionOptionContactFace/** face contact */
            };

            /** 
                    Indicates the collector types for each dimension.
                    Since this varies dynamically based on the language and dimension,
                    this enum cannot right now be used.
                    */
            public: enum CollectorTypeOption
            {
                CollectorTypeOptionFirstValue/** first value */ 
            };

            private: friend class  _MeshCollectorBuilderBuilder;
            protected: MeshCollectorBuilder();
            /**Returns  the element dim opt  <br> License requirements : None */
            public: NXOpen::CAE::MeshCollectorBuilder::ElementDimensionOption ElementDimension
            (
            );
            /**Sets  the element dim opt  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimension
            (
                NXOpen::CAE::MeshCollectorBuilder::ElementDimensionOption elementDimension /** elementdimension */ 
            );
            /**Returns  the element type opt  <br> License requirements : None */
            public: NXOpen::CAE::MeshCollectorBuilder::CollectorTypeOption CollectorType
            (
            );
            /**Sets  the element type opt  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorType
            (
                NXOpen::CAE::MeshCollectorBuilder::CollectorTypeOption collectorType /** collectortype */ 
            );
            /**Returns  the Mesh Collector's Property Table  <br> License requirements : None */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
            /**Returns  the collector name  <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the collector name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
