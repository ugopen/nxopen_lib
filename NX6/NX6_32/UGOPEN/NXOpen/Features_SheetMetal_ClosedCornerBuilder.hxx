#ifndef NXOpen_FEATURES_SHEETMETAL_CLOSEDCORNERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_CLOSEDCORNERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_ClosedCornerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SheetMetal_ClosedCornerBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class ClosedCornerBuilder;
        }
    }
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class _ClosedCornerBuilderBuilder;
            /** Represents a Closed corner feature builder.  <br> To create a new instance of this class, use @link Features::SheetMetal::SheetmetalManager::CreateClosedCornerFeatureBuilder Features::SheetMetal::SheetmetalManager::CreateClosedCornerFeatureBuilder@endlink  <br> */
            class NXOPENCPPEXPORT ClosedCornerBuilder : public Features::FeatureBuilder
            {
                /** This enum represents the feature types. */
                public: enum Types
                {
                    TypesCloseAndRelief/** close and relief */ ,
                    TypesRelief/** relief */ 
                };

                /**This enum represents Corner Closure type*/
                public: enum ClosureTypeOptions
                {
                    ClosureTypeOptionsClose/** close */ ,
                    ClosureTypeOptionsOverlap/** overlap */ 
                };

                /**This enum represents Corner treatment type*/
                public: enum TreatmentTypeOptions
                {
                    TreatmentTypeOptionsOpen/** Only Webs will be closed*/,
                    TreatmentTypeOptionsClosed/** Bend and Webs will be closed*/,
                    TreatmentTypeOptionsCircularCutout/** Circular shaped relief*/,
                    TreatmentTypeOptionsUCutout/** U shaped relief*/,
                    TreatmentTypeOptionsVCutout/** V shaped relief*/,
                    TreatmentTypeOptionsRectangularCutout/** Rectangular shaped relief*/
                };

                /**This enum represents Origin type*/
                public: enum OriginTypes
                {
                    OriginTypesBendCenter/** The relief origin will be at the intersection of first bend's centerline and bisector of corrner angle. */,
                    OriginTypesCornerPoint/** The relief origin will be at the corner point.*/
                };

                private: friend class  _ClosedCornerBuilderBuilder;
                protected: ClosedCornerBuilder();
                /**Sets  the treatment type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetTreatmentType
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::TreatmentTypeOptions treatmentType /** The type of treatment specified for the corner*/
                );
                /**Returns  the treatment type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::TreatmentTypeOptions TreatmentType
                (
                );
                /**Sets  the closure type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetClosureType
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::ClosureTypeOptions closureType /** The type of closure specified for the corner*/
                );
                /**Returns  the closure type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::ClosureTypeOptions ClosureType
                (
                );
                /**Returns  the diameter. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Diameter
                (
                );
                /** Sets the diameter
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Diameter ClosedCornerBuilder::Diameter @endlink and @link ClosedCornerBuilder::SetDiameter ClosedCornerBuilder::SetDiameter @endlink  instead.
                             <br> 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetDiameter
                (
                    const NXString & diameter /** The diameter for the circular cutout corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the diameter
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Diameter ClosedCornerBuilder::Diameter @endlink and @link ClosedCornerBuilder::SetDiameter ClosedCornerBuilder::SetDiameter @endlink  instead.
                             <br>  @return  The diameter for the circular cutout corner treatment 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetDiameter
                (
                );
                /**Returns  the gap. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Gap
                (
                );
                /** Sets the gap.
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Gap ClosedCornerBuilder::Gap @endlink and @link ClosedCornerBuilder::SetGap ClosedCornerBuilder::SetGap @endlink  instead.
                             <br> 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetGap
                (
                    const NXString & gap /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the gap.
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Gap ClosedCornerBuilder::Gap @endlink and @link ClosedCornerBuilder::SetGap ClosedCornerBuilder::SetGap @endlink  instead.
                             <br>  @return  
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetGap
                (
                );
                /**Returns  the overlap. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Overlap
                (
                );
                /** Sets the overlap.
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Overlap ClosedCornerBuilder::Overlap @endlink and @link ClosedCornerBuilder::SetOverlap ClosedCornerBuilder::SetOverlap @endlink  instead.
                             <br> 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetOverlap
                (
                    const NXString & overlap /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the overlap.
                             <br> 
                            This is deprecated. Please use @link ClosedCornerBuilder::Overlap ClosedCornerBuilder::Overlap @endlink and @link ClosedCornerBuilder::SetOverlap ClosedCornerBuilder::SetOverlap @endlink  instead.
                             <br>  @return  
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetOverlap
                (
                );
                /** Add a face pair. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void AddFacePair
                (
                    NXOpen::Face * firstFace /**  A bend face from a bend */,
                    NXOpen::Face * secondFace /**  A bend face from an adjacent bend */
                );
                /** Return the face pair.  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void GetFacePair
                (
                    int index /** Index of the desired face pair */,
                    NXOpen::Face ** firstFace /** First face of the face pair */,
                    NXOpen::Face ** secondFace /** Second face of the face pair */
                );
                /** Returns the number of face pairs already identified for the three bend corner feature.
                         @return  The number of face pairs currently identified  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int GetNumberOfFacePairs
                (
                );
                /** Validates the builder data. @return  Returns 0 if the data in the builder is valid  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int ValidateBuilderData
                (
                );
                /** Removes a face pair (that represents a unique corner) from the list of face pairs already added.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void RemoveFacePair
                (
                    NXOpen::Face * firstFace /** A face from an already selected face pair */,
                    NXOpen::Face * secondFace /** The other face from the face pair */
                );
                /**Returns  the feature type  <br> License requirements : None */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::Types Type
                (
                );
                /**Sets  the feature type  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetType
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::Types type /** type */ 
                );
                /**Sets  the default origin will be at the corner point instead of the intersection of bend centerlines. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetOrigin
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::OriginTypes originType /** The default location of relief origin*/
                );
                /**Returns  the default origin will be at the corner point instead of the intersection of bend centerlines. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::OriginTypes Origin
                (
                );
                /**Returns  the value by which relief origin will be offset <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Offset
                (
                );
                /**Returns  the angle1 of V relief. This is the angle associated with the first bend selected. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * VAngle1
                (
                );
                /**Returns  the angle2 of V relief. This is the angle associated to the second bend selected. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * VAngle2
                (
                );
                /**Returns  the length of rectangular relief. The length is associated to the first bend selected. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * RectangularLength
                (
                );
                /**Returns  the width of rectangular relief. The width is associated to the second bend selected.  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * RectangularWidth
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
