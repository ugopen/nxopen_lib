#ifndef NXOpen_PREFERENCES_SESSIONVISUALIZATIONSCREEN_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONVISUALIZATIONSCREEN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionVisualizationScreen.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionVisualizationScreen;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of visualization preferences under screen tab applicable to entire session <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences Preferences::SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionVisualizationScreen
        {
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionVisualizationScreen(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the fit percentage. Specifies the area of the graphics display to be occupied by the model after a fit operation 
            is performed. For example, a fit percentage of 100% scales the model so that it occupies 100% of the graphics display. 
            Similarly, a fit percentage of 80% fits the model within 80% of the graphics display area.  <br> License requirements : None */
            public: int FitPercentage
            (
            );
            /**Sets  the fit percentage. Specifies the area of the graphics display to be occupied by the model after a fit operation 
            is performed. For example, a fit percentage of 100% scales the model so that it occupies 100% of the graphics display. 
            Similarly, a fit percentage of 80% fits the model within 80% of the graphics display area.  <br> License requirements : None */
            public: void SetFitPercentage
            (
                int fitPercentage /** fit percentage */ 
            );
            /**Returns  whether plotted edges reflect onscreen edge appearance. This option 
            affects the appearance of edges in output produced by Plot, Print, CGM 
            Export and similar functions. It affects edge appearance for modeling 
            views only, not for views on a drawing sheet. When this option is disabled, 
            the appearance of plotted edges is controlled by edge display options 
            (Hidden Edges, Silhouettes, Smooth Edges) used for Static Wireframe 
            rendering style. When this option is enabled, the appearance of plotted 
            edges is inferred from onscreen edge appearance.  <br> License requirements : None */
            public: bool InferEdgeOutput
            (
            );
            /**Sets  whether plotted edges reflect onscreen edge appearance. This option 
            affects the appearance of edges in output produced by Plot, Print, CGM 
            Export and similar functions. It affects edge appearance for modeling 
            views only, not for views on a drawing sheet. When this option is disabled, 
            the appearance of plotted edges is controlled by edge display options 
            (Hidden Edges, Silhouettes, Smooth Edges) used for Static Wireframe 
            rendering style. When this option is enabled, the appearance of plotted 
            edges is inferred from onscreen edge appearance.  <br> License requirements : None */
            public: void SetInferEdgeOutput
            (
                bool inferEdgeOutput /** infer edge output */ 
            );
            /**Returns    <br> License requirements : None */
            public: int TriadVisibility
            (
            );
            /**Sets    <br> License requirements : None */
            public: void SetTriadVisibility
            (
                int triadVisibility /** triad visibility */ 
            );
            /**Returns    <br> License requirements : None */
            public: int RotationPointDelay
            (
            );
            /**Sets    <br> License requirements : None */
            public: void SetRotationPointDelay
            (
                int rotationPointDelay /** rotation point delay */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
