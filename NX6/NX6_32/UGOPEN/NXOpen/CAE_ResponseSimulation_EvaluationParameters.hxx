#ifndef NXOpen_CAE_RESPONSESIMULATION_EVALUATIONPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_EVALUATIONPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_EvaluationParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ResponseSimulation_EvaluationParameters.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class EvaluationParameters;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _EvaluationParametersBuilder;
            /** Represents the evaluation parameters for a response simulation meta solution  <br> Not support KF. <br> */
            class NXOPENCPPEXPORT EvaluationParameters : public TaggedObject
            {
                /** the integration method used for transient analysis */
                public: enum AnalysisIntegrationMethod
                {
                    AnalysisIntegrationMethodDuhameldIntegral/** duhameld integral */ ,
                    AnalysisIntegrationMethodNewmarkBeta/** newmark beta */ 
                };

                private: friend class  _EvaluationParametersBuilder;
                protected: EvaluationParameters();
                /**Returns  the integration method used for transient analysis  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::EvaluationParameters::AnalysisIntegrationMethod IntegrationMethod
                (
                );
                /**Sets  the integration method used for transient analysis  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetIntegrationMethod
                (
                    NXOpen::CAE::ResponseSimulation::EvaluationParameters::AnalysisIntegrationMethod method /** method */ 
                );
                /**Returns  the minimum damping ratio status  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool MinDampingStatus
                (
                );
                /**Sets  the minimum damping ratio status  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetMinDampingStatus
                (
                    bool dampingStatus /** damping status */ 
                );
                /**Returns  the time-domain integration of acceleration excitations,
                            used in evaluating time responses to acceleration loads. 
                            false: no correction, meaning that "rigid drifting" shows in the
                                   displacement response when an acceleration excitation is applied;
                            true:  the software corrects for drifting by assuming a zero mean. Rigid drifting is filtered
                                   out based on a numerical integration that does not assume an initial condition. <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool ZeroMeanCorrection
                (
                );
                /**Sets  the time-domain integration of acceleration excitations,
                            used in evaluating time responses to acceleration loads. 
                            false: no correction, meaning that "rigid drifting" shows in the
                                   displacement response when an acceleration excitation is applied;
                            true:  the software corrects for drifting by assuming a zero mean. Rigid drifting is filtered
                                   out based on a numerical integration that does not assume an initial condition. <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetZeroMeanCorrection
                (
                    bool correctionValue /** correction value */ 
                );
                /**Returns  the buffer allocated for Hypermatrix files  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int HypermatrixBufferSize
                (
                );
                /**Sets  the buffer allocated for Hypermatrix files  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetHypermatrixBufferSize
                (
                    int bufferSize /** buffer size */ 
                );
                /**Returns  the dynamic storage array size allocated for RS evaluations  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int MaxArraySize
                (
                );
                /**Sets  the dynamic storage array size allocated for RS evaluations  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetMaxArraySize
                (
                    int maxArraySize /** max array size */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
