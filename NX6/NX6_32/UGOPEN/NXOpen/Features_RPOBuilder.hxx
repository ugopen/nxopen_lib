#ifndef NXOpen_FEATURES_RPOBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RPOBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RPOBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_RPODimension.hxx>
#include <NXOpen/PositioningDimension.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class RPODimension;
    }
    class IReferenceAxis;
    class NXObject;
    namespace Features
    {
        class _RPOBuilderBuilder;
        /** Represents a RPO builder. 
         It provides methods to create positioning dimensions to position the feature which is being created. 
         <br> This is an abstract class, and cannot be instantiated <br> */
        class NXOPENCPPEXPORT RPOBuilder : public Features::FeatureBuilder
        {
            /** Represents the associativity type for a dimension entity */
            public: enum AssociativityType
            {
                AssociativityTypeEndPoint/** End-point (determined from 3d help point)*/,
                AssociativityTypeArcCenter/** Arc-center */,
                AssociativityTypeTangency/** Tangency */,
                AssociativityTypeEndPoint1/** 1st end point (at minimum parameter value) */,
                AssociativityTypeEndPoint2/** 2nd end point */,
                AssociativityTypeVerticalCenterline1/** vertical centerline end point 1 */,
                AssociativityTypeVerticalCenterline2/** vertical centerline end point 2 */,
                AssociativityTypeHorizontalCenterline1/** horizontal centerline end point 1 */,
                AssociativityTypeHorizontalCenterline2/** horizontal centerline end point 2 */
            };

            private: friend class  _RPOBuilderBuilder;
            protected: RPOBuilder();
            /** Sets the target and tool entities. This is the first step in creating a positioning dimension. 
                    A positioning dimension constraints two entities. These two entities are referred to as target and tool 
                    enitities. The tool entity is selected from the tool body which is being created. For example, if a Pad is 
                    being created then the tool entity can be an edge of the Pad. The target entity is an entity which does
                    not belong to the tool body which is being created.
                 <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetAndTool
            (
                NXOpen::PositioningDimension::Subtype subtype /** Subtype of dimension */,
                NXOpen::NXObject * target /** Target entity */,
                NXOpen::Features::RPOBuilder::AssociativityType targetAssociativity /** Associativity for target entity */,
                const NXOpen::Point3d & targetHelpPoint /** Help point for taregt entity */,
                NXOpen::NXObject * tool /** Tool entity */,
                NXOpen::Features::RPOBuilder::AssociativityType toolAssociativity /** Associativity for tool entity */,
                const NXOpen::Point3d & toolHelpPoint /** Help point for tool entity */
            );
            /** Sets the expression value in order to constrain the target and tool entities 
                    which are set using @link NXOpen::Features::RPOBuilder::SetTargetAndTool NXOpen::Features::RPOBuilder::SetTargetAndTool@endlink . 
                    This is the second step in creating a positioning dimension.
                    This step is not needed for @link PositioningDimension::SubtypePointOntoPoint PositioningDimension::SubtypePointOntoPoint@endlink , 
                    @link PositioningDimension::SubtypePointOntoLine PositioningDimension::SubtypePointOntoLine@endlink 
                    and @link PositioningDimension::SubtypeLineOntoLine PositioningDimension::SubtypeLineOntoLine@endlink   <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetExpression
            (
                const NXString & expression /** Expression string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a positioning dimension. 
                    This is third and the last step in creating a positioning dimension.  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void CreatePositioningDimension
            (
            );
            /** Displays all the positioning dimensions  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void ShowPositioningDimensions
            (
            );
            /** Hides display of all the positioning dimensions  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void HidePositioningDimensions
            (
            );
            /** Query/Set a horizontal or vertical reference for the feature. A reference is required to be set
                    before creating a Horizontal or Vertical positioning dimension.   <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void GetReferenceDirection
            (
                NXOpen::IReferenceAxis ** reference /** Reference entity */,
                NXOpen::AxisOrientation* orientation /** Orientation of reference */
            );
            /** Sets a horizontal or vertical reference for the feature. A reference is required to be set
                    before creating a  @link PositioningDimension::SubtypeHorizontal PositioningDimension::SubtypeHorizontal@endlink  or 
                    @link PositioningDimension::SubtypeVertical PositioningDimension::SubtypeVertical@endlink  subtype of positioning dimension.  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetReferenceDirection
            (
                NXOpen::IReferenceAxis * reference /** Reference entity */,
                NXOpen::AxisOrientation orientation /** Orientation of reference */
            );
            /** Undo the last positioning dimension  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void UndoLastDimension
            (
            );
            /** Transforms the feature by applying the positioning dimensions  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void ApplyDimensions
            (
            );
            /** 
                    Gets the list of RPO dimemsions
                 @return  The RPO dimensions  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::RPODimension *> GetRpoDimensions
            (
            );
            /** 
                    Sets the list of RPO dimemsions
                 <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetRpoDimensions
            (
                const std::vector<NXOpen::Features::RPODimension *> & dimensions /** The RPO dimensions */
            );
            /** Creates a new empty RPODimension object  @return  The RPO dimensions  <br> License requirements : None */
            public: NXOpen::Features::RPODimension * CreateDimension
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
