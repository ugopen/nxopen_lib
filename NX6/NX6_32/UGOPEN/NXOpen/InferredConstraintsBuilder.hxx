#ifndef NXOpen_INFERREDCONSTRAINTSBUILDER_HXX_INCLUDED
#define NXOpen_INFERREDCONSTRAINTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     InferredConstraintsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/InferredConstraintsBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class InferredConstraintsBuilder;
    class Builder;
    class _InferredConstraintsBuilderBuilder;
    /**
        Represents a @link InferredConstraintsBuilder InferredConstraintsBuilder@endlink 
         <br> To create a new instance of this class, use @link SketchCollection::CreateInferredConstraintsBuilder SketchCollection::CreateInferredConstraintsBuilder@endlink  <br> */
    class NXOPENCPPEXPORT InferredConstraintsBuilder : public Builder
    {
        private: friend class  _InferredConstraintsBuilderBuilder;
        protected: InferredConstraintsBuilder();
        /**Returns  the horizontal infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all horizonal entities created after
                this command. <br> License requirements : None */
        public: bool Horizontal
        (
        );
        /**Sets  the horizontal infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all horizonal entities created after
                this command. <br> License requirements : None */
        public: void SetHorizontal
        (
            bool horizontal /** horizontal */ 
        );
        /**Returns  the vertical infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all vertical entities created after
                this command.  <br> License requirements : None */
        public: bool Vertical
        (
        );
        /**Sets  the vertical infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all vertical entities created after
                this command.  <br> License requirements : None */
        public: void SetVertical
        (
            bool vertical /** vertical */ 
        );
        /**Returns  the tangent infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all tangent entities created after
                this command.  <br> License requirements : None */
        public: bool Tangent
        (
        );
        /**Sets  the tangent infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all tangent entities created after
                this command.  <br> License requirements : None */
        public: void SetTangent
        (
            bool tangent /** tangent */ 
        );
        /**Returns  the parallel infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all parallel entities created after
                this command.  <br> License requirements : None */
        public: bool Parallel
        (
        );
        /**Sets  the parallel infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all parallel entities created after
                this command.  <br> License requirements : None */
        public: void SetParallel
        (
            bool parallel /** parallel */ 
        );
        /**Returns  the perpendicular infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all perpendicular entities created after
                this command.  <br> License requirements : None */
        public: bool Perpendicular
        (
        );
        /**Sets  the perpendicular infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all perpendicular entities created after
                this command.  <br> License requirements : None */
        public: void SetPerpendicular
        (
            bool perpendicular /** perpendicular */ 
        );
        /**Returns  the collinear infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all collinear entities created after
                this command.  <br> License requirements : None */
        public: bool Collinear
        (
        );
        /**Sets  the collinear infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all collinear entities created after
                this command.  <br> License requirements : None */
        public: void SetCollinear
        (
            bool collinear /** collinear */ 
        );
        /**Returns  the concentric infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all concentric entities created after
                this command.  <br> License requirements : None */
        public: bool Concentric
        (
        );
        /**Sets  the concentric infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all concentric entities created after
                this command.  <br> License requirements : None */
        public: void SetConcentric
        (
            bool concentric /** concentric */ 
        );
        /**Returns  the equal length infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all entities having equal length and created after
                this command.  <br> License requirements : None */
        public: bool EqualLength
        (
        );
        /**Sets  the equal length infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all entities having equal length and created after
                this command.  <br> License requirements : None */
        public: void SetEqualLength
        (
            bool equalLength /** equallength */ 
        );
        /**Returns  the equal radius infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all entities with equal radius and created after
                this command.  <br> License requirements : None */
        public: bool EqualRadius
        (
        );
        /**Sets  the equal radius infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all entities with equal radius and created after
                this command.  <br> License requirements : None */
        public: void SetEqualRadius
        (
            bool equalRadius /** equalradius */ 
        );
        /**Returns  the dimensional constraint infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create dimensional constraints automatically for entities created after
                this command.  <br> License requirements : None */
        public: bool DimensionalConstraint
        (
        );
        /**Sets  the dimensional constraint infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create dimensional constraints automatically for entities created after
                this command.  <br> License requirements : None */
        public: void SetDimensionalConstraint
        (
            bool dimensionalConstraint /** dimensionalconstraint */ 
        );
        /**Returns  the point on curve infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all points on curves created after
                this command.  <br> License requirements : None */
        public: bool PointOnCurve
        (
        );
        /**Sets  the point on curve infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all points on curves created after
                this command.  <br> License requirements : None */
        public: void SetPointOnCurve
        (
            bool pointOnCurve /** pointoncurve */ 
        );
        /**Returns  the coincident infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all coincident entities created after
                this command.  <br> License requirements : None */
        public: bool Coincident
        (
        );
        /**Sets  the coincident infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all coincident entities created after
                this command.  <br> License requirements : None */
        public: void SetCoincident
        (
            bool coincident /** coincident */ 
        );
        /**Returns  the midpoint infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all midpoints created after
                this command.  <br> License requirements : None */
        public: bool Midpoint
        (
        );
        /**Sets  the midpoint infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all midpoints created after
                this command.  <br> License requirements : None */
        public: void SetMidpoint
        (
            bool midpoint /** midpoint */ 
        );
        /**Returns  the point on string infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all points on strings created after
                this command.  <br> License requirements : None */
        public: bool PointOnString
        (
        );
        /**Sets  the point on string infer-constraint setting. If this constraint flag is switched ON, sketcher
                will create this constraint automatically for all points on strings created after
                this command.  <br> License requirements : None */
        public: void SetPointOnString
        (
            bool pointOnString /** pointonstring */ 
        );
        /**Returns  the reference outside work part setting. If this constraint flag is switched ON, sketcher
                will permit selection of entities outside the current work part. 
         @deprecated Deprecated in NX6 <br> 
         <br> License requirements : None */
        public: bool ExternalReference
        (
        );
        /**Sets  the reference outside work part setting. If this constraint flag is switched ON, sketcher
                will permit selection of entities outside the current work part. 
         @deprecated Deprecated in NX6 <br> 
         <br> License requirements : None */
        public: void SetExternalReference
        (
            bool externalReference /** externalreference */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
