#ifndef NXOpen_ROUTING_INTERFACETERMINALRELATIONSHIPBASE_HXX_INCLUDED
#define NXOpen_ROUTING_INTERFACETERMINALRELATIONSHIPBASE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_InterfaceTerminalRelationshipBase.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_ObjectRelationship.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class InterfaceTerminalRelationshipBase;
    }
    namespace Routing
    {
        class InterfaceTerminalShadow;
    }
    namespace Routing
    {
        class ObjectRelationship;
    }
    namespace Routing
    {
        class _InterfaceTerminalRelationshipBaseBuilder;
        /** 
                The abstract class @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  relates many
                @link Routing::Port Routing::Port@endlink s to one @link Routing::Port Routing::Port@endlink .
                
                 <br> 
                See NX Routing help for the Connectivity data model documentation.
                 <br> 
             <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT InterfaceTerminalRelationshipBase : public Routing::ObjectRelationship
        {
            /** Type of interface terminal relationships as per STEP 212 Standards.
                        Currently, only decomposition is implemented, other types will be added
                        in future releases as required.
                      */
            public: enum RelationType
            {
                RelationTypeDecomposition/** decomposition */ 
            };

            private: friend class  _InterfaceTerminalRelationshipBaseBuilder;
            protected: InterfaceTerminalRelationshipBase();
            /**Returns  the type of the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object.
                         <br> 
                        Interface Terminal Relationship can be of following types:
                        @link Routing::InterfaceTerminalRelationshipBase::RelationTypeDecomposition Routing::InterfaceTerminalRelationshipBase::RelationTypeDecomposition@endlink 
                         <br> 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::InterfaceTerminalRelationshipBase::RelationType RelationshipType
            (
            );
            /**Sets  the type of the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object.
                         <br> 
                        Interface Terminal Relationship can be of following types:
                        @link Routing::InterfaceTerminalRelationshipBase::RelationTypeDecomposition Routing::InterfaceTerminalRelationshipBase::RelationTypeDecomposition@endlink 
                         <br> 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetRelationshipType
            (
                NXOpen::Routing::InterfaceTerminalRelationshipBase::RelationType relationshipType /** relationship type */ 
            );
            /** Gets the @link Routing::Port Routing::Port@endlink  in the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink 
                        with a relationship of relating.
                         <br> 
                        A @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object can have only one relating @link Routing::Port Routing::Port@endlink 
                        associated with one or more related @link Routing::Port Routing::Port@endlink s.
                         <br> 
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::InterfaceTerminalShadow * GetRelatingInterfaceTerminal
            (
            );
            /**   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetRelatingInterfaceTerminal
            (
                NXOpen::Routing::InterfaceTerminalShadow * relatingInterfaceTerminal /** relating interface terminal */ 
            );
            /** Gets the list of @link Routing::Port Routing::Port@endlink s in the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink 
                        object with a relationship of related.
                         <br> 
                        A @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object can have one or more related @link Routing::Port Routing::Port@endlink s
                        associated with a single relating @link Routing::Port Routing::Port@endlink .
                         <br> 
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::InterfaceTerminalShadow *> GetRelatedInterfaceTerminals
            (
            );
            /** Adds a @link Routing::Port Routing::Port@endlink  to the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object
                        with a relationship of related.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AddRelatedInterfaceTerminal
            (
                NXOpen::Routing::InterfaceTerminalShadow * relatedInterfaceTerminal /** related interface terminal */ 
            );
            /** Removes a related @link Routing::Port Routing::Port@endlink  from the list of related terminals in the
                        @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink  object.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void RemoveRelatedInterfaceTerminal
            (
                NXOpen::Routing::InterfaceTerminalShadow * relatedInterfaceTerminal /** related interface terminal */ 
            );
            /** Replaces the existing related @link Routing::Port Routing::Port@endlink s in the @link Routing::InterfaceTerminalRelationshipBase Routing::InterfaceTerminalRelationshipBase@endlink 
                        object with input ones.
                         <br> 
                        Removes all the related @link Routing::Port Routing::Port@endlink s in a relationship and replaces them with the set
                        of input @link Routing::Port Routing::Port@endlink s.
                         <br> 
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ReplaceRelatedInterfaceTerminals
            (
                const std::vector<NXOpen::Routing::InterfaceTerminalShadow *> & relatedInterfaceTerminals /** related interface terminals */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
