#ifndef NXOpen_TOOLING_LAYOUTREPOSITIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_LAYOUTREPOSITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_LayoutRepositionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_LayoutRepositionBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class LayoutRepositionBuilder;
    }
    class Builder;
    class Expression;
    class Point;
    class SelectBodyList;
    namespace Tooling
    {
        class _LayoutRepositionBuilderBuilder;
        /** Represents a Tooling::LayoutRepositionBuilder builder  <br> To create a new instance of this class, use @link Tooling::MWLayoutCollection::CreateLayoutRepositionBuilder Tooling::MWLayoutCollection::CreateLayoutRepositionBuilder@endlink  <br> 
        Default values:
        DimX.RightHandSide: 0 (millimeters part), 0 (inches part)
        DimY.RightHandSide: 0 (millimeters part), 0 (inches part)
        RepositionType: Move
        RotateAngle.RightHandSide: 180
        */
        class NXOPENCPPEXPORT LayoutRepositionBuilder : public Builder
        {
            /** The JA_LAYOUT_REPOSITION_BUILDER_method is an index to the type of layout transform. */
            public: enum Method
            {
                MethodRotate/** Rotate method */,
                MethodTransform/** Transform method */,
                MethodPointToPoint/** Point to Point method */
            };

            /** The JA_LAYOUT_REPOSITION_BUILDER_type is an index to the method of layout transform. */
            public: enum Type
            {
                TypeMove/** Move type */,
                TypeCopy/** Copy type */
            };

            private: friend class  _LayoutRepositionBuilderBuilder;
            protected: LayoutRepositionBuilder();
            /**Returns  the select instance  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectInstance
            (
            );
            /**Returns  the reposition method  <br> License requirements : None */
            public: NXOpen::Tooling::LayoutRepositionBuilder::Method RepositionMethod
            (
            );
            /**Sets  the reposition method  <br> License requirements : None */
            public: void SetRepositionMethod
            (
                NXOpen::Tooling::LayoutRepositionBuilder::Method enumRepositionmethod /** enumrepositionmethod */ 
            );
            /**Returns  the reposition type  <br> License requirements : None */
            public: NXOpen::Tooling::LayoutRepositionBuilder::Type RepositionType
            (
            );
            /**Sets  the reposition type  <br> License requirements : None */
            public: void SetRepositionType
            (
                NXOpen::Tooling::LayoutRepositionBuilder::Type enumRepositiontype /** enumrepositiontype */ 
            );
            /**Returns  the rotate point  <br> License requirements : None */
            public: NXOpen::Point * RotatePoint
            (
            );
            /**Sets  the rotate point  <br> License requirements : None */
            public: void SetRotatePoint
            (
                NXOpen::Point * rotatePoint /** rotatepoint */ 
            );
            /**Returns  the rotate angle  <br> License requirements : None */
            public: NXOpen::Expression * RotateAngle
            (
            );
            /**Returns  the distance dimension in X-axis  <br> License requirements : None */
            public: NXOpen::Expression * DimX
            (
            );
            /**Returns  the distance dimension in Y-axis  <br> License requirements : None */
            public: NXOpen::Expression * DimY
            (
            );
            /**Returns  the transform start point  <br> License requirements : None */
            public: NXOpen::Point * PointFrom
            (
            );
            /**Sets  the transform start point  <br> License requirements : None */
            public: void SetPointFrom
            (
                NXOpen::Point * pointFrom /** pointfrom */ 
            );
            /**Returns  the transform end point  <br> License requirements : None */
            public: NXOpen::Point * PointTo
            (
            );
            /**Sets  the transform end point  <br> License requirements : None */
            public: void SetPointTo
            (
                NXOpen::Point * pointTo /** pointto */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
