#ifndef NXOpen_DEBUGSESSION_HXX_INCLUDED
#define NXOpen_DEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CallbackTest.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Features_SelectionTestBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class DebugSession;
    class AutotestPrint;
    class CallbackTest;
    namespace Display
    {
        class SelectFontFileBuilder;
    }
    class ErrorList;
    namespace Features
    {
        class Joe;
    }
    namespace Features
    {
        class JoeBuilder;
    }
    namespace Features
    {
        class SelectionTest;
    }
    namespace Features
    {
        class SelectionTestBuilder;
    }
    class NXObject;
    class PDMDebugSession;
    class Part;
    class _DebugSessionBuilder;
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers */
    class NXOPENDEBUGSESSIONCPPEXPORT DebugSession : public TaggedObject
    {
        /**Mode for update fidelity analysis*/
        public: enum FidelityMode
        {
            FidelityModeNone = -1/**None*/,
            FidelityModeSaveResult/**Save old data*/,
            FidelityModeCompareResult/**Compare with current output.*/
        };

        private: static DebugSession *theDebugSession;
        public: static DebugSession *GetDebugSession();
        private: friend class  _DebugSessionBuilder;
        protected: DebugSession();
        /** Does all world checks  <br> License requirements : None */
        public: void DoAllWorldChecks
        (
        );
        /** Used for ErrorList unit testing.
            Adds an error to the ErrorList  <br> License requirements : None */
        public: void AddErrorToList
        (
            NXOpen::ErrorList * errorList /** error list */ ,
            NXOpen::NXObject * failingObject /** failing object */ ,
            const NXString & failingObjectDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int errorCode /** error code */ ,
            const NXString & errorDescription /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Used for ErrorList unit testing.
            Performs an internal test of the ErrorList module  <br> License requirements : None */
        public: void ErrorListModuleTest
        (
        );
        /** Set a Runtime Debug Token to true or false <br> License requirements : None */
        public: void RdebugSetFlag
        (
            const NXString & name /** Runtime Debug Token   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int value /** value for Runtime Debug Token */
        );
        /** Creates a Joe builder  @return  JoeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::JoeBuilder * CreateJoeBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::Joe * joe /** @link Features::Joe Features::Joe@endlink  to be edited */
        );
        /** Creates a selection test builder  @return  new SelectionTest builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::SelectionTestBuilder * CreateSelectionTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SelectionTest * selectionTest /** @link SelectionTest SelectionTest@endlink 
                                                              to be edited, if NULL  then create a new one */
        );
        /** Creates a CallbackTest  @return  CallbackTest object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CallbackTest * CreateCallbackTest
        (
        );
        /** Feature Publishing Validation  <br> License requirements : None */
        public: void SetFeatPubVal
        (
            bool featVal /** Feature Publishing Validation On/Off */
        );
        /** Saves fidelity data or compares against saved data for every feature in the part.  <br> License requirements : None */
        public: void Fidelity
        (
            NXOpen::DebugSession::FidelityMode mode /**Mode in which to execute tool.*/,
            bool detailedReport /**true if detailed report is expected.*/,
            double tolerance /**desired tolerance for comparison.*/,
            bool isAutoTest /**Is this API being called in auto test mode*/
        );
        /** Creates a select font file builder 
                This builder alwasy creats a new builder, as we have no need to edit one. @return  SelectFontFileBuilder object  <br> License requirements : None */
        public: NXOpen::Display::SelectFontFileBuilder * CreateSelectFontFileBuilder
        (
            NXOpen::Part * part /** the part that will own the builder */
        );
        /** Start collecting all the new parts created in the session. 
                Applicable only in NX/Manager mode, so that these parts can
                be deleted from the database at the end of the athena test  <br> License requirements : None */
        public: void StartAthenaTest
        (
        );
        /** Delete all the new parts collected in the session. Applicable
                only in NX/Manager mode. The parts created by the athena test
                will be deleted by using this call.  <br> License requirements : None */
        public: void EndAthenaTest
        (
        );


        private: NXOpen::AutotestPrint *autotestPrint;
        /** Returns the @link AutotestPrint AutotestPrint@endlink  belonging to this debug session */
        public: NXOpen::AutotestPrint *AutotestPrint()
        {
            return autotestPrint;
        }
        private: NXOpen::PDMDebugSession *pDMDebug;
        /** Returns the @link PDMDebugSession PDMDebugSession@endlink  object belonging to this debug session */
        public: NXOpen::PDMDebugSession *PDMDebug()
        {
            return pDMDebug;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
