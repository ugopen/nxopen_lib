#ifndef NXOpen_REFERENCESET_HXX_INCLUDED
#define NXOpen_REFERENCESET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ReferenceSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ReferenceSet;
    class DisplayableObject;
    class NXObject;
    class _ReferenceSetBuilder;
    /** Represents a @link ReferenceSet ReferenceSet@endlink  <br> This is no KF creation <br> */
    class NXOPENCPPEXPORT ReferenceSet : public DisplayableObject
    {
        private: friend class  _ReferenceSetBuilder;
        protected: ReferenceSet();
        /** Addition of objects to reference set <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: void AddObjectsToReferenceSet
        (
            const std::vector<NXOpen::NXObject *> & components /** Array of the selected objects to be added in the refernce set */
        );
        /** Removal of objects from reference set <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: void RemoveObjectsFromReferenceSet
        (
            const std::vector<NXOpen::NXObject *> & components /** Array of the selected objects to be removed from the refernce set */
        );
        /** Query of reference set members  @return  Members of reference set <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> AskMembersInReferenceSet
        (
        );
        /** Sets the add components automatically toggle value. This controls whether new components added to the part will automatically get added to this reference set.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: void SetAddComponentsAutomatically
        (
            bool newValue /** The new setting for the add components automatically property */,
            bool addExistingComponents /** Specifies whether existing components should be added to the reference set, and only applies when newValue is true */
        );
        /** Returns the add components automatically toggle value. This controls whether new components added to the part will automatically get added to this reference set.  @return  The current setting for the add components automatically property  <br> License requirements : None */
        public: bool GetAddComponentsAutomatically
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
