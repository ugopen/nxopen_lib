#ifndef NXOpen_ROUTING_BENDCORNER_HXX_INCLUDED
#define NXOpen_ROUTING_BENDCORNER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_BendCorner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_Corner.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class BendCorner;
    }
    class Curve;
    namespace Routing
    {
        class Corner;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class _BendCornerBuilder;
        /** 
                Computes a fillet curve between to linear segments to form a smooth
                bend transition from one segment to another.
              <br> To create a new instance of this class, use @link Routing::BendCornerCollection::Create Routing::BendCornerCollection::Create@endlink  <br> */
        class NXOPENCPPEXPORT BendCorner : public Routing::Corner
        {
            private: friend class  _BendCornerBuilder;
            protected: BendCorner();
            /** The bend segment following the fillet curve created for the bend.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ISegment * GetSegment
            (
            );
            /**Returns  whether or not to compute the bend radius as a ratio of the stock diameter.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool UseBendRatio
            (
            );
            /**Sets  whether or not to compute the bend radius as a ratio of the stock diameter.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetUseBendRatio
            (
                bool useBendRatio /** the use bend ratio. */
            );
            /**Returns  the bend ratio to apply when computing the bend radius  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double BendRatio
            (
            );
            /**Sets  the bend ratio to apply when computing the bend radius  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetBendRatio
            (
                double bendRatio /** the bend ratio. */
            );
            /**Returns  the bend radius of the corner.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double BendRadius
            (
            );
            /**Sets  the bend radius of the corner.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetBendRadius
            (
                double bendRadius /** the the bend radius. */
            );
            /** Returns the straight line segments attached to the fillet curve
                       of this bend corner.   @return  the side segments. There will be from 0 to 2 
                                                               total side segments.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Curve *> FindSideSegments
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
