#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_AlongCurveBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CircularGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_IsoparametricGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_ParallelPlanesBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_QuadrilateralGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionAnalysisBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_TriangularGridBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisBuilder;
        }
    }
    class Builder;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class AlongCurveBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CircularGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class IsoparametricGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class ParallelPlanesBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class QuadrilateralGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class TriangularGridBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class SelectTaggedObjectList;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionAnalysisBuilderBuilder;
            /** Represents a @link GeometricAnalysis::SectionAnalysisObject GeometricAnalysis::SectionAnalysisObject@endlink  builder.  <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder@endlink  <br> 
            Default values:
            AlongCurve.CurveRange.AnchorPosition: Start
            AlongCurve.Method: Perpendicular
            AlongCurve.Spacing.BoundSections1: False
            AlongCurve.Spacing.BoundSections2: True
            AlongCurve.Spacing.Interval1: 25.0
            AlongCurve.Spacing.Interval2: 50.0 (millimeters part), 2.0 (inches part)
            AlongCurve.Spacing.LockInterval1: False
            AlongCurve.Spacing.LockInterval2: False
            AlongCurve.Spacing.SectionNumber1: 5
            AlongCurve.Spacing.SectionNumber2: 5
            CircularGrid.CircularFrame.AnchorAttachment: None
            CircularGrid.CircularFrame.Subtype: Arbitrary
            CircularGrid.Spacing.Interval1: 45.0
            IsoparametricGrid.Method: UV
            IsoparametricGrid.Spacing.Interval1: 25.0
            IsoparametricGrid.Spacing.Interval2: 25.0
            IsoparametricGrid.SurfaceRange.AnchorPosition: Vertex1
            ParallelPlanes.IsXDirectionEnabled: True
            ParallelPlanes.IsYDirectionEnabled: True
            ParallelPlanes.IsZDirectionEnabled: True
            ParallelPlanes.Method: Parallel
            ParallelPlanes.Spacing.Interval1: 50.0 (millimeters part), 2.0 (inches part)
            ParallelPlanes.Spacing.Interval2: 50.0 (millimeters part), 2.0 (inches part)
            ParallelPlanes.Spacing.Interval3: 50.0 (millimeters part), 2.0 (inches part)
            ParallelPlanes.Spacing.IsSectionNumberSpecified1: False
            ParallelPlanes.Spacing.IsSectionNumberSpecified2: False
            ParallelPlanes.Spacing.IsSectionNumberSpecified3: False
            ParallelPlanes.Spacing.SectionNumber1: 5
            ParallelPlanes.Spacing.SectionNumber2: 5
            ParallelPlanes.Spacing.SectionNumber3: 5
            QuadrilateralGrid.QuadrilateralFrame.AnchorAttachment: None
            QuadrilateralGrid.QuadrilateralFrame.Subtype: Arbitrary
            ShowInflectionPoints: False
            ShowPeakPoints: False
            ShowSectionLength: False
            TriangularGrid.TriangularFrame.AnchorAttachment: None
            TriangularGrid.TriangularFrame.Subtype: Arbitrary
            Type: Parallel
            */
            class NXOPENCPPEXPORT SectionAnalysisBuilder : public Builder
            {
                /** Represents the sectioning types */
                public: enum Types
                {
                    TypesParallel/** Parallel Planes */,
                    TypesIsoparametric/** Isoparametric */,
                    TypesAlongCurve/** Along Curve */,
                    TypesQuadrilateral/** Quadrilateral */,
                    TypesTriangular/** Triangular */,
                    TypesCircular/** Circular */
                };

                private: friend class  _SectionAnalysisBuilderBuilder;
                protected: SectionAnalysisBuilder();
                /**Returns  the sectioning type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types Type
                (
                );
                /**Sets  the sectioning type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetType
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types type /** type */ 
                );
                /**Returns  the references (faces or faceted bodies)  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::SelectTaggedObjectList * References
                (
                );
                /**Returns  the parallel planes section specifications. 
                                Only used when type is @link SectionAnalysisBuilder::TypesParallel SectionAnalysisBuilder::TypesParallel@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::ParallelPlanesBuilder * ParallelPlanes
                (
                );
                /**Returns  the isoparametric grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesIsoparametric SectionAnalysisBuilder::TypesIsoparametric@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::IsoparametricGridBuilder * IsoparametricGrid
                (
                );
                /**Returns  the along curve section specifications. 
                                Only used when type is @link SectionAnalysisBuilder::TypesAlongCurve SectionAnalysisBuilder::TypesAlongCurve@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::AlongCurveBuilder * AlongCurve
                (
                );
                /**Returns  the quadrilateral grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesQuadrilateral SectionAnalysisBuilder::TypesQuadrilateral@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::QuadrilateralGridBuilder * QuadrilateralGrid
                (
                );
                /**Returns  the triangular grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesTriangular SectionAnalysisBuilder::TypesTriangular@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::TriangularGridBuilder * TriangularGrid
                (
                );
                /**Returns  the circular grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesCircular SectionAnalysisBuilder::TypesCircular@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::CircularGridBuilder * CircularGrid
                (
                );
                /**Returns  the comb options  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
                (
                );
                /**Returns  the flag to show the peak points of the sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowPeakPoints
                (
                );
                /**Sets  the flag to show the peak points of the sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowPeakPoints
                (
                    bool showPeakPoints /** showpeakpoints */ 
                );
                /**Returns  the flag to show the inflection points of planar sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowInflectionPoints
                (
                );
                /**Sets  the flag to show the inflection points of planar sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowInflectionPoints
                (
                    bool showInflectionPoints /** showinflectionpoints */ 
                );
                /**Returns  the flag to show the section length labels  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowSectionLength
                (
                );
                /**Sets  the flag to show the section length labels  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowSectionLength
                (
                    bool showSectionLength /** showsectionlength */ 
                );
                /** Create curves from the sections of Section Analysis object  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void CreateCurves
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
