#ifndef NXOpen_FEATURES_SECTIONINERTIAANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SECTIONINERTIAANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SectionInertiaAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SectionInertiaAnalysisBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SectionInertiaAnalysisBuilder;
    }
    namespace Annotations
    {
        class PmiNote;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _SectionInertiaAnalysisBuilderBuilder;
        /**
            Represents a @link Features::SectionInertiaAnalysis Features::SectionInertiaAnalysis@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSectionInertiaAnalysisBuilder Features::FeatureCollection::CreateSectionInertiaAnalysisBuilder@endlink  <br> 
        Default values:
        AnnoLayer: 101
        CenterOfGravity: True
        DatumPlaneLayer: 101
        DatumPlanes: False
        NSection: 5
        PrincipalAxes: False
        RectangleLayer: 101
        RectangularSection: False
        SecondPrincipleMi: True
        SectionArea: True
        SectionLayer: 101
        SectionLength: True
        Sections: False
        ShearCenter: False
        */
        class NXOPENCPPEXPORT SectionInertiaAnalysisBuilder : public Features::FeatureBuilder
        {
            /**The type of Section Inertia Analysis to be performed.*/
            public: enum Types
            {
                TypesParallelSections/**Parallel Sections Type*/,
                TypesSectionsAlongCurve/**Sections Along Path Type*/,
                TypesExistingSection/**Existing Section Type*/
            };

            /**The coordinate system associated with the analysis.*/
            public: enum CoordSys
            {
                CoordSysAbsolute/**Absolute Coordinate System*/,
                CoordSysCurrentWCS/**World Coordinate System*/
            };

            /**Slice direction in case of parallel section type of analysis.*/
            public: enum SectionAxisNormal
            {
                SectionAxisNormalXc/**Along X Axis*/,
                SectionAxisNormalYc/**Along Y Axis*/,
                SectionAxisNormalZc/**Along Z Axis*/
            };

            /**Type of sampling method to be used in sections along curve type of analysis.*/
            public: enum SampleMethod
            {
                SampleMethodByDistance/**Sample according to Distance*/,
                SampleMethodByNumber/**Sample according to Number of slices*/
            };

            /**Type of Analysis property.*/
            public: enum PropertyType
            {
                PropertyTypeHollow/**Hollow analysis*/,
                PropertyTypeSolid/**Solid analysis*/
            };

            private: friend class  _SectionInertiaAnalysisBuilderBuilder;
            protected: SectionInertiaAnalysisBuilder();
            /**Returns  the analysis  <br> License requirements : None */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder::Types Type
            (
            );
            /**Sets  the analysis  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::SectionInertiaAnalysisBuilder::Types type /** type */ 
            );
            /**Returns  the curve collector  <br> License requirements : None */
            public: NXOpen::Section * CurveCollector
            (
            );
            /**Returns  the face collector  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceCollector
            (
            );
            /**Returns  the path collector  <br> License requirements : None */
            public: NXOpen::Section * PathCollector
            (
            );
            /**Returns  the c sys  <br> License requirements : None */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder::CoordSys CSys
            (
            );
            /**Sets  the c sys  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCSys
            (
                NXOpen::Features::SectionInertiaAnalysisBuilder::CoordSys csys /** csys */ 
            );
            /**Returns  the section normal  <br> License requirements : None */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder::SectionAxisNormal SectionNormal
            (
            );
            /**Sets  the section normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionNormal
            (
                NXOpen::Features::SectionInertiaAnalysisBuilder::SectionAxisNormal sectionNormal /** sectionnormal */ 
            );
            /**Returns  the sectioning method  <br> License requirements : None */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder::SampleMethod SectioningMethod
            (
            );
            /**Sets  the sectioning method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectioningMethod
            (
                NXOpen::Features::SectionInertiaAnalysisBuilder::SampleMethod sectioningMethod /** sectioningmethod */ 
            );
            /**Returns  the distance  <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the n section  <br> License requirements : None */
            public: int NSection
            (
            );
            /**Sets  the n section  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNSection
            (
                int nSection /** nsection */ 
            );
            /**Returns  the center of gravity  <br> License requirements : None */
            public: bool CenterOfGravity
            (
            );
            /**Sets  the center of gravity  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCenterOfGravity
            (
                bool centerOfGravity /** centerofgravity */ 
            );
            /**Returns  the second principle mi  <br> License requirements : None */
            public: bool SecondPrincipleMi
            (
            );
            /**Sets  the second principle mi  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondPrincipleMi
            (
                bool secondPrincipleMI /** secondprinciplemi */ 
            );
            /**Returns  the shear center  <br> License requirements : None */
            public: bool ShearCenter
            (
            );
            /**Sets  the shear center  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetShearCenter
            (
                bool shearCenter /** shearcenter */ 
            );
            /**Returns  the section length  <br> License requirements : None */
            public: bool SectionLength
            (
            );
            /**Sets  the section length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionLength
            (
                bool sectionLength /** sectionlength */ 
            );
            /**Returns  the section area  <br> License requirements : None */
            public: bool SectionArea
            (
            );
            /**Sets  the section area  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionArea
            (
                bool sectionArea /** sectionarea */ 
            );
            /**Returns  the anno layer  <br> License requirements : None */
            public: int AnnoLayer
            (
            );
            /**Sets  the anno layer  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAnnoLayer
            (
                int annoLayer /** annolayer */ 
            );
            /**Returns  the principal axes  <br> License requirements : None */
            public: bool PrincipalAxes
            (
            );
            /**Sets  the principal axes  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPrincipalAxes
            (
                bool principalAxes /** principalaxes */ 
            );
            /**Returns  the rectangular section  <br> License requirements : None */
            public: bool RectangularSection
            (
            );
            /**Sets  the rectangular section  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRectangularSection
            (
                bool rectangularSection /** rectangularsection */ 
            );
            /**Returns  the rectangle layer  <br> License requirements : None */
            public: int RectangleLayer
            (
            );
            /**Sets  the rectangle layer  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRectangleLayer
            (
                int rectangleLayer /** rectanglelayer */ 
            );
            /**Returns  the sections  <br> License requirements : None */
            public: bool Sections
            (
            );
            /**Sets  the sections  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSections
            (
                bool sections /** sections */ 
            );
            /**Returns  the section layer  <br> License requirements : None */
            public: int SectionLayer
            (
            );
            /**Sets  the section layer  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionLayer
            (
                int sectionLayer /** sectionlayer */ 
            );
            /**Returns  the datum planes  <br> License requirements : None */
            public: bool DatumPlanes
            (
            );
            /**Sets  the datum planes  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDatumPlanes
            (
                bool datumPlanes /** datumplanes */ 
            );
            /**Returns  the datum plane layer  <br> License requirements : None */
            public: int DatumPlaneLayer
            (
            );
            /**Sets  the datum plane layer  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDatumPlaneLayer
            (
                int datumPlaneLayer /** datumplanelayer */ 
            );
            /** The function displays the information box with information about the section intertia analysis performed.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ShowInfo
            (
            );
            /** The function refreshes the graphic screen if any temporary graphics was previously generated by this command.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RefreshScreen
            (
            );
            /** The function checks if temporary graphics was generated.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsTempGraphics
            (
            );
            /**Returns  the mass property type  <br> License requirements : None */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder::PropertyType MassPropertyType
            (
            );
            /**Sets  the mass property type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMassPropertyType
            (
                NXOpen::Features::SectionInertiaAnalysisBuilder::PropertyType massPropertyType /** masspropertytype */ 
            );
            /**Returns  the units for calculations  <br> License requirements : None */
            public: int Units
            (
            );
            /**Sets  the units for calculations  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUnits
            (
                int units /** units */ 
            );
            /**Returns  the validity flag. If the flag is set to false, properties will be recomputed.  <br> License requirements : None */
            public: bool ValidityFlag
            (
            );
            /**Sets  the validity flag. If the flag is set to false, properties will be recomputed.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetValidityFlag
            (
                bool validityFlag /** validity flag */ 
            );
            /**Returns  the thickness. This attribute is always used in hollow analysis while it is used in solid analysis if any of the loops is open.  <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /** The annotations generated can be accessed using this method. @return The annotation notes created. Pass NULL to get only the number. <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::PmiNote *> GetAnnotation
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
