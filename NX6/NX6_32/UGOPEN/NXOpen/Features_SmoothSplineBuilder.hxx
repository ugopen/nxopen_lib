#ifndef NXOpen_FEATURES_SMOOTHSPLINEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SMOOTHSPLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SmoothSplineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SmoothSplineBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SmoothSplineBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    class SelectCurve;
    namespace Features
    {
        class _SmoothSplineBuilderBuilder;
        /**
            Represents a @link Features::SmoothSpline Features::SmoothSpline@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSmoothSplineBuilder Features::FeatureCollection::CreateSmoothSplineBuilder@endlink  <br> 
        Default values:
        CurveRange.AnchorPosition: Start
        ModificationPercentage: 100
        SmoothingFactor: 1
        */
        class NXOPENCPPEXPORT SmoothSplineBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the Smoothing Type option */
            public: enum Types
            {
                TypesCurvature/** Curvature */,
                TypesCurvatureVariation/** Curvature Variation */
            };

            private: friend class  _SmoothSplineBuilderBuilder;
            protected: SmoothSplineBuilder();
            /**Returns  the curve  <br> License requirements : None */
            public: NXOpen::SelectCurve * Curve
            (
            );
            /**Returns  the curve range  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * CurveRange
            (
            );
            /**Returns  the start constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * StartConstraint
            (
            );
            /**Returns  the end constraint  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * EndConstraint
            (
            );
            /**Returns  the smoothing factor  <br> License requirements : None */
            public: int SmoothingFactor
            (
            );
            /**Sets  the smoothing factor  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSmoothingFactor
            (
                int smoothingFactor /** smoothingfactor */ 
            );
            /**Returns  the modification percentage  <br> License requirements : None */
            public: int ModificationPercentage
            (
            );
            /**Sets  the modification percentage  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetModificationPercentage
            (
                int modificationPercentage /** modificationpercentage */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::SmoothSplineBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::SmoothSplineBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
