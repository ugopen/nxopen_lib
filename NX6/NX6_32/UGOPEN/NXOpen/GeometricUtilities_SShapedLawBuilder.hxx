#ifndef NXOpen_GEOMETRICUTILITIES_SSHAPEDLAWBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_SSHAPEDLAWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_SShapedLawBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimWithValueBuilder.hxx>
#include <NXOpen/GeometricUtilities_SShapedLawBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class SShapedLawBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimWithValueBuilder;
    }
    class Section;
    namespace GeometricUtilities
    {
        class _SShapedLawBuilderBuilder;
        /**
                Represents a s-shaped law.
                
                This class represents @link LawBuilder::TypeSShaped LawBuilder::TypeSShaped@endlink  type
                of law in @link GeometricUtilities::LawBuilder GeometricUtilities::LawBuilder@endlink .
                Objects of class @link GeometricUtilities::OnPathDimWithValueBuilder GeometricUtilities::OnPathDimWithValueBuilder@endlink  are used
                as law nodes in @link GeometricUtilities::SShapedLawBuilder GeometricUtilities::SShapedLawBuilder@endlink . Spine
                definition in this class is mandatory. The law nodes at start and end of the spine are fixed.
            */
        class NXOPENCPPEXPORT SShapedLawBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _SShapedLawBuilderBuilder;
            protected: SShapedLawBuilder();
            /**Returns  the Spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * Spine
            (
            );
            /** Update the builder based on current spine  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateSpine
            (
            );
            /**Returns  the start node  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * StartNode
            (
            );
            /**Returns  the slope node  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * SlopeNode
            (
            );
            /**Returns  the end node  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * EndNode
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
