#ifndef NXOpen_CAM_NCMPLANARENGRETBUILDER_HXX_INCLUDED
#define NXOpen_CAM_NCMPLANARENGRETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NcmPlanarEngRetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class NcmPlanarEngRetBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    class Point;
    class SmartObject;
    namespace CAM
    {
        class _NcmPlanarEngRetBuilderBuilder;
        /** Represents a builder for an inheritable double value in of a CAM.CAMObject */
        class NXOPENCPPEXPORT NcmPlanarEngRetBuilder : public TaggedObject
        {
            /** Available types for engage/retract in Planar Milling */
            public: enum EngRetTypes
            {
                EngRetTypesSameAsDefault/** Same as Default (Inherit) */,
                EngRetTypesSameAsClosed/** Same as Closed Engage (from open) */,
                EngRetTypesSameAsEngage/** Same as (Open) Engage (from retract) */,
                EngRetTypesHelical/** Helical Ramp */,
                EngRetTypesRampOnShape/** Ramp on shape */,
                EngRetTypesZigzagRamp/** ZigZag Ramp */,
                EngRetTypesLinear/** Linear */,
                EngRetTypesArc/** Arc */,
                EngRetTypesHighSpeedArc/** High Speed Arcs */,
                EngRetTypesPoints/** to-from points */,
                EngRetTypesPlungeLift/** Plunge Engage/Lift Retract */,
                EngRetTypesAlongVector/** Vector Dist */,
                EngRetTypesAngAngPlane/** Linear to plane */,
                EngRetTypesVectorPlane/** Vector to plane */,
                EngRetTypesNone/** None */,
                EngRetTypesLinearRelativeCut/** Linear, Relative to Cut */
            };

            private: friend class  _NcmPlanarEngRetBuilderBuilder;
            protected: NcmPlanarEngRetBuilder();
            /**Returns  the type of engage/retract  <br> License requirements : None */
            public: NXOpen::CAM::NcmPlanarEngRetBuilder::EngRetTypes EngRetType
            (
            );
            /**Sets  the type of engage/retract  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEngRetType
            (
                NXOpen::CAM::NcmPlanarEngRetBuilder::EngRetTypes newValue /** the new value */
            );
            /**Returns  the engage/retract length builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * LengthBuilder
            (
            );
            /**Returns  the engage/retract height builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * HeightBuilder
            (
            );
            /**Returns  the engage/retract radius builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * RadiusBuilder
            (
            );
            /**Returns  the engage/retract diameter builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * DiameterBuilder
            (
            );
            /**Returns  the engage/retract vector  <br> License requirements : None */
            public: NXOpen::SmartObject * Vector
            (
            );
            /**Sets  the engage/retract vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetVector
            (
                NXOpen::SmartObject * vector /** the engage/retract vector */
            );
            /**Returns  the engage/retract arc angle  <br> License requirements : None */
            public: double ArcAngle
            (
            );
            /**Sets  the engage/retract arc angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArcAngle
            (
                double newValue /** the arc angle */
            );
            /**Returns  the engage/retract swing angle  <br> License requirements : None */
            public: double SwingAngle
            (
            );
            /**Sets  the engage/retract swing angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSwingAngle
            (
                double newValue /** the swing angle */
            );
            /**Returns  the engage/retract ramp angle  <br> License requirements : None */
            public: double RampAngle
            (
            );
            /**Sets  the engage/retract ramp angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRampAngle
            (
                double newValue /** the ramp angle */
            );
            /**Returns  the engage/retract min clearance builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinClearanceBuilder
            (
            );
            /**Returns  the engage/retract start at arc center  <br> License requirements : None */
            public: bool StartAtArcCenter
            (
            );
            /**Sets  the engage/retract start at arc center  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartAtArcCenter
            (
                bool newValue /** the start at arc center */
            );
            /**Returns  the engage/retract plane  <br> License requirements : None */
            public: NXOpen::SmartObject * Plane
            (
            );
            /**Sets  the engage/retract plane  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPlane
            (
                NXOpen::SmartObject * plane /** the engage/retract plane */
            );
            /** Gets engage/retract points  <br> License requirements : None */
            public: void GetPoints
            (
                std::vector<NXOpen::Point *> & points /** Array of points */
            );
            /** Sets engage/retract points  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoints
            (
                const std::vector<NXOpen::Point *> & points /** Array of points */
            );
            /**Returns  the engage/retract use effective distance  <br> License requirements : None */
            public: bool UseEffectDist
            (
            );
            /**Sets  the engage/retract use effective distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseEffectDist
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the engage/retract effect dist builder (inheritable tool dep)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * EffectDistBuilder
            (
            );
            /**Returns  the engage/retract minimum ramp length builder (inheritable tool dep)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinRampLengthBuilder
            (
            );
            /**Returns  the engage/retract use max width  <br> License requirements : None */
            public: bool UseMaxWidth
            (
            );
            /**Sets  the engage/retract use max width  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseMaxWidth
            (
                bool newValue /** newvalue */ 
            );
            /**Returns  the engage/retract max width builder (inheritable tool dep)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaxWidthBuilder
            (
            );
            /**Returns  the engage/retract trim  <br> License requirements : None */
            public: bool Trim
            (
            );
            /**Sets  the engage/retract trim  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrim
            (
                bool newValue /** newvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
