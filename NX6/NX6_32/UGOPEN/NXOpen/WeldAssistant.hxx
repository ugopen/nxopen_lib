#ifndef NXOpen_WELDASSISTANT_HXX_INCLUDED
#define NXOpen_WELDASSISTANT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     WeldAssistant.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        /** Settings for output type */
        enum OutputType
        {
            OutputTypeAssociative/** output data will be associated to inputs. If inputs change the outputs will change also */,
            OutputTypeFixed/** output data will not change if inputs change  */
        };

        /** Settings for output type */
        enum WeldArcMethod
        {
            WeldArcMethodContinuous/** creates a single solid */,
            WeldArcMethodSkip/** creates multiple solids */
        };

        /** Settings for prepare edges */
        enum WeldPrepareEdges
        {
            WeldPrepareEdgesNone/** Output edges will not be prepared */,
            WeldPrepareEdgesEntireEdge/** Output edges will be prepared for entire edge length */,
            WeldPrepareEdgesWeldLimits/** Output edges will be prepared for the weld length only */
        };

        /** Settings for groove taper method */
        enum WeldTaperMethod
        {
            WeldTaperMethodFromEndFace/** Taper will be measured from groove end caps */,
            WeldTaperMethodFromSideFace/** Taper will be measured from groove side face */
        };

        /** Settings for method */
        enum WeldPointMethod
        {
            WeldPointMethodMultiple/** use guide curve(s) or edge(s) to generate spot weld points */,
            WeldPointMethodSingle/** use point constructor to generate spot weld points  */,
            WeldPointMethodMirror/** mirror existing points */,
            WeldPointMethodTranslate/** translate existing points */,
            WeldPointMethodFromPoints/** create fix/single/none points using existing points */
        };

        /** Settings for the reference sheet */
        enum WeldPointReferenceSheetType
        {
            WeldPointReferenceSheetTypeOverlap/** spot welds are based on the intersection of face sets */,
            WeldPointReferenceSheetTypeTop/** spot welds are based on the first face set */,
            WeldPointReferenceSheetTypeNone/** spot welds are points in 3d space          */
        };

        /** Settings locating spot welds using guide curves/edges */
        enum WeldPointLocation
        {
            WeldPointLocationAlongGuideCurve/** Place spot welds along guide curves */,
            WeldPointLocationAlongGuideEdge/** Place spot welds by offsetting from an edge(s). */,
            WeldPointLocationAlongCenterLine/** To sections are needed for this method.     */,
            WeldPointLocationSectionPlane/** Place spot welds along a section curve      */
        };

        /** Offset curve extend method */
        enum WeldPointExtendMethod
        {
            WeldPointExtendMethodNone/** Do not extend offset curves. */,
            WeldPointExtendMethodBoundary/** Extend offset curves to the faces boundary. */
        };

        /** Guide spacing method */
        enum WeldPointSpacingMethod
        {
            WeldPointSpacingMethodDistance/** Place multiple spot welds based on distance */,
            WeldPointSpacingMethodNumPoints/** Place multiple spot welds based on number of points */
        };

        /** Spot direction */
        enum WeldPointDirection
        {
            WeldPointDirectionStartToEnd/** Direction is from start to end*/,
            WeldPointDirectionEndToStart/** Direction is from end to start */
        };

        /** Groove Weld Section type */
        enum WeldGrooveShape
        {
            WeldGrooveShapeSquareButt/** Square butt shape  */,
            WeldGrooveShapeVGroove/** V groove shape     */,
            WeldGrooveShapeBevel/** Bevel shape        */,
            WeldGrooveShapeUGroove/** U groove shape     */,
            WeldGrooveShapeJGroove/** J groove shape     */,
            WeldGrooveShapeFlaredV/** Flared V shape     */,
            WeldGrooveShapeFlaredBevel/** Flared bevel shape */,
            WeldGrooveShapeFillinFlaredV/** Fillin Flared V shape */,
            WeldGrooveShapeFillinFlaredBevel/** Fillin Flared Bevel shape */
        };

        /** Groove Creation Type */
        enum WeldGrooveType
        {
            WeldGrooveTypeEdgesNotPrepared/** Edges are not prepared */,
            WeldGrooveTypeEdgesPrepared/** Edges are prepared  */
        };

        /** Groove Extension Type */
        enum WeldGrooveExtension
        {
            WeldGrooveExtensionTangent/** Extend selected edges to form an intersection. */,
            WeldGrooveExtensionProject/** Project selected edges to opposite face set. */,
            WeldGrooveExtensionReverseProject/** Project selected edges to oppsoite face set using
                                                                  normals from selected edges. */
        };

        /** Top contour shape */
        enum WeldContourShape
        {
            WeldContourShapeNone/** No shape                  */,
            WeldContourShapeConvex/** Convex shape              */,
            WeldContourShapeFlush/** Flush shape               */,
            WeldContourShapeConcave/** Concave shape             */
        };

        /** Arc process type */
        enum WeldRootUpdate
        {
            WeldRootUpdateAutomatic/** Automatically compute the root opening */,
            WeldRootUpdateNone/** Use user specified root opening */
        };

        /** Feature output */
        enum WeldFeatureOutput
        {
            WeldFeatureOutputCurves/** Output only curves */,
            WeldFeatureOutputSolid/** Output only solids */,
            WeldFeatureOutputBoth/** Output both curves and solids */
        };

        /** Settings for output solid type */
        enum WeldCustom
        {
            WeldCustomSolidNone/** creates only a point */,
            WeldCustomSolidSphere/** creates a sphere */,
            WeldCustomSolidCylinder/** creates a cylinder */,
            WeldCustomSolidCone/** creates a cone */,
            WeldCustomSolidDefault/** creates a default solid */
        };

        /** Settings project method type */
        enum WeldProjectionMethod
        {
            WeldProjectionMethodNone/** creates only a point */,
            WeldProjectionMethodFaceNormal/** creates a sphere */,
            WeldProjectionMethodAlongVector/** creates a cylinder */
        };

        /** Settings spacing method type */
        enum WeldSpacingCalcMethod
        {
            WeldSpacingCalcMethodArclength/** spaces based on arc length */,
            WeldSpacingCalcMethodParallelXPlane/** spaces based on parallel x planes */,
            WeldSpacingCalcMethodParallelYPlane/** spaces based on parallel y planes */,
            WeldSpacingCalcMethodParallelZPlane/** spaces based on parallel z planes */,
            WeldSpacingCalcMethodNormalToSurface/** spaces based on normal to surface */,
            WeldSpacingCalcMethodNormalToBody/** spaces based on normal to body */
        };

        /** the feature set types */
        enum WeldFeatureSetType
        {
            WeldFeatureSetTypeFilletWeld/** Fillet Weld     */,
            WeldFeatureSetTypeGrooveWeld/** Groove Weld     */,
            WeldFeatureSetTypeResistanceSpot/** Resistance Spot */,
            WeldFeatureSetTypeArcSpot/** Arc Spot        */,
            WeldFeatureSetTypeClinch/** Clinch          */,
            WeldFeatureSetTypeDollop/** Dollop          */,
            WeldFeatureSetTypeWeldNut/** Weld Nut        */,
            WeldFeatureSetTypeWeldStud/** Weld Stud       */,
            WeldFeatureSetTypeCustom1Point/** Custom1 Type    */,
            WeldFeatureSetTypeCustom2Point/** Custom2 Type    */,
            WeldFeatureSetTypeCustom3Point/** Custom3 Type    */,
            WeldFeatureSetTypeCustom4Point/** Custom4 Type    */,
            WeldFeatureSetTypeCustom5Point/** Custom5 Type    */
        };

        /** the group id color indexes */
        enum WeldGroupIdColor
        {
            WeldGroupIdColorNone/** None group id color */,
            WeldGroupIdColorFirst/** First Group Id Color Index */,
            WeldGroupIdColorSecond/** Second Group Id Color Index */,
            WeldGroupIdColorThird/** Third Group Id Color Index */,
            WeldGroupIdColorFourth/** Fourth Group Id Color Index */,
            WeldGroupIdColorFifth/** Fifth Group Id Color Index */,
            WeldGroupIdColorSixth/** Sixth Group Id Color Index */,
            WeldGroupIdColorSeventh/** Seventh Group Id Color Index */,
            WeldGroupIdColorEighth/** Eighth Group Id Color Index */,
            WeldGroupIdColorNinth/** Ninth Group Id Color Index */,
            WeldGroupIdColorTenth/** Tenth Group Id Color Index */,
            WeldGroupIdColorEleventh/** Eleventh Group Id Color Index */,
            WeldGroupIdColorTwelfth/** Twelvth Group Id Color Index */,
            WeldGroupIdColorThirteenth/** Thirteenth Group Id Color Index */,
            WeldGroupIdColorFourteenth/** Fourteenth Group Id Color Index */
        };

        /** the control direction for datum */
        enum WeldDatumControlDirection
        {
            WeldDatumControlDirectionInvalid = -1/** Invalid direction */,
            WeldDatumControlDirectionX/** X direction */,
            WeldDatumControlDirectionY/** Y direction */,
            WeldDatumControlDirectionZ/** Z direction */
        };

        /** the size method for measurement */
        enum WeldMeasurementSizeMethod
        {
            WeldMeasurementSizeMethodInvalid = -1/** Invalid size method */,
            WeldMeasurementSizeMethodAuto/** auto size method */,
            WeldMeasurementSizeMethodManual/** manual size method */
        };

    }
}
#undef EXPORTLIBRARY
#endif
