#ifndef NXOpen_ANNOTATIONS_DIMENSIONSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_DimensionStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DimensionStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _DimensionStyleBuilderBuilder;
        /**
            Represents a @link Annotations::DimensionStyleBuilder Annotations::DimensionStyleBuilder@endlink .
            This class queries and sets dimension preferences when creating or editing a dimension.
            */
        class NXOPENCPPEXPORT DimensionStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _DimensionStyleBuilderBuilder;
            protected: DimensionStyleBuilder();
            /**Returns  the text arrow placement.
                        This specifies manual or automatic placement and
                        display of arrows in or out  <br> License requirements : None */
            public: NXOpen::Annotations::TextPlacement TextArrowPlacement
            (
            );
            /**Sets  the text arrow placement.
                        This specifies manual or automatic placement and
                        display of arrows in or out  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextArrowPlacement
            (
                NXOpen::Annotations::TextPlacement textArrowPlacement /** textarrowplacement */ 
            );
            /**Returns  the line between arrows.
                        A value of True means a line is to be displayed between the arrows  <br> License requirements : None */
            public: bool LineBetweenArrows
            (
            );
            /**Sets  the line between arrows.
                        A value of True means a line is to be displayed between the arrows  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLineBetweenArrows
            (
                bool lineBetweenArrows /** linebetweenarrows */ 
            );
            /**Returns  the dimension text orientation  <br> License requirements : None */
            public: NXOpen::Annotations::TextOrientation Orientation
            (
            );
            /**Sets  the dimension text orientation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetOrientation
            (
                NXOpen::Annotations::TextOrientation orientation /** orientation */ 
            );
            /**Returns  the dimension text angle  <br> License requirements : None */
            public: double TextAngle
            (
            );
            /**Sets  the dimension text angle  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextAngle
            (
                double textAngle /** textangle */ 
            );
            /**Returns  the trim dimension line flag.
                        A value of True means the dimension line will be trimmed when
                        the text crosses both extension lines  <br> License requirements : None */
            public: NXOpen::Annotations::TrimDimensionLineStyle TrimDimLine
            (
            );
            /**Sets  the trim dimension line flag.
                        A value of True means the dimension line will be trimmed when
                        the text crosses both extension lines  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTrimDimLine
            (
                NXOpen::Annotations::TrimDimensionLineStyle trimDimLine /** trimdimline */ 
            );
            /**Returns  the dimension tolerance type  <br> License requirements : None */
            public: NXOpen::Annotations::ToleranceType ToleranceType
            (
            );
            /**Sets  the dimension tolerance type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceType
            (
                NXOpen::Annotations::ToleranceType dimToleranceType /** dimtolerancetype */ 
            );
            /**Returns  the extension line display option.  <br> License requirements : None */
            public: NXOpen::Annotations::ExtensionLineDisplay ExtensionLineDisplay
            (
            );
            /**Sets  the extension line display option.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetExtensionLineDisplay
            (
                NXOpen::Annotations::ExtensionLineDisplay extensionLineDisplay /** extensionlinedisplay */ 
            );
            /**Returns  the dimension arrow display option  <br> License requirements : None */
            public: NXOpen::Annotations::ArrowDisplay DimArrowDisplay
            (
            );
            /**Sets  the dimension arrow display option  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimArrowDisplay
            (
                NXOpen::Annotations::ArrowDisplay dimArrowDisplay /** dimarrowdisplay */ 
            );
            /**Returns  the dimension value precision  <br> License requirements : None */
            public: int DimensionValuePrecision
            (
            );
            /**Sets  the dimension value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionValuePrecision
            (
                int dimensionValuePrecision /** dimensionvalueprecision */ 
            );
            /**Returns  the tolerance value precision  <br> License requirements : None */
            public: int ToleranceValuePrecision
            (
            );
            /**Sets  the tolerance value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetToleranceValuePrecision
            (
                int toleranceValuePrecision /** tolerancevalueprecision */ 
            );
            /**Returns  the dual dimension value precision  <br> License requirements : None */
            public: int DualDimensionValuePrecision
            (
            );
            /**Sets  the dual dimension value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionValuePrecision
            (
                int dualDimensionValuePrecision /** dualdimensionvalueprecision */ 
            );
            /**Returns  the dual tolerance value precision  <br> License requirements : None */
            public: int DualToleranceValuePrecision
            (
            );
            /**Sets  the dual tolerance value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualToleranceValuePrecision
            (
                int dualToleranceValuePrecision /** dualtolerancevalueprecision */ 
            );
            /**Returns  the angular dimension value precision  <br> License requirements : None */
            public: int AngularDimensionValuePrecision
            (
            );
            /**Sets  the angular dimension value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularDimensionValuePrecision
            (
                int angularDimensionValuePrecision /** angulardimensionvalueprecision */ 
            );
            /**Returns  the angular tolerance value precision  <br> License requirements : None */
            public: int AngularToleranceValuePrecision
            (
            );
            /**Sets  the angular tolerance value precision  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularToleranceValuePrecision
            (
                int angularToleranceValuePrecision /** angulartolerancevalueprecision */ 
            );
            /**Returns  the upper english tolerance  <br> License requirements : None */
            public: double UpperToleranceEnglish
            (
            );
            /**Sets  the upper english tolerance  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceEnglish
            (
                double upperToleranceEnglish /** uppertoleranceenglish */ 
            );
            /**Returns  the lower english tolerance  <br> License requirements : None */
            public: double LowerToleranceEnglish
            (
            );
            /**Sets  the lower english tolerance  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceEnglish
            (
                double lowerToleranceEnglish /** lowertoleranceenglish */ 
            );
            /**Returns  the upper metric tolerance  <br> License requirements : None */
            public: double UpperToleranceMetric
            (
            );
            /**Sets  the upper metric tolerance  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceMetric
            (
                double upperToleranceMetric /** uppertolerancemetric */ 
            );
            /**Returns  the lower metric tolerance  <br> License requirements : None */
            public: double LowerToleranceMetric
            (
            );
            /**Sets  the lower metric tolerance  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceMetric
            (
                double lowerToleranceMetric /** lowertolerancemetric */ 
            );
            /**Returns  the upper angular tolerance in degrees  <br> License requirements : None */
            public: double UpperToleranceDegrees
            (
            );
            /**Sets  the upper angular tolerance in degrees  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUpperToleranceDegrees
            (
                double upperToleranceDegrees /** uppertolerancedegrees */ 
            );
            /**Returns  the lower angular tolerance in degrees  <br> License requirements : None */
            public: double LowerToleranceDegrees
            (
            );
            /**Sets  the lower angular tolerance in degrees  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLowerToleranceDegrees
            (
                double lowerToleranceDegrees /** lowertolerancedegrees */ 
            );
            /**Returns  the primary dimension fractional denominator  <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat PrimaryDimensionFractionDenominator
            (
            );
            /**Sets  the primary dimension fractional denominator  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPrimaryDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat primaryDimensionFractionDenominator /** primarydimensionfractiondenominator */ 
            );
            /**Returns  the dual dimension fractional denominator  <br> License requirements : None */
            public: NXOpen::Annotations::FractionDenominatorFormat DualDimensionFractionDenominator
            (
            );
            /**Sets  the dual dimension fractional denominator  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDualDimensionFractionDenominator
            (
                NXOpen::Annotations::FractionDenominatorFormat dualDimensionFractionDenominator /** dualdimensionfractiondenominator */ 
            );
            /**Returns  the offset between dimension lines of baseline dimensions  <br> License requirements : None */
            public: double BaselineOffset
            (
            );
            /**Sets  the offset between dimension lines of baseline dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetBaselineOffset
            (
                double baselineOffset /** baselineoffset */ 
            );
            /**Returns  the offset between dimension lines of chain dimensions  <br> License requirements : None */
            public: double ChainOffset
            (
            );
            /**Sets  the offset between dimension lines of chain dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChainOffset
            (
                double chainOffset /** chainoffset */ 
            );
            /**Returns  the display type for narrow dimensions  <br> License requirements : None */
            public: NXOpen::Annotations::NarrowDisplayOption NarrowDisplayType
            (
            );
            /**Sets  the display type for narrow dimensions  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowDisplayType
            (
                NXOpen::Annotations::NarrowDisplayOption displayType /** displaytype */ 
            );
            /**Returns  the narrow dimension text orientation  <br> License requirements : None */
            public: NXOpen::Annotations::NarrowTextOrientation NarrowTextOrientation
            (
            );
            /**Sets  the narrow dimension text orientation  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowTextOrientation
            (
                NXOpen::Annotations::NarrowTextOrientation narrowTextOrientation /** narrowtextorientation */ 
            );
            /**Returns  the narrow dimension leader angle  <br> License requirements : None */
            public: double NarrowLeaderAngle
            (
            );
            /**Sets  the narrow dimension leader angle  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowLeaderAngle
            (
                double narrowLeaderAngle /** narrowleaderangle */ 
            );
            /**Returns  the narrow dimension text offset  <br> License requirements : None */
            public: double NarrowTextOffset
            (
            );
            /**Sets  the narrow dimension text offset  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowTextOffset
            (
                double narrowTextOffset /** narrowtextoffset */ 
            );
            /**Returns  the narrow dimension arrowhead type which is used when there is no space for normal arrowheads  <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType NarrowArrowType
            (
            );
            /**Sets  the narrow dimension arrowhead type which is used when there is no space for normal arrowheads  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNarrowArrowType
            (
                NXOpen::Annotations::ArrowheadType narrowArrowType /** narrowarrowtype */ 
            );
            /**Returns  the chamfer dimension form  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferForm ChamferForm
            (
            );
            /**Sets  the chamfer dimension form  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferForm
            (
                NXOpen::Annotations::ChamferForm chamferForm /** chamferform */ 
            );
            /**Returns  the chamfer dimension stub type  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferStubType ChamferStubType
            (
            );
            /**Sets  the chamfer dimension stub type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferStubType
            (
                NXOpen::Annotations::ChamferStubType chamferStubType /** chamferstubtype */ 
            );
            /**Returns  the chamfer dimension leader type  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferLeaderPlacement ChamferLeaderType
            (
            );
            /**Sets  the chamfer dimension leader type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferLeaderType
            (
                NXOpen::Annotations::ChamferLeaderPlacement chamferLeaderType /** chamferleadertype */ 
            );
            /**Returns  the chamfer dimension symbol type  <br> License requirements : None */
            public: NXOpen::Annotations::ChamferSymbolPlacement ChamferSymbolType
            (
            );
            /**Sets  the chamfer dimension symbol type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSymbolType
            (
                NXOpen::Annotations::ChamferSymbolPlacement chamferSymbolType /** chamfersymboltype */ 
            );
            /**Returns  the chamfer dimension symbol name  <br> License requirements : None */
            public: NXString ChamferSymbolName
            (
            );
            /**Sets  the chamfer dimension symbol name  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSymbolName
            (
                const NXString & chamferSymbolName /** chamfersymbolname */ 
            );
            /**Returns  the chamfer dimension space factor  <br> License requirements : None */
            public: double ChamferSpaceFactor
            (
            );
            /**Sets  the chamfer dimension space factor  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetChamferSpaceFactor
            (
                double chamferSpaceFactor /** chamferspacefactor */ 
            );
            /**Returns  the reference dimension flag  <br> License requirements : None */
            public: bool ReferenceDimension
            (
            );
            /**Sets  the reference dimension flag  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetReferenceDimension
            (
                bool referenceDimension /** referencedimension */ 
            );
            /**Returns  the inspection dimension flag  <br> License requirements : None */
            public: bool InspectionDimension
            (
            );
            /**Sets  the inspection dimension flag  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetInspectionDimension
            (
                bool inspectionDimension /** inspectiondimension */ 
            );
            /**Returns  the dimension zero tolerance display style  <br> License requirements : None */
            public: NXOpen::Annotations::ZeroToleranceDisplayStyle DimZeroToleranceDisplayStyle
            (
            );
            /**Sets  the dimension zero tolerance display style  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimZeroToleranceDisplayStyle
            (
                NXOpen::Annotations::ZeroToleranceDisplayStyle dimZeroToleranceDisplayStyle /** dimzerotolerancedisplaystyle */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
