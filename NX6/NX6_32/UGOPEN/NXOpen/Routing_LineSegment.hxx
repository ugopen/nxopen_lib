#ifndef NXOpen_ROUTING_LINESEGMENT_HXX_INCLUDED
#define NXOpen_ROUTING_LINESEGMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LineSegment.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Line.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_ISegment.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_SegmentManager.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class LineSegment;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    class INXObject;
    class Line;
    class NXObject;
    namespace Positioning
    {
        class Constraint;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _LineSegmentBuilder;
        /** Represents a line segment.  <br> To obtain an instance of this class use @link Routing::LineSegmentCollection Routing::LineSegmentCollection@endlink  <br> */
        class NXOPENCPPEXPORT LineSegment : public Line, public virtual Routing::ISegment
        {
            private: friend class  _LineSegmentBuilder;
            protected: LineSegment();
            /**  Adds a constraint to maintain the length of this line segment.  It does this
                     by ensuring that there is a distance constraint between the two end 
                     @link Routing::ControlPoint Routing::ControlPoint@endlink  objects of this line segment.  See
                     @link Positioning::Constraint Positioning::Constraint@endlink  for a description of distance
                     constraints.  
                      @return   The new or existing distance constraint between the end control points.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Positioning::Constraint * LockLength
            (
            );
            /**  Removes the distance constraint that constrains the distance between
                         the two end control points of this line segment.  

                         Call @link Update::DoUpdate Update::DoUpdate@endlink  afterwards to ensure that
                         the constraint is fully deleted.
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: void UnlockLength
            (
            );
            /**  Returns whether or not a distance constraint exists that constrains the 
                         distance between the two end control points of this line segment.  
                      @return  Whether or not the length is locked.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: bool IsLengthLocked
            (
            );
            /**  Adds a constraint to maintain the angle of this line segment with respect 
                     to another object.  It does this by ensuring that there is an angle, perpendicular
                     or parallel constraint between this line segment and the other object.  This line
                     segment must not be an occurrence, the other object may be an occurrence.

                     See @link Positioning::Constraint Positioning::Constraint@endlink  for a description of angle, parallel
                     and perpendicular constraints.  
                      @return  The new or existing angle constraint.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: NXOpen::Positioning::Constraint * LockAngle
            (
                NXOpen::NXObject * object /** Other object. */,
                bool logicalConsOnly /** if true, only create perpendicular or
                                                                parallel constraints, if false will
                                                                also create angle constraints. */
            );
            /**  Removes the angle, parallel or perpendicular constraint that constrains 
                         the angle between this line segment and the input object.  This line
                         segment must not be an occurrence.

                         Call @link Update::DoUpdate Update::DoUpdate@endlink  afterwards to ensure that
                         the constraint is fully deleted.
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: void UnlockAngle
            (
                NXOpen::NXObject * object /** Other object */
            );
            /**  Returns whether or not an angle, parallel or perpendicular constraint exists 
                         that constrains the angle between this segment and the other input object.  
                         Both line segments must not be occurrences.
                      @return  Whether or not the angle is locked.  <br> License requirements : routing_combined ("Routing Combined") OR routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") */
            public: bool IsAngleLocked
            (
                NXOpen::NXObject * object /** Other object */
            );
            /**  Return of segment end control points.
                         The @link Routing::ControlPoint Routing::ControlPoint@endlink  defines an end of a segment  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void GetEndRcps
            (
                NXOpen::Routing::ControlPoint ** startRcp /** RCP defining start of segment */,
                NXOpen::Routing::ControlPoint ** endRcp /** RCP defining end of segment */
            );
            /**  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetEndRcps
            (
                NXOpen::Routing::ControlPoint * startRcp /** RCP defining start of segment */,
                NXOpen::Routing::ControlPoint * endRcp /** RCP defining end of segment */
            );
            /**  Get the current location of the segment ends in ABS coordinates.  This value is
                         overridden by the coordinates of the end RCPs associated with this segment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void GetEndPoints
            (
                NXOpen::Point3d* startPoint /** Location of end 0 in ABS coordinates */,
                NXOpen::Point3d* endPoint /** Location of end 1 in ABS coordinates */
            );
            /**  Set the current location of the segment ends in ABS coordinates.  This value is
                         overridden by the coordinates of the end RCPs associated with this segment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetEndPoints
            (
                const NXOpen::Point3d & startPoint /** New location of end 0 in ABS coordinates */,
                const NXOpen::Point3d & endPoint /** New location of end 1 in ABS coordinates */
            );
            /**Returns   the segment follow curve.  NULL object indicates segment has no follow curve  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Curve * FollowCurve
            (
            );
            /** Is given segment a terminal segment?  @return  Is segment a terminal segment?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::Terminal GetIsTerminalSegment
            (
            );
            /** Set given segment to be a terminal segment?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetIsTerminalSegment
            (
                NXOpen::Routing::Terminal isTerminal /** Set as terminal segment? */
            );
            /** Query if a segment is interior to any part  @return  Is segment interior?  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::Interior GetIsSegmentInterior
            (
            );
            /** Set a segment to be interior to supplied part  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetSegmentInteriorPart
            (
                NXOpen::Assemblies::Component * interiorPart /** Part segment interior? */
            );
            /** Returns all stocks that directly reference this segment as part of the path defining the stock.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual std::vector<NXOpen::Routing::Stock *> GetSegmentStock
            (
            );
            /** Returns @link Routing::Stock Routing::Stock@endlink  as well as @link Routing::Overstock Routing::Overstock@endlink 
                        objects from the @link Routing::ISegment Routing::ISegment@endlink .  @return  Array of stocks/overstocks.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual std::vector<NXOpen::Routing::Stock *> GetSegmentAllStocks
            (
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
