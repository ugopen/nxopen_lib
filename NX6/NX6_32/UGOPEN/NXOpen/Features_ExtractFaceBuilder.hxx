#ifndef NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtractFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ExtractFaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_ReplAsstBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    class Face;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ReplAsstBuilder;
    }
    class ScCollector;
    class SelectFace;
    class SelectFaceList;
    class SelectObjectList;
    namespace Features
    {
        class _ExtractFaceBuilderBuilder;
        /**
            Represents a @link Features::ExtractFace Features::ExtractFace@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateExtractFaceBuilder Features::FeatureCollection::CreateExtractFaceBuilder@endlink  <br> 
        Default values:
        AngleTolerance: 45.0
        Associative: True
        DeleteHoles: False
        FixAtCurrentTimestamp: False
        InheritDisplayProperties: False
        MakePositionIndependent: False
        ReplacementAssistant.OneToOne: True
        */
        class NXOPENCPPEXPORT ExtractFaceBuilder : public Features::FeatureBuilder
        {
            /** enum for feature type being extracted */
            public: enum ExtractType
            {
                ExtractTypeFace/** type to extract face */,
                ExtractTypeRegionOfFaces/** type to extract region */,
                ExtractTypeBody/** type to extract body */
            };

            /** enum for scope of part*/
            public: enum ParentPartType
            {
                ParentPartTypeWorkPart/** intra part mode */,
                ParentPartTypeOtherPart/** inter part mode */,
                ParentPartTypePositionIndependent/** position independent mode */
            };

            /** enum for face option type */
            public: enum FaceOptionType
            {
                FaceOptionTypeSingleFace/** single face type*/,
                FaceOptionTypeAdjacentFaces/** adjacent face type */,
                FaceOptionTypeAllBodyFaces/** all faces of body option*/,
                FaceOptionTypeFaceChain/** selection intent option*/
            };

            /** type of resulting surface */
            public: enum FaceSurfaceType
            {
                FaceSurfaceTypeSameAsOriginal/** extracted surface same as original */,
                FaceSurfaceTypePolynomialCubic/** extracted surface is poly cubic approx. of orinal surface */,
                FaceSurfaceTypeGeneralBSurface/** extracted surface is B-surface approx. of orinal surface */
            };

            private: friend class  _ExtractFaceBuilderBuilder;
            protected: ExtractFaceBuilder();
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ExtractType Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::ExtractFaceBuilder::ExtractType type /** type */ 
            );
            /**Returns  the source part type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ParentPartType ParentPart
            (
            );
            /**Sets  the source part type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentPart
            (
                NXOpen::Features::ExtractFaceBuilder::ParentPartType parentPart /** parentpart */ 
            );
            /**Returns  the face option type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FaceOptionType FaceOption
            (
            );
            /**Sets  the face option type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceOption
            (
                NXOpen::Features::ExtractFaceBuilder::FaceOptionType faceOptionType /** faceoptiontype */ 
            );
            /**Returns  the faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * FacesToExtract
            (
            );
            /**Returns  get face chain to extract  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceChain
            (
            );
            /** get the face chain direction sense  @return   <br> License requirements : None */
            public: bool GetFaceChainDirectionSense
            (
                NXOpen::Face * face /** face */ 
            );
            /** flip the face chain direction sense <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipFaceChainDirectionSense
            (
                NXOpen::Face * face /** face */ 
            );
            /**Returns  the Replacement Assistant builder. Call Enter() to enter or re-enter into the mapping environment. 
                        Enter() needs to be executed before invoking any map creation or automatic mapping APIs.
                        The maps inferred internally (internal identifier reuse, inherited from parent and siblings) will
                        be populated when Enter() is executed for the first time after selecting a replacement entity.
                        Call Exit() to exit the mapping environment.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ReplAsstBuilder * ReplacementAssistant
            (
            );
            /**Returns  the Face Normal  <br> License requirements : None */
            public: bool FaceReverseDirection
            (
            );
            /**Sets  the Face Normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceReverseDirection
            (
                bool faceNormal /** facenormal */ 
            );
            /**Returns  the seed faces  <br> License requirements : None */
            public: NXOpen::SelectFace * SeedFace
            (
            );
            /**Returns  the seed face normal  <br> License requirements : None */
            public: bool SeedReverseDirection
            (
            );
            /**Sets  the seed face normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSeedReverseDirection
            (
                bool seedNormal /** seednormal */ 
            );
            /**Returns  the boundary faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * BoundaryFaces
            (
            );
            /**Returns  the traverse interior edges  <br> License requirements : None */
            public: bool TraverseInteriorEdges
            (
            );
            /**Sets  the traverse interior edges  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTraverseInteriorEdges
            (
                bool traverseInteriorEdges /** traverseinterioredges */ 
            );
            /**Returns  the use tangent angles  <br> License requirements : None */
            public: bool UseTangentEdgeAngles
            (
            );
            /**Sets  the use tangent angles  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseTangentEdgeAngles
            (
                bool useTangentAngles /** usetangentangles */ 
            );
            /**Returns  the angle Tolerance  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle Tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the bodies  <br> License requirements : None */
            public: NXOpen::SelectObjectList * BodyToExtract
            (
            );
            /**Returns  the body Normal  <br> License requirements : None */
            public: bool BodyReverseDirection
            (
            );
            /**Sets  the body Normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBodyReverseDirection
            (
                bool bodyNormal /** bodynormal */ 
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the fix at timestamp  <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at timestamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool fixAtTimestamp /** fixattimestamp */ 
            );
            /**Returns  the delete holes  <br> License requirements : None */
            public: bool DeleteHoles
            (
            );
            /**Sets  the delete holes  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeleteHoles
            (
                bool deleteHoles /** deleteholes */ 
            );
            /**Returns  the hide original  <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the hide original  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the surface type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType SurfaceType
            (
            );
            /**Sets  the surface type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSurfaceType
            (
                NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType surfaceType /** surfacetype */ 
            );
            /**Returns  the makepositionindependent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the makepositionindependent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
            /**Returns  the inherit display properties from source option  <br> License requirements : None */
            public: bool InheritDisplayProperties
            (
            );
            /**Sets  the inherit display properties from source option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInheritDisplayProperties
            (
                bool inheritDisplayProperties /** inheritdisplayproperties */ 
            );
            /** Commits the feature and set create on the fly flag  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * CommitCreateOnTheFly
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
