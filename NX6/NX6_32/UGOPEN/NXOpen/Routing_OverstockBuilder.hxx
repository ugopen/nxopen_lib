#ifndef NXOpen_ROUTING_OVERSTOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_OVERSTOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_OverstockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Routing_OverstockBuilder.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class OverstockBuilder;
    }
    class Builder;
    class Curve;
    class Expression;
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _OverstockBuilderBuilder;
        /** Builder for creating/editing overstocks.
                Create Overstock: This builder takes a set of segments and overstock and assign the 
                the overstock on the segments depending on the applicatio method and parameters
                chosen by the user.
                Edit Overstock: This builder takes in the selected overstock to edit as input and 
                redefines the overstock with the modified(by the user) parameters.
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateOverstockBuilder Routing::RouteManager::CreateOverstockBuilder@endlink  <br> 
        Default values:
        ApplicationMethod: Interval
        Distance.RightHandSide: 0 (millimeters part), 0 (inches part)
        DistanceLock: 0
        EndOffsetLock: 0
        Gap.RightHandSide: 0 (millimeters part), 0 (inches part)
        GapDistance.RightHandSide: 1 (millimeters part), 1 (inches part)
        GapLock: 0
        IntervalPieceLength.RightHandSide: 0 (millimeters part), 0 (inches part)
        NumberOfPieces.RightHandSide: 1 (millimeters part), 1 (inches part)
        NumberOfPiecesLock: 0
        NumberOfWraps.RightHandSide: 2 (millimeters part), 2 (inches part)
        OverlapPercentage.RightHandSide: 50 (millimeters part), 50 (inches part)
        PieceLength.RightHandSide: 0 (millimeters part), 0 (inches part)
        PieceLengthLock: 0
        PointDefines: Start
        StartOffsetLock: 0
        WrapMethod: OverlapSpiral
        */
        class NXOPENCPPEXPORT OverstockBuilder : public Builder
        {
            /** The overstock application type. This defines the way in which to 
                        create piggyback segment for overstock. */
            public: enum ApplicationType
            {
                ApplicationTypeEntireSegments/** Entire Segments */,
                ApplicationTypeInterval/** Interval */,
                ApplicationTypePointToPoint/** Point To Point */,
                ApplicationTypePointAndLength/** Point And Length */
            };

            /** The defining point location. This defines direction to go for 
                        the POINT and LENGTH method.*/
            public: enum PointType
            {
                PointTypeStart/** Start */,
                PointTypeMiddle/** Middle */,
                PointTypeEnd/** End */
            };

            /** The application type for wrapped overstock */
            public: enum WrapType
            {
                WrapTypeOverlapSpiral/** Overlap Spiral */,
                WrapTypeSpot/** Spot */,
                WrapTypeStripedSpiral/** Striped Spiral */
            };

            private: friend class  _OverstockBuilderBuilder;
            protected: OverstockBuilder();
            /**Returns  the routing object collector to collect the segments to assign overstock to. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RouteObjectCollector * SegmentCollector
            (
            );
            /**Returns  the stock settings for overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder * StockSettings
            (
            );
            /**Sets  the stock settings for overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockSettings
            (
                NXOpen::Routing::PathStockBuilder * stockBuilder /** stockbuilder */ 
            );
            /**Returns  the application method for overstock assignment. It defines the way in 
                        which to create piggyback segment for overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OverstockBuilder::ApplicationType ApplicationMethod
            (
            );
            /**Sets  the application method for overstock assignment. It defines the way in 
                        which to create piggyback segment for overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetApplicationMethod
            (
                NXOpen::Routing::OverstockBuilder::ApplicationType applicationMethod /** applicationmethod */ 
            );
            /**Returns  the start offset value for @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink 
                        method. It defines the distance from the beginning of the path to place the 
                        first piece of overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartOffset
            (
            );
            /**Returns  the start offset lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool StartOffsetLock
            (
            );
            /**Sets  the start offset lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartOffsetLock
            (
                bool startOffsetLock /** startoffsetlock */ 
            );
            /**Returns  the end offset value for @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink 
                        method. It defins the MINIMUM distance from the end of the path to place 
                        the last piece of overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EndOffset
            (
            );
            /**Returns  the end offset lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool EndOffsetLock
            (
            );
            /**Sets  the end offset lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetEndOffsetLock
            (
                bool endOffsetLock /** endoffsetlock */ 
            );
            /**Returns  the distance over which the pieces of overstock can possibly range for
                        @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink 
                        method. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the distance lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool DistanceLock
            (
            );
            /**Sets  the distance lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDistanceLock
            (
                bool distanceLock /** distancelock */ 
            );
            /**Returns  the gap from the end of one piece of overstock to the start of the next piece
                        of overstock for @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink  method.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * Gap
            (
            );
            /**Returns  the gap lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GapLock
            (
            );
            /**Sets  the gap lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetGapLock
            (
                bool gapLock /** gaplock */ 
            );
            /**Returns  the length of the overstock pieces for @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink 
                        method. If the overstock type is Wrapped, and the wrap method is set to Spot,
                        the Piece Length is always the width of the overstock and is locked.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * IntervalPieceLength
            (
            );
            /**Returns  the piece length lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool PieceLengthLock
            (
            );
            /**Sets  the piece length lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPieceLengthLock
            (
                bool pieceLengthLock /** piecelengthlock */ 
            );
            /**Returns  the number of pieces of overstock to place along the path for 
                        @link Routing::OverstockBuilder::ApplicationTypeInterval Routing::OverstockBuilder::ApplicationTypeInterval@endlink 
                        method.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * NumberOfPieces
            (
            );
            /**Returns  the number of pieces lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool NumberOfPiecesLock
            (
            );
            /**Sets  the number of pieces lock state. If TRUE, changing the parameters will change other
                        unlocked parameters to fit overstock along the selected path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetNumberOfPiecesLock
            (
                bool numberOfPiecesLock /** numberofpieceslock */ 
            );
            /**Returns  the start point that defines the start of the overstock for 
                        @link Routing::OverstockBuilder::ApplicationTypePointToPoint Routing::OverstockBuilder::ApplicationTypePointToPoint@endlink 
                        method.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartPoint
            (
            );
            /**Returns  the end point that defines the end of the overstock for 
                        @link Routing::OverstockBuilder::ApplicationTypePointToPoint Routing::OverstockBuilder::ApplicationTypePointToPoint@endlink 
                        method.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EndPoint
            (
            );
            /**Returns  the defining point for @link  Routing::OverstockBuilder::ApplicationTypePointAndLength   Routing::OverstockBuilder::ApplicationTypePointAndLength @endlink  method. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * DefiningPoint
            (
            );
            /**Returns  the defining point location which can be any of @link Routing::OverstockBuilder::PointType Routing::OverstockBuilder::PointType@endlink 
                        for @link  Routing::OverstockBuilder::ApplicationTypePointAndLength   Routing::OverstockBuilder::ApplicationTypePointAndLength @endlink  method. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OverstockBuilder::PointType PointDefines
            (
            );
            /**Sets  the defining point location which can be any of @link Routing::OverstockBuilder::PointType Routing::OverstockBuilder::PointType@endlink 
                        for @link  Routing::OverstockBuilder::ApplicationTypePointAndLength   Routing::OverstockBuilder::ApplicationTypePointAndLength @endlink  method. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPointDefines
            (
                NXOpen::Routing::OverstockBuilder::PointType pointDefines /** pointdefines */ 
            );
            /**Returns  the length over which overstock piece to be assigned for 
                        @link Routing::OverstockBuilder::ApplicationTypePointAndLength Routing::OverstockBuilder::ApplicationTypePointAndLength@endlink  method. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * PieceLength
            (
            );
            /**Returns  the path direction that defines the start of overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool SwitchStartEnd
            (
            );
            /**Sets  the path direction that defines the start of overstock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSwitchStartEnd
            (
                bool switchStartEnd /** switchstartend */ 
            );
            /**Returns  the @link Routing::OverstockBuilder::WrapType Routing::OverstockBuilder::WrapType@endlink  for Wrapped overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OverstockBuilder::WrapType WrapMethod
            (
            );
            /**Sets  the @link Routing::OverstockBuilder::WrapType Routing::OverstockBuilder::WrapType@endlink  for Wrapped overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetWrapMethod
            (
                NXOpen::Routing::OverstockBuilder::WrapType wrapMethod /** wrapmethod */ 
            );
            /**Returns  the percentage overlap if the @link Routing::OverstockBuilder::WrapType Routing::OverstockBuilder::WrapType@endlink 
                        is @link Routing::OverstockBuilder::WrapTypeOverlapSpiral Routing::OverstockBuilder::WrapTypeOverlapSpiral@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * OverlapPercentage
            (
            );
            /**Returns  the number of wraps if the @link Routing::OverstockBuilder::WrapType Routing::OverstockBuilder::WrapType@endlink 
                        is @link Routing::OverstockBuilder::WrapTypeSpot Routing::OverstockBuilder::WrapTypeSpot@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * NumberOfWraps
            (
            );
            /**Returns  the gap distance if the @link Routing::OverstockBuilder::WrapType Routing::OverstockBuilder::WrapType@endlink 
                        is @link Routing::OverstockBuilder::WrapTypeStripedSpiral Routing::OverstockBuilder::WrapTypeStripedSpiral@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Expression * GapDistance
            (
            );
            /**Returns  the path curve that is used to specify overstock defining points.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Curve * PathCurve
            (
            );
            /** Update the path curve that is used to specify overstock defining points
                        when any segment is selected or deselected. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UpdatePathCurve
            (
            );
            /** Returns the stocks to be covered by the overstock.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::Stock *> GetCoveredStocks
            (
            );
            /** Sets the stocks to be covered by the overstock.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCoveredStocks
            (
                const std::vector<NXOpen::Routing::Stock *> & stocks /** stocks */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
