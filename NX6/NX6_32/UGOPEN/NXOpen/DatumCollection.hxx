#ifndef NXOpen_DATUMCOLLECTION_HXX_INCLUDED
#define NXOpen_DATUMCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DatumCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class DatumCollection;
    class BasePart;
    class DisplayableObject;
    class DatumAxis;
    class DatumPlane;
    /** Represents a collection of datum geometry.  Datum geometry
    includes datum planes, datum axes, datum coordinate systems, and datum points  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT DatumCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit DatumCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef DisplayableObject * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::DatumCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::DatumCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a fixed datum plane  @return  The datum plane that is created  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DatumPlane * CreateFixedDatumPlane
        (
            const NXOpen::Point3d & origin /** Origin of the datum plane */,
            const NXOpen::Matrix3x3 & orientation /** Orientation matrix of the datum plane.  
                                                  Must be orthonormal */
        );
        /** Creates a fixed datum axis

            Note: <tt>start</tt> and <tt>end</tt> only specify the 
            origin and start direction of the datum axis.  The
            datum axis that is created may have a length longer than
            what is specified by <tt>start</tt> and <tt>end</tt>.
            To set the start and end points, DatumAxis.SetEndPoints
            may be used  @return  The datum axis that is created  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DatumAxis * CreateFixedDatumAxis
        (
            const NXOpen::Point3d & start /** Start point */,
            const NXOpen::Point3d & end /** End point */
        );
        /** Finds the datum with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  Datum with this identifier  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::DisplayableObject * FindObject
        (
            const NXString & journalIdentifier /** Identifier of the datum you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
