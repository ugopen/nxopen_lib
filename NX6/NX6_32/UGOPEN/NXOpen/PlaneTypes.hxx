#ifndef NXOpen_PLANETYPES_HXX_INCLUDED
#define NXOpen_PLANETYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PlaneTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PlaneTypes;
    /** Represents an @link PlaneTypes PlaneTypes@endlink  class. 
      <br> No Creator because it's Iplane calss can not hold enum types so this class will hold them <br> */
    class NXOPENCPPEXPORT PlaneTypes
    {
        /** Specifies different method types of selected geometries */
        public: enum MethodType
        {
            MethodTypeUndefined/** Not defined */,
            MethodTypeInferred/** Inferred method */,
            MethodTypeCoincident/** Plane of object method */,
            MethodTypeCoincidentFaceAxis/** Though face axis method */,
            MethodTypeCoincidentPerpLinear/** Through linear perpendicluar to linear method */,
            MethodTypeParallel/** Parallel method */,
            MethodTypeParallelPoint/** Parallel to plane through point method */,
            MethodTypePerpendicular/** Perpendicular to plane method */,
            MethodTypePerpendicularPoint/** Perpendicular to plane though point method */,
            MethodTypePerpendicularLinear/** Perpendicular to plane through linear method */,
            MethodTypeCenter/** Center method */,
            MethodTypeTangent/** Tangent method  */,
            MethodTypeTangentFace/** Tangent to face method  */,
            MethodTypeTangentPoint/** Tangent to face through point method  */,
            MethodTypeTangentLinear/** Tangent to face through linear method  */,
            MethodTypeTangentParPlane/** Tangent to face parallel to plane method  */,
            MethodTypeTangentPerpPlane/** Tangent to face perpendicular to plane method  */,
            MethodTypeTangentTwoFaces/** Tangent to two faces method  */,
            MethodTypeTangentAnglePlane/** Tangent to a cyl face at an angle to a planar face */,
            MethodTypeDistance/** Distance method */,
            MethodTypeAngle/** Angle method  */,
            MethodTypeFrenet/** Frenet method */,
            MethodTypePointDir/** Point and direction method */,
            MethodTypePoint/** Point method */,
            MethodTypeTwoPoints/** Two Points method */,
            MethodTypeThreePoints/** Three points method */,
            MethodTypeLine/** Line method */,
            MethodTypeTwoLines/** Two line method */,
            MethodTypeCurvePoint/** On curve through point method */,
            MethodTypeFixedX/** Fixed plane perpendicular to X thru WCS */,
            MethodTypeFixedY/** Fixed plane perpendicular to Y thru WCS */,
            MethodTypeFixedZ/** Fixed plane perpendicular to Z thru WCS */,
            MethodTypeFixedXyCsys/** Fixed plane perpendicular to Z thru X-Y plane of CSYS */,
            MethodTypeCoefficients/** Fixed plane defined by coefficients */,
            MethodTypeInferredTop/** Inferred Top method */,
            MethodTypeTangentInfer/** Inferred Tangent method  */,
            MethodTypePointInfer/** Inferred Point method */,
            MethodTypeFaceAxisPoint/** Through Face Axis at Point */,
            MethodTypeFixed/** Fixed Method (super type including any non-associative, xy, yz, xz, and coefficient*/,
            MethodTypeFixedView/** View Plane method */
        };

        /** Specifies alternate solutions The system can have up to 4 alternate solutions depends on the
             method for example if the user pick a point the system create a plane through the point parallel 
             to the XY plane but there are 2 additional solutions a plane through the point and YZ plane and a 
             plane through the point and XZ plane */
        public: enum AlternateType
        {
            AlternateTypeOne/** First alternate Soulotion */,
            AlternateTypeTwo/** Second alternate Soulotion */,
            AlternateTypeThree/** Third alternate Soulotion */,
            AlternateTypeFour/** Fourth alternate Soulotion */,
            AlternateTypeFive/** Fifth alternate Soulotion */,
            AlternateTypeSix/** Sixth alternate Soulotion */
        };

        /** Specify the subtypes for on_curve type of plane, where alternate solution is not 
            enough to handle the situation after enhancement to this specific plane type.
            Considering legacy data, these subtypes must match those already defined 
            in the file "datum.h" */
        public: enum FrenetSubtype
        {
            FrenetSubtypeNotSpecified/**  Subtype is not specified */,
            FrenetSubtypeTangent/**  Tangent to path, = FRENET_TANGENT */,
            FrenetSubtypeNormal/**  Normal to path, = FRENET_NORMAL */,
            FrenetSubtypeBinormal/**  Binormal to path, = FRENET_BINORMAL */,
            FrenetSubtypeProject = 7/**  Reference to an object, = FRENET_PROJECT */,
            FrenetSubtypeThruPoint = 9/**  Thru point type and normal to path */,
            FrenetSubtypeNormalToVector/**  Normal to a vector */,
            FrenetSubtypeParallelToVector/**  Parallel to a vector */,
            FrenetSubtypeThruAxis/**  Thru axis type */,
            FrenetSubtypeThruPointNormalToVector/** Thru point and normal to a vector */,
            FrenetSubtypeThruPointParallelToVector/** Thru point and parallel to a vector */,
            FrenetSubtypeThruPointThruAxis/** Thru point and thru axis type */,
            FrenetSubtypeThruPointNormal/** Thru point and tangent_to_path */,
            FrenetSubtypeThruPointBinormal/** Thru point and binormal to path */,
            FrenetSubtypeThruPointProject/** Thru point and relative to object */
        };

    };
}
#undef EXPORTLIBRARY
#endif
