#ifndef NXOpen_FEATURES_BRIDGECURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_BRIDGECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_BridgeCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_BridgeCurveBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class BridgeCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class SelectObject;
    namespace Features
    {
        class _BridgeCurveBuilderBuilder;
        /**
            Represents a @link Features::BridgeCurve Features::BridgeCurve@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateBridgeCurveBuilder Features::FeatureCollection::CreateBridgeCurveBuilder@endlink  <br> 
        Default values:
        Depth.RightHandSide: 50
        EndDirectionAngle.RightHandSide: 0
        EndTangentMagnitude.RightHandSide: 1
        IsAssociative: True
        MinimumRadiusValue.RightHandSide: 1
        ReverseEndDirection: False
        ReverseStartDirection: False
        Rho.RightHandSide: 0.5
        Skew.RightHandSide: 50
        StartDirectionAngle.RightHandSide: 0
        StartTangentMagnitude.RightHandSide: 1
        UPercentEnd.RightHandSide: 0
        UPercentStart.RightHandSide: 0
        VPercentEnd.RightHandSide: 0
        VPercentStart.RightHandSide: 0
        */
        class NXOPENCPPEXPORT BridgeCurveBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the current selected end object types for the bridge curve */
            public: enum EndObjectTypes
            {
                EndObjectTypesObject/** allowed end object type except a vector object*/,
                EndObjectTypesVector/** vector object */
            };

            /** This enum represents the current selected object for the bridge curve */
            public: enum SelectedObject
            {
                SelectedObjectOne/** input object 1 selected */,
                SelectedObjectTwo/** input object 2 selected */
            };

            /** This enum represents the end continuity constraint types for the bridge curve */
            public: enum ConstraintTypes
            {
                ConstraintTypesG0/** G0 continuity */,
                ConstraintTypesG1/** G1 continuity */,
                ConstraintTypesG2/** G2 continuity */,
                ConstraintTypesG3/** G3 continuity*/
            };

            /** This enum represents the direction type for input curves */
            public: enum CurveDirectionTypes
            {
                CurveDirectionTypesTangent/** bridge direction takes the tangent direction 
                                                                                               of the base curve at the selected point */,
                CurveDirectionTypesPerpendicular/** bridge direction takes the direction that is 
                                                                                               perpendicular to the tangent direction 
                                                                                               of the base curve at the selected point */
            };

            /** This enum represents the direction type for input surfaces */
            public: enum SurfaceDirectionTypes
            {
                SurfaceDirectionTypesSectional/** bridge direction takes non-isoparametric direction 
                                                                                              of the base surface at the selected point */,
                SurfaceDirectionTypesIsoU/** bridge direction takes u-isoparametric direction 
                                                                                              of the base surface at the selected point */,
                SurfaceDirectionTypesIsoV/** bridge direction takes v-isoparametric direction 
                                                                                              of the base surface at the selected point */
            };

            /** This enum represents the minimum radius types for the bridge curve */
            public: enum MinRadiusTypes
            {
                MinRadiusTypesNone/** no minimum radius */,
                MinRadiusTypesMinimum/** regular */,
                MinRadiusTypesPeak/** peak */
            };

            /** This enum represents the shape control types for the bridge curve */
            public: enum ShapeControlTypes
            {
                ShapeControlTypesEndPoint/** end point conditions */,
                ShapeControlTypesPeakPoint/** peak point conditions */,
                ShapeControlTypesConic/** conic parameter */,
                ShapeControlTypesShapeCurve/** shape curve*/
            };

            /** This enum represents the curve fit types for the bridge curve */
            public: enum CurveFitTypes
            {
                CurveFitTypesCubic/** fit curve with 3 degrees */,
                CurveFitTypesQuintic/** fit curve with 5 degrees */,
                CurveFitTypesAdvanced/** general fit curve */
            };

            private: friend class  _BridgeCurveBuilderBuilder;
            protected: BridgeCurveBuilder();
            /**Returns  the start object  <br> License requirements : None */
            public: NXOpen::SelectObject * StartObject
            (
            );
            /**Returns  the object selection option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::EndObjectTypes EndObjectOption
            (
            );
            /**Sets  the object selection option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndObjectOption
            (
                NXOpen::Features::BridgeCurveBuilder::EndObjectTypes endObjectOption /** endobjectoption */ 
            );
            /**Returns  the end object  <br> License requirements : None */
            public: NXOpen::SelectObject * EndObject
            (
            );
            /**Returns  the start point direction  <br> License requirements : None */
            public: NXOpen::Direction * EndVectorObject
            (
            );
            /**Sets  the start point direction  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndVectorObject
            (
                NXOpen::Direction * endVectorObject /** endvectorobject */ 
            );
            /**Returns  the object selection option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::SelectedObject ObjectSelectionOption
            (
            );
            /**Sets  the object selection option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetObjectSelectionOption
            (
                NXOpen::Features::BridgeCurveBuilder::SelectedObject objectSelectionOption /** objectselectionoption */ 
            );
            /**Returns  the start continuity option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::ConstraintTypes StartContinuityOption
            (
            );
            /**Sets  the start continuity option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetStartContinuityOption
            (
                NXOpen::Features::BridgeCurveBuilder::ConstraintTypes startContinuityOption /** startcontinuityoption */ 
            );
            /**Returns  the end continuity option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::ConstraintTypes EndContinuityOption
            (
            );
            /**Sets  the end continuity option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndContinuityOption
            (
                NXOpen::Features::BridgeCurveBuilder::ConstraintTypes endContinuityOption /** endcontinuityoption */ 
            );
            /**Returns  the u percent start  <br> License requirements : None */
            public: NXOpen::Expression * UPercentStart
            (
            );
            /**Returns  the v percent start  <br> License requirements : None */
            public: NXOpen::Expression * VPercentStart
            (
            );
            /**Returns  the u percent end  <br> License requirements : None */
            public: NXOpen::Expression * UPercentEnd
            (
            );
            /**Returns  the v percent end  <br> License requirements : None */
            public: NXOpen::Expression * VPercentEnd
            (
            );
            /**Returns  the start curve direction option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::CurveDirectionTypes StartCurveDirectionOption
            (
            );
            /**Sets  the start curve direction option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetStartCurveDirectionOption
            (
                NXOpen::Features::BridgeCurveBuilder::CurveDirectionTypes startCurveDirectionOption /** startcurvedirectionoption */ 
            );
            /**Returns  the end curve direction option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::CurveDirectionTypes EndCurveDirectionOption
            (
            );
            /**Sets  the end curve direction option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndCurveDirectionOption
            (
                NXOpen::Features::BridgeCurveBuilder::CurveDirectionTypes endCurveDirectionOption /** endcurvedirectionoption */ 
            );
            /**Returns  the start perpendicular face  <br> License requirements : None */
            public: NXOpen::SelectObject * StartPerpendicularFace
            (
            );
            /**Returns  the end perpendicular face  <br> License requirements : None */
            public: NXOpen::SelectObject * EndPerpendicularFace
            (
            );
            /**Returns  the start surface direction option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::SurfaceDirectionTypes StartSurfaceDirectionOption
            (
            );
            /**Sets  the start surface direction option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetStartSurfaceDirectionOption
            (
                NXOpen::Features::BridgeCurveBuilder::SurfaceDirectionTypes startSurfaceDirectionOption /** startsurfacedirectionoption */ 
            );
            /**Returns  the end surface direction option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::SurfaceDirectionTypes EndSurfaceDirectionOption
            (
            );
            /**Sets  the end surface direction option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndSurfaceDirectionOption
            (
                NXOpen::Features::BridgeCurveBuilder::SurfaceDirectionTypes endSurfaceDirectionOption /** endsurfacedirectionoption */ 
            );
            /**Returns  the start direction angle  <br> License requirements : None */
            public: NXOpen::Expression * StartDirectionAngle
            (
            );
            /**Returns  the end direction angle  <br> License requirements : None */
            public: NXOpen::Expression * EndDirectionAngle
            (
            );
            /**Returns  the start point direction  <br> License requirements : None */
            public: NXOpen::Direction * StartPointDirection
            (
            );
            /**Sets  the start point direction  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetStartPointDirection
            (
                NXOpen::Direction * startPointDirection /** startpointdirection */ 
            );
            /**Returns  the end point direction  <br> License requirements : None */
            public: NXOpen::Direction * EndPointDirection
            (
            );
            /**Sets  the end point direction  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndPointDirection
            (
                NXOpen::Direction * endPointDirection /** endpointdirection */ 
            );
            /**Returns  the reverse start direction  <br> License requirements : None */
            public: bool ReverseStartDirection
            (
            );
            /**Sets  the reverse start direction  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseStartDirection
            (
                bool reverseStartDirection /** reversestartdirection */ 
            );
            /**Returns  the reverse end direction  <br> License requirements : None */
            public: bool ReverseEndDirection
            (
            );
            /**Sets  the reverse end direction  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseEndDirection
            (
                bool reverseEndDirection /** reverseenddirection */ 
            );
            /**Returns  the constraint faces  <br> License requirements : None */
            public: NXOpen::ScCollector * ConstraintFaces
            (
            );
            /**Returns  the minimum radius option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::MinRadiusTypes MinimumRadiusOption
            (
            );
            /**Sets  the minimum radius option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetMinimumRadiusOption
            (
                NXOpen::Features::BridgeCurveBuilder::MinRadiusTypes minimumRadiusOption /** minimumradiusoption */ 
            );
            /**Returns  the minimum radius value  <br> License requirements : None */
            public: NXOpen::Expression * MinimumRadiusValue
            (
            );
            /**Returns  the shape control option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::ShapeControlTypes ShapeControlOption
            (
            );
            /**Sets  the shape control option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetShapeControlOption
            (
                NXOpen::Features::BridgeCurveBuilder::ShapeControlTypes shapeControlOption /** shapecontroloption */ 
            );
            /**Returns  the start tangent magnitude for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesEndPoint Features::BridgeCurveBuilder::ShapeControlTypesEndPoint@endlink   <br> License requirements : None */
            public: NXOpen::Expression * StartTangentMagnitude
            (
            );
            /**Returns  the end tangent magnitude for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesEndPoint Features::BridgeCurveBuilder::ShapeControlTypesEndPoint@endlink   <br> License requirements : None */
            public: NXOpen::Expression * EndTangentMagnitude
            (
            );
            /**Returns  the depth value for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesPeakPoint Features::BridgeCurveBuilder::ShapeControlTypesPeakPoint@endlink   <br> License requirements : None */
            public: NXOpen::Expression * Depth
            (
            );
            /**Returns  the skew value for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesPeakPoint Features::BridgeCurveBuilder::ShapeControlTypesPeakPoint@endlink   <br> License requirements : None */
            public: NXOpen::Expression * Skew
            (
            );
            /**Returns  the rho value for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesConic Features::BridgeCurveBuilder::ShapeControlTypesConic@endlink   <br> License requirements : None */
            public: NXOpen::Expression * Rho
            (
            );
            /**Returns  the shape curve for shape control option of @link Features::BridgeCurveBuilder::ShapeControlTypesShapeCurve Features::BridgeCurveBuilder::ShapeControlTypesShapeCurve@endlink   <br> License requirements : None */
            public: NXOpen::SelectObject * ShapeCurve
            (
            );
            /**Returns  whether the bridge curve is associative  <br> License requirements : None */
            public: bool IsAssociative
            (
            );
            /**Sets  whether the bridge curve is associative  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the curve fit option  <br> License requirements : None */
            public: NXOpen::Features::BridgeCurveBuilder::CurveFitTypes CurveFitOption
            (
            );
            /**Sets  the curve fit option  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetCurveFitOption
            (
                NXOpen::Features::BridgeCurveBuilder::CurveFitTypes curveFitOption /** curvefitoption */ 
            );
            /**Returns  the maximum degree  <br> License requirements : None */
            public: int MaximumDegree
            (
            );
            /**Sets  the maximum degree  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumDegree
            (
                int maximumDegree /** maximumdegree */ 
            );
            /**Returns  the maximum segment  <br> License requirements : None */
            public: int MaximumSegment
            (
            );
            /**Sets  the maximum segment  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumSegment
            (
                int maximumSegment /** maximumsegment */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the start reference point  <br> License requirements : None */
            public: NXOpen::Point * StartReferencePoint
            (
            );
            /**Sets  the start reference point  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetStartReferencePoint
            (
                NXOpen::Point * startReferencePoint /** startreferencepoint */ 
            );
            /**Returns  the start reference point  <br> License requirements : None */
            public: NXOpen::Point * EndReferencePoint
            (
            );
            /**Sets  the start reference point  <br> License requirements : nx_freeform_1 ("basic freeform modeling"), solid_modeling ("SOLIDS MODELING") */
            public: void SetEndReferencePoint
            (
                NXOpen::Point * endReferencePoint /** endreferencepoint */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
