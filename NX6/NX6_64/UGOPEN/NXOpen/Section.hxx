#ifndef NXOpen_SECTION_HXX_INCLUDED
#define NXOpen_SECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Section.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/SectionData.hxx>
#include <NXOpen/SelectionIntentRule.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Section;
    class DisplayableObject;
    class ICurve;
    class NXObject;
    class Point;
    class SectionData;
    class SelectionIntentRule;
    class TaggedObject;
    class _SectionBuilder;
    /** Represents a section
     <br> 
    Section consists of "chained_entity", a chain  or a single entity of edge or curve.
    The entire chain(or a single entity) may be used by the section or only a portion of the chain 
    (or single entity) might be used. The portion of the chain (or single entity) that is used is
    defined by the "start_connector" and "end_connector". 
     <br> 
     <br> 
    start_connector: It represents the start of the portion of the chain (or single entity) that is used. 
    If "start_connector" is null (Nothing), then the start point of the chained_entity along its "natural" 
    direction is used.
     <br> 
     <br> 
    start_connector_intersection_point: The point of intersection of the "chained_entity" and the 
    "start_connector". This is used to determine what portion of the chain to use in case the 
    "start_connector" intersects the "chained_entity" in multiple locations.
     <br> 
     <br> 
    end_connector: It represents the end of the portion of the chain (or single entity) that is used.
     <br> 
     <br> 
    end_connector_intersection_point: The point of intersection of the "chained_entity" and the 
    "end_connector". This is used to determine what portion of the chain to use in case the "end_connector" 
    intersects the "chained_entity" in multiple locations.
     <br> 
     <br> To create a new instance of this class, use @link SectionCollection::CreateSection SectionCollection::CreateSection@endlink  <br> */
    class NXOPENCPPEXPORT Section : public DisplayableObject
    {
        /** Defines mode with respect to feature create or edit mode.
             */
        public: enum Mode
        {
            ModeCreate/** Feature is being created */,
            ModeEdit/** Feature is being edited */
        };

        private: friend class  _SectionBuilder;
        protected: Section();
        /**Sets  the chaining tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetChainingTolerance
        (
            double chainingTolerance /** chaining tolerance*/
        );
        /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetDistanceTolerance
        (
            double distanceTolerance /** distance tolerance*/
        );
        /**Sets  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetAngleTolerance
        (
            double angleTolerance /** angle tolerance*/
        );
        /**Returns  the chaining tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: double ChainingTolerance
        (
        );
        /**Returns  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: double DistanceTolerance
        (
        );
        /**Returns  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: double AngleTolerance
        (
        );
        /** Adds selection intent rules to the section. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AddToSection
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules. To create selection intent rules see
                                             documentation of @link ScRuleFactory ScRuleFactory@endlink 
                                             for more details. */,
            NXOpen::NXObject * seed /** Seed curve, edge or face*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of the chain 
                                                                         (or single entity) that is used. If "start_connector" 
                                                                         is null (Nothing), then the start point of the 
                                                                         chained_entity along its "natural" direction is used. 
                                                                         It can be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of the chain (or single entity) that is used.
                                                                       It can be point, curve or edge */,
            const NXOpen::Point3d & helpPoint /** This is used to determine which portion 
                                                    of the chain to use for creating section.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Adds selection intent rules to the section with the option of restricting
                chaining and limit discovery to a single feature. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AddToSection
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules. To create selection intent rules see
                                             documentation of @link ScRuleFactory ScRuleFactory@endlink 
                                             for more details. */,
            NXOpen::NXObject * seed /** Seed curve, edge or face*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of the chain 
                                                                         (or single entity) that is used. If "start_connector" 
                                                                         is null (Nothing), then the start point of the 
                                                                         chained_entity along its "natural" direction is used. 
                                                                         It can be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of the chain (or single entity) that is used.
                                                                       It can be point, curve or edge */,
            const NXOpen::Point3d & helpPoint /** This is used to determine which portion 
                                                    of the chain to use for creating section.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/,
            bool chainWithinFeature /** True if chaining and discovery of intersection limits is to be restricted 
                                                             to the feature of the seed. This is effective only when the seed belongs
                                                             to a curve feature. */
        );
        /** Removes selection intent rules from the section.
             <br>  
            To get selection intent rules of the section 
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetRules  SectionData::GetRules @endlink  for more details. 
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveRules
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules.*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of 
                                                                         the chain (or single entity) that is used. 
                                                                         If "start_connector" is null (Nothing), 
                                                                         then the start point of the chained_entity 
                                                                         along its "natural" direction is used. 
                                                                         It can be be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of 
                                                                       the chain (or single entity) that is used. 
                                                                       It can be be point, curve or edge */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes one section element curve.
             <br>  
            To get selection element
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveSingleSectionElement
        (
            NXOpen::ICurve * sectionElement /** The element that constructs the section */,
            NXOpen::NXObject * startConnector /** The element that is connected to the 
                                       section_element near it's start_point*/,
            NXOpen::NXObject * endConnector /** The element that is connected to the 
                                       section_element near it's end_point*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes one section element that is a point.
             <br>  
            To get selection element
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveSingleSectionElement
        (
            NXOpen::Point * sectionElement /** The point that constructs the section */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes all the selection intent rules related to the section element.
             <br>  
            To get selection elements of the section, see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveRules
        (
            NXOpen::ICurve * sectionElement /** The element that constructs the section */,
            NXOpen::NXObject * startConnector /** The element that is connected to the 
                                       section_element near it's start_point*/,
            NXOpen::NXObject * endConnector /** The element that is connected to the 
                                       section_element near it's end_point */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Removes all the selection intent rules related to the chain on which the given point lies.
             <br>  
            This method should be used in place of @link Section::RemoveRules  Section::RemoveRules @endlink  when
            the part containing the section element is not loaded.
             <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveUnderlyingChain
        (
            const NXOpen::Point3d & pointSpecifyingChain /** The point should lie on the chain that is to be removed.*/,
            double tolerance /** Tolerance for specifying point on chain.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Sets the start element and the direction of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetStartAndDirection
        (
            NXOpen::ICurve * startElement /** The element, curve or edge, specifying
                                                        the starting of the section.
                                                        If the section is a loop, then the loop is started
                                                        by start_element and the direction is 
                                                        followed the input direction. 
                                                        If the section is not a loop, then the section can be started 
                                                        by other element, but the direction of the section is defined by
                                                        the start_element and 
                                                        direction. */,
            const NXOpen::Point3d & startPoint /** The origin of the vector that defines the direction of
                                                         the section. This point has to be on the start_element. */,
            const NXOpen::Vector3d & direction /** The direction of the vector defines the direction of
                                                        the section. */
        );
        /** Gets the start element and the direction of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetStartAndDirection
        (
            NXOpen::ICurve ** startElement /** The element, curve or edge, specifying
                                                        the starting of the section.
                                                        If the section is a loop, then the loop is started
                                                        by start_element and the direction is 
                                                        followed the input direction. 
                                                        If the section is not a loop, then the section can be started 
                                                        by other element, but the direction of the section is defined by
                                                        the  start_element and direction. */,
            NXOpen::Point3d* startPoint /** The origin of the vector that defines the direction of
                                                         the section. This point has to be on the start_element. */,
            NXOpen::Vector3d* direction /** The direction of the vector defines the direction of
                                                        the section. */
        );
        /** Gets the start point and the direction of a specified single loop of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetStartAndDirectionOfLoop
        (
            int index /** The index of the loop of the section for which start point
                                                   and direction are being queried. */,
            NXOpen::Point3d* startPoint /** The origin of the vector that defines the direction of
                                                   the loop of the section specified by the index. */,
            NXOpen::Vector3d* direction /** The direction of the vector defines the direction of the loop
                                                   of the section specified by the index. */
        );
        /** Gets the section data  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetSectionData
        (
            std::vector<NXOpen::SectionData *> & sectionData /** Section data consists of selection intent rules,
                                                       section elements, start and end connector. */
        );
        /** Destroy the section object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Destroy
        (
        );
        /** Reverse the section direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void ReverseDirection
        (
        );
        /** Reverse the direction of of a specified single loop of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void ReverseDirectionOfLoop
        (
            int index /** The index of the loop of the section that is to be reversed. */
        );
        /** Set the curve on which the specified point lies as the start curve 
                of a specified single loop of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetStartCurveOfClosedLoop
        (
            int index /** Index of the loop for which the start curve is to be set. */,
            const NXOpen::Point3d & pointOnStartCurve /** Any point on a curve that is to be set as the start curve. */
        );
        /** Reverse the loop direction of a closed loop while keeping the start curve same.
                This API can only be used closed loops.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void ReverseDirectionOfClosedLoop
        (
            int index /** Index of the closed loop for which the direction is to be reversed. */
        );
        /** Add smart point into section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AddSmartPoint
        (
            NXOpen::Point * smartPt /** Smart point tobe added into section. */,
            double tol /** Tolerance. */
        );
        /** Allow self intersecting section or not. By default self intersection is allowed.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AllowSelfIntersection
        (
            bool allowSelfIntersection /** True if self-intersecting section is allowed else false*/
        );
        /** Clear the section of all its constituents   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void Clear
        (
        );
        /** Returns the index of the section loop conatining the section element.
                If the section element does not exist in the section or is part of
                more than one loops, this method will return an error.  @return  loop Index <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: int GetLoopIndex
        (
            NXOpen::NXObject * sectionElement /** an element that constructs the section*/
        );
        /** Returns the index of the loop on which the given point lies.  @return  loop Index <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: int GetLoopIndex
        (
            const NXOpen::Point3d & pointSpecifyingLoop /** a point lying on the loop for which
                                                                  the loop index is being queried*/,
            double tolerance /** Tolerance for specifying point on loop.*/
        );
        /** Set the direction of a single loop of the section along the given vector.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AlignDirectionOfLoop
        (
            const NXOpen::Point3d & point /** Any point on a the desired loop. */,
            const NXOpen::Vector3d & direction /** Desired tangent direction of the loop at the point. */
        );
        /** Set inter-part state of section and make it empty <br> License requirements : None */
        public: void SetInterpart
        (
            bool interpart /** True to set section interpart */
        );
    };
}
#undef EXPORTLIBRARY
#endif
