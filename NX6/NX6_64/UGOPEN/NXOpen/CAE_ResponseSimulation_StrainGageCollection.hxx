#ifndef NXOpen_CAE_RESPONSESIMULATION_STRAINGAGECOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_STRAINGAGECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_StrainGageCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ResponseSimulation_StrainGage.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class StrainGageCollection;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Manager;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class StrainGage;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class StrainGageBuilder;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            /** Represents a collection of response analysis strain gage  <br> To obtain an instance of this class, refer to @link CAE::ResponseSimulation::Manager CAE::ResponseSimulation::Manager@endlink  <br> */
            class NXOPENCPPEXPORT StrainGageCollection : public TaggedObjectCollection
            {
                private: NXOpen::CAE::ResponseSimulation::Manager* m_owner;
                public: explicit StrainGageCollection(NXOpen::CAE::ResponseSimulation::Manager *owner): m_owner(owner)
                {
                }
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                /** Iterator for accessing the contents of the collection. */
                class iterator
                {
                public:
                    typedef CAE::ResponseSimulation::StrainGage * value_type;
                    /** Default constructor */
                    iterator() : m_context(NULL), m_current(NULL_TAG)
                    {
                    }
                    explicit iterator(NXOpen::CAE::ResponseSimulation::StrainGageCollection *context) : m_context(context), m_current(NULL_TAG)
                    {
                    }
                    iterator(const iterator &other)
                    {
                        copy(other);
                    }
                    /** Copy constructor */
                    iterator &operator =(const iterator &other)
                    {
                        if (&other != this)
                            copy(other);
                        return *this;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                    bool operator ==(const iterator &other) const
                    {
                        return m_current == other.m_current && m_context == other.m_context;
                    }
                    /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                    bool operator !=(const iterator &other) const
                    {
                        return !operator == (other);
                    }
                    /** Return the element currently pointed to by the iterator. */
                    NXOPENCPPEXPORT  value_type operator * ();
                    /** Points the iterator to next element. */
                    iterator & operator ++()
                    {
                        next();
                        return *this;
                    }
                    /** Points the iterator to next element. */
                    iterator operator ++(int)
                    {
                        iterator tmp(*this);
                        ++*this;
                        return tmp;
                    }
                private:
                    void copy(const iterator &other)
                    {
                        m_context = other.m_context;
                        m_current = other.m_current;
                        for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                             m_state[i] = other.m_state[i];
                    }
                    NXOPENCPPEXPORT  void next();
                    NXOpen::CAE::ResponseSimulation::StrainGageCollection *m_context;
                    tag_t m_current;
                    unsigned int m_state[8];
                };
                /** Returns an iterator addressing the first element. */
                iterator begin();
                /** Returns an iterator addressing one past the last element. */
                iterator end()
                {
                    return iterator(this);
                }
                /** Creates a strain gage buider  @return    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::StrainGageBuilder * CreateStrainGageBuilder
                (
                    NXOpen::CAE::ResponseSimulation::StrainGage * strainGage /** strain gage */ 
                );
                /** Finds an strain gage with specified gage name  @return    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::StrainGage * FindObject
                (
                    const NXString & name /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                public: virtual void initialize();
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
