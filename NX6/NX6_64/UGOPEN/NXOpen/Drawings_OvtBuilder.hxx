#ifndef NXOpen_DRAWINGS_OVTBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_OVTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_OvtBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_OvtBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class OvtBuilder;
    }
    class Direction;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _OvtBuilderBuilder;
        /**
            Represents a @link Drawings::OvtBuilder Drawings::OvtBuilder@endlink 
            */
        class NXOPENCPPEXPORT OvtBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _OvtBuilderBuilder;
            protected: OvtBuilder();
            /**Returns  the vector that represents the normal direction for the view to be created or edited  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Direction * NormalDirection
            (
            );
            /**Sets  the vector that represents the normal direction for the view to be created or edited  <br> License requirements : drafting ("DRAFTING") */
            public: void SetNormalDirection
            (
                NXOpen::Direction * normalDirection /** normaldirection */ 
            );
            /**Returns  the x direction vector for the view to be created or edited  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Direction * XDirection
            (
            );
            /**Sets  the x direction vector for the view to be created or edited  <br> License requirements : drafting ("DRAFTING") */
            public: void SetXDirection
            (
                NXOpen::Direction * xDirection /** xdirection */ 
            );
            /**Returns  the associative orientation that specifies whether or not the view 
                        will be associative to the specified plane and/or X direction  <br> License requirements : drafting ("DRAFTING") */
            public: bool AssociativeOrientation
            (
            );
            /**Sets  the associative orientation that specifies whether or not the view 
                        will be associative to the specified plane and/or X direction  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssociativeOrientation
            (
                bool associativeOrientation /** associativeorientation */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
