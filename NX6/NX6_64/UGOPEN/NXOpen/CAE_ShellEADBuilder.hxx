#ifndef NXOpen_CAE_SHELLEADBUILDER_HXX_INCLUDED
#define NXOpen_CAE_SHELLEADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ShellEADBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/CAE_ShellEADBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ShellEADBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace CAE
    {
        class _ShellEADBuilderBuilder;
        /** This class provides Shell Associated Data Support  <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateShellEadBuilder CAE::NodeElementManager::CreateShellEadBuilder@endlink  <br> 
        Default values:
        MaterialOrientationState: Ignore
        SetMatOriMethod: CoordinateSystem
        ThicknessState: Ignore
        */
        class NXOPENCPPEXPORT ShellEADBuilder : public Builder
        {
            /** indicates which material orientation method to use */
            public: enum MaterialOrientationMethod
            {
                MaterialOrientationMethodCoordinateSystem/** use a coordinate system to orient the material */,
                MaterialOrientationMethodVectorProjection/** use a vector projected to the shell to orient the material */
            };

            /** indicates to ignore, apply or clear the state property upon commit */
            public: enum State
            {
                StateIgnore/** do nothing to the property */,
                StateApply/** apply the property */,
                StateClear/** clear the property */
            };

            private: friend class  _ShellEADBuilderBuilder;
            protected: ShellEADBuilder();
            /**Returns  the select element operator selects elements  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the get selection ori operator gets material orientation method  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::MaterialOrientationMethod SetMatOriMethod
            (
            );
            /**Sets  the get selection ori operator gets material orientation method  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSetMatOriMethod
            (
                NXOpen::CAE::ShellEADBuilder::MaterialOrientationMethod setMatOriMethod /** setmatorimethod */ 
            );
            /**Returns  the get coordinate system method gets the coordinate system for orienting by coordinate system  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CoordinateSystem * CoordinateSystem
            (
            );
            /**Sets  the get coordinate system method gets the coordinate system for orienting by coordinate system  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCoordinateSystem
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the get vector method gets the projection vector for material orientation  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the get vector method gets the projection vector for material orientation  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the thickness expression of the shell element  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ThicknessExpression
            (
            );
            /**Returns  the material orientation state drives the action upon commit  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State MaterialOrientationState
            (
            );
            /**Sets  the material orientation state drives the action upon commit  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMaterialOrientationState
            (
                NXOpen::CAE::ShellEADBuilder::State materialOrientationState /** materialorientationstate */ 
            );
            /**Returns  the thickness state drives the action upon commit  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State ThicknessState
            (
            );
            /**Sets  the thickness state drives the action upon commit  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetThicknessState
            (
                NXOpen::CAE::ShellEADBuilder::State thicknessState /** thicknessstate */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
