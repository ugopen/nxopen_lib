#ifndef NXOpen_CAE_ELEMENTPROJECTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTPROJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementProjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementProjectBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ElementProjectBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectCAEFaceList;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Direction;
    namespace CAE
    {
        class _ElementProjectBuilderBuilder;
        /**
            Represents a @link CAE::ElementProjectBuilder CAE::ElementProjectBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementProjectBuilder CAE::NodeElementManager::CreateElementProjectBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ElementProjectBuilder : public Builder
        {
            /** Projection method */
            public: enum MethodType
            {
                MethodTypeVector/** along vector*/,
                MethodTypeElemNormal/** along element normal*/
            };

            /** Dimension of element to be projected */
            public: enum ElementDimensionType
            {
                ElementDimensionTypeAny/** beam and/or shell element */,
                ElementDimensionTypeBeam/** beam element*/,
                ElementDimensionTypeShell/** shell element*/
            };

            /**  Option to create new mesh or add to existing mesh */
            public: enum NewMeshType
            {
                NewMeshTypeCreate/** Create new mesh*/,
                NewMeshTypeExisting/** Add to existing mesh*/
            };

            /**  Option to use label/increment or offset */
            public: enum LabelType
            {
                LabelTypeLabel/** label/increment*/,
                LabelTypeOffset/** offset*/
            };

            private: friend class  _ElementProjectBuilderBuilder;
            protected: ElementProjectBuilder();
            /**Returns  the selected elements to be extruded <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the flip state from the builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int FlipState
            (
            );
            /**Sets  the flip state from the builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFlipState
            (
                int flipstate /** flipstate */ 
            );
            /**Returns  the face on which projection will happen  <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEFaceList * Face
            (
            );
            /**Returns  the percent offset  <br> License requirements : None */
            public: double PercentOffset
            (
            );
            /**Sets  the percent offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPercentOffset
            (
                double percentOffset /** percentoffset */ 
            );
            /**Returns  the method option  <br> License requirements : None */
            public: NXOpen::CAE::ElementProjectBuilder::MethodType MethodOption
            (
            );
            /**Sets  the method option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMethodOption
            (
                NXOpen::CAE::ElementProjectBuilder::MethodType methodOption /** methodoption */ 
            );
            /**Returns  the vector along which projection will happen <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector along which projection will happen <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the element dimension option  <br> License requirements : None */
            public: NXOpen::CAE::ElementProjectBuilder::ElementDimensionType ElementDimensionOption
            (
            );
            /**Sets  the element dimension option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimensionOption
            (
                NXOpen::CAE::ElementProjectBuilder::ElementDimensionType elementDimensionOption /** elementdimensionoption */ 
            );
            /**Returns  the element neutral name  <br> License requirements : None */
            public: NXString NeutralName
            (
            );
            /**Sets  the element neutral name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNeutralName
            (
                const NXString & neutralName /** neutralname */ 
            );
            /**Returns  the mesh collector name  <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the mesh collector name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /**Returns  the new mesh option  <br> License requirements : None */
            public: NXOpen::CAE::ElementProjectBuilder::NewMeshType NewMeshOption
            (
            );
            /**Sets  the new mesh option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNewMeshOption
            (
                NXOpen::CAE::ElementProjectBuilder::NewMeshType newMeshOption /** newmeshoption */ 
            );
            /**Returns  the mesh name  <br> License requirements : None */
            public: NXString MeshName
            (
            );
            /**Sets  the mesh name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshName
            (
                const NXString & meshName /** meshname */ 
            );
            /**Returns  the label option  <br> License requirements : None */
            public: NXOpen::CAE::ElementProjectBuilder::LabelType LabelOption
            (
            );
            /**Sets  the label option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelOption
            (
                NXOpen::CAE::ElementProjectBuilder::LabelType labelOption /** labeloption */ 
            );
            /**Returns  the label  <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment  <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset  <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
