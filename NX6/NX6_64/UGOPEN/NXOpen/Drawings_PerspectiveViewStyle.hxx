#ifndef NXOpen_DRAWINGS_PERSPECTIVEVIEWSTYLE_HXX_INCLUDED
#define NXOpen_DRAWINGS_PERSPECTIVEVIEWSTYLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_PerspectiveViewStyle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IPerspectiveViewPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class PerspectiveViewStyle;
    }
    namespace Drawings
    {
        class ViewStyle;
    }
    namespace Preferences
    {
        class IPerspectiveViewPreferences;
    }
    namespace Drawings
    {
        /** Represents set of PerspectiveViewStyle applicable to drafting views.  <br> To obtain an instance of this class use @link Drawings::ViewStyle::Perspective Drawings::ViewStyle::Perspective@endlink  <br> */
        class NXOPENCPPEXPORT PerspectiveViewStyle: public virtual Preferences::IPerspectiveViewPreferences
        {
            private: NXOpen::Drawings::ViewStyle* m_owner;
            public: explicit PerspectiveViewStyle(NXOpen::Drawings::ViewStyle *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the status of front clipping  <br> License requirements : None */
            public: bool FrontClipping
            (
            );
            /**Sets  the status of front clipping  <br> License requirements : drafting ("DRAFTING") */
            public: void SetFrontClipping
            (
                bool frontClipping /** front clipping */ 
            );
            /**Returns  the value of front clipping distance  <br> License requirements : None */
            public: double FrontClippingDistance
            (
            );
            /**Sets  the value of front clipping distance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetFrontClippingDistance
            (
                double frontClippingDistance /** front clipping distance */ 
            );
            /**Returns  the status of back clipping  <br> License requirements : None */
            public: bool BackClipping
            (
            );
            /**Sets  the status of back clipping  <br> License requirements : drafting ("DRAFTING") */
            public: void SetBackClipping
            (
                bool backClipping /** back clipping */ 
            );
            /**Returns  the value of back clipping distance  <br> License requirements : None */
            public: double BackClippingDistance
            (
            );
            /**Sets  the value of back clipping distance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetBackClippingDistance
            (
                double backClippingDistance /** back clipping distance */ 
            );
            /**Returns  the status of perspective  <br> License requirements : None */
            public: bool Perspective
            (
            );
            /**Sets  the status of perspective  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPerspective
            (
                bool perspective /** perspective */ 
            );
            /**Returns  the value of perspective distance  <br> License requirements : None */
            public: double PerspectiveDistance
            (
            );
            /**Sets  the value of perspective distance  <br> License requirements : drafting ("DRAFTING") */
            public: void SetPerspectiveDistance
            (
                double perspectiveDistance /** perspective distance */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
