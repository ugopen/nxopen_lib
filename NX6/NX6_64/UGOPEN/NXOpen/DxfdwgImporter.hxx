#ifndef NXOpen_DXFDWGIMPORTER_HXX_INCLUDED
#define NXOpen_DXFDWGIMPORTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DxfdwgImporter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/DxfdwgImporter.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class DxfdwgImporter;
    class Builder;
    class _DxfdwgImporterBuilder;
    /**
        Represents a @link DxfdwgImporter DxfdwgImporter@endlink  to be used when importing the IGES Data
        This class is created using @link DexManager DexManager@endlink .  <br> To create a new instance of this class, use @link DexManager::CreateDxfdwgImporter DexManager::CreateDxfdwgImporter@endlink  <br> 
    Default values:
    ImportPolylineTo: Splines
    ImportTo: NewMetric
    */
    class NXOPENCPPEXPORT DxfdwgImporter : public Builder
    {
        /** Create the builder */
        public: enum ImportToEnum
        {
            ImportToEnumNewMetric/** import dxf/dwg file to new part with metric units */,
            ImportToEnumNewEnglish/** import dxf/dwg file to new part with english units */,
            ImportToEnumWork/** import dxf/dwg file to work part */
        };


        public: enum ImportPolylinesAs
        {
            ImportPolylinesAsSplines/** import polylines as splines */,
            ImportPolylinesAsArcLines/** import polylines as arc/lines */
        };

        private: friend class  _DxfdwgImporterBuilder;
        protected: DxfdwgImporter();
        /** The set user credentials - this will set user name, password and group in NX Manager mode <br> License requirements : None */
        public: void SetUserCredential
        (
            const NXString & user /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & passwd /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & group /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** the save settings - this will save the settings to a file specified  <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the input file - name of a file which is being imported <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file - name of a file which is being imported <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the import to - this option will determine the destination for imported autocad file. it can
                    either be new (englies/metric) or work part.  <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportToEnum ImportTo
        (
        );
        /**Sets  the import to - this option will determine the destination for imported autocad file. it can
                    either be new (englies/metric) or work part.  <br> License requirements : None */
        public: void SetImportTo
        (
            NXOpen::DxfdwgImporter::ImportToEnum importTo /** importto */ 
        );
        /**Returns  the output file - if autocad file is imported to new part then this name will be used to
                    write the output.  <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - if autocad file is imported to new part then this name will be used to
                    write the output.  <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the import polyline to group - this will determine if polylines will be imported as splines or 
                    lines/arcs.  <br> License requirements : None */
        public: NXOpen::DxfdwgImporter::ImportPolylinesAs ImportPolylineTo
        (
        );
        /**Sets  the import polyline to group - this will determine if polylines will be imported as splines or 
                    lines/arcs.  <br> License requirements : None */
        public: void SetImportPolylineTo
        (
            NXOpen::DxfdwgImporter::ImportPolylinesAs importPolylineTo /** importpolylineto */ 
        );
        /**Returns  the settings file - definition file for default options <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - definition file for default options <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the file open flag - should be set to false if doing file import <br> License requirements : None */
        public: bool FileOpenFlag
        (
        );
        /**Sets  the file open flag - should be set to false if doing file import <br> License requirements : None */
        public: void SetFileOpenFlag
        (
            bool doingFileOpen /** doingfileopen */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
