#ifndef NXOpen_FEATURES_SWEPTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SWEPTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SweptBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SweptBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlignmentMethodBuilder.hxx>
#include <NXOpen/GeometricUtilities_OrientationMethodBuilder.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/GeometricUtilities_ScalingMethodBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SweptBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class AlignmentMethodBuilder;
    }
    namespace GeometricUtilities
    {
        class OrientationMethodBuilder;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    namespace GeometricUtilities
    {
        class ScalingMethodBuilder;
    }
    class Section;
    class SectionList;
    namespace Features
    {
        class _SweptBuilderBuilder;
        /**
            Represents a @link Features::Swept Features::Swept@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSweptBuilder Features::FeatureCollection::CreateSweptBuilder@endlink  <br> 
        Default values:
        AlignmentMethod.AlignType: Parameter
        GuideRebuildData.Degree: 3
        GuideRebuildData.RebuildType: None
        OrientationMethod.AngularLaw.EndValue.RightHandSide: 0 (millimeters part), 0 (inches part)
        OrientationMethod.AngularLaw.Function: ft
        OrientationMethod.AngularLaw.LawType: Constant
        OrientationMethod.AngularLaw.Parameter: t
        OrientationMethod.AngularLaw.StartValue.RightHandSide: 0 (millimeters part), 0 (inches part)
        OrientationMethod.AngularLaw.Value.RightHandSide: 0 (millimeters part), 0 (inches part)
        OrientationMethod.OrientationOption: Fixed
        PreserveShapeOption: True
        ScalingMethod.AreaLaw.EndValue.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.AreaLaw.StartValue.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.AreaLaw.Value.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.BlendingFunctionType: Linear
        ScalingMethod.EndBlendScaleFactor: 1.0
        ScalingMethod.PerimeterLaw.EndValue.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.PerimeterLaw.StartValue.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.PerimeterLaw.Value.RightHandSide: 1.0 (millimeters part), 1.0 (inches part)
        ScalingMethod.ScaleFactor: 1.0
        ScalingMethod.ScalingOption: Constant
        ScalingMethod.StartBlendScaleFactor: 1.0
        SectionRebuildData.Degree: 3
        SectionRebuildData.RebuildType: None
        */
        class NXOPENCPPEXPORT SweptBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the Section Location option. If a single section located at the middle of a guide string is
                        specified, Anywhere Along Guides option sweeps in both directions. */
            public: enum SectionLocationTypes
            {
                SectionLocationTypesAnywhereAlongGuides/** Anywhere along Guides */,
                SectionLocationTypesEndsOfGuides/** Ends of Guides */
            };

            /** This enum represents the Interpolation option. For 2 or more sections, this option specifies the method by which
                        to interpolate between them, either Linear or Cubic. */
            public: enum InterpolationOptions
            {
                InterpolationOptionsLinear/** Linear */,
                InterpolationOptionsCubic/** Cubic */
            };

            private: friend class  _SweptBuilderBuilder;
            protected: SweptBuilder();
            /**Returns  the list of sections. At least 1 section is required.  <br> License requirements : None */
            public: NXOpen::SectionList * SectionList
            (
            );
            /**Returns  the list of guides. At least 1 but no more than 3 guides are required.  <br> License requirements : None */
            public: NXOpen::SectionList * GuideList
            (
            );
            /**Returns  the spine (optional). For more than 1 guide, an optional spine curve can be 
                        input to gain further control of the orientation of the section string.
                        The spine curve cannot contain more than 1 loop.  <br> License requirements : None */
            public: NXOpen::Section * Spine
            (
            );
            /**Returns  the section location option. This option governs the location of the input section with respect to the 
                        guides. The section location option is ignored if the section list contains more than 1 section.  <br> License requirements : None */
            public: NXOpen::Features::SweptBuilder::SectionLocationTypes SectionLocation
            (
            );
            /**Sets  the section location option. This option governs the location of the input section with respect to the 
                        guides. The section location option is ignored if the section list contains more than 1 section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionLocation
            (
                NXOpen::Features::SweptBuilder::SectionLocationTypes sectionLocation /** sectionlocation */ 
            );
            /**Returns  the interpolation option. This option governs the method by which to interpolate between sections, if the
                        section list contains more than 1 section.  <br> License requirements : None */
            public: NXOpen::Features::SweptBuilder::InterpolationOptions InterpolationOption
            (
            );
            /**Sets  the interpolation option. This option governs the method by which to interpolate between sections, if the
                        section list contains more than 1 section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInterpolationOption
            (
                NXOpen::Features::SweptBuilder::InterpolationOptions interpolationOption /** interpolationoption */ 
            );
            /**Returns  the alignment method. The Alignment Method Builder sub-object, governs the alignment of the
                        input sections along the guides. Alignment by Points is available only if more than
                        1 input sections are selected.
                        Refer to GeometricUtilities.AlignmentMethodBuilder documentation.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlignmentMethodBuilder * AlignmentMethod
            (
            );
            /**Returns  the orientation method. The Orientation Method Builder sub-object, governs the orientation of the
                        input sections, if the guide list contains a single guide.
                        Refer to GeometricUtilities.OrientationMethodBuilder documentation.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientationMethodBuilder * OrientationMethod
            (
            );
            /**Returns  the scaling method. The Scaling Method Builder sub-object, governs the size / scale of the
                        input sections along a guide, if a single guide is selected.
                        Refer to GeometricUtilities.ScalingMethodBuilder documentation.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ScalingMethodBuilder * ScalingMethod
            (
            );
            /**Returns  the preserve shape option.  <br> License requirements : None */
            public: bool PreserveShapeOption
            (
            );
            /**Sets  the preserve shape option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPreserveShapeOption
            (
                bool preserveShapeOption /** preserveshapeoption */ 
            );
            /**Returns  the guide rebuild data  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * GuideRebuildData
            (
            );
            /**Returns  the section rebuild data  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Rebuild * SectionRebuildData
            (
            );
            /**Returns  the G0 (Position) tolerance.  <br> License requirements : None */
            public: double G0Tolerance
            (
            );
            /**Sets  the G0 (Position) tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetG0Tolerance
            (
                double g0Tolerance /** g0tolerance */ 
            );
            /**Returns  the G1 (Tangent) tolerance.  <br> License requirements : None */
            public: double G1Tolerance
            (
            );
            /**Sets  the G1 (Tangent) tolerance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetG1Tolerance
            (
                double g1Tolerance /** g1tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
