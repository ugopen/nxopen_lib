#ifndef NXOpen_GEOMETRICUTILITIES_FACEPLANETOOLBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FACEPLANETOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FacePlaneToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_FacePlaneToolBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceSetData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FacePlaneToolBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceSetData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    namespace GeometricUtilities
    {
        class _FacePlaneToolBuilderBuilder;
        /** a sub-component of BooleanToolBuilder. It provides two basic tools
              * creation methods i.e. collector sets of faces/datum planes, or a new plane 
              * created on the fly. 
              */
        class NXOPENCPPEXPORT FacePlaneToolBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _FacePlaneToolBuilderBuilder;
            protected: FacePlaneToolBuilder();
            /**Returns  the sets of tool faces or datum planes  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceSetData * ToolFaces
            (
            );
            /**Returns  the new plane created on the fly. Note: only one plane is get/set  <br> License requirements : None */
            public: NXOpen::Plane * ToolPlane
            (
            );
            /**Sets  the new plane created on the fly. Note: only one plane is get/set  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToolPlane
            (
                NXOpen::Plane * toolPlane /** toolplane */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
