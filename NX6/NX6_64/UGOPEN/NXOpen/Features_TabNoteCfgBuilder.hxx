#ifndef NXOpen_FEATURES_TABNOTECFGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TABNOTECFGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TabNoteCfgBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_TabNoteCfgBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class TabNoteCfgBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace Features
    {
        class _TabNoteCfgBuilderBuilder;
        /**
            Represents a @link Features::TabNoteCfgBuilder Features::TabNoteCfgBuilder@endlink 
            */
        class NXOPENCPPEXPORT TabNoteCfgBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the reference plane type.
                    */
            public: enum Refplane
            {
                RefplaneXy/** 0 : Xc-Yc plane */,
                RefplaneYz/** 1 : Yc-Zc plane */,
                RefplaneZx/** 2 : Zc-Xc plane */
            };

            private: friend class  _TabNoteCfgBuilderBuilder;
            protected: TabNoteCfgBuilder();
            /**Returns  the reference plane  <br> License requirements : None */
            public: NXOpen::Features::TabNoteCfgBuilder::Refplane ReferencePlane
            (
            );
            /**Sets  the reference plane  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetReferencePlane
            (
                NXOpen::Features::TabNoteCfgBuilder::Refplane referencePlane /** referenceplane */ 
            );
            /**Returns  the insertion point  <br> License requirements : None */
            public: NXOpen::Point * InsertionPoint
            (
            );
            /**Sets  the insertion point  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetInsertionPoint
            (
                NXOpen::Point * insertionPoint /** insertionpoint */ 
            );
            /**Returns  the block offset  <br> License requirements : None */
            public: double BlockOffset
            (
            );
            /**Sets  the block offset  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetBlockOffset
            (
                double blockOffset /** blockoffset */ 
            );
            /**Returns  the number of rows  <br> License requirements : None */
            public: int NumberOfRows
            (
            );
            /**Sets  the number of rows  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetNumberOfRows
            (
                int numberOfRows /** numberofrows */ 
            );
            /**Returns  the delete previous diagrams  <br> License requirements : None */
            public: bool DeletePreviousDiagrams
            (
            );
            /**Sets  the delete previous diagrams  <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: void SetDeletePreviousDiagrams
            (
                bool deletePreviousDiagrams /** deletepreviousdiagrams */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
