#ifndef NXOpen_TOOLING_MWDEFINEREGIONSBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MWDEFINEREGIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MWDefineRegionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_MWDefineRegionsBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class MWDefineRegionsBuilder;
    }
    class Builder;
    class NXColor;
    class ScCollector;
    namespace Tooling
    {
        class _MWDefineRegionsBuilderBuilder;
        /** The MWDefineRegions builder  <br> To create a new instance of this class, use @link Tooling::MWDefineRegionsCollection::CreateBuilder Tooling::MWDefineRegionsCollection::CreateBuilder@endlink  <br> 
        Default values:
        CreatePartingLinesToggle: 0
        CreateRegionsToggle: 0
        TranslucencyOption: SelectedFaces
        TranslucencyValueScale: 0
        */
        class NXOPENCPPEXPORT MWDefineRegionsBuilder : public Builder
        {
            /** This enum represents the translucency is to be performed on the selected or non-selected region faces */
            public: enum TranslucencyOptionType
            {
                TranslucencyOptionTypeSelectedFaces/** Selected region faces */,
                TranslucencyOptionTypeOtherFaces/** Non-selected region faces */
            };

            private: friend class  _MWDefineRegionsBuilderBuilder;
            protected: MWDefineRegionsBuilder();
            /** Button to create a new empty region  <br> License requirements : None */
            public: void CreateNewRegionButton
            (
            );
            /**Returns  the region faces for defining region  <br> License requirements : None */
            public: NXOpen::ScCollector * SelectRegionFaces
            (
            );
            /** Button to invoke searching region  <br> License requirements : None */
            public: void SearchRegionButton
            (
            );
            /**Returns  the create regions toggle  <br> License requirements : None */
            public: bool CreateRegionsToggle
            (
            );
            /**Sets  the create regions toggle  <br> License requirements : None */
            public: void SetCreateRegionsToggle
            (
                bool createRegionsToggle /** createregionstoggle */ 
            );
            /**Returns  the create parting lines toggle  <br> License requirements : None */
            public: bool CreatePartingLinesToggle
            (
            );
            /**Sets  the create parting lines toggle  <br> License requirements : None */
            public: void SetCreatePartingLinesToggle
            (
                bool createPartingLinesToggle /** createpartinglinestoggle */ 
            );
            /**Returns  the face color for the selected region faces  <br> License requirements : None */
            public: NXOpen::NXColor * FaceColor
            (
            );
            /**Sets  the face color for the selected region faces  <br> License requirements : None */
            public: void SetFaceColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the translucency option for the selected or non-selected region faces  <br> License requirements : None */
            public: NXOpen::Tooling::MWDefineRegionsBuilder::TranslucencyOptionType TranslucencyOption
            (
            );
            /**Sets  the translucency option for the selected or non-selected region faces  <br> License requirements : None */
            public: void SetTranslucencyOption
            (
                NXOpen::Tooling::MWDefineRegionsBuilder::TranslucencyOptionType translucencyOption /** translucencyoption */ 
            );
            /**Returns  the translucency value for the selected or non-selected region faces  <br> License requirements : None */
            public: int TranslucencyValueScale
            (
            );
            /**Sets  the translucency value for the selected or non-selected region faces  <br> License requirements : None */
            public: void SetTranslucencyValueScale
            (
                int translucencyValueScale /** translucencyvaluescale */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
