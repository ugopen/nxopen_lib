#ifndef NXOpen_FEATURES_SCALEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SCALEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ScaleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ScaleBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ScaleBuilder;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class SelectBodyList;
    namespace Features
    {
        class _ScaleBuilderBuilder;
        /**
            Represents a @link Features::Scale Features::Scale@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateScaleBuilder Features::FeatureCollection::CreateScaleBuilder@endlink  <br> 
        Default values:
        ScaleAlongAxis.RightHandSide: 1.0
        ScaleOtherDirection.RightHandSide: 1.0
        ScaleXdirection.RightHandSide: 1.0
        ScaleYdirection.RightHandSide: 1.0
        ScaleZdirection.RightHandSide: 1.0
        UniformFactor.RightHandSide: 1.0
        */
        class NXOPENCPPEXPORT ScaleBuilder : public Features::FeatureBuilder
        {
            /** Scale type */
            public: enum Types
            {
                TypesUniform/** Uniform scaling */,
                TypesAxisymmetric/** axisymmetric scaling */,
                TypesGeneral/** general scaling  */
            };

            private: friend class  _ScaleBuilderBuilder;
            protected: ScaleBuilder();
            /**Returns  the scale type @link Features::ScaleBuilder::Types Features::ScaleBuilder::Types@endlink  <br> License requirements : None */
            public: NXOpen::Features::ScaleBuilder::Types Type
            (
            );
            /**Sets  the scale type @link Features::ScaleBuilder::Types Features::ScaleBuilder::Types@endlink  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::ScaleBuilder::Types type /** Gets the type of the scale method */
            );
            /**Returns  the bodyToScale  <br> License requirements : None */
            public: NXOpen::SelectBodyList * BodyToScale
            (
            );
            /**Returns  the point as @link Point Point@endlink   <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point as @link Point Point@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPoint
            (
                NXOpen::Point * point /** Set the referance point from which scaling has to be done */
            );
            /**Returns  the vector as @link Direction Direction@endlink   <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector as @link Direction Direction@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** Set the reference Axis along which scaling has to be done */
            );
            /**Returns  the csys as @link CoordinateSystem CoordinateSystem@endlink   <br> License requirements : None */
            public: NXOpen::CoordinateSystem * Csys
            (
            );
            /**Sets  the csys as @link CoordinateSystem CoordinateSystem@endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCsys
            (
                NXOpen::CoordinateSystem * csys /** Set the reference Co-ordinate system from which scaling has to be done */
            );
            /**Returns  the uniform factor  <br> License requirements : None */
            public: NXOpen::Expression * UniformFactor
            (
            );
            /**Returns  the scale along axis  <br> License requirements : None */
            public: NXOpen::Expression * ScaleAlongAxis
            (
            );
            /**Returns  the scale other direction  <br> License requirements : None */
            public: NXOpen::Expression * ScaleOtherDirection
            (
            );
            /**Returns  the scale xdirection  <br> License requirements : None */
            public: NXOpen::Expression * ScaleXdirection
            (
            );
            /**Returns  the scale ydirection  <br> License requirements : None */
            public: NXOpen::Expression * ScaleYdirection
            (
            );
            /**Returns  the scale zdirection  <br> License requirements : None */
            public: NXOpen::Expression * ScaleZdirection
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
