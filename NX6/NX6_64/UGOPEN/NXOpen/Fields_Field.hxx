#ifndef NXOpen_FIELDS_FIELD_HXX_INCLUDED
#define NXOpen_FIELDS_FIELD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_Field.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class Field;
    }
    class BasePart;
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    class NXObject;
    namespace Fields
    {
        class _FieldBuilder;
        /**  @brief Represents an Field abstract class. 

          
                 <br> Fields represent a way of defining a function for one or more dependent 
                domains/variables (see @link Fields::FieldVariable Fields::FieldVariable@endlink ) based on relationships 
                to one or more independent domains/variables (time, temperature, etc.). <br> 
                 <br> Fields are a generic, reusable concept that crosses many 
                areas of functionality.  Defined properly, they provide an extendable concept that can 
                service both simple and complicated needs, for example,  modeling elements, properties, 
                materials, boundary conditions in CAE/FEM applications. <br>  */
        class NXOPENCPPEXPORT Field : public NXObject
        {
            private: friend class  _FieldBuilder;
            protected: Field();
            /** Copy the field to the target part.
                     <br> License requirements : None */
            public: void CopyToPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Create a new table field from this field (regardless of type).  Note
                    * that the table will be created have the N number of rows, where
                    * N is the product of the number of points for each independent variable, 
                    * resulting in a grid (or lattice).  The resulting field will be in the
                    * same part.
                     <br> License requirements : None */
            public: void CopyAsTableToPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Update the name of the field.
                     <br> License requirements : None */
            public: void Rename
            (
                const NXString & newName /** new field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the spatial map for the formula field.
                     <br> License requirements : None */
            public: void SetSpatialMap
            (
                NXOpen::Fields::SpatialMap * overrideMap /** spatial map to set */
            );
            /** Delete this field; destroys the field and removes all references to it.
                     <br> License requirements : None */
            public: void Delete
            (
            );
            /** Creates displayed graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                      <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
