#ifndef NXOpen_CURVECOLLECTION_HXX_INCLUDED
#define NXOpen_CURVECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CurveCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class CurveCollection;
    class BasePart;
    class Curve;
    class Arc;
    class Ellipse;
    class Hyperbola;
    class Line;
    class NXMatrix;
    class Parabola;
    class Point;
    /** Represents a collection of @link Curve Curve@endlink s.  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT CurveCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit CurveCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Curve * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::CurveCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::CurveCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a @link Line Line@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Line * CreateLine
        (
            const NXOpen::Point3d & startPoint /** Start point */,
            const NXOpen::Point3d & endPoint /** End point */
        );
        /** Creates a @link Line Line@endlink  joining given start @link Point Point@endlink  and
                End @link Point Point@endlink .  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Line * CreateLine
        (
            NXOpen::Point * startPoint /** Start @link Point Point@endlink  */,
            NXOpen::Point * endPoint /** End @link Point Point@endlink  */
        );
        /** Creates an @link Arc Arc@endlink  that passes through the three specified points.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & startPoint /** Start point */,
            const NXOpen::Point3d & pointOn /** Point that the arc passes through. */,
            const NXOpen::Point3d & endPoint /** End point */,
            bool alternateSolution /** If true, the arc will be created using the alternate solution instead of the regular solution.
                    The alternate solution for an arc is the portion of the full circle that is left out of the
                    regular solution.  For example, if the regular solution is an arc that goes from 0 to 45 degrees,
                    the alternate solution will be an arc with the same center and origin but that goes from 45 degrees to 360. */,
            bool* startAndEndGotFlipped /** If true, the start point of the arc that is
                                                                 created is at the end point parameter to this method and
                                                                 the end point of the arc is at the start point parameter.
                                                                 In other words, suppose you execute
                                                                 arc = Curves.CreateArc(startPointParam, pointOnParam, endPointParam, false, flipped).
                                                                 If flipped is true, then
                                                                 arc.StartPoint equals endPointParam and
                                                                 arc.EndPoint equals startPointParam.
                                                                 */
        );
        /** Creates an @link Arc Arc@endlink .  The arc will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The start and end angles are measured relative to
                the X and Y axis of this orientation matrix.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & center /** Center of the arc */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the arc. */,
            double radius /** Radius of the arc.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates an @link Arc Arc@endlink .  The arc will be created 
                through the origin and whose normal is Z axis.  The start 
                and end angles are measured relative to the X and Y axes.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & center /** Center of the arc */,
            const NXOpen::Vector3d & xDirection /** X direction of the arc */,
            const NXOpen::Vector3d & yDirection /** Y direction of the arc */,
            double radius /** Radius of the arc.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates an @link Ellipse Ellipse@endlink .  The ellipse will be created in a plane which passes 
                through >center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The start, end, and rotation angles are measured
                relative to the X and Y axis of this orientation matrix.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Ellipse * CreateEllipse
        (
            const NXOpen::Point3d & center /** Center of ellipse */,
            double majorRadius /** Major radius */,
            double minorRadius /** Minor radius */,
            double startAngle /** Start angle in radians */,
            double endAngle /** End angle in radians */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the ellipse */
        );
        /** Creates an @link Ellipse Ellipse@endlink .  The ellipse will be created 
                through the origin and whose normal is Z axis.  The start 
                and end angles are measured relative to the X and Y axes.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Ellipse * CreateEllipse
        (
            const NXOpen::Point3d & center /** Center of the ellipse */,
            const NXOpen::Vector3d & xDirection /** X direction of the ellipse */,
            const NXOpen::Vector3d & yDirection /** Y direction of the ellipse */,
            double majorRadius /** Major radius of the ellipse.  Must be greater than zero. */,
            double minorRadius /** Minor radius of the ellipse.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates a @link Parabola Parabola@endlink .  The parabola will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The rotation angle is measured relative to the 
                X and Y axis of this orientation matrix.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Parabola * CreateParabola
        (
            const NXOpen::Point3d & center /** Center of parabola */,
            double focalLength /** Focal length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the parabola */
        );
        /** Creates a @link Parabola Parabola@endlink .  The parabola will be created 
                through the origin and whose normal is Z axis.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Parabola * CreateParabola
        (
            const NXOpen::Point3d & center /** Center of the parabola */,
            const NXOpen::Vector3d & xDirection /** X direction of the parabola */,
            const NXOpen::Vector3d & yDirection /** Y direction of the parabola */,
            double focalLength /** Focal length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */
        );
        /** Creates a @link Hyperbola Hyperbola@endlink .  The hyperbola will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The rotation angle is measured relative to the 
                X and Y axis of this orientation matrix.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Hyperbola * CreateHyperbola
        (
            const NXOpen::Point3d & center /** Center of hyperbola */,
            double semiTransverseLength /** Semi-transverse length */,
            double semiConjugateLength /** Semi-conjugate length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the hyperbola */
        );
        /** Creates a @link Hyperbola Hyperbola@endlink .  The hyperbola will be created 
                through the origin and whose normal is Z axis.  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Hyperbola * CreateHyperbola
        (
            const NXOpen::Point3d & center /** Center of the hyperbola */,
            const NXOpen::Vector3d & xDirection /** X direction of the hyperbola */,
            const NXOpen::Vector3d & yDirection /** Y direction of the hyperbola */,
            double semiTransverseLength /** Semi-transverse length */,
            double semiConjugateLength /** Semi-conjugate length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
