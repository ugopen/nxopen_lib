#ifndef NXOpen_FEATURES_STUDIOXFORMBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STUDIOXFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StudioXformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_StudioXformBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_ControlPoleManagerData.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/GeometricUtilities_SurfaceRangeBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class StudioXformBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class ControlPoleManagerData;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    namespace GeometricUtilities
    {
        class SurfaceRangeBuilder;
    }
    class NXObject;
    class Plane;
    class Point;
    class SelectNXObjectList;
    namespace Features
    {
        class _StudioXformBuilderBuilder;
        /** Represents a @link Features::StudioXform Features::StudioXform@endlink  builder   <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateStudioXformBuilder Features::FeatureCollection::CreateStudioXformBuilder@endlink  <br> 
        Default values:
        AdvancedMethod: AdvanceOff
        CurveRange.AnchorPosition: Start
        DegreesAndSegmentsOrPatches.Degree: 3
        DegreesAndSegmentsOrPatches.SegmentsOrPatches: 1
        DegreesAndSegmentsOrPatches.UDegree: 5
        DegreesAndSegmentsOrPatches.UPatches: 1
        DegreesAndSegmentsOrPatches.VDegree: 5
        DegreesAndSegmentsOrPatches.VPatches: 1
        FallOffScale: 0
        FeatureSaveMethod: Relative
        InsertKnotDirection: UDirection
        InsertKnotParameter: 20
        IsSingleSelection: 1
        KeepAllContinuity: 0
        LockRegionUEndFlexibility: 0
        LockRegionUStartFlexibility: 0
        LockRegionVEndFlexibility: 0
        LockRegionVStartFlexibility: 0
        PlanarizeDirection: U
        PlanarizeMethod: AtPlaneLocation
        PlanarizePlaneOption: YcZc
        ProportionalAllU: 0
        ProportionalAllV: 0
        ProportionalFallOffScale: 0
        ProportionalMoveAfterU: 0
        ProportionalMoveAfterV: 0
        ProportionalMoveBeforeU: 0
        ProportionalMoveBeforeV: 0
        RotationDirection: Zc
        ScalingDirection: Zc
        SurfaceRange.AnchorPosition: Vertex1
        TranslationDirection: Zc
        */
        class NXOPENCPPEXPORT StudioXformBuilder : public Features::FeatureBuilder
        {
            /** Represents the Xform type */
            public: enum Types
            {
                TypesTranslate/** Translate type of Xform */,
                TypesRotate/** Rotate type of Xform */,
                TypesScale/** Scale type of Xform */,
                TypesTranslateNormalToFaceOrCurve/** Along normal type of Xform */,
                TypesTranlsateAlongControlPolygon/** Along polygon type of Xform */,
                TypesPlanarizeRowOfPoles/** Planarize type of Xform */
            };

            /** Represents the translation direction type */
            public: enum TranslationDirectionType
            {
                TranslationDirectionTypeXc/** Translate in X direction */,
                TranslationDirectionTypeYc/** Translate in Y direction */,
                TranslationDirectionTypeZc/** Translate in Z direction */,
                TranslationDirectionTypeYcZc/** Translate on Y-Z plane */,
                TranslationDirectionTypeXcZc/** Translate on X-Z plane */,
                TranslationDirectionTypeXcYc/** Translate on X-Y plane */,
                TranslationDirectionTypeArbitraryDirection/** Translate in arbitrary direction */,
                TranslationDirectionTypeArbitraryPlane/** Translate on arbitrary plane */
            };

            /** Represents the rotation direction type */
            public: enum RotationDirectionType
            {
                RotationDirectionTypeXc/** Rotate in X direction */,
                RotationDirectionTypeYc/** Rotate in Y direction */,
                RotationDirectionTypeZc/** Rotate in Z direction */,
                RotationDirectionTypeArbitraryDirection/** Rotate in arbitrary direction */,
                RotationDirectionTypeArbitraryPlane/** Rotate on arbitrary plane */
            };

            /** Represents the rotating pivot type */
            public: enum RotatingPivotType
            {
                RotatingPivotTypeAboutObjectCenter/** Rotate pivot at the object center */,
                RotatingPivotTypeAboutSelectedObject/** Rotate pivot at the selected object */,
                RotatingPivotTypeAboutPoint/** Rotate pivot at a point */
            };

            /** Represents the scaling direction type */
            public: enum ScalingDirectionType
            {
                ScalingDirectionTypeScaleUniformly/** Scale uniformly */,
                ScalingDirectionTypePlaneOfCurve/** Scale on Plane of curve */,
                ScalingDirectionTypeXc/** Scale in X direction */,
                ScalingDirectionTypeYc/** Scale in Y direction */,
                ScalingDirectionTypeZc/** Scale in Z direction */,
                ScalingDirectionTypeYcZc/** Scale on Y-Z plane */,
                ScalingDirectionTypeXcZc/** Scale on X-Z plane */,
                ScalingDirectionTypeXcYc/** Scale on X-Y plane */,
                ScalingDirectionTypeArbitraryDirection/** Scale in arbitrary direction */,
                ScalingDirectionTypeArbitraryPlane/** Scale on arbitrary plane */
            };

            /** Represents the scaling center type */
            public: enum ScalingCenterType
            {
                ScalingCenterTypeAboutObjectCenter/** Scale center at the object center */,
                ScalingCenterTypeAboutSelectedObject/** Scale center at the selected object */,
                ScalingCenterTypeAboutPoint/** Scale center at a point */
            };

            /** Represents the planarize method type */
            public: enum PlanarizeMethodType
            {
                PlanarizeMethodTypeAtPlaneLocation/** planarize at plane location */,
                PlanarizeMethodTypeAtPoleLocation/** planarize at pole location */,
                PlanarizeMethodTypeOnABestFitPlane/** planarize at a best fit plane */
            };

            /** Represents the planarize direction type */
            public: enum PlanarizeDirectionType
            {
                PlanarizeDirectionTypeU/** U direction when planarize */,
                PlanarizeDirectionTypeV/** V direction when planarize */
            };

            /** Represents the plane option type */
            public: enum PlanarizePlaneOptionType
            {
                PlanarizePlaneOptionTypeYcZc/** On Y-Z plane when planarize */,
                PlanarizePlaneOptionTypeXcZc/** On X-Z plane when planarize */,
                PlanarizePlaneOptionTypeXcYc/** On X-Y plane when planarize */,
                PlanarizePlaneOptionTypeArbitraryPlane/** On arbitrary plane when planarize */
            };

            /** Represents the advanced method type */
            public: enum AdvancedMethodType
            {
                AdvancedMethodTypeChangeDegree/** Change degree */,
                AdvancedMethodTypeFalloff/** Fall off */,
                AdvancedMethodTypeProportionalMovement/** Proportional movement */,
                AdvancedMethodTypeKeepContinuity/** Keep continuity */,
                AdvancedMethodTypeLockRegion/** Lock region */,
                AdvancedMethodTypeInsertKnot/** Insert knot */,
                AdvancedMethodTypeAdvanceOff/** Turn off advanced methods*/
            };

            /** Represents the insert knot direction type */
            public: enum InsertKnotDirectionType
            {
                InsertKnotDirectionTypeUDirection/** Inser knot in U direction */,
                InsertKnotDirectionTypeVDirection/** Inser knot in V direction */
            };

            /** Represents the feature type */
            public: enum FeatureType
            {
                FeatureTypeRelative/** Relative feature type of Xform */,
                FeatureTypeAbsolute/** Absolute feature type of Xform */
            };

            private: friend class  _StudioXformBuilderBuilder;
            protected: StudioXformBuilder();
            /**Returns  the object to be transformed. Any face having b-surface
                    type geometry or curve having b-curve geometry can be transformed.  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * XformObjects
            (
            );
            /**Returns  the control pole manager  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ControlPoleManagerData * ControlPoleManager
            (
            );
            /**Returns  the translation direction  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::TranslationDirectionType TranslationDirection
            (
            );
            /**Sets  the translation direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTranslationDirection
            (
                NXOpen::Features::StudioXformBuilder::TranslationDirectionType translateDirection /** translatedirection */ 
            );
            /**Returns  the translation arbitrary vector. Used only when the TranslationDirection is ArbitraryDirection.  <br> License requirements : None */
            public: NXOpen::Direction * TranslationArbitraryVector
            (
            );
            /**Sets  the translation arbitrary vector. Used only when the TranslationDirection is ArbitraryDirection.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTranslationArbitraryVector
            (
                NXOpen::Direction * translateArbitraryVector /** translatearbitraryvector */ 
            );
            /**Returns  the translation arbitrary plane. Used only when the TranslationDirection is ArbitraryPlane.  <br> License requirements : None */
            public: NXOpen::Plane * TranslationArbitraryPlane
            (
            );
            /**Sets  the translation arbitrary plane. Used only when the TranslationDirection is ArbitraryPlane.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTranslationArbitraryPlane
            (
                NXOpen::Plane * translateArbitraryPlane /** translatearbitraryplane */ 
            );
            /**Returns  the rotation direction   <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::RotationDirectionType RotationDirection
            (
            );
            /**Sets  the rotation direction   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotationDirection
            (
                NXOpen::Features::StudioXformBuilder::RotationDirectionType rotateDirection /** rotatedirection */ 
            );
            /**Returns  the rotation arbitrary vector. Used only when the RotationDirection is ArbitraryDirection.   <br> License requirements : None */
            public: NXOpen::Direction * RotationArbitraryVector
            (
            );
            /**Sets  the rotation arbitrary vector. Used only when the RotationDirection is ArbitraryDirection.   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotationArbitraryVector
            (
                NXOpen::Direction * rotateArbitraryVector /** rotatearbitraryvector */ 
            );
            /**Returns  the rotation arbitrary plane. Used only when the RotationPlane is ArbitraryPlane.  <br> License requirements : None */
            public: NXOpen::Plane * RotationArbitraryPlane
            (
            );
            /**Sets  the rotation arbitrary plane. Used only when the RotationPlane is ArbitraryPlane.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotationArbitraryPlane
            (
                NXOpen::Plane * rotateArbitraryPlane /** rotatearbitraryplane */ 
            );
            /**Returns  the rotating center type  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::RotatingPivotType RotatingPivot
            (
            );
            /**Sets  the rotating center type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetRotatingPivot
            (
                NXOpen::Features::StudioXformBuilder::RotatingPivotType rotatePivot /** rotatepivot */ 
            );
            /**Returns  the rotating center  <br> License requirements : None */
            public: NXOpen::Point * PivotPoint
            (
            );
            /**Sets  the rotating center  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPivotPoint
            (
                NXOpen::Point * pivotPoint /** pivotpoint */ 
            );
            /**Returns  the scaling direction  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::ScalingDirectionType ScalingDirection
            (
            );
            /**Sets  the scaling direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingDirection
            (
                NXOpen::Features::StudioXformBuilder::ScalingDirectionType scaleDirection /** scaledirection */ 
            );
            /**Returns  the scaling arbitrary vector. Used only when the ScalingDirection is ArbitraryDirection.  <br> License requirements : None */
            public: NXOpen::Direction * ScalingArbitraryVector
            (
            );
            /**Sets  the scaling arbitrary vector. Used only when the ScalingDirection is ArbitraryDirection.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingArbitraryVector
            (
                NXOpen::Direction * scaleArbitraryVector /** scalearbitraryvector */ 
            );
            /**Returns  the scaling arbitrary plane. Used only when the ScalingDirection is ArbitraryPlane.  <br> License requirements : None */
            public: NXOpen::Plane * ScalingArbitraryPlane
            (
            );
            /**Sets  the scaling arbitrary plane. Used only when the ScalingDirection is ArbitraryPlane.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingArbitraryPlane
            (
                NXOpen::Plane * scaleArbitraryPlane /** scalearbitraryplane */ 
            );
            /**Returns  the scaling center type  <br> License requirements : None */
            public: NXOpen::Point * CenterPoint
            (
            );
            /**Sets  the scaling center type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetCenterPoint
            (
                NXOpen::Point * centerPoint /** centerpoint */ 
            );
            /**Returns  the scaling center  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::ScalingCenterType ScalingCenter
            (
            );
            /**Sets  the scaling center  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetScalingCenter
            (
                NXOpen::Features::StudioXformBuilder::ScalingCenterType scaleCenter /** scalecenter */ 
            );
            /**Returns  the planarize method  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::PlanarizeMethodType PlanarizeMethod
            (
            );
            /**Sets  the planarize method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeMethod
            (
                NXOpen::Features::StudioXformBuilder::PlanarizeMethodType planarizeMethod /** planarizemethod */ 
            );
            /**Returns  the planarize direction  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::PlanarizeDirectionType PlanarizeDirection
            (
            );
            /**Sets  the planarize direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeDirection
            (
                NXOpen::Features::StudioXformBuilder::PlanarizeDirectionType planarizeDirection /** planarizedirection */ 
            );
            /**Returns  the planarize plane option  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::PlanarizePlaneOptionType PlanarizePlaneOption
            (
            );
            /**Sets  the planarize plane option  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizePlaneOption
            (
                NXOpen::Features::StudioXformBuilder::PlanarizePlaneOptionType planarizePlaneOption /** planarizeplaneoption */ 
            );
            /**Returns  the planarize arbitrary plane  <br> License requirements : None */
            public: NXOpen::Plane * PlanarizeArbitraryPlane
            (
            );
            /**Sets  the planarize arbitrary plane  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlanarizeArbitraryPlane
            (
                NXOpen::Plane * planarizeArbitraryPlane /** planarizearbitraryplane */ 
            );
            /**Returns  the advanced method  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::AdvancedMethodType AdvancedMethod
            (
            );
            /**Sets  the advanced method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetAdvancedMethod
            (
                NXOpen::Features::StudioXformBuilder::AdvancedMethodType advancedMethod /** advancedmethod */ 
            );
            /**Returns  the degrees and segments or patches  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * DegreesAndSegmentsOrPatches
            (
            );
            /**Returns  the fall off scale  <br> License requirements : None */
            public: double FallOffScale
            (
            );
            /**Sets  the fall off scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetFallOffScale
            (
                double fallOffScale /** falloffscale */ 
            );
            /** Reset the fall off scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void FallOffReset
            (
            );
            /**Returns  a value indicating the pole number before u to participate in the proportional movement  <br> License requirements : None */
            public: int ProportionalMoveBeforeU
            (
            );
            /**Sets  a value indicating the pole number before u to participate in the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveBeforeU
            (
                int proportionalMoveBeforeU /** proportionalmovebeforeu */ 
            );
            /**Returns  a value indicating the pole number after u to participate in the proportional movement  <br> License requirements : None */
            public: int ProportionalMoveAfterU
            (
            );
            /**Sets  a value indicating the pole number after u to participate in the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveAfterU
            (
                int proportionalMoveAfterU /** proportionalmoveafteru */ 
            );
            /**Returns  a value indicating whether to use all poles in U direction during the proportional movement  <br> License requirements : None */
            public: bool ProportionalAllU
            (
            );
            /**Sets  a value indicating whether to use all poles in U direction during the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalAllU
            (
                bool proportionalAllU /** proportionalallu */ 
            );
            /**Returns  a value indicating the pole number before v to participate in the proportional movement  <br> License requirements : None */
            public: int ProportionalMoveBeforeV
            (
            );
            /**Sets  a value indicating the pole number before v to participate in the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveBeforeV
            (
                int proportionalMoveBeforeV /** proportionalmovebeforev */ 
            );
            /**Returns  a value indicating the pole number after v to participate in the proportional movement  <br> License requirements : None */
            public: int ProportionalMoveAfterV
            (
            );
            /**Sets  a value indicating the pole number after v to participate in the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalMoveAfterV
            (
                int proportionalMoveAfterV /** proportionalmoveafterv */ 
            );
            /**Returns  a value indicating whether to use all poles in V direction during the proportional movement  <br> License requirements : None */
            public: bool ProportionalAllV
            (
            );
            /**Sets  a value indicating whether to use all poles in V direction during the proportional movement  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalAllV
            (
                bool proportionalAllV /** proportionalallv */ 
            );
            /**Returns  the proportional fall off scale  <br> License requirements : None */
            public: double ProportionalFallOffScale
            (
            );
            /**Sets  the proportional fall off scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetProportionalFallOffScale
            (
                double proportionalFallOffScale /** proportionalfalloffscale */ 
            );
            /** Reset the proportional scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ProportionalReset
            (
            );
            /**Returns  a value indicating whether to keep all continuity  <br> License requirements : None */
            public: bool KeepAllContinuity
            (
            );
            /**Sets  a value indicating whether to keep all continuity  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetKeepAllContinuity
            (
                bool keepAllContinuity /** keepallcontinuity */ 
            );
            /**Returns  the continuity at U minimum  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityUMin
            (
            );
            /**Returns  the continuity at U maximum  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityUMax
            (
            );
            /**Returns  the continuity at V minimum  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityVMin
            (
            );
            /**Returns  the continuity at V maximum  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ContinuityVMax
            (
            );
            /**Returns  the curve range  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * CurveRange
            (
            );
            /**Returns  the surface range  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SurfaceRangeBuilder * SurfaceRange
            (
            );
            /**Returns  the lock region flexibility at U start  <br> License requirements : None */
            public: int LockRegionUStartFlexibility
            (
            );
            /**Sets  the lock region flexibility at U start  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionUStartFlexibility
            (
                int lockRegionUStartFlexibility /** lockregionustartflexibility */ 
            );
            /**Returns  the lock region flexibility at U end  <br> License requirements : None */
            public: int LockRegionUEndFlexibility
            (
            );
            /**Sets  the lock region flexibility at U end  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionUEndFlexibility
            (
                int lockRegionUEndFlexibility /** lockregionuendflexibility */ 
            );
            /**Returns  the lock region flexibility at V start  <br> License requirements : None */
            public: int LockRegionVStartFlexibility
            (
            );
            /**Sets  the lock region flexibility at V start  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionVStartFlexibility
            (
                int lockRegionVStartFlexibility /** lockregionvstartflexibility */ 
            );
            /**Returns  the lock region flexibility at V end  <br> License requirements : None */
            public: int LockRegionVEndFlexibility
            (
            );
            /**Sets  the lock region flexibility at V end  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLockRegionVEndFlexibility
            (
                int lockRegionVEndFlexibility /** lockregionvendflexibility */ 
            );
            /**Returns  the insert knot direction  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::InsertKnotDirectionType InsertKnotDirection
            (
            );
            /**Sets  the insert knot direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInsertKnotDirection
            (
                NXOpen::Features::StudioXformBuilder::InsertKnotDirectionType insertKnotDirection /** insertknotdirection */ 
            );
            /**Returns  the parameter where to insert knots  <br> License requirements : None */
            public: int InsertKnotParameter
            (
            );
            /**Sets  the parameter where to insert knots  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInsertKnotParameter
            (
                int insertKnotSlider /** insertknotslider */ 
            );
            /** Insert knots  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertKnots
            (
            );
            /**Returns  the feature save method  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::FeatureType FeatureSaveMethod
            (
            );
            /**Sets  the feature save method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetFeatureSaveMethod
            (
                NXOpen::Features::StudioXformBuilder::FeatureType featureSaveMethod /** featuresavemethod */ 
            );
            /** Reset the shape of a edited face or curve  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ShapeReset
            (
            );
            /**Returns  the single selection flag  <br> License requirements : None */
            public: bool IsSingleSelection
            (
            );
            /**Sets  the single selection flag  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSingleSelection
            (
                bool singleSelectionFlag /** singleselectionflag */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::StudioXformBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::StudioXformBuilder::Types type /** type */ 
            );
            /** Updates the selected xform object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateXformObject
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to be edited */
            );
            /** Converts parameters of the feature that owns selected xform object. 
                    Converts through points studio spline feature to by poles feature, 
                    otherwise removes parameters of the feature.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ConvertParameters
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to convert pameters from */
            );
            /** Changes degree of the selected xform object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ChangeDegree
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change degree of */
            );
            /** Inserts knot in the selected xform object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertKnot
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to insert knot in */
            );
            /** Changes flexibility of the selected xform object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ChangeFlexibility
            (
                NXOpen::NXObject * xformObject /** the selected face or curve to change flexibility of */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
