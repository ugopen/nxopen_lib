#ifndef NXOpen_OPTIONS_OPTIONSMANAGER_HXX_INCLUDED
#define NXOpen_OPTIONS_OPTIONSMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Options_OptionsManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Options_ChangeList.hxx>
#include <NXOpen/Options_DraftingStandardChangeList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Options
    {
        class OptionsManager;
    }
    class Session;
    namespace Options
    {
        class ChangeList;
    }
    namespace Options
    {
        class DraftingStandardChangeList;
    }
    namespace Options
    {
        /** Describes type of an option. */
        enum OptionType
        {
            OptionTypeInt/** Option value is an integer number */,
            OptionTypeReal/** Option value is a real number */,
            OptionTypeString/** Option value is an ascii string */,
            OptionTypeStringList/** Option value is a list of ascii strings */,
            OptionTypeLogical/** Option value is logical */,
            OptionTypeUtf8string/** Option value is a utf8 string */,
            OptionTypeUtf8stringList/** Option value is a list of utf8 strings */
        };

    }
    namespace Options
    {
        /** 
            Manages options. 
             <br> 
            OptionsManager methods use an option name as a unique identifier for
            accessing individual options and throw an error if an option with a given name is not
            found.  All existing option names are listed in the Online Documentation.
             <br> 
             <br> 
            If a level parameter is not supplied to a query method then the option value effective in
            current session is returned.  If a level parameter is supplied then then value
            that is stored at the specified level is returned. This may not be the same as the value
            effective in the current session and may take effect only after the session is restarted.
             <br> 
             <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT OptionsManager
        {
            private: NXOpen::Session* m_owner;
            public: explicit OptionsManager(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Gets the value of an @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink  option. 
                        Throws an error if option type is not @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink . 
                     @return  Option value  <br> License requirements : None */
            public: int GetIntValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink  option. 
                        Throws an error if the option is not of type @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink .
                      @return  Option value.  <br> License requirements : None */
            public: double GetRealValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a @link  Options::OptionTypeString   Options::OptionTypeString @endlink  option. 
                        Throws an error if the option is not of type @link  Options::OptionTypeString   Options::OptionTypeString @endlink .
                     @return  Option value.  <br> License requirements : None */
            public: NXString GetStringValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a @link  Options::OptionTypeUtf8string   Options::OptionTypeUtf8string @endlink  option. 
                        Throws an error if the option is not of type @link  Options::OptionTypeUtf8string   Options::OptionTypeUtf8string @endlink .
                     @return  Option utf8 value.  <br> License requirements : None */
            public: NXString GetUtf8stringValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink  option. 
                        Throws an error if the option is not of type @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink .
                     @return  Option value.  <br> License requirements : None */
            public: std::vector<NXString> GetStringListValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink  option. 
                        Throws an error if the option is not of type @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink .  @return  Option value.  <br> License requirements : None */
            public: bool GetLogicalValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of an @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink  option at the specified level. 
                        Throws an error if the option is not of type @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink .
                     @return  Option value  <br> License requirements : None */
            public: int GetIntValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Gets the value of a @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink  option at the specified level. 
                        Throws an error if the option is not of type @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink .
                     @return  Option value  <br> License requirements : None */
            public: double GetRealValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Gets the value of a @link  Options::OptionTypeString   Options::OptionTypeString @endlink  option at the specified level. 
                        Throws an error if the option is not of type @link  Options::OptionTypeString   Options::OptionTypeString @endlink .
                     @return  Option value  <br> License requirements : None */
            public: NXString GetStringValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Gets the value of a @link  Options::OptionTypeUtf8string   Options::OptionTypeUtf8string @endlink  option at the specified level. 
                        Throws an error if the option is not of type @link  Options::OptionTypeString   Options::OptionTypeString @endlink .
                     @return  Option value  <br> License requirements : None */
            public: NXString GetUtf8stringValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Gets the value of a @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink  option at the specified level. 
                        Throws an error if the option is not of type @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink .
                     @return  Option value  <br> License requirements : None */
            public: std::vector<NXString> GetStringListValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Gets the value of a @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink  option at the specified level.  
                        Throws an error if the option is not of type @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink .
                     @return  Option value  <br> License requirements : None */
            public: bool GetLogicalValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Creates an instance of @link  Options::ChangeList   Options::ChangeList @endlink  class, in order to edit a set of options. 
                    It is not possible to create an instance of @link  Options::ChangeList   Options::ChangeList @endlink  for @link  Options::LevelTypeShipped   Options::LevelTypeShipped @endlink  level, 
                    or for a level that is not defined or is not writeable.   @return  An instanse of @link  Options::ChangeList   Options::ChangeList @endlink  class  <br> License requirements : None */
            public: NXOpen::Options::ChangeList * NewOptionsChangeList
            (
                NXOpen::Options::LevelType level /** Options level.  */,
                NXOpen::Options::LevelLockedByDefault lockedByDefault /** Specifies whether Options level is locked by default. 
                            Ignored at @link  Options::LevelTypeUser   Options::LevelTypeUser @endlink  level as locks at @link  Options::LevelTypeUser   Options::LevelTypeUser @endlink  level are not supported. 
                            If specified default lock status is different from the current one, then all exisitng locks are cleared.  */
            );
            /** Creates an instance of @link  Options::DraftingStandardChangeList   Options::DraftingStandardChangeList @endlink  class, in order to edit a set of options. 
                    It is not possible to create an instance of @link  Options::DraftingStandardChangeList   Options::DraftingStandardChangeList @endlink  for @link  Options::LevelTypeShipped   Options::LevelTypeShipped @endlink  level, 
                    or for a level that is not defined or is not writeable.   @return  An instanse of @link  Options::DraftingStandardChangeList   Options::DraftingStandardChangeList @endlink  class  <br> License requirements : None */
            public: NXOpen::Options::DraftingStandardChangeList * NewOptionsDraftingStandardChangeList
            (
                NXOpen::Options::LevelType level /** Options level.  */,
                const NXString & filename /** Specifies the filename to save/save as.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the names of all available options.  @return  List of names of all available options.  <br> License requirements : None */
            public: std::vector<NXString> GetAllOptions
            (
            );
            /** Returns true if the option value is locked at the specified level. 
                        Locks are not supported at @link  Options::LevelTypeUser   Options::LevelTypeUser @endlink  and @link  Options::LevelTypeShipped   Options::LevelTypeShipped @endlink  levels.  @return  Lock status  <br> License requirements : None */
            public: bool IsValueLocked
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Returns true if the option value exists at the specified level. Always true for the @link  Options::LevelTypeShipped   Options::LevelTypeShipped @endlink  level.  @return  True if value is set  <br> License requirements : None */
            public: bool IsValueSet
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Returns then user comment at the specified level. User comments are not supported at the @link  Options::LevelTypeShipped   Options::LevelTypeShipped @endlink  level.  @return  User comment text.  <br> License requirements : None */
            public: NXString GetUserComment
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Options::LevelType level /** Options level. */
            );
            /** Returns an option's type.  @return  Option type  <br> License requirements : None */
            public: NXOpen::Options::OptionType GetOptionType
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns true if the option's values at the specified level are locked by default.
                        Locked by default means that if an option value does not exist at this level, 
                        then it is locked.
                     @return  True if options values are locked by default  <br> License requirements : None */
            public: bool IsLevelLockedByDefault
            (
                NXOpen::Options::LevelType level /** Options level. */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
