#ifndef NXOpen_GEOMETRICUTILITIES_CONTROLPOLEMANAGERDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CONTROLPOLEMANAGERDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ControlPoleManagerData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_ControlPoleManagerData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ControlPoleManagerData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Point;
    namespace GeometricUtilities
    {
        class _ControlPoleManagerDataBuilder;
        /**
               This class manages the control poles for a set of surfaces or curves.
            */
        class NXOPENCPPEXPORT ControlPoleManagerData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ControlPoleManagerDataBuilder;
            protected: ControlPoleManagerData();
            /** Sets new group poles  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoles
            (
                int groupIndex /** Entity group index. Control Pole Manager needs to handle poles 
                                                         from different surfaces or curves. Therefore, poles need to be 
                                                         grouped. Poles associated with the same entity are placed into 
                                                         a group. When setting or getting poles from the Pole Manager, 
                                                         the caller needs to provide a group index to identify poles with 
                                                         the proper entity group.
                                                     */,
                const std::vector<int> & polesIndex /** Poles index */,
                const std::vector<NXOpen::Point *> & poles /** Poles */
            );
            /** Gets poles of an entity  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void GetPoles
            (
                int groupIndex /** Entity group index. Control Pole Manager needs to handle poles 
                                                         from different surfaces or curves. Therefore, poles need to be 
                                                         grouped. Poles associated with the same entity are placed into 
                                                         a group. When setting or getting poles from the Pole Manager, 
                                                         the caller needs to provide a group index to identify poles with 
                                                         the proper entity group.
                                                     */,
                std::vector<int> & polesIndex /** Poles index */,
                std::vector<NXOpen::Point *> & poles /** Poles */
            );
            /** Adds new selected pole  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SelectPoles
            (
                int groupIndex /** Entity group index. Control Pole Manager needs to handle poles 
                                                         from different surfaces or curves. Therefore, poles need to be 
                                                         grouped. Poles associated with the same entity are placed into 
                                                         a group. When setting or getting poles from the Pole Manager, 
                                                         the caller needs to provide a group index to identify poles with 
                                                         the proper entity group.
                                                     */,
                const std::vector<int> & polesIndex /** Poles index */,
                const std::vector<NXOpen::Point *> & poles /** Poles */
            );
            /** Removes selected pole  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void DeselectPoles
            (
                int groupIndex /** Entity group index. Control Pole Manager needs to handle poles 
                                                         from different surfaces or curves. Therefore, poles need to be 
                                                         grouped. Poles associated with the same entity are placed into 
                                                         a group. When setting or getting poles from the Pole Manager, 
                                                         the caller needs to provide a group index to identify poles with 
                                                         the proper entity group.
                                                     */,
                const std::vector<int> & polesIndex /** Poles index */,
                const std::vector<NXOpen::Point *> & poles /** Poles */
            );
            /** Gets selected poles  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void GetSelectedPoles
            (
                int groupIndex /** Entity group index. Control Pole Manager needs to handle poles 
                                                         from different surfaces or curves. Therefore, poles need to be 
                                                         grouped. Poles associated with the same entity are placed into 
                                                         a group. When setting or getting poles from the Pole Manager, 
                                                         the caller needs to provide a group index to identify poles with 
                                                         the proper entity group.
                                                     */,
                std::vector<int> & polesIndex /** Poles index */,
                std::vector<NXOpen::Point *> & poles /** Poles */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
