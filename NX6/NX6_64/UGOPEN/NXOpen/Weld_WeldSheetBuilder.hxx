#ifndef NXOpen_WELD_WELDSHEETBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDSHEETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldSheetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/WeldAssistant.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        class WeldSheetBuilder;
    }
    class DisplayableObject;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Weld
    {
        class _WeldSheetBuilderBuilder;
        /** Represents a Spot Weld feature  <br> To create a new instance of this class, use @link Weld::WeldManager::CreateWeldSheetBuilder Weld::WeldManager::CreateWeldSheetBuilder@endlink  <br> */
        class NXOPENCPPEXPORT WeldSheetBuilder : public Features::FeatureBuilder
        {
            private: friend class  _WeldSheetBuilderBuilder;
            protected: WeldSheetBuilder();
            /**Returns   the type of sheet to create to place weld points on.  <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointReferenceSheetType ReferenceSheetType
            (
            );
            /**Sets   the type of sheet to create to place weld points on.  <br> License requirements : ugweld ("UG WELD") */
            public: void SetReferenceSheetType
            (
                NXOpen::Weld::WeldPointReferenceSheetType referenceSheetType /** reference sheet type */ 
            );
            /** Sets a group of reference objects that represent the sheet metal for a part. Allowable
                    objects are linked features, or faces.  All objects must be in the work part. No
                    occurrences are allowed.   <br> License requirements : ugweld ("UG WELD") */
            public: void SetFaceset
            (
                int facesetIndex /** Which faceset to get the faces for. 0 is the first */,
                const std::vector<NXOpen::DisplayableObject *> & objects /** the face set reference objects */,
                const std::vector<NXOpen::Features::Feature *> & frecs /** the face set wave linked frecs */
            );
            /** Gets a group of reference objects that represent the sheet metal for a part.  <br> License requirements : ugweld ("UG WELD") */
            public: void GetFaceset
            (
                int facesetIndex /** Which faceset to get the faces for. 0 is the first */,
                std::vector<NXOpen::DisplayableObject *> & objects /** the face set reference objects */,
                std::vector<NXOpen::Features::Feature *> & frecs /** the face set wave linked frecs */
            );
            /** Removes all the face sets associated with the feature.  <br> License requirements : ugweld ("UG WELD") */
            public: void ClearFacesets
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
