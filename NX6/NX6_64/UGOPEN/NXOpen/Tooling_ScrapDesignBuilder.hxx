#ifndef NXOpen_TOOLING_SCRAPDESIGNBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SCRAPDESIGNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ScrapDesignBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_ScrapDesignBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class ScrapDesignBuilder;
    }
    class Builder;
    class NXColor;
    class ScCollector;
    class Section;
    class SelectBody;
    class SelectBodyList;
    class SelectEdge;
    class SelectEdgeList;
    namespace Tooling
    {
        class _ScrapDesignBuilderBuilder;
        /** Represents a scrap design builder   <br> To create a new instance of this class, use @link Tooling::ScrapDesignCollection::CreateScrapDesignBuilder Tooling::ScrapDesignCollection::CreateScrapDesignBuilder@endlink  <br> 
        Default values:
        AddonOperation: Overlap
        ApplyColor: 0
        DefStationNum: 1
        DoubleA: 0
        DoubleAngle: 0
        DoubleB: 0
        DoubleH: 0
        DoubleR: 0.2
        EditMethod: Split
        EditStationNum: 1
        MinRad: 0.1
        OvercutOperation: NormalType
        OverlapWidth: 0.1
        PierceType: Piercing
        ProcessFive: 0
        ProcessFour: 0
        ProcessOne: 0
        ProcessThree: 0
        ProcessTwo: 0
        RemoveFilter: InferScrap
        ScrapPosition: ProjectToStrip
        ScrapTol: 0.01
        ScrapTypeEnum: Create
        */
        class NXOPENCPPEXPORT ScrapDesignBuilder : public Builder
        {
            /** Specifies the operation type of scraps */
            public: enum Body
            {
                BodyCreate/** Create operation */,
                BodyEdit/** Edit operation */,
                BodyAddon/** Add-on operation */,
                BodyGrouping/** Grouping operation */
            };

            /** Specifies the creation type of scraps */
            public: enum ScrapDefType
            {
                ScrapDefTypeBlankBoundarySketch/** Boundary curves or sketch will be used to create scraps */,
                ScrapDefTypeHoleBoundary/** Hole boundary curves will be extracted automatically to create scraps */,
                ScrapDefTypeClosedCurves/** Close curves will be used to create scraps */,
                ScrapDefTypeBoundaryLines/** Boundary lines will be used to create an entire scrap */,
                ScrapDefTypeExistedSheetBody/** Existed sheet body will be converted to scrap */
            };

            /** Specifies the definition type of scraps */
            public: enum DefScrapType
            {
                DefScrapTypePiercing/** Scrap will be defined as piercing type */,
                DefScrapTypePiloting/** Scrap will be defined as piloting type */
            };

            /** Specifies the position method of scraps, projecting method is normally used */
            public: enum ScrapDefPosition
            {
                ScrapDefPositionProjectToStrip/** Scrap will be projected into the strip plane */,
                ScrapDefPositionKeepOrigin/** Scrap will be created in the original plane */
            };

            /** Specifies the edit type of scraps */
            public: enum EditScrapType
            {
                EditScrapTypeSplit/** Splits a scrap by selected curves */,
                EditScrapTypeMerge/** Merges two scraps into one */,
                EditScrapTypeApplyMinimumRadius/** Applies minimum radius to sharp corners of scraps */,
                EditScrapTypeChangeStation/** Changes the station number of scraps */,
                EditScrapTypeDelete/** Deletes scraps */,
                EditScrapTypeUpdate/** Updates scraps if there is any design change */
            };

            /** Specifies the removing type as filter  */
            public: enum RemoveType
            {
                RemoveTypeInferScrap/** Captures inferred scraps */,
                RemoveTypeOverlap/** Captures overlaps */,
                RemoveTypeOvercut/** Captures overcuts */,
                RemoveTypeTrimming/** Captures trimming scraps */,
                RemoveTypeHole/** Captures hole scraps */,
                RemoveTypeScrap/** Captures normal scraps */,
                RemoveTypeAll/** Captures any kind of scraps */
            };

            /** Specifies the add-on type */
            public: enum AddonType
            {
                AddonTypeOverlap/** Creates overlap */,
                AddonTypeOvercut/** Creates overcut */,
                AddonTypeTrimming/** Creates trimming */,
                AddonTypeUserDefined/** Creates user defined add-on */
            };

            /** Specifies the over cut type, different type has different parameters */
            public: enum OvercutType
            {
                OvercutTypeNormalType/** Creates normal type of overcut */,
                OvercutTypeTangentType/** Creates tangent type of overcut */,
                OvercutTypeCircularType/** Creates circular type of overcut */,
                OvercutTypeRectangularType/** Creates rectangular type of overcut */
            };

            /** Specifies the step of trimming process, the maximum is five */
            public: enum TrimNumType
            {
                TrimNumTypeOne/** Specifies one step of trimming */,
                TrimNumTypeTwo/** Specifies two steps of trimming */,
                TrimNumTypeThree/** Specifies three steps of trimming */,
                TrimNumTypeFour/** Specifies four steps of trimming */,
                TrimNumTypeFive/** Specifies five steps of trimming */
            };

            private: friend class  _ScrapDesignBuilderBuilder;
            protected: ScrapDesignBuilder();
            /**Returns  the scrap type enum  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::Body ScrapTypeEnum
            (
            );
            /**Sets  the scrap type enum  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrapTypeEnum
            (
                NXOpen::Tooling::ScrapDesignBuilder::Body scrapTypeEnum /** scraptypeenum */ 
            );
            /**Returns  the scrap method, which includes boundary+sketch, hole boundary, close curves, boundary lines and existed sheet body  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::ScrapDefType ScrapMethod
            (
            );
            /**Sets  the scrap method, which includes boundary+sketch, hole boundary, close curves, boundary lines and existed sheet body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrapMethod
            (
                NXOpen::Tooling::ScrapDesignBuilder::ScrapDefType scrapMethod /** scrapmethod */ 
            );
            /**Returns  the curve list served for boundary+sketch or close boundaries method  <br> License requirements : None */
            public: NXOpen::Section * CurveList
            (
            );
            /**Returns  the boundary list served for boundary line method  <br> License requirements : None */
            public: NXOpen::ScCollector * BoundaryList
            (
            );
            /**Returns  the existed scrap served for exist sheet body method  <br> License requirements : None */
            public: NXOpen::SelectBodyList * ExistScrap
            (
            );
            /**Returns  the defined station number, according to it scraps can be laid out automatically in strip  <br> License requirements : None */
            public: int DefStationNum
            (
            );
            /**Sets  the defined station number, according to it scraps can be laid out automatically in strip  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDefStationNum
            (
                int defStationNum /** defstationnum */ 
            );
            /**Returns  the piercing type, piercing or piloting  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::DefScrapType PierceType
            (
            );
            /**Sets  the piercing type, piercing or piloting  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPierceType
            (
                NXOpen::Tooling::ScrapDesignBuilder::DefScrapType pierceType /** piercetype */ 
            );
            /**Returns  the scrap position  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::ScrapDefPosition ScrapPosition
            (
            );
            /**Sets  the scrap position  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrapPosition
            (
                NXOpen::Tooling::ScrapDesignBuilder::ScrapDefPosition scrapPosition /** scrapposition */ 
            );
            /**Returns  the scrap tolerance, when fail to create scrap in some cases, this value can be decreased to try again  <br> License requirements : None */
            public: double ScrapTol
            (
            );
            /**Sets  the scrap tolerance, when fail to create scrap in some cases, this value can be decreased to try again  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrapTol
            (
                double scrapTol /** scraptol */ 
            );
            /**Returns  the piercing color  <br> License requirements : None */
            public: NXOpen::NXColor * PiercingColor
            (
            );
            /**Sets  the piercing color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPiercingColor
            (
                NXOpen::NXColor * piercingColor /** piercingcolor */ 
            );
            /**Returns  the piloting color  <br> License requirements : None */
            public: NXOpen::NXColor * PilotingColor
            (
            );
            /**Sets  the piloting color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPilotingColor
            (
                NXOpen::NXColor * pilotingColor /** pilotingcolor */ 
            );
            /**Returns  the overlap color  <br> License requirements : None */
            public: NXOpen::NXColor * OverlapColor
            (
            );
            /**Sets  the overlap color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOverlapColor
            (
                NXOpen::NXColor * overlapColor /** overlapcolor */ 
            );
            /**Returns  the overcut color  <br> License requirements : None */
            public: NXOpen::NXColor * OvercutColor
            (
            );
            /**Sets  the overcut color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOvercutColor
            (
                NXOpen::NXColor * overcutColor /** overcutcolor */ 
            );
            /**Returns  the trimming color  <br> License requirements : None */
            public: NXOpen::NXColor * TrimmingColor
            (
            );
            /**Sets  the trimming color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimmingColor
            (
                NXOpen::NXColor * trimmingColor /** trimmingcolor */ 
            );
            /**Returns  the hole color  <br> License requirements : None */
            public: NXOpen::NXColor * HoleColor
            (
            );
            /**Sets  the hole color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleColor
            (
                NXOpen::NXColor * holeColor /** holecolor */ 
            );
            /**Returns  the edit method, which includes splitting, merging, applying minimum radius, changing station, deleting and updating  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::EditScrapType EditMethod
            (
            );
            /**Sets  the edit method, which includes splitting, merging, applying minimum radius, changing station, deleting and updating  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEditMethod
            (
                NXOpen::Tooling::ScrapDesignBuilder::EditScrapType editMethod /** editmethod */ 
            );
            /**Returns  the scrap to be splitted or merged  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SplitScrap
            (
            );
            /**Returns  the second scrap to merge with the first one  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SecondScrap
            (
            );
            /**Returns  the splitting curve  <br> License requirements : None */
            public: NXOpen::Section * SplitCurve
            (
            );
            /**Returns  the removing filter  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::RemoveType RemoveFilter
            (
            );
            /**Sets  the removing filter  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRemoveFilter
            (
                NXOpen::Tooling::ScrapDesignBuilder::RemoveType removeFilter /** removefilter */ 
            );
            /**Returns  the minimum radius to blend sharp corners  <br> License requirements : None */
            public: double MinRad
            (
            );
            /**Sets  the minimum radius to blend sharp corners  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMinRad
            (
                double minRad /** minrad */ 
            );
            /**Returns  the station number to lay out in strip  <br> License requirements : None */
            public: int EditStationNum
            (
            );
            /**Sets  the station number to lay out in strip  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEditStationNum
            (
                int editStationNum /** editstationnum */ 
            );
            /**Returns  the add-on operation, which includes overlap, overcut, trimming and user defined  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::AddonType AddonOperation
            (
            );
            /**Sets  the add-on operation, which includes overlap, overcut, trimming and user defined  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAddonOperation
            (
                NXOpen::Tooling::ScrapDesignBuilder::AddonType addonOperation /** addonoperation */ 
            );
            /**Returns  the scrap that overlap will be attached  <br> License requirements : None */
            public: NXOpen::SelectBody * AttachScrap
            (
            );
            /**Returns  the edge that overlap will be attached  <br> License requirements : None */
            public: NXOpen::SelectEdgeList * AttachEdge
            (
            );
            /**Returns  the overlap width  <br> License requirements : None */
            public: double OverlapWidth
            (
            );
            /**Sets  the overlap width  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOverlapWidth
            (
                double overlapWidth /** overlapwidth */ 
            );
            /**Returns  the overcut operation, which includes normal type, tangent type, circular type and rectangular type  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::OvercutType OvercutOperation
            (
            );
            /**Sets  the overcut operation, which includes normal type, tangent type, circular type and rectangular type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOvercutOperation
            (
                NXOpen::Tooling::ScrapDesignBuilder::OvercutType overcutOperation /** overcutoperation */ 
            );
            /**Returns  the edge that overcut will be attached  <br> License requirements : None */
            public: NXOpen::SelectEdge * OvercutEdge
            (
            );
            /**Returns  the double A served as the parameter of overcut  <br> License requirements : None */
            public: double DoubleA
            (
            );
            /**Sets  the double A served as the parameter of overcut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoubleA
            (
                double doubleA /** doublea */ 
            );
            /**Returns  the double B served as the parameter of overcut  <br> License requirements : None */
            public: double DoubleB
            (
            );
            /**Sets  the double B served as the parameter of overcut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoubleB
            (
                double doubleB /** doubleb */ 
            );
            /**Returns  the double H served as the parameter of overcut  <br> License requirements : None */
            public: double DoubleH
            (
            );
            /**Sets  the double H served as the parameter of overcut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoubleH
            (
                double doubleH /** doubleh */ 
            );
            /**Returns  the double Angle served as the parameter of overcut  <br> License requirements : None */
            public: double DoubleAngle
            (
            );
            /**Sets  the double Angle served as the parameter of overcut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoubleAngle
            (
                double doubleAngle /** doubleangle */ 
            );
            /**Returns  the double R served as the parameter of overcut  <br> License requirements : None */
            public: double DoubleR
            (
            );
            /**Sets  the double R served as the parameter of overcut  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDoubleR
            (
                double doubleR /** doubler */ 
            );
            /**Returns  the trimming number  <br> License requirements : None */
            public: NXOpen::Tooling::ScrapDesignBuilder::TrimNumType TrimNum
            (
            );
            /**Sets  the trimming number  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimNum
            (
                NXOpen::Tooling::ScrapDesignBuilder::TrimNumType trimNum /** trimnum */ 
            );
            /**Returns  the process one  <br> License requirements : None */
            public: double ProcessOne
            (
            );
            /**Sets  the process one  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessOne
            (
                double processOne /** processone */ 
            );
            /**Returns  the process two  <br> License requirements : None */
            public: double ProcessTwo
            (
            );
            /**Sets  the process two  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessTwo
            (
                double processTwo /** processtwo */ 
            );
            /**Returns  the process three  <br> License requirements : None */
            public: double ProcessThree
            (
            );
            /**Sets  the process three  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessThree
            (
                double processThree /** processthree */ 
            );
            /**Returns  the process four  <br> License requirements : None */
            public: double ProcessFour
            (
            );
            /**Sets  the process four  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessFour
            (
                double processFour /** processfour */ 
            );
            /**Returns  the process five  <br> License requirements : None */
            public: double ProcessFive
            (
            );
            /**Sets  the process five  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProcessFive
            (
                double processFive /** processfive */ 
            );
            /**Returns  the user defined add-on curve to create overlap+overcut  <br> License requirements : None */
            public: NXOpen::Section * UserAddonCurve
            (
            );
            /**Returns  the changing color of scrap  <br> License requirements : None */
            public: NXOpen::SelectBodyList * ChangeColScrap
            (
            );
            /**Returns  the color for assigned scrap  <br> License requirements : None */
            public: NXOpen::NXColor * AssignColor
            (
            );
            /**Sets  the color for assigned scrap  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssignColor
            (
                NXOpen::NXColor * assignColor /** assigncolor */ 
            );
            /**Returns  the toggle to determine whether the color will be used to all other scraps with the same shape  <br> License requirements : None */
            public: bool ApplyColor
            (
            );
            /**Sets  the toggle to determine whether the color will be used to all other scraps with the same shape  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApplyColor
            (
                bool applyColor /** applycolor */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
