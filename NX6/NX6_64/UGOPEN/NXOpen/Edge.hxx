#ifndef NXOpen_EDGE_HXX_INCLUDED
#define NXOpen_EDGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Edge.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/IBaseCurve.hxx>
#include <NXOpen/ICurve.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/IReferenceAxis.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Edge;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Body;
    class DisplayableObject;
    class Face;
    class IBaseCurve;
    class ICurve;
    class INXObject;
    class IProfile;
    class IReferenceAxis;
    class _EdgeBuilder;
    /** Represents an edge  <br> An edge is obtained from its parent @link Body Body@endlink  <br> */
    class NXOPENCPPEXPORT Edge : public DisplayableObject, public virtual IReferenceAxis, public virtual ICurve, public virtual IProfile
    {
        /** Solid edge type. */
        public: enum EdgeType
        {
            EdgeTypeRubber/** Rubber edge, no curve attached */,
            EdgeTypeLinear/** Linear edge */,
            EdgeTypeCircular/** Circular edge */,
            EdgeTypeElliptical/** Elliptical edge */,
            EdgeTypeIntersection/** Intersection edge */,
            EdgeTypeSpline/** Spline edge */,
            EdgeTypeSpCurve/** SP curve edge */,
            EdgeTypeForeign/** Foreign edge */,
            EdgeTypeConstantParameter/** Constant parameter edge */,
            EdgeTypeTrimmedCurve/** Trimmed curve edge */,
            EdgeTypeUndefined/** Undefined */
        };

        private: friend class  _EdgeBuilder;
        protected: Edge();
        /**Returns  the solid type of the edge  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Edge::EdgeType SolidEdgeType
        (
        );
        /** Returns the faces connected to the edge  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Face *> GetFaces
        (
        );
        /** Returns the vertices of the edge. If the edge is closed, the second vertex is the same as the first.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void GetVertices
        (
            NXOpen::Point3d* vertex1 /** First vertex in the edge */,
            NXOpen::Point3d* vertex2 /** Second vertex in the edge */
        );
        /** Returns the body containing this edge  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Body * GetBody
        (
        );
        /** Returns the length of the object  @return   <br> License requirements : None */
        public: virtual double GetLength
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
