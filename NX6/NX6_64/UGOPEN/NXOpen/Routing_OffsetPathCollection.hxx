#ifndef NXOpen_ROUTING_OFFSETPATHCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_OFFSETPATHCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_OffsetPathCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class OffsetPathCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class OffsetPath;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        /** The Routing OffsetPath object is a list of segments in a route. It also
                contains the beginning and ending control point for the path.
              <br> To obtain an instance of this class, refer to @link Routing::RouteManager Routing::RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT OffsetPathCollection : public TaggedObjectCollection
        {
            /** Bend types for offset path creation */
            public: enum BendType
            {
                BendTypeMaintainRadius/** Maintain Radius */,
                BendTypeMaintainCenter/** Maintain Center */,
                BendTypeMaximumBendTypes/** maximum bend types */ 
            };

            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit OffsetPathCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Routing::OffsetPath * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::OffsetPathCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::OffsetPathCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a offset path object.  @return  The created offset path 
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OffsetPath * CreateOffsetPath
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** The list of segments to be associated with the offset path */
            );
            /** Creates a circular offset path.  @return  The created master offset path  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OffsetPath * CreateCircularOffsetPath
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** The list of segments to be associated with the offset path */,
                bool allStock /** allstock */ ,
                const std::vector<NXOpen::Routing::Stock *> & specStocks /** specstocks */ ,
                bool maintainStock /** if TRUE: Maintain stock on paths */,
                bool copyBendCorners /** if TRUE: Copy the bend corners*/,
                NXOpen::Routing::OffsetPathCollection::BendType maintain /** Maintain radius or center  */,
                bool useMinimumBendRatio /** if TRUE: Use Ratio to Stock Diameter*/,
                double minimumBendRatio /** Minimum Bend Ratio */,
                double minimumBendRadius /** Minimum Bend Radius*/,
                bool deleteAllDuplicates /** if TRUE: Delete all duplicate paths */,
                bool createAssociativePaths /** if TRUE: Create associative paths */,
                const NXOpen::Vector3d & patternXVector /** X vector to set the pattern reference axis */,
                const NXOpen::Vector3d & patternYVector /** Y vector to set the pattern reference axis  */,
                const NXOpen::Point3d & patternAxisEndPoint /** Point to set the pattern reference axis direction 
                                                                               if NULL: Computes reference axis using heuristics*/,
                double patternStartAngle /** Start angle of the point */,
                double radialOffset /** Offset distance */,
                int nPaths /** Number of paths */,
                double totalAngle /** Total angle */,
                std::vector<NXOpen::Routing::OffsetPath *> & slavePathsCreated /** The created slave offset paths */
            );
            /** Creates a rectangular offset path. @return  The created master offset path  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::OffsetPath * CreateRectangularOffsetPath
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** The list of segments to be associated with the offset path */,
                bool allStock /** allstock */ ,
                const std::vector<NXOpen::Routing::Stock *> & specStocks /** specstocks */ ,
                bool maintainStock /** if TRUE: Maintain stock on paths */,
                bool copyBendCorners /** if TRUE: Copy the bend corners*/,
                NXOpen::Routing::OffsetPathCollection::BendType maintain /** Maintain radius or center  */,
                bool useMinimumBendRatio /** if TRUE: Use Ratio to Stock Diameter*/,
                double minimumBendRatio /** Minimum Bend Ratio */,
                double minimumBendRadius /** Minimum Bend Radius*/,
                bool deleteAllDuplicates /** if TRUE: Delete all duplicate paths */,
                bool createAssociativePaths /** if TRUE: Create associative paths */,
                const NXOpen::Vector3d & patternXVector /** X vector to set the pattern reference axis */,
                const NXOpen::Vector3d & patternYVector /** Y vector to set the pattern reference axis  */,
                const NXOpen::Point3d & patternAxisEndPoint /** Point to set the pattern reference axis direction 
                                                                               if NULL: Computes reference axis using heuristics*/,
                double patternStartAngle /** Start angle of the pattern */,
                double rowOffset /** Offset distance along the row */,
                double columnOffset /** Offset distance along the column*/,
                int nRows /** Number of rows */,
                int nColumns /** Number of columns */,
                int masterRow /** Row of the master path */,
                int masterColumn /** Column of the master path*/,
                std::vector<NXOpen::Routing::OffsetPath *> & slavePathsCreated /** The created slave offset paths */
            );
            /** Converts an offset path into @link Positioning::Constraint Positioning::Constraint@endlink  
                        objects applied to the copied routing objects.  Converts the input
                        master offset path as well as all of the children offset paths of
                        the input master offset path.
                        
                        The @link Routing::OffsetPath Routing::OffsetPath@endlink  is incompatible with segments 
                        created using the @link Routing::SegmentManager::CreateConstrainedSegment Routing::SegmentManager::CreateConstrainedSegment@endlink 
                        or to any segments that have @link Positioning::Constraint Positioning::Constraint@endlink  objects
                        applied to them.  This routine makes the path parallel and associative to
                        each other using constraints rather than the @link Routing::OffsetPath Routing::OffsetPath@endlink 
                        objects.  The converted offset path objects are logged for delete, the next
                        call to @link Update::DoUpdate Update::DoUpdate@endlink  will delete the offset path
                        objects.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ConvertOffsetPaths
            (
                NXOpen::Routing::OffsetPath * masterOffsetPath /** master offset path */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
