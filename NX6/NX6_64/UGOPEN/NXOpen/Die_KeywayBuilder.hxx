#ifndef NXOpen_DIE_KEYWAYBUILDER_HXX_INCLUDED
#define NXOpen_DIE_KEYWAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_KeywayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/Die_DiePlaneBuilder.hxx>
#include <NXOpen/Die_KeywayBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class KeywayBuilder;
    }
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DiePlaneBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Section;
    class SelectCartesianCoordinateSystem;
    class SelectNXObject;
    namespace Die
    {
        class _KeywayBuilderBuilder;
        /**
            Represents a @link Die::KeywayBuilder Die::KeywayBuilder@endlink  builder
             <br> To create a new instance of this class, use @link Die::DieCollection::Keyway Die::DieCollection::Keyway@endlink  <br> 
        Default values:
        AngleTolerance: 0.5
        CreateWithPad: 1
        DeckThickness.RightHandSide: 0 (millimeters part), 0 (inches part)
        DistanceTolerance: 0.0254 (millimeters part), 0.001 (inches part)
        Location: PositiveX
        MinimumRibHeight.RightHandSide: 200 (millimeters part), 8 (inches part)
        Offset.RightHandSide: 0 (millimeters part), 0 (inches part)
        PadHeight.RightHandSide: 65 (millimeters part), 2.6 (inches part)
        PadWidth.RightHandSide: 60 (millimeters part), 2.4 (inches part)
        PlacementOffset.RightHandSide: 0 (millimeters part), 0 (inches part)
        RunoffDepth.RightHandSide: 40 (millimeters part), 1.6 (inches part)
        RunoffLength.RightHandSide: 60 (millimeters part), 2.4 (inches part)
        RunoffRadius.RightHandSide: 30 (millimeters part), 1.2 (inches part)
        RunoffWidth.RightHandSide: 16 (millimeters part), 0.625 (inches part)
        SlotDepth.RightHandSide: 20 (millimeters part), 0.8 (inches part)
        SlotLength.RightHandSide: 100 (millimeters part), 4 (inches part)
        SlotWidth.RightHandSide: 25 (millimeters part), 1 (inches part)
        */
        class NXOPENCPPEXPORT KeywayBuilder : public Features::FeatureBuilder
        {
            /** Keyway runoff types */
            public: enum Types
            {
                TypesRectangular/** tool runoff is perpendicular to slot */,
                TypesCircular/** tool runoff is created using a plunge cut at the end of the slot */
            };

            /** Keyway location direction relative to the die centerline coordinate system */
            public: enum LocationType
            {
                LocationTypePositiveX/** +X relative to the center of the coordinate system */,
                LocationTypeNegativeX/** -X relative to the center of the coordinate system */,
                LocationTypePositiveY/** +Y relative to the center of the coordinate system */,
                LocationTypeNegativeY/** -Y relative to the center of the coordinate system */
            };

            private: friend class  _KeywayBuilderBuilder;
            protected: KeywayBuilder();
            /**Returns  the target solid the keyway will be united with  <br> License requirements : None */
            public: NXOpen::SelectNXObject * Target
            (
            );
            /**Returns  the location for the keyway  <br> License requirements : None */
            public: NXOpen::Die::KeywayBuilder::LocationType Location
            (
            );
            /**Sets  the location for the keyway  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocation
            (
                NXOpen::Die::KeywayBuilder::LocationType location /** location */ 
            );
            /**Returns  the amount to offset the keyway perpendicular to the slot orientation  <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the bottom orientation plane of the keyway pad  <br> License requirements : None */
            public: NXOpen::Die::DiePlaneBuilder * BaseOrientation
            (
            );
            /**Returns  the amount to offset the base orientation  <br> License requirements : None */
            public: NXOpen::Expression * PlacementOffset
            (
            );
            /**Returns  the die centerline coordinate system for orienting the keyway  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * DieCenterlineCoordinateSystem
            (
            );
            /**Returns  the sheet metal being formed by the casting. Used to measure the height.  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SheetMetal
            (
            );
            /**Returns  the expression for the deck thickness  <br> License requirements : None */
            public: NXOpen::Expression * DeckThickness
            (
            );
            /**Returns  the closed loop section representing the base flange  <br> License requirements : None */
            public: NXOpen::Section * BaseFlange
            (
            );
            /**Returns  the closed loop section representing the interior profile of the casting  <br> License requirements : None */
            public: NXOpen::Section * InteriorProfile
            (
            );
            /**Returns  the expression for the slot length  <br> License requirements : None */
            public: NXOpen::Expression * SlotLength
            (
            );
            /**Returns  the expression for the slot width  <br> License requirements : None */
            public: NXOpen::Expression * SlotWidth
            (
            );
            /**Returns  the expression for the slot depth  <br> License requirements : None */
            public: NXOpen::Expression * SlotDepth
            (
            );
            /**Returns  the expression for the pad width  <br> License requirements : None */
            public: NXOpen::Expression * PadWidth
            (
            );
            /**Returns  the expression for the pad height  <br> License requirements : None */
            public: NXOpen::Expression * PadHeight
            (
            );
            /**Returns  the expression for the minimum rib height  <br> License requirements : None */
            public: NXOpen::Expression * MinimumRibHeight
            (
            );
            /**Returns  the expression for the runoff length  <br> License requirements : None */
            public: NXOpen::Expression * RunoffLength
            (
            );
            /**Returns  the expression for the runoff width  <br> License requirements : None */
            public: NXOpen::Expression * RunoffWidth
            (
            );
            /**Returns  the expression for the runoff depth  <br> License requirements : None */
            public: NXOpen::Expression * RunoffDepth
            (
            );
            /**Returns  the expression for the runoff radius  <br> License requirements : None */
            public: NXOpen::Expression * RunoffRadius
            (
            );
            /**Returns  the value, true or false) to decide if the pad should be created for the keyway  <br> License requirements : None */
            public: bool CreateWithPad
            (
            );
            /**Sets  the value, true or false) to decide if the pad should be created for the keyway  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCreateWithPad
            (
                bool createWithPad /** createwithpad */ 
            );
            /**Returns  the slot attributes  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * SlotAttributes
            (
            );
            /**Returns  the pad attributes  <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * PadAttributes
            (
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the type of the keyway runoff  <br> License requirements : None */
            public: NXOpen::Die::KeywayBuilder::Types Type
            (
            );
            /**Sets  the type of the keyway runoff  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetType
            (
                NXOpen::Die::KeywayBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
