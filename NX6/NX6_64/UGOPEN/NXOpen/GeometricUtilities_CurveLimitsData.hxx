#ifndef NXOpen_GEOMETRICUTILITIES_CURVELIMITSDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVELIMITSDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveLimitsData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveExtendData.hxx>
#include <NXOpen/GeometricUtilities_CurveLimitsData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveLimitsData;
    }
    namespace GeometricUtilities
    {
        class CurveExtendData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _CurveLimitsDataBuilder;
        /** Represents a @link GeometricUtilities::CurveLimitsData GeometricUtilities::CurveLimitsData@endlink  */
        class NXOPENCPPEXPORT CurveLimitsData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _CurveLimitsDataBuilder;
            protected: CurveLimitsData();
            /**Returns  the start limit  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveExtendData * StartLimit
            (
            );
            /**Returns  the end limit  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveExtendData * EndLimit
            (
            );
            /**Returns  the full circle  <br> License requirements : None */
            public: bool FullCircle
            (
            );
            /**Sets  the full circle  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFullCircle
            (
                bool fullCircle /** fullcircle */ 
            );
            /** Complements the arc  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void ComplementArc
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
