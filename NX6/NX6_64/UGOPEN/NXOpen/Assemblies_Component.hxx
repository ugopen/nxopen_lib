#ifndef NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_Component.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    class BasePart;
    class DisplayableObject;
    class ErrorList;
    class INXObject;
    class NXObject;
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Assemblies
    {
        /** Represents the component quantity type of the component */
        enum ComponentQuantity
        {
            ComponentQuantityNone/** No quantity */,
            ComponentQuantityInteger/** Integer quantity */,
            ComponentQuantityReal/** Real quantity */,
            ComponentQuantityAsRequired/** Quantity As required.*/
        };

        /** The overrall result of the degrees of freedom calculation reported
                in @link DegreesOfFreedom DegreesOfFreedom@endlink . */
        enum DegreesOfFreedomResult
        {
            DegreesOfFreedomResultUnknown/** The calculation failed to produce a result, possibly because the component
                                                                                                   is inconsistently constrained. */,
            DegreesOfFreedomResultSuccess/** The degrees of freedom calculation succeeded. */
        };

        /** The status of a rotation point, rotation axis or translation direction reported
                in @link DegreesOfFreedom DegreesOfFreedom@endlink . */
        enum DegreesOfFreedomStatus
        {
            DegreesOfFreedomStatusNotUsed/** The field is not used. */,
            DegreesOfFreedomStatusStatic/** The point or direction is well defined. */,
            DegreesOfFreedomStatusFree/** The point or direction is under defined. */,
            DegreesOfFreedomStatusInstantaneous/** The point or direction is instantaneous. */,
            DegreesOfFreedomStatusStaticNormal/** The direction represents a normal to two translational degrees of freedom. The direction is well defined. */,
            DegreesOfFreedomStatusFreeNormal/** The direction represents a normal to two translational degrees of freedom. The direction is under defined. */,
            DegreesOfFreedomStatusInstantaneousNormal/** The direction represents a normal to two translational degrees of freedom. The direction is instantaneous. */
        };

         /** Structure used to report the Degrees of Freedom of a component.
                If there is one rational degrees of freedom then axis is determined by base_point1
                and rotation_direction1. 
                If there are 2 rotational degrees of freedom then one axis is determined by base_point1
                and rotation_direction1 and the other by base_point2 and rotation_direction2.
                If there are 3 rotational degrees of freedom then the fixed point for the rotations
                is in base_point1 and there is no axis direction given.
                The translational degrees of freedom are given in translation_direction1 and
                translation_direction2, with the possibility that one of these may be a "normal" 
                to 2 degrees of freedom, as specified in the associated status. */

        struct DegreesOfFreedom
        {
            public: /** The success or otherwise of the degrees of freedom calculation */NXOpen::Assemblies::DegreesOfFreedomResult Result;
            public: /** Number of static and free rotational degrees of freedom. */int NumRotational;
            public: /** Number of static and free translational degrees of freedom. */int NumTranslational;
            public: /** Number of instantaneous rotational degrees of freedom. */int NumInstantaneousRotational;
            public: /** Number of instantaneous translational degrees of freedom. */int NumInstantaneousTranslational;
            public: /** First rotation base point status. */NXOpen::Assemblies::DegreesOfFreedomStatus BasePoint1Status;
            public: /** First rotation base point. */NXOpen::Point3d BasePoint1;
            public: /** First rotation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus RotationDirection1Status;
            public: /** First rotation direction. */NXOpen::Vector3d RotationDirection1;
            public: /** Second rotation base point status. */NXOpen::Assemblies::DegreesOfFreedomStatus BasePoint2Status;
            public: /** Second rotation base point. */NXOpen::Point3d BasePoint2;
            public: /** Second rotation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus RotationDirection2Status;
            public: /** Second rotation direction. */NXOpen::Vector3d RotationDirection2;
            public: /** First translation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus TranslationDirection1Status;
            public: /** First translation direction. */NXOpen::Vector3d TranslationDirection1;
            public: /** Second translation direction status. */NXOpen::Assemblies::DegreesOfFreedomStatus TranslationDirection2Status;
            public: /** Second translation direction. */NXOpen::Vector3d TranslationDirection2;
            public: DegreesOfFreedom() :
                Result((NXOpen::Assemblies::DegreesOfFreedomResult)0),
                NumRotational(),
                NumTranslational(),
                NumInstantaneousRotational(),
                NumInstantaneousTranslational(),
                BasePoint1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                BasePoint1(),
                RotationDirection1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                RotationDirection1(),
                BasePoint2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                BasePoint2(),
                RotationDirection2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                RotationDirection2(),
                TranslationDirection1Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                TranslationDirection1(),
                TranslationDirection2Status((NXOpen::Assemblies::DegreesOfFreedomStatus)0),
                TranslationDirection2()
            {
            }
            /** Constructor for the DegreesOfFreedom struct. */ 
            public: DegreesOfFreedom(NXOpen::Assemblies::DegreesOfFreedomResult INIT_result /** The success or otherwise of the degrees of freedom calculation */, 
                    int INIT_num_rotational /** Number of static and free rotational degrees of freedom. */, 
                    int INIT_num_translational /** Number of static and free translational degrees of freedom. */, 
                    int INIT_num_instantaneous_rotational /** Number of instantaneous rotational degrees of freedom. */, 
                    int INIT_num_instantaneous_translational /** Number of instantaneous translational degrees of freedom. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_base_point1_status /** First rotation base point status. */, 
                    NXOpen::Point3d INIT_base_point1 /** First rotation base point. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_rotation_direction1_status /** First rotation direction status. */, 
                    NXOpen::Vector3d INIT_rotation_direction1 /** First rotation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_base_point2_status /** Second rotation base point status. */, 
                    NXOpen::Point3d INIT_base_point2 /** Second rotation base point. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_rotation_direction2_status /** Second rotation direction status. */, 
                    NXOpen::Vector3d INIT_rotation_direction2 /** Second rotation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_translation_direction1_status /** First translation direction status. */, 
                    NXOpen::Vector3d INIT_translation_direction1 /** First translation direction. */, 
                    NXOpen::Assemblies::DegreesOfFreedomStatus INIT_translation_direction2_status /** Second translation direction status. */, 
                    NXOpen::Vector3d INIT_translation_direction2 /** Second translation direction. */) :
                Result(INIT_result),
                NumRotational(INIT_num_rotational),
                NumTranslational(INIT_num_translational),
                NumInstantaneousRotational(INIT_num_instantaneous_rotational),
                NumInstantaneousTranslational(INIT_num_instantaneous_translational),
                BasePoint1Status(INIT_base_point1_status),
                BasePoint1(INIT_base_point1),
                RotationDirection1Status(INIT_rotation_direction1_status),
                RotationDirection1(INIT_rotation_direction1),
                BasePoint2Status(INIT_base_point2_status),
                BasePoint2(INIT_base_point2),
                RotationDirection2Status(INIT_rotation_direction2_status),
                RotationDirection2(INIT_rotation_direction2),
                TranslationDirection1Status(INIT_translation_direction1_status),
                TranslationDirection1(INIT_translation_direction1),
                TranslationDirection2Status(INIT_translation_direction2_status),
                TranslationDirection2(INIT_translation_direction2)
            {
            }
        };

    }
    namespace Assemblies
    {
        class _ComponentBuilder;
        /** 
            Represents a component in a @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink . Note that a
            Component is an occurrence whose prototype is a @link Part Part@endlink . See
            @link NXObject::Prototype NXObject::Prototype@endlink .

             <br> 

            Components are arranged in a tree, with each component having a single parent, and one
            or more children. The top of the tree is the Root Component (see
            @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink  which has a null
            parent. The components below the root are referred to as "Top Level" components, which
            represent the component parts that have been added directly to the
            ComponentAssembly. (Calling @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink  will
            create a new Top Level component.) Components beneath the top level represent
            components defined in sub-assemblies of the main assembly.

             <br> 
            
           */
        class NXOPENCPPEXPORT Component : public DisplayableObject, public virtual Routing::ICharacteristic
        {
            private: friend class  _ComponentBuilder;
            protected: Component();
            /**Returns  the parent of the component. For the root component of an assembly, this
                    will be null. See @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink .
                  <br> License requirements : None */
            public: NXOpen::Assemblies::Component * Parent
            (
            );
            /**Returns  the @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  which owns this component as a "Top Level" component.
                    For components in a multi-level assembly, this is NOT the same the part that owns this component object. 
                    I.e. it is not the same as calling:
                     @code 
                     NXObject.OwningPart()
                     @endcode 
                     @code 
                    BasePart.ComponentAssembly()
                     @endcode 
                    
                  <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly * DirectOwner
            (
            );
            /** Returns the child components of this component  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetChildren
            (
            );
            /** Given a prototype object, returns the corresponding occurrence
                in this component  @return  the occurrence of the prototype in this component  <br> License requirements : None */
            public: NXOpen::NXObject * FindOccurrence
            (
                NXOpen::NXObject * proto /** the prototype */
            );
            /** 
                    Gets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                 @return  The layer option of the component in its parent part
                                                 -1 Means that the component's geometry has the layer settings defined in its orginal part
                                                  1-255 Means the components geometry is on the specified layer
                                           <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetLayerOption
            (
            );
            /** 
                    Sets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLayerOption
            (
                int layer /** The new layer for this component in its parent part 
                                                     -1 Means use the original layer settings defined in the component's part.
                                                      0 Means use the current work layer
                                                      1-255 Means use the specified layer.
                                         */
            );
            /**Returns  the name of the reference set which represents the entire part. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EntirePartRefsetName
            (
            );
            /**Returns  the name of the reference set which represents the empty set. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EmptyPartRefsetName
            (
            );
            /**Returns  
                    the name of the reference set used for this component
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString ReferenceSet
            (
            );
            /**
                    Gets the position of a component
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetPosition
            (
                NXOpen::Point3d* position /** The origin of this component */,
                NXOpen::Matrix3x3* orientation /** The orientation of this component */
            );
            /**Returns 
                    the @link Assemblies::Arrangement Assemblies::Arrangement@endlink  that controls this component's
                    suppression state.  The controlling Arrangement will be defined in a
                    @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  in the tree above this Component.
                     <br> 
                    Note: In the current release, Arrangements are only used for controlling a
                    component's suppression state. In future releases, further attributes will be
                    controlled via Arrangements.
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * SuppressingArrangement
            (
            );
            /**
                    Changes the Arrangement used for this component. If this is the root component
                    (i.e. it has no parent) then this is equivalent to setting the active arrangement
                    in the owner. (See @link Assemblies::Component::DirectOwner Assemblies::Component::DirectOwner@endlink  and
                    @link Assemblies::ComponentAssembly::SetActiveArrangement Assemblies::ComponentAssembly::SetActiveArrangement@endlink .) For
                    non-root components, this sets the arrangement used for this component in the
                    context of its parent component. Note that this method should only be used for
                    components which have children.
                    
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUsedArrangement
            (
                NXOpen::Assemblies::Arrangement * newArrangement /** The new @link Assemblies::Arrangement Assemblies::Arrangement@endlink . This Arrangement
                                                                               must be defined in a the ComponentAssembly of this Component's
                                                                               prototype part.
                                                                            */
            );
            /**Returns 
                    the Arrangement used for this component. See @link Assemblies::Component::SetUsedArrangement Assemblies::Component::SetUsedArrangement@endlink 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * UsedArrangement
            (
            );
            /**Returns 
                    the suppressed state of the component in its controlling arrangement. 
                    (See @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink .)
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsSuppressed
            (
            );
            /**
                    Suppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be suppressed in all Arrangements in the ComponentAssembly, not just
                    in the controlling arrangement.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Suppress
            (
            );
            /**
                    Suppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be suppressed in all Arrangements in
                    the ComponentAssembly.  
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 

                     <br> And then calling  <br> 

                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Suppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be suppressed. Each component will be
                                                                                                    suppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /**
                    Unsuppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be unsuppressed in all Arrangements in the ComponentAssembly.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                    @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink 

                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Unsuppress
            (
            );
            /**
                    Unsuppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be unsuppressed in all Arrangements in
                    the ComponentAssembly.  This is equivalent to calling:

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 


                     <br> @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.

                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Unsuppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be unsuppressed. Each component will be
                                                                                                    unsuppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /** Update the assembly structure for this assembly in the 
                    context of the displayed part to the specified number of
                    levels, ignoring components already processed by previous
                    calls.
                 <br> License requirements : gateway ("UG GATEWAY") */
            public: void UpdateStructure
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Component tags to start update structure from */,
                int nLevels /** The number of levels to update. If -1 then all levels are updated.*/
            );
            /** Update the assembly structure for this assembly in the 
                    context of the displayed part to the specified number of
                    levels.
                 <br> License requirements : gateway ("UG GATEWAY") */
            public: void UpdateStructure
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Component tags to start update structure from */,
                int nLevels /** The number of levels to update. If -1 then all levels are updated.*/,
                bool checkComponentsVisited /** If true, only perform update structure on each component once this session.*/
            );
            /**Returns  the displayable name of the prototype part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString DisplayName
            (
            );
            /**Returns  the fixed state of this component.  True if there is an unsuppressed
                    @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  fix constraint on this component
                    and false otherwise.  If the part controlling the position of this
                    component is not loaded then false will be returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsFixed
            (
            );
            /**Returns  a fix @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink  of this component.
                    The constraint may be suppressed or NULL.  If the part 
                    controlling the position of this component is not loaded then NULL
                    will be returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentConstraint * FixConstraint
            (
            );
            /** Returns the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s directly connected to this component.  If
                    the part containing those constraints is not loaded then no constraints will be 
                    returned.
                 @return  Constraints directly connected to this component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ComponentConstraint *> GetConstraints
            (
            );
            /** Returns the @link DegreesOfFreedom DegreesOfFreedom@endlink  for this component. 
                 @return  The degrees of freedom of this component.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::DegreesOfFreedom GetDegreesOfFreedom
            (
            );
            /** Returns the @link DegreesOfFreedom DegreesOfFreedom@endlink  for this component. 
                    The degrees of freedom are found relative to the components passed in.
                    Those components are regarded as fixed and only constraints directly 
                    connecting this component with those in the array are considered.
                 @return  The degrees of freedom of this component.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::DegreesOfFreedom GetDegreesOfFreedom
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components relative to which the degrees 
                                                                                                               of freedom will be found.
                                                                                                           */
            );
            /** Recalls the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s previously remembered on the part
                    of this component, creating new constraints from them.  The new constraints are
                    incomplete and refer to the component.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RecallConstraints
            (
            );
            /** Recalls the @link Positioning::ComponentConstraint Positioning::ComponentConstraint@endlink s previously remembered on the part
                    of this component, creating new constraints from them.  The new constraints are
                    incomplete and refer to the component.
                 @return  The constraints created by the recall operation  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ComponentConstraint *> RecallAndListConstraints
            (
            );
            /** Remove all the remembered constraints stored on the part of this component.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveRememberedConstraints
            (
            );
            /**
                    Gets the component state as Geometric or Non-Geometric.
                 @return  True if the component is non-geometric, false otherwise  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetNonGeometricState
            (
            );
            /**
                    Gets the quantity type of the components. Returns @link Assemblies::ComponentQuantity Assemblies::ComponentQuantity@endlink .
                 @return  Quantity type an enumeration value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ComponentQuantity GetComponentQuantityType
            (
            );
            /**
                    Gets the value of the integer quantity of component.
                 @return  Integer quantity value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetIntegerQuantity
            (
            );
            /**
                    Gets the value of real quantity and corresponding units on this component.
                 @return  Real quantity value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: double GetRealQuantity
            (
                NXString* quantityUnits /** Units */
            );
            /**
                    Gets the as-required quantity on this component.
                 @return  As-Required string "A/R" <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString GetAsRequiredQuantity
            (
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
