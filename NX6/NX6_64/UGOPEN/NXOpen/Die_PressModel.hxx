#ifndef NXOpen_DIE_PRESSMODEL_HXX_INCLUDED
#define NXOpen_DIE_PRESSMODEL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_PressModel.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class PressModel;
    }
    namespace Die
    {
    }
    namespace Die
    {
        /** Represents a Die Simulation - Press Model */
        class NXOPENCPPEXPORT PressModel : public TransientObject
        {
            public: explicit PressModel(void *ptr);
            /** Frees the object from memory.  After this method is called,
               it is illegal to use the object.  In .NET, this method is automatically
               called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~PressModel();
            /** Get number of operations  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: int GetNumOperations
            (
            );
            /** Set operation slide height  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetOperationSlideHeight
            (
                int operation /** Operation of the slide */,
                double slideHeight /** Slide height */
            );
            /** Set operation cushion values  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetOperationCushionSettings
            (
                int operation /** Operation of the cushion */,
                double liftStartAngle /** Lift start angle */,
                double liftStopAngle /** Lift stop angle */,
                double liftToDist /** Distance to lift to */,
                double lockAtDist /** Distance where lock happens */
            );
            /** Set values of the User Defined transport curve set, for given operation  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetOperationUserTransportCurves
            (
                int operation /** Operation of the transport devices */,
                const std::vector<double> & vals /** The curve set values */
            );
            /** Tell the press model which transport curve set to use in the given operation  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetOperationTransportCurveSet
            (
                int operation /** Operation of the transport devices */,
                int curveSet /** Index of the curve set */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
