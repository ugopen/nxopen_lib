#ifndef NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Features_CopyPasteBuilder.hxx>
#include <NXOpen/Features_FeatureReplayBuilder.hxx>
#include <NXOpen/Features_JoinCurvesBuilder.hxx>
#include <NXOpen/Features_RasterImage.hxx>
#include <NXOpen/Features_RemoveParametersBuilder.hxx>
#include <NXOpen/Features_ReplaceFeatureBuilder.hxx>
#include <NXOpen/Features_ThroughCurveMeshBuilder.hxx>
#include <NXOpen/Features_ThroughCurvesBuilder.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class FeatureCollection;
    }
    class Part;
    namespace Features
    {
        class Feature;
    }
    class Body;
    class CutView;
    namespace Die
    {
        class DieCollection;
    }
    namespace Features
    {
        class AOCSBuilder;
    }
    namespace Features
    {
        class AdaptiveShell;
    }
    namespace Features
    {
        class AdaptiveShellBuilder;
    }
    namespace Features
    {
        class AdmMoveFace;
    }
    namespace Features
    {
        class AdmMoveFaceBuilder;
    }
    namespace Features
    {
        class AdmOffsetRegion;
    }
    namespace Features
    {
        class AdmOffsetRegionBuilder;
    }
    namespace Features
    {
        class AdmResizeFace;
    }
    namespace Features
    {
        class AdmResizeFaceBuilder;
    }
    namespace Features
    {
        class AngularDim;
    }
    namespace Features
    {
        class AngularDimBuilder;
    }
    namespace Features
    {
        class AssemblyCut;
    }
    namespace Features
    {
        class AssemblyCutBuilder;
    }
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    namespace Features
    {
        class BooleanBuilder;
    }
    namespace Features
    {
        class BooleanFeature;
    }
    namespace Features
    {
        class BoundedPlane;
    }
    namespace Features
    {
        class BoundedPlaneBuilder;
    }
    namespace Features
    {
        class BridgeCurveBuilder;
    }
    namespace Features
    {
        class BulkHeadsBuilder;
    }
    namespace Features
    {
        class ChamferBuilder;
    }
    namespace Features
    {
        class ChangeShellThickness;
    }
    namespace Features
    {
        class ChangeShellThicknessBuilder;
    }
    namespace Features
    {
        class CircularBlendCurve;
    }
    namespace Features
    {
        class CircularBlendCurveBuilder;
    }
    namespace Features
    {
        class Coaxial;
    }
    namespace Features
    {
        class CoaxialBuilder;
    }
    namespace Features
    {
        class CombinedProjection;
    }
    namespace Features
    {
        class CombinedProjectionBuilder;
    }
    namespace Features
    {
        class CompositeCurveBuilder;
    }
    namespace Features
    {
        class Cone;
    }
    namespace Features
    {
        class ConeBuilder;
    }
    namespace Features
    {
        class CoplanarBuilder;
    }
    namespace Features
    {
        class CopyFaceBuilder;
    }
    namespace Features
    {
        class CopyPasteBuilder;
    }
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class CurveOnSurface;
    }
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    namespace Features
    {
        class CutFaceBuilder;
    }
    namespace Features
    {
        class CylinderBuilder;
    }
    namespace Features
    {
        class DatumAxisBuilder;
    }
    namespace Features
    {
        class DatumCsysBuilder;
    }
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    namespace Features
    {
        class DecksBuilder;
    }
    namespace Features
    {
        class DeleteFaceBuilder;
    }
    namespace Features
    {
        class DividefaceBuilder;
    }
    namespace Features
    {
        class DraftBodyBuilder;
    }
    namespace Features
    {
        class DraftBuilder;
    }
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    namespace Features
    {
        class EditDimensionBuilder;
    }
    namespace Features
    {
        class EmbossBuilder;
    }
    namespace Features
    {
        class Enlarge;
    }
    namespace Features
    {
        class EnlargeBuilder;
    }
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class ExtrudeFeatureBuilder;
    }
    namespace Features
    {
        class FaceBlendBuilder;
    }
    namespace Features
    {
        class FeatureReplayBuilder;
    }
    namespace Features
    {
        class FrameBarOutBuilder;
    }
    namespace Features
    {
        class GeomcopyBuilder;
    }
    namespace Features
    {
        class GlobalShaping;
    }
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    namespace Features
    {
        class GroupFace;
    }
    namespace Features
    {
        class GroupFaceBuilder;
    }
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    namespace Features
    {
        class HolePackage;
    }
    namespace Features
    {
        class HolePackageBuilder;
    }
    namespace Features
    {
        class HoodVisibility;
    }
    namespace Features
    {
        class HoodVisibilityBuilder;
    }
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class InsertFramesBuilder;
    }
    namespace Features
    {
        class InsertSheetBody;
    }
    namespace Features
    {
        class InsertSheetBodyBuilder;
    }
    namespace Features
    {
        class IntersectionCurveBuilder;
    }
    namespace Features
    {
        class InverseBendingLine;
    }
    namespace Features
    {
        class InverseBendingLineBuilder;
    }
    namespace Features
    {
        class ItFramesBuilder;
    }
    namespace Features
    {
        class JoinCurvesBuilder;
    }
    namespace Features
    {
        class KnuckledProfiles;
    }
    namespace Features
    {
        class KnuckledProfilesBuilder;
    }
    namespace Features
    {
        class LawExtension;
    }
    namespace Features
    {
        class LawExtensionBuilder;
    }
    namespace Features
    {
        class LinearDimension;
    }
    namespace Features
    {
        class LinearDimensionBuilder;
    }
    namespace Features
    {
        class LinkedFacet;
    }
    namespace Features
    {
        class LinkedFacetBuilder;
    }
    namespace Features
    {
        class MainDimensionsBuilder;
    }
    namespace Features
    {
        class ManufacturingOutBuilder;
    }
    namespace Features
    {
        class MarkingLineBuilder;
    }
    namespace Features
    {
        class MasterCutBuilder;
    }
    namespace Features
    {
        class MatchEdge;
    }
    namespace Features
    {
        class MatchEdgeBuilder;
    }
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class MirrorCurveBuilder;
    }
    namespace Features
    {
        class MirrorFaceBuilder;
    }
    namespace Features
    {
        class MirrorFeatureBuilder;
    }
    namespace Features
    {
        class MoveFaceBuilder;
    }
    namespace Features
    {
        class NSidedSurface;
    }
    namespace Features
    {
        class NSidedSurfaceBuilder;
    }
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    namespace Features
    {
        class OffsetEmbossBuilder;
    }
    namespace Features
    {
        class OffsetFaceBuilder;
    }
    namespace Features
    {
        class OffsetRegionBuilder;
    }
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    namespace Features
    {
        class OvercrownBuilder;
    }
    namespace Features
    {
        class Parallel;
    }
    namespace Features
    {
        class ParallelBuilder;
    }
    namespace Features
    {
        class PasteFaceBuilder;
    }
    namespace Features
    {
        class PatchBuilder;
    }
    namespace Features
    {
        class PatchOpeningsBuilder;
    }
    namespace Features
    {
        class PatternFaceBuilder;
    }
    namespace Features
    {
        class PedestrianProtection;
    }
    namespace Features
    {
        class PedestrianProtectionBuilder;
    }
    namespace Features
    {
        class Perpendicular;
    }
    namespace Features
    {
        class PerpendicularBuilder;
    }
    namespace Features
    {
        class PointSet;
    }
    namespace Features
    {
        class PointSetBuilder;
    }
    namespace Features
    {
        class PoleSmoothing;
    }
    namespace Features
    {
        class PoleSmoothingBuilder;
    }
    namespace Features
    {
        class ProfileCutoutBuilder;
    }
    namespace Features
    {
        class ProfileListBuilder;
    }
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    namespace Features
    {
        class Promotion;
    }
    namespace Features
    {
        class PromotionBuilder;
    }
    namespace Features
    {
        class PullFace;
    }
    namespace Features
    {
        class PullFaceBuilder;
    }
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class RadialDimension;
    }
    namespace Features
    {
        class RadialDimensionBuilder;
    }
    namespace Features
    {
        class RapidSurface;
    }
    namespace Features
    {
        class RapidSurfaceBuilder;
    }
    namespace Features
    {
        class RasterImage;
    }
    namespace Features
    {
        class ReferenceLineBuilder;
    }
    namespace Features
    {
        class RefitFace;
    }
    namespace Features
    {
        class RefitFaceBuilder;
    }
    namespace Features
    {
        class ReflectionData;
    }
    namespace Features
    {
        class ReflectionDataBuilder;
    }
    namespace Features
    {
        class RemoveParametersBuilder;
    }
    namespace Features
    {
        class ReplaceFaceBuilder;
    }
    namespace Features
    {
        class ReplaceFeatureBuilder;
    }
    namespace Features
    {
        class ResizeBlendBuilder;
    }
    namespace Features
    {
        class ResizeFaceBuilder;
    }
    namespace Features
    {
        class RevolveBuilder;
    }
    namespace Features
    {
        class RibbonBuilder;
    }
    namespace Features
    {
        class RuledBuilder;
    }
    namespace Features
    {
        class ScaleBuilder;
    }
    namespace Features
    {
        class SeatBeltAnchorage;
    }
    namespace Features
    {
        class SeatBeltAnchorageBuilder;
    }
    namespace Features
    {
        class SectionCurveBuilder;
    }
    namespace Features
    {
        class SectionEdit;
    }
    namespace Features
    {
        class SectionEditBuilder;
    }
    namespace Features
    {
        class SectionInertiaAnalysis;
    }
    namespace Features
    {
        class SectionInertiaAnalysisBuilder;
    }
    namespace Features
    {
        class SectionSurface;
    }
    namespace Features
    {
        class SectionSurfaceBuilder;
    }
    namespace Features
    {
        class SewBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroSheetmetalManager;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalManager;
        }
    }
    namespace Features
    {
        class ShellBuilder;
    }
    namespace Features
    {
        class ShellFace;
    }
    namespace Features
    {
        class ShellFaceBuilder;
    }
    namespace Features
    {
        class ShipFlatPatternBuilder;
    }
    namespace Features
    {
        class SilhouetteFlange;
    }
    namespace Features
    {
        class SilhouetteFlangeBuilder;
    }
    namespace Features
    {
        class SketchOnPathBuilder;
    }
    namespace Features
    {
        class SmoothSpline;
    }
    namespace Features
    {
        class SmoothSplineBuilder;
    }
    namespace Features
    {
        class SnipSurface;
    }
    namespace Features
    {
        class SnipSurfaceBuilder;
    }
    namespace Features
    {
        class Sphere;
    }
    namespace Features
    {
        class SphereBuilder;
    }
    namespace Features
    {
        class SplitBody;
    }
    namespace Features
    {
        class SplitBodyBuilder;
    }
    namespace Features
    {
        class SteelDistributionBuilder;
    }
    namespace Features
    {
        class StudioSpline;
    }
    namespace Features
    {
        class StudioSplineBuilder;
    }
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class StudioXform;
    }
    namespace Features
    {
        class StudioXformBuilder;
    }
    namespace Features
    {
        class StyledBlend;
    }
    namespace Features
    {
        class StyledBlendBuilder;
    }
    namespace Features
    {
        class StyledCorner;
    }
    namespace Features
    {
        class StyledCornerBuilder;
    }
    namespace Features
    {
        class StyledSweepBuilder;
    }
    namespace Features
    {
        class SweepAlongGuide;
    }
    namespace Features
    {
        class SweepAlongGuideBuilder;
    }
    namespace Features
    {
        class Swept;
    }
    namespace Features
    {
        class SweptBuilder;
    }
    namespace Features
    {
        class Symmetric;
    }
    namespace Features
    {
        class SymmetricBuilder;
    }
    namespace Features
    {
        class Tangent;
    }
    namespace Features
    {
        class TangentBuilder;
    }
    namespace Features
    {
        class ThickenBuilder;
    }
    namespace Features
    {
        class ThroughCurveMeshBuilder;
    }
    namespace Features
    {
        class ThroughCurvesBuilder;
    }
    namespace Features
    {
        class TransFrameBuilder;
    }
    namespace Features
    {
        class TrimBodyBuilder;
    }
    namespace Features
    {
        class TrimCurve;
    }
    namespace Features
    {
        class TrimCurveBuilder;
    }
    namespace Features
    {
        class TrimExtendBuilder;
    }
    namespace Features
    {
        class TrimSheetBuilder;
    }
    namespace Features
    {
        class TubeBuilder;
    }
    namespace Features
    {
        class Unsew;
    }
    namespace Features
    {
        class UnsewBuilder;
    }
    namespace Features
    {
        class UntrimBuilder;
    }
    namespace Features
    {
        class UpdateShipLibraryBuilder;
    }
    namespace Features
    {
        class UserDefinedObjectFeatureBuilder;
    }
    namespace Features
    {
        class VarsweepBuilder;
    }
    namespace Features
    {
        class VentHolesMarking;
    }
    namespace Features
    {
        class VentHolesMarkingBuilder;
    }
    namespace Features
    {
        class VisionPlane;
    }
    namespace Features
    {
        class VisionPlaneBuilder;
    }
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class WavePointBuilder;
    }
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class WaveSketchBuilder;
    }
    namespace Features
    {
        class WindshieldDatum;
    }
    namespace Features
    {
        class WindshieldDatumBuilder;
    }
    namespace Features
    {
        class WrapBuilder;
    }
    namespace Features
    {
        class WrapGeometry;
    }
    namespace Features
    {
        class WrapGeometryBuilder;
    }
    namespace Features
    {
        class WrapUnwrap;
    }
    namespace Features
    {
        class YFrameBuilder;
    }
    namespace Features
    {
        class ZFrameBuilder;
    }
    class HumanPosturePrediction;
    class HumanPosturePredictionBuilder;
    class NXObject;
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        /** Represents a collection of features  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT FeatureCollection : public TaggedObjectCollection
        {
            /** Reorder operation type. */
            public: enum ReorderType
            {
                ReorderTypeBefore = 1/** before */ ,
                ReorderTypeAfter/** after */ 
            };

            private: NXOpen::Part* m_owner;
            public: explicit FeatureCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Features::Feature * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Features::FeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Features::FeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Mesh Surface feature builder  @return  MeshSurfaceBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MeshSurfaceBuilder * CreateMeshSurfaceBuilder
            (
                NXOpen::Features::Feature * meshSurf /** @link Features::Ruled Features::Ruled@endlink ,
                                                                               @link Features::ThroughCurves Features::ThroughCurves@endlink ,
                                                                               @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink 
                                                                               to be edited */
            );
            /** Creates a Block feature builder  @return  BlockFeatureBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BlockFeatureBuilder * CreateBlockFeatureBuilder
            (
                NXOpen::Features::Feature * block /** @link Block Block@endlink  to be edited */
            );
            /** Creates a @link Features::CopyPasteBuilder Features::CopyPasteBuilder@endlink   @return  CopyPasteBuilder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyPasteBuilder * CreateCopyPasteBuilder
            (
                const std::vector<NXOpen::NXObject *> & features /** Features to be copy/paste  */
            );
            /** Creates a Extrude feature builder  @return  ExtrudeFeatureBuilder object 
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeFeatureBuilder * CreateExtrudeFeatureBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a Extrude builder  @return  ExtrudeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeBuilder * CreateExtrudeBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a UserDefinedObjectFeature builder  @return  UserDefinedObjectFeatureBuilder object  <br> License requirements : None */
            public: NXOpen::Features::UserDefinedObjectFeatureBuilder * CreateUserDefinedObjectFeatureBuilder
            (
                NXOpen::Features::Feature * udoFeature /** @link UserDefinedObjectFeature UserDefinedObjectFeature@endlink  to be edited - may be NULL if creating a new feature. */
            );
            /** Creates a Revolve builder  @return  RevolveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RevolveBuilder * CreateRevolveBuilder
            (
                NXOpen::Features::Feature * revolve /** @link RevolveBuilder RevolveBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Emboss builder  @return  EmbossBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBuilder * CreateEmbossBuilder
            (
                NXOpen::Features::Feature * emboss /** @link EmbossBuilder EmbossBuilder@endlink  to be edited */
            );
            /** Creates a Offsetemboss builder  @return  OffsetEmbossBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetEmbossBuilder * CreateOffsetEmbossBuilder
            (
                NXOpen::Features::Feature * offsetEmboss /** @link OffsetEmbossBuilder OffsetEmbossBuilder@endlink  to be edited */
            );
            /** Creates a Divideface builder  @return  DividefaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DividefaceBuilder * CreateDividefaceBuilder
            (
                NXOpen::Features::Feature * divideface /** @link DividefaceBuilder DividefaceBuilder@endlink 
                                                                       to be edited */
            );
            /** Creates a Overcrown feature builder  @return  OvercrownBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder * CreateOvercrownFeatureBuilder
            (
                NXOpen::Features::Feature * overcrown /** @link OvercrownBuilder OvercrownBuilder@endlink 
                                                                  to be edited, if NULL then create a new one. */
            );
            /** Creates a Curvelength builder  @return  CurveLengthBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveLengthBuilder * CreateCurvelengthBuilder
            (
                NXOpen::Features::Feature * curvelength /** @link CurveLengthBuilder CurveLengthBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Datum Axis feature builder  @return  DatumAxisBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumAxisBuilder * CreateDatumAxisBuilder
            (
                NXOpen::Features::Feature * datumAxis /** @link DatumAxisFeature DatumAxisFeature@endlink 
                                                                   to be edited */
            );
            /** Creates a Datum Plane feature builder  @return  DatumPlaneBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumPlaneBuilder * CreateDatumPlaneBuilder
            (
                NXOpen::Features::Feature * dplane /** @link DatumPlaneFeature DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Sketch On Path feature builder  @return  SketchOnPathBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchOnPathBuilder * CreateSketchOnPathBuilder
            (
                NXOpen::Features::Feature * sketchFeature /** Sketch On Path feature
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Hole feature builder  @return  HoleFeatureBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder * CreateHoleFeatureBuilder
            (
                NXOpen::Features::Feature * hole /** @link Hole Hole@endlink  to be edited */
            );
            /** Creates a Relative Positioning Object builder  @return  RPOBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RPOBuilder * CreateRpoBuilder
            (
                NXOpen::Features::Feature * rpo /** @link Feature Feature@endlink  to be repositioned */
            );
            /** Creates a Chamfer feature builder  @return  ChamferBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChamferBuilder * CreateChamferBuilder
            (
                NXOpen::Features::Feature * chamfer /** Chamfer
                                                             to be edited, if NULL then create a new one */
            );
            /** Creates a Edge Blend feature builder  @return  EdgeBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EdgeBlendBuilder * CreateEdgeBlendBuilder
            (
                NXOpen::Features::Feature * edgeblend /** @link EdgeBlendBuilder EdgeBlendBuilder@endlink 
                                                                     to be edited, if NULL then create a new one */
            );
            /** Creates a unite feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateUniteFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a subtract feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateSubtractFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates an intersect feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateIntersectFeature
            (
                NXOpen::Body * targetBody /** Target body */,
                bool retainTargetBody /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & toolBodies /** Tool bodies */,
                bool retainToolBodies /** Retain option for tool bodies */,
                bool allowNonAssociativeBoolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* nonAssociativeBoolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterizedSolids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a Varsweep feature builder  @return VarsweepBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarsweepBuilder * CreateVarsweepBuilder
            (
                NXOpen::Features::Feature * varsweep /** Varsweep to be edited */
            );
            /** Creates a Face Blend feature builder  @return  FaceBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FaceBlendBuilder * CreateFaceBlendBuilder
            (
                NXOpen::Features::Feature * faceBlend /** @link FaceBlendBuilder FaceBlendBuilder@endlink  to be edited */
            );
            /** Returns all the features in the part  @return  Features in the part  <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Finds the @link  Feature   Feature @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier  <br> License requirements : None */
            public: NXOpen::Features::Feature * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the body you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Suppress the given features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be suppressed */
            );
            /** Unsuppress the given features  @return  Features which were not unsuppressed due to errors  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> UnsuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be unsuppressed */
            );
            /** Get the feature associated with an object  @return  Feature associated with object. Set to Null if no feature is associated to the object.  <br> License requirements : None */
            public: NXOpen::Features::Feature * GetAssociatedFeature
            (
                NXOpen::NXObject * object /** Object to find associated feature. */
            );
            /** Creates a human feature builder.  @return  HumanBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Features::HumanBuilder * CreateHumanBuilder
            (
                NXOpen::Features::Feature * human /** @link Human Human@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a human posture prediction builder.  @return  @link HumanPosturePredictionBuilder HumanPosturePredictionBuilder@endlink  object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePredictionBuilder * CreateHumanPosturePredictionBuilder
            (
                NXOpen::HumanPosturePrediction * posturePrediction /** @link HumanPosturePrediction HumanPosturePrediction@endlink  to be edited,
                                                                                                         if NULL then create a new one */
            );
            /** Creates an Offset Surface builder  @return  OffsetSurfaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetSurfaceBuilder * CreateOffsetSurfaceBuilder
            (
                NXOpen::Features::Feature * offsetSurface /** @link OffsetSurfaceBuilder OffsetSurfaceBuilder@endlink 
                                                                            to be edited */
            );
            /** Creates a ribbon builder  @return  Features.RibbonBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RibbonBuilder * CreateRibbonBuilder
            (
                NXOpen::Features::Feature * ribbon /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PatchBuilder Features::PatchBuilder@endlink   @return  PatchBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatchBuilder * CreatePatchBuilder
            (
                NXOpen::Features::Feature * patch /** Patch Features to be edited */
            );
            /** Creates a Boolean builder  @return  BooleanBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilder
            (
                NXOpen::Features::BooleanFeature * booleanFeature /** @link BooleanFeature BooleanFeature@endlink  to be edited */
            );
            /** Creates a trim body builder object  @return  Features.TrimBodyBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBodyBuilder * CreateTrimBodyBuilder
            (
                NXOpen::Features::Feature * trimbodyFeat /** @link Features::TrimBody Features::TrimBody@endlink  to be edited */
            );
            /** Creates an Shell builder  @return  ShellBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellBuilder * CreateShellBuilder
            (
                NXOpen::Features::Feature * shell /** @link Features::ShellBuilder Features::ShellBuilder@endlink  to be edited */
            );
            /** Creates a Datum CSYS feature builder  @return  DatumCsysBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumCsysBuilder * CreateDatumCsysBuilder
            (
                NXOpen::Features::Feature * datumCsys /** @link Features::DatumCsysBuilder Features::DatumCsysBuilder@endlink  to be edited */
            );
            /** Creates a draft builder  @return  DraftBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBuilder * CreateDraftBuilder
            (
                NXOpen::Features::Feature * draft /** @link DraftBuilder DraftBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a raster image  @return  RasterImage object  <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const NXString & imageFileName /** Name of the image file to use.
                                                                      For now, it must be a .tif file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double translucency /** 0.0 for no translucency, 1.0 for fully tranparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximumTextureSize /** maximum texture size */ 
            );
            /** Create a Master Cut builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MasterCutBuilder * CreateMasterCutBuilder
            (
                NXOpen::Features::Feature * masterCut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be edited,
                                                                                 if NULL then create a new one  */
            );
            /** Creates an Offset In Face builder  @return  AOCSBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder * CreateAocsBuilder
            (
                NXOpen::Features::Feature * aocs /** @link Features::AOCSBuilder Features::AOCSBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::OffsetFaceBuilder Features::OffsetFaceBuilder@endlink   @return  OffsetFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetFaceBuilder * CreateOffsetFaceBuilder
            (
                NXOpen::Features::Feature * offsetface /** @link Features::OffsetFace Features::OffsetFace@endlink 
                                                                  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::TubeBuilder Features::TubeBuilder@endlink   @return  TubeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TubeBuilder * CreateTubeBuilder
            (
                NXOpen::Features::Feature * tube /** @link Features::TubeBuilder Features::TubeBuilder@endlink  to be edited */
            );
            /** Creates @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink   @return  MirrorFeatureBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorFeatureBuilder * CreateMirrorFeatureBuilder
            (
                NXOpen::Features::Feature * mirrorFea /** @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::ScaleBuilder Features::ScaleBuilder@endlink   @return  ScaleBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ScaleBuilder * CreateScaleBuilder
            (
                NXOpen::Features::Feature * scale /** @link Features::Scale Features::Scale@endlink  to be edited */
            );
            /** Creates a Sew feature builder  @return  SewBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SewBuilder * CreateSewBuilder
            (
                NXOpen::Features::Feature * sew /** @link Features::SewBuilder Features::SewBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::SectionCurveBuilder Features::SectionCurveBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionCurveBuilder * CreateSectionCurveBuilder
            (
                NXOpen::Features::Feature * sectionCurves /** @link Features::SectionCurve Features::SectionCurve@endlink  to be edited */
            );
            /** Creates a @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink   @return  IntersectionCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IntersectionCurveBuilder * CreateIntersectionCurveBuilder
            (
                NXOpen::Features::Feature * intersectionCurve /** @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink  to be edited */
            );
            /** Creates a Thicken feature builder  @return  ThickenBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThickenBuilder * CreateThickenBuilder
            (
                NXOpen::Features::Feature * thicken /** @link Features::Thicken Features::Thicken@endlink  to be edited */
            );
            /** Creates a @link Features::TrimExtendBuilder Features::TrimExtendBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimExtendBuilder * CreateTrimExtendBuilder
            (
                NXOpen::Features::Feature * trimExtend /** @link Features::TrimExtend Features::TrimExtend@endlink  to be edited */
            );
            /** Creates a @link Features::GeomcopyBuilder Features::GeomcopyBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GeomcopyBuilder * CreateGeomcopyBuilder
            (
                NXOpen::Features::Feature * geomcopy /** @link Features::Geomcopy Features::Geomcopy@endlink  to be edited */
            );
            /** Creates a @link Features::ProjectCurveBuilder Features::ProjectCurveBuilder@endlink   @return  ProjectCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ProjectCurveBuilder * CreateProjectCurveBuilder
            (
                NXOpen::Features::Feature * projectCurve /** @link Features::ProjectCurve Features::ProjectCurve@endlink  to be edited */
            );
            /** Creates a @link Features::ExtractFaceBuilder Features::ExtractFaceBuilder@endlink   @return  Extract face builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtractFaceBuilder * CreateExtractFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** CopyFace Feature to be edited */
            );
            /** Creates a @link Features::MainDimensionsBuilder Features::MainDimensionsBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::MainDimensionsBuilder * CreateMainDimensionsBuilder
            (
                NXOpen::Features::Feature * mainDimensions /** @link Features::MainDimensions Features::MainDimensions@endlink  to be edited */
            );
            /** Creates a @link Features::FrameBarOutBuilder Features::FrameBarOutBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::FrameBarOutBuilder * CreateFrameBarOutBuilder
            (
                NXOpen::Features::Feature * frameBarOut /** frame bar out */ 
            );
            /** Creates a @link Features::DecksBuilder Features::DecksBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::DecksBuilder * CreateDecksBuilder
            (
                NXOpen::Features::Feature * decks /** @link Features::Decks Features::Decks@endlink  to be edited */
            );
            /** Creates a @link Features::BulkHeadsBuilder Features::BulkHeadsBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::BulkHeadsBuilder * CreateBulkHeadsBuilder
            (
                NXOpen::Features::Feature * bulkHead /** @link Features::BulkHeads Features::BulkHeads@endlink  to be edited */
            );
            /** Creates a @link Features::ItFramesBuilder Features::ItFramesBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ItFramesBuilder * CreateItFramesBuilder
            (
                NXOpen::Features::Feature * itFrame /** itframe */ 
            );
            /** Creates a @link Features::InsertSheetBodyBuilder Features::InsertSheetBodyBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::InsertSheetBodyBuilder * CreateInsertSheetBodyBuilder
            (
                NXOpen::Features::InsertSheetBody * insertSheetBody /** @link Features::InsertSheetBody Features::InsertSheetBody@endlink  to be edited */
            );
            /** Creates a @link Features::ReferenceLineBuilder Features::ReferenceLineBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ReferenceLineBuilder * CreateReferenceLineBuilder
            (
                NXOpen::Features::Feature * referenceLine /** @link Features::ReferenceLine Features::ReferenceLine@endlink  to be edited */
            );
            /**Create a TransFrameBuilder.  @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::TransFrameBuilder * CreateTransFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /** @link Features::TransFrame Features::TransFrame@endlink  to be edited */
            );
            /**Create a InsertFramesBuilder.  @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::InsertFramesBuilder * CreateInsertFramesBuilder
            (
                NXOpen::Features::Feature * insertFrames /** InsertFrames Features to be edited */
            );
            /** Creates a @link Features::ZFrameBuilder Features::ZFrameBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ZFrameBuilder * CreateZFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /**  ZFrame Features to be edited */
            );
            /** Creates a @link Features::YFrameBuilder Features::YFrameBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::YFrameBuilder * CreateYFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /** YFrame Feature to be edited */
            );
            /** Creates a @link Features::JoinCurvesBuilder Features::JoinCurvesBuilder@endlink   @return  JoinCurvesBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::JoinCurvesBuilder * CreateJoinCurvesBuilder
            (
                NXOpen::Features::Feature * joinCurves /** @link Features::JoinCurves Features::JoinCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSplineBuilder * CreateStudioSplineBuilder
            (
                NXOpen::Features::StudioSpline * splineFeature /** @link Features::StudioSpline Features::StudioSpline@endlink  to be edited */
            );
            /** Creates a Curve On Surface feature builder  @return  CurveOnSurfaceBuilder object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::CurveOnSurfaceBuilder * CreateCurveOnSurfaceBuilder
            (
                NXOpen::Features::CurveOnSurface * cosFeature /** @link Features::CurveOnSurface Features::CurveOnSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UntrimBuilder Features::UntrimBuilder@endlink   @return  Features.UntrimBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UntrimBuilder * CreateUntrimBuilder
            (
                NXOpen::Features::Feature * untrim /** @link Features::Untrim Features::Untrim@endlink  to be edited */
            );
            /** Creates a Wavedatum Builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveDatumBuilder * CreateWaveDatumBuilder
            (
                NXOpen::Features::Feature * wavedatum /** Wavedatum Features to be edited */
            );
            /** Creates a Wavesketch Builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveSketchBuilder * CreateWaveSketchBuilder
            (
                NXOpen::Features::Feature * wavesketch /** Wavesketch Features to be edited */
            );
            /** Creates a @link Features::WaveRoutingBuilder Features::WaveRoutingBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveRoutingBuilder * CreateWaveRoutingBuilder
            (
                NXOpen::Features::Feature * waverouting /** Waverouting Features to be edited */
            );
            /** Creates a @link Features::WavePointBuilder Features::WavePointBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WavePointBuilder * CreateWavePointBuilder
            (
                NXOpen::Features::Feature * wavepoint /** Wavepoint Features to be edited */
            );
            /** Creates a @link Features::TrimSheetBuilder Features::TrimSheetBuilder@endlink   @return  Trim Sheet Builder object <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimSheetBuilder * CreateTrimsheetBuilder
            (
                NXOpen::Features::Feature * trimSheet /** @link Features::TrimSheet Features::TrimSheet@endlink  to be edited,
                                                                            if NULL then create a new one*/
            );
            /** Creates a @link Features::CircularBlendCurveBuilder Features::CircularBlendCurveBuilder@endlink   @return  CircularBlendCurveBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CircularBlendCurveBuilder * CreateCircularBlendCurveBuilder
            (
                NXOpen::Features::CircularBlendCurve * circularBlendCurve /** @link Features::CircularBlendCurve Features::CircularBlendCurve@endlink  to be edited,
                                                                                                     , if NULL then create a new one  */
            );
            /** Creates a Rapid Surfacing feature builder  @return  RapidSurfaceBuilder object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder * CreateRapidSurfaceBuilder
            (
                NXOpen::Features::RapidSurface * rapidSurface /** @link Features::RapidSurface Features::RapidSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UnsewBuilder Features::UnsewBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UnsewBuilder * CreateUnsewBuilder
            (
                NXOpen::Features::Unsew * unsew /** @link Features::Unsew Features::Unsew@endlink  to be edited */
            );
            /** Creates a @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink   @return  MirrorBodyBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorBodyBuilder * CreateMirrorBodyBuilder
            (
                NXOpen::Features::Feature * mirrorBody /** @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::DraftBodyBuilder Features::DraftBodyBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBodyBuilder * CreateDraftBodyBuilder
            (
                NXOpen::Features::Feature * draftBody /** @link Features::DraftBody Features::DraftBody@endlink  to be edited */
            );
            /** Returns a list of features that generated update alerts during recent update  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetPartFeaturesWithNewAlerts
            (
            );
            /** Returns a list of all features from a given part that have update alerts  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetAllPartFeaturesWithAlerts
            (
            );
            /** Creates a @link Features::GlobalShapingBuilder Features::GlobalShapingBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingBuilder * CreateGlobalShapingBuilder
            (
                NXOpen::Features::GlobalShaping * globalShaping /** @link Features::GlobalShaping Features::GlobalShaping@endlink  to be edited */
            );
            /** Creates a @link Features::TrimCurveBuilder Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Features::TrimCurve * trimCurve /** @link Features::TrimCurve Features::TrimCurve@endlink  to be edited */
            );
            /** Creates a @link Features::OffsetCurveBuilder Features::OffsetCurveBuilder@endlink   @return  Offset Curve Builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::OffsetCurveBuilder * CreateOffsetCurveBuilder
            (
                NXOpen::Features::Feature * offsetCurve /** @link Features::OffsetCurve Features::OffsetCurve@endlink  to be edited */
            );
            /** Delete all informational alerts from all the features in a given part <br> License requirements : None */
            public: void DeleteAllPartInformationalFeatureAlerts
            (
            );
            /** Creates a @link Features::ThroughCurveMeshBuilder Features::ThroughCurveMeshBuilder@endlink   @return  ThroughCurveMeshBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurveMeshBuilder * CreateThroughCurveMeshBuilder
            (
                NXOpen::Features::Feature * throughCurveMesh /** @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::BridgeCurveBuilder Features::BridgeCurveBuilder@endlink   @return   <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BridgeCurveBuilder * CreateBridgeCurveBuilder
            (
                NXOpen::Features::Feature * bridgeCurve /** @link Features::BridgeCurve Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link Features::SweptBuilder Features::SweptBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweptBuilder * CreateSweptBuilder
            (
                NXOpen::Features::Swept * swept /** @link Features::Swept Features::Swept@endlink  to be edited */
            );
            /** Creates a @link Features::CylinderBuilder Features::CylinderBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CylinderBuilder * CreateCylinderBuilder
            (
                NXOpen::Features::Feature * cylinder /** @link Features::Cylinder Features::Cylinder@endlink  to be edited */
            );
            /** Creates a @link Features::CompositeCurveBuilder Features::CompositeCurveBuilder@endlink   @return  Features.CompositeCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CompositeCurveBuilder * CreateCompositeCurveBuilder
            (
                NXOpen::Features::Feature * compositeCurve /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ThroughCurvesBuilder Features::ThroughCurvesBuilder@endlink   @return  ThroughCurvesBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurvesBuilder * CreateThroughCurvesBuilder
            (
                NXOpen::Features::Feature * throughCurves /** @link Features::ThroughCurves Features::ThroughCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Surface Builder  @return  StudioSurfaceBuilder
                object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSurfaceBuilder * CreateStudioSurfaceBuilder
            (
                NXOpen::Features::Feature * studioSurface /** @link Features::StudioSurface Features::StudioSurface@endlink  to be edited */
            );
            /** Creates a @link Features::SectionInertiaAnalysisBuilder Features::SectionInertiaAnalysisBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder * CreateSectionInertiaAnalysisBuilder
            (
                NXOpen::Features::SectionInertiaAnalysis * sectionInertiaAnalysis /** @link Features::SectionInertiaAnalysis Features::SectionInertiaAnalysis@endlink  to be edited */
            );
            /** Returns if a @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  is visbible in specified @link CutView CutView@endlink  . @return  True if master cut is visible in view
                                                                 False otherwise  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool GetIsMasterCutVisibleInView
            (
                NXOpen::Features::Feature * masterCut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be tested */,
                NXOpen::CutView * view /** Cut view */
            );
            /**Creates a MarkingLineBuilder  @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::MarkingLineBuilder * CreateMarkingLineBuilder
            (
                NXOpen::Features::Feature * markingLine /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a delete face builder, don't use it until nx502  @return  Features.DeleteFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteFaceBuilder * CreateDeleteFaceBuilder
            (
                NXOpen::Features::Feature * deleteFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a resize blend builder, don't use it until nx502  @return  Features.ResizeBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizeBlendBuilder * CreateResizeBlendBuilder
            (
                NXOpen::Features::Feature * resizeBlend /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PatchOpeningsBuilder Features::PatchOpeningsBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Features::PatchOpeningsBuilder * CreatePatchOpeningsBuilder
            (
                NXOpen::Features::Feature * patchOpenings /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Create a move face builder, don't use it until nx502  @return  Features.MoveFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MoveFaceBuilder * CreateMoveFaceBuilder
            (
                NXOpen::Features::Feature * moveFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates an offset region builder, don't use it until nx502  @return  Features.OffsetRegionBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetRegionBuilder * CreateOffsetRegionBuilder
            (
                NXOpen::Features::Feature * offsetRegion /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a pattern face builder, don't use it until nx502  @return  Features.PatternFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternFaceBuilder * CreatePatternFaceBuilder
            (
                NXOpen::Features::Feature * patternFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a resize face builder, don't use it until nx502  @return  Features.ResizeFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizeFaceBuilder * CreateResizeFaceBuilder
            (
                NXOpen::Features::Feature * resizeFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a replace face builder, don't use it until nx502  @return  Features.ReplaceFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReplaceFaceBuilder * CreateReplaceFaceBuilder
            (
                NXOpen::Features::Feature * replaceFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a Ruled Surface builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RuledBuilder * CreateRuledBuilder
            (
                NXOpen::Features::Feature * ruled /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::NSidedSurfaceBuilder Features::NSidedSurfaceBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::NSidedSurfaceBuilder * CreateNSidedSurfaceBuilder
            (
                NXOpen::Features::NSidedSurface * nsidedSurface /** @link Features::NSidedSurface Features::NSidedSurface@endlink  to be edited */
            );
            /** Create a section surface  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionSurfaceBuilder * CreateSectionSurfaceBuilder
            (
                NXOpen::Features::SectionSurface * sectionSurface /** @link Features::SectionSurface Features::SectionSurface@endlink  to be edited */
            );
            /** Creates a coplanar builder, don't use it until nx6  @return  Features.CoplanarBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CoplanarBuilder * CreateCoplanarBuilder
            (
                NXOpen::Features::Feature * coplanar /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::SnipSurfaceBuilder Features::SnipSurfaceBuilder@endlink   @return   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SnipSurfaceBuilder * CreateSnipSurfaceBuilder
            (
                NXOpen::Features::SnipSurface * snipSurface /** @link Features::SnipSurface Features::SnipSurface@endlink  to be edited */
            );
            /** Creates a @link Features::LinearDimensionBuilder Features::LinearDimensionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LinearDimensionBuilder * CreateLinearDimensionBuilder
            (
                NXOpen::Features::LinearDimension * linearDimension /** @link Features::LinearDimension Features::LinearDimension@endlink  to be edited */
            );
            /** Creates an Enlarge builder  @return  EnlargeBuilder object  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Features::EnlargeBuilder * CreateEnlargeBuilder
            (
                NXOpen::Features::Enlarge * enlargeFeature /** @link Features::Enlarge Features::Enlarge@endlink  to be edited */
            );
            /** Creates a @link Features::LawExtensionBuilder Features::LawExtensionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LawExtensionBuilder * CreateLawExtensionBuilder
            (
                NXOpen::Features::LawExtension * lawExtension /** @link Features::LawExtension Features::LawExtension@endlink  to be edited */
            );
            /** Creates a @link Features::CombinedProjectionBuilder Features::CombinedProjectionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CombinedProjectionBuilder * CreateCombinedProjectionBuilder
            (
                NXOpen::Features::CombinedProjection * combinedProjection /** @link Features::CombinedProjection Features::CombinedProjection@endlink  to be edited */
            );
            /** Creates a @link Features::SteelDistributionBuilder Features::SteelDistributionBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::SteelDistributionBuilder * CreateSteelDistributionBuilder
            (
                NXOpen::Features::Feature * steelDistribution /** @link Features::SteelDistribution Features::SteelDistribution@endlink  to be edited */
            );
            /** Creates a @link Features::ShipFlatPatternBuilder Features::ShipFlatPatternBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ShipFlatPatternBuilder * CreateShipFlatPatternBuilder
            (
                NXOpen::Features::Feature * shipFlatPattern /** @link Features::ShipFlatPattern Features::ShipFlatPattern@endlink  to be edited */
            );
            /** Creates a @link Features::ProfileListBuilder Features::ProfileListBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ProfileListBuilder * CreateProfileListBuilder
            (
                NXOpen::Features::Feature * profileList /** @link Features::ProfileList Features::ProfileList@endlink  to be edited */
            );
            /** Creates a @link Features::ManufacturingOutBuilder Features::ManufacturingOutBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ManufacturingOutBuilder * CreateManufacturingOutBuilder
            (
                NXOpen::Features::Feature * frameBarOut /** frame bar out */ 
            );
            /** Creates a @link Features::UpdateShipLibraryBuilder Features::UpdateShipLibraryBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::UpdateShipLibraryBuilder * CreateUpdateShipLibraryBuilder
            (
                NXOpen::Features::Feature * updateShipLibrary /** @link Features::UpdateShipLibrary Features::UpdateShipLibrary@endlink  to be edited */
            );
            public: NXOpen::Features::ProfileCutoutBuilder * CreateProfileCutoutBuilder
            (
                NXOpen::Features::Feature * profileCutout /** @link Features::ProfileCutout Features::ProfileCutout@endlink  to be edited */
            );
            /** Creates a @link Features::KnuckledProfilesBuilder Features::KnuckledProfilesBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::KnuckledProfilesBuilder * CreateKnuckledProfilesBuilder
            (
                NXOpen::Features::KnuckledProfiles * knuckledProfiles /** @link Features::KnuckledProfiles Features::KnuckledProfiles@endlink  to be edited */
            );
            /** Creates a @link Features::VentHolesMarkingBuilder Features::VentHolesMarkingBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::VentHolesMarkingBuilder * CreateVentHolesMarkingBuilder
            (
                NXOpen::Features::VentHolesMarking * ventHolesMarking /** @link Features::VentHolesMarking Features::VentHolesMarking@endlink  to be edited */
            );
            /** Creates a @link Features::InverseBendingLineBuilder Features::InverseBendingLineBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::InverseBendingLineBuilder * CreateInverseBendingLineBuilder
            (
                NXOpen::Features::InverseBendingLine * inverseBendingLine /** @link Features::InverseBendingLine Features::InverseBendingLine@endlink  to be edited */
            );
            /** Creates a @link Features::StyledSweepBuilder Features::StyledSweepBuilder@endlink   @return  Features.StyledSweepBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledSweepBuilder * CreateStyledSweepBuilder
            (
                NXOpen::Features::Feature * styledSweep /** @link Features::StyledSweep Features::StyledSweep@endlink  to be edited */
            );
            /** Creates a cut face builder  @return  Features.CutFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CutFaceBuilder * CreateCutFaceBuilder
            (
                NXOpen::Features::Feature * cutFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ConeBuilder Features::ConeBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConeBuilder * CreateConeBuilder
            (
                NXOpen::Features::Cone * cone /** @link Features::Cone Features::Cone@endlink  to be edited */
            );
            /** Creates a @link Features::SphereBuilder Features::SphereBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SphereBuilder * CreateSphereBuilder
            (
                NXOpen::Features::Sphere * sphere /** @link Features::Sphere Features::Sphere@endlink  to be edited */
            );
            /** Creates a copy face builder  @return  Features.CopyFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CopyFaceBuilder * CreateCopyFaceBuilder
            (
                NXOpen::Features::Feature * copyFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a paste face builder  @return  Features.PasteFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PasteFaceBuilder * CreatePasteFaceBuilder
            (
                NXOpen::Features::Feature * pasteFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PoleSmoothingBuilder Features::PoleSmoothingBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PoleSmoothingBuilder * CreatePoleSmoothingBuilder
            (
                NXOpen::Features::PoleSmoothing * poleSmoothing /** @link Features::PoleSmoothing Features::PoleSmoothing@endlink  to be edited */
            );
            /** Creates a @link Features::AdmMoveFaceBuilder Features::AdmMoveFaceBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AdmMoveFaceBuilder * CreateAdmMoveFaceBuilder
            (
                NXOpen::Features::AdmMoveFace * admMoveFace /** @link Features::AdmMoveFace Features::AdmMoveFace@endlink  to be edited */
            );
            /** Creates a @link Features::WrapGeometryBuilder Features::WrapGeometryBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapGeometryBuilder * CreateWrapGeometryBuilder
            (
                NXOpen::Features::WrapGeometry * wrapGeometry /** @link Features::WrapGeometry Features::WrapGeometry@endlink  to be edited */
            );
            /** Creates a @link Features::GroupFaceBuilder Features::GroupFaceBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GroupFaceBuilder * CreateGroupFaceBuilder
            (
                NXOpen::Features::GroupFace * groupFace /** @link Features::GroupFace Features::GroupFace@endlink  to be edited */
            );
            /** Creates a @link Features::SeatBeltAnchorageBuilder Features::SeatBeltAnchorageBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::SeatBeltAnchorageBuilder * CreateSeatBeltAnchorageBuilder
            (
                NXOpen::Features::SeatBeltAnchorage * seatBeltAnchorage /** @link Features::SeatBeltAnchorage Features::SeatBeltAnchorage@endlink  to be edited */
            );
            /** Creates a @link Features::BoundedPlaneBuilder Features::BoundedPlaneBuilder@endlink   @return  Features.BoundedPlaneBuilder object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::BoundedPlaneBuilder * CreateBoundedPlaneBuilder
            (
                NXOpen::Features::BoundedPlane * boundedPlane /** @link Features::BoundedPlane Features::BoundedPlane@endlink  to be edited */
            );
            /** Creates a @link Features::AssemblyCutBuilder Features::AssemblyCutBuilder@endlink   @return  Features.AssemblyCutBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AssemblyCutBuilder * CreateAssemblyCutBuilder
            (
                NXOpen::Features::AssemblyCut * assemblyCut /** @link Features::AssemblyCut Features::AssemblyCut@endlink  to be edited */
            );
            /** Creates a @link Features::ReflectionDataBuilder Features::ReflectionDataBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::ReflectionDataBuilder * CreateReflectionDataBuilder
            (
                NXOpen::Features::ReflectionData * reflectionData /** @link Features::ReflectionData Features::ReflectionData@endlink  to be edited */
            );
            /** Creates a @link Features::WrapBuilder Features::WrapBuilder@endlink   @return  WrapBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WrapBuilder * CreateWrapBuilder
            (
                NXOpen::Features::WrapUnwrap * wrap /** @link Features::WrapUnwrap Features::WrapUnwrap@endlink  to be edited */
            );
            /** Creates a @link Features::RemoveParametersBuilder Features::RemoveParametersBuilder@endlink   @return  Features.RemoveParametersBuilder object  <br> License requirements : None */
            public: NXOpen::Features::RemoveParametersBuilder * CreateRemoveParametersBuilder
            (
            );
            /** Creates a @link Features::MatchEdgeBuilder Features::MatchEdgeBuilder@endlink   @return   <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::MatchEdgeBuilder * CreateMatchEdgeBuilder
            (
                NXOpen::Features::MatchEdge * matchEdge /** @link Features::MatchEdge Features::MatchEdge@endlink  to be edited */
            );
            /** Creates a @link Features::RadialDimensionBuilder Features::RadialDimensionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RadialDimensionBuilder * CreateRadialDimensionBuilder
            (
                NXOpen::Features::RadialDimension * radialDimension /** @link Features::RadialDimension Features::RadialDimension@endlink  to be edited */
            );
            /** Creates a @link Features::StyledBlendBuilder Features::StyledBlendBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledBlendBuilder * CreateStyledBlendBuilder
            (
                NXOpen::Features::StyledBlend * styledBlend /** @link Features::StyledBlend Features::StyledBlend@endlink  to be edited */
            );
            /** Creates a @link Features::HolePackageBuilder Features::HolePackageBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HolePackageBuilder * CreateHolePackageBuilder
            (
                NXOpen::Features::HolePackage * holePackage /** @link Features::HolePackage Features::HolePackage@endlink  to be edited */
            );
            /** Creates a Features.StudioXformBuilder  @return   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StudioXformBuilder * CreateStudioXformBuilder
            (
                NXOpen::Features::StudioXform * studioXform /** @link Features::StudioXform Features::StudioXform@endlink  to be edited */
            );
            /** Creates a @link Features::SweepAlongGuideBuilder Features::SweepAlongGuideBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweepAlongGuideBuilder * CreateSweepAlongGuideBuilder
            (
                NXOpen::Features::SweepAlongGuide * sweepAlongGuide /** @link Features::SweepAlongGuide Features::SweepAlongGuide@endlink  to be edited */
            );
            /** Creates a @link Features::ParallelBuilder Features::ParallelBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ParallelBuilder * CreateParallelBuilder
            (
                NXOpen::Features::Parallel * parallel /** @link Features::Parallel Features::Parallel@endlink  to be edited */
            );
            /** Creates a @link Features::CoaxialBuilder Features::CoaxialBuilder@endlink   @return  Features.CoaxialBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CoaxialBuilder * CreateCoaxialBuilder
            (
                NXOpen::Features::Coaxial * coaxial /** @link Features::Coaxial Features::Coaxial@endlink  to be edited */
            );
            /** Creates a @link Features::PerpendicularBuilder Features::PerpendicularBuilder@endlink   @return  Features.PerpendicularBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PerpendicularBuilder * CreatePerpendicularBuilder
            (
                NXOpen::Features::Perpendicular * perpendicular /** @link Features::Perpendicular Features::Perpendicular@endlink  to be edited */
            );
            /** Creates a @link Features::TangentBuilder Features::TangentBuilder@endlink   @return  Features.TangentBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TangentBuilder * CreateTangentBuilder
            (
                NXOpen::Features::Tangent * tangent /** @link Features::Tangent Features::Tangent@endlink  to be edited */
            );
            /** Creates a @link Features::AdmResizeFaceBuilder Features::AdmResizeFaceBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AdmResizeFaceBuilder * CreateAdmResizeFaceBuilder
            (
                NXOpen::Features::AdmResizeFace * admResizeFace /** @link Features::AdmResizeFace Features::AdmResizeFace@endlink  to be edited */
            );
            /** Creates a @link Features::StyledCornerBuilder Features::StyledCornerBuilder@endlink   @return   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::StyledCornerBuilder * CreateStyledCornerBuilder
            (
                NXOpen::Features::StyledCorner * styledCorner /** @link Features::StyledCorner Features::StyledCorner@endlink  to be edited */
            );
            /** Creates a @link Features::AdmOffsetRegionBuilder Features::AdmOffsetRegionBuilder@endlink   @return  Features.AdmOffsetRegionBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AdmOffsetRegionBuilder * CreateAdmOffsetRegionBuilder
            (
                NXOpen::Features::AdmOffsetRegion * offsetRegion /** @link Features::AdmOffsetRegion Features::AdmOffsetRegion@endlink  to be edited */
            );
            /** Creates a mirror face builder  @return  Features.MirrorFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorFaceBuilder * CreateMirrorFaceBuilder
            (
                NXOpen::Features::Feature * mirrorFace /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::PointSetBuilder Features::PointSetBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PointSetBuilder * CreatePointSetBuilder
            (
                NXOpen::Features::PointSet * pointSet /** @link Features::PointSet Features::PointSet@endlink  to be edited */
            );
            /** Creates a @link Features::WindshieldDatumBuilder Features::WindshieldDatumBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::WindshieldDatumBuilder * CreateWindshieldDatumBuilder
            (
                NXOpen::Features::WindshieldDatum * windshieldDatum /** @link Features::WindshieldDatum Features::WindshieldDatum@endlink  to be edited */
            );
            /** Creates a @link Features::VisionPlaneBuilder Features::VisionPlaneBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::VisionPlaneBuilder * CreateVisionPlaneBuilder
            (
                NXOpen::Features::VisionPlane * visionPlane /** @link Features::VisionPlane Features::VisionPlane@endlink  to be edited */
            );
            /** Creates a @link Features::HoodVisibilityBuilder Features::HoodVisibilityBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::HoodVisibilityBuilder * CreateHoodVisibilityBuilder
            (
                NXOpen::Features::HoodVisibility * hoodVisibility /** @link Features::HoodVisibility Features::HoodVisibility@endlink  to be edited */
            );
            /** Creates a @link Features::PedestrianProtectionBuilder Features::PedestrianProtectionBuilder@endlink   @return   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: NXOpen::Features::PedestrianProtectionBuilder * CreatePedestrianProtectionBuilder
            (
                NXOpen::Features::PedestrianProtection * pedestrianProtection /** @link Features::ReflectionData Features::ReflectionData@endlink  to be edited */
            );
            /** Reorders the Feature with respect to the given feature  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ReorderFeature
            (
                const std::vector<NXOpen::Features::Feature *> & features /** @link Features::Feature Features::Feature@endlink  to be reordered*/,
                NXOpen::Features::Feature * target /** Target feature */,
                NXOpen::Features::FeatureCollection::ReorderType beforeOrAfter /** Reorder Before/After*/
            );
            /** Creates a @link Features::MirrorCurveBuilder Features::MirrorCurveBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorCurveBuilder * CreateMirrorCurveBuilder
            (
                NXOpen::Features::Feature * mirrorCurve /** @link Features::MirrorCurve Features::MirrorCurve@endlink  to be edited */
            );
            /** Creates a @link Features::PromotionBuilder Features::PromotionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PromotionBuilder * CreatePromotionBuilder
            (
                NXOpen::Features::Promotion * promotion /** @link Features::Promotion Features::Promotion@endlink  to be edited */
            );
            /** Creates a RefitFaceBuilder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RefitFaceBuilder * CreateRefitFaceBuilder
            (
                NXOpen::Features::RefitFace * refitFace /** @link Features::RefitFace Features::RefitFace@endlink  to be edited */
            );
            /** Creates a @link Features::EditDimensionBuilder Features::EditDimensionBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::EditDimensionBuilder * CreateEditDimensionBuilder
            (
            );
            /** Creates a @link Features::AdaptiveShellBuilder Features::AdaptiveShellBuilder@endlink   @return  @link Features::AdaptiveShellBuilder Features::AdaptiveShellBuilder@endlink  object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AdaptiveShellBuilder * CreateAdaptiveShellBuilder
            (
                NXOpen::Features::AdaptiveShell * shellFace /** @link Features::AdaptiveShell Features::AdaptiveShell@endlink  to be edited */
            );
            /** Creates a @link Features::ShellFaceBuilder Features::ShellFaceBuilder@endlink   @return  @link Features::ShellFaceBuilder Features::ShellFaceBuilder@endlink  object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellFaceBuilder * CreateShellFaceBuilder
            (
                NXOpen::Features::ShellFace * shellFace /** @link Features::ShellFace Features::ShellFace@endlink  to be edited */
            );
            /** Creates a @link Features::ChangeShellThicknessBuilder Features::ChangeShellThicknessBuilder@endlink   @return  @link Features::ChangeShellThicknessBuilder Features::ChangeShellThicknessBuilder@endlink  object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChangeShellThicknessBuilder * CreateChangeShellThicknessBuilder
            (
                NXOpen::Features::ChangeShellThickness * shellFace /** @link Features::ChangeShellThickness Features::ChangeShellThickness@endlink  to be edited */
            );
            /** Creates a @link Features::LinkedFacetBuilder Features::LinkedFacetBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::LinkedFacetBuilder * CreateLinkedFacetBuilder
            (
                NXOpen::Features::LinkedFacet * linkedFacet /** @link Features::LinkedFacet Features::LinkedFacet@endlink  to be edited */
            );
            /** Creates a @link Features::SilhouetteFlangeBuilder Features::SilhouetteFlangeBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::SilhouetteFlangeBuilder * CreateSilhouetteFlangeBuilder
            (
                NXOpen::Features::SilhouetteFlange * silhouetteFlange /** @link Features::SilhouetteFlange Features::SilhouetteFlange@endlink  to be edited */
            );
            /** Creates a @link Features::ReplaceFeatureBuilder Features::ReplaceFeatureBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ReplaceFeatureBuilder * CreateReplaceFeatureBuilder
            (
            );
            /** Creates a @link Features::SmoothSplineBuilder Features::SmoothSplineBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::SmoothSplineBuilder * CreateSmoothSplineBuilder
            (
                NXOpen::Features::SmoothSpline * smoothSpline /** @link Features::SmoothSpline Features::SmoothSpline@endlink  to be edited */
            );
            /** Creates a @link Features::SymmetricBuilder Features::SymmetricBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SymmetricBuilder * CreateSymmetricBuilder
            (
                NXOpen::Features::Symmetric * symmetric /** @link Features::Symmetric Features::Symmetric@endlink  to be edited */
            );
            /** Creates a @link Features::FeatureReplayBuilder Features::FeatureReplayBuilder@endlink   @return  Features.FeatureReplayBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FeatureReplayBuilder * CreateFeatureReplayBuilder
            (
            );
            /** Creates a @link Features::SplitBodyBuilder Features::SplitBodyBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SplitBodyBuilder * CreateSplitBodyBuilder
            (
                NXOpen::Features::SplitBody * splitBody /** @link Features::SplitBody Features::SplitBody@endlink  to be edited */
            );
            /** Creates a @link Features::AngularDimBuilder Features::AngularDimBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AngularDimBuilder * CreateAngularDimensionBuilder
            (
                NXOpen::Features::AngularDim * angularDimension /** @link Features::AngularDim Features::AngularDim@endlink  to be edited */
            );
            /** Creates a @link Features::SectionEditBuilder Features::SectionEditBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionEditBuilder * CreateSectionEditBuilder
            (
                NXOpen::Features::SectionEdit * sectionEdit /** @link Features::SectionEdit Features::SectionEdit@endlink  to be edited */
            );
            /** Creates a @link Features::PullFaceBuilder Features::PullFaceBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PullFaceBuilder * CreatePullFaceBuilder
            (
                NXOpen::Features::PullFace * pullFace /** @link Features::PullFace Features::PullFace@endlink  to be edited */
            );


            private: NXOpen::Features::SheetMetal::SheetmetalManager *sheetmetalManager;
            /** Returns the Straight Brake Sheetmetal Manager for this part */
            public: NXOpen::Features::SheetMetal::SheetmetalManager *SheetmetalManager()
            {
                return sheetmetalManager;
            }
            private: NXOpen::Features::SheetMetal::AeroSheetmetalManager *aeroSheetmetalManager;
            /** Returns the aerospace sheet metal manager for this part */
            public: NXOpen::Features::SheetMetal::AeroSheetmetalManager *AeroSheetmetalManager()
            {
                return aeroSheetmetalManager;
            }
            private: NXOpen::Die::DieCollection *dies;
            /** Returns the DieCollection instance belonging to this part */
            public: NXOpen::Die::DieCollection *Dies()
            {
                return dies;
            }
            private: NXOpen::Weld::WeldManager *weldManager;
            /** Returns the WeldManager for this part */
            public: NXOpen::Weld::WeldManager *WeldManager()
            {
                return weldManager;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
