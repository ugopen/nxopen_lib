#ifndef NXOpen_ANNOTATIONS_RADIALSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_RADIALSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_RadialStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_RadialStyleBuilder.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class RadialStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _RadialStyleBuilderBuilder;
        /**
            Represents a @link Annotations::RadialStyleBuilder Annotations::RadialStyleBuilder@endlink .
            This class queries and sets preferences specific to radial dimensions when creating or
            editing a radial type dimension.
            */
        class NXOPENCPPEXPORT RadialStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _RadialStyleBuilderBuilder;
            protected: RadialStyleBuilder();
            /**Returns  the diameter symbol type  <br> License requirements : None */
            public: NXOpen::Annotations::DiameterSymbol DiameterSymbolType
            (
            );
            /**Sets  the diameter symbol type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterSymbolType
            (
                NXOpen::Annotations::DiameterSymbol diameterSymbolType /** diametersymboltype */ 
            );
            /**Returns  the text for a user-defined diameter symbol  <br> License requirements : None */
            public: NXString DiameterSymbol
            (
            );
            /**Sets  the text for a user-defined diameter symbol  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterSymbol
            (
                const NXString & diameterSymbol /** diametersymbol */ 
            );
            /**Returns  the radius symbol type  <br> License requirements : None */
            public: NXOpen::Annotations::RadiusSymbol RadiusSymbolType
            (
            );
            /**Sets  the radius symbol type  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetRadiusSymbolType
            (
                NXOpen::Annotations::RadiusSymbol radiusSymbolType /** radiussymboltype */ 
            );
            /**Returns  the text for a user-defined radius symbol  <br> License requirements : None */
            public: NXString RadiusSymbol
            (
            );
            /**Sets  the text for a user-defined radius symbol  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetRadiusSymbol
            (
                const NXString & radiusSymbol /** radiussymbol */ 
            );
            /**Returns  the diameter radius symbol placement with respect to the dimension text.
                        One of the options specifies that no symbol be displayed   <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusSymbolPlacement DiameterRadiusPlacement
            (
            );
            /**Sets  the diameter radius symbol placement with respect to the dimension text.
                        One of the options specifies that no symbol be displayed   <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDiameterRadiusPlacement
            (
                NXOpen::Annotations::DiameterRadiusSymbolPlacement diameterRadiusPlacement /** diameterradiusplacement */ 
            );
            /**Returns  the location of the dimension text relative to the leader stub  <br> License requirements : None */
            public: NXOpen::Annotations::DiameterRadiusLeaderStub TextAboveLeader
            (
            );
            /**Sets  the location of the dimension text relative to the leader stub  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTextAboveLeader
            (
                NXOpen::Annotations::DiameterRadiusLeaderStub textAboveLeader /** textaboveleader */ 
            );
            /**Returns  the symbol to dimension text distance in character spaces  <br> License requirements : None */
            public: double SymbolToDimensionTextDistance
            (
            );
            /**Sets  the symbol to dimension text distance in character spaces  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolToDimensionTextDistance
            (
                double symbolToDimensionTextDistance /** symboltodimensiontextdistance */ 
            );
            /**Returns  the folded radius angle  <br> License requirements : None */
            public: double FoldedRadiusAngle
            (
            );
            /**Sets  the folded radius angle  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetFoldedRadiusAngle
            (
                double foldedRadiusAngle /** foldedradiusangle */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
