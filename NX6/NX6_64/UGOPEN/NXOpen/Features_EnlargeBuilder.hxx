#ifndef NXOpen_FEATURES_ENLARGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_ENLARGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EnlargeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_EnlargeBuilder.hxx>
#include <NXOpen/GeometricUtilities_SurfaceRangeBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class EnlargeBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class SurfaceRangeBuilder;
    }
    class SelectFace;
    namespace Features
    {
        class _EnlargeBuilderBuilder;
        /** Represents a @link Features::Enlarge Features::Enlarge@endlink  builder.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateEnlargeBuilder Features::FeatureCollection::CreateEnlargeBuilder@endlink  <br> 
        Default values:
        ExtensionType: Natural
        IsCopy: 0
        ResizeParameters.AnchorPosition: Vertex1
        */
        class NXOPENCPPEXPORT EnlargeBuilder : public Features::FeatureBuilder
        {
            /** Extension types */
            public: enum ExtensionTypes
            {
                ExtensionTypesLinear/** Linear extension */,
                ExtensionTypesNatural/** Natural extension */
            };

            private: friend class  _EnlargeBuilderBuilder;
            protected: EnlargeBuilder();
            /**Returns  the face  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::SelectFace * Face
            (
            );
            /**Returns  the resize parameters  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::GeometricUtilities::SurfaceRangeBuilder * ResizeParameters
            (
            );
            /**Returns  the extension type  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Features::EnlargeBuilder::ExtensionTypes ExtensionType
            (
            );
            /**Sets  the extension type  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetExtensionType
            (
                NXOpen::Features::EnlargeBuilder::ExtensionTypes extensionType /** extensiontype */ 
            );
            /**Returns  whether the enlarge operation is applied to a copy of the face  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: bool IsCopy
            (
            );
            /**Sets  whether the enlarge operation is applied to a copy of the face  <br> License requirements : nx_freeform_2 ("advanced freeform modeling") */
            public: void SetCopy
            (
                bool isCopy /** iscopy */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
