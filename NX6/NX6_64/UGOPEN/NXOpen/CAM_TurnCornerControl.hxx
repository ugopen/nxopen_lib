#ifndef NXOpen_CAM_TURNCORNERCONTROL_HXX_INCLUDED
#define NXOpen_CAM_TURNCORNERCONTROL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnCornerControl.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_TurnCornerControl.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnCornerControl;
    }
    namespace CAM
    {
        class _TurnCornerControlBuilder;
        /** Represents a first plunge ja */
        class NXOPENCPPEXPORT TurnCornerControl : public TaggedObject
        {
            /** the Corner Control Types options */
            public: enum Types
            {
                TypesRollAround/** Corner Control Types is Roll Around. */,
                TypesExtendTangents/** Corner Control Types is Extend Tangents. */,
                TypesRound/** Corner Control Types is Round. */,
                TypesBreak/** Corner Control Types is Break.*/
            };

            private: friend class  _TurnCornerControlBuilder;
            protected: TurnCornerControl();
            /**Returns  the Corner Control Types  <br> License requirements : None */
            public: NXOpen::CAM::TurnCornerControl::Types Type
            (
            );
            /**Sets  the Corner Control Types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::CAM::TurnCornerControl::Types cornerType /** cornertype */ 
            );
            /**Returns  the Corner Control radius  <br> License requirements : None */
            public: double Radius
            (
            );
            /**Sets  the Corner Control radius  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadius
            (
                double doubleValue /** doublevalue */ 
            );
            /**Returns  the minimum angle  <br> License requirements : None */
            public: double MinAngle
            (
            );
            /**Sets  the minimum angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinAngle
            (
                double doubleValue /** the the minimum angle */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
