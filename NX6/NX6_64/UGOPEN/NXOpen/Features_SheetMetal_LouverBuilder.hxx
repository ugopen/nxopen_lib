#ifndef NXOpen_FEATURES_SHEETMETAL_LOUVERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_LOUVERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_LouverBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class LouverBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SketchFeature;
    }
    class Section;
    namespace Features
    {
        namespace SheetMetal
        {
            class _LouverBuilderBuilder;
            /** Represents a louver feature builder.  <br> To create a new instance of this class, use @link Features::SheetMetal::SheetmetalManager::CreateLouverFeatureBuilder Features::SheetMetal::SheetmetalManager::CreateLouverFeatureBuilder@endlink  <br> */
            class NXOPENCPPEXPORT LouverBuilder : public Features::FeatureBuilder
            {
                /** This enum represents the depth side for the louver. */
                public: enum DepthSideOptions
                {
                    DepthSideOptionsSectionNormalSide/** Material added on the side of the section normal. */,
                    DepthSideOptionsSectionReverseNormalSide/** Material added on the side opposite to that of the section normal. */
                };

                /** This enum represents the side of the section that the louver width is measured. The "left" option
                            represents the side to the left of a person who is walking along the section in the direction of its curves 
                            when the section normal is pointing up. The "right" option represents the person's right hand side.
                            The "right" side at any point along the section can also be represented by the vector resulting from 
                            the cross product of the curve tangent (of the section curve at that point) and the section normal. 
                            The "left" side is the opposite. 
                         */
                public: enum SectionSideOptions
                {
                    SectionSideOptionsLeft/** Side pointed to by the inverse of the tangent cross normal vector */,
                    SectionSideOptionsRight/** Side pointed to by the tangent cross normal vector */
                };

                /** This enum represents the end type for the louver. */
                public: enum EndTypeOptions
                {
                    EndTypeOptionsFormed/** formed */ ,
                    EndTypeOptionsLanced/** lanced */ 
                };

                private: friend class  _LouverBuilderBuilder;
                protected: LouverBuilder();
                /**Returns  the section used by the louver. The section should be open. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Section * Section
                (
                );
                /**Sets  the section used by the louver. The section should be open. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSection
                (
                    NXOpen::Section * section /** section */ 
                );
                /**Returns  the depth of the louver  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Depth
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetDepth
                (
                    const NXString & depth /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the depth side for the louver.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::LouverBuilder::DepthSideOptions DepthSide
                (
                );
                /**Sets  the depth side for the louver.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetDepthSide
                (
                    NXOpen::Features::SheetMetal::LouverBuilder::DepthSideOptions depthSide /** depth side */ 
                );
                /**Returns  the width of the louver. The side of the section that the width is measured from depends on the 
                             value of the section side (see @link Features::SheetMetal::LouverBuilder::SectionSide Features::SheetMetal::LouverBuilder::SectionSide@endlink ).  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * Width
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetWidth
                (
                    const NXString & width /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the side of the section on which the louver is created and width is measure. 
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::LouverBuilder::SectionSideOptions SectionSide
                (
                );
                /**Sets  the side of the section on which the louver is created and width is measure. 
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSectionSide
                (
                    NXOpen::Features::SheetMetal::LouverBuilder::SectionSideOptions sectionSide /** section side */ 
                );
                /**Returns  the option to round the edges of the louver using the die radius. If this is false, then the value 
                            of @link Features::SheetMetal::LouverBuilder::DieRadius Features::SheetMetal::LouverBuilder::DieRadius@endlink  is not used.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: bool IncludeRounding
                (
                );
                /**Sets  the option to round the edges of the louver using the die radius. If this is false, then the value 
                            of @link Features::SheetMetal::LouverBuilder::DieRadius Features::SheetMetal::LouverBuilder::DieRadius@endlink  is not used.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetIncludeRounding
                (
                    bool includeRounding /** include rounding */ 
                );
                /**Returns  the die radius. Not used if @link Features::SheetMetal::LouverBuilder::IncludeRounding Features::SheetMetal::LouverBuilder::IncludeRounding@endlink  is false.  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * DieRadius
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetDieRadius
                (
                    const NXString & dieRadius /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the end type for the louver. Select lanced end or formed end from @link Features::SheetMetal::LouverBuilder::EndTypeOptions Features::SheetMetal::LouverBuilder::EndTypeOptions@endlink .
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::LouverBuilder::EndTypeOptions EndType
                (
                );
                /**Sets  the end type for the louver. Select lanced end or formed end from @link Features::SheetMetal::LouverBuilder::EndTypeOptions Features::SheetMetal::LouverBuilder::EndTypeOptions@endlink .
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetEndType
                (
                    NXOpen::Features::SheetMetal::LouverBuilder::EndTypeOptions endType /** end type */ 
                );
                /**Returns  the internal sketch used by the louver's section.
                             <br> 
                                If the sketch is created internally as part of the louver command in the UI, then it 
                                is consumed by the louver and does not show up as a seperate feature in the part navigator.
                                By setting the sketch object here, you will be making it internal to the louver feature. 
                             <br> 
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SketchFeature * Sketch
                (
                );
                /**Sets  the internal sketch used by the louver's section.
                             <br> 
                                If the sketch is created internally as part of the louver command in the UI, then it 
                                is consumed by the louver and does not show up as a seperate feature in the part navigator.
                                By setting the sketch object here, you will be making it internal to the louver feature. 
                             <br> 
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetSketch
                (
                    NXOpen::Features::SketchFeature * sketch /** sketch */ 
                );
                /** This method verifies that the builder data is valid for louver creation.
                             <br> 
                                 If the builder data is valid, it returns a value of 0.
                             <br> 
                         @return  data validity flag  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int ValidateBuilderData
                (
                );
                /**Returns 
                        the minimum tool clearance expression.
                           
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * MinimumToolClearance
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
