#ifndef NXOpen_FEATURES_STUDIOSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STUDIOSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StudioSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_StudioSurfaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlignmentMethodBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_FlowDirection.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class AlignmentMethodBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class FlowDirection;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class SectionList;
    namespace Features
    {
        class _StudioSurfaceBuilderBuilder;
        /**
            Represents a @link Features::StudioSurface Features::StudioSurface@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateStudioSurfaceBuilder Features::FeatureCollection::CreateStudioSurfaceBuilder@endlink  <br> 
        Default values:
        Transition: NormalToEndSections
        */
        class NXOPENCPPEXPORT StudioSurfaceBuilder : public Features::FeatureBuilder
        {
            /** the transition control options when using By Points alignment
                    method */
            public: enum TransitionOptions
            {
                TransitionOptionsNormalToEndSections/** Normal to End Sections */,
                TransitionOptionsNormalToAllSections/** Normal to All Sections */,
                TransitionOptionsCubic/** Cubic */,
                TransitionOptionsLinearAndBlend/** Linear and Blend */
            };

            private: friend class  _StudioSurfaceBuilderBuilder;
            protected: StudioSurfaceBuilder();
            /**Returns  the list of sections  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * SectionList
            (
            );
            /**Returns  the list of guides  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * GuideList
            (
            );
            /**Returns  the first section continuity  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstSectionContinuity
            (
            );
            /**Returns  the last section continuity  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastSectionContinuity
            (
            );
            /**Returns  the first guide continuity  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstGuideContinuity
            (
            );
            /**Returns  the last guide continuity  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastGuideContinuity
            (
            );
            /**Returns  the flow direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::FlowDirection * FlowDirection
            (
            );
            /**Returns  the alignment method  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::AlignmentMethodBuilder * AlignmentMethod
            (
            );
            /**Returns  the transition control  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::StudioSurfaceBuilder::TransitionOptions Transition
            (
            );
            /**Sets  the transition control  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTransition
            (
                NXOpen::Features::StudioSurfaceBuilder::TransitionOptions transition /** transition */ 
            );
            /**Returns  the section rebuild  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * SectionRebuild
            (
            );
            /**Returns  the guide rebuild  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * GuideRebuild
            (
            );
            /**Returns  the position tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the curvature tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double CurvatureTolerance
            (
            );
            /**Sets  the curvature tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetCurvatureTolerance
            (
                double curvatureTolerance /** curvaturetolerance */ 
            );
            /**Returns  the intersection tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double IntersectionTolerance
            (
            );
            /**Sets  the intersection tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetIntersectionTolerance
            (
                double intersectionTolerance /** intersectiontolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
