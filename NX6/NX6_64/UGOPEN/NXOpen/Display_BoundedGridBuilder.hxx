#ifndef NXOpen_DISPLAY_BOUNDEDGRIDBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_BOUNDEDGRIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_BoundedGridBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_BoundedGridBuilder.hxx>
#include <NXOpen/Display_SectionCurveSettingsBuilder.hxx>
#include <NXOpen/Display_GridBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class BoundedGridBuilder;
    }
    namespace Display
    {
        class GridBuilder;
    }
    namespace Display
    {
        class SectionCurveSettingsBuilder;
    }
    namespace Display
    {
        class _BoundedGridBuilderBuilder;
        /** Represents the builder for creating a bounded grid @link Display::BoundedGrid Display::BoundedGrid@endlink . 
              <br> This is an abstract class, and cannot be instantiated. <br> 
        Default values:
        SectionCurveSettings.ColorOption: Any
        SectionCurveSettings.Show: false
        */
        class NXOPENCPPEXPORT BoundedGridBuilder : public Display::GridBuilder
        {
            /** Specifies label option to be used for grid label display.
                     */
            public: enum ShowLabelType
            {
                ShowLabelTypeAlways/** Always show label */,
                ShowLabelTypeParalleltoView/** Show labels when grid 
                                                                              orientation is aligned with 
                                                                              the view orientation */,
                ShowLabelTypeNone/** Never show labels */
            };

            /** Specifies label reference.
                     */
            public: enum LabelReferenceType
            {
                LabelReferenceTypeLocal/** Use local grid origin 
                                                                                    to determine grid 
                                                                                    line offset labels */,
                LabelReferenceTypeWcs/** Use projection of WCS origin on the
                                                                                    grid plane to determine grid line offset 
                                                                                    labels */,
                LabelReferenceTypeAbsolute/** Use projection of absolute origin on the
                                                                                    grid plane to determine grid line offset
                                                                                    labels */
            };

            private: friend class  _BoundedGridBuilderBuilder;
            protected: BoundedGridBuilder();
            /**Returns  the show labels  <br> License requirements : None */
            public: NXOpen::Display::BoundedGridBuilder::ShowLabelType ShowLabel
            (
            );
            /**Sets  the show labels  <br> License requirements : None */
            public: void SetShowLabel
            (
                NXOpen::Display::BoundedGridBuilder::ShowLabelType showLabelType /** showlabeltype */ 
            );
            /**Returns  the label reference  <br> License requirements : None */
            public: NXOpen::Display::BoundedGridBuilder::LabelReferenceType LabelReference
            (
            );
            /**Sets  the label reference  <br> License requirements : None */
            public: void SetLabelReference
            (
                NXOpen::Display::BoundedGridBuilder::LabelReferenceType labelReference /** labelreference */ 
            );
            /**Returns  the local origin  <br> License requirements : None */
            public: NXOpen::Point3d LocalOrigin
            (
            );
            /**Sets  the local origin  <br> License requirements : None */
            public: void SetLocalOrigin
            (
                const NXOpen::Point3d & localOrigin /** Label origin */
            );
            /** Gets corner points of the grid  @return  Flag indicating whether the
                                                                    corner points are valid  <br> License requirements : None */
            public: bool GetCornerPoints
            (
                NXOpen::Point3d* point1 /** First corner point */,
                NXOpen::Point3d* point2 /** Second corner point */,
                NXOpen::Point3d* point3 /** Third corner point */,
                NXOpen::Point3d* point4 /** Fourth corner point */
            );
            /** Sets corner points of the grid  @return  Flag indicating whether the
                                                                    corner points are valid  <br> License requirements : None */
            public: bool SetCornerPoints
            (
                const NXOpen::Point3d & point1 /** First corner point */,
                const NXOpen::Point3d & point2 /** Second corner point */,
                const NXOpen::Point3d & point3 /** Third corner point */,
                const NXOpen::Point3d & point4 /** Fourth corner point */
            );
            /**Returns  the curve settings builder  <br> License requirements : None */
            public: NXOpen::Display::SectionCurveSettingsBuilder * SectionCurveSettings
            (
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : None */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /** Creates curves by intersecting the bounded grid with all bodies in 
                        the part of the grid object. The bodies that are visible in the work
                        view are intersected. The curves are added to the group created with 
                        the specified name. The group is displayed in the part navigator. The
                        curves are created in the work part. These curves are not associated
                        with the grid. These are just snapshot curves that can be used for
                        modeling purposes.
                      <br> License requirements : None */
            public: void SaveCurves
            (
                const NXString & groupName /** Name of the group containing curves.
                                                             If NULL, a default name will be
                                                             used.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
