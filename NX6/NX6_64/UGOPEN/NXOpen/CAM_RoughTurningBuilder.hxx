#ifndef NXOpen_CAM_ROUGHTURNINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ROUGHTURNINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_RoughTurningBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_RoughFinishTurningBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class RoughTurningBuilder;
    }
    namespace CAM
    {
        class CutStrategy;
    }
    namespace CAM
    {
        class FirstPlunge;
    }
    namespace CAM
    {
        class NcmTurnRoughBuilder;
    }
    namespace CAM
    {
        class RoughFinishTurningBuilder;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class TurnDirection;
    }
    namespace CAM
    {
        class _RoughTurningBuilderBuilder;
        /** Represents a RoughTurning Builder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateRoughTurningBuilder CAM::OperationCollection::CreateRoughTurningBuilder@endlink  <br> */
        class NXOPENCPPEXPORT RoughTurningBuilder : public CAM::RoughFinishTurningBuilder
        {
            /** the Reversal Mode types */
            public: enum ReversalModeTypes
            {
                ReversalModeTypesAsLevel/** Reversal mode: As Level */,
                ReversalModeTypesInverse/** Reversal mode: Inverse */,
                ReversalModeTypesClosest/** Reversal mode: Closest */,
                ReversalModeTypesCutLater/** Reversal mode: Cut Later */,
                ReversalModeTypesOmit/** Reversal mode: Omit */
            };

            /** the Cleanup types */
            public: enum CleanupTypes
            {
                CleanupTypesNone/** Cleanup mode: None */,
                CleanupTypesAll/** Cleanup mode: All */,
                CleanupTypesSteepOnly/** Cleanup mode: Steep only */,
                CleanupTypesAllButSteep/** Cleanup mode: All but steep */,
                CleanupTypesLevelOnly/** Cleanup mode: Level only */,
                CleanupTypesAllButLevel/** Cleanup mode: All but level */,
                CleanupTypesDownOnly/** Cleanup mode: Down only */,
                CleanupTypesPerReversal/** Cleanup mode: Per reversal */
            };

            /** the Level Depth Mode types */
            public: enum LevelDepthModeTypes
            {
                LevelDepthModeTypesFromTool/** Level depth mode: From Tool */,
                LevelDepthModeTypesSpecify/** Level depth mode: Specify */
            };

            private: friend class  _RoughTurningBuilderBuilder;
            protected: RoughTurningBuilder();
            /**Returns  the Cut Strategy  <br> License requirements : None */
            public: NXOpen::CAM::CutStrategy * CutStrategy
            (
            );
            /**Returns  the Rough Direction  <br> License requirements : None */
            public: NXOpen::CAM::TurnDirection * Direction
            (
            );
            /**Returns  the Reversal Mode  <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::ReversalModeTypes ReversalMode
            (
            );
            /**Sets  the Reversal Mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReversalMode
            (
                NXOpen::CAM::RoughTurningBuilder::ReversalModeTypes reversalMode /** the reversal mode */
            );
            /**Returns  the Cleanup <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::CleanupTypes Cleanup
            (
            );
            /**Sets  the Cleanup <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCleanup
            (
                NXOpen::CAM::RoughTurningBuilder::CleanupTypes cleanupMode /** the cleanup type */
            );
            /**Returns  the Level Depth Mode  <br> License requirements : None */
            public: NXOpen::CAM::RoughTurningBuilder::LevelDepthModeTypes LevelDepthMode
            (
            );
            /**Sets  the Level Depth Mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLevelDepthMode
            (
                NXOpen::CAM::RoughTurningBuilder::LevelDepthModeTypes levelDepthMode /** the level depth mode */
            );
            /**Returns  the level depth  <br> License requirements : None */
            public: double LevelDepth
            (
            );
            /**Sets  the level depth  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLevelDepth
            (
                double levelDepth /** the level depth */
            );
            /**Returns  the First Plunge  <br> License requirements : None */
            public: NXOpen::CAM::FirstPlunge * FirstPlunge
            (
            );
            /**Returns  the Safe Distance  <br> License requirements : None */
            public: double SafeDistance
            (
            );
            /**Sets  the Safe Distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSafeDistance
            (
                double safeDistanceValue /** the safe distance */
            );
            /**Returns  the Stepover <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * Stepover
            (
            );
            /**Returns  the non-cutting builder <br> License requirements : None */
            public: NXOpen::CAM::NcmTurnRoughBuilder * NonCuttingBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
