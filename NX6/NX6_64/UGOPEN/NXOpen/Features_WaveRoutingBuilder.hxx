#ifndef NXOpen_FEATURES_WAVEROUTINGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_WAVEROUTINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_WaveRoutingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_WaveRoutingBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectObjectList;
    namespace Features
    {
        class _WaveRoutingBuilderBuilder;
        /**
            Represents a @link Features::WaveRoutingBuilder Features::WaveRoutingBuilder@endlink  
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateWaveRoutingBuilder Features::FeatureCollection::CreateWaveRoutingBuilder@endlink  <br> 
        Default values:
        Associative: True
        */
        class NXOPENCPPEXPORT WaveRoutingBuilder : public Features::FeatureBuilder
        {
            private: friend class  _WaveRoutingBuilderBuilder;
            protected: WaveRoutingBuilder();
            /**Returns  the routing  <br> License requirements : None */
            public: NXOpen::SelectObjectList * RoutingObjects
            (
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the makepositionindependent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the makepositionindependent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
