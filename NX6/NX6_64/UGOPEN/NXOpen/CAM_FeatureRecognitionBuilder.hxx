#ifndef NXOpen_CAM_FEATURERECOGNITIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_FEATURERECOGNITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeatureRecognitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_FeatureRecognitionBuilder.hxx>
#include <NXOpen/CAM_ManualFeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class FeatureRecognitionBuilder;
    }
    class Builder;
    namespace CAM
    {
        class ManualFeatureBuilder;
    }
    namespace CAM
    {
        class ManualFeatureBuilderList;
    }
    class Direction;
    class Face;
    class ScCollector;
    class SelectBodyList;
    class TaggedObject;
    namespace CAM
    {
        class _FeatureRecognitionBuilderBuilder;
        /** Represents a FeatureRecognition Builder  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateFeatureRecognitionBuilder CAM::CAMSetup::CreateFeatureRecognitionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT FeatureRecognitionBuilder : public Builder
        {
            /** the type of FeatureRecognition being choosen */
            public: enum RecognitionEnum
            {
                RecognitionEnumIdentify/** Represents NX Feature Identification */,
                RecognitionEnumParametric/** Represents MLP Features Recognition */,
                RecognitionEnumLegacy/** Represents NX Feature Recognition */,
                RecognitionEnumGeneric/** Represents NX FACE + POCKET Recognition */,
                RecognitionEnumManual/** Represents Manual Feature Recognition */
            };

            /** the find body from type being choosen */
            public: enum FindBodyEnum
            {
                FindBodyEnumWorkpiece/** Represents find bodies from workpiece */,
                FindBodyEnumAllBodies/** Represents find bodies from all bodies */,
                FindBodyEnumSpecified/** Represents find bodies from specified */
            };

            private: friend class  _FeatureRecognitionBuilderBuilder;
            protected: FeatureRecognitionBuilder();
            /**Returns  the recognition type combo box  <br> License requirements : None */
            public: NXOpen::CAM::FeatureRecognitionBuilder::RecognitionEnum RecognitionType
            (
            );
            /**Sets  the recognition type combo box  <br> License requirements : None */
            public: void SetRecognitionType
            (
                NXOpen::CAM::FeatureRecognitionBuilder::RecognitionEnum recognitionType /** recognition type */ 
            );
            /**Returns  the bodies to search selector  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelBodiesToSearch
            (
            );
            /**Returns  the find body from type combo box  <br> License requirements : None */
            public: NXOpen::CAM::FeatureRecognitionBuilder::FindBodyEnum CmbFindBodyFrom
            (
            );
            /**Sets  the find body from type combo box  <br> License requirements : None */
            public: void SetCmbFindBodyFrom
            (
                NXOpen::CAM::FeatureRecognitionBuilder::FindBodyEnum cmbFindBodyType /** cmbfindbodytype */ 
            );
            /**Returns  the machinining access direction vector  <br> License requirements : None */
            public: NXOpen::Direction * VecDirection
            (
            );
            /**Sets  the machinining access direction vector  <br> License requirements : None */
            public: void SetVecDirection
            (
                NXOpen::Direction * vecDirection /** vecdirection */ 
            );
            /**Returns  the limit area face selector  <br> License requirements : None */
            public: NXOpen::ScCollector * LimitFaces
            (
            );
            /**Returns  the floor face selector  <br> License requirements : None */
            public: NXOpen::ScCollector * FloorFaces
            (
            );
            /**Returns  the use feature name as type checkbox  <br> License requirements : None */
            public: bool UseFeatureNameAsType
            (
            );
            /**Sets  the use feature name as type checkbox  <br> License requirements : None */
            public: void SetUseFeatureNameAsType
            (
                bool useFeatureNameAsType /** use feature name as type */ 
            );
            /**Returns  the assign color attribute checkbox  <br> License requirements : None */
            public: bool AssignColor
            (
            );
            /**Sets  the assign color attribute checkbox  <br> License requirements : None */
            public: void SetAssignColor
            (
                bool assignColor /** assign color */ 
            );
            /**Returns  the map features checkbox  <br> License requirements : None */
            public: bool MapFeatures
            (
            );
            /**Sets  the map features checkbox  <br> License requirements : None */
            public: void SetMapFeatures
            (
                bool mapFeatures /** map features */ 
            );
            /** Recognize Features callback  @return  The recognized features <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> Recognize
            (
            );
            /**Returns  the flag indicating if mapping is enabled. Only when a valid mapping module is loaded 
                        the feature mapper is enabled <br> License requirements : None */
            public: bool FeatureMapperEnabled
            (
            );
            /** Returns the recognized features  @return   <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetRecognizedFeatures
            (
            );
            /** Sets the feature types used by the recognizer  <br> License requirements : None */
            public: void SetFeatureTypes
            (
                std::vector<NXString> & featureTypes /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the registered feature types <br> License requirements : None */
            public: void GetRegisteredFeatureTypes
            (
                std::vector<NXString> & featureTypes /** feature types */ 
            );
            /** Creates a new manual feature builder  @return  feature builder  <br> License requirements : None */
            public: NXOpen::CAM::ManualFeatureBuilder * CreateManualFeatureBuilder
            (
            );
            /**Returns  the manual feature builder list <br> License requirements : None */
            public: NXOpen::CAM::ManualFeatureBuilderList * LstManualFeatures
            (
            );
            /** Creates a feature based on name, floor and wall faces  @return   <br> License requirements : None */
            public: NXOpen::TaggedObject * CreateFeature
            (
                const NXString & featureName /** name of new feature   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Face *> & faces /** faces */ ,
                const std::vector<NXOpen::Face *> & wallFaces /** wall faces of new feature*/,
                bool deleteFeatures /** Deletes previous recognized features */
            );
            /** Deletes a manualy created feature  <br> License requirements : None */
            public: void DeleteFeature
            (
                NXOpen::TaggedObject * feature /** feature */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
