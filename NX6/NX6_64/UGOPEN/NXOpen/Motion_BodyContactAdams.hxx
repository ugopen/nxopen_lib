#ifndef NXOpen_MOTION_BODYCONTACTADAMS_HXX_INCLUDED
#define NXOpen_MOTION_BODYCONTACTADAMS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_BodyContactAdams.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_BodyContactAdams.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class BodyContactAdams;
    }
    class NXObject;
    namespace Motion
    {
        class _BodyContactAdamsBuilder;
        /** Represents a @link Motion::BodyContactAdams Motion::BodyContactAdams@endlink  */
        class NXOPENCPPEXPORT BodyContactAdams : public NXObject
        {
            /** the enum for forec model of 3D contact */
            public: enum ForceModel
            {
                ForceModelImpact/** impact */ ,
                ForceModelPoisson/** poisson */ 
            };

            /** the enum for friction option of 3D contact */
            public: enum CoulombFriction
            {
                CoulombFrictionOff/** off */ ,
                CoulombFrictionOn/** on */ 
            };

            private: friend class  _BodyContactAdamsBuilder;
            protected: BodyContactAdams();
            /**Returns  the stiffness  <br> License requirements : None */
            public: double Stiffness
            (
            );
            /**Sets  the stiffness  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffness
            (
                double stiffness /** stiffness */ 
            );
            /**Returns  the force model type <br> License requirements : None */
            public: NXOpen::Motion::BodyContactAdams::ForceModel ForceModelType
            (
            );
            /**Sets  the force model type <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceModelType
            (
                NXOpen::Motion::BodyContactAdams::ForceModel forceModel /** force model */ 
            );
            /**Returns  the force exponent  <br> License requirements : None */
            public: double ForceExponent
            (
            );
            /**Sets  the force exponent  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceExponent
            (
                double forceExponent /** force exponent */ 
            );
            /**Returns  the material damping  <br> License requirements : None */
            public: double MaterialDamping
            (
            );
            /**Sets  the material damping  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterialDamping
            (
                double materialDamping /** material damping */ 
            );
            /**Returns  the penetration depth  <br> License requirements : None */
            public: double PenetrationDepth
            (
            );
            /**Sets  the penetration depth  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPenetrationDepth
            (
                double penetrationDepth /** penetration depth */ 
            );
            /**Returns  the restitution coefficent   <br> License requirements : None */
            public: double RestitutionCoefficent
            (
            );
            /**Sets  the restitution coefficent   <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRestitutionCoefficent
            (
                double restitutionCoefficent /** restitution coefficent */ 
            );
            /**Returns  the coulomb friction option <br> License requirements : None */
            public: NXOpen::Motion::BodyContactAdams::CoulombFriction CoulombFrictionOption
            (
            );
            /**Sets  the coulomb friction option <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoulombFrictionOption
            (
                NXOpen::Motion::BodyContactAdams::CoulombFriction coulombFriction /** coulomb friction */ 
            );
            /**Returns  the static coefficient  <br> License requirements : None */
            public: double StaticCoefficient
            (
            );
            /**Sets  the static coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticCoefficient
            (
                double staticCoefficient /** static coefficient */ 
            );
            /**Returns  the stiction velocity  <br> License requirements : None */
            public: double StictionVelocity
            (
            );
            /**Sets  the stiction velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStictionVelocity
            (
                double stictionVelocity /** stiction velocity */ 
            );
            /**Returns  the dynamic coefficient  <br> License requirements : None */
            public: double DynamicCoefficient
            (
            );
            /**Sets  the dynamic coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicCoefficient
            (
                double dynamicCoefficient /** dynamic coefficient */ 
            );
            /**Returns  the friction velocity  <br> License requirements : None */
            public: double FrictionVelocity
            (
            );
            /**Sets  the friction velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrictionVelocity
            (
                double frictionVelocity /** friction velocity */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
