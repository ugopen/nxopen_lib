#ifndef NXOpen_FEATURES_NSIDEDSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_NSIDEDSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_NSidedSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_NSidedSurfaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class NSidedSurfaceBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    class Point;
    class ScCollector;
    class Section;
    class SectionList;
    namespace Features
    {
        class _NSidedSurfaceBuilderBuilder;
        /**
            Represents a @link Features::NSidedSurface Features::NSidedSurface@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateNSidedSurfaceBuilder Features::FeatureCollection::CreateNSidedSurfaceBuilder@endlink  <br> 
        Default values:
        CenterControlFlat.RightHandSide: 100
        CenterControlTiltX.RightHandSide: 50
        CenterControlTiltY.RightHandSide: 50
        CenterControlTrimFlat.RightHandSide: 50
        CenterControlX.RightHandSide: 50
        CenterControlY.RightHandSide: 50
        CenterControlZ.RightHandSide: 50
        */
        class NXOPENCPPEXPORT NSidedSurfaceBuilder : public Features::FeatureBuilder
        {
            /** the surface type options */
            public: enum SurfaceType
            {
                SurfaceTypeTrimmedPatch/** Trimmed Patch */,
                SurfaceTypeTriangularPatch/** Triangular Patch */
            };

            /** the UV orientation options */
            public: enum UVOrientationType
            {
                UVOrientationTypeSpine/** spine orientation */,
                UVOrientationTypeVector/** vector orientation */,
                UVOrientationTypeArea/** area orientation */
            };

            /** the center control type options */
            public: enum CenterControlType
            {
                CenterControlTypePosition/** position type */,
                CenterControlTypeTilting/** tilting type */
            };

            /** the center control types */
            public: enum CenterControlAxisType
            {
                CenterControlAxisTypeX/** x axis */,
                CenterControlAxisTypeY/** y axis */,
                CenterControlAxisTypeZ/** z axis */,
                CenterControlAxisTypeFlat/** center flat */
            };

            /** the flow direction options */
            public: enum FlowDirectionType
            {
                FlowDirectionTypeNotSpecified/** not specified */,
                FlowDirectionTypePerpendicular/** perpendicular */,
                FlowDirectionTypeIsoUVLine/** uv line */,
                FlowDirectionTypeAdjacentEdges/** adjacent edges */
            };

            private: friend class  _NSidedSurfaceBuilderBuilder;
            protected: NSidedSurfaceBuilder();
            /**Returns  the surface type  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::NSidedSurfaceBuilder::SurfaceType Type
            (
            );
            /**Sets  the surface type  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetType
            (
                NXOpen::Features::NSidedSurfaceBuilder::SurfaceType surfaceType /** surfacetype */ 
            );
            /**Returns  the list of interior curves  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * InteriorCurveList
            (
            );
            /**Returns  the outer loop  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Section * OuterLoop
            (
            );
            /**Returns  the UV orientation  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::NSidedSurfaceBuilder::UVOrientationType UVOrientation
            (
            );
            /**Sets  the UV orientation  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetUVOrientation
            (
                NXOpen::Features::NSidedSurfaceBuilder::UVOrientationType button /** button */ 
            );
            /**Returns  the trim-to-boundary option  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: bool TrimToBoundary
            (
            );
            /**Sets  the trim-to-boundary option  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTrimToBoundary
            (
                bool trimToBoundary /** trimtoboundary */ 
            );
            /**Returns  the merge-faces option  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: bool MergeFaces
            (
            );
            /**Sets  the merge-faces option  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetMergeFaces
            (
                bool mergeFaces /** mergefaces */ 
            );
            /**Returns  the position tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the curvature tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double CurvatureTolerance
            (
            );
            /**Sets  the curvature tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetCurvatureTolerance
            (
                double curvatureTolerance /** curvaturetolerance */ 
            );
            /**Returns  the constraint faces  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::ScCollector * ConstraintFaces
            (
            );
            /**Returns  the spine curve. This is used only if UVOrientation is UVOrientationType.Spine  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Section * SpineCurve
            (
            );
            /**Returns  the orientation vector. This is used only if UVOrientation is UVOrientationType.Vector  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Direction * OrientationVector
            (
            );
            /**Sets  the orientation vector. This is used only if UVOrientation is UVOrientationType.Vector  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetOrientationVector
            (
                NXOpen::Direction * orientationVector /** orientationvector */ 
            );
            /**Returns  the first rectangle point. This is used only if UVOrientation is UVOrientationType.Area  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Point * RectanglePointFirst
            (
            );
            /**Sets  the first rectangle point. This is used only if UVOrientation is UVOrientationType.Area  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetRectanglePointFirst
            (
                NXOpen::Point * firstPoint /** firstpoint */ 
            );
            /**Returns  the second rectangle point. This is used only if UVOrientation is UVOrientationType.Area  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Point * RectanglePointSecond
            (
            );
            /**Sets  the second rectangle point. This is used only if UVOrientation is UVOrientationType.Area  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetRectanglePointSecond
            (
                NXOpen::Point * secondPoint /** secondpoint */ 
            );
            /**Returns  the flow direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::NSidedSurfaceBuilder::FlowDirectionType FlowDirection
            (
            );
            /**Sets  the flow direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetFlowDirection
            (
                NXOpen::Features::NSidedSurfaceBuilder::FlowDirectionType button /** button */ 
            );
            /**Returns  the continuity  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * Continuity
            (
            );
            /**Returns  the center control x direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlX
            (
            );
            /**Returns  the center control y direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlY
            (
            );
            /**Returns  the center control z direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlZ
            (
            );
            /**Returns  the center control tilt x direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlTiltX
            (
            );
            /**Returns  the center control tilt y direction  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlTiltY
            (
            );
            /**Returns  the center control flat  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlFlat
            (
            );
            /**Returns  the center control flat for trimming  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Expression * CenterControlTrimFlat
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
