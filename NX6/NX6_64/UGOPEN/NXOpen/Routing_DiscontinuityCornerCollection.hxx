#ifndef NXOpen_ROUTING_DISCONTINUITYCORNERCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_DISCONTINUITYCORNERCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DiscontinuityCornerCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DiscontinuityCornerCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class DiscontinuityCorner;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class SplineSegment;
    }
    namespace Routing
    {
        /** Represents a collection of @link Routing::DiscontinuityCorner Routing::DiscontinuityCorner@endlink  objects.  <br> To obtain an instance of this class, refer to @link Routing::RouteManager Routing::RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT DiscontinuityCornerCollection : public TaggedObjectCollection
        {
            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit DiscontinuityCornerCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Routing::DiscontinuityCorner * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::DiscontinuityCornerCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::DiscontinuityCornerCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a discontinuity corner object at the given 
                        @link Routing::ControlPoint Routing::ControlPoint@endlink .  There must be two input 
                        @link Routing::ISegment Routing::ISegment@endlink  objects, and they both must
                        reference the input @link Routing::ControlPoint Routing::ControlPoint@endlink  object.
                         @return  The new disc corner object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::DiscontinuityCorner * Create
            (
                NXOpen::Routing::ControlPoint * rcp /** rcp */ ,
                NXOpen::Routing::ISegment * firstSegment /** first segment to form discontinuity on, 
                                                            must be attached to the input RCP. */,
                NXOpen::Routing::ISegment * secondSegment /** second segment to form discontinuity on, 
                                                            must be attached to the input RCP. */
            );
            /** Return the discontinuity corners assigned to the input control point.  There
                        may be more than one discontinuity corner assigned to input control point.
                        This may occur for example when four segments form a cross, the control
                        point at the center may have two discontinuity corners assigned.  One corner
                        will force stock to split when crossing the horizontal segments, the 
                        other will cause stock to split when crossing the vertical segments.  @return  Corner objects pointing to the rcp.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::DiscontinuityCorner *> GetDiscontinuityCorners
            (
                NXOpen::Routing::ControlPoint * rcp /** The control point */
            );
            /** Checks whether segment1 and segment2 are disconnected at a control point
                        due to a discontinuity corner.  @return  TRUE: If the two segments are disconnected. 
                                                              FALSE: Otherwise .  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AreSegmentsDisconnected
            (
                NXOpen::Routing::SplineSegment * segment1 /** First segment associated with the corner. */,
                NXOpen::Routing::SplineSegment * segment2 /** The 2nd segment associated with the corner. */,
                NXOpen::Routing::ControlPoint * rcp /** Control point. */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
