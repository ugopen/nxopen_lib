#ifndef NXOpen_ROUTING_EDITLINESEGMENTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_EDITLINESEGMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_EditLineSegmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Routing_EditLineSegmentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class EditLineSegmentBuilder;
    }
    class Builder;
    class Expression;
    namespace Routing
    {
        class LineSegment;
    }
    namespace Routing
    {
        class SelectLineSegment;
    }
    namespace Routing
    {
        class _EditLineSegmentBuilderBuilder;
        /** 
                Builder for the "Edit Line Segment" operation.  Sets (and locks or unlocks)
                the length of @link Routing::LineSegment Routing::LineSegment@endlink  objects.  Also moves geometry
                attached to the line segment to ensure that the attached geometry has the correct
                shape after an edit. 
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateEditLineSegmentBuilder Routing::RouteManager::CreateEditLineSegmentBuilder@endlink  <br> */
        class NXOPENCPPEXPORT EditLineSegmentBuilder : public Builder
        {
            private: friend class  _EditLineSegmentBuilderBuilder;
            protected: EditLineSegmentBuilder();
            /**Returns  the line selection.  Stores the line segment selected by the user.  <br> License requirements : None */
            public: NXOpen::Routing::SelectLineSegment * LineSelection
            (
            );
            /**Returns  the length expression.  This data from this expression is copied to (or from)
                        the distance constraint applied to the ends of the line segment.   <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the reverse direction flag.  Flips the direction that the extends towards (or
                        shirinks along).  This flips the origin of the line as well as the direction.  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction flag.  Flips the direction that the extends towards (or
                        shirinks along).  This flips the origin of the line as well as the direction.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the lock length flag.  Forces the commit method to lock the length to the 
                        specified value if set to true.  Otherwise the length of the line segment 
                        is unconstrained after the commit method is invoked.  <br> License requirements : None */
            public: bool LockLength
            (
            );
            /**Sets  the lock length flag.  Forces the commit method to lock the length to the 
                        specified value if set to true.  Otherwise the length of the line segment 
                        is unconstrained after the commit method is invoked.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetLockLength
            (
                bool lockLength /** locklength */ 
            );
            /** Determines the orienation information for the line selected by the user.  Returns
                        false if there is no line currently stored in the builder.   @return  True if there
                                                                                                is a line 
                                                                                                associated with
                                                                                                this builder.  <br> License requirements : None */
            public: bool GetOrientation
            (
                NXOpen::Point3d* startPoint /** The start 
                                                                                                of the line. */,
                NXOpen::Vector3d* direction /** The direction 
                                                                                                of the line 
                                                                                                (unit vector).*/
            );
            /** Initializes (or resets) the builder based off of the input line segment.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void InitializeFromLine
            (
                NXOpen::Routing::LineSegment * line /** Line object, may be NULL*/
            );
            /** Updates the line length based on the expression stored in this builder.  The line is
                        not fully updated only partially updated (i.e. solid bodies build on the line do not
                        update).    This method assumes the difference between the new length value and the
                        previous length value is very small (e.g. a drag operation).  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void DragLineLength
            (
            );
            /** Updates the line length based on the expression stored in this builder.  The line is
                        not fully updated only partially updated (i.e. solid bodies build on the line do not
                        update).   This method doesn't assume anything about the new value.  This method
                        updates the line incrementally from the original length to the new length
                        as this usually results in better looking geometry.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void ModifiedLineLength
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
