#ifndef NXOpen_TOOLING_UNDERSIZEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_UNDERSIZEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_UndersizeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_UndersizeBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class UndersizeBuilder;
    }
    class Builder;
    class Expression;
    class Point;
    class SelectPartList;
    namespace Tooling
    {
        class _UndersizeBuilderBuilder;
        /**  Represents a @link UndersizeBuilder UndersizeBuilder@endlink      <br> To create a new instance of this class, use @link Tooling::UndersizeCollection::CreateUndersizeBuilder Tooling::UndersizeCollection::CreateUndersizeBuilder@endlink  <br> 
        Default values:
        Angle.RightHandSide: 90 (millimeters part), 90 (inches part)
        OrbitSize.RightHandSide: 0.05 (millimeters part), 0.002 (inches part)
        OrbitType: Circular
        SparkGap.RightHandSide: 0.05 (millimeters part), 0.002 (inches part)
        */
        class NXOPENCPPEXPORT UndersizeBuilder : public Builder
        {
            /** The JA_UNDERSIZE_BUILDER_orbit is an index to the orbit type */
            public: enum Orbit
            {
                OrbitCircular/** circular */,
                OrbitSquare/** square */,
                OrbitTriangle/** triangle */,
                OrbitSpherical/** spherical */,
                OrbitPoints/** specify points */
            };

            private: friend class  _UndersizeBuilderBuilder;
            protected: UndersizeBuilder();
            /**Returns  the orbit type  <br> License requirements : None */
            public: NXOpen::Tooling::UndersizeBuilder::Orbit OrbitType
            (
            );
            /**Sets  the orbit type  <br> License requirements : None */
            public: void SetOrbitType
            (
                NXOpen::Tooling::UndersizeBuilder::Orbit orbitType /** orbittype */ 
            );
            /**Returns  the reference point which is the center of the distribution circle <br> License requirements : None */
            public: NXOpen::Point * PointSpecify
            (
            );
            /**Sets  the reference point which is the center of the distribution circle <br> License requirements : None */
            public: void SetPointSpecify
            (
                NXOpen::Point * pointSpecify /** pointspecify */ 
            );
            /**Returns  the body will be used as electrode body to do undersize  <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectElectrodeBlock
            (
            );
            /**Returns  the points will be used as copy positions to undersize electrode  <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectPoints
            (
            );
            /**Returns  the angle which is between two distribution electrodes  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the orbit size which determines the radius of the distribution circle  <br> License requirements : None */
            public: NXOpen::Expression * OrbitSize
            (
            );
            /**Returns  the spark gap which is the gap between the electrode head and the work piece  <br> License requirements : None */
            public: NXOpen::Expression * SparkGap
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
