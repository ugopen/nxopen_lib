#ifndef NXOpen_ROUTING_DESIGNRULEVIOLATIONLOCATION_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEVIOLATIONLOCATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleViolationLocation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_DesignRuleViolationLocationCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleViolationLocation;
    }
    class NXObject;
    namespace Routing
    {
        class _DesignRuleViolationLocationBuilder;
        /** Represents @link Routing::DesignRuleViolationLocation Routing::DesignRuleViolationLocation@endlink  object  <br> Design Rule Violation Location object get created automatically during design rule check <br> */
        class NXOPENCPPEXPORT DesignRuleViolationLocation : public NXObject
        {
            private: friend class  _DesignRuleViolationLocationBuilder;
            protected: DesignRuleViolationLocation();
            /**Returns  the function returns delete location objects, 
                        which is an option for deletion of violation location objects.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::DesignRuleViolationLocationCollection::DeleteOption DeleteLocationObjects
            (
            );
            /**Sets  the function returns delete location objects, 
                        which is an option for deletion of violation location objects.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDeleteLocationObjects
            (
                NXOpen::Routing::DesignRuleViolationLocationCollection::DeleteOption deleteLocationObjects /** Option to delete object at violation location*/
            );
            /** this function returns an array of all Objects at a violation location along with its count.  @return  Location objects tag array.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetLocationObjects
            (
            );
            /**   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLocationObjects
            (
                const std::vector<NXOpen::NXObject *> & locationObjects /** Location objects tag array.  */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
