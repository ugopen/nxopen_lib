#ifndef NXOpen_DXFDWGCREATOR_HXX_INCLUDED
#define NXOpen_DXFDWGCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DxfdwgCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/DxfdwgCreator.hxx>
#include <NXOpen/ObjectSelector.hxx>
#include <NXOpen/ObjectTypeSelector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class DxfdwgCreator;
    class Builder;
    class ObjectSelector;
    class ObjectTypeSelector;
    class _DxfdwgCreatorBuilder;
    /**
        Represents a @link DxfdwgCreator DxfdwgCreator@endlink  to be used when exporting the DXF/DWG Data
        This class is created using @link DexManager DexManager@endlink .  <br> To create a new instance of this class, use @link DexManager::CreateDxfdwgCreator DexManager::CreateDxfdwgCreator@endlink  <br> 
    Default values:
    AutoCADRevision: R2007
    BcurveDensity: 2
    ExportFacesAs: Facets
    ExportFrom: DisplayPart
    FlattenAssembly: 0
    OutputFileType: Dxf
    SurfaceDesignU: 8
    SurfaceDesignV: 8
    ViewEditMode: 0
    */
    class NXOPENCPPEXPORT DxfdwgCreator : public Builder
    {
        /** Create the builder */
        public: enum ExportFromOption
        {
            ExportFromOptionDisplayPart/**  export data from displayed part */,
            ExportFromOptionExistingPart/**  export data from existing part which is on disk */
        };


        public: enum OutputFileTypeOption
        {
            OutputFileTypeOptionDxf/** export data to DXF format */,
            OutputFileTypeOptionDwg/** export data to DWG format */
        };


        public: enum AutoCADRevisionOptions
        {
            AutoCADRevisionOptionsR2005/** output autocad version 2005 */,
            AutoCADRevisionOptionsR2004/** output autocad version 2004 */,
            AutoCADRevisionOptionsR2000/** output autocad version 2000 */,
            AutoCADRevisionOptionsR14/** output autocad version R14 */,
            AutoCADRevisionOptionsR2007/** output autocad version 2007 */
        };


        public: enum ExportFacesAsOptions
        {
            ExportFacesAsOptionsFacets/** export faces as facets */,
            ExportFacesAsOptionsPolylineMesh/** export faces as polyline mesh */
        };

        private: friend class  _DxfdwgCreatorBuilder;
        protected: DxfdwgCreator();
        /** The set user credentials - this will set user name, password and group in NX Manager mode <br> License requirements : None */
        public: void SetUserCredential
        (
            const NXString & user /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & passwd /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & group /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** the save settings - this will save the settings to a file sepcified  <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the export from - this option will determine if data from display part or existing part is exported  <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportFromOption ExportFrom
        (
        );
        /**Sets  the export from - this option will determine if data from display part or existing part is exported  <br> License requirements : None */
        public: void SetExportFrom
        (
            NXOpen::DxfdwgCreator::ExportFromOption exportFrom /** exportfrom */ 
        );
        /**Returns  the output file type - this option determines the format of output file, It can either be dxf or dwg.  <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::OutputFileTypeOption OutputFileType
        (
        );
        /**Sets  the output file type - this option determines the format of output file, It can either be dxf or dwg.  <br> License requirements : None */
        public: void SetOutputFileType
        (
            NXOpen::DxfdwgCreator::OutputFileTypeOption outputFileType /** outputfiletype */ 
        );
        /**Returns  the input file - name of file which is being exported.  <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file - name of file which is being exported.  <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the output file - the name of dxf/dwg file where output is being written  <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - the name of dxf/dwg file where output is being written  <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the settings file - The definition file to read default options  <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - The definition file to read default options  <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the view list - comma separated list of views to export  <br> License requirements : None */
        public: NXString ViewList
        (
        );
        /**Sets  the view list - comma separated list of views to export  <br> License requirements : None */
        public: void SetViewList
        (
            const NXString & viewList /** viewlist */ 
        );
        /**Returns  the drawing list - comma separated list of drawings to export  <br> License requirements : None */
        public: NXString DrawingList
        (
        );
        /**Sets  the drawing list - comma separated list of drawings to export  <br> License requirements : None */
        public: void SetDrawingList
        (
            const NXString & drawingList /** drawinglist */ 
        );
        /**Returns  the export selection block - the object selection will be done by this block.  <br> License requirements : None */
        public: NXOpen::ObjectSelector * ExportSelectionBlock
        (
        );
        /**Returns  the objectTypes - this is subcomponent being used to set object types filters. This
                    will be used to filter objects based on the types  <br> License requirements : None */
        public: NXOpen::ObjectTypeSelector * ObjectTypes
        (
        );
        /**Returns  the layerMask list - This is list of enabled layers. for e.g. "1, 3-7, 9-256"  <br> License requirements : None */
        public: NXString LayerMask
        (
        );
        /**Sets  the layerMask list - This is list of enabled layers. for e.g. "1, 3-7, 9-256"  <br> License requirements : None */
        public: void SetLayerMask
        (
            const NXString & layerMask /** layermask */ 
        );
        /**Returns  the autocad revision - this will decide the revision of resultant autocad file.  <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::AutoCADRevisionOptions AutoCADRevision
        (
        );
        /**Sets  the autocad revision - this will decide the revision of resultant autocad file.  <br> License requirements : None */
        public: void SetAutoCADRevision
        (
            NXOpen::DxfdwgCreator::AutoCADRevisionOptions autoCADRevision /** autocadrevision */ 
        );
        /**Returns  the view edit mode - if set to true this will include view modified/view erase data in the
                    resultant autocad file.  <br> License requirements : None */
        public: bool ViewEditMode
        (
        );
        /**Sets  the view edit mode - if set to true this will include view modified/view erase data in the
                    resultant autocad file.  <br> License requirements : None */
        public: void SetViewEditMode
        (
            bool viewEditMode /** vieweditmode */ 
        );
        /**Returns  the flatten assembly - if set to true then assembly structure will not be retained  <br> License requirements : None */
        public: bool FlattenAssembly
        (
        );
        /**Sets  the flatten assembly - if set to true then assembly structure will not be retained  <br> License requirements : None */
        public: void SetFlattenAssembly
        (
            bool flattenAssembly /** flattenassembly */ 
        );
        /**Returns  the export faces as - this will determine if the faces should be exported as facets or polyline mesh  <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportFacesAsOptions ExportFacesAs
        (
        );
        /**Sets  the export faces as - this will determine if the faces should be exported as facets or polyline mesh  <br> License requirements : None */
        public: void SetExportFacesAs
        (
            NXOpen::DxfdwgCreator::ExportFacesAsOptions exportFacesAs /** exportfacesas */ 
        );
        /**Returns  the bcurve density - segment density for b-spline curve  <br> License requirements : None */
        public: int BcurveDensity
        (
        );
        /**Sets  the bcurve density - segment density for b-spline curve  <br> License requirements : None */
        public: void SetBcurveDensity
        (
            int bcurveDensity /** bcurvedensity */ 
        );
        /**Returns  the surface design u - this will set the surface density along U direction.  <br> License requirements : None */
        public: int SurfaceDesignU
        (
        );
        /**Sets  the surface design u - this will set the surface density along U direction.  <br> License requirements : None */
        public: void SetSurfaceDesignU
        (
            int surfaceDesignU /** surfacedesignu */ 
        );
        /**Returns  the surface design V - this will set the surface density along V direction.  <br> License requirements : None */
        public: int SurfaceDesignV
        (
        );
        /**Sets  the surface design V - this will set the surface density along V direction.  <br> License requirements : None */
        public: void SetSurfaceDesignV
        (
            int surfaceDesignV /** surfacedesignv */ 
        );
        /**Returns  the file save flag - this should be set to false if doing File Export  <br> License requirements : None */
        public: bool FileSaveFlag
        (
        );
        /**Sets  the file save flag - this should be set to false if doing File Export  <br> License requirements : None */
        public: void SetFileSaveFlag
        (
            bool doingFileSave /** doingfilesave */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
