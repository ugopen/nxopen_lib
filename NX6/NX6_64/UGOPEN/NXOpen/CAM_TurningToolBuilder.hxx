#ifndef NXOpen_CAM_TURNINGTOOLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNINGTOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurningToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ToolBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurningToolBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class ManageToolPartBuilder;
    }
    namespace CAM
    {
        class ToolBuilder;
    }
    namespace CAM
    {
        class TrackingBuilder;
    }
    namespace CAM
    {
        class _TurningToolBuilderBuilder;
        /** Represents a Turning tool builder  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT TurningToolBuilder : public CAM::ToolBuilder
        {
            /** the available insert positions */
            public: enum InsertPositions
            {
                InsertPositionsTopside/** Topside */,
                InsertPositionsUnderside/** Underside */
            };

            /** the available turn holder shank types */
            public: enum HolderShankTypes
            {
                HolderShankTypesSquare/** Square Shank */,
                HolderShankTypesRound/** Round Shank */
            };

            private: friend class  _TurningToolBuilderBuilder;
            protected: TurningToolBuilder();
            /**Returns  the insert position  <br> License requirements : None */
            public: NXOpen::CAM::TurningToolBuilder::InsertPositions InsertPosition
            (
            );
            /**Sets  the insert position  <br> License requirements : None */
            public: void SetInsertPosition
            (
                NXOpen::CAM::TurningToolBuilder::InsertPositions insertPosition /** insertposition */ 
            );
            /**Returns  the orient angle builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * OrientAngleBuilder
            (
            );
            /**Returns  the insert length builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * InsertLengthBuilder
            (
            );
            /**Returns  the insert width builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * InsertWidthBuilder
            (
            );
            /**Returns  the left angle builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * LeftAngleBuilder
            (
            );
            /**Returns  the right angle builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * RightAngleBuilder
            (
            );
            /**Returns  the nose radius builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * NoseRadiusBuilder
            (
            );
            /**Returns  the nose width builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * NoseWidthBuilder
            (
            );
            /**Returns  the thickness builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * ThicknessBuilder
            (
            );
            /**Returns  the min. facing diameter toggle  <br> License requirements : None */
            public: bool MinFacingDiameterToggle
            (
            );
            /**Sets  the min. facing diameter toggle  <br> License requirements : None */
            public: void SetMinFacingDiameterToggle
            (
                bool minFacingDiameterToggle /** minfacingdiametertoggle */ 
            );
            /**Returns  the min. facing diameter builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinFacingDiameterBuilder
            (
            );
            /**Returns  the max. facing diameter toggle  <br> License requirements : None */
            public: bool MaxFacingDiameterToggle
            (
            );
            /**Sets  the max. facing diameter toggle  <br> License requirements : None */
            public: void SetMaxFacingDiameterToggle
            (
                bool maxFacingDiameterToggle /** maxfacingdiametertoggle */ 
            );
            /**Returns  the max. facing diameter builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaxFacingDiameterBuilder
            (
            );
            /**Returns  the max. depth toggle  <br> License requirements : None */
            public: bool MaxDepthToggle
            (
            );
            /**Sets  the max. depth toggle  <br> License requirements : None */
            public: void SetMaxDepthToggle
            (
                bool maxDepthToggle /** maxdepthtoggle */ 
            );
            /**Returns  the max. depth builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaxDepthBuilder
            (
            );
            /**Returns  the max. tool reach toggle  <br> License requirements : None */
            public: bool MaxToolReachToggle
            (
            );
            /**Sets  the max. tool reach toggle  <br> License requirements : None */
            public: void SetMaxToolReachToggle
            (
                bool maxToolReachToggle /** maxtoolreachtoggle */ 
            );
            /**Returns  the max. tool reach builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * MaxToolReachBuilder
            (
            );
            /**Returns  the min. boring diameter toggle  <br> License requirements : None */
            public: bool MinBoringDiameterToggle
            (
            );
            /**Sets  the min. boring diameter toggle  <br> License requirements : None */
            public: void SetMinBoringDiameterToggle
            (
                bool minBoringDiameterToggle /** minboringdiametertoggle */ 
            );
            /**Returns  the min. boring diameter builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinBoringDiameterBuilder
            (
            );
            /**Returns  the x mount builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * XMountBuilder
            (
            );
            /**Returns  the y mount builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * YMountBuilder
            (
            );
            /**Returns  the holder angle builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HolderAngleBuilder
            (
            );
            /**Returns  the use turn holder toggle  <br> License requirements : None */
            public: bool HolderUse
            (
            );
            /**Sets  the use turn holder toggle  <br> License requirements : None */
            public: void SetHolderUse
            (
                bool holderUse /** the use turn holder toggle */
            );
            /**Returns  the turn holder shank type  <br> License requirements : None */
            public: NXOpen::CAM::TurningToolBuilder::HolderShankTypes HolderShankType
            (
            );
            /**Sets  the turn holder shank type  <br> License requirements : None */
            public: void SetHolderShankType
            (
                NXOpen::CAM::TurningToolBuilder::HolderShankTypes holderShankType /** holdershanktype */ 
            );
            /**Returns  the turn holder length builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HolderLengthBuilder
            (
            );
            /**Returns  the turn holder width builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HolderWidthBuilder
            (
            );
            /**Returns  the turn holder shank width builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HolderShankWidthBuilder
            (
            );
            /**Returns  the turn holder shank line builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HolderShankLineBuilder
            (
            );
            /**Returns  the tracking point builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TrackingBuilder * TrackingBuilder
            (
            );
            /**Returns  the lock turn holder toggle  <br> License requirements : None */
            public: bool HolderLock
            (
            );
            /**Sets  the lock turn holder toggle  <br> License requirements : None */
            public: void SetHolderLock
            (
                bool holderLock /** the lock turn holder toggle */
            );
            /**Returns  the manage tool part builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ManageToolPartBuilder * ManageToolPartBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
