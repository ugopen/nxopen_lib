#ifndef NXOpen_CAM_BNDSTEPOVERCIBUILDER_HXX_INCLUDED
#define NXOpen_CAM_BNDSTEPOVERCIBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BndStepoverCiBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class BndStepoverCiBuilder;
    }
    namespace CAM
    {
        class _BndStepoverCiBuilderBuilder;
        /** Represents a boundary stepover ci Builder */
        class NXOPENCPPEXPORT BndStepoverCiBuilder : public TaggedObject
        {
            /** Available types for stepover type in boundary stepover customizable item */
            public: enum StepoverTypes
            {
                StepoverTypesNone/** None */,
                StepoverTypesConstant/** Distance */,
                StepoverTypesScallopHeight/** Height */,
                StepoverTypesVariable/** Variable */,
                StepoverTypesPercentToolDiameter/** Percent */,
                StepoverTypesNumber/** Number */,
                StepoverTypesAngular/** Angular */,
                StepoverTypesUseDepthOfCut/** Use depth of cut */
            };

            private: friend class  _BndStepoverCiBuilderBuilder;
            protected: BndStepoverCiBuilder();
            /** Get the Stepover Min Max  @return  the Stepover Min Max values  <br> License requirements : None */
            public: std::vector<double> GetStepoverMinMax
            (
            );
            /** Set the Stepover Min Max  <br> License requirements : None */
            public: void SetStepoverMinMax
            (
                const std::vector<double> & minMax /** the Stepover Min Max values */
            );
            /** Get the Stepover Variable Distances  @return  the Stepover Variable Distances values  <br> License requirements : None */
            public: std::vector<double> GetStepoverVarDists
            (
            );
            /** Set the Stepover Variable Distances  <br> License requirements : None */
            public: void SetStepoverVarDists
            (
                const std::vector<double> & varDists /** the Stepover Variable Distances values */
            );
            /** Get the Stepover Variable Passes  @return  the Stepover Variable Passes values  <br> License requirements : None */
            public: std::vector<int> GetStepoverVarPasses
            (
            );
            /** Set the Stepover Variable Passes  <br> License requirements : None */
            public: void SetStepoverVarPasses
            (
                const std::vector<int> & varPasses /** the Stepover Variable Passes values */
            );
            /**Returns  the Stepover Type  <br> License requirements : None */
            public: NXOpen::CAM::BndStepoverCiBuilder::StepoverTypes StepoverType
            (
            );
            /**Sets  the Stepover Type  <br> License requirements : None */
            public: void SetStepoverType
            (
                NXOpen::CAM::BndStepoverCiBuilder::StepoverTypes stepoverType /** the Stepover Type */
            );
            /**Returns  the Stepover Distance  <br> License requirements : None */
            public: double StepoverDist
            (
            );
            /**Sets  the Stepover Distance  <br> License requirements : None */
            public: void SetStepoverDist
            (
                double stepoverDist /** the Stepover Distance */
            );
            /**Returns  the Stepover Scallop  <br> License requirements : None */
            public: double StepoverScallop
            (
            );
            /**Sets  the Stepover Scallop  <br> License requirements : None */
            public: void SetStepoverScallop
            (
                double stepoverScallop /** the Stepover Scallop */
            );
            /**Returns  the Stepover Percent  <br> License requirements : None */
            public: double StepoverPercent
            (
            );
            /**Sets  the Stepover Percent  <br> License requirements : None */
            public: void SetStepoverPercent
            (
                double stepoverPercent /** the Stepover Percent */
            );
            /**Returns  the Stepover Degree  <br> License requirements : None */
            public: double StepoverDegree
            (
            );
            /**Sets  the Stepover Degree  <br> License requirements : None */
            public: void SetStepoverDegree
            (
                double stepoverDegree /** the Stepover degree */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
