#ifndef NXOpen_FEATURES_PEDESTRIANPROTECTIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PEDESTRIANPROTECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PedestrianProtectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_PedestrianProtectionBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class PedestrianProtectionBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXColor;
    class Plane;
    class Point;
    class ScCollector;
    class SelectDisplayableObjectList;
    namespace Features
    {
        class _PedestrianProtectionBuilderBuilder;
        /**
            Represents a @link Features::PedestrianProtection Features::PedestrianProtection@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreatePedestrianProtectionBuilder Features::FeatureCollection::CreatePedestrianProtectionBuilder@endlink  <br> 
        Default values:
        AdultHic1000Angle.RightHandSide: 50
        AdultHic1000Offset.RightHandSide: 95 (millimeters part), 3.7 (inches part)
        AdultHic1000OutputFont: Solid
        AdultHic1000OutputLayer: 0
        AdultHic1000OutputWidth: Normal
        AdultHic1700Angle.RightHandSide: 50
        AdultHic1700Offset.RightHandSide: 74 (millimeters part), 2.9 (inches part)
        AdultHic1700OutputFont: Solid
        AdultHic1700OutputLayer: 0
        AdultHic1700OutputWidth: Normal
        ChildHic1000Angle.RightHandSide: 65
        ChildHic1000Offset.RightHandSide: 85 (millimeters part), 3.3 (inches part)
        ChildHic1000OutputFont: Solid
        ChildHic1000OutputLayer: 0
        ChildHic1000OutputWidth: Normal
        ChildHic1700Angle.RightHandSide: 65
        ChildHic1700Offset.RightHandSide: 68 (millimeters part), 2.7 (inches part)
        ChildHic1700OutputFont: Solid
        ChildHic1700OutputLayer: 0
        ChildHic1700OutputWidth: Normal
        ConstructGeometryFont: Solid
        ConstructGeometryLayer: 0
        ConstructGeometryWidth: Normal
        CornerBumperAngle.RightHandSide: 30
        CreateHeadImpactZones: 1
        CreateImpactGrid: 1
        CreateLegImpact: 1
        CreateReferenceLines: 1
        CreateWrapAroundDistanceLines: 1
        DisplayConstructionGeometry: 0
        DisplayInterferenceResult: 0
        FrontRefAngle.RightHandSide: 40
        HeadDiameter.RightHandSide: 165 (millimeters part), 6.5 (inches part)
        ImpactOffset.RightHandSide: 10 (millimeters part), 0.4 (inches part)
        InterferenceFont: Solid
        InterferenceLayer: 0
        InterferenceWidth: Normal
        LegZonesOutputFont: Solid
        LegZonesOutputLayer: 0
        LegZonesOutputWidth: Normal
        LowerBumperAngle.RightHandSide: 20
        MirrorFaces: 0
        PopupDistance.RightHandSide: 120 (millimeters part), 4.7 (inches part)
        ProcessActiveHood: 0
        ReferenceOutputFont: Solid
        ReferenceOutputLayer: 0
        ReferenceOutputWidth: Normal
        SideRefAngle.RightHandSide: 45
        Standard: NorthAmerican
        StepDistance.RightHandSide: 50 (millimeters part), 2 (inches part)
        UpperBumperAngle.RightHandSide: 25
        UseImpactOffset: 0
        WadBoundaryValue: Fourth
        WadEndValue: Sixth
        WadOutputFont: Solid
        WadOutputLayer: 0
        WadOutputWidth: Normal
        WadStartValue: First
        */
        class NXOPENCPPEXPORT PedestrianProtectionBuilder : public Features::FeatureBuilder
        {
            /** Settings for the type of pedestrian protection impact study. */
            public: enum Types
            {
                TypesHeadAndLegImpact/** Head and leg impact study. */,
                TypesHeadImpact/** Head impact study only. */,
                TypesLegImpact/** Leg impact study only. */
            };

            /** Settings for the type of pedestrian protection standard to use in the study. */
            public: enum StandardType
            {
                StandardTypeNorthAmerican/** North american standard */,
                StandardTypeEuropean/** European standard */,
                StandardTypeJapanese/** Japanese standard */,
                StandardTypeKorean/** Korean standard */
            };

            /** Settings for the start, end and boundary wrap around distance line to create. */
            public: enum Wad
            {
                WadFirst/** First wrap around distance line. */,
                WadSecond/** Second wrap around distance line. */,
                WadThird/** Third wrap around distance line. */,
                WadFourth/** Fourth wrap around distance line. */,
                WadFifth/** Fifth wrap around distance line. */,
                WadSixth/** Sixth wrap around distance line. Not valid for boundary. */
            };

            /** Settings for font to create the various output with. */
            public: enum Font
            {
                FontDefault/** Default Font. */,
                FontSolid/** Solid Font. */,
                FontDashed/** Dashed Font. */,
                FontPhantom/** Phantom Font. */,
                FontCenterline/** Centerline Font. */,
                FontDotted/** Dotted Font. */,
                FontLongDashed/** LongDashed Font. */,
                FontDottedDashed/** DottedDashed Font. */
            };

            /** Settings for width to create the various output with. */
            public: enum Width
            {
                WidthDefault/**Default Width*/,
                WidthNormal/**normal Width*/,
                WidthThick/**Thick width*/,
                WidthThin/**Thin width*/
            };

            private: friend class  _PedestrianProtectionBuilderBuilder;
            protected: PedestrianProtectionBuilder();
            /**Returns  the standard that should be used in the analysis.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::StandardType Standard
            (
            );
            /**Sets  the standard that should be used in the analysis.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetStandard
            (
                NXOpen::Features::PedestrianProtectionBuilder::StandardType setStandard /** setstandard */ 
            );
            /**Returns  the ground plane.  <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the ground plane.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the collector containing the faces of the bonnet.  <br> License requirements : None */
            public: NXOpen::ScCollector * BonnetTop
            (
            );
            /**Returns  the collector containing the faces of the windshield.  <br> License requirements : None */
            public: NXOpen::ScCollector * Windshield
            (
            );
            /**Returns  the collector containing the faces of the active hood.  <br> License requirements : None */
            public: NXOpen::ScCollector * Hood
            (
            );
            /**Returns  the point about which to rotate the active hood.  <br> License requirements : None */
            public: NXOpen::Point * HingePoint
            (
            );
            /**Sets  the point about which to rotate the active hood.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetHingePoint
            (
                NXOpen::Point * hingePoint /** hingepoint */ 
            );
            /**Returns  the reference point of the active hood. At this point the active hood will be rotated
                        about the hinge point so that this point is moved the popup distance in the +Z direction.  <br> License requirements : None */
            public: NXOpen::Point * PopupPoint
            (
            );
            /**Sets  the reference point of the active hood. At this point the active hood will be rotated
                        about the hinge point so that this point is moved the popup distance in the +Z direction.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPopupPoint
            (
                NXOpen::Point * popupPoint /** popuppoint */ 
            );
            /**Returns  the distance to move the reference point of the active hood.  <br> License requirements : None */
            public: NXOpen::Expression * PopupDistance
            (
            );
            /**Returns  the list of the components to check interference with the impact sheets.  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Component
            (
            );
            /**Returns  the setting to indicate if the bonnet, windshield and hood faces should be mirrored
                        before performing the analysis,
                        true they will be mirrored, false they will not be mirrored.   <br> License requirements : None */
            public: bool MirrorFaces
            (
            );
            /**Sets  the setting to indicate if the bonnet, windshield and hood faces should be mirrored
                        before performing the analysis,
                        true they will be mirrored, false they will not be mirrored.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetMirrorFaces
            (
                bool mirrorFaces /** mirrorfaces */ 
            );
            /**Returns  the setting to indicate if the wrap around distance lines should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : None */
            public: bool CreateWrapAroundDistanceLines
            (
            );
            /**Sets  the setting to indicate if the wrap around distance lines should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCreateWrapAroundDistanceLines
            (
                bool wad /** wad */ 
            );
            /**Returns  the setting to indicate if the reference lines should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : None */
            public: bool CreateReferenceLines
            (
            );
            /**Sets  the setting to indicate if the reference lines should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCreateReferenceLines
            (
                bool referenceLines /** referencelines */ 
            );
            /**Returns  the setting to indicate if the adult and child head impact sheets should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : None */
            public: bool CreateHeadImpactZones
            (
            );
            /**Sets  the setting to indicate if the adult and child head impact sheets should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCreateHeadImpactZones
            (
                bool headImpactZones /** headimpactzones */ 
            );
            /**Returns  the setting to indicate if the leg impact curves should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : None */
            public: bool CreateLegImpact
            (
            );
            /**Sets  the setting to indicate if the leg impact curves should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCreateLegImpact
            (
                bool legImpact /** legimpact */ 
            );
            /**Returns  the setting to indicate if the interference curves should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : None */
            public: bool DisplayInterferenceResult
            (
            );
            /**Sets  the setting to indicate if the interference curves should be created, 
                        true they will be created, false they will not be created.   <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetDisplayInterferenceResult
            (
                bool displayInterferenceResult /** displayinterferenceresult */ 
            );
            /**Returns  the setting to indicate if the construction geometry should be created, 
                        true they will be created, false they will not be created.  <br> License requirements : None */
            public: bool DisplayConstructionGeometry
            (
            );
            /**Sets  the setting to indicate if the construction geometry should be created, 
                        true they will be created, false they will not be created.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetDisplayConstructionGeometry
            (
                bool displayConstructionGeometry /** displayconstructiongeometry */ 
            );
            /**Returns  the setting to indicate if the impact offset should be used when creating the impact zone, 
                        true it will be used, false it will not be used.  <br> License requirements : None */
            public: bool UseImpactOffset
            (
            );
            /**Sets  the setting to indicate if the impact offset should be used when creating the impact zone, 
                        true it will be used, false it will not be used.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetUseImpactOffset
            (
                bool useImpactOffset /** useimpactoffset */ 
            );
            /**Returns  the setting to indicate if the active hood should be analyzed, 
                        true it will be used, false it will not be used.  <br> License requirements : None */
            public: bool ProcessActiveHood
            (
            );
            /**Sets  the setting to indicate if the active hood should be analyzed, 
                        true it will be used, false it will not be used.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetProcessActiveHood
            (
                bool processActiveHood /** processactivehood */ 
            );
            /**Returns  the setting to indicate if the impact grid should be created, 
                        true it will be created, false it will not be created.  <br> License requirements : None */
            public: bool CreateImpactGrid
            (
            );
            /**Sets  the setting to indicate if the impact grid should be created, 
                        true it will be created, false it will not be created.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetCreateImpactGrid
            (
                bool createImpactGrid /** createimpactgrid */ 
            );
            /**Returns  the type of impact study to perform.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Types Type
            (
            );
            /**Sets  the type of impact study to perform.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetType
            (
                NXOpen::Features::PedestrianProtectionBuilder::Types type /** type */ 
            );
            /**Returns  the distance between sections used in the analysis.  <br> License requirements : None */
            public: NXOpen::Expression * StepDistance
            (
            );
            /**Returns  the diameter of the headform.  <br> License requirements : None */
            public: NXOpen::Expression * HeadDiameter
            (
            );
            /**Returns  the first wrap around distance line to create.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Wad WadStartValue
            (
            );
            /**Sets  the first wrap around distance line to create.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadStartValue
            (
                NXOpen::Features::PedestrianProtectionBuilder::Wad wadstartenum /** wadstartenum */ 
            );
            /**Returns  the last wrap around distance line to create.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Wad WadEndValue
            (
            );
            /**Sets  the last wrap around distance line to create.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadEndValue
            (
                NXOpen::Features::PedestrianProtectionBuilder::Wad wadendenum /** wadendenum */ 
            );
            /**Returns  the wrap around distance line to use as the boundary between the adult and child zones.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Wad WadBoundaryValue
            (
            );
            /**Sets  the wrap around distance line to use as the boundary between the adult and child zones.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadBoundaryValue
            (
                NXOpen::Features::PedestrianProtectionBuilder::Wad wadboundaryenum /** wadboundaryenum */ 
            );
            /**Returns  the angle that is used to determine the front reference line.  <br> License requirements : None */
            public: NXOpen::Expression * FrontRefAngle
            (
            );
            /**Returns  the angle that is used to determine the side reference line.  <br> License requirements : None */
            public: NXOpen::Expression * SideRefAngle
            (
            );
            /**Returns  the offset to apply to the impact boundaries.  <br> License requirements : None */
            public: NXOpen::Expression * ImpactOffset
            (
            );
            /**Returns  the angle to translate the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * AdultHic1000Angle
            (
            );
            /**Returns  the distance to translate the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * AdultHic1000Offset
            (
            );
            /**Returns  the angle to translate the adult HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * AdultHic1700Angle
            (
            );
            /**Returns  the distance to translate the adult HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * AdultHic1700Offset
            (
            );
            /**Returns  the angle to translate the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * ChildHic1000Angle
            (
            );
            /**Returns  the distance to translate the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * ChildHic1000Offset
            (
            );
            /**Returns  the angle to translate the child HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * ChildHic1700Angle
            (
            );
            /**Returns  the distance to translate the child HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Expression * ChildHic1700Offset
            (
            );
            /**Returns  the angle that is used to determine the upper limit of the bumper.  <br> License requirements : None */
            public: NXOpen::Expression * UpperBumperAngle
            (
            );
            /**Returns  the angle that is used to determine the lower limit of the bumper.  <br> License requirements : None */
            public: NXOpen::Expression * LowerBumperAngle
            (
            );
            /**Returns  the angle that is used to determine the corner of the bumper.  <br> License requirements : None */
            public: NXOpen::Expression * CornerBumperAngle
            (
            );
            /**Returns  the color that will be used for the wrap around distance lines.  <br> License requirements : None */
            public: NXOpen::NXColor * WadOutputColor
            (
            );
            /**Sets  the color that will be used for the wrap around distance lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadOutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the wrap around distance lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font WadOutputFont
            (
            );
            /**Sets  the font that will be used for the wrap around distance lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadOutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the wrap around distance lines.  <br> License requirements : None */
            public: int WadOutputLayer
            (
            );
            /**Sets  the layer that will be used for the wrap around distance lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadOutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the wrap around distance lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width WadOutputWidth
            (
            );
            /**Sets  the line width that will be used for the wrap around distance lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetWadOutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the reference lines.  <br> License requirements : None */
            public: NXOpen::NXColor * ReferenceOutputColor
            (
            );
            /**Sets  the color that will be used for the reference lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetReferenceOutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the reference lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font ReferenceOutputFont
            (
            );
            /**Sets  the font that will be used for the reference lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetReferenceOutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the reference lines.  <br> License requirements : None */
            public: int ReferenceOutputLayer
            (
            );
            /**Sets  the layer that will be used for the reference lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetReferenceOutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the reference lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width ReferenceOutputWidth
            (
            );
            /**Sets  the line width that will be used for the reference lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetReferenceOutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::NXColor * AdultHic1000OutputColor
            (
            );
            /**Sets  the color that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1000OutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font AdultHic1000OutputFont
            (
            );
            /**Sets  the font that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1000OutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: int AdultHic1000OutputLayer
            (
            );
            /**Sets  the layer that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1000OutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width AdultHic1000OutputWidth
            (
            );
            /**Sets  the line width that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1000OutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the adult HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::NXColor * AdultHic1700OutputColor
            (
            );
            /**Sets  the color that will be used for the adult HIC 1700 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1700OutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the adult HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font AdultHic1700OutputFont
            (
            );
            /**Sets  the font that will be used for the adult HIC 1700 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1700OutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: int AdultHic1700OutputLayer
            (
            );
            /**Sets  the layer that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1700OutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width AdultHic1700OutputWidth
            (
            );
            /**Sets  the line width that will be used for the adult HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAdultHic1700OutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::NXColor * ChildHic1000OutputColor
            (
            );
            /**Sets  the color that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1000OutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font ChildHic1000OutputFont
            (
            );
            /**Sets  the font that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1000OutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: int ChildHic1000OutputLayer
            (
            );
            /**Sets  the layer that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1000OutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width ChildHic1000OutputWidth
            (
            );
            /**Sets  the line width that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1000OutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the child HIC 1700 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::NXColor * ChildHic1700OutputColor
            (
            );
            /**Sets  the color that will be used for the child HIC 1700 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1700OutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font ChildHic1700OutputFont
            (
            );
            /**Sets  the font that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1700OutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: int ChildHic1700OutputLayer
            (
            );
            /**Sets  the layer that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1700OutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width ChildHic1700OutputWidth
            (
            );
            /**Sets  the line width that will be used for the child HIC 1000 impact sheet and grid.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetChildHic1700OutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the leg impact zone lines.  <br> License requirements : None */
            public: NXOpen::NXColor * LegZonesOutputColor
            (
            );
            /**Sets  the color that will be used for the leg impact zone lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetLegZonesOutputColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the leg impact zone lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font LegZonesOutputFont
            (
            );
            /**Sets  the font that will be used for the leg impact zone lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetLegZonesOutputFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the leg impact zone lines.  <br> License requirements : None */
            public: int LegZonesOutputLayer
            (
            );
            /**Sets  the layer that will be used for the leg impact zone lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetLegZonesOutputLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the leg impact zone lines.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width LegZonesOutputWidth
            (
            );
            /**Sets  the line width that will be used for the leg impact zone lines.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetLegZonesOutputWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the interference curves.  <br> License requirements : None */
            public: NXOpen::NXColor * InterferenceColor
            (
            );
            /**Sets  the color that will be used for the interference curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterferenceColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the interference curves.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font InterferenceFont
            (
            );
            /**Sets  the font that will be used for the interference curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterferenceFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the interference curves.  <br> License requirements : None */
            public: int InterferenceLayer
            (
            );
            /**Sets  the layer that will be used for the interference curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterferenceLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the interference curves.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width InterferenceWidth
            (
            );
            /**Sets  the line width that will be used for the interference curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetInterferenceWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
            /**Returns  the color that will be used for the various construction curves.  <br> License requirements : None */
            public: NXOpen::NXColor * ConstructGeometryColor
            (
            );
            /**Sets  the color that will be used for the various construction curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetConstructGeometryColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the font that will be used for the various construction curves.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Font ConstructGeometryFont
            (
            );
            /**Sets  the font that will be used for the various construction curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetConstructGeometryFont
            (
                NXOpen::Features::PedestrianProtectionBuilder::Font font /** font */ 
            );
            /**Returns  the layer that will be used for the various construction curves.  <br> License requirements : None */
            public: int ConstructGeometryLayer
            (
            );
            /**Sets  the layer that will be used for the various construction curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetConstructGeometryLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the line width that will be used for the various construction curves.  <br> License requirements : None */
            public: NXOpen::Features::PedestrianProtectionBuilder::Width ConstructGeometryWidth
            (
            );
            /**Sets  the line width that will be used for the various construction curves.  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetConstructGeometryWidth
            (
                NXOpen::Features::PedestrianProtectionBuilder::Width width /** width */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
