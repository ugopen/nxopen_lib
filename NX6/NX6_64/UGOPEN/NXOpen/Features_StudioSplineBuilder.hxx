#ifndef NXOpen_FEATURES_STUDIOSPLINEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STUDIOSPLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StudioSplineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/Features_StudioSplineBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class StudioSplineBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    class Spline;
    namespace Features
    {
        class _StudioSplineBuilderBuilder;
        /** Studio Spline builder class.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateStudioSplineBuilder Features::FeatureCollection::CreateStudioSplineBuilder@endlink  <br> */
        class NXOPENCPPEXPORT StudioSplineBuilder : public Features::FeatureBuilder
        {
            /** Spline methods. */
            public: enum Method
            {
                MethodThroughPoints/** Spline through points */,
                MethodByPoles/** Spline by poles */
            };

            /** Options for creating knots at the defining points in case of through point spline */
            public: enum MatchKnotsType
            {
                MatchKnotsTypeNone/** No knot matching */,
                MatchKnotsTypeCubic/** Match knots for cubic non-periodic spline */,
                MatchKnotsTypeGeneral/** Match knots for general spline */
            };

            /** Options of the actions to be taken on an input non-parametric spline
                        after its editing is done. These options are used only while trying
                        to make non-parametric spline a feature. */
            public: enum CurveOption
            {
                CurveOptionRetain/** Retain input curve */,
                CurveOptionBlank/** Blank input curve */,
                CurveOptionDelete/** Delete input curve */
            };

            private: friend class  _StudioSplineBuilderBuilder;
            protected: StudioSplineBuilder();
            /**Returns  the spline method  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::StudioSplineBuilder::Method SplineMethod
            (
            );
            /**Sets  the spline method  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetSplineMethod
            (
                NXOpen::Features::StudioSplineBuilder::Method method /** method */ 
            );
            /**Returns  the associative or non associative way of spline creation  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool Associative
            (
            );
            /**Sets  the associative or non associative way of spline creation  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the degree  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: int Degree
            (
            );
            /**Sets  the degree  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetDegree
            (
                int degree /** degree */ 
            );
            /**Returns  the periodicity  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsPeriodic
            (
            );
            /**Sets  the periodicity  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetPeriodic
            (
                bool periodicity /** periodicity */ 
            );
            /**Returns  a constraint to match knots at the defining points for a through point spline  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::StudioSplineBuilder::MatchKnotsType MatchKnots
            (
            );
            /**Sets  a constraint to match knots at the defining points for a through point spline  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetMatchKnots
            (
                NXOpen::Features::StudioSplineBuilder::MatchKnotsType matchKnots /** match knots */ 
            );
            /** Queries the knot sequence for by pole spline  @return  The knot sequence  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: std::vector<double> GetKnots
            (
            );
            /** Sets the optional knot sequence for by pole spline  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetKnots
            (
                const std::vector<double> & knots /** The knot sequence */
            );
            /** Queries the parameters at defining points for a through point spline  @return  The parameters  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: std::vector<double> GetParameters
            (
            );
            /** Sets the optional parameters at defining points for a through point spline  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetParameters
            (
                const std::vector<double> & parameters /** The parameters */
            );
            /**Returns  the constraint manager  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /**Returns  the spline curve  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Spline * Curve
            (
            );
            /**Returns  the input curve option  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: NXOpen::Features::StudioSplineBuilder::CurveOption InputCurveOption
            (
            );
            /**Sets  the input curve option  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetInputCurveOption
            (
                NXOpen::Features::StudioSplineBuilder::CurveOption option /** option */ 
            );
            /** Sets a non-parametric spline for editing  <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetNonParametricSpline
            (
                NXOpen::Spline * spline /** Non parameteric spline */,
                NXOpen::Features::StudioSplineBuilder::Method method /** Spline method for parameterization */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
