#ifndef NXOpen_ROUTING_TRANSFORMPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_TRANSFORMPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_TransformPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/Routing_TransformPathBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class TransformPathBuilder;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class NXObject;
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class _TransformPathBuilderBuilder;
        /** 
                Builder for the "Transform Path" operation.  Allows the user to perform 
                either a "Transform" or "Copy" of Routing objects.  
             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateTransformPathBuilder Routing::RouteManager::CreateTransformPathBuilder@endlink  <br> */
        class NXOPENCPPEXPORT TransformPathBuilder : public Builder
        {
            /** Tranform operation to perform. */
            public: enum TransformOption
            {
                TransformOptionMoveOriginal/** Move the selected entities. */,
                TransformOptionCopyOriginal/** Copy the selected entities. */
            };

            private: friend class  _TransformPathBuilderBuilder;
            protected: TransformPathBuilder();
            /**Returns  the path selection.  Stores the objects to be transformed or copied.  <br> License requirements : None */
            public: NXOpen::Routing::RouteObjectCollector * PathSelection
            (
            );
            /**Returns  the motion or transform.  The transformation to apply to the selected or
                        copied objects.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion * Transform
            (
            );
            /**Returns  the operation to perform during the commit method.   <br> License requirements : None */
            public: NXOpen::Routing::TransformPathBuilder::TransformOption MoveOrCopyOption
            (
            );
            /**Sets  the operation to perform during the commit method.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetMoveOrCopyOption
            (
                NXOpen::Routing::TransformPathBuilder::TransformOption moveOption /** move option */ 
            );
            /**Returns  the number of copies to create in the commit method for the option
                        @link Routing::TransformPathBuilder::TransformOptionCopyOriginal Routing::TransformPathBuilder::TransformOptionCopyOriginal@endlink .  <br> License requirements : None */
            public: int NumberOfCopies
            (
            );
            /**Sets  the number of copies to create in the commit method for the option
                        @link Routing::TransformPathBuilder::TransformOptionCopyOriginal Routing::TransformPathBuilder::TransformOptionCopyOriginal@endlink .  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetNumberOfCopies
            (
                int numberOfCopies /** number of copies */ 
            );
            /**Returns  the flag that indicates whether or not to check for duplicate objects after
                        the copy or transform.  <br> License requirements : None */
            public: bool CheckForDuplicates
            (
            );
            /**Sets  the flag that indicates whether or not to check for duplicate objects after
                        the copy or transform.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetCheckForDuplicates
            (
                bool checkForDups /** check for dups */ 
            );
            /** Begin a drag operation.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void StartDrag
            (
            );
            /** Drag the selected objects by the given translation and rotation.  Only
                        call after invoking the @link Routing::TransformPathBuilder::StartDrag Routing::TransformPathBuilder::StartDrag@endlink 
                        method.  After finished dragging, call 
                        @link Routing::TransformPathBuilder::StopDrag Routing::TransformPathBuilder::StopDrag@endlink . <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void DragByTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied.*/,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** End a drag operation.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void StopDrag
            (
            );
            /** Destroys all preview objects associated with this operation.  Caller must
                       call update to complete the deletion of the preview objects.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void DestroyAllPreviewObjects
            (
            );
            /** Sets the transform to use for the copy operation.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetCopyTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied.*/,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** Gets the set of objects created for the "ith" copy during the
                        commit method.  The 0th element is the original set of objects
                        to copy.   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void GetIthSetOfObjects
            (
                int ith /** Which set of copy objects 
                                                                                    to retrieve, must be in 
                                                                                    the range 0 to the number 
                                                                                    of copies minus 1. */,
                std::vector<NXOpen::NXObject *> & objects /** Copied objects. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
