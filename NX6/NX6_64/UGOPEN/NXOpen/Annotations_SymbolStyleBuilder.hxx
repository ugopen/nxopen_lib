#ifndef NXOpen_ANNOTATIONS_SYMBOLSTYLEBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SYMBOLSTYLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SymbolStyleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_SymbolStyleBuilder.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class SymbolStyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Annotations
    {
        class _SymbolStyleBuilderBuilder;
        /**
            Represents a @link Annotations::SymbolStyleBuilder Annotations::SymbolStyleBuilder@endlink .
            This class queries and sets preferences for various symbol type annotations when creating or editing.
            */
        class NXOPENCPPEXPORT SymbolStyleBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _SymbolStyleBuilderBuilder;
            protected: SymbolStyleBuilder();
            /**Returns  the ID symbol size  <br> License requirements : None */
            public: double IdSymbolSize
            (
            );
            /**Sets  the ID symbol size  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIdSymbolSize
            (
                double idSymbolSize /** idsymbolsize */ 
            );
            /**Returns  the ID symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * IdSymbolColor
            (
            );
            /**Sets  the ID symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIdSymbolColor
            (
                NXOpen::NXColor * idSymbolColor /** idsymbolcolor */ 
            );
            /**Returns  the ID symbol font  <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont IdSymbolFont
            (
            );
            /**Sets  the ID symbol font  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIdSymbolFont
            (
                NXOpen::DisplayableObject::ObjectFont idSymbolFont /** idsymbolfont */ 
            );
            /**Returns  the ID symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth IdSymbolWidth
            (
            );
            /**Sets  the ID symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIdSymbolWidth
            (
                NXOpen::Annotations::LineWidth idSymbolWidth /** idsymbolwidth */ 
            );
            /**Returns  the user defined symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * UserDefinedSymbolColor
            (
            );
            /**Sets  the user defined symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUserDefinedSymbolColor
            (
                NXOpen::NXColor * userDefinedSymbolColor /** userdefinedsymbolcolor */ 
            );
            /**Returns  the user defined symbol font  <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont UserDefinedSymbolFont
            (
            );
            /**Sets  the user defined symbol font  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUserDefinedSymbolFont
            (
                NXOpen::DisplayableObject::ObjectFont userDefinedSymbolFont /** userdefinedsymbolfont */ 
            );
            /**Returns  the user defined symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth UserDefinedSymbolWidth
            (
            );
            /**Sets  the user defined symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetUserDefinedSymbolWidth
            (
                NXOpen::Annotations::LineWidth userDefinedSymbolWidth /** userdefinedsymbolwidth */ 
            );
            /**Returns  the centerline symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * CenterlineSymbolColor
            (
            );
            /**Sets  the centerline symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetCenterlineSymbolColor
            (
                NXOpen::NXColor * centerlineSymbolColor /** centerlinesymbolcolor */ 
            );
            /**Returns  the centerline symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth CenterlineSymbolWidth
            (
            );
            /**Sets  the centerline symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetCenterlineSymbolWidth
            (
                NXOpen::Annotations::LineWidth centerlineSymbolWidth /** centerlinesymbolwidth */ 
            );
            /**Returns  the intersection symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * IntersectionSymbolColor
            (
            );
            /**Sets  the intersection symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIntersectionSymbolColor
            (
                NXOpen::NXColor * intersectionSymbolColor /** intersectionsymbolcolor */ 
            );
            /**Returns  the intersection symbol font  <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont IntersectionSymbolFont
            (
            );
            /**Sets  the intersection symbol font  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIntersectionSymbolFont
            (
                NXOpen::DisplayableObject::ObjectFont intersectionSymbolFont /** intersectionsymbolfont */ 
            );
            /**Returns  the intersection symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth IntersectionSymbolWidth
            (
            );
            /**Sets  the intersection symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetIntersectionSymbolWidth
            (
                NXOpen::Annotations::LineWidth intersectionSymbolWidth /** intersectionsymbolwidth */ 
            );
            /**Returns  the target symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * TargetSymbolColor
            (
            );
            /**Sets  the target symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTargetSymbolColor
            (
                NXOpen::NXColor * targetSymbolColor /** targetsymbolcolor */ 
            );
            /**Returns  the target symbol font  <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont TargetSymbolFont
            (
            );
            /**Sets  the target symbol font  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTargetSymbolFont
            (
                NXOpen::DisplayableObject::ObjectFont targetSymbolFont /** targetsymbolfont */ 
            );
            /**Returns  the target symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth TargetSymbolWidth
            (
            );
            /**Sets  the target symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetTargetSymbolWidth
            (
                NXOpen::Annotations::LineWidth targetSymbolWidth /** targetsymbolwidth */ 
            );
            /**Returns  the GD and T symbol color  <br> License requirements : None */
            public: NXOpen::NXColor * GdtSymbolColor
            (
            );
            /**Sets  the GD and T symbol color  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGdtSymbolColor
            (
                NXOpen::NXColor * gdtSymbolColor /** gdtsymbolcolor */ 
            );
            /**Returns  the GD and T symbol font  <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont GdtSymbolFont
            (
            );
            /**Sets  the GD and T symbol font  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGdtSymbolFont
            (
                NXOpen::DisplayableObject::ObjectFont gdtSymbolFont /** gdtsymbolfont */ 
            );
            /**Returns  the GD and T symbol width  <br> License requirements : None */
            public: NXOpen::Annotations::LineWidth GdtSymbolWidth
            (
            );
            /**Sets  the GD and T symbol width  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetGdtSymbolWidth
            (
                NXOpen::Annotations::LineWidth gdtSymbolWidth /** gdtsymbolwidth */ 
            );
            /**Returns  the gap between the weld line and weld type symbol  <br> License requirements : None */
            public: double WeldLineGap
            (
            );
            /**Sets  the gap between the weld line and weld type symbol  <br> License requirements : drafting ("DRAFTING") */
            public: void SetWeldLineGap
            (
                double gap /** gap */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
