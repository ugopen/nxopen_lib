#ifndef NXOpen_CAM_SIMULATIONOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_SIMULATIONOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_SimulationOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_SimulationOptionsBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class SimulationOptionsBuilder;
    }
    class Builder;
    class NXColor;
    namespace CAM
    {
        class _SimulationOptionsBuilderBuilder;
        /**
            Represents a @link CAM::SimulationOptionsBuilder CAM::SimulationOptionsBuilder@endlink 
             <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT SimulationOptionsBuilder : public Builder
        {
            /** the enable value */
            public: enum Enable
            {
                EnableNo/** no*/,
                EnableYes/** yes*/
            };

            /** The stationary options */
            public: enum Stationary
            {
                StationaryEarth/** use earth stationary*/,
                StationaryPart/** use part stationary*/,
                StationaryTool/** use tool stationary*/
            };

            /** The ipw resolution options */
            public: enum Resolution
            {
                ResolutionFast/** use fast resolution*/,
                ResolutionNormal/** use normal resolution*/,
                ResolutionFine/** use fine resolution*/,
                ResolutionExtraFine/** use extra fine resolution*/
            };

            /** The ipw animation accuracy options */
            public: enum Accuracy
            {
                AccuracyFine/** use fine accuracy*/,
                AccuracyCoarse/** use coarse accuracy*/
            };

            /** The display axes coordinates */
            public: enum Axes
            {
                AxesToolAbc/** display tool abc coordinates*/,
                AxesToolIjk/** display tool ijk coordinates*/,
                AxesMachine/** display machine coordinates*/
            };

            private: friend class  _SimulationOptionsBuilderBuilder;
            protected: SimulationOptionsBuilder();
            /**Returns  the enable display  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Enable EnableDisplay
            (
            );
            /**Sets  the enable display  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnableDisplay
            (
                NXOpen::CAM::SimulationOptionsBuilder::Enable enableValue /** enablevalue */ 
            );
            /**Returns  the display stationary  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Stationary DisplayStationary
            (
            );
            /**Sets  the display stationary  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayStationary
            (
                NXOpen::CAM::SimulationOptionsBuilder::Stationary displayStationary /** displaystationary */ 
            );
            /**Returns  the history buffer  <br> License requirements : None */
            public: int HistoryBuffer
            (
            );
            /**Sets  the history buffer  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetHistoryBuffer
            (
                int historyBuffer /** historybuffer */ 
            );
            /**Returns  the stop on history buffer  <br> License requirements : None */
            public: bool StopOnHistoryBuffer
            (
            );
            /**Sets  the stop on history buffer  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopOnHistoryBuffer
            (
                bool stopOnHistoryBuffer /** stoponhistorybuffer */ 
            );
            /**Returns  the enable collision  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Enable EnableCollision
            (
            );
            /**Sets  the enable collision  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnableCollision
            (
                NXOpen::CAM::SimulationOptionsBuilder::Enable enableValue /** enablevalue */ 
            );
            /**Returns  the enable ipw  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Enable EnableIpw
            (
            );
            /**Sets  the enable ipw  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEnableIpw
            (
                NXOpen::CAM::SimulationOptionsBuilder::Enable enableValue /** enablevalue */ 
            );
            /**Returns  the ipw resolution  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Resolution IpwResolution
            (
            );
            /**Sets  the ipw resolution  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwResolution
            (
                NXOpen::CAM::SimulationOptionsBuilder::Resolution ipwResolution /** ipwresolution */ 
            );
            /**Returns  the animation accuracy  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Accuracy AnimationAccuracy
            (
            );
            /**Sets  the animation accuracy  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAnimationAccuracy
            (
                NXOpen::CAM::SimulationOptionsBuilder::Accuracy animationAccuracy /** animationaccuracy */ 
            );
            /**Returns  the ipw color  <br> License requirements : None */
            public: NXOpen::NXColor * IpwColor
            (
            );
            /**Sets  the ipw color  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwColor
            (
                NXOpen::NXColor * ipwColor /** ipwcolor */ 
            );
            /**Returns  the translucency value  <br> License requirements : None */
            public: int TranslucencyValue
            (
            );
            /**Sets  the translucency value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTranslucencyValue
            (
                int translucencyValue /** translucencyvalue */ 
            );
            /**Returns  the save as partfile  <br> License requirements : None */
            public: bool SaveAsPartfile
            (
            );
            /**Sets  the save as partfile  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSaveAsPartfile
            (
                bool saveAsComp /** saveascomp */ 
            );
            /**Returns  the check for tool holder collision  <br> License requirements : None */
            public: bool CheckToolHolder
            (
            );
            /**Sets  the check for tool holder collision  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckToolHolder
            (
                bool checkToolHolder /** checktoolholder */ 
            );
            /**Returns  the max length incr  <br> License requirements : None */
            public: double MaxLengthIncr
            (
            );
            /**Sets  the max length incr  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaxLengthIncr
            (
                double maxLengthIncr /** maxlengthincr */ 
            );
            /**Returns  the max angular incr  <br> License requirements : None */
            public: double MaxAngularIncr
            (
            );
            /**Sets  the max angular incr  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaxAngularIncr
            (
                double maxAngularIncr /** maxangularincr */ 
            );
            /**Returns  the display by time  <br> License requirements : None */
            public: bool DisplayByTime
            (
            );
            /**Sets  the display by time  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayByTime
            (
                bool displayByTime /** displaybytime */ 
            );
            /**Returns  the max time incr  <br> License requirements : None */
            public: double MaxTimeIncr
            (
            );
            /**Sets  the max time incr  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaxTimeIncr
            (
                double maxTimeIncr /** maxtimeincr */ 
            );
            /**Returns  the display axes  <br> License requirements : None */
            public: NXOpen::CAM::SimulationOptionsBuilder::Axes DisplayAxes
            (
            );
            /**Sets  the display axes  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayAxes
            (
                NXOpen::CAM::SimulationOptionsBuilder::Axes displayAxes /** displayaxes */ 
            );
            /**Returns  the chordal tolerance  <br> License requirements : None */
            public: double ChordalTolerance
            (
            );
            /**Sets  the chordal tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetChordalTolerance
            (
                double chordalTolerance /** chordaltolerance */ 
            );
            /**Returns  the write message  <br> License requirements : None */
            public: bool WriteMessage
            (
            );
            /**Sets  the write message  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWriteMessage
            (
                bool writeMessage /** writemessage */ 
            );
            /**Returns  the stop on collision  <br> License requirements : None */
            public: bool StopOnCollision
            (
            );
            /**Sets  the stop on collision  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopOnCollision
            (
                bool stopOnCollision /** stoponcollision */ 
            );
            /**Returns  the stop on limit violation  <br> License requirements : None */
            public: bool StopOnLimitViolation
            (
            );
            /**Sets  the stop on limit violation  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStopOnLimitViolation
            (
                bool stopOnLimitViolation /** stoponlimitviolation */ 
            );
            /**Returns  the cache nc program  <br> License requirements : None */
            public: bool CacheNcProgram
            (
            );
            /**Sets  the cache nc program  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCacheNcProgram
            (
                bool cacheNcProgram /** cachencprogram */ 
            );
            /**Returns  the interpret G41/42 as contact contour  <br> License requirements : None */
            public: bool InterpretContactContour
            (
            );
            /**Sets  the interpret G41/42 as contact contour  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInterpretContactContour
            (
                bool interpretContactContour /** interpretcontactcontour */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
