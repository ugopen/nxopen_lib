#ifndef NXOpen_CAM_MILLORIENTGEOMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_MILLORIENTGEOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MillOrientGeomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OrientGeomBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class MillOrientGeomBuilder;
    }
    namespace CAM
    {
        class NcmAvoidancePointBuilder;
    }
    namespace CAM
    {
        class NcmClearanceBuilder;
    }
    namespace CAM
    {
        class OrientGeomBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _MillOrientGeomBuilderBuilder;
        /** Represents a MillOrientGeom Builder  <br> To create a new instance of this class, use @link CAM::NCGroupCollection::CreateMillOrientGeomBuilder CAM::NCGroupCollection::CreateMillOrientGeomBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MillOrientGeomBuilder : public CAM::OrientGeomBuilder
        {
            /** The lower limit mode options */
            public: enum LowerLimitModes
            {
                LowerLimitModesNone/** lower limit mode: None */,
                LowerLimitModesPlane/** lower limit mode: Plane */
            };

            private: friend class  _MillOrientGeomBuilderBuilder;
            protected: MillOrientGeomBuilder();
            /**Returns  the clearance builder (inheritable tool dep)  <br> License requirements : None */
            public: NXOpen::CAM::NcmClearanceBuilder * TransferClearanceBuilder
            (
            );
            /**Returns  the from point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceFromBuilder
            (
            );
            /**Returns  the start point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceStartBuilder
            (
            );
            /**Returns  the return point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceReturnBuilder
            (
            );
            /**Returns  the gohome point builder  <br> License requirements : None */
            public: NXOpen::CAM::NcmAvoidancePointBuilder * TransferAvoidanceGohomeBuilder
            (
            );
            /** the lower limit mode  @return  the lower limit mode  <br> License requirements : None */
            public: NXOpen::CAM::MillOrientGeomBuilder::LowerLimitModes GetLowerLimitMode
            (
            );
            public: void SetLowerLimitMode
            (
                NXOpen::CAM::MillOrientGeomBuilder::LowerLimitModes lowerLimitMode /** the lower limit mode */
            );
            /**Returns  the lower limit plane  <br> License requirements : None */
            public: NXOpen::NXObject * LowerLimitPlane
            (
            );
            /**Sets  the lower limit plane  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLowerLimitPlane
            (
                NXOpen::NXObject * lowerLimitPlane /** the lower limit plane */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
