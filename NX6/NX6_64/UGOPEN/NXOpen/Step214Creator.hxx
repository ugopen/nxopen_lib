#ifndef NXOpen_STEP214CREATOR_HXX_INCLUDED
#define NXOpen_STEP214CREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Step214Creator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectSelector.hxx>
#include <NXOpen/ObjectTypeSelector.hxx>
#include <NXOpen/Step214Creator.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Step214Creator;
    class Builder;
    class ObjectSelector;
    class ObjectTypeSelector;
    class _Step214CreatorBuilder;
    /**
        Represents a @link Step214Creator Step214Creator@endlink  to be used when exporting the STEP214 Data
        This class is created using @link DexManager DexManager@endlink .  <br> To create a new instance of this class, use @link DexManager::CreateStep214Creator DexManager::CreateStep214Creator@endlink  <br> 
    Default values:
    BsplineTol: 0.0254
    EntityNames: LongName
    ExportExtRef: 0
    ExportExtRefAs: Step
    ExportFrom: DisplayPart
    ValidationProperties: 0
    */
    class NXOPENCPPEXPORT Step214Creator : public Builder
    {
        /** Create the builder */
        public: enum ExportFromOption
        {
            ExportFromOptionDisplayPart/**  export data from displayed part */,
            ExportFromOptionExistingPart/**  export data from existing part which is on disk */
        };


        public: enum EntityNameOption
        {
            EntityNameOptionLongName/** create long names */,
            EntityNameOptionShortName/** create short names */
        };


        public: enum ExternalReferenceOption
        {
            ExternalReferenceOptionStep/** output external reference as STEP file */,
            ExternalReferenceOptionNx/** output external reference as NX file */
        };

        private: friend class  _Step214CreatorBuilder;
        protected: Step214Creator();
        /** The set user credentials - this will set user name, password and group in NX Manager mode <br> License requirements : None */
        public: void SetUserCredential
        (
            const NXString & user /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & passwd /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & group /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** The save settings - this will save the settings to a file sepcified  <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the export from - this option will determine if data from display part or existing part is exported  <br> License requirements : None */
        public: NXOpen::Step214Creator::ExportFromOption ExportFrom
        (
        );
        /**Sets  the export from - this option will determine if data from display part or existing part is exported  <br> License requirements : None */
        public: void SetExportFrom
        (
            NXOpen::Step214Creator::ExportFromOption exportFrom /** exportfrom */ 
        );
        /**Returns  the input file  - name of file which is being exported. <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file  - name of file which is being exported. <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the output file - the name of step file where output is being written  <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - the name of step file where output is being written  <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  Settings File to read the default settings   <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  Settings File to read the default settings   <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Returns  the export selection block - the object selection will be done by this block.  <br> License requirements : None */
        public: NXOpen::ObjectSelector * ExportSelectionBlock
        (
        );
        /**Returns  the objectTypes - this is subcomponent being used to set object types filters. This
                    will be used to filter objects based on the types  <br> License requirements : None */
        public: NXOpen::ObjectTypeSelector * ObjectTypes
        (
        );
        /**Returns  the layerMask - comma spearate list of enabled layers  <br> License requirements : None */
        public: NXString LayerMask
        (
        );
        /**Sets  the layerMask - comma spearate list of enabled layers  <br> License requirements : None */
        public: void SetLayerMask
        (
            const NXString & layerMask /** layermask */ 
        );
        /**Returns  the entity names types long or short <br> License requirements : None */
        public: NXOpen::Step214Creator::EntityNameOption EntityNames
        (
        );
        /**Sets  the entity names types long or short <br> License requirements : None */
        public: void SetEntityNames
        (
            NXOpen::Step214Creator::EntityNameOption entityNames /** entitynames */ 
        );
        /**Returns  the validation properties - if set to true validation properties will be created <br> License requirements : None */
        public: bool ValidationProperties
        (
        );
        /**Sets  the validation properties - if set to true validation properties will be created <br> License requirements : None */
        public: void SetValidationProperties
        (
            bool validationProperties /** validationproperties */ 
        );
        /**Returns  the export ext ref - if set to true NX data can be output as external reference  <br> License requirements : None */
        public: bool ExportExtRef
        (
        );
        /**Sets  the export ext ref - if set to true NX data can be output as external reference  <br> License requirements : None */
        public: void SetExportExtRef
        (
            bool exportExtRef /** exportextref */ 
        );
        /**Returns  the export ext ref as - specifiy the external reference type  <br> License requirements : None */
        public: NXOpen::Step214Creator::ExternalReferenceOption ExportExtRefAs
        (
        );
        /**Sets  the export ext ref as - specifiy the external reference type  <br> License requirements : None */
        public: void SetExportExtRefAs
        (
            NXOpen::Step214Creator::ExternalReferenceOption exportExtRefAs /** exportextrefas */ 
        );
        /**Returns  the bspline tolerance  <br> License requirements : None */
        public: double BsplineTol
        (
        );
        /**Sets  the bspline tolerance  <br> License requirements : None */
        public: void SetBsplineTol
        (
            double bsplineTol /** bsplinetol */ 
        );
        /**Returns  the author  <br> License requirements : None */
        public: NXString Author
        (
        );
        /**Sets  the author  <br> License requirements : None */
        public: void SetAuthor
        (
            const NXString & author /** author */ 
        );
        /**Returns  the company  <br> License requirements : None */
        public: NXString Company
        (
        );
        /**Sets  the company  <br> License requirements : None */
        public: void SetCompany
        (
            const NXString & company /** company */ 
        );
        /**Returns  the authorization  <br> License requirements : None */
        public: NXString Authorization
        (
        );
        /**Sets  the authorization  <br> License requirements : None */
        public: void SetAuthorization
        (
            const NXString & authorization /** authorization */ 
        );
        /**Returns  the description  <br> License requirements : None */
        public: NXString Description
        (
        );
        /**Sets  the description  <br> License requirements : None */
        public: void SetDescription
        (
            const NXString & description /** description */ 
        );
        /**Returns  the file save flag - set to false if doing file export <br> License requirements : None */
        public: bool FileSaveFlag
        (
        );
        /**Sets  the file save flag - set to false if doing file export <br> License requirements : None */
        public: void SetFileSaveFlag
        (
            bool doingFileSave /** doingfilesave */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
