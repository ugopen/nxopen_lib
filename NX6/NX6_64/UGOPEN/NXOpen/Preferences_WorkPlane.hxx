#ifndef NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
#define NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_WorkPlane.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class WorkPlane;
    }
    class NXObject;
    namespace Preferences
    {
        class _WorkPlaneBuilder;
        /** Represents the set of WorkPlanePreferences preferences applicable to part. Sets parameters for the 
        Graphics Window grid and the Work Plane Emphasis mode.  <br> An instance of this class can be obtained using @link Preferences::SessionPreferences::WorkPlane Preferences::SessionPreferences::WorkPlane@endlink 
              or @link Preferences::PartPreferences::Workplane Preferences::PartPreferences::Workplane@endlink  <br> */
        class NXOPENCPPEXPORT WorkPlane : public NXObject
        {
            /** Describes whether the Grid type selected is Polar or Rectangular */
            public: enum Grid
            {
                GridPolar/** Polar Grid */,
                GridRectangular/** Rectangular Grid */
            };

             /** Grid size parameters */
            public:
            struct GridSize
            {
                public: /** Distance between major grid lines */double MajorGridSpacing;
                public: /** Number of minor lines between major grid lines */int MinorLinesPerMajor;
                public: /** Number of snap points between minor grid lines */int SnapPointsPerMinor;
                public: GridSize() :
                    MajorGridSpacing(),
                    MinorLinesPerMajor(),
                    SnapPointsPerMinor()
                {
                }
                /** Constructor for the GridSize struct. */ 
                public: GridSize(double INIT_major_grid_spacing /** Distance between major grid lines */, 
                        int INIT_minor_lines_per_major /** Number of minor lines between major grid lines */, 
                        int INIT_snap_points_per_minor /** Number of snap points between minor grid lines */) :
                    MajorGridSpacing(INIT_major_grid_spacing),
                    MinorLinesPerMajor(INIT_minor_lines_per_major),
                    SnapPointsPerMinor(INIT_snap_points_per_minor)
                {
                }
            };

             /** Nonuniform grid size parameters */
            public:
            struct NonuniformGridSize
            {
                public: /** XC axis grid parameters */NXOpen::Preferences::WorkPlane::GridSize XcGridSize;
                public: /** YC axis grid parameters */NXOpen::Preferences::WorkPlane::GridSize YcGridSize;
                public: NonuniformGridSize() :
                    XcGridSize(),
                    YcGridSize()
                {
                }
                /** Constructor for the NonuniformGridSize struct. */ 
                public: NonuniformGridSize(NXOpen::Preferences::WorkPlane::GridSize INIT_xc_grid_size /** XC axis grid parameters */, 
                        NXOpen::Preferences::WorkPlane::GridSize INIT_yc_grid_size /** YC axis grid parameters */) :
                    XcGridSize(INIT_xc_grid_size),
                    YcGridSize(INIT_yc_grid_size)
                {
                }
            };

             /** Polar grid size parameters */
            public:
            struct PolarGridSize
            {
                public: /** Radial grid circle parameters */NXOpen::Preferences::WorkPlane::GridSize RadialGridSize;
                public: /** Angular grid line parameters*/NXOpen::Preferences::WorkPlane::GridSize AngularGridSize;
                public: PolarGridSize() :
                    RadialGridSize(),
                    AngularGridSize()
                {
                }
                /** Constructor for the PolarGridSize struct. */ 
                public: PolarGridSize(NXOpen::Preferences::WorkPlane::GridSize INIT_radial_grid_size /** Radial grid circle parameters */, 
                        NXOpen::Preferences::WorkPlane::GridSize INIT_angular_grid_size /** Angular grid line parameters*/) :
                    RadialGridSize(INIT_radial_grid_size),
                    AngularGridSize(INIT_angular_grid_size)
                {
                }
            };

            private: friend class  _WorkPlaneBuilder;
            protected: WorkPlane();
            /**Returns  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides   <br> License requirements : None */
            public: bool ShowGrid
            (
            );
            /**Sets  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides   <br> License requirements : None */
            public: void SetShowGrid
            (
                bool showGrid /** show grid */ 
            );
            /**Returns  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides   <br> License requirements : None */
            public: bool ShowLabels
            (
            );
            /**Sets  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides   <br> License requirements : None */
            public: void SetShowLabels
            (
                bool showLabels /** show labels */ 
            );
            /**Returns  the grid on top flag. If true displays the grid on top of other graphics in the scene.   <br> License requirements : None */
            public: bool GridOnTop
            (
            );
            /**Sets  the grid on top flag. If true displays the grid on top of other graphics in the scene.   <br> License requirements : None */
            public: void SetGridOnTop
            (
                bool gridOnTop /** grid on top */ 
            );
            /**Returns  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off.  <br> License requirements : None */
            public: bool SnapToGrid
            (
            );
            /**Sets  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off.  <br> License requirements : None */
            public: void SetSnapToGrid
            (
                bool snapToGrid /** snap to grid */ 
            );
            /**Returns  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y.  <br> License requirements : None */
            public: bool GridIsNonUniform
            (
            );
            /**Sets  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y.  <br> License requirements : None */
            public: void SetGridIsNonUniform
            (
                bool gridIsNonUniform /** grid is non uniform */ 
            );
            /**Returns  the show major lines flag for rectangular grid    <br> License requirements : None */
            public: bool RectangularShowMajorLines
            (
            );
            /**Sets  the show major lines flag for rectangular grid    <br> License requirements : None */
            public: void SetRectangularShowMajorLines
            (
                bool rectangularShowMajorLines /** rectangular show major lines */ 
            );
            /**Returns  the show major lines flag for polar grid    <br> License requirements : None */
            public: bool PolarShowMajorLines
            (
            );
            /**Sets  the show major lines flag for polar grid    <br> License requirements : None */
            public: void SetPolarShowMajorLines
            (
                bool polarShowMajorLines /** polar show major lines */ 
            );
            /**Returns  the emphasis flag for rectangular grid   
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: bool RectangularGridEmphasis
            (
            );
            /**Sets  the emphasis flag for rectangular grid   
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetRectangularGridEmphasis
            (
                bool rectangularGridEmphasis /** rectangular grid emphasis */ 
            );
            /**Returns  the emphasis flag for polar grid 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: bool PolarGridEmphasis
            (
            );
            /**Sets  the emphasis flag for polar grid 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetPolarGridEmphasis
            (
                bool isPolarGridEmphasisOn /** ispolargridemphasison */ 
            );
            /**Returns  the grid color. Specifies the color of grid.   <br> License requirements : None */
            public: int GridColor
            (
            );
            /**Sets  the grid color. Specifies the color of grid.   <br> License requirements : None */
            public: void SetGridColor
            (
                int gridColor /** grid color */ 
            );
            /**Returns  the grid type. It may be polar or rectangular   <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::Grid GridType
            (
            );
            /**Sets  the grid type. It may be polar or rectangular   <br> License requirements : None */
            public: void SetGridType
            (
                NXOpen::Preferences::WorkPlane::Grid gridType /** grid type */ 
            );
            /** Query the rectangular uniform grid size parameters.   @return   <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::GridSize GetRectangularUniformGridSize
            (
            );
            /**  Set the rectangular uniform grid size parameters.  <br> License requirements : None */
            public: void SetRectangularUniformGridSize
            (
                const NXOpen::Preferences::WorkPlane::GridSize & gridSize /** grid size */ 
            );
            /** Query the rectangular nonuniform grid size parameters.   @return   <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::NonuniformGridSize GetRectangularNonuniformGridSize
            (
            );
            /**  Set the rectangular nonuniform grid size parameters.  <br> License requirements : None */
            public: void SetRectangularNonuniformGridSize
            (
                const NXOpen::Preferences::WorkPlane::NonuniformGridSize & nonuniformGridSize /** nonuniform grid size */ 
            );
            /** Query the polar grid size parameters.  @return   <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::PolarGridSize GetPolarGridSize
            (
            );
            /**  Set the polar grid size parameters.  <br> License requirements : None */
            public: void SetPolarGridSize
            (
                const NXOpen::Preferences::WorkPlane::PolarGridSize & polarGridSize /** polar grid size */ 
            );
            /**Returns  the grid line XC spacing. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridLineEveryXcSpacing
            (
            );
            /**Sets  the grid line XC spacing. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridLineEveryXcSpacing
            (
                int gridLineEveryX /** grid line every x */ 
            );
            /**Returns  the grid line every YC spacing. Draws an emphasis line every n grid lines. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridLineEveryYcSpacing
            (
            );
            /**Sets  the grid line every YC spacing. Draws an emphasis line every n grid lines. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridLineEveryYcSpacing
            (
                int gridLineEveryY /** grid line every y */ 
            );
            /**Returns  the emphasis every XC spacing. Places an emphasis (solid) line every n lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridEmphasisEveryXcSpacing
            (
            );
            /**Sets  the emphasis every XC spacing. Places an emphasis (solid) line every n lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridEmphasisEveryXcSpacing
            (
                int gridEmphasisEveryX /** grid emphasis every x */ 
            );
            /**Returns  the grid unit XC spacing. Determines where the system draws grid lines.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: double GridUnitXcSpacing
            (
            );
            /**Sets  the grid unit XC spacing. Determines where the system draws grid lines.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridUnitXcSpacing
            (
                double gridUnitXcSpacing /** grid unit xc spacing */ 
            );
            /**Returns  the emphasis every YC spacing. Places an emphasis (solid) line every n lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridEmphasisEveryYcSpacing
            (
            );
            /**Sets  the emphasis every YC spacing. Places an emphasis (solid) line every n lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridEmphasisEveryYcSpacing
            (
                int gridEmphasisEveryY /** grid emphasis every y */ 
            );
            /**Returns  the grid unit YC spacing. Determines where the system draws grid lines. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: double GridUnitYcSpacing
            (
            );
            /**Sets  the grid unit YC spacing. Determines where the system draws grid lines. 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridUnitYcSpacing
            (
                double gridUnitYcSpacing /** grid unit yc spacing */ 
            );
            /**Returns  the grid unit radial spacing.This value is the number of inches or millimeters between 
                successive concentric circles of grid points that are centered at the WCS origin.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: double GridUnitRadialSpacing
            (
            );
            /**Sets  the grid unit radial spacing.This value is the number of inches or millimeters between 
                successive concentric circles of grid points that are centered at the WCS origin.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridUnitRadialSpacing
            (
                double gridUnitRadialSpacing /** grid unit radial spacing */ 
            );
            /**Returns  the grid unit angular spacing. This is the number of degrees between successive 
                rays of grid points that emanate from the WCS origin  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: double GridUnitAngularSpacing
            (
            );
            /**Sets  the grid unit angular spacing. This is the number of degrees between successive 
                rays of grid points that emanate from the WCS origin  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridUnitAngularSpacing
            (
                double gridUnitAngularSpacing /** grid unit angular spacing */ 
            );
            /**Returns  the grid emphasis every radial spacing  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridEmphasisRadialSpacing
            (
            );
            /**Sets  the grid emphasis every radial spacing  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridEmphasisRadialSpacing
            (
                int gridEmphasisRadialSpacing /** grid emphasis radial spacing */ 
            );
            /**Returns  the grid emphasis every angular spacing.  Draws an emphasis line every n grid lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridEmphasisAngularSpacing
            (
            );
            /**Sets  the grid emphasis every angular spacing.  Draws an emphasis line every n grid lines  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridEmphasisAngularSpacing
            (
                int gridEmphasisAngularSpacing /** grid emphasis angular spacing */ 
            );
            /**Returns  the grid line every radial spacing  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridLineEveryRadialSpacing
            (
            );
            /**Sets  the grid line every radial spacing  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridLineEveryRadialSpacing
            (
                int gridLineEveryRadialSpacing /** grid line every radial spacing */ 
            );
            /**Returns  the grid line every angular spacing.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int GridLineEveryAngularSpacing
            (
            );
            /**Sets  the grid line every angular spacing.  
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetGridLineEveryAngularSpacing
            (
                int gridLineEveryAngularSpacing /** grid line every angular spacing */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
