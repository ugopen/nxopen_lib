#ifndef NXOpen_CAM_TOOLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ParamBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ToolBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class ParamBuilder;
    }
    namespace CAM
    {
        class _ToolBuilderBuilder;
        /** Represents a Tool Builder  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT ToolBuilder : public CAM::ParamBuilder
        {
            private: friend class  _ToolBuilderBuilder;
            protected: ToolBuilder();
            /**Returns  the Tool Number   <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlNumberBuilder
            (
            );
            /**Returns  the Manual Tool Change   <br> License requirements : None */
            public: bool TlManualToolChange
            (
            );
            /**Sets  the Manual Tool Change   <br> License requirements : None */
            public: void SetTlManualToolChange
            (
                bool tlManualToolChangeValue /**  the manual tool change value */
            );
            /**Returns  the Holder Number   <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlHolderNumberBuilder
            (
            );
            /**Returns  the Catalog Number   <br> License requirements : None */
            public: NXString TlCtlgNum
            (
            );
            /**Sets  the Catalog Number   <br> License requirements : None */
            public: void SetTlCtlgNum
            (
                const NXString & tlCtlgNumValue /**  the catalog number value */
            );
            /**Returns  the Cutter  Description   <br> License requirements : None */
            public: NXString TlDescription
            (
            );
            /**Sets  the Cutter  Description   <br> License requirements : None */
            public: void SetTlDescription
            (
                const NXString & tlDescriptionValue /**  the cutter  description  value */
            );
            /**Returns  the tool text   <br> License requirements : None */
            public: NXString TlText
            (
            );
            /**Sets  the tool text   <br> License requirements : None */
            public: void SetTlText
            (
                const NXString & tlText /**  the tool text value */
            );
            /**Returns  the Cutter  Libref   <br> License requirements : None */
            public: NXString TlLibref
            (
            );
            /**Sets  the Cutter  Libref   <br> License requirements : None */
            public: void SetTlLibref
            (
                const NXString & tlLibRef /**  the cutter libref  value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
