#ifndef NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CorrelSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CorrelSolutionBuilder.hxx>
#include <NXOpen/CAE_CorrelBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CorrelSolutionBuilder;
    }
    namespace CAE
    {
        class CorrelBaseBuilder;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _CorrelSolutionBuilderBuilder;
        /** This is a manager to the @link CAE::CorrelSolution CAE::CorrelSolution@endlink  class. 
            Object of type @link CAE::CorrelSolution CAE::CorrelSolution@endlink  can be 
            created and edited only through this class
             <br> To create a new instance of this class, use @link CAE::CorrelSolutionCollection::CreateSolutionBuilder CAE::CorrelSolutionCollection::CreateSolutionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT CorrelSolutionBuilder : public CAE::CorrelBaseBuilder
        {
            /** The damping type enum */
            public: enum EnumDampingFrftype
            {
                EnumDampingFrftypeFromWorkModel/** from work model */,
                EnumDampingFrftypeSpecifyDamping/** from user input */
            };

            /** The pair matching option enum */
            public: enum EnumMatchingOptionType
            {
                EnumMatchingOptionTypeStrictNodeToNode/** node to node matching */,
                EnumMatchingOptionTypeFloatingInterpolation/** interpolation matching */
            };

            private: friend class  _CorrelSolutionBuilderBuilder;
            protected: CorrelSolutionBuilder();
            /**Returns  the correlation metasolution name  <br> License requirements : None */
            public: NXString MyCorrelName
            (
            );
            /**Sets  the correlation metasolution name  <br> License requirements : None */
            public: void SetMyCorrelName
            (
                const NXString & myCorrelName /** mycorrelname */ 
            );
            /**Returns  the work (analysis) solution of correlation  <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * MyWorkSolution
            (
            );
            /**Sets  the work (analysis) solution of correlation  <br> License requirements : None */
            public: void SetMyWorkSolution
            (
                NXOpen::CAE::SimSolution * tWorkSol /** tworksol */ 
            );
            /**Returns  the ref (test) solution of correlation  <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * MyRefSolution
            (
            );
            /**Sets  the ref (test) solution of correlation  <br> License requirements : None */
            public: void SetMyRefSolution
            (
                NXOpen::CAE::SimSolution * tRefSol /** trefsol */ 
            );
            /**Returns  the my enum damping frf  <br> License requirements : None */
            public: NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype MyEnumDampingFrf
            (
            );
            /**Sets  the my enum damping frf  <br> License requirements : None */
            public: void SetMyEnumDampingFrf
            (
                NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype myEnumDampingFRF /** myenumdampingfrf */ 
            );
            /**Returns  the my enum matching option  <br> License requirements : None */
            public: NXOpen::CAE::CorrelSolutionBuilder::EnumMatchingOptionType MyEnumMatchingOption
            (
            );
            /**Sets  the my enum matching option  <br> License requirements : None */
            public: void SetMyEnumMatchingOption
            (
                NXOpen::CAE::CorrelSolutionBuilder::EnumMatchingOptionType myEnumMatchingOption /** myenummatchingoption */ 
            );
            /**Returns  the my dbl matching tolerance  <br> License requirements : None */
            public: double MyDblMatchingTolerance
            (
            );
            /**Sets  the my dbl matching tolerance  <br> License requirements : None */
            public: void SetMyDblMatchingTolerance
            (
                double myDblMatchingTolerance /** mydblmatchingtolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
