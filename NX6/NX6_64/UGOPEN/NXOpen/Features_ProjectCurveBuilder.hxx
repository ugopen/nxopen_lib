#ifndef NXOpen_FEATURES_PROJECTCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PROJECTCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ProjectCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ProjectCurveBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitJoin.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitJoin;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    class Plane;
    class Point;
    class Section;
    class SelectLine;
    class SelectObjectList;
    namespace Features
    {
        class _ProjectCurveBuilderBuilder;
        /**
            Represents a @link Features::ProjectCurve Features::ProjectCurve@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateProjectCurveBuilder Features::FeatureCollection::CreateProjectCurveBuilder@endlink  <br> 
        Default values:
        AngleToProjectionVector.RightHandSide: 0.0
        CurveFitJoinData.CurveFitOptions.FitOption: Cubic
        CurveFitJoinData.CurveFitOptions.MaximumDegree: 7
        CurveFitJoinData.CurveFitOptions.MaximumSegments: 1
        EqualArcLengthMethod: BothXY
        InputCurvesOption.Associative: True
        ProjectionDirectionMethod: AlongFaceNormal
        ProjectionOption: None
        */
        class NXOPENCPPEXPORT ProjectCurveBuilder : public Features::FeatureBuilder
        {
            /** Represents direction method */
            public: enum DirectionType
            {
                DirectionTypeAlongFaceNormal/** Represents Along Face Normal */,
                DirectionTypeTowardPoint/** Represents Towards Point */,
                DirectionTypeTowardLine/** Represents Towards Line */,
                DirectionTypeAlongVector/** Represents Along Vector */,
                DirectionTypeAngleToVector/** Represents Angle To Vector */
            };

            /** Represents projection option type used when direction type is along vector */
            public: enum ProjectionOptionType
            {
                ProjectionOptionTypeNone/** Represents None */,
                ProjectionOptionTypeProjectBothSides/** Represents Project Both Sides */,
                ProjectionOptionTypeEqualArcLength/** Represents Equal Arc Length */
            };

            /** Represents Equal Arc Length type */
            public: enum ArcLengthType
            {
                ArcLengthTypeBothXY/** Represents Both X and Y */,
                ArcLengthTypeFirstXThenY/** Represents First X then Y */,
                ArcLengthTypeFirstYThenX/** Represents First Y then X */,
                ArcLengthTypeXOnly/** Represents X only */,
                ArcLengthTypeYOnly/** Represents Y only */
            };

            private: friend class  _ProjectCurveBuilderBuilder;
            protected: ProjectCurveBuilder();
            /**Returns  the section to project  <br> License requirements : None */
            public: NXOpen::Section * SectionToProject
            (
            );
            /**Returns  the face to project to  <br> License requirements : None */
            public: NXOpen::SelectObjectList * FaceToProjectTo
            (
            );
            /**Returns  the plane to project to  <br> License requirements : None */
            public: NXOpen::Plane * PlaneToProjectTo
            (
            );
            /**Sets  the plane to project to  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlaneToProjectTo
            (
                NXOpen::Plane * projectedPlane /** projectedplane */ 
            );
            /**Returns  the projection direction method  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::DirectionType ProjectionDirectionMethod
            (
            );
            /**Sets  the projection direction method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirectionMethod
            (
                NXOpen::Features::ProjectCurveBuilder::DirectionType directionMethod /** directionmethod */ 
            );
            /**Returns  the point to project toward  <br> License requirements : None */
            public: NXOpen::Point * PointToProjectToward
            (
            );
            /**Sets  the point to project toward  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPointToProjectToward
            (
                NXOpen::Point * towardPoint /** towardpoint */ 
            );
            /**Returns  the reference point for equal arc length  <br> License requirements : None */
            public: NXOpen::Point * ReferencePointForEqualArcLength
            (
            );
            /**Sets  the reference point for equal arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferencePointForEqualArcLength
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the line to project toward  <br> License requirements : None */
            public: NXOpen::SelectLine * LineToProjectToward
            (
            );
            /**Returns  the projection vector  <br> License requirements : None */
            public: NXOpen::Direction * ProjectionVector
            (
            );
            /**Sets  the projection vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionVector
            (
                NXOpen::Direction * alongVector /** alongvector */ 
            );
            /**Returns  the projection option type  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::ProjectionOptionType ProjectionOption
            (
            );
            /**Sets  the projection option type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionOption
            (
                NXOpen::Features::ProjectCurveBuilder::ProjectionOptionType projectionOption /** projectionoption */ 
            );
            /**Returns  the angle to projection vector  <br> License requirements : None */
            public: NXOpen::Expression * AngleToProjectionVector
            (
            );
            /**Returns  the x vector for equal arc length  <br> License requirements : None */
            public: NXOpen::Direction * XVectorForEqualArcLength
            (
            );
            /**Sets  the x vector for equal arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetXVectorForEqualArcLength
            (
                NXOpen::Direction * xVector /** xvector */ 
            );
            /**Returns  the equal arc length method  <br> License requirements : None */
            public: NXOpen::Features::ProjectCurveBuilder::ArcLengthType EqualArcLengthMethod
            (
            );
            /**Sets  the equal arc length method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEqualArcLengthMethod
            (
                NXOpen::Features::ProjectCurveBuilder::ArcLengthType arcLengthMethod /** arclengthmethod */ 
            );
            /**Returns  the input curves option  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * InputCurvesOption
            (
            );
            /**Returns  the curve fit join method  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitJoin * CurveFitJoinData
            (
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
