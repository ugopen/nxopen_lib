#ifndef NXOpen_DRAWINGS_VIEWSTYLEGENERALBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEGENERALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleGeneralBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewScaleBuilder.hxx>
#include <NXOpen/Drawings_ViewStyleGeneralBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleGeneralBuilder;
    }
    namespace Drawings
    {
        class ViewScaleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class TaggedObject;
    namespace Drawings
    {
        class _ViewStyleGeneralBuilderBuilder;
        /** Represents the GENERAL tab on the View Style Dialog (Drawings.ViewStyleGeneralBuilder)
            */
        class NXOPENCPPEXPORT ViewStyleGeneralBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ViewStyleGeneralBuilderBuilder;
            protected: ViewStyleGeneralBuilder();
            /**Returns  the silhouettes toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Silhouettes
            (
            );
            /**Sets  the silhouettes toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetSilhouettes
            (
                bool silhouettesToggle /** Sets a new silhouettes toggle value on the general sub-builder */
            );
            /**Returns  the reference toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Reference
            (
            );
            /**Sets  the reference toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetReference
            (
                bool referenceToggle /** Sets a new reference toggle value on the general sub-builder */
            );
            /**Returns  the uvgrid toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool UVGrid
            (
            );
            /**Sets  the uvgrid toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetUVGrid
            (
                bool uVGridToggle /** Sets a new uv-grid toggle value on the general sub-builder */
            );
            /**Returns  the automatic update toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the automatic update toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdateToggle /** Sets a new automatic update toggle value on the general sub-builder */
            );
            /**Returns  the automatic anchor point toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool AutomaticAnchorPoint
            (
            );
            /**Sets  the automatic anchor point toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticAnchorPoint
            (
                bool automaticAnchorPointToggle /** Sets a new aautomatic anchor point toggle value on the general sub-builder */
            );
            /**Returns  the view label toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool ViewLabel
            (
            );
            /**Sets  the view label toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewLabel
            (
                bool viewLabelToggle /** Sets a new view label toggle value on the general sub-builder */
            );
            /**Returns  the scale label toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool ScaleLabel
            (
            );
            /**Sets  the scale label toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetScaleLabel
            (
                bool scaleLabelToggle /** Sets a new scale label toggle value on the general sub-builder */
            );
            /**Returns  the boundary status toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool BoundaryStatus
            (
            );
            /**Sets  the boundary status toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetBoundaryStatus
            (
                bool boundaryStatusToggle /** Sets a new boundary status toggle value on the general sub-builder */
            );
            /**Returns  the centerlines toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Centerlines
            (
            );
            /**Sets  the centerlines toggle on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenterlines
            (
                bool centerlinesToggle /** Sets a new centerlines toggle value on the general sub-builder */
            );
            /**Returns  the tolerance option on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Preferences::GeneralToleranceOption Tolerance
            (
            );
            /**Sets  the tolerance option on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                NXOpen::Preferences::GeneralToleranceOption toleranceOption /** Sets a new tolerance option on the general sub-builder */
            );
            /**Returns  the tolerance value on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: double ToleranceValue
            (
            );
            /**Sets  the tolerance value on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetToleranceValue
            (
                double toleranceValue /** Sets a new tolerance value on the general sub-builder */
            );
            /**Returns  the angle value on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: double AngleValue
            (
            );
            /**Sets  the angle value on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngleValue
            (
                double angleValue /** Sets a new angle value on the general sub-builder */
            );
            /**Returns  the scale definition on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Drawings::ViewScaleBuilder * Scale
            (
            );
            /** Gets the render sets on the GENERAL tab of the View Style Dialog  @return  Returns the render sets that are on the general sub-builder  <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetRenderSet
            (
            );
            /** Sets the render sets on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderSet
            (
                const std::vector<NXOpen::TaggedObject *> & renderSets /** Sets new render sets on the general sub-builder */
            );
            /**Returns  the extracted edges option on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Preferences::GeneralExtractedEdgesOption ExtractedEdges
            (
            );
            /**Sets  the extracted edges option on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetExtractedEdges
            (
                NXOpen::Preferences::GeneralExtractedEdgesOption extractedEdgesOption /** Sets a new extracted edges option on the general sub-builder */
            );
            /**Returns  the wireframe color source option on the GENERAL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Preferences::GeneralWireframeColorSourceOption WireframeColorSource
            (
            );
            /**Sets  the wireframe color source option on the GENERAL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetWireframeColorSource
            (
                NXOpen::Preferences::GeneralWireframeColorSourceOption wireframeColorSourceOption /** Sets a new wireframe color source option on the general sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
