#ifndef NXOpen_FEATURES_CURVELENGTHBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CURVELENGTHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CurveLengthBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveLengthData;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    class Section;
    namespace Features
    {
        /** Represents the input original curve method */
        enum OriginalCurve
        {
            OriginalCurveRetain/** Original Curve Retain */,
            OriginalCurveBlank/** Original Curve Blank */,
            OriginalCurveDelete/** Original Curve Delete */,
            OriginalCurveReplace/** Original Curve Replace */
        };

    }
    namespace Features
    {
        class _CurveLengthBuilderBuilder;
        /** Represents the CurveLength builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCurvelengthBuilder Features::FeatureCollection::CreateCurvelengthBuilder@endlink  <br> 
        Default values:
        CurveOptions.Associative: True
        */
        class NXOPENCPPEXPORT CurveLengthBuilder : public Features::FeatureBuilder
        {
            private: friend class  _CurveLengthBuilderBuilder;
            protected: CurveLengthBuilder();
            /**Sets  the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSection
            (
                NXOpen::Section * section /** Section object This parameter may not be NULL.*/
            );
            /**Returns  the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * Section
            (
            );
            /**Sets  the original curve option
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOriginalCurveOption
            (
                NXOpen::Features::OriginalCurve originalCurve /** CurveLength original curve option */
            );
            /**Returns  the original curve option
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OriginalCurve OriginalCurveOption
            (
            );
            /**Sets  the associativity
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativity
            (
                bool associativity /** CurveLength associativity */
            );
            /**Returns  the associativity
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool Associativity
            (
            );
            /**Sets  the distance tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** CurveLength chaining tolerance */
            );
            /**Returns  the distance tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double DistanceTolerance
            (
            );
            /**Returns  the curvelength data
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::CurveLengthData * CurvelengthData
            (
            );
            /**Returns  the CurveOptions
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::CurveOptions * CurveOptions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
