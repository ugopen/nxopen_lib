/*****************************************************************************
**
** [!output PROJECT_NAME].[!if C_LANGUAGE]c
[!else]cpp
[!endif]
**
** Description:
[!if DLL_APPLICATION]
**     Contains Unigraphics entry points for the application.
[!else]
**    Main file for the application.
[!endif]
**
*****************************************************************************/

/* Include files */
#include <stdarg.h>
[!if C_LANGUAGE]
#include <stdio.h>
[!else]
#include <strstream>
#include <iostream>
using std::ostrstream;
using std::endl;    
using std::ends;
using std::cerr;
[!endif]
#include <uf.h>
#include <uf_ui_types.h>
[!if OPENPP_CALLS]
#include <ug_session.hxx>
#include <ug_exception.hxx>
[!endif]
[!if DLL_APPLICATION]
#include <uf_ui.h>
[!if CXX_LANGUAGE]
#include <uf_exit.h>
[!if OPENPP_CALLS]
#include <ug_info_window.hxx>
[!endif]
[!endif]
[!endif]

[!if OPENPP_CALLS]
static void processException( const UgException &exception );
[!else]
static void ECHO(char *format, ...)
{
    char msg[UF_UI_MAX_STRING_BUFSIZE];
    va_list args;
    va_start(args, format);
    vsnprintf_s(msg, sizeof(msg), _TRUNCATE, format, args);
    va_end(args);
[!if DLL_APPLICATION]
    UF_UI_open_listing_window();
    UF_UI_write_listing_window(msg);
[!else]
    printf(msg);
[!endif]
    UF_print_syslog(msg, FALSE);
}

#define UF_CALL(X) (report_error( __FILE__, __LINE__, #X, (X)))

static int report_error( char *file, int line, char *call, int irc)
{
    if (irc)
    {
        char err[133];

        UF_get_fail_message(irc, err);
        ECHO("*** ERROR code %d at line %d in %s:\n",
            irc, line, file);
        ECHO("+++ %s\n", err);
        ECHO("%s;\n", call);
    }

    return(irc);
}
[!endif]

[!if EXE_APPLICATION]
/* Main routine */
extern void main( char argc, char *argv[] )
[!output BODY_TEMPLATE][!else]

/*****************************************************************************
**  Activation Methods
*****************************************************************************/
[!output ENTRY_POINTS_TEMPLATE][!endif]
/*****************************************************************************
**  Utilities
*****************************************************************************/
[!if DLL_APPLICATION]

/* Unload Handler
**     This function specifies when to unload your application from Unigraphics.
**     If your application registers a callback (from a MenuScript item or a
**     User Defined Object for example), this function MUST return
**     "UF_UNLOAD_UG_TERMINATE". */
extern int ufusr_ask_unload( void )
{
    return( [!output UF_UNLOAD_OPTION] );
}
[!endif]

[!if OPENPP_CALLS]
/* processException
[!if DLL_APPLICATION]
       Prints error messages to standard error and a Unigraphics
       information window. */
[!else]
       Prints error messages to standard error. */
[!endif]
static void processException( const UgException &exception )
{
    /* Construct a buffer to hold the text. */
    ostrstream error_message;

    /* Initialize the buffer with the required text. */
    error_message << endl
                  << "Error:" << endl
                  << ( exception.askErrorText() ).c_str()
                  << endl << endl << ends;

[!if DLL_APPLICATION]
    /* Open the UgInfoWindow */
    UgInfoWindow::open ( );

    /* Write the message to the UgInfoWindow.  The str method */
    /* freezes the buffer, so it must be unfrozen afterwards. */
    UgInfoWindow::write( error_message.str() );

[!endif]
    /* Write the message to standard error */
    cerr << error_message.str();
    error_message.rdbuf()->freeze( 0 );
}
[!endif]
