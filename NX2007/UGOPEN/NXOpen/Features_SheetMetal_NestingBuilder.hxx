#ifndef NXOpen_FEATURES_SHEETMETAL_NESTINGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_NESTINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_NestingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/NestedSolution.hxx>
#include <NXOpen/NestingPart.hxx>
#include <NXOpen/NestingSettings.hxx>
#include <NXOpen/NestingStock.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class NestingBuilder;
        }
    }
    class Builder;
    class NestedSolution;
    class NestingPart;
    class NestingSettings;
    class NestingStock;
    namespace Features
    {
        namespace SheetMetal
        {
            class _NestingBuilderBuilder;
            class NestingBuilderImpl;

            /// \cond NX_NO_DOC 
            /** Represents a sheet metal nesting builder class.  <br> To create a new instance of this class, use @link NXOpen::Features::SheetMetal::SheetmetalManager::CreateNestingBuilder  NXOpen::Features::SheetMetal::SheetmetalManager::CreateNestingBuilder @endlink  <br> 
             <br>  Created in NX2007.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  NestingBuilder : public NXOpen::Builder
            {
                /** This enum defines the nest directions. */

                /// \cond NX_NO_DOC 
                public: enum InputFileLoadStatus
                {
                    InputFileLoadStatusSuccess/** success */ ,
                    InputFileLoadStatusInvalidFile/** invalid file */ ,
                    InputFileLoadStatusInvalidFileUnit/** invalid file unit */ 
                };


                /// \endcond 
                private: NestingBuilderImpl * m_nestingbuilder_impl;
                private: friend class  _NestingBuilderBuilder;
                protected: NestingBuilder();
                public: ~NestingBuilder();

                /// \cond NX_NO_DOC 
                /** Creates a @link NXOpen::NestingPart NXOpen::NestingPart@endlink . 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: NXOpen::NestingPart * CreateNestingPart
                (
                    const NXString & partFilePath /** partfilepath */ ,
                    bool includeSubAssembly /** includesubassembly */ 
                );
                /** Creates a @link NXOpen::NestingPart NXOpen::NestingPart@endlink . 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                NXOpen::NestingPart * CreateNestingPart
                (
                    const char * partFilePath /** partfilepath */ ,
                    bool includeSubAssembly /** includesubassembly */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Creates a @link NXOpen::NestingStock NXOpen::NestingStock@endlink . 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: NXOpen::NestingStock * CreateNestingStock
                (
                    double length /** length */ ,
                    double width /** width */ ,
                    double thickness /** thickness */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Creates a @link NXOpen::NestingStock NXOpen::NestingStock@endlink  from given standard stock name. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: NXOpen::NestingStock * CreateStandardNestingStock
                (
                    const NXString & stockName /** stockname */ 
                );
                /** Creates a @link NXOpen::NestingStock NXOpen::NestingStock@endlink  from given standard stock name. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                NXOpen::NestingStock * CreateStandardNestingStock
                (
                    const char * stockName /** stockname */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns a list of @link NXOpen::NestingPart NXOpen::NestingPart@endlink . 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::NestingPart *> GetParts
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns the @link NXOpen::NestingPart NXOpen::NestingPart@endlink  for given identifier. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestingPart * GetPart
                (
                    const NXString & identifier /** identifier */ 
                );
                /** Returns the @link NXOpen::NestingPart NXOpen::NestingPart@endlink  for given identifier. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::NestingPart * GetPart
                (
                    const char * identifier /** identifier */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Removes given nesting part. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: void RemovePart
                (
                    NXOpen::NestingStock * nestingPart /** nestingpart */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns a list of @link NXOpen::NestingStock NXOpen::NestingStock@endlink . 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::NestingStock *> GetStocks
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns the @link NXOpen::NestingStock NXOpen::NestingStock@endlink  for given identifier. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestingStock * GetStock
                (
                    const NXString & identifier /** identifier */ 
                );
                /** Returns the @link NXOpen::NestingStock NXOpen::NestingStock@endlink  for given identifier. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::NestingStock * GetStock
                (
                    const char * identifier /** identifier */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Removes given nesting stock. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: void RemoveStock
                (
                    NXOpen::NestingStock * nestingStock /** nestingstock */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the nesting settings. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestingSettings * NestingSettings
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Starts the nesting process. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: void StartNesting
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns a list of @link NXOpen::NestedSolution NXOpen::NestedSolution@endlink .
                             Should be used only after calling @link NestingBuilder::StartNesting NestingBuilder::StartNesting@endlink .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::NestedSolution *> GetNestedSolutions
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the best @link NXOpen::NestedSolution NXOpen::NestedSolution@endlink .
                             Should be used only after calling @link NestingBuilder::StartNesting NestingBuilder::StartNesting@endlink .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestedSolution * BestSolution
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Returns the nested solution with given identifier.
                             Should be used only after calling @link NestingBuilder::StartNesting NestingBuilder::StartNesting@endlink .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestedSolution * GetNestedSolution
                (
                    int identifier /** identifier */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the best desired solution.
                             Should be used only after calling @link NestingBuilder::StartNesting NestingBuilder::StartNesting@endlink .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NestedSolution * DesiredSolution
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the best desired solution.
                             Should be used only after calling @link NestingBuilder::StartNesting NestingBuilder::StartNesting@endlink .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: void SetDesiredSolution
                (
                    NXOpen::NestedSolution * desiredSolution /** desiredsolution */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Saves all the inputs to given file in JSON format. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: bool SaveInputsToFile
                (
                    const NXString & filePath /** filepath */ 
                );
                /** Saves all the inputs to given file in JSON format. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                bool SaveInputsToFile
                (
                    const char * filePath /** filepath */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /** Loads all the inputs from given JSON file. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                public: NXOpen::Features::SheetMetal::NestingBuilder::InputFileLoadStatus LoadInputsFromFile
                (
                    const NXString & filePath /** filepath */ 
                );
                /** Loads all the inputs from given JSON file. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_2d_nesting (" NX 2D Nesting") */
                NXOpen::Features::SheetMetal::NestingBuilder::InputFileLoadStatus LoadInputsFromFile
                (
                    const char * filePath /** filepath */ 
                );

                /// \endcond 
            };

            /// \endcond 
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
