#ifndef NXOpen_FEATURES_SHIPDESIGN_COPYPASTENEWBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_COPYPASTENEWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_CopyPasteNewBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Features_ShipDesign_ShipNamesListBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class CopyPasteNewBuilder;
        }
    }
    class ErrorList;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace ShipDesign
        {
            class ShipNamesListBuilder;
        }
    }
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class LogicalObject;
    }
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Features
    {
        namespace ShipDesign
        {
            class _CopyPasteNewBuilderBuilder;
            class CopyPasteNewBuilderImpl;
            /**  Represents a @link NXOpen::Features::ShipDesign::CopyPasteNewBuilder NXOpen::Features::ShipDesign::CopyPasteNewBuilder@endlink   
                        It is used in Ship Building Application. The operation 
                        copies one or more components and pastes them as new parts while re-parenting 
                        and maintaining WAVE links
                    <br> To create a new instance of this class, use @link NXOpen::Features::ShipCollection::CreateCopyPasteNewBuilder  NXOpen::Features::ShipCollection::CreateCopyPasteNewBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            AngularTolerance </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            CopySection </term> <description> 
             
            false </description> </item> 

            </list> 

             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  CopyPasteNewBuilder : public NXOpen::Features::FeatureBuilder, public virtual NXOpen::IAttributeSourceObjectBuilder
            {
                /** add version identifiers for the different revisions of the copy paste new feature.
                           */
                public: enum VersionID
                {
                    VersionIDNx11/** nx11 */ ,
                    VersionIDNx12/** nx12 */ 
                };

                /** Represents the approach of copying ship standard parts. */
                public: enum CopyApproach
                {
                    CopyApproachTransferringLinkedBody/** The approach by transferring linked body. */,
                    CopyApproachCopySourceFeaturesAndReparent/** The approach by copy source features and reparenting. */
                };

                private: CopyPasteNewBuilderImpl * m_copypastenewbuilder_impl;
                private: friend class  _CopyPasteNewBuilderBuilder;
                protected: CopyPasteNewBuilder();
                public: ~CopyPasteNewBuilder();
                /**Returns  the From geometry 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: NXOpen::SelectNXObject * SelectionFrom
                (
                );
                /**Returns  the To geometry 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: NXOpen::SelectNXObjectList * SelectionTo
                (
                );
                /**Returns  the components to copy 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: NXOpen::SelectNXObjectList * ComponentsToCopy
                (
                );
                /** Creates the pre-creation logical objects 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void CreateLogicalObjects
                (
                    std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
                );
                /**Returns  the Ship Names builder, used to assign names to the copied objects created. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::ShipNamesListBuilder * ShipNames
                (
                );
                /** Gets the operation failure error list object  @return  List of errors encountered during the copy parts
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: NXOpen::ErrorList * GetOperationFailures
                (
                );
                /**Returns  the flag to indicate whether or not to show the xml report on copy paste results 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowXmlReport
                (
                );
                /**Sets  the flag to indicate whether or not to show the xml report on copy paste results 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetShowXmlReport
                (
                    bool showXmlReport /** showxmlreport */ 
                );
                /**Returns  the flag is used to define if linear tolerance on UI would be used when matching geometry.
                            If false, the linear tolerance will be set with max double value as default. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CopySection
                (
                );
                /**Sets  the flag is used to define if linear tolerance on UI would be used when matching geometry.
                            If false, the linear tolerance will be set with max double value as default. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetCopySection
                (
                    bool copySection /** copysection */ 
                );
                /**Returns  an option to determine the approach to copy the ship standard parts between planes. 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::CopyPasteNewBuilder::CopyApproach CopyApproachOption
                (
                );
                /**Sets  an option to determine the approach to copy the ship standard parts between planes. 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetCopyApproachOption
                (
                    NXOpen::Features::ShipDesign::CopyPasteNewBuilder::CopyApproach copyApproachOption /** copyapproachoption */ 
                );
                /**Returns  the value of linear tolerance is used to define the tolerance between candidate object and transformed source object.
                            For example, the distance from the qualified candidate curve to the transformed sample points of source curve shoud be within linear tolerance.
                            And for body, it checks the distance from the qualified body's faces and the transformed sample points of source body's corresponding faces. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: double LinearTolerance
                (
                );
                /**Sets  the value of linear tolerance is used to define the tolerance between candidate object and transformed source object.
                            For example, the distance from the qualified candidate curve to the transformed sample points of source curve shoud be within linear tolerance.
                            And for body, it checks the distance from the qualified body's faces and the transformed sample points of source body's corresponding faces. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetLinearTolerance
                (
                    double tolerance /** tolerance */ 
                );
                /**Returns  the value of angular tolerance is used to define the angular difference from qualified candidate face / plane normal to source face / plane normal. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: double AngularTolerance
                (
                );
                /**Sets  the value of angular tolerance is used to define the angular difference from qualified candidate face / plane normal to source face / plane normal. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetAngularTolerance
                (
                    double tolerance /** tolerance */ 
                );
                /**Returns  the value of algorithm version is used to define the version information. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::CopyPasteNewBuilder::VersionID AlgorithmVersion
                (
                );
                /**Sets  the value of algorithm version is used to define the version information. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_ship_detail ("Ship Detail Design") */
                public: void SetAlgorithmVersion
                (
                    NXOpen::Features::ShipDesign::CopyPasteNewBuilder::VersionID algorithmVersion /** algorithmversion */ 
                );
                /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
                   
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::ErrorList * AutoAssignAttributes
                (
                    const std::vector<NXOpen::NXObject *> & objects /** objects */ 
                );
                /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                        properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
                   
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
                (
                    const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                    const std::vector<NXOpen::NXObject *> & properties /** properties */ 
                );
                /** Creates a map object of attribute titles to their corresponding naming pattern 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
                (
                    std::vector<NXString> & attributeTitles /** attributetitles */ ,
                    std::vector<NXString> & titlePatterns /** titlepatterns */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
