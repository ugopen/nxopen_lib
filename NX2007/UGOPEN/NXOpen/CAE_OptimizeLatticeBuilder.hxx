#ifndef NXOpen_CAE_OPTIMIZELATTICEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZELATTICEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_OptimizeLatticeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class OptimizeLatticeBuilder;
    }
    class Builder;
    class Expression;
    namespace CAE
    {
        class _OptimizeLatticeBuilderBuilder;
        class OptimizeLatticeBuilderImpl;
        /**Optimizes lattice diameters for a given solution <br> To create a new instance of this class, use @link NXOpen::CAE::SimSolution::CreateOptimizeLatticeBuilder  NXOpen::CAE::SimSolution::CreateOptimizeLatticeBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        MaxLatticeDiameter.Value </term> <description> 
         
        20 (millimeters part), 0.8 (inches part) </description> </item> 

        <item><term> 
         
        MinLatticeDiameter.Value </term> <description> 
         
        1 (millimeters part), 0.04 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  OptimizeLatticeBuilder : public NXOpen::Builder
        {
            private: OptimizeLatticeBuilderImpl * m_optimizelatticebuilder_impl;
            private: friend class  _OptimizeLatticeBuilderBuilder;
            protected: OptimizeLatticeBuilder();
            public: ~OptimizeLatticeBuilder();
            /**Returns  the minimum lattice diameter for optimization
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinLatticeDiameter
            (
            );
            /**Returns  the maximum lattice diameter for optimization 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxLatticeDiameter
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
