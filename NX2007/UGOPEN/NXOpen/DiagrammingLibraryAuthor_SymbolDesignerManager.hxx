#ifndef NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOLDESIGNERMANAGER_HXX_INCLUDED
#define NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOLDESIGNERMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DiagrammingLibraryAuthor_SymbolDesignerManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_SymbolBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_SymbolPortBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_SymbolSaveBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_diagramminglibraryauthor_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace DiagrammingLibraryAuthor
    {
        class SymbolDesignerManager;
    }
    class Session;
    namespace DiagrammingLibraryAuthor
    {
        class SymbolBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class SymbolPortBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class SymbolSaveBuilder;
    }
    class Part;
    namespace DiagrammingLibraryAuthor
    {
        class SymbolDesignerManagerImpl;

        /// \cond NX_NO_DOC 
        /** Represents an object that manages Symbol Designer application specific interfaces.
              <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGLIBRARYAUTHOREXPORT  SymbolDesignerManager
        {
            private: SymbolDesignerManagerImpl * m_symboldesignermanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SymbolDesignerManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static SymbolDesignerManager* theSymbolDesignerManager;
            /** Returns the SymbolDesignerManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static SymbolDesignerManager* GetSymbolDesignerManager(NXOpen::Session *owner);
            public: ~SymbolDesignerManager();

            /// \cond NX_NO_DOC 
            /** Create a symbol part. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * CreateSymbolPart
            (
                const NXString & symbolName /** symbolname */ 
            );
            /** Create a symbol part. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Part * CreateSymbolPart
            (
                const char * symbolName /** symbolname */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Open symbol in Symbol Designer environment. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * OpenSymbolPart
            (
                const NXString & partSpec /** partspec */ 
            );
            /** Open symbol in Symbol Designer environment. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Part * OpenSymbolPart
            (
                const char * partSpec /** partspec */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::DiagrammingLibraryAuthor::SymbolSaveBuilder NXOpen::DiagrammingLibraryAuthor::SymbolSaveBuilder@endlink . 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DiagrammingLibraryAuthor::SymbolSaveBuilder * CreateSymbolSaveBuilder
            (
                NXOpen::Part * part /** the part that will own the object */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder@endlink . 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder * CreateSymbolPortBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                const NXString & portID /** portid */ 
            );
            /** Creates a @link NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder@endlink . 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::DiagrammingLibraryAuthor::SymbolPortBuilder * CreateSymbolPortBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                const char * portID /** portid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::DiagrammingLibraryAuthor::SymbolBuilder NXOpen::DiagrammingLibraryAuthor::SymbolBuilder@endlink . 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DiagrammingLibraryAuthor::SymbolBuilder * CreateSymbolBuilder
            (
                NXOpen::Part * part /** the part that will own the object */
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
