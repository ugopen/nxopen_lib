#ifndef NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
#define NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysicalMaterialCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/PhysicalMaterial.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PhysicalMaterialCollection;
    class MaterialManager;
    class Material;
    namespace Fields
    {
        class IApplication;
    }
    namespace PhysMat
    {
        class PhysicalMaterialAssignBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialLibMgrBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialListBuilder;
    }
    class PhysicalMaterial;
    class PhysicalMaterialBuilder;
    class TaggedObject;
    class PhysicalMaterialCollectionImpl;
    /**  @brief  Represents the collection of all @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  objects in this Part 

       <br> To obtain an instance of this class, refer to @link NXOpen::MaterialManager  NXOpen::MaterialManager @endlink  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PhysicalMaterialCollection : public NXOpen::TaggedObjectCollection
    {
        private: PhysicalMaterialCollectionImpl * m_physicalmaterialcollection_impl;
        private: NXOpen::MaterialManager* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit PhysicalMaterialCollection(NXOpen::MaterialManager *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~PhysicalMaterialCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::PhysicalMaterialCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Material *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::PhysicalMaterialCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PhysicalMaterialCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  with the given identifier as recorded in a journal.
            An exception will be thrown if no object can be found with the given journal identifier.  @return  material found 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Material * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found */
        );
        /** Finds the @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  with the given identifier as recorded in a journal.
            An exception will be thrown if no object can be found with the given journal identifier.  @return  material found 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Material * FindObject
        (
            const char * journalIdentifier /** Identifier to be found */
        );
        /** Creates a @link NXOpen::PhysMat::PhysicalMaterialListBuilder NXOpen::PhysMat::PhysicalMaterialListBuilder@endlink  that controls the physical materials list UI block look and feel as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link NXOpen::PhysMat::PhysicalMaterialListBuilder NXOpen::PhysMat::PhysicalMaterialListBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialListBuilder * CreateListBlockBuilder
        (
        );
        /** Creates a PhysMat.MaterialAssignBuilder that is used to control/set the material assign UI as well as to assign materials to bodies. 
             @return  created @link NXOpen::PhysMat::PhysicalMaterialAssignBuilder NXOpen::PhysMat::PhysicalMaterialAssignBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialAssignBuilder * CreateMaterialAssignBuilder
        (
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to edit physical materials.
             @return  created @link NXOpen::PhysicalMaterialBuilder NXOpen::PhysicalMaterialBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialEditBuilder
        (
            NXOpen::PhysicalMaterial * physicalMaterial /** @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  to be edited   */
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to inspect physical materials.
             @return  created @link NXOpen::PhysicalMaterialBuilder NXOpen::PhysicalMaterialBuilder@endlink  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialInspectBuilder
        (
            NXOpen::PhysicalMaterial * physicalMaterial /** @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  to be inspected   */
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to create a physical materials of a given type
             @return  created @link NXOpen::PhysicalMaterialBuilder NXOpen::PhysicalMaterialBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialBuilder
        (
            NXOpen::PhysicalMaterial::Type materialType /** Type of @link NXOpen::PhysicalMaterial NXOpen::PhysicalMaterial@endlink  to be created  */
        );
        /** Creates a PhysMat.PhysicalMaterialLibMgrBuilder used by the material library manager UI to control the look and feel as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link NXOpen::PhysMat::PhysicalMaterialLibMgrBuilder NXOpen::PhysMat::PhysicalMaterialLibMgrBuilder@endlink  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialLibMgrBuilder * CreateMaterialLibmgrBuilder
        (
        );
        /** Creates a non-editable material in the part from a NX Material Library definition.  It is preferable to use either NX MatML or NX Legacy library versions as they will have better performance.
             @return  the loaded material  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromNxlibrary
        (
            const NXString & libraryReference /** the unique library reference for a material in this Library */
        );
        /** Creates a non-editable material in the part from a NX Material Library definition.  It is preferable to use either NX MatML or NX Legacy library versions as they will have better performance.
             @return  the loaded material  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromNxlibrary
        (
            const char * libraryReference /** the unique library reference for a material in this Library */
        );
        /** Creates a non-editable material in the part from a MatML file definition.  The material is identified by the library name and the unique material name.  
                If the library name is not fully qualified, it will attempt to find a MatML library with this name in the current directory, followed by the specified 
                customer defaults values for the user and site MatML libraries.  If the customer defaults are using the file format, it will look in the directory where 
                the specified file is located.  
             @return  the loaded material  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromMatmlLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & materialName /** the material name */
        );
        /** Creates a non-editable material in the part from a MatML file definition.  The material is identified by the library name and the unique material name.  
                If the library name is not fully qualified, it will attempt to find a MatML library with this name in the current directory, followed by the specified 
                customer defaults values for the user and site MatML libraries.  If the customer defaults are using the file format, it will look in the directory where 
                the specified file is located.  
             @return  the loaded material  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromMatmlLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * materialName /** the material name */
        );
        /** Creates a non-editable material in the part from the legacy (phys_material.dat) material library definition.   The material is identified by the unique material identifier in the phys_material.dat file.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromLegacynxlibrary
        (
            const NXString & libraryReference /** the unique library reference for a material in this Library */
        );
        /** Creates a non-editable material in the part from the legacy (phys_material.dat) material library definition.   The material is identified by the unique material identifier in the phys_material.dat file.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromLegacynxlibrary
        (
            const char * libraryReference /** the unique library reference for a material in this Library */
        );
        /** Creates a non-editable material in the part from a NX MatML material definition.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromNxmatmllibrary
        (
            const NXString & materialName /** the unique material name from within this Library */
        );
        /** Creates a non-editable material in the part from a NX MatML material definition.
             @return  the loaded material  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromNxmatmllibrary
        (
            const char * materialName /** the unique material name from within this Library */
        );
        /** Creates a non-editable material in the part from a material library name.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromLibrary
        (
            const NXString & pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & pcMatlName /** the material name */
        );
        /** Creates a non-editable material in the part from a material library name.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadFromLibrary
        (
            const char * pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * pcMatlName /** the material name */
        );
        /** Creates a non-editable material in the part from a Teamcenter material item revision. 
             @return  the loaded material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported.") NXOpen::PhysicalMaterial * LoadMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item  */,
            const NXString & pcRevisionID /** the revision identifier */
        );
        /** Creates a non-editable material in the part from a Teamcenter material item revision. 
             @return  the loaded material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * LoadMaterialItemRevision
        (
            const char * pcMatlItem /** the material item  */,
            const char * pcRevisionID /** the revision identifier */
        );
        /** Checks if a Teamcenter material item revision is loaded into a part file or not.  If it is, the loaded material is returned. 
             @return  the loaded material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported.") NXOpen::PhysicalMaterial * GetLoadedMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item  */,
            const NXString & pcRevisionID /** the revision identifier */
        );
        /** Checks if a Teamcenter material item revision is loaded into a part file or not.  If it is, the loaded material is returned. 
             @return  the loaded material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * GetLoadedMaterialItemRevision
        (
            const char * pcMatlItem /** the material item  */,
            const char * pcRevisionID /** the revision identifier */
        );
        /** Checks if a library material is loaded into a part file or not.  If it is, the loaded material is returned.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * GetLoadedLibraryMaterial
        (
            const NXString & pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & pcMatlName /** the material name */
        );
        /** Checks if a library material is loaded into a part file or not.  If it is, the loaded material is returned.
             @return  the loaded material  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * GetLoadedLibraryMaterial
        (
            const char * pcLibName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * pcMatlName /** the material name */
        );
        /** Creates an editable material (copy) in the part from a library material definition. 
             @return  the copied material  
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & libraryReference /** the material name/identifier */
        );
        /** Creates an editable material (copy) in the part from a library material definition. 
             @return  the copied material  
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * libraryReference /** the material name/identifier */
        );
        /** Creates an editable material (copy) in the part from a library material definition.
             @return  the copied material  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const NXString & libraryReference /** the material name/identifier */,
            bool retainParentPedigree /** true indicates that the copied material should retain information about what library material it came from */
        );
        /** Creates an editable material (copy) in the part from a library material definition.
             @return  the copied material  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const char * libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults */,
            const char * libraryReference /** the material name/identifier */,
            bool retainParentPedigree /** true indicates that the copied material should retain information about what library material it came from */
        );
        /** Creates an editable material (copy) in the part from a Teamcenter material item revision.  
             @return  the copied material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported.") NXOpen::PhysicalMaterial * CopyMaterialItemRevision
        (
            const NXString & pcMatlItem /** the material item  */,
            const NXString & pcRevisionID /** the revision identifier */
        );
        /** Creates an editable material (copy) in the part from a Teamcenter material item revision.  
             @return  the copied material  
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        NXOpen::PhysicalMaterial * CopyMaterialItemRevision
        (
            const char * pcMatlItem /** the material item  */,
            const char * pcRevisionID /** the revision identifier */
        );
        /** Writes out materials to a material library file.   These materials can be local material definitions or material definitions from other material libraries.
                The combination of the material name and library name identify a material definition.  If the material definition is for a local material, the name is 
                specified and the library name is specified as "".  Write access is needed for the Exported library. 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void OutputMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const NXString & pcExportedLibName /** The library to write the material definitions to            */
        );
        /** Writes out materials to a material library file.   These materials can be local material definitions or material definitions from other material libraries.
                The combination of the material name and library name identify a material definition.  If the material definition is for a local material, the name is 
                specified and the library name is specified as "".  Write access is needed for the Exported library. 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void OutputMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const char * pcExportedLibName /** The library to write the material definitions to            */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in. Each material can have its own bUpdateLibraryReferences
                in this version of the JA call.
            
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        public: void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const NXString & pcExportedLibName /** The library to write the material definitions to            */,
            const std::vector<bool> & bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in. Each material can have its own bUpdateLibraryReferences
                in this version of the JA call.
            
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const char * pcExportedLibName /** The library to write the material definitions to            */,
            const std::vector<bool> & bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in.
            
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const NXString & pcExportedLibName /** The library to write the material definitions to            */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.  If the bUpdateLibraryReferences is set to true, the NX model is updated to
                reflect the exported library as the library the material is now referenced in.
            
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        void ExportMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported       */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names */,
            const char * pcExportedLibName /** The library to write the material definitions to            */,
            bool bUpdateLibraryReference /** true indicates that the library reference of loaded/local materials should now refer to the exported library, false indicates the library reference should remain unchanged */
        );
        /** Updates the materials in a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void UpdateMaterialsInLibrary
        (
            const std::vector<NXOpen::PhysicalMaterial *> & tEditedMatl /** Array of loaded material tags  */,
            std::vector<NXString> & pMatlNames /** Array of the material names which match the name in the library that should take the properties of the  corresponding material (tEditedMatl) */,
            const NXString & pcLibName /** Library to modify */
        );
        /** Updates the materials in a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void UpdateMaterialsInLibrary
        (
            const std::vector<NXOpen::PhysicalMaterial *> & tEditedMatl /** Array of loaded material tags  */,
            std::vector<NXString> & pMatlNames /** Array of the material names which match the name in the library that should take the properties of the  corresponding material (tEditedMatl) */,
            const char * pcLibName /** Library to modify */
        );
        /** Deletes the materials from a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void DeleteMaterialsFromLibrary
        (
            std::vector<NXString> & pMatlNames /** Arrays of identifiers of the materials to be deleted from the library */,
            const NXString & pcLibName /** Library to modify */
        );
        /** Deletes the materials from a material library file.  Write access is needed for this operation.
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void DeleteMaterialsFromLibrary
        (
            std::vector<NXString> & pMatlNames /** Arrays of identifiers of the materials to be deleted from the library */,
            const char * pcLibName /** Library to modify */
        );
        /** Returns the bodies that don't have a material assigned.  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void FindBodiesWithoutMaterial
        (
            std::vector<NXOpen::TaggedObject *> & objects /** the array of bodies without a material */
        );
        /** Returns true if there are bodies in the specified part that do not have a material assigned to them; false if all bodies in the part have a material assigned.  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: bool AnyBodiesWithoutMaterial
        (
        );
        /** Returns the bodies that are not using the preferred material (either no material assigned or the non-preferred a different material assigned).  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void FindBodiesWithoutPreferredMaterial
        (
            std::vector<NXOpen::TaggedObject *> & objects /** the array of bodies not using preferred material */
        );
        /** Returns true if there are bodies that do not have the preferred material assigned to them and false if all bodies are assigned the preferred material. If there is not a preferred material specified, the return value is true.   
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: bool AnyBodiesWithoutPreferredMaterial
        (
        );
        /** Returns the material of an object if it has an assigned material    @return  the assigned material  
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * AskMaterialOfObject
        (
            NXOpen::TaggedObject * obj /** @link NXOpen::TaggedObject NXOpen::TaggedObject@endlink  the object for which material is being queried   */
        );
        /** Displays the property values for the specified library material in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryMaterial
        (
            const NXString & pcLibAr /** the library name  */,
            const NXString & pcMatlNameAr /** the material name */
        );
        /** Displays the property values for the specified library material in the information window.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoLibraryMaterial
        (
            const char * pcLibAr /** the library name  */,
            const char * pcMatlNameAr /** the material name */
        );
        /** Writes the property values for the specified library material to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: void InfoLibraryMaterialToFile
        (
            const NXString & pcLibAr /** the library name  */,
            const NXString & pcMatlNameAr /** the material name */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Writes the property values for the specified library material to a file.  
            
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoLibraryMaterialToFile
        (
            const char * pcLibAr /** the library name  */,
            const char * pcMatlNameAr /** the material name */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Displays the property values for the specified Teamcenter Material Item Revision in the information window.  
            
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported.") void InfoItemRevision
        (
            const NXString & pcMaterialItem /** the material item           */,
            const NXString & pcRevision /** the revision identifier     */
        );
        /** Displays the property values for the specified Teamcenter Material Item Revision in the information window.  
            
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoItemRevision
        (
            const char * pcMaterialItem /** the material item           */,
            const char * pcRevision /** the revision identifier     */
        );
        /** Writes the property values for the specified Teamcenter Material Item Revision to a file.  
            
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported.") void InfoItemRevisionToFile
        (
            const NXString & pcMaterialItem /** the material item           */,
            const NXString & pcRevision /** the revision identifier     */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const NXString & pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Writes the property values for the specified Teamcenter Material Item Revision to a file.  
            
         <br>  @deprecated Deprecated in NX12.0.0.  Teamcenter material item revision is no longer supported. <br>  

         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        void InfoItemRevisionToFile
        (
            const char * pcMaterialItem /** the material item           */,
            const char * pcRevision /** the revision identifier     */,
            bool bOverride /** if the file already exists, true override the file, false append to the file */,
            const char * pcFileName /** the full path including filename of file where the information should be written */
        );
        /** Returns the materials used in the part  @return  Materials used 
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::PhysicalMaterial *> GetUsedMaterials
        (
        );
        /** Get material names from material library file. Material library
                name being passed can be fully qualified name with absolute
                file path or file name in the Site/User directory. If a directory
                is passed as a string, then each material library will be searched 
                and all the material names will be returned back from each matl lib.
                If a library name is passed, only the library file is searched and 
                material names will be returned.  If no library name or directory is passed, 
                the default NX material library is searched and material names returned.
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetMaterialsFromLibrary
        (
            const NXString & pcLibName /** library name or lib directory to search for material names*/
        );
        /** Get material names from material library file. Material library
                name being passed can be fully qualified name with absolute
                file path or file name in the Site/User directory. If a directory
                is passed as a string, then each material library will be searched 
                and all the material names will be returned back from each matl lib.
                If a library name is passed, only the library file is searched and 
                material names will be returned.  If no library name or directory is passed, 
                the default NX material library is searched and material names returned.
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXString> GetMaterialsFromLibrary
        (
            const char * pcLibName /** library name or lib directory to search for material names*/
        );
        /** Get material property neutral names given a material 
         <br>  @deprecated Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialSpecifiedPropertyNeutralNames instead. <br>  

         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialSpecifiedPropertyNeutralNames instead.") std::vector<NXString> GetMaterialPropertyNeutralNames
        (
            const NXString & materialName /** material name*/
        );
        /** Get material property neutral names given a material 
         <br>  @deprecated Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialSpecifiedPropertyNeutralNames instead. <br>  

         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXString> GetMaterialPropertyNeutralNames
        (
            const char * materialName /** material name*/
        );
        /** Get material property value given material name and material property neutral name.  @return  property value string
         <br>  @deprecated Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialPropertyValueAndDisplayName instead. <br>  

         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialPropertyValueAndDisplayName instead.") NXString GetMaterialPropertyValue
        (
            const NXString & materialName /** material name*/,
            const NXString & propNeutralName /** property neutral name*/
        );
        /** Get material property value given material name and material property neutral name.  @return  property value string
         <br>  @deprecated Deprecated in NX1953.0.0.  Please use PhysicalMaterialCollection::GetMaterialPropertyValueAndDisplayName instead. <br>  

         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        NXString GetMaterialPropertyValue
        (
            const char * materialName /** material name*/,
            const char * propNeutralName /** property neutral name*/
        );
        /** Get material specified property neutral names given a library name and a material name. 
                Material library name being passed can be fully qualified name with
                absolute file path or file name in the Site/User directory. If a directory
                is passed as a string, then the material library will be searched for
                the given material name. If no library name or directory is passed,
                the default NX material library is searched for the given material name.
                Only properties with a specified value will be returned for the given
                material name.
            
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetMaterialSpecifiedPropertyNeutralNames
        (
            const NXString & pcLibName /** library name or library directory to search for material name*/,
            const NXString & materialName /** material name*/
        );
        /** Get material specified property neutral names given a library name and a material name. 
                Material library name being passed can be fully qualified name with
                absolute file path or file name in the Site/User directory. If a directory
                is passed as a string, then the material library will be searched for
                the given material name. If no library name or directory is passed,
                the default NX material library is searched for the given material name.
                Only properties with a specified value will be returned for the given
                material name.
            
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXString> GetMaterialSpecifiedPropertyNeutralNames
        (
            const char * pcLibName /** library name or library directory to search for material name*/,
            const char * materialName /** material name*/
        );
        /** Get material property value and display name given a library name, 
                a material name and material property neutral name. 
                Material library name being passed can be fully qualified name with
                absolute file path or file name in the Site/User directory. If a directory
                is passed as a string, then the material library will be searched for
                the given material name. If no library name or directory is passed,
                the default NX material library is searched for the given material name.
             @return  property value string
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetMaterialPropertyValueAndDisplayName
        (
            const NXString & pcLibName /** library name or library directory to search for material name*/,
            const NXString & materialName /** material name*/,
            const NXString & propNeutralName /** property neutral name*/,
            NXString* propDisplayName /** property display name*/
        );
        /** Get material property value and display name given a library name, 
                a material name and material property neutral name. 
                Material library name being passed can be fully qualified name with
                absolute file path or file name in the Site/User directory. If a directory
                is passed as a string, then the material library will be searched for
                the given material name. If no library name or directory is passed,
                the default NX material library is searched for the given material name.
             @return  property value string
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        NXString GetMaterialPropertyValueAndDisplayName
        (
            const char * pcLibName /** library name or library directory to search for material name*/,
            const char * materialName /** material name*/,
            const char * propNeutralName /** property neutral name*/,
            NXString* propDisplayName /** property display name*/
        );
        /** Get the dyna field application. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Fields::IApplication * GetDynaApplication
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
