#ifndef NXOpen_AUTOTESTPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_AUTOTESTPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AutotestPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AutotestPreferencesBuilder;
    class Builder;
    class _AutotestPreferencesBuilderBuilder;
    class AutotestPreferencesBuilderImpl;

    /// \cond NX_NO_DOC 
    /** 
    Represents a class that is used for defining preferences when recording Autotest 
     <br> To create a new instance of this class, use @link NXOpen::DebugSession::CreateAutotestPreferencesBuilder  NXOpen::DebugSession::CreateAutotestPreferencesBuilder @endlink  <br> 
     <br>  Created in NX6.0.1.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  AutotestPreferencesBuilder : public NXOpen::Builder
    {
        /** Enumeration used to define the language type when recording an Autotest journal */

        /// \cond NX_NO_DOC 
        public: enum LanguageType
        {
            LanguageTypeVisualBasic/** Language type to Visual Basic output */,
            LanguageTypeCPlusPlus/** Language type to C++ output */,
            LanguageTypeJava/** Language type to Java output */,
            LanguageTypeCSharp/** Language type to C# output */,
            LanguageTypePython/** Language type to Python output */
        };


        /// \endcond 
        /** Enumeration used to define the validation type when recording an Autotest journal. */

        /// \cond NX_NO_DOC 
        public: enum ValidationOption
        {
            ValidationOptionNone/** Indicates that no auto validation statements are generated. */,
            ValidationOptionAtEnd/** Indicates that auto validation statements are generated at end of journal */,
            ValidationOptionAtEndAndAtUpdate/** Indicates that auto validation statements are generated at end of journal and updates */
        };


        /// \endcond 
        /** Enumeration used to define subobject nesting type. */

        /// \cond NX_NO_DOC 
        public: enum SubobjectNestingOption
        {
            SubobjectNestingOptionNone/** Do not nest subobjects inside their containing object's XML output. */,
            SubobjectNestingOptionNestSubobjects/** Nest subobjects inside their containing object's XML output. */
        };


        /// \endcond 
        /** Enumeration used to define object details type. */

        /// \cond NX_NO_DOC 
        public: enum ObjectDetailsOption
        {
            ObjectDetailsOptionHideDetails/** Hide the details of an object in its XML output. */,
            ObjectDetailsOptionShowDetails/** Show the details of an object in its XML output. */
        };


        /// \endcond 
        /** Enumeration used to define collector validation. */

        /// \cond NX_NO_DOC 
        public: enum CollectorValidationOption
        {
            CollectorValidationOptionNone/** Do not validate collectors. */,
            CollectorValidationOptionAll/** Validate all collectors */
        };


        /// \endcond 
        /** Enumeration used for modeling validation */

        /// \cond NX_NO_DOC 
        public: enum ModelingValidationOpt
        {
            ModelingValidationOptNone/** Do not perform modeling validation */,
            ModelingValidationOptAtEnd/** Perfrom Modeling Validation at end */
        };


        /// \endcond 
        /** Enumeration used for Modeling Validation's object validation controls. */

        /// \cond NX_NO_DOC 
        public: enum ModelingObjectOption
        {
            ModelingObjectOptionAll/** Print validation for all live objects of the specified type in the part */,
            ModelingObjectOptionNewAndModified/** Print validation for only new objects and objects modified in the current session in the part */,
            ModelingObjectOptionPreExisting/** Print validation for only pre-existing objects (all live objects except new objects) */,
            ModelingObjectOptionNone/** Do not print validation for any objects of the specified type */
        };


        /// \endcond 
        /** Enumeration used for info validation */

        /// \cond NX_NO_DOC 
        public: enum InfoValidationOption
        {
            InfoValidationOptionNone/** Do not perform info validation */,
            InfoValidationOptionAll/** Perfrom info Validation */
        };


        /// \endcond 
        /** Enumeration used for drafting custom info validation */

        /// \cond NX_NO_DOC 
        public: enum DraftingValidationOption
        {
            DraftingValidationOptionNone/** Do not perform info validation */,
            DraftingValidationOptionAll/** Perfrom info Validation */
        };


        /// \endcond 
        /** Enumeration used to define which tree validation to be printed to xml file. */

        /// \cond NX_NO_DOC 
        public: enum TreeListValidationOption
        {
            TreeListValidationOptionNone/** Do not print any tree list data to XML output. */,
            TreeListValidationOptionPartNavigator/** Print part navigator data to XML output. */
        };


        /// \endcond 
        /** Enumeration used to define whether full CAE Object validation or Lightweight CAE object validation to be printed to xml file. */

        /// \cond NX_NO_DOC 
        public: enum CaeObjValidationOption
        {
            CaeObjValidationOptionFull/** Print full CAE Obj Validation data to XML output. */,
            CaeObjValidationOptionLight/** Print Light CAE Obj Validation datato XML output. */
        };


        /// \endcond 
        /** Enumeration used for sheetmetal validation */

        /// \cond NX_NO_DOC 
        public: enum SheetMetalValidationOpt
        {
            SheetMetalValidationOptNone/** Do not perform SheetMetal validation */,
            SheetMetalValidationOptAtEnd/** Perfrom SheetMetal Validation at end */
        };


        /// \endcond 
        private: AutotestPreferencesBuilderImpl * m_autotestpreferencesbuilder_impl;
        private: friend class  _AutotestPreferencesBuilderBuilder;
        protected: AutotestPreferencesBuilder();
        public: ~AutotestPreferencesBuilder();

        /// \cond NX_NO_DOC 
        /**Returns  the language being used for recording. 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::LanguageType Language
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the language being used for recording. 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: void SetLanguage
        (
            NXOpen::AutotestPreferencesBuilder::LanguageType language /** language */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the current autotest library index 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXString Library
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the current autotest library index 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void SetLibrary
        (
            const NXString & library /** library */ 
        );
        /**Sets  the current autotest library index 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void SetLibrary
        (
            const char * library /** library */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the autovalidate 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ValidationOption Autovalidate
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the autovalidate 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: void SetAutovalidate
        (
            NXOpen::AutotestPreferencesBuilder::ValidationOption autovalidate /** autovalidate */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the collector validation option 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::CollectorValidationOption CollectorValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the collector validation option 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: void SetCollectorValidation
        (
            NXOpen::AutotestPreferencesBuilder::CollectorValidationOption collectorValidation /** collectorvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the info validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::InfoValidationOption InfoValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the info validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetInfoValidation
        (
            NXOpen::AutotestPreferencesBuilder::InfoValidationOption infoValidation /** infovalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the drafting validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::DraftingValidationOption DraftingValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the drafting validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetDraftingValidation
        (
            NXOpen::AutotestPreferencesBuilder::DraftingValidationOption draftingValidation /** draftingvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the subobject nesting option 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::SubobjectNestingOption SubobjectNesting
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the subobject nesting option 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void SetSubobjectNesting
        (
            NXOpen::AutotestPreferencesBuilder::SubobjectNestingOption subobjectNesting /** subobjectnesting */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the object details option 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ObjectDetailsOption ObjectDetails
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the object details option 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void SetObjectDetails
        (
            NXOpen::AutotestPreferencesBuilder::ObjectDetailsOption objectDetails /** objectdetails */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the partfile keyword options 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool PartfileKeyword
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the partfile keyword options 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetPartfileKeyword
        (
            bool usePartfilekeyword /** use partfilekeyword */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the dir keyword option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool DirKeyword
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the dir keyword option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetDirKeyword
        (
            bool useDirkeyword /** use dirkeyword */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the subdirectory option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXString Subdirectory
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the subdirectory option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetSubdirectory
        (
            const NXString & subdirectoryName /** subdirectory name */ 
        );
        /**Sets  the subdirectory option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void SetSubdirectory
        (
            const char * subdirectoryName /** subdirectory name */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the modeling validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingValidationOpt ModelingValidationOption
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the modeling validation option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetModelingValidationOption
        (
            NXOpen::AutotestPreferencesBuilder::ModelingValidationOpt validationOption /** validation option */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the functional area 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXString FunctionalArea
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the functional area 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetFunctionalArea
        (
            const NXString & functionalArea /** functional area */ 
        );
        /**Sets  the functional area 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void SetFunctionalArea
        (
            const char * functionalArea /** functional area */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the no_copy keyword option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool NocopyKeyword
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the no_copy keyword option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetNocopyKeyword
        (
            bool useNocopyKeyword /** use nocopy keyword */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the customer defaults file option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool UseCustomerDefaultsFile
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the customer defaults file option 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetUseCustomerDefaultsFile
        (
            bool useCustomerDefaultsFile /** use customer defaults file */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the tree list validation option 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::TreeListValidationOption TreeListValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the tree list validation option 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTreeListValidation
        (
            NXOpen::AutotestPreferencesBuilder::TreeListValidationOption treeListValidation /** treelistvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the  CAE Object validation option 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::CaeObjValidationOption CaeObjValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the  CAE Object validation option 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCaeObjValidation
        (
            NXOpen::AutotestPreferencesBuilder::CaeObjValidationOption caeObjValidationOption /** caeobjvalidationoption */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the sheetmetal validation option 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::SheetMetalValidationOpt SheetmetalValidationOption
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the sheetmetal validation option 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSheetmetalValidationOption
        (
            NXOpen::AutotestPreferencesBuilder::SheetMetalValidationOpt validationOption /** validation option */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the expression validation option 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisableExpressionValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the expression validation option 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisableExpressionValidation
        (
            bool disableExpressionValidation /** disableexpressionvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the option to control validation of faces and edges 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingObjectOption FaceEdgeValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the option to control validation of faces and edges 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFaceEdgeValidation
        (
            NXOpen::AutotestPreferencesBuilder::ModelingObjectOption faceEdgeValidation /** faceedgevalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the option to control validation of bodies 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingObjectOption BodyValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the option to control validation of bodies 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBodyValidation
        (
            NXOpen::AutotestPreferencesBuilder::ModelingObjectOption bodyValidation /** bodyvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the option to control validation of curves and points 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingObjectOption CurvePointValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the option to control validation of curves and points 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCurvePointValidation
        (
            NXOpen::AutotestPreferencesBuilder::ModelingObjectOption curvePointValidation /** curvepointvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the option to control validation of feature states and parent-child information 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutotestPreferencesBuilder::ModelingObjectOption FeatureValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the option to control validation of feature states and parent-child information 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFeatureValidation
        (
            NXOpen::AutotestPreferencesBuilder::ModelingObjectOption featureValidation /** featurevalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the shape validation option 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisableShapeValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the shape validation option 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisableShapeValidation
        (
            bool disableShapeValidation /** disableshapevalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the geometry validation option 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisableGeometryValidation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the geometry validation option 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisableGeometryValidation
        (
            bool disableGeometryValidation /** disablegeometryvalidation */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the annotation bounding box option 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: bool Annotationboundingbox
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the annotation bounding box option 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAnnotationboundingbox
        (
            bool annotationboundingbox /** annotationboundingbox */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the annotation text bounding box option 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: bool Annotationtextboundingbox
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the annotation text bounding box option 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAnnotationtextboundingbox
        (
            bool annotationtextboundingbox /** annotationtextboundingbox */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the compare convergent minimum radius 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool CompareConvergentMinimumRadius
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the compare convergent minimum radius 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCompareConvergentMinimumRadius
        (
            bool compareConvergentMinimumRadius /** compareconvergentminimumradius */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the significant difference 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: double SignificantDifference
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the significant difference 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSignificantDifference
        (
            double significantDifference /** significantdifference */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the distance Tolerance 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: double DistanceTolerance
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the distance Tolerance 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDistanceTolerance
        (
            double distanceTolerance /** distancetolerance */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the angular Tolerance 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: double AngularTolerance
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the angular Tolerance 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAngularTolerance
        (
            double angularTolerance /** angulartolerance */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the centroid Tolerance 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: double CentroidTolerance
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the centroid Tolerance 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCentroidTolerance
        (
            double centroidTolerance /** centroidtolerance */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the parasolid error bounds option 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool UseParasolidErrorBounds
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the parasolid error bounds option 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUseParasolidErrorBounds
        (
            bool useParasolidErrorBounds /** useparasoliderrorbounds */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the mass properties percent difference 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: double MassPropPercentDifference
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the mass properties percent difference 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMassPropPercentDifference
        (
            double massPropPercentDifference /** massproppercentdifference */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the ship curve tolerance 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: double ShipCurveTolerance
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the ship curve tolerance 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetShipCurveTolerance
        (
            double shipCurveTolerance /** shipcurvetolerance */ 
        );

        /// \endcond 
    };

    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
