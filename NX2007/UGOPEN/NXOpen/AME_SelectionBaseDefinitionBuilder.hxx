#ifndef NXOpen_AME_SELECTIONBASEDEFINITIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_SELECTIONBASEDEFINITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SelectionBaseDefinitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_BaseDefinition.hxx>
#include <NXOpen/AME_InstantiateBaseDefinitionReuseSelectionBuilder.hxx>
#include <NXOpen/AME_SelectBaseDefinitionNodeBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    namespace AME
    {
        class BaseDefinition;
    }
    namespace AME
    {
        class InstantiateBaseDefinitionReuseSelectionBuilder;
    }
    namespace AME
    {
        class SelectBaseDefinitionNodeBuilder;
    }
    namespace AME
    {
        class _SelectionBaseDefinitionBuilderBuilder;
        class SelectionBaseDefinitionBuilderImpl;
        /**
                Journalling Interface class for Builder which allows selection of BaseDefinition.
             <br> This object does not need a creator.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SelectionBaseDefinitionBuilder : public NXOpen::TaggedObject
        {
            private: SelectionBaseDefinitionBuilderImpl * m_selectionbasedefinitionbuilder_impl;
            private: friend class  _SelectionBaseDefinitionBuilderBuilder;
            protected: SelectionBaseDefinitionBuilder();
            public: ~SelectionBaseDefinitionBuilder();
            /**Returns  the builder for reuse library selection item
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstantiateBaseDefinitionReuseSelectionBuilder * ReuseLibraryItem
            (
            );
            /**Returns  the builder for selected base definition node 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectBaseDefinitionNodeBuilder * SelectBaseDefinitionNode
            (
            );
            /**Sets the selected base definition
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedBaseDefinition
            (
                NXOpen::AME::BaseDefinition * baseDefinition /** basedefinition */ 
            );
            /** Gets selected base definition 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BaseDefinition * GetSelectedBaseDefinition
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
