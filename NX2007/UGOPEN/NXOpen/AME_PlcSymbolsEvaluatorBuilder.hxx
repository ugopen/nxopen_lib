#ifndef NXOpen_AME_PLCSYMBOLSEVALUATORBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCSYMBOLSEVALUATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcSymbolsEvaluatorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_BaseEvaluatorBuilder.hxx>
#include <NXOpen/AME_BaseEvaluatorBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcSymbolsEvaluatorBuilder;
    }
    namespace AME
    {
        class BaseEvaluatorBuilder;
    }
    namespace AME
    {
        class FilterObjectsBuilder;
    }
    namespace AME
    {
        class _PlcSymbolsEvaluatorBuilderBuilder;
        class PlcSymbolsEvaluatorBuilderImpl;
        /** Evaluates the PLC tags for a given aspect and a starting point  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcSymbolsEvaluatorBuilder  NXOpen::AME::AMEManager::CreatePlcSymbolsEvaluatorBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcSymbolsEvaluatorBuilder : public NXOpen::AME::BaseEvaluatorBuilder
        {
            /** choices for type filter, can either be tags, instance dbs, function blocks, functions, eplan macros, local variable or all */
            public: enum FilterType
            {
                FilterTypeTags/** tags */ ,
                FilterTypeIdbs/** idbs */ ,
                FilterTypeFunctionBlocks/** function blocks */ ,
                FilterTypeFunctions/** functions */ ,
                FilterTypePageMacros/** page macros */ ,
                FilterTypeWindowMacros/** window macros */ ,
                FilterTypeCallerInstance/** caller instance */ ,
                FilterTypeAll/** all */ ,
                FilterTypeLocalVariable/** local variable */ ,
                FilterTypeMethods/** methods */ ,
                FilterTypeLocalModules/** local modules */ ,
                FilterTypePlcDataTypes/** plc data types */ 
            };

            /** choices for depth criteria */
            public: enum SearchCriteriaByHierarchy
            {
                SearchCriteriaByHierarchyAll/** all */ ,
                SearchCriteriaByHierarchyLevels/** levels */ 
            };

            private: PlcSymbolsEvaluatorBuilderImpl * m_plcsymbolsevaluatorbuilder_impl;
            private: friend class  _PlcSymbolsEvaluatorBuilderBuilder;
            protected: PlcSymbolsEvaluatorBuilder();
            public: ~PlcSymbolsEvaluatorBuilder();
            /**Returns  the aspect navigator selection type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BaseEvaluatorBuilder::ContextType AspectSelection
            (
            );
            /**Sets  the aspect navigator selection type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAspectSelection
            (
                NXOpen::AME::BaseEvaluatorBuilder::ContextType aspectSelection /** aspectselection */ 
            );
            /**Returns  the type filter selection 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcSymbolsEvaluatorBuilder::FilterType TypeSelection
            (
            );
            /**Sets  the type filter selection 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTypeSelection
            (
                NXOpen::AME::PlcSymbolsEvaluatorBuilder::FilterType typeSelection /** typeselection */ 
            );
            /**Returns  the depth criteria 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcSymbolsEvaluatorBuilder::SearchCriteriaByHierarchy DepthCriteria
            (
            );
            /**Sets  the depth criteria 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDepthCriteria
            (
                NXOpen::AME::PlcSymbolsEvaluatorBuilder::SearchCriteriaByHierarchy depthCriteria /** depthcriteria */ 
            );
            /**Returns  the num of levels of hierarchies min 1 to max 100 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int NumLevels
            (
            );
            /**Sets  the num of levels of hierarchies min 1 to max 100 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNumLevels
            (
                int numLevels /** numlevels */ 
            );
            /** Returns the FilterObjectsBuilder 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FilterObjectsBuilder * GetFilterObjectsBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
