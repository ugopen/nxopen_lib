#ifndef NXOpen_CABLEROUTER_CABLESETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_CABLEROUTER_CABLESETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CableRouter_CableSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/TextColorFontWidthBuilder.hxx>
#include <NXOpen/libnxopencpp_cablerouter_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CableRouter
    {
        class CableSettingsBuilder;
    }
    class Builder;
    class LineColorFontWidthBuilder;
    class NXColor;
    class TextColorFontWidthBuilder;
    namespace CableRouter
    {
        class _CableSettingsBuilderBuilder;
        class CableSettingsBuilderImpl;
        /** Builder Class for CableSettings UI  <br> To create a new instance of this class, use @link NXOpen::CableRouter::CableRouterCollection::CreateCableSettingsBuilder  NXOpen::CableRouter::CableRouterCollection::CreateCableSettingsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FitOnSelection </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowDeviceLabels </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowDevices </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowNodeLabels </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowNodes </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowSegmentLabels </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowSegments </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_CABLEROUTEREXPORT  CableSettingsBuilder : public NXOpen::Builder
        {
            private: CableSettingsBuilderImpl * m_cablesettingsbuilder_impl;
            private: friend class  _CableSettingsBuilderBuilder;
            protected: CableSettingsBuilder();
            public: ~CableSettingsBuilder();
            /**Returns  a flag for whether fit on selection 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool FitOnSelection
            (
            );
            /**Sets  a flag for whether fit on selection 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetFitOnSelection
            (
                bool fitOnSelection /** fitonselection */ 
            );
            /**Returns  a number for the layer to draw the generated objects
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int LayerNumber
            (
            );
            /**Sets  a number for the layer to draw the generated objects
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetLayerNumber
            (
                int layerNumber /** layernumber */ 
            );
            /**Returns  a flag for whether nodes are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowNodes
            (
            );
            /**Sets  a flag for whether nodes are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowNodes
            (
                bool showNodes /** shownodes */ 
            );
            /**Returns  a flag for whether node labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowNodeLabels
            (
            );
            /**Sets  a flag for whether node labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowNodeLabels
            (
                bool showNodeLabels /** shownodelabels */ 
            );
            /**Returns  a flag for whether line segments are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSegments
            (
            );
            /**Sets  a flag for whether line segments are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowSegments
            (
                bool showSegments /** showsegments */ 
            );
            /**Returns  a flag for whether line segment labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSegmentLabels
            (
            );
            /**Sets  a flag for whether line segment labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowSegmentLabels
            (
                bool showSegmentLabels /** showsegmentlabels */ 
            );
            /**Returns  a flag for whether devices are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowDevices
            (
            );
            /**Sets  a flag for whether devices are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowDevices
            (
                bool showDevices /** showdevices */ 
            );
            /**Returns  a flag for whether device labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowDeviceLabels
            (
            );
            /**Sets  a flag for whether device labels are displayed 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetShowDeviceLabels
            (
                bool showDeviceLabels /** showdevicelabels */ 
            );
            /**Returns  a set of values for color, width, and line font of the nodal network 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * BasicDisplayProperties
            (
            );
            /**Returns  a set of values for color, width, and line font of the virutal segments in the nodal network 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * VirtualDisplayProperties
            (
            );
            /**Returns  a set of values for the color of selected cables
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CableSelectionColor
            (
            );
            /**Sets  a set of values for the color of selected cables
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetCableSelectionColor
            (
                NXOpen::NXColor * cableSelectionColor /** cableselectioncolor */ 
            );
            /**Returns  the color of available cables
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * AvailableColor
            (
            );
            /**Sets  the color of available cables
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetAvailableColor
            (
                NXOpen::NXColor * availableColor /** availablecolor */ 
            );
            /**Returns  the color for start devices
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * StartDeviceColor
            (
            );
            /**Sets  the color for start devices
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetStartDeviceColor
            (
                NXOpen::NXColor * startDeviceColor /** startdevicecolor */ 
            );
            /**Returns  the color for end devices
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * EndDeviceColor
            (
            );
            /**Sets  the color for end devices
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetEndDeviceColor
            (
                NXOpen::NXColor * endDeviceColor /** enddevicecolor */ 
            );
            /**Returns  a set of values for color, width, and font of the nodal network labels 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TextColorFontWidthBuilder * LabelTextProperties
            (
            );
            /**Returns  a number for the font size of the nodal network labels
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double LabelFontSize
            (
            );
            /**Sets  a number for the font size of the nodal network labels
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_cable_router (" NX Cable Router") */
            public: void SetLabelFontSize
            (
                double selectionColor /** selectioncolor */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
