#ifndef NXOpen_ANNOTATIONS_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Expression;
    namespace Annotations
    {
        /** Represents the horizontal text justification */
        enum TextJustification
        {
            TextJustificationLeft/** left */  = 1,
            TextJustificationCenter/** center */ ,
            TextJustificationRight/** right */ 
        };

        /** Represents the vertical text justification */
        enum VerticalTextJustification
        {
            VerticalTextJustificationTop/** top */  = 1,
            VerticalTextJustificationMiddle/** middle */ ,
            VerticalTextJustificationBottom/** bottom */ 
        };

        /** Specifies the site location in the text box which
                can be used to locate a drafting object */
        enum AlignmentPosition
        {
            AlignmentPositionTopLeft/** top left */  = 1,
            AlignmentPositionTopCenter/** top center */ ,
            AlignmentPositionTopRight/** top right */ ,
            AlignmentPositionMidLeft/** mid left */ ,
            AlignmentPositionMidCenter/** mid center */ ,
            AlignmentPositionMidRight/** mid right */ ,
            AlignmentPositionBottomLeft/** bottom left */ ,
            AlignmentPositionBottomCeneter/**Use @link NXOpen::Annotations::AlignmentPositionBottomCenter NXOpen::Annotations::AlignmentPositionBottomCenter@endlink  instead*/,
            AlignmentPositionBottomCenter/** bottom center */  = 8,
            AlignmentPositionBottomRight/** bottom right */ 
        };

        /** Specifies the site location of a stack */
        enum StackAlignmentPosition
        {
            StackAlignmentPositionAbove/** above */ ,
            StackAlignmentPositionBelow/** below */ ,
            StackAlignmentPositionLeft/** left */ ,
            StackAlignmentPositionRight/** right */ 
        };

        /** Constants for annotations */
        enum Constants
        {
            ConstantsMaxLeaders/** The maximum number of leaders that an annotation can have */ = 7,
            ConstantsMaxLeaderIntermediatePoints/** The maximum number of intermediate points that a leader can have */ = 7
        };

        /** Specifies the leader type.  Corresponds to the leader types in the
            UI's Leader Tool */
        enum LeaderType
        {
            LeaderTypeNull/** Should not be used */ = -1,
            LeaderTypePlain/** plain */ ,
            LeaderTypeAround/** around */ ,
            LeaderTypePlainAligned/** plain aligned */ ,
            LeaderTypeAroundAligned/** around aligned */ ,
            LeaderTypeExtension/** extension */ ,
            LeaderTypeDatumArrow/** datum arrow */ ,
            LeaderTypeDatumExt/** datum ext */ ,
            LeaderTypeDatumDim/** datum dim */ ,
            LeaderTypeGbDatumArrow/** gb datum arrow */ ,
            LeaderTypeGbDatumExt/** gb datum ext */ ,
            LeaderTypeGbDatumDim/** gb datum dim */ ,
            LeaderTypeOnAnnotation/** on annotation */ ,
            LeaderTypeOnStub/** on stub */ ,
            LeaderTypePlainNostub/** plain nostub */ ,
            LeaderTypeAlignedNostub/** aligned nostub */ ,
            LeaderTypeOnCenterline/** on centerline */ ,
            LeaderTypeDatumOnDotTerminatedLeader/** leader type for "datum on dot terminated leader" */,
            LeaderTypeIdExtension/** Extension leaders for ID symbols */,
            LeaderTypeLinearExtension/** linear extension */ ,
            LeaderTypeLinearIdExtension/** linear id extension */ ,
            LeaderTypeAllOver/** all over */ ,
            LeaderTypeLast/** Last enum value.  Should not be used. */
        };

        /** Specifies what a leader is attached to */
        enum LeaderAttachment
        {
            LeaderAttachmentNull/** Should not be used */ = -1,
            LeaderAttachmentOnObject/** on object */ ,
            LeaderAttachmentScreen/** screen */ ,
            LeaderAttachmentLast/** Last enum value.  Should not be used. */
        };

        /** Specifies which side the leader will be on */
        enum LeaderSide
        {
            LeaderSideNull/** Should not be used */ = -1,
            LeaderSideLeft/** left */ ,
            LeaderSideRight/** right */ ,
            LeaderSideInferred/** When used with NXOpen API, leader side will be set to Left by default.
                                                       This is only used while interacting with NX UI */,
            LeaderSideLast/** Last enum value.  Should not be used. */
        };

        /** Specifies the leader's alignment.
                For more information, see the Leader Text Alignment section of Drafting Help. */
        enum LeaderAlignment
        {
            LeaderAlignmentNull/** Should not be used */ = -1,
            LeaderAlignmentTop/** top */ ,
            LeaderAlignmentMiddle/** middle */ ,
            LeaderAlignmentBottom/** bottom */ ,
            LeaderAlignmentTextBottomMax/** extend leader to maximum */,
            LeaderAlignmentTextBottomMaxUnderline/** extend leader to maximum, underline all lines */,
            LeaderAlignmentTextBottom/** text bottom */ ,
            LeaderAlignmentTextBottomUnderline/** underline all lines */,
            LeaderAlignmentTextTopMax/** extend leader to maximum */,
            LeaderAlignmentTextTopMaxUnderline/** extend leader to maximum, underline all lines */,
            LeaderAlignmentTextTop/** text top */ ,
            LeaderAlignmentTextTopUnderline/** underline all lines */,
            LeaderAlignmentLast/** Last enum value.  Should not be used. */
        };

        /** Specifies the leader's orientation */
        enum LeaderOrientation
        {
            LeaderOrientationFromLeft/** from left */  = 1,
            LeaderOrientationFromRight/** from right */ ,
            LeaderOrientationFromTop/** from top */ ,
            LeaderOrientationFromBottom/** from bottom */ ,
            LeaderOrientationInferred/** inferred */ 
        };

        /** Specifies the arrowhead type */
        enum ArrowheadType
        {
            ArrowheadTypeFilledDatumArrow/** filled datum arrow */  = -2,
            ArrowheadTypeFilledDot/** filled dot */ ,
            ArrowheadTypeFilledArrow/** filled arrow */ ,
            ArrowheadTypeClosedArrow/** closed arrow */ ,
            ArrowheadTypeOpenArrow/** open arrow */ ,
            ArrowheadTypeCrossArrow/** cross arrow */ ,
            ArrowheadTypeDotArrow/** dot arrow */ ,
            ArrowheadTypeOriginSymbolArrow/** origin symbol arrow */ ,
            ArrowheadTypeNoArrow/** no arrow */ ,
            ArrowheadTypeUnfilledDatumArrow/** unfilled datum arrow */ ,
            ArrowheadTypeClosedSolidArrow/** closed solid arrow */ ,
            ArrowheadTypeClosedDoubleArrow/** closed double arrow */ ,
            ArrowheadTypeClosedDoubleSolidArrow/** closed double solid arrow */ ,
            ArrowheadTypeOpenDoubleArrow/** open double arrow */ ,
            ArrowheadTypeIntegralArrow/** integral arrow */ ,
            ArrowheadTypeBoxArrow/** box arrow */ ,
            ArrowheadTypeFilledBox/** filled box */ ,
            ArrowheadTypeFilledDoubleArrow/** filled double arrow */ ,
            ArrowheadTypeTopOpenArrow/** top open arrow */ ,
            ArrowheadTypeBottomOpenArrow/** bottom open arrow */ ,
            ArrowheadTypeTopFilledArrow/** top filled arrow */ ,
            ArrowheadTypeBottomFilledArrow/** bottom filled arrow */ 
        };

        /** Specifies the type of associativity for an annotation's origin */
        enum AssociativeOriginType
        {
            AssociativeOriginTypeDrag/** drag */ ,
            AssociativeOriginTypeRelativeToView/** relative to view */ ,
            AssociativeOriginTypeRelativeToGeometry/** relative to geometry */ ,
            AssociativeOriginTypeVerticallyAligned/** vertically aligned */ ,
            AssociativeOriginTypeHorizontallyAligned/** horizontally aligned */ ,
            AssociativeOriginTypeAlignedWithArrows/** aligned with arrows */ ,
            AssociativeOriginTypeAtAPoint/** at apoint */ ,
            AssociativeOriginTypeOffsetFromText/** offset from text */ ,
            AssociativeOriginTypeAttachedToStack/** attached to stack */ 
        };

        /** Specifies the line width. 
                 When using a standard font in the @link NXOpen::Annotations::LetteringStyleBuilder NXOpen::Annotations::LetteringStyleBuilder@endlink  the values for @link NXOpen::Annotations::LineWidth NXOpen::Annotations::LineWidth@endlink  will be interpreted as follows:
                 A value of @link NXOpen::Annotations::LineWidthThin NXOpen::Annotations::LineWidthThin@endlink  is equivalent to a font style value of "Regular" or "Italic" (if italic is set).
                 Any value other than @link NXOpen::Annotations::LineWidthThin NXOpen::Annotations::LineWidthThin@endlink  is equivalent to a font style value of "Bold" or "Bold Italic" (if italic is set).
                 This applies to:
                 @link NXOpen::Annotations::LetteringStyleBuilder::DimensionTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::DimensionTextLineWidth @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetDimensionTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::SetDimensionTextLineWidth @endlink  with respect to @link NXOpen::Annotations::LetteringStyleBuilder::DimensionTextItalicized NXOpen::Annotations::LetteringStyleBuilder::DimensionTextItalicized @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetDimensionTextItalicized NXOpen::Annotations::LetteringStyleBuilder::SetDimensionTextItalicized @endlink 
                 @link NXOpen::Annotations::LetteringStyleBuilder::AppendedTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::AppendedTextLineWidth @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetAppendedTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::SetAppendedTextLineWidth @endlink  with respect to @link NXOpen::Annotations::LetteringStyleBuilder::AppendedTextItalicized NXOpen::Annotations::LetteringStyleBuilder::AppendedTextItalicized @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetAppendedTextItalicized NXOpen::Annotations::LetteringStyleBuilder::SetAppendedTextItalicized @endlink 
                 @link NXOpen::Annotations::LetteringStyleBuilder::ToleranceTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::ToleranceTextLineWidth @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetToleranceTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::SetToleranceTextLineWidth @endlink  with respect to @link NXOpen::Annotations::LetteringStyleBuilder::ToleranceTextItalicized NXOpen::Annotations::LetteringStyleBuilder::ToleranceTextItalicized @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetToleranceTextItalicized NXOpen::Annotations::LetteringStyleBuilder::SetToleranceTextItalicized @endlink 
                 @link NXOpen::Annotations::LetteringStyleBuilder::GeneralTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::GeneralTextLineWidth @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetGeneralTextLineWidth NXOpen::Annotations::LetteringStyleBuilder::SetGeneralTextLineWidth @endlink  with respect to @link NXOpen::Annotations::LetteringStyleBuilder::GeneralTextItalicized NXOpen::Annotations::LetteringStyleBuilder::GeneralTextItalicized @endlink and @link NXOpen::Annotations::LetteringStyleBuilder::SetGeneralTextItalicized NXOpen::Annotations::LetteringStyleBuilder::SetGeneralTextItalicized @endlink  */
        enum LineWidth
        {
            LineWidthNormal/** normal */  = 1,
            LineWidthThick/** thick */ ,
            LineWidthThin/** thin */ ,
            LineWidthOne/** Width One */ = 6,
            LineWidthTwo/** Width Two */,
            LineWidthThree/** Width Three */,
            LineWidthFour/** Width Four */,
            LineWidthFive/** Width Five */,
            LineWidthSix/** Width Six */,
            LineWidthSeven/** Width Seven */,
            LineWidthEight/** Width Eight */,
            LineWidthNine/** Width Nine */
        };

        /** Specifies the options for the default PMI annotation plane*/
        enum PmiDefaultPlane
        {
            PmiDefaultPlaneXyOfWcs/** xy of wcs */  = 1,
            PmiDefaultPlaneModelView/** model view */ ,
            PmiDefaultPlaneXzOfWcs/** xz of wcs */ ,
            PmiDefaultPlaneYzOfWcs/** yz of wcs */ ,
            PmiDefaultPlaneLast/** Placeholder, do not use */ = 1000
        };

        /** Specifies the associativity point option */
        enum AssociativityPointOption
        {
            AssociativityPointOptionNone/** No point */,
            AssociativityPointOptionControl/** Control point */,
            AssociativityPointOptionArcCenter/** Arc center point */,
            AssociativityPointOptionTangent/** Tangent point */,
            AssociativityPointOptionIntersection/** Intersection point */,
            AssociativityPointOptionScreenPosition/** Screen position */,
            AssociativityPointOptionOnCurve/** Point on curve */,
            AssociativityPointOptionPole/** Spline pole */,
            AssociativityPointOptionAnchor/** Conic Anchor */,
            AssociativityPointOptionDefining/** Spline defining point */,
            AssociativityPointOptionLast/** Last enum value. Should not be used. */
        };

        /** Specifies the associativity line option */
        enum AssociativityLineOption
        {
            AssociativityLineOptionNone/** No line */,
            AssociativityLineOptionExistingLine/** Existing line */,
            AssociativityLineOptionPointVector/** Vector from two points */,
            AssociativityLineOptionExtensionLine/**Extension line */,
            AssociativityLineOptionCenterline/** Centerline -
                                                                              <br> Linear <br> 
                                                                              <br> Bolt circle <br> 
                                                                              <br> Circular <br>  */,
            AssociativityLineOptionAngle/** At angle */,
            AssociativityLineOptionHorizontalRight/** Horizontal right */,
            AssociativityLineOptionVerticalUp/** Vertical up */,
            AssociativityLineOptionHorizontalLeft/** Horizontal left */,
            AssociativityLineOptionVerticalDown/** Vertical down */,
            AssociativityLineOptionBaseLine/** Base line */,
            AssociativityLineOptionLast/** Last enum value. Should not be used. */
        };

         /** Specifies color, font, and width */

        struct LineCfw
        {
            public: /** color */ int Color;
            public: /** Line font (solid, dashed, etc) */NXOpen::DisplayableObject::ObjectFont Font;
            public: /** width */ NXOpen::Annotations::LineWidth Width;
            public: LineCfw() :
                Color(),
                Font((NXOpen::DisplayableObject::ObjectFont)0),
                Width((NXOpen::Annotations::LineWidth)0)
            {
            }
            /** Constructor for the LineCfw struct. */ 
            public: LineCfw(int colorInitial /** color */ , 
                    NXOpen::DisplayableObject::ObjectFont fontInitial /** Line font (solid, dashed, etc) */, 
                    NXOpen::Annotations::LineWidth widthInitial /** width */ ) :
                Color(colorInitial),
                Font(fontInitial),
                Width(widthInitial)
            {
            }
        };

         /** Specifies color, font, and width for text */

        struct TextCfw
        {
            public: /** color */ int Color;
            public: /** Character font (blockfont, etc).
                                    The font must be a font that has been
                                    loaded into the part.  The @link NXOpen::FontCollection NXOpen::FontCollection@endlink  class
                                    can be used to load fonts into the part. */int Font;
            public: /** width */ NXOpen::Annotations::LineWidth Width;
            public: TextCfw() :
                Color(),
                Font(),
                Width((NXOpen::Annotations::LineWidth)0)
            {
            }
            /** Constructor for the TextCfw struct. */ 
            public: TextCfw(int colorInitial /** color */ , 
                    int fontInitial /** Character font (blockfont, etc).
                                            The font must be a font that has been
                                            loaded into the part.  The @link NXOpen::FontCollection NXOpen::FontCollection@endlink  class
                                            can be used to load fonts into the part. */, 
                    NXOpen::Annotations::LineWidth widthInitial /** width */ ) :
                Color(colorInitial),
                Font(fontInitial),
                Width(widthInitial)
            {
            }
        };

         /** Specifies lettering data */

        struct Lettering
        {
            public: /** Height of a character */double Size;
            public: /** Multiplier applied to font's standard character spacing */double CharacterSpaceFactor;
            public: /** Aspect ratio for a character */double AspectRatio;
            public: /** Multiplier applied to font's standard line spacing */double LineSpaceFactor;
            public: /**  Color, font, and width for lettering */NXOpen::Annotations::TextCfw Cfw;
            public: /** italicized text for standard font text */bool Italic;
            public: /** Symbol  aspect ratio (this only applies to symbols when using standard fonts)
                                                                              This value controls the aspect ratio of text control sequences such as the 
                                                                              diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
                                                                              counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
                                                                              degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
                                                                              position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc.
                                                                              This value cannot be negative. The default value is zero. A zero value indicates that the
                                                                              aspect ratio for a character will be used for the symbol aspect ratio. */double SymbolAspectRatio;
            public: Lettering() :
                Size(),
                CharacterSpaceFactor(),
                AspectRatio(),
                LineSpaceFactor(),
                Cfw(),
                Italic(),
                SymbolAspectRatio()
            {
            }
            /** Constructor for the Lettering struct. */ 
            public: Lettering(double sizeInitial /** Height of a character */, 
                    double characterSpaceFactorInitial /** Multiplier applied to font's standard character spacing */, 
                    double aspectRatioInitial /** Aspect ratio for a character */, 
                    double lineSpaceFactorInitial /** Multiplier applied to font's standard line spacing */, 
                    const NXOpen::Annotations::TextCfw &cfwInitial /**  Color, font, and width for lettering */, 
                    bool italicInitial /** italicized text for standard font text */, 
                    double symbolAspectRatioInitial /** Symbol  aspect ratio (this only applies to symbols when using standard fonts)
                                                                                      This value controls the aspect ratio of text control sequences such as the 
                                                                                      diameter symbol (represented by the &#x3C;O&#x3E; text control sequence), the 
                                                                                      counterbore symbol (represented by the &#x3C;&#x23;C&#x3E; text control sequence), the 
                                                                                      degree symbol (represented by the &#x3C;&#x24;s&#x3E; text control sequence), the true 
                                                                                      position symbol (represented by the &#x3C;&#x26;10&#x3E; text control sequence), etc.
                                                                                      This value cannot be negative. The default value is zero. A zero value indicates that the
                                                                                      aspect ratio for a character will be used for the symbol aspect ratio. */) :
                Size(sizeInitial),
                CharacterSpaceFactor(characterSpaceFactorInitial),
                AspectRatio(aspectRatioInitial),
                LineSpaceFactor(lineSpaceFactorInitial),
                Cfw(cfwInitial),
                Italic(italicInitial),
                SymbolAspectRatio(symbolAspectRatioInitial)
            {
            }
        };

         /** Specifies the value data */

        struct Value
        {
            public: /**  Value of the item */double ItemValue;
            public: /** Expression representing the value. 
                                                                      NULL, if not used. */NXOpen::Expression * ValueExpression;
            public: /** Value precision */int ValuePrecision;
            public: Value() :
                ItemValue(),
                ValueExpression(),
                ValuePrecision()
            {
            }
            /** Constructor for the Value struct. */ 
            public: Value(double itemValueInitial /**  Value of the item */, 
                    NXOpen::Expression * valueExpressionInitial /** Expression representing the value. 
                                                                              NULL, if not used. */, 
                    int valuePrecisionInitial /** Value precision */) :
                ItemValue(itemValueInitial),
                ValueExpression(valueExpressionInitial),
                ValuePrecision(valuePrecisionInitial)
            {
            }
        };

        /** Specifies the vertical alignment(above/below alignment) option
                when aligning annotations within a stack */
        enum StackVerticalAlignment
        {
            StackVerticalAlignmentLeft/**Align vertically along left edge of text box */,
            StackVerticalAlignmentCenter/**Align vertically along center of text box */,
            StackVerticalAlignmentRight/**Align vertically along right edge of text box */
        };

        /** Specifies the horizontal alignment(left/right alignment) option
                when aligning annotations within a stack */
        enum StackHorizontalAlignment
        {
            StackHorizontalAlignmentTop/**Align horizontally along top edge of text box */,
            StackHorizontalAlignmentMiddle/**Align horizontally along middle line of text box */,
            StackHorizontalAlignmentBottom/**Align horizontally along bottom edge of text box */
        };

        /** Specifies the area fill material type */
        enum AreaFillMaterial
        {
            AreaFillMaterialCorkFelt/** Cork felt */,
            AreaFillMaterialSoundInsulation/** Sound insulation */,
            AreaFillMaterialConcrete/** Concrete */,
            AreaFillMaterialEarth/** Earth */,
            AreaFillMaterialRock/** Rock */,
            AreaFillMaterialSand/** Sand */,
            AreaFillMaterialLiquids/** Liquids */,
            AreaFillMaterialWoodAcrossGrain/** Wood across grain */,
            AreaFillMaterialWoodAlongGrain/** Wood along grain */,
            AreaFillMaterialSolidFill/** Solid fill */
        };

        /** Specifies the drafting surface finish standard type*/
        enum SurfaceFinishStandard
        {
            SurfaceFinishStandardAnsi/** ANSI */,
            SurfaceFinishStandardIso/** ISO */,
            SurfaceFinishStandardJis/** JIS */,
            SurfaceFinishStandardDin/** DIN */,
            SurfaceFinishStandardIso2002/** ISO 2002 */,
            SurfaceFinishStandardDin2002/** DIN 2002 */,
            SurfaceFinishStandardGb/** GB131-93 */,
            SurfaceFinishStandardEskd/** ESKD */
        };

         /** Specifies the standard font character space factor for each of the text types */

        struct CharacterSpaceFactor
        {
            public: /** Standard Font Character Space Factor for General Text */double General;
            public: /** Standard Font Character Space Factor for Dimension Text */double Dimension;
            public: /** Standard Font Character Space Factor for Tolerance Text */double Tolerance;
            public: /** Standard Font Character Space Factor for Appended Text */double Appended;
            public: CharacterSpaceFactor() :
                General(),
                Dimension(),
                Tolerance(),
                Appended()
            {
            }
            /** Constructor for the CharacterSpaceFactor struct. */ 
            public: CharacterSpaceFactor(double generalInitial /** Standard Font Character Space Factor for General Text */, 
                    double dimensionInitial /** Standard Font Character Space Factor for Dimension Text */, 
                    double toleranceInitial /** Standard Font Character Space Factor for Tolerance Text */, 
                    double appendedInitial /** Standard Font Character Space Factor for Appended Text */) :
                General(generalInitial),
                Dimension(dimensionInitial),
                Tolerance(toleranceInitial),
                Appended(appendedInitial)
            {
            }
        };

        /** Specifies the options for the resize method */
        enum PmiResizeMethod
        {
            PmiResizeMethodViewScale/** view scale */  = 1,
            PmiResizeMethodZoomFactor/** zoom factor */ ,
            PmiResizeMethodIndependent/** independent */ ,
            PmiResizeMethodPartPreferences/** Resize using part settings */
        };

        /** Specifies the frame bar elements*/
        enum FrameBarElements
        {
            FrameBarElementsAftPerpendicular/** aft perpendicular */ ,
            FrameBarElementsForwardPerpendicular/** forward perpendicular */ ,
            FrameBarElementsCenterlineY/** centerline y */ ,
            FrameBarElementsBaseline/** baseline */ ,
            FrameBarElementsWaterline/** waterline */ ,
            FrameBarElementsTransversalInsertArea/** transversal insert area */ ,
            FrameBarElementsBulkHeads/** bulk heads */ ,
            FrameBarElementsDecks/** decks */ ,
            FrameBarElementsTransverseFrames/** transverse frames */ ,
            FrameBarElementsInterTransverseFrames/** inter transverse frames */ ,
            FrameBarElementsLongitudinalYFrames/** longitudinal yframes */ ,
            FrameBarElementsLongitudinalZFrames/** longitudinal zframes */ ,
            FrameBarElementsAlongHullBaseline/** along hull baseline */ ,
            FrameBarElementsAlongHullWaterline/** along hull waterline */ ,
            FrameBarElementsAlongHullDecks/** along hull decks */ ,
            FrameBarElementsAlongHullLongitudinalZFrames/** along hull longitudinal zframes */ ,
            FrameBarElementsLongitudinalBulkHeads/** longitudinal bulk heads */ ,
            FrameBarElementsLongitudinalYInsertFrames/** longitudinal yinsert frames */ ,
            FrameBarElementsLongitudinalZInsertFrames/** longitudinal zinsert frames */ ,
            FrameBarElementsAlongHullLongitudinalZInsertFrames/** along hull longitudinal zinsert frames */ ,
            FrameBarElementsNum/** num */ 
        };

        /** Specifies the options for display PMI Effectivity*/
        enum DisplayPmiEffectivityMethod
        {
            DisplayPmiEffectivityMethodAllAssocOccLoaded/** all assoc occ loaded */  = 1,
            DisplayPmiEffectivityMethodAnyAssocOccLoaded/** any assoc occ loaded */ 
        };

        /** Specifies the options jog orientation*/
        enum JogOrientation
        {
            JogOrientationJogIn/** Jog orientation in */ = 1,
            JogOrientationJogOut/** Jog orientation out */
        };

        /** Specifies on what a leader is attached to */
        enum LeaderVerticalAttachment
        {
            LeaderVerticalAttachmentNull/** Should not be used */ = -1,
            LeaderVerticalAttachmentTop/** Attach vertically to the top of the annotation */,
            LeaderVerticalAttachmentCenter/** Attach vertically to the center of the annotation */,
            LeaderVerticalAttachmentBottom/** Attach vertically to the bottom of the annotation */,
            LeaderVerticalAttachmentLegacy/** Attach vertically to the middle of top row of annotation */,
            LeaderVerticalAttachmentLast/** Last enum value.  Should not be used. */
        };

        /** Specifies on what type of symbol is attached to dimension stub */
        enum StubSymbolType
        {
            StubSymbolTypeNone/** None */,
            StubSymbolTypeAllAround/** All around symbol */,
            StubSymbolTypeAllOver/** All over symbol */
        };

        /** Specifies different types of balloon */
        enum BalloonTypes
        {
            BalloonTypesCircle/** Circle                   */,
            BalloonTypesDividedCircle/** Divided circle           */,
            BalloonTypesTriangleDown/** Triangle with point down */,
            BalloonTypesTriangleUp/** Triangle with point up   */,
            BalloonTypesSquare/** Square                   */,
            BalloonTypesDividedSquare/** Divided square           */,
            BalloonTypesHexagon/** Hexagon                  */,
            BalloonTypesDividedHexagon/** Divided hexagon          */,
            BalloonTypesQuadrantCircle/** Quadrant circle          */,
            BalloonTypesRoundedBox/** Rounded box              */,
            BalloonTypesUnderline/** Underline                */
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
