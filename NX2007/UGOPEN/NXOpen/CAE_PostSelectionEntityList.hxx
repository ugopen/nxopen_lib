#ifndef NXOpen_CAE_POSTSELECTIONENTITYLIST_HXX_INCLUDED
#define NXOpen_CAE_POSTSELECTIONENTITYLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostSelectionEntityList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostISmartSelectorMethod.hxx>
#include <NXOpen/CAE_PostSelectionEntity.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostSelectionEntityList;
    }
    namespace CAE
    {
        class PostISmartSelectorMethod;
    }
    namespace CAE
    {
        class PostSelectionEntity;
    }
    namespace CAE
    {
        class _PostSelectionEntityListBuilder;
        class PostSelectionEntityListImpl;
        /**
            Represents a @link NXOpen::CAE::PostSelectionEntityList NXOpen::CAE::PostSelectionEntityList@endlink 
             <br> Not support KF.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostSelectionEntityList : public NXOpen::TaggedObject
        {
            private: PostSelectionEntityListImpl * m_postselectionentitylist_impl;
            private: friend class  _PostSelectionEntityListBuilder;
            protected: PostSelectionEntityList();
            public: ~PostSelectionEntityList();
            /** Adds an element or node selection entity to the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AddEntity
            (
                NXOpen::CAE::PostSelectionEntity * selEntity /** selentity */ 
            );
            /** Adds elements or nodes selection entities from a smart selector method to the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AddMethod
            (
                NXOpen::CAE::PostISmartSelectorMethod * pSmartMethod /** psmartmethod */ 
            );
            /** Removes elements or nodes selection entities from a smart selector method from the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void RemoveMethod
            (
                NXOpen::CAE::PostISmartSelectorMethod * pSmartMethod /** psmartmethod */ 
            );
            /** Gets the Entity at the given index from the list
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostSelectionEntity * GetEntity
            (
                int index /** index */ 
            );
            /** Removes entities at the given indices from the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void RemoveEntities
            (
                const std::vector<int> & indices /** indices */ 
            );
            /** Removes all entities from the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void Clear
            (
            );
            /** Gets the number of entities in the list 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int GetEntityCount
            (
            );
            /** Asks all Entities that has the given element labels, return the entity indices. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskMatchingEntitiesByElementIds
            (
                const std::vector<int> & elementIds /** elementids */ ,
                std::vector<int> & indices /** indices */ 
            );
            /** Asks all Entities that has the given node labels, return the entity indices. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskMatchingEntitiesByNodeIds
            (
                const std::vector<int> & nodeIds /** nodeids */ ,
                std::vector<int> & indices /** indices */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
