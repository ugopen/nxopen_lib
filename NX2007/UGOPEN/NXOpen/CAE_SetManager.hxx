#ifndef NXOpen_CAE_SETMANAGER_HXX_INCLUDED
#define NXOpen_CAE_SETMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SetManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CAESet.hxx>
#include <NXOpen/CAE_FEElement.hxx>
#include <NXOpen/CAE_PathMethodType.hxx>
#include <NXOpen/CAE_SetObject.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SetManager;
    }
    namespace CAE
    {
        class CAEEdge;
    }
    namespace CAE
    {
        class CAEFace;
    }
    namespace CAE
    {
        class CAESet;
    }
    namespace CAE
    {
        class CAEVertex;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        class FEElemEdge;
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class FENode;
    }
    class Curve;
    class Direction;
    class Expression;
    class NXObject;
    class Plane;
    class Point;
    class TaggedObject;
    namespace CAE
    {
        class _SetManagerBuilder;
        class SetManagerImpl;
        /**  @brief  Represents a group of CAE object sets. The objects in each set
                can be used to create loads, constraints ..etc 

           <br> This is a sub object  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SetManager : public NXOpen::NXObject
        {
            /** Used to specify the method to define the position or the radius of the sphere */
            public: enum DistributedPlanesPosition
            {
                DistributedPlanesPositionBbox/** the position or radius is based on the bounding box */,
                DistributedPlanesPositionManual/** the position or radius is manually defined */
            };

            /** Used to specify which bounding box defines the position or radius of the sphere */
            public: enum DistributedPlanesBboxType
            {
                DistributedPlanesBboxTypeModel/** the whole FE model is used to calculate the bounding box */,
                DistributedPlanesBboxTypeSelection/** a selection of elements is used to define the bounding box */
            };

            /** Used to specify the type of bounding sphere to lay the distributed planes on */
            public: enum DistributedPlanesBoundingSphereType
            {
                DistributedPlanesBoundingSphereTypeHalf/** places the distributed planes on half a sphere */,
                DistributedPlanesBoundingSphereTypeFull/** places the distributed planes on a full sphere */
            };

            /** Used to specify the method to define the Z+ direction of the sphere */
            public: enum DistributedPlanesBoundingSphereDirection
            {
                DistributedPlanesBoundingSphereDirectionVector/** defines Z+ with a vector */,
                DistributedPlanesBoundingSphereDirectionThreePointsNormal/** defines Z+ from 3 points that form a plane and a normal */
            };

            private: SetManagerImpl * m_setmanager_impl;
            private: friend class  _SetManagerBuilder;
            protected: SetManager();
            public: ~SetManager();
            /**Returns  the count of objects in the set 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int TargetSetCount
            (
            );
            /** Creates a CAE.CAESet  @return  the cae set created 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CAESet * CreateCaeSet
            (
            );
            /** Sets the CAE edge path in the specified set
                     
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::CAE::SetManager::SetTargetSetEdgePathWithLimits NXOpen::CAE::SetManager::SetTargetSetEdgePathWithLimits@endlink . <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::CAE::SetManager::SetTargetSetEdgePathWithLimits.") void SetTargetSetEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEEdge *> & seedEdges /** seed edges to define the path */,
                const std::vector<NXOpen::CAE::CAEVertex *> & seedVertices /** seed vertices to define the path */,
                const std::vector<bool> & preferFreeEdges /** if true for seed, prefer free edges */,
                const std::vector<bool> & allowGapJumping /** if true for seed, gaps between edges will be jumped*/,
                const std::vector<double> & gapJumpingTolerance /** if allowGapJumping is true for seed, this is the tolerance to use for jumping gaps between edges*/,
                const std::vector<NXOpen::CAE::PathType> & pathMethodType /** path method type*/,
                const std::vector<double> & dTangentAngleTolerance /** tangent angle tolerance for most tangent path method type*/
            );
            /** Sets the CAE edge path in the specified set
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetEdgePathWithLimits
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEEdge *> & seedEdges /** seed edges to define the path */,
                const std::vector<NXOpen::CAE::CAEVertex *> & seedVertices /** seed vertices to define the path */,
                const std::vector<bool> & preferFreeEdges /** if true for seed, prefer free edges */,
                const std::vector<bool> & allowGapJumping /** if true for seed, gaps between edges will be jumped*/,
                const std::vector<double> & gapJumpingTolerance /** if allowGapJumping is true for seed, this is the tolerance to use for jumping gaps between edges*/,
                const std::vector<NXOpen::CAE::PathType> & pathMethodType /** path method type*/,
                const std::vector<double> & dTangentAngleTolerance /** tangent angle tolerance for most tangent path method type*/,
                NXOpen::Point * startPoint /** optional start point */,
                NXOpen::Point * endPoint /** optional end point */
            );
            /** Sets a closed edge (start vertex and end vertex are the same for the edge) as the path.  
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetClosedEdgePath
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::CAEEdge * seedEdge /** seed edge */,
                bool flipEdge /** true if edge is flipped in the path */,
                NXOpen::Point * startPoint /** optional start point */,
                NXOpen::Point * endPoint /** optional end point */
            );
            /** Gets the CAE edge path limits
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetEdgePathLimits
            (
                int setIndex /** index of the set */,
                NXOpen::Point ** startPoint /** start point */,
                NXOpen::Point ** endPoint /** end point */
            );
            /**  Creates a plane target set.
                         The plane target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric plane defined in space that may or may not touch elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to create the plane.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetPlaneWithOffset
            (
                int setIndex /** index of the set. */,
                const NXOpen::Point3d & planePosition /** plane's position. */,
                const NXOpen::Vector3d & planeNormal /** plane's normal. */,
                NXOpen::Expression * offsetValue /** offset value that was used to construct the plane. */
            );
            /**  Gets the parameters from a plane target set.
                         The plane target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric plane defined in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to retrieve the parameters.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetPlaneWithOffset
            (
                int setIndex /** index of the set */,
                NXOpen::Point3d* planePosition /** plane's position */,
                NXOpen::Vector3d* planeNormal /** plane's normal */,
                NXOpen::Expression ** offsetValue /** offset value that was used to construct the plane. */
            );
            /**  Creates a plane target set.
                         The plane target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric plane defined in space that may or may not touch elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to create the plane.
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetPlaneObject
            (
                int setIndex /** index of the set. */,
                NXOpen::Plane * plane /** plane. */
            );
            /**  Gets the parameters from a plane target set.
                         The plane target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric plane defined in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to retrieve the parameters.
                      @return  plane 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Plane * GetTargetSetPlaneObject
            (
                int setIndex /** index of the set */
            );
            /**  Creates a point location target set.
                         The point location target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric point located in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to create the point location.
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetPointLocation
            (
                int setIndex /** index of the set */,
                const NXOpen::Point3d & position /** point location's position */
            );
            /**  Gets the position from a point location target set.
                         The point location target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric point located in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to retrieve the position.
                      @return  point location's position 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point3d GetTargetSetPointLocation
            (
                int setIndex /** index of the set */
            );
            /**  Creates a point location target set using a point.
                         The point location target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric point located in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to create the point location.
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetPointLocation
            (
                int setIndex /** index of the set */,
                NXOpen::Point * point /** point */
            );
            /**  Gets the point from a point location target set.
                         The point location target set is a special type of target set that does not rely on any FEM entities. It is
                         a purely geometric point located in space that may or may not touch any elements or nodes. It cannot 
                         rely on the standard @link CAE::SetManager::CreateCaeSet CAE::SetManager::CreateCaeSet@endlink  and 
                         @link CAE::CAESet::SetMembers CAE::CAESet::SetMembers@endlink  since and requires its own interface to retrieve the position.
                      @return  point 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point * GetTargetSetPoint
            (
                int setIndex /** index of the set */
            );
            /** Sets the parameters for a distributed planes set.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetDistributedPlanes
            (
                int setIndex /** Index of the set */,
                NXOpen::CAE::SetManager::DistributedPlanesPosition centerMethod /** Method used to define the sphere center */,
                NXOpen::Point * centerPoint /** Sphere manual center position. */,
                NXOpen::CAE::SetManager::DistributedPlanesPosition radiusMethod /** Method used to define the sphere radius */,
                NXOpen::Expression * radiusFactor /** Multiplying factor applied to the model bounding box diagonal to get the sphere radius. */,
                NXOpen::Expression * radiusValue /** Radius manual value. */,
                NXOpen::CAE::SetManager::DistributedPlanesBboxType bboxOption /** Bounding box definition option */,
                const std::vector<NXOpen::CAE::FEElement *> & bboxElems /** Selection used to calculate the bounding box for the manual bounding box option */,
                NXOpen::CAE::SetManager::DistributedPlanesBoundingSphereType spaceDefinition /** Type of bounding sphere (half or full) */,
                NXOpen::CAE::SetManager::DistributedPlanesBoundingSphereDirection sphereDirection /** Sphere direction definition method */,
                NXOpen::Direction * sphereDirectionVector /** For the sphere vector method: sphere direction vector */,
                NXOpen::Point * sphereDirectionPoint1 /** For the sphere 3 points normal method: 1st point */,
                NXOpen::Point * sphereDirectionPoint2 /** For the sphere 3 points normal method: 2nd point */,
                NXOpen::Point * sphereDirectionPoint3 /** For the sphere 3 points normal method: 3rd point */,
                bool flipNormal /** For the sphere 3 points normal method: flag to flip the normal direction */,
                int refinementLevel /** Refinement level of the distributed plave wave set. */
            );
            /** Gets the parameters for a distributed planes set.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetDistributedPlanes
            (
                int setIndex /** Index of the set */,
                NXOpen::CAE::SetManager::DistributedPlanesPosition* centerMethod /** Method used to define the sphere center */,
                NXOpen::Point ** centerPoint /** Sphere manual center position. */,
                NXOpen::CAE::SetManager::DistributedPlanesPosition* radiusMethod /** Method used to define the sphere radius */,
                NXOpen::Expression ** radiusFactor /** Multiplying factor applied to the model bounding box diagonal to get the sphere radius. */,
                NXOpen::Expression ** radiusValue /** Radius mahual value. */,
                NXOpen::CAE::SetManager::DistributedPlanesBboxType* bboxOption /** Bounding box definition option */,
                std::vector<NXOpen::CAE::FEElement *> & bboxElems /** Selection used to calculate the bounding box for the manual bounding box option */,
                NXOpen::CAE::SetManager::DistributedPlanesBoundingSphereType* spaceDefinition /** Type of bounding sphere (half or full) */,
                NXOpen::CAE::SetManager::DistributedPlanesBoundingSphereDirection* sphereDirection /** Sphere direction definition method */,
                NXOpen::Direction ** sphereDirectionVector /** For the sphere vector method: sphere direction vector */,
                NXOpen::Point ** sphereDirectionPoint1 /** For the sphere 3 points normal method: 1st point */,
                NXOpen::Point ** sphereDirectionPoint2 /** For the sphere 3 points normal method: 2nd point */,
                NXOpen::Point ** sphereDirectionPoint3 /** For the sphere 3 points normal method: 3rd point */,
                bool* flipNormal /** For the sphere 3 points normal method: flag to flip the normal direction */,
                int* refinementLevel /** Refinement level of the distributed plave wave set. */
            );
            /** Sets the CAE element edge path in the specified set
                     
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetElemEdgePath
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedEdges /** seed element edges to define the path */,
                const std::vector<NXOpen::CAE::FENode *> & seedVertices /** seed nodes to define the path */,
                const std::vector<bool> & preferFreeEdges /** if true for seed, prefer free element edges */,
                const std::vector<bool> & preferGeometryAssociatedEdges /** if true for seed, prefer geometry associated element edges*/,
                const std::vector<bool> & preferFeatureElementEdges /** if true for seed, prefer feature element edges*/,
                const std::vector<double> & featureAngleTolerance /** if preferFeatureElementEdge is true for seed, this is the feature angle tolerance to use*/,
                const std::vector<bool> & allowGapJumping /** if true for seed, gaps between element edges will be jumped*/,
                const std::vector<double> & gapJumpingTolerance /** if allowGapJumping is true for seed, this is the tolerance to use for jumping gaps between element edges*/,
                const std::vector<NXOpen::CAE::PathType> & pathMethodType /** path method type*/,
                const std::vector<double> & dTangentAngleTolerance /** tangent angle tolerance for most tangent path method type*/
            );
            /** Sets the CAE group in the specified set
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetGroup
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::CaeSetGroupFilterType filterType /** filter to extract type of objects from the group */,
                NXOpen::CAE::CaeGroup * group /** group to add to set */
            );
            /** Gets the CAE group in the specified set
                      @return  group object from set. may be NULL 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * GetTargetSetGroup
            (
                int setIndex /** index of the set */
            );
            /** Sets the CAE objects in the specified set
                     
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetMembers
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::SetObject> & objects /** objects to add to set */
            );
            /** Sets the CAE objects in the specified set
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetMembers
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::CaeSetGroupFilterType selRecipeFilter /** filter to extract type of objects from the selection recipe */,
                const std::vector<NXOpen::CAE::SetObject> & objects /** objects to add to set */
            );
            /** Sets the CAE objects in the specified target set exclude set
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetExcludedMembers
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::SetObject> & excludedObjects /** excluded objects to add to set */
            );
            /** Sets the CAE objects in the specified target set exclude set
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetExcludedMembers
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::CaeSetGroupFilterType selRecipeFilter /** filter to extract type of objects from the selection recipe */,
                const std::vector<NXOpen::CAE::SetObject> & objects /** excluded objects to add to set */
            );
            /** Gets the objects for the specified target set
                     
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetMembers
            (
                int setIndex /** index of the set */,
                NXOpen::NXObject ** displayCoordinateSystem /** display coordinate system */,
                std::vector<NXOpen::CAE::SetObject> & objects /** objects in set */
            );
            /** Gets the objects for the specified target set excluded set
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetExcludedMembers
            (
                int setIndex /** index of the set */,
                std::vector<NXOpen::CAE::SetObject> & objects /** objects in set */
            );
            /** Clears the objects stored in the set specified in
                        the set manager
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void CleanTargetSet
            (
                int setIndex /** index of the set in the set manager*/
            );
            /**  Creates a component target set. 
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetComponent
            (
                int setIndex /** index of the set */,
                NXOpen::CAE::FEModelOccurrence * comp /** component */
            );
            /**  Gets the component from a component target set.
                      @return  component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::FEModelOccurrence * GetTargetSetComponent
            (
                int setIndex /** index of the set */
            );
            /** Create and add shared edge target set with associated faces which determines the side for inner edges
                        Associated faces are optional 
                        By default shared edges have elements on both sides
                        Use @link CAE::SetManager::GetTargetSetMembers CAE::SetManager::GetTargetSetMembers@endlink  to get edges

                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetSharedEdgeWithFaces
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEEdge *> & edges /** edges to add to set */,
                const std::vector<NXOpen::CAE::CAEFace *> & faces /** associated faces to add to set which determines the side (OPTIONAL)*/
            );
            /** Gets associated faces on shared edge target set which determines the side for inner edges
                        Associated faces are optional 
                        Return no faces if associated faces are not specified for shared edge target set
                     
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetSharedEdgeFaces
            (
                int setIndex /** index of the targetset */,
                std::vector<NXOpen::CAE::CAEFace *> & faces /** associated faces in set */
            );
            /**  Creates a segment target set.
                         The segment target set is a special type of target.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetSegments
            (
                int setIndex /** index of the set. */,
                const std::vector<NXOpen::Curve *> & curves /** connected curves */
            );
            /**  Gets the curves from a segment target set.
                         The segment target set is a special type of target.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetSegments
            (
                int setIndex /** index of the set. */,
                std::vector<NXOpen::Curve *> & curves /** connected curves */
            );
            /**  Creates a revolution target set.
                         The revolution target set is a special type of target.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetRevolutionSegments
            (
                int setIndex /** index of the set. */,
                const std::vector<NXOpen::Curve *> & curves /** connected curves */
            );
            /**  Gets the curves from a revolution target set.
                         The revolution target set is a special type of target.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetTargetSetRevolutionSegments
            (
                int setIndex /** index of the set. */,
                std::vector<NXOpen::Curve *> & curves /** connected curves */
            );
            /** Deletes the specified target set. 
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteTargetSet
            (
                int setIndex /** index of the target set */
            );
            /** Create and add a face-curve target set.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSetFacesCurve
            (
                int setIndex /** index of the set */,
                const std::vector<NXOpen::CAE::CAEFace *> & faces /** target set faces */,
                NXOpen::Curve * curve /** curve to separate locations on faces into in and out */,
                bool reverse /** reverse */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
