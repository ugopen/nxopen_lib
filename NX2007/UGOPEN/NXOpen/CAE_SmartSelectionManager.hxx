#ifndef NXOpen_CAE_SMARTSELECTIONMANAGER_HXX_INCLUDED
#define NXOpen_CAE_SMARTSELECTIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SmartSelectionManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AdjacentFaceMethod.hxx>
#include <NXOpen/CAE_AttachedElemMethod.hxx>
#include <NXOpen/CAE_AttachedElemMethodAttachedByOption.hxx>
#include <NXOpen/CAE_CircularEdgeMethod.hxx>
#include <NXOpen/CAE_CylinderFaceMethod.hxx>
#include <NXOpen/CAE_EdgePathMethod.hxx>
#include <NXOpen/CAE_ElemEdgePathMethod.hxx>
#include <NXOpen/CAE_ElemLabelMethod.hxx>
#include <NXOpen/CAE_ElementTypes.hxx>
#include <NXOpen/CAE_FeatureEdgeNodeMethod.hxx>
#include <NXOpen/CAE_FeatureEdgeNodeMethodOptions.hxx>
#include <NXOpen/CAE_FeatureElemEdgeMethod.hxx>
#include <NXOpen/CAE_FeatureElemFaceMethod.hxx>
#include <NXOpen/CAE_FeatureElemMethod.hxx>
#include <NXOpen/CAE_FeatureElementEdgeType.hxx>
#include <NXOpen/CAE_FeatureNodeMethod.hxx>
#include <NXOpen/CAE_FeatureNodeMethodOptions.hxx>
#include <NXOpen/CAE_FeatureShellElemMethod.hxx>
#include <NXOpen/CAE_FilletFaceMethod.hxx>
#include <NXOpen/CAE_FilletFaceMethodRadiusType.hxx>
#include <NXOpen/CAE_FilterBodyCriteria.hxx>
#include <NXOpen/CAE_FilterBodyMethod.hxx>
#include <NXOpen/CAE_FilterEdgeMethod.hxx>
#include <NXOpen/CAE_FilterElemMethod.hxx>
#include <NXOpen/CAE_FilterElemThicknessCriteria.hxx>
#include <NXOpen/CAE_FilterFaceMethod.hxx>
#include <NXOpen/CAE_FilterNodeMethod.hxx>
#include <NXOpen/CAE_FreeElemEdgeMethod.hxx>
#include <NXOpen/CAE_FreeElemFaceMethod.hxx>
#include <NXOpen/CAE_GroupEdgeMethod.hxx>
#include <NXOpen/CAE_GroupElemEdgeMethod.hxx>
#include <NXOpen/CAE_GroupElemFaceMethod.hxx>
#include <NXOpen/CAE_GroupElemMethod.hxx>
#include <NXOpen/CAE_GroupElemMethodElemOption.hxx>
#include <NXOpen/CAE_GroupFaceMethod.hxx>
#include <NXOpen/CAE_GroupMethod.hxx>
#include <NXOpen/CAE_GroupNodeMethod.hxx>
#include <NXOpen/CAE_HoleElementEdgeMethod.hxx>
#include <NXOpen/CAE_NodeLabelMethod.hxx>
#include <NXOpen/CAE_NodeRelationshipType.hxx>
#include <NXOpen/CAE_OrderedEdgeElemMethod.hxx>
#include <NXOpen/CAE_OrderedEdgeNodeMethod.hxx>
#include <NXOpen/CAE_OrderedFeatureEdgeElemMethod.hxx>
#include <NXOpen/CAE_OrderedFeatureEdgeNodeMethod.hxx>
#include <NXOpen/CAE_PathEnclosedElemFaceMethod.hxx>
#include <NXOpen/CAE_PathMethodType.hxx>
#include <NXOpen/CAE_RelatedBodyMethod.hxx>
#include <NXOpen/CAE_RelatedCurveMethod.hxx>
#include <NXOpen/CAE_RelatedEdgeMethod.hxx>
#include <NXOpen/CAE_RelatedElemEdgeMethod.hxx>
#include <NXOpen/CAE_RelatedElemFaceMethod.hxx>
#include <NXOpen/CAE_RelatedElemFaceMethodFacePref.hxx>
#include <NXOpen/CAE_RelatedElemMethod.hxx>
#include <NXOpen/CAE_RelatedFaceMethod.hxx>
#include <NXOpen/CAE_RelatedNodeMethod.hxx>
#include <NXOpen/CAE_RelatedVertexMethod.hxx>
#include <NXOpen/CAE_ShortEdgeMethod.hxx>
#include <NXOpen/CAE_ShowAdjacentGroupMethod.hxx>
#include <NXOpen/CAE_ShowHideGroupMethod.hxx>
#include <NXOpen/CAE_SliverFaceMethod.hxx>
#include <NXOpen/CAE_SpiderCoreNodeMethod.hxx>
#include <NXOpen/CAE_TangentContinuousEdgeMethod.hxx>
#include <NXOpen/CAE_TangentFaceMethod.hxx>
#include <NXOpen/SelectionMethod.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SmartSelectionManager;
    }
    namespace CAE
    {
        class CaePart;
    }
    class Arc;
    namespace CAE
    {
        class AdjacentFaceMethod;
    }
    namespace CAE
    {
        class AttachedElemMethod;
    }
    namespace CAE
    {
        class CAEBody;
    }
    namespace CAE
    {
        class CAEEdge;
    }
    namespace CAE
    {
        class CAEFace;
    }
    namespace CAE
    {
        class CAEVertex;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        class CircularEdgeMethod;
    }
    namespace CAE
    {
        class CylinderFaceMethod;
    }
    namespace CAE
    {
        class EdgePathMethod;
    }
    namespace CAE
    {
        class ElemEdgePathMethod;
    }
    namespace CAE
    {
        class ElemLabelMethod;
    }
    namespace CAE
    {
        class FEElemEdge;
    }
    namespace CAE
    {
        class FEElemFace;
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class FeatureEdgeNodeMethod;
    }
    namespace CAE
    {
        class FeatureEdgeNodeMethodOptions;
    }
    namespace CAE
    {
        class FeatureElemEdgeMethod;
    }
    namespace CAE
    {
        class FeatureElemFaceMethod;
    }
    namespace CAE
    {
        class FeatureElemMethod;
    }
    namespace CAE
    {
        class FeatureNodeMethod;
    }
    namespace CAE
    {
        class FeatureNodeMethodOptions;
    }
    namespace CAE
    {
        class FeatureShellElemMethod;
    }
    namespace CAE
    {
        class FilletFaceMethod;
    }
    namespace CAE
    {
        class FilterBodyMethod;
    }
    namespace CAE
    {
        class FilterEdgeMethod;
    }
    namespace CAE
    {
        class FilterElemMethod;
    }
    namespace CAE
    {
        class FilterFaceMethod;
    }
    namespace CAE
    {
        class FilterNodeMethod;
    }
    namespace CAE
    {
        class FreeElemEdgeMethod;
    }
    namespace CAE
    {
        class FreeElemFaceMethod;
    }
    namespace CAE
    {
        class GroupEdgeMethod;
    }
    namespace CAE
    {
        class GroupElemEdgeMethod;
    }
    namespace CAE
    {
        class GroupElemFaceMethod;
    }
    namespace CAE
    {
        class GroupElemMethod;
    }
    namespace CAE
    {
        class GroupFaceMethod;
    }
    namespace CAE
    {
        class GroupMethod;
    }
    namespace CAE
    {
        class GroupNodeMethod;
    }
    namespace CAE
    {
        class HoleElementEdgeMethod;
    }
    namespace CAE
    {
        class Mesh;
    }
    namespace CAE
    {
        class MeshControl;
    }
    namespace CAE
    {
        class MeshPoint;
    }
    namespace CAE
    {
        class NamedPropertyTable;
    }
    namespace CAE
    {
        class NodeLabelMethod;
    }
    namespace CAE
    {
        class OrderedEdgeElemMethod;
    }
    namespace CAE
    {
        class OrderedEdgeNodeMethod;
    }
    namespace CAE
    {
        class OrderedFeatureEdgeNodeMethod;
    }
    namespace CAE
    {
        class PathEnclosedElemFaceMethod;
    }
    namespace CAE
    {
        class RelatedBodyMethod;
    }
    namespace CAE
    {
        class RelatedCurveMethod;
    }
    namespace CAE
    {
        class RelatedEdgeMethod;
    }
    namespace CAE
    {
        class RelatedElemEdgeMethod;
    }
    namespace CAE
    {
        class RelatedElemFaceMethod;
    }
    namespace CAE
    {
        class RelatedElemMethod;
    }
    namespace CAE
    {
        class RelatedFaceMethod;
    }
    namespace CAE
    {
        class RelatedNodeMethod;
    }
    namespace CAE
    {
        class RelatedVertexMethod;
    }
    namespace CAE
    {
        class ShortEdgeMethod;
    }
    namespace CAE
    {
        class ShowAdjacentGroupMethod;
    }
    namespace CAE
    {
        class ShowHideGroupMethod;
    }
    namespace CAE
    {
        class SliverFaceMethod;
    }
    namespace CAE
    {
        class SpiderCoreNodeMethod;
    }
    namespace CAE
    {
        class TangentContinuousEdgeMethod;
    }
    namespace CAE
    {
        class TangentFaceMethod;
    }
    class Conic;
    class Line;
    class PhysicalMaterial;
    class Point;
    class SelectionMethod;
    class Spline;
    namespace CAE
    {
        class SmartSelectionManagerImpl;
        /**  @brief  Provides methods for creating smart selection methods
            in a cae part  

           <br> To obtain an instance of this class, refer to @link NXOpen::CAE::CaePart  NXOpen::CAE::CaePart @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SmartSelectionManager
        {
            private: SmartSelectionManagerImpl * m_smartselectionmanager_impl;
            private: NXOpen::CAE::CaePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SmartSelectionManager(NXOpen::CAE::CaePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SmartSelectionManager();
            /** Creates a adjacent face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a adjacent face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a adjacent face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AdjacentFaceMethod * CreateAdjacentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a circular edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a circular edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CircularEdgeMethod * CreateCircularEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinRadius /** minimum radius*/,
                double dMaxRadius /** maximum radius*/,
                bool onlyHoleEdges /** if true, only edges which make up holes will be returned */
            );
            /** Creates a cylinder face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a cylinder face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a cylinder face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CylinderFaceMethod * CreateCylinderFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinCylinderRadius /** minimum cylinder radius*/,
                double dMaxCylinderRadius /** maximum cylinder radius*/,
                double dMinCylinderAngle /** minimum cylinder angle*/,
                double dMaxCylinderAngle /** maximum cylinder angle*/
            );
            /** Creates a path enclosed elem face method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::PathEnclosedElemFaceMethod * CreatePathEnclosedElemFaceMethod
            (
                NXOpen::CAE::ElemEdgePathMethod * inputMethod /** input elem edge path method (must be a closed path) */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipLoopDirection /** if true, the inside of the loop is defined by the counterclockwise loop direction */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates an edge path method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::EdgePathMethod * CreateEdgePathMethod
            (
                NXOpen::CAE::CAEEdge * seedEdgeTag /** seed edge tag*/,
                NXOpen::CAE::CAEVertex * seedStartVertexTag /** seed start vertex*/,
                bool preferFreeEdges /** if true, prefer free edges*/,
                bool allowGapJumping /** if true, gaps between edges will be jumped*/,
                double gapJumpingTolerance /** if allowGapJumping is true, this is the tolerance to use for jumping gaps between edges*/,
                NXOpen::CAE::PathType pathMethodType /** path method type*/,
                double dTangentAngleTolerance /** tangent angle tolerance for most tangent path method type*/
            );
            /** Creates a closed edge path method 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::EdgePathMethod * CreateClosedEdgePathMethod
            (
                NXOpen::CAE::CAEEdge * seedEdgeTag /** seed edge tag*/,
                bool flipEdge /** true if edge is flipped in the path */
            );
            /** Creates an elem edge path method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElemEdgePathMethod * CreateElemEdgePathMethod
            (
                NXOpen::CAE::FEElemEdge * seedElemEdgeTag /** seed element edge*/,
                NXOpen::CAE::FENode * seedStartNodeTag /** seed start node*/,
                bool preferFreeEdges /** if true, prefer free element edges*/,
                bool preferGeometryAssociatedEdges /** if true, prefer geometry associated element edges*/,
                bool preferFeatureElementEdge /** if true, prefer feature element edges*/,
                double featureAngleTolerance /** if preferFeatureElementEdge is true, this is the feature angle tolerance to use*/,
                bool allowGapJumping /** if true, gaps between element edges will be jumped*/,
                double gapJumpingTolerance /** if allowGapJumping is true, this is the tolerance to use for jumping gaps between element edges*/,
                NXOpen::CAE::PathType pathMethodType /** path method type*/,
                double dTangentAngleTolerance /** tangent angle tolerance for most tangent path method type*/
            );
            /** Creates a feature edge node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromMethod NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromMethod@endlink . <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromMethod.") NXOpen::CAE::FeatureEdgeNodeMethod * CreateFeatureEdgeNodeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                NXOpen::CAE::Type edgeType /** compute element edge type*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature edge node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromElemEdges NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromElemEdges@endlink . <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewFeatureEdgeNodeMethodFromElemEdges.") NXOpen::CAE::FeatureEdgeNodeMethod * CreateFeatureEdgeNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedTags /** seed element edge tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                NXOpen::CAE::Type edgeType /** compute element edge type*/,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a @link  NXOpen::CAE::FeatureEdgeNodeMethodOptions   NXOpen::CAE::FeatureEdgeNodeMethodOptions @endlink 
                     @return  the options object created 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureEdgeNodeMethodOptions * NewFeatureEdgeNodeMethodOptions
            (
            );
            /** Creates a feature edge node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureEdgeNodeMethod * CreateNewFeatureEdgeNodeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::CAE::FeatureEdgeNodeMethodOptions * options /** options */ 
            );
            /** Creates a feature edge node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureEdgeNodeMethod * CreateNewFeatureEdgeNodeMethodFromElemEdges
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedTags /** seed element edge tags*/,
                NXOpen::CAE::FeatureEdgeNodeMethodOptions * options /** options */ 
            );
            /** Creates a feature elem edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemEdgeMethod * CreateFeatureElemEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                NXOpen::CAE::Type edgeType /** compute element edge type*/,
                double dFeatureAngle /** feature angle, This input is ignored when you select mesh as input*/
            );
            /** Creates a feature elem edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemEdgeMethod * CreateFeatureElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedTags /** seed element edge tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                NXOpen::CAE::Type edgeType /** compute element edge type*/,
                double dFeatureAngle /** feature angle, This input is ignored when you select mesh as input*/
            );
            /** Creates a feature elem edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemEdgeMethod * CreateFeatureElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seedTags /** seed element edge tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                NXOpen::CAE::Type edgeType /** compute element edge type*/,
                double dFeatureAngle /** feature angle, This input is ignored when you select mesh as input*/
            );
            /** Creates a feature elem face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemFaceMethod * CreateFeatureElemFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemFaceMethod * CreateFeatureElemFaceMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemMethod * CreateFeatureElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature elem method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureElemMethod * CreateFeatureElemMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature shell elem method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureShellElemMethod * CreateFeatureShellElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature shell elem method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureShellElemMethod * CreateFeatureShellElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed shell element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromMethod NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromMethod@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromMethod.") NXOpen::CAE::FeatureNodeMethod * CreateFeatureNodeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a feature node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromElemFaces NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromElemFaces@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewFeatureNodeMethodFromElemFaces.") NXOpen::CAE::FeatureNodeMethod * CreateFeatureNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a @link  NXOpen::CAE::FeatureNodeMethodOptions   NXOpen::CAE::FeatureNodeMethodOptions @endlink 
                     @return  the options object created 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureNodeMethodOptions * NewFeatureNodeMethodOptions
            (
            );
            /** Creates a feature node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureNodeMethod * CreateNewFeatureNodeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::CAE::FeatureNodeMethodOptions * options /** options */ 
            );
            /** Creates a feature node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FeatureNodeMethod * CreateNewFeatureNodeMethodFromElemFaces
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                NXOpen::CAE::FeatureNodeMethodOptions * options /** options */ 
            );
            /** Creates a fillet face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a fillet face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a fillet face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilletFaceMethod * CreateFilletFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::RadiusType radiusType /** fillet face radius type*/,
                double dMinFilletRadius /** minimum fillet radius*/,
                double dMaxFilletRadius /** maximum fillet radius*/,
                double dMinFilletAngle /** minimum fillet angle*/,
                double dMaxFilletAngle /** maximum fillet angle*/
            );
            /** Creates a group method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupMethod * CreateGroupMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group element method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupElemMethod * CreateGroupElemMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::GroupElemMethodElemOption::ElemOption elemOption /** specifies what types of elements to extract from the group */
            );
            /** Creates a group element edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupElemEdgeMethod * CreateGroupElemEdgeMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group element face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupElemFaceMethod * CreateGroupElemFaceMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupEdgeMethod * CreateGroupEdgeMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupFaceMethod * CreateGroupFaceMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewGroupNodeMethod NXOpen::CAE::SmartSelectionManager::CreateNewGroupNodeMethod@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewGroupNodeMethod.") NXOpen::CAE::GroupNodeMethod * CreateGroupNodeMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a group node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupNodeMethod * CreateNewGroupNodeMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a show adjacent group method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShowAdjacentGroupMethod * CreateShowAdjacentGroupMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a show hide group method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShowHideGroupMethod * CreateShowHideGroupMethod
            (
                NXOpen::CAE::CaeGroup * seed /** seed group*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a ordered edge node method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeNodeMethod * CreateOrderedEdgeNodeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge node method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeNodeMethod * CreateOrderedEdgeNodeMethod
            (
                NXOpen::Line * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge node method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeNodeMethod * CreateOrderedEdgeNodeMethod
            (
                NXOpen::Arc * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge node method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeNodeMethod * CreateOrderedEdgeNodeMethod
            (
                NXOpen::Conic * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge node method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeNodeMethod * CreateOrderedEdgeNodeMethod
            (
                NXOpen::Spline * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeElemMethod * CreateOrderedEdgeElemMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeElemMethod * CreateOrderedEdgeElemMethod
            (
                NXOpen::Line * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeElemMethod * CreateOrderedEdgeElemMethod
            (
                NXOpen::Arc * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeElemMethod * CreateOrderedEdgeElemMethod
            (
                NXOpen::Conic * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered edge elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedEdgeElemMethod * CreateOrderedEdgeElemMethod
            (
                NXOpen::Spline * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool flipSeedStart /** specifies start end*/
            );
            /** Creates a ordered feature edge node method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedFeatureEdgeNodeMethod * CreateOrderedFeatureEdgeNodeMethod
            (
                NXOpen::CAE::FEElemEdge * seedTag /** seedtag */ ,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool flipSeedStart /** specifies start end*/,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a ordered feature edge elem method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::OrderedFeatureEdgeNodeMethod * CreateOrderedFeatureEdgeElemMethod
            (
                NXOpen::CAE::FEElemEdge * seedTag /** seedtag */ ,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool computeFreeEdgesOnVisibleModel /** if true, free edges are computed with respect to the visible elements in the model */,
                bool flipSeedStart /** specifies start end*/,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a related curve method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedCurveMethod * CreateRelatedCurveMethod
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seeds /** seed elements*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related curve method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedCurveMethod * CreateRelatedCurveMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related curve method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedCurveMethod * CreateRelatedCurveMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related curve method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related curve method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedCurveMethod * CreateRelatedCurveMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seeds /** seed element edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEVertex *> & seeds /** seed vertices*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related edge method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedEdgeMethod * CreateRelatedEdgeMethod
            (
                const std::vector<NXOpen::CAE::MeshControl *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem edge method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem edge method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem edge method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemEdgeMethod * CreateRelatedElemEdgeMethod
            (
                NXOpen::Spline * seed /** seed curve*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument selectOnly3DElementsFaces. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument selectOnly3DElementsFaces.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument selectOnly3DElementsFaces. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument selectOnly3DElementsFaces.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument selectOnly3DElementsFaces. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument selectOnly3DElementsFaces.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes as input an array of @link NXOpen::CAE::Mesh NXOpen::CAE::Mesh@endlink  objects. <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes as input an array of NXOpen::CAE::Mesh objects.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes as input an array of @link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink  objects. <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes as input an array of NXOpen::CAE::CAEFace objects.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Line *> & seedTags /** seed lines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Arc *> & seedTags /** seed arcs*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Conic *> & seedTags /** seed conics*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Spline *> & seedTags /** seed splines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                const std::vector<NXOpen::Point *> & seedTags /** seed points*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::Mesh * seedTag /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEBody * seedTag /** seed body*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEFace * seedTag /** seed face*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::CAEEdge * seedTag /** seed edge*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::CAE::FENode * seedTag /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::Line * seedTag /** seed line*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::Arc * seedTag /** seed arc*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::Conic * seedTag /** seed conic*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related elem method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemMethod * CreateRelatedElemMethod
            (
                NXOpen::Spline * seedTag /** seed spline*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::FENode * seed /** seed node*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                NXOpen::CAE::FEElemFace * seedTag /** seed element face tag*/,
                int seedElemFaceId /** seed element face id*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMethod NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMethod@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMethod.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedFaceMethod * CreateRelatedFaceMethod
            (
                const std::vector<NXOpen::CAE::MeshControl *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshes NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshes@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshes.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBodies NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBodies@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBodies.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFaces NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFaces@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFaces.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdges NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdges@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdges.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromVertices NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromVertices@endlink . <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromVertices.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::CAEVertex *> & seeds /** seed vertices*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElems NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElems@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElems.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed elements*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoints NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoints@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoints.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::MeshPoint *> & seedTags /** seed mesh points*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoints NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoints@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoints.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Point *> & seedTags /** seed points*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLines NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLines@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLines.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Line *> & seedTags /** seed lines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArcs NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArcs@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArcs.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Arc *> & seedTags /** seed arcs*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConics NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConics@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConics.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Conic *> & seedTags /** seed conics*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSplines NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSplines@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSplines.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::Spline *> & seedTags /** seed splines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdges NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdges@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdges.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedTags /** seed element edge tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFaces NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFaces@endlink . <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFaces.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMesh NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMesh@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMesh.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBody NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBody@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromBody.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFace NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFace@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromFace.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdge NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdge@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromEdge.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElem NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElem@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElem.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::FEElement * seed /** seed elem*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoint NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoint@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromMeshPoint.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::MeshPoint * seed /** seed mesh point*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoint NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoint@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromPoint.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::Point * seed /** seed point*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLine NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLine@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromLine.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::Line * seed /** seed line*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArc NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArc@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromArc.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::Arc * seed /** seed arc*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConic NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConic@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromConic.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::Conic * seed /** seed conic*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSpline NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSpline@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromSpline.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::Spline * seed /** seed spline*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdge NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdge@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemEdge.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::FEElemEdge * seedTag /** seed element edge tag*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFace NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFace@endlink . <br>  

             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewRelatedNodeMethodFromElemFace.") NXOpen::CAE::RelatedNodeMethod * CreateRelatedNodeMethod
            (
                NXOpen::CAE::FEElemFace * seedTag /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromMeshes
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromBodies
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromFaces
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromEdges
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromVertices
            (
                const std::vector<NXOpen::CAE::CAEVertex *> & seeds /** seed vertices*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed elements*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromMeshPoints
            (
                const std::vector<NXOpen::CAE::MeshPoint *> & seedTags /** seed mesh points*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromPoints
            (
                const std::vector<NXOpen::Point *> & seedTags /** seed points*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromLines
            (
                const std::vector<NXOpen::Line *> & seedTags /** seed lines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromArcs
            (
                const std::vector<NXOpen::Arc *> & seedTags /** seed arcs*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromConics
            (
                const std::vector<NXOpen::Conic *> & seedTags /** seed conics*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromSplines
            (
                const std::vector<NXOpen::Spline *> & seedTags /** seed splines*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElemEdges
            (
                const std::vector<NXOpen::CAE::FEElemEdge *> & seedTags /** seed element edge tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElemFaces
            (
                const std::vector<NXOpen::CAE::FEElemFace *> & seedTags /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromMesh
            (
                NXOpen::CAE::Mesh * seed /** seed mesh*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromBody
            (
                NXOpen::CAE::CAEBody * seed /** seed body*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromFace
            (
                NXOpen::CAE::CAEFace * seed /** seed face*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromEdge
            (
                NXOpen::CAE::CAEEdge * seed /** seed edge*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElem
            (
                NXOpen::CAE::FEElement * seed /** seed elem*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromMeshPoint
            (
                NXOpen::CAE::MeshPoint * seed /** seed mesh point*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromPoint
            (
                NXOpen::Point * seed /** seed point*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromLine
            (
                NXOpen::Line * seed /** seed line*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromArc
            (
                NXOpen::Arc * seed /** seed arc*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromConic
            (
                NXOpen::Conic * seed /** seed conic*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromSpline
            (
                NXOpen::Spline * seed /** seed spline*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElemEdge
            (
                NXOpen::CAE::FEElemEdge * seedTag /** seed element edge tag*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedNodeMethod * CreateNewRelatedNodeMethodFromElemFace
            (
                NXOpen::CAE::FEElemFace * seedTag /** seed element face tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related vertex method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedVertexMethod * CreateRelatedVertexMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a short edge method 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShortEdgeMethod * CreateShortEdgeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dEdgeTolerance /** edge tolerance*/
            );
            /** Creates a short edge method 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShortEdgeMethod * CreateShortEdgeMethodFromBodies
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dEdgeTolerance /** edge tolerance*/
            );
            /** Creates a short face method 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShortEdgeMethod * CreateShortEdgeMethodFromFaces
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dEdgeTolerance /** edge tolerance*/
            );
            /** Creates a short edge method 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShortEdgeMethod * CreateShortEdgeMethodFromEdges
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dEdgeTolerance /** edge tolerance*/
            );
            /** Creates a sliver face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a sliver face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a sliver face method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SliverFaceMethod * CreateSliverFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dSliverTolerance /** sliver tolerance*/
            );
            /** Creates a tangent face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentFaceMethod * CreateTangentFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dTangentTolerance /** tangent tolerance*/
            );
            /** Creates a tangent face method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentFaceMethod * CreateTangentFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool stopAtNonManifoldJunctions /** if true, the method's output will not span non-manifold junctions */,
                double dTangentTolerance /** tangent tolerance*/
            );
            /** Creates a tangent continuous edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentContinuousEdgeMethod * CreateTangentContinuousEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a tangent continuous edge method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::TangentContinuousEdgeMethod * CreateTangentContinuousEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dFeatureAngle /** feature angle*/
            );
            /** Creates a hole element edge method from element free edge 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::HoleElementEdgeMethod * CreateHoleElementEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinElementEdgeHoleRadius /** minimum element edge hole radius*/,
                double dMaxElementEdgeHoleRadius /** maximum element edge hole radius*/,
                bool allowNonCircularHoles /** if true, all non-cicular hole edges  will be returned */
            );
            /** Creates a hole element edge method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::HoleElementEdgeMethod * CreateHoleElementEdgeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinElementEdgeHoleRadius /** minimum element edge hole radius*/,
                double dMaxElementEdgeHoleRadius /** maximum element edge hole radius*/,
                bool allowNonCircularHoles /** if true, all non-cicular hole edges  will be returned */
            );
            /** Creates a hole element edge method from element free edge 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::HoleElementEdgeMethod * CreateHoleElementEdgeMethod
            (
                NXOpen::CAE::FEElemEdge * seedElemEdgeTag /** seed element edge*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                double dMinElementEdgeHoleRadius /** minimum element edge hole radius*/,
                double dMaxElementEdgeHoleRadius /** maximum element edge hole radius*/,
                bool allowNonCircularHoles /** if true, all non-cicular hole edges  will be returned */
            );
            /** Creates an element label method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ElemLabelMethod * CreateElemLabelMethod
            (
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                int startLabel /** start label */,
                int endLabel /** end label */,
                int labelIncrement /** label increment */
            );
            /** Creates a node label method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::NodeLabelMethod * CreateNodeLabelMethod
            (
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                int startLabel /** start label */,
                int endLabel /** end label */,
                int labelIncrement /** label increment */
            );
            /** Creates a filter element method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod@endlink . <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod.") NXOpen::CAE::FilterElemMethod * CreateFilterElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seeds /** seed elements*/,
                NXOpen::CAE::NamedPropertyTable * physical /** physical*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                int neutraltype /** nuetral type */,
                NXOpen::CAE::Criteria thicknessCriteria /** true denotes min, max value, false for descrete values */,
                double minThickness /** minimum thickness*/,
                double maxThickness /** maximum thickness*/,
                const std::vector<double> & thicknesses /** descrete thickness values*/
            );
            /** Creates a filter element method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod@endlink . <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateFilterElemMethod.") NXOpen::CAE::FilterElemMethod * CreateFilterElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::CAE::NamedPropertyTable * physical /** physical*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                int neutraltype /** nuetral type */,
                NXOpen::CAE::Criteria thicknessCriteria /** true denotes min, max value, false for descrete values */,
                double minThickness /** minimum thickness*/,
                double maxThickness /** maximum thickness*/,
                const std::vector<double> & thicknesses /** descrete thickness values*/
            );
            /** Creates a filter element method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterElemMethod * CreateFilterElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seeds /** seed elements*/,
                NXOpen::CAE::NamedPropertyTable * physical /** physical*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                NXOpen::CAE::ElementTypes::Dimension elemDimension /** element dimension */,
                NXOpen::CAE::ElementTypes::NeutralType neutralType /** element neutral type */,
                NXOpen::CAE::Criteria thicknessCriteria /** true denotes min, max value, false for descrete values */,
                double minThickness /** minimum thickness*/,
                double maxThickness /** maximum thickness*/,
                const std::vector<double> & thicknesses /** descrete thickness values*/
            );
            /** Creates a filter element method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterElemMethod * CreateFilterElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::CAE::NamedPropertyTable * physical /** physical*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                NXOpen::CAE::ElementTypes::Dimension elemDimension /** element dimension */,
                NXOpen::CAE::ElementTypes::NeutralType neutralType /** element neutral type */,
                NXOpen::CAE::Criteria thicknessCriteria /** true denotes min, max value, false for descrete values */,
                double minThickness /** minimum thickness*/,
                double maxThickness /** maximum thickness*/,
                const std::vector<double> & thicknesses /** descrete thickness values*/
            );
            /** Creates a filter element method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterElemMethod * CreateFilterElemMethodFromModel
            (
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::NamedPropertyTable * physical /** physical*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                NXOpen::CAE::ElementTypes::Dimension elemDimension /** element dimension */,
                NXOpen::CAE::ElementTypes::NeutralType neutralType /** element neutral type */,
                NXOpen::CAE::Criteria thicknessCriteria /** true denotes min, max value, false for descrete values */,
                double minThickness /** minimum thickness*/,
                double maxThickness /** maximum thickness*/,
                const std::vector<double> & thicknesses /** descrete thickness values*/
            );
            /** Creates a filter node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterNodeMethod * CreateFilterNodeMethod
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a filter node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterNodeMethod * CreateFilterNodeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a filter node method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterNodeMethod * CreateFilterNodeMethodFromModel
            (
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool selectOnlyCornerNodes /** if true, only corner nodes will be returned */
            );
            /** Creates a filter body method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod@endlink  which takes argument bodyType. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod which takes argument bodyType.") NXOpen::CAE::FilterBodyMethod * CreateFilterBodyMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                bool filterbyVolume /** filter by volume */,
                double minVolume /** minimum volume*/,
                double maxVolume /** maximum volume*/
            );
            /** Creates a filter body method 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod@endlink  which takes argument bodyType. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateFilterBodyMethod which takes argument bodyType.") NXOpen::CAE::FilterBodyMethod * CreateFilterBodyMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::PhysicalMaterial * material /** material*/,
                bool filterbyVolume /** filter by volume */,
                double minVolume /** minimum volume*/,
                double maxVolume /** maximum volume*/
            );
            /** Creates a filter face method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterFaceMethod * CreateFilterFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                double minArea /** minimum area*/,
                double maxArea /** maximum area*/
            );
            /** Creates a filter face method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterFaceMethod * CreateFilterFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                double minArea /** minimum area*/,
                double maxArea /** maximum area*/
            );
            /** Creates a filter edge method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterEdgeMethod * CreateFilterEdgeMethod
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                double minLength /** minimum length*/,
                double maxLength /** maximum length*/
            );
            /** Creates a filter edge method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterEdgeMethod * CreateFilterEdgeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                double minLength /** minimum length*/,
                double maxLength /** maximum length*/
            );
            /** Creates a filter body method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterBodyMethod * CreateFilterBodyMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                NXOpen::PhysicalMaterial * material /** material*/,
                bool filterbyVolume /** filter by volume */,
                double minVolume /** minimum volume*/,
                double maxVolume /** maximum volume*/,
                NXOpen::CAE::BodyType bodyType /** type of body*/
            );
            /** Creates a filter body method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FilterBodyMethod * CreateFilterBodyMethod
            (
                const std::vector<NXOpen::CAE::CAEBody *> & seeds /** seed bodies*/,
                NXOpen::PhysicalMaterial * material /** material*/,
                bool filterbyVolume /** filter by volume */,
                double minVolume /** minimum volume*/,
                double maxVolume /** maximum volume*/,
                NXOpen::CAE::BodyType bodyType /** type of body*/
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument Free Face Computation. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument Free Face Computation.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument Free Face Computation. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument Free Face Computation.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument Free Face Computation. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument Free Face Computation.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/
            );
            /** Creates a related elem face method 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use overloaded @link NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod@endlink  which takes argument Free Face Computation. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use overloaded NXOpen::CAE::SmartSelectionManager::CreateRelatedElemFaceMethod which takes argument Free Face Computation.") NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/
            );
            /** Creates a spider core node method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SpiderCoreNodeMethod * CreateSpiderCoreNodeMethod
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a spider core node method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SpiderCoreNodeMethod * CreateSpiderCoreNodeMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates an attached elem method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromElems NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromElems@endlink . <br>  

             <br>  Created in NX1911.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromElems.") NXOpen::CAE::AttachedElemMethod * CreateAttachedElemMethod
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool isLimitIterations /** if true, selection iterations are not infinite , they are limited */,
                int numIterations /** numiterations */ ,
                NXOpen::CAE::AttachedByOption attachedByOption /** Elems attached by option*/
            );
            /** Creates an attached elem method 
             <br>  @deprecated Deprecated in NX2007.0.0.  Use @link NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromMethod NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromMethod@endlink . <br>  

             <br>  Created in NX1911.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  Use NXOpen::CAE::SmartSelectionManager::CreateNewAttachedElemMethodFromMethod.") NXOpen::CAE::AttachedElemMethod * CreateAttachedElemMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool isLimitIterations /** if true, selection iterations are not infinite , they are limited */,
                int numIterations /** numiterations */ ,
                NXOpen::CAE::AttachedByOption attachedByOption /** Elems attached by option*/
            );
            /** Creates a related elem face method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethodFromMeshes
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */
            );
            /** Creates a related elem face method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::NodeRelationshipType nodeRelationship /** node relationship */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */
            );
            /** Creates a related elem face method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethodFromFaces
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */
            );
            /** Creates a related elem face method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */
            );
            /** Creates a related elem face method 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedElemFaceMethod * CreateRelatedElemFaceMethodFromNodes
            (
                const std::vector<NXOpen::CAE::FENode *> & seedTags /** node tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                NXOpen::CAE::NodeRelationshipType nodeRelationship /** node relationship */,
                NXOpen::CAE::FacePref facePreference /** element faces preference*/,
                bool computeFreeFacesOnVisibleModel /** if true, free faces are computed with respect to the visible elements in the model */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromNodes
            (
                const std::vector<NXOpen::CAE::FENode *> & seeds /** seed nodes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromMeshes
            (
                const std::vector<NXOpen::CAE::Mesh *> & seeds /** seed meshes*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromFaces
            (
                const std::vector<NXOpen::CAE::CAEFace *> & seeds /** seed faces*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromEdges
            (
                const std::vector<NXOpen::CAE::CAEEdge *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a related body method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::RelatedBodyMethod * CreateRelatedBodyMethodFromVertices
            (
                const std::vector<NXOpen::CAE::CAEVertex *> & seeds /** seed edges*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates an attached elem method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AttachedElemMethod * CreateNewAttachedElemMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool doJumpContactandGluing /** if true, Contacts and gluing entities will be returned */,
                bool isLimitIterations /** if true, selection iterations are not infinite , they are limited */,
                int numIterations /** numiterations */ ,
                NXOpen::CAE::AttachedByOption attachedByOption /** Elems attached by option*/
            );
            /** Creates an attached elem method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::AttachedElemMethod * CreateNewAttachedElemMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */,
                bool doJumpContactandGluing /** if true, Contacts and gluing entities will be returned */,
                bool isLimitIterations /** if true, selection iterations are not infinite , they are limited */,
                int numIterations /** numiterations */ ,
                NXOpen::CAE::AttachedByOption attachedByOption /** Elems attached by option*/
            );
            /** Creates a free elem edge method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FreeElemEdgeMethod * CreateFreeElemEdgeMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a free elem edge method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FreeElemEdgeMethod * CreateFreeElemEdgeMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a free elem face method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FreeElemFaceMethod * CreateFreeElemFaceMethodFromElems
            (
                const std::vector<NXOpen::CAE::FEElement *> & seedTags /** seed element tags*/,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
            /** Creates a free elem face method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::FreeElemFaceMethod * CreateFreeElemFaceMethodFromMethod
            (
                NXOpen::SelectionMethod * inputMethod /** input selection method */,
                bool doEntityVisibilityCheck /** if true, visible entities will be returned */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
