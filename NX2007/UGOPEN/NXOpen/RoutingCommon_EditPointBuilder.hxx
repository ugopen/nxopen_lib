#ifndef NXOpen_ROUTINGCOMMON_EDITPOINTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_EDITPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_EditPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/RoutingCommon_TransformBlockBuilder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class EditPointBuilder;
    }
    class Builder;
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace RoutingCommon
    {
        class TransformBlockBuilder;
    }
    namespace RoutingCommon
    {
        class _EditPointBuilderBuilder;
        class EditPointBuilderImpl;
        /** Represents @link NXOpen::RoutingCommon::EditPointBuilder NXOpen::RoutingCommon::EditPointBuilder@endlink .  <br> To create a new instance of this class, use @link NXOpen::RoutingCommon::BuilderFactory::CreateEditPointBuilder  NXOpen::RoutingCommon::BuilderFactory::CreateEditPointBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  EditPointBuilder : public NXOpen::Builder
        {
            /** Specifies the options available for motion. 
                    */
            public: enum Motiontype
            {
                MotiontypeMovePoint/** Move Point Motion */,
                MotiontypeEditSegment/** Edit Segment Motion */
            };

            /** Specifies the options available for Edit Segment motion. 
                    */
            public: enum Editsegmenttype
            {
                EditsegmenttypeNone/** Move Point Motion */,
                EditsegmenttypeLength/** Edit length type in Edit Segment Motion */,
                EditsegmenttypeAngle/** Edit angle type in Edit Segment Motion */
            };

            private: EditPointBuilderImpl * m_editpointbuilder_impl;
            private: friend class  _EditPointBuilderBuilder;
            protected: EditPointBuilder();
            public: ~EditPointBuilder();
            /**Returns  the routing objects that are being edited. The object can be a Routing Control Point 
                        or routing port or one of their occurences. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * PointSelection
            (
            );
            /**Returns  the transform tool.
                        Allows you to access the transform block object.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::TransformBlockBuilder * TransformTool
            (
            );
            /**Returns  the motion type setting.
                        Allows you to specify the type of edit point motion to be applied. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::EditPointBuilder::Motiontype ActiveMotionType
            (
            );
            /**Sets  the motion type setting.
                        Allows you to specify the type of edit point motion to be applied. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetActiveMotionType
            (
                NXOpen::RoutingCommon::EditPointBuilder::Motiontype motionType /** motiontype */ 
            );
            /**Returns  the maintain length setting.
                        Allows you to specify if the lengths of segments connected at the RCP or Port being edited must be fixed
                        during transformation. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MaintainLength
            (
            );
            /**Sets  the maintain length setting.
                        Allows you to specify if the lengths of segments connected at the RCP or Port being edited must be fixed
                        during transformation. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMaintainLength
            (
                bool maintainLength /** maintainlength */ 
            );
            /**Returns  the maintain angle setting.
                        Allows you to specify if the angles between segments connected at the RCP or Port being edited must be fixed
                        during transformation. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MaintainAngle
            (
            );
            /**Sets  the maintain angle setting.
                        Allows you to specify if the angles between segments connected at the RCP or Port being edited must be fixed
                        during transformation. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMaintainAngle
            (
                bool maintainAngle /** maintainangle */ 
            );
            /**Returns  the segment length setting.
                        Allows you to specify new length for a segment connected at the RCP or Port being edited. 

                        New length is applied on the segment by moving the RCP or Port being edited. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double SegmentLength
            (
            );
            /**Sets  the segment length setting.
                        Allows you to specify new length for a segment connected at the RCP or Port being edited. 

                        New length is applied on the segment by moving the RCP or Port being edited. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSegmentLength
            (
                double segmentLength /** segmentlength */ 
            );
            /**Returns  the segment setting.
                        Allows you to specify a segment connected at the RCP or Port being edited.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ISegment * Segment
            (
            );
            /**Sets  the segment setting.
                        Allows you to specify a segment connected at the RCP or Port being edited.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSegment
            (
                NXOpen::Routing::ISegment * segment /** segment */ 
            );
            /** Begin a drag operation.  
                        
                        Creates a constraint network of routing objects connected to the routing object that is being edited.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StartDrag
            (
            );
            /** Perform a drag operation.  
                        
                        Solves the constraint network applying the transform required to move the routing object to a new position.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DragObjects
            (
            );
            /** End a drag operation 
                        
                        Applies the transforms obtained from solving the constraint network on routing objects. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StopDrag
            (
            );
            /** Reset a drag operation 
                        
                        Resets the position of routing objects in constraint network back to their initial position.  
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ResetDrag
            (
            );
            /**Returns  the bend angle setting.
                        Allows you to specify new angle for a segment connected at the RCP or Port being edited. Reference
                        for angle measurement is the other segment connected at the RCP or Port being edited.

                        Is applicable only when there are two segments connected at RCP or Port being edited. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double BendAngle
            (
            );
            /**Sets  the bend angle setting.
                        Allows you to specify new angle for a segment connected at the RCP or Port being edited. Reference
                        for angle measurement is the other segment connected at the RCP or Port being edited.

                        Is applicable only when there are two segments connected at RCP or Port being edited. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendAngle
            (
                double bendAngle /** bendangle */ 
            );
            /**Returns  the edit segment type setting             
                        Allows you to specify the type of edit in edit segment motion.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::EditPointBuilder::Editsegmenttype ActiveEditSegmentType
            (
            );
            /**Sets  the edit segment type setting             
                        Allows you to specify the type of edit in edit segment motion.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetActiveEditSegmentType
            (
                NXOpen::RoutingCommon::EditPointBuilder::Editsegmenttype editSegmentType /** editsegmenttype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
