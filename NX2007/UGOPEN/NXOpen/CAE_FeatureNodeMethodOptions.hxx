#ifndef NXOpen_CAE_FEATURENODEMETHODOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_FEATURENODEMETHODOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FeatureNodeMethodOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FeatureNodeMethodOptions;
    }
    namespace CAE
    {
        class FeatureNodeMethodOptionsImpl;
        /**  @brief  Represents the FEM creation options to be used when a FEM part is created  

          <br> To obtain an instance of this class use CAE::SmartSelectionManager  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FeatureNodeMethodOptions : public NXOpen::TransientObject
        {
            private: FeatureNodeMethodOptionsImpl * m_featurenodemethodoptions_impl;
            /// \cond NX_NO_DOC 
            public: explicit FeatureNodeMethodOptions(void *ptr);
            /// \endcond 
            /** Destroys the object 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~FeatureNodeMethodOptions();
            /** Set flag for entity visibility check 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoEntityVisibilityCheck
            (
                bool doEntityVisibilityCheck /** If true, visible entities will be returned */
            );
            /** Set flag for compute free s on visible model 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComputeFreesOnVisibleModel
            (
                bool computeFreesOnVisibleModel /** If true, free s are computed with respect to the visible elements in the model */
            );
            /** Set flag for stop at non-manifold junctions 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStopAtNonmanifoldJunctions
            (
                bool stopAtNonManifoldJunctions /** If true, the method's output will not span non-manifold junctions */
            );
            /** Set feature angle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFeatureAngle
            (
                double featureAngle /** featureangle */ 
            );
            /** Set flag for corner nodes 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOnlyCornerNodes
            (
                bool onlyCornerNodes /** If true, only corner nodes will be returned */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
