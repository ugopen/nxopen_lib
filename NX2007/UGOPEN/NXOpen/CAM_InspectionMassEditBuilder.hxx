#ifndef NXOpen_CAM_INSPECTIONMASSEDITBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONMASSEDITBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionMassEditBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionMassEditBuilder;
    }
    class Builder;
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class _InspectionMassEditBuilderBuilder;
        class InspectionMassEditBuilderImpl;
        /** Inspection Mass Edit dialog builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateMassEditBuilder  NXOpen::CAM::InspectionOperationCollection::CreateMassEditBuilder @endlink  <br> 
         <br>  Created in NX1984.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionMassEditBuilder : public NXOpen::Builder
        {
            private: InspectionMassEditBuilderImpl * m_inspectionmasseditbuilder_impl;
            private: friend class  _InspectionMassEditBuilderBuilder;
            protected: InspectionMassEditBuilder();
            public: ~InspectionMassEditBuilder();
            /** Sets the list of operations to edit. 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOperations
            (
                const std::vector<NXOpen::CAM::CAMObject *> & operations /** array of operations to edit */
            );
            /**Returns  a flag to indicate if feature offset distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeOffsetDistance
            (
            );
            /**Sets  a flag to indicate if feature offset distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeOffsetDistance
            (
                bool changeOffsetDistance /** changeoffsetdistance */ 
            );
            /**Returns  the feature offset distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetDistance
            (
            );
            /**Sets  the feature offset distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOffsetDistance
            (
                double distance /** distance */ 
            );
            /**Returns  a flag to indicate if Path Approach distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeApproachDistance
            (
            );
            /**Sets  a flag to indicate if Path Approach distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeApproachDistance
            (
                bool changeApproachDistance /** changeapproachdistance */ 
            );
            /**Returns  the path Approach distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double ApproachDistance
            (
            );
            /**Sets  the path Approach distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDistance
            (
                double distance /** distance */ 
            );
            /**Returns  a flag to indicate if Path Retract distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeRetractDistance
            (
            );
            /**Sets  a flag to indicate if Path Retract distance is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeRetractDistance
            (
                bool changeRetractDistance /** changeretractdistance */ 
            );
            /**Returns  the path Retract distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double RetractDistance
            (
            );
            /**Sets  the path Retract distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRetractDistance
            (
                double distance /** distance */ 
            );
            /**Returns  a flag to indicate if Path A Angle is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeAngleA
            (
            );
            /**Sets  a flag to indicate if Path A Angle is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeAngleA
            (
                bool changeAngleA /** changeanglea */ 
            );
            /**Returns  the path A Angle 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleA
            (
            );
            /**Sets  the path A Angle 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleA
            (
                double angle /** angle */ 
            );
            /**Returns  a flag to indicate if Path B Angle is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeAngleB
            (
            );
            /**Sets  a flag to indicate if Path B Angle is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeAngleB
            (
                bool changeAngleB /** changeangleb */ 
            );
            /**Returns  the path B Angle 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleB
            (
            );
            /**Sets  the path B Angle 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleB
            (
                double angle /** angle */ 
            );
            /**Returns  a flag to indicate if path tip number is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeTipNumber
            (
            );
            /**Sets  a flag to indicate if path tip number is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeTipNumber
            (
                bool changeTipNumber /** changetipnumber */ 
            );
            /**Returns  the path Tip Number 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: int TipNumber
            (
            );
            /**Sets  the path Tip Number 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTipNumber
            (
                int tipNumber /** tipnumber */ 
            );
            /**Returns  a flag to indicate if path start point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeStartPoint
            (
            );
            /**Sets  a flag to indicate if path start point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeStartPoint
            (
                bool changeStartPoint /** changestartpoint */ 
            );
            /**Returns  a flag to indicate if path start point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectStartPointToSafePlane
            (
            );
            /**Sets  a flag to indicate if path start point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProjectStartPointToSafePlane
            (
                bool createStartPoint /** createstartpoint */ 
            );
            /**Returns  a flag to indicate if path entry point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeEntryPoint
            (
            );
            /**Sets  a flag to indicate if path entry point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeEntryPoint
            (
                bool changeEntryPoint /** changeentrypoint */ 
            );
            /**Returns  a flag to indicate if path entry point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateEntryPoint
            (
            );
            /**Sets  a flag to indicate if path entry point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCreateEntryPoint
            (
                bool createEntryPoint /** createentrypoint */ 
            );
            /**Returns  a flag to indicate if path exit point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeExitPoint
            (
            );
            /**Sets  a flag to indicate if path exit point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeExitPoint
            (
                bool changeExitPoint /** changeexitpoint */ 
            );
            /**Returns  a flag to indicate if path exit point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateExitPoint
            (
            );
            /**Sets  a flag to indicate if path exit point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCreateExitPoint
            (
                bool createExitPoint /** createexitpoint */ 
            );
            /**Returns  a flag to indicate if path last point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeLastPoint
            (
            );
            /**Sets  a flag to indicate if path last point is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeLastPoint
            (
                bool changeLastPoint /** changelastpoint */ 
            );
            /**Returns  a flag to indicate if path exit point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectLastPointToSafePlane
            (
            );
            /**Sets  a flag to indicate if path exit point is to be created 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetProjectLastPointToSafePlane
            (
                bool createLastPoint /** createlastpoint */ 
            );
            /**Returns  a flag to indicate if path height above feature is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeHeightAboveFeature
            (
            );
            /**Sets  a flag to indicate if path height above feature is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeHeightAboveFeature
            (
                bool changeExitPoint /** changeexitpoint */ 
            );
            /**Returns  the path height above feature (safe plane) distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double HeightAboveFeature
            (
            );
            /**Sets  the path height above feature (safe plane) distance 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetHeightAboveFeature
            (
                double distance /** distance */ 
            );
            /**Returns  a flag to indicate if tolerance upper value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeUpperTolerance
            (
            );
            /**Sets  a flag to indicate if tolerance upper value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeUpperTolerance
            (
                bool changeUpperTolerance /** changeuppertolerance */ 
            );
            /**Returns  the upper tolerance value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double UpperTolerance
            (
            );
            /**Sets  the upper tolerance value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUpperTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  a flag to indicate if tolerance lower value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeLowerTolerance
            (
            );
            /**Sets  a flag to indicate if tolerance lower value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeLowerTolerance
            (
                bool changeLowerTolerance /** changelowertolerance */ 
            );
            /**Returns  the tolerance lower value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerTolerance
            (
            );
            /**Sets  the tolerance lower value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLowerTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  a flag to indicate if tolerance value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: bool ChangeToleranceValue
            (
            );
            /**Sets  a flag to indicate if tolerance value is to be changed 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetChangeToleranceValue
            (
                bool changeToleranceValue /** changetolerancevalue */ 
            );
            /**Returns  the tolerance value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : None */
            public: double ToleranceValue
            (
            );
            /**Sets  the tolerance value 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToleranceValue
            (
                double tolerance /** tolerance */ 
            );
            /** Mass Edit 
             <br>  Created in NX1984.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void MassEdit
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
