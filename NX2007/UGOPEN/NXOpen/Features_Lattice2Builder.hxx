#ifndef NXOpen_FEATURES_LATTICE2BUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_LATTICE2BUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Lattice2Builder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Fields_ScalarFieldWrapper.hxx>
#include <NXOpen/GeometricUtilities_CurveAlignedListBuilder.hxx>
#include <NXOpen/GeometricUtilities_UnitCellBuilder.hxx>
#include <NXOpen/GeometricUtilities_VoronoiItemListBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class Lattice2Builder;
    }
    class CoordinateSystem;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    namespace GeometricUtilities
    {
        class CurveAlignedListBuilder;
    }
    namespace GeometricUtilities
    {
        class UnitCellBuilder;
    }
    namespace GeometricUtilities
    {
        class VoronoiItemListBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _Lattice2BuilderBuilder;
        class Lattice2BuilderImpl;
        /**Represents a Features.Lattice2 builder <br> To create a new instance of this class, use @link NXOpen::Features::LatticeFeatureCollection::CreateLattice2Builder  NXOpen::Features::LatticeFeatureCollection::CreateLattice2Builder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AlignAtSplitCurve </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        AngularThreshold </term> <description> 
         
        10 </description> </item> 

        <item><term> 
         
        AverageFacetSize.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        BallDiameter.Value </term> <description> 
         
        2 (millimeters part), 0.08 (inches part) </description> </item> 

        <item><term> 
         
        BallsOption </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        BlendFactor.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        ChordalTolerance.Value </term> <description> 
         
        0.1 (millimeters part), 0.004 (inches part) </description> </item> 

        <item><term> 
         
        FactorToRodDiameter.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        IsRandom </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        LatticeType </term> <description> 
         
        UnitGraph </description> </item> 

        <item><term> 
         
        LatticeVersion </term> <description> 
         
        V1 </description> </item> 

        <item><term> 
         
        Layers </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        LockAtBoundary </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MaxDeviation.Value </term> <description> 
         
        0.5 (millimeters part), 0.02 (inches part) </description> </item> 

        <item><term> 
         
        MaxEdgeLength.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        MinimumRodNumber </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        Offset.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        OptimizationIterations </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        OutputType </term> <description> 
         
        Surface </description> </item> 

        <item><term> 
         
        Parameterization </term> <description> 
         
        Automatic </description> </item> 

        <item><term> 
         
        PoreSize.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        PushNodesUnderFace </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RemeshMode </term> <description> 
         
        Constant </description> </item> 

        <item><term> 
         
        RemoveDanglingRods </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RemoveDisconnectedRods (deprecated) </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RemoveDisconnectedRods2 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ReverseFaceDirection </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SharpEdgesLockOption </term> <description> 
         
        NoLock </description> </item> 

        <item><term> 
         
        SnipAtBoundary </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Source </term> <description> 
         
        UseExisting </description> </item> 

        <item><term> 
         
        SpecifyLayers </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TessellationFactor </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        ThicknessType </term> <description> 
         
        RodDiameter </description> </item> 

        <item><term> 
         
        UnitCell.ApproximateSourceHexMeshSize.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        UnitCell.CellType </term> <description> 
         
        BiTriangle </description> </item> 

        <item><term> 
         
        UnitCell.CellTypeName </term> <description> 
         
        BiTriangle </description> </item> 

        <item><term> 
         
        UnitCell.EdgeLength.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        UnitCell.IsUniformCube </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        UnitCell.SizeX.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        UnitCell.SizeY.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        UnitCell.SizeZ.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        VoronoiRandomizationFactor (deprecated) </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        VoronoiRandomizationFactorExpression.Value </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        VoronoiRodDiameter.Value </term> <description> 
         
        1 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        VoronoiUniform </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  Lattice2Builder : public NXOpen::Features::FeatureBuilder
        {
            /** @brief This enum represents the lattice types that are supported in NX. 

             */
            public: enum LatticeTypes
            {
                LatticeTypesUnitGraph/** unit graph */ ,
                LatticeTypesConformalGraph/** conformal graph */ ,
                LatticeTypesSurfaceGraph/** surface graph */ ,
                LatticeTypesTetrahedronGraph/** tetrahedron graph */ ,
                LatticeTypesVoronoi/** voronoi */ ,
                LatticeTypesUnitHexahedronFillGraph/** unit hexahedron fill graph */ 
            };

            /** @brief This enum represents the method that is used to generate lattice rod thickness. 

              */
            public: enum ThicknessTypes
            {
                ThicknessTypesRodDiameter/** rod diameter */ ,
                ThicknessTypesDensity/** density */ 
            };

            /** @brief This enum represents the parameterization types that are supported in conformal lattice. 

              */
            public: enum ParameterizationType
            {
                ParameterizationTypeAutomatic/** automatic */ ,
                ParameterizationTypePlanar/** planar */ ,
                ParameterizationTypeContour/** contour */ ,
                ParameterizationTypeCylindrical/** cylindrical */ ,
                ParameterizationTypeCurveAligned/** curve aligned */ 
            };

            /** @brief This enum represents the version of lattice behavior. 

              
                         
                        By setting this to V1, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX1899.
                        */
            public: enum Version
            {
                VersionV1/** v1 */ ,
                VersionV2/** v2 */ 
            };

            /** @brief Base Mesh type (for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink  only).
                       An enumeration which kind of mesh to be used:
                       <ul>
                         <li>Use Existing - The existing  mesh of the input faces will be directly used (or the display mesh from analytic faces).</li>
                         <li>Remesh Triangular - The input faces will be remeshed triangular to a specified facet size.</li>
                       </ul>
                          

             
                   */
            public: enum BaseMeshType
            {
                BaseMeshTypeUseExisting/** use existing */ ,
                BaseMeshTypeRemeshTriangular/** remesh triangular */ 
            };

            /** @brief Facet Size Type for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set.
                        <ul>
                          <li> @link NXOpen::Features::Lattice2Builder::FacetSizeTypeConstant NXOpen::Features::Lattice2Builder::FacetSizeTypeConstant@endlink  - 
                                Creates a mesh with nearly the same size for all facets</li>
                          <li> @link NXOpen::Features::Lattice2Builder::FacetSizeTypeVariable NXOpen::Features::Lattice2Builder::FacetSizeTypeVariable@endlink  - 
                                Creates a mesh with a specified facet size in low curvature areas and smaller facets in areas of high curvature</li>
                        </ul>
                      

             
                     */
            public: enum FacetSizeType
            {
                FacetSizeTypeConstant/** constant */ ,
                FacetSizeTypeVariable/** variable */ 
            };

            /** @brief Sharp Edges Lock Type  (Only for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set.)
                        <ul>
                          <li> @link NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeNoLock NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeNoLock@endlink  - 
                                Sharp edges won't be kept</li>
                          <li> @link NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeSoftLock NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeSoftLock@endlink  - 
                                Sharp edges will be kept as good as possible</li>
                          <li> @link NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeHardLock NXOpen::Features::Lattice2Builder::SharpEdgesLockTypeHardLock@endlink  - 
                                Sharp edges will be kept rigidly</li>
                        </ul>
                      

             
                     */
            public: enum SharpEdgesLockType
            {
                SharpEdgesLockTypeNoLock/** no lock */ ,
                SharpEdgesLockTypeSoftLock/** soft lock */ ,
                SharpEdgesLockTypeHardLock/** hard lock */ 
            };

            /** @brief This enum represents the options to specify the ball diameter size. 

             */
            public: enum BallsOptions
            {
                BallsOptionsNone/** none */ ,
                BallsOptionsAbsoluteSize/** absolute size */ ,
                BallsOptionsRelativeSize/** relative size */ ,
                BallsOptionsOnlyOrganicBlends/** only organic blends */ 
            };

            /** @brief This enum represents the options to specify the graph option for Voronoi to output Surface, Volume or both Surface and Volume
                                and Tetrahedron Fill lattice to output Volume or both Surface and Volume. 

              */
            public: enum OutputOption
            {
                OutputOptionSurface/** surface */ ,
                OutputOptionVolume/** volume */ ,
                OutputOptionSurfaceAndVolume/** surface and volume */ 
            };

            private: Lattice2BuilderImpl * m_lattice2builder_impl;
            private: friend class  _Lattice2BuilderBuilder;
            protected: Lattice2Builder();
            public: ~Lattice2Builder();
            /**Returns  @brief the type of lattice that is going to be created. 

              
                       
                       Supported lattice types are: @link NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph@endlink ,
                        @link NXOpen::Features::Lattice2Builder::LatticeTypesConformalGraph NXOpen::Features::Lattice2Builder::LatticeTypesConformalGraph@endlink ,
                        @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                        and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink .
                       
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::LatticeTypes LatticeType
            (
            );
            /**Sets  @brief the type of lattice that is going to be created. 

              
                       
                       Supported lattice types are: @link NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph@endlink ,
                        @link NXOpen::Features::Lattice2Builder::LatticeTypesConformalGraph NXOpen::Features::Lattice2Builder::LatticeTypesConformalGraph@endlink ,
                        @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                        and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink .
                       
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLatticeType
            (
                NXOpen::Features::Lattice2Builder::LatticeTypes latticeType /** latticetype */ 
            );
            /**Returns  @brief The method that is used to determine lattice rod thickness. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::ThicknessTypes ThicknessType
            (
            );
            /**Sets  @brief The method that is used to determine lattice rod thickness. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetThicknessType
            (
                NXOpen::Features::Lattice2Builder::ThicknessTypes thicknessType /** thicknesstype */ 
            );
            /**Returns the geometry that defines the boundary for conformal lattice type. This can be faces or sheet bodies.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BaseFace
            (
            );
            /**Returns whether the conformal lattice will be generated on the other side of the face
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseFaceDirection
            (
            );
            /**Sets whether the conformal lattice will be generated on the other side of the face
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetReverseFaceDirection
            (
                bool reverseFaceDir /** reversefacedir */ 
            );
            /**Returns  @brief  The VoronoiUniform determines whether the set list will be displayed or if the global pore size and voronoi rod diameter will be displayed  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool VoronoiUniform
            (
            );
            /**Sets  @brief  The VoronoiUniform determines whether the set list will be displayed or if the global pore size and voronoi rod diameter will be displayed  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetVoronoiUniform
            (
                bool voronoiUniform /** voronoiuniform */ 
            );
            /**Returns  the pore size 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PoreSize
            (
            );
            /**Returns  the voronoi global rod diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * VoronoiRodDiameter
            (
            );
            /**Returns the solid bodies that define the boundary for unit lattice type.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BoundaryBody
            (
            );
            /**Returns  the source - @link NXOpen::Features::Lattice2Builder::BaseMeshType NXOpen::Features::Lattice2Builder::BaseMeshType@endlink 
                       for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink  only. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::BaseMeshType Source
            (
            );
            /**Sets  the source - @link NXOpen::Features::Lattice2Builder::BaseMeshType NXOpen::Features::Lattice2Builder::BaseMeshType@endlink 
                       for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink  only. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetSource
            (
                NXOpen::Features::Lattice2Builder::BaseMeshType source /** source */ 
            );

            /// \cond NX_NO_DOC 
            /**Returns the maximum edge length used for re-meshing, to determine the redefinition size for the input triangle mesh
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxEdgeLength
            (
            );

            /// \endcond 
            /**Returns   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::Lattice2Builder::MaxDeviation Features::Lattice2Builder::MaxDeviation@endlink .
                        
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsRandom
            (
            );
            /**Sets   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::Lattice2Builder::MaxDeviation Features::Lattice2Builder::MaxDeviation@endlink .
                        
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRandom
            (
                bool random /** random */ 
            );
            /**Returns   @brief the maximum deviation that the vertices of the lattice graph will have. 

             
                         
                        The bigger the value of this property is, the more obvious bumps the lattice body will generate.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxDeviation
            (
            );
            /**Returns   @brief the voronoi randomization factor of the lattice creation. 

              
                        Randomization of centers of Voronoi cells will increase with the factor.  
             <br>  @deprecated Deprecated in NX2007.0.0.  For pre NX2007 usage only. Use @link NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression@endlink  instead. <br>  

             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  For pre NX2007 usage only. Use NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression instead.") double VoronoiRandomizationFactor
            (
            );
            /**Sets   @brief the voronoi randomization factor of the lattice creation. 

              
                        Randomization of centers of Voronoi cells will increase with the factor.  
             <br>  @deprecated Deprecated in NX2007.0.0.  For pre NX2007 usage only. Use @link NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression@endlink  instead. <br>  

             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  For pre NX2007 usage only. Use NXOpen::Features::Lattice2Builder::VoronoiRandomizationFactorExpression instead.") void SetVoronoiRandomizationFactor
            (
                double factor /** factor */ 
            );
            /**Returns   @brief the Voronoi randomization factor expression of the lattice creation. 

              
                        Randomization of centers of Voronoi cells will increase with the factor.  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * VoronoiRandomizationFactorExpression
            (
            );
            /**Returns   @brief whether to exclude nodes near boundary or base faces from randomization.  

             
                        
                        Determines whether to fix the graph vertices on the boundary bodies or base faces and gradually increase the randomization to @link Features::Lattice2Builder::MaxDeviation Features::Lattice2Builder::MaxDeviation@endlink 
                        and when property @link Features::Lattice2Builder::IsRandom Features::Lattice2Builder::IsRandom@endlink  is set.
                        
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockAtBoundary
            (
            );
            /**Sets   @brief whether to exclude nodes near boundary or base faces from randomization.  

             
                        
                        Determines whether to fix the graph vertices on the boundary bodies or base faces and gradually increase the randomization to @link Features::Lattice2Builder::MaxDeviation Features::Lattice2Builder::MaxDeviation@endlink 
                        and when property @link Features::Lattice2Builder::IsRandom Features::Lattice2Builder::IsRandom@endlink  is set.
                        
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLockAtBoundary
            (
                bool lockAtBoundary /** lockatboundary */ 
            );
            /**Returns  whether the layers are applied exclusively on the wall face for unit hexahedron fill lattice
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool SpecifyLayers
            (
            );
            /**Sets  whether the layers are applied exclusively on the wall face for unit hexahedron fill lattice
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetSpecifyLayers
            (
                bool specifyLayers /** specifylayers */ 
            );
            /**Returns   @brief the number of unit cell layers stacked over each other. 

             
                         
                        The default is one layer only.  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int Layers
            (
            );
            /**Sets   @brief the number of unit cell layers stacked over each other. 

             
                         
                        The default is one layer only.  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLayers
            (
                int layers /** layers */ 
            );
            /**Returns   @brief the offset of the conformal lattice from the base face. 

             
                          
                         A negative offset will let the conformal lattice intersect with the base face ("into material").
                         A positive offset will move the conformal lattice away from the base face( "away from material"). 
                         Using a negative offset can ensure that the final lattice body will intersect with the base face, 
                         if that is required. The default offset is zero. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  @brief  The output type enum determines how the voronoi or tetrahedron fill lattice will be created. 
                    It will either be created on the Surface, within the Volume or both on the Surface and within the Volume for voronoi
                    and within the Volume or both on the Surface and within the Volume for tetrahedron fill.  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::OutputOption OutputType
            (
            );
            /**Sets  @brief  The output type enum determines how the voronoi or tetrahedron fill lattice will be created. 
                    It will either be created on the Surface, within the Volume or both on the Surface and within the Volume for voronoi
                    and within the Volume or both on the Surface and within the Volume for tetrahedron fill.  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOutputType
            (
                NXOpen::Features::Lattice2Builder::OutputOption outputType /** outputtype */ 
            );
            /**Returns  @brief  The PushNodesUnderFace determines whether the nodes created on the surface will be on the surface or pushed underneath the surface.  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool PushNodesUnderFace
            (
            );
            /**Sets  @brief  The PushNodesUnderFace determines whether the nodes created on the surface will be on the surface or pushed underneath the surface.  

             
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetPushNodesUnderFace
            (
                bool pushNodesUnderFace /** pushnodesunderface */ 
            );
            /**Returns  the diameter/thickness scalar field of the rods in the lattice graph
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * RodDiameter
            (
            );
            /**Returns  the option to specify ball size or diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::BallsOptions BallsOption
            (
            );
            /**Sets  the option to specify ball size or diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetBallsOption
            (
                NXOpen::Features::Lattice2Builder::BallsOptions ballsOption /** ballsoption */ 
            );
            /**Returns   @brief the constant diameter of the spheres created for the vertices of each graph edge. 

             
                        
                        As of NX1953 this should no longer be used and instead use @link Features::Lattice2Builder::BallDiameterField Features::Lattice2Builder::BallDiameterField@endlink .
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BallDiameter
            (
            );
            /**Returns  the diameter scalar field of the balls in the lattice graph
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * BallDiameterField
            (
            );
            /**Returns  the ball diameter factor to rod diameter 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FactorToRodDiameter
            (
            );
            /**Returns   @brief the factor of organic blending to rod diameter 

             
                        
                        The factor will be multiplied with rod diameter to define the organic blending for creating the lattice body when
                        (@link Features::Lattice2Builder::BallsOption Features::Lattice2Builder::BallsOption@endlink ) is set to 
                        @link NXOpen::Features::Lattice2Builder::BallsOptionsOnlyOrganicBlends NXOpen::Features::Lattice2Builder::BallsOptionsOnlyOrganicBlends@endlink .
                         
             <br>  Created in NX1957.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BlendFactor
            (
            );
            /**Returns   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance, the tessellation factor is only a unitless factor. The actual tessellation tolerance 
                        will determined by 
                        (@link Features::Lattice2Builder::TessellationFactor Features::Lattice2Builder::TessellationFactor@endlink ) X (@link Features::Lattice2Builder::RodDiameter Features::Lattice2Builder::RodDiameter@endlink )  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double TessellationFactor
            (
            );
            /**Sets   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance, the tessellation factor is only a unitless factor. The actual tessellation tolerance 
                        will determined by 
                        (@link Features::Lattice2Builder::TessellationFactor Features::Lattice2Builder::TessellationFactor@endlink ) X (@link Features::Lattice2Builder::RodDiameter Features::Lattice2Builder::RodDiameter@endlink )  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetTessellationFactor
            (
                double factor /** factor */ 
            );
            /**Returns  the coordinate system which determines the orientation with respect to the lattice creation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * Csys
            (
            );
            /**Sets  the coordinate system which determines the orientation with respect to the lattice creation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCsys
            (
                NXOpen::CoordinateSystem * csys /** csys */ 
            );
            /**Returns   @brief whether to remove small disconnected lattice portions keeping just the largest body.  

             
             <br>  @deprecated Deprecated in NX1847.0.0.  This is for pre NX1847 usage, do not use this method.  Instead use @link NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2 NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2@endlink  instead. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  This is for pre NX1847 usage, do not use this method.  Instead use NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2 instead.") bool RemoveDisconnectedRods
            (
            );
            /**Sets   @brief whether to remove small disconnected lattice portions keeping just the largest body.  

             
             <br>  @deprecated Deprecated in NX1847.0.0.  This is for pre NX1847 usage, do not use this method.  Instead use @link NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2 NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2@endlink  instead. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  This is for pre NX1847 usage, do not use this method.  Instead use NXOpen::Features::Lattice2Builder::RemoveDisconnectedRods2 instead.") void SetRemoveDisconnectedRods
            (
                bool remove /** remove */ 
            );
            /**Returns   @brief the facet size mode for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::FacetSizeType RemeshMode
            (
            );
            /**Sets   @brief the facet size mode for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRemeshMode
            (
                NXOpen::Features::Lattice2Builder::FacetSizeType remeshMode /** remeshmode */ 
            );
            /**Returns  the average size of rod length for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  and 
                       @link NXOpen::Features::Lattice2Builder::FacetSizeTypeConstant NXOpen::Features::Lattice2Builder::FacetSizeTypeConstant@endlink  are set.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AverageFacetSize
            (
            );
            /**Returns  the chordal tolerance - the maximum chordal deviation for areas with high curvature for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ChordalTolerance
            (
            );
            /**Returns  the sharp edges lock type for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::SharpEdgesLockType SharpEdgesLockOption
            (
            );
            /**Sets  the sharp edges lock type for @link NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph NXOpen::Features::Lattice2Builder::LatticeTypesSurfaceGraph@endlink 
                       and @link NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph NXOpen::Features::Lattice2Builder::LatticeTypesTetrahedronGraph@endlink   when 
                       @link NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular NXOpen::Features::Lattice2Builder::BaseMeshTypeRemeshTriangular@endlink  is set. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetSharpEdgesLockOption
            (
                NXOpen::Features::Lattice2Builder::SharpEdgesLockType sharpEdgesLockOption /** sharpedgeslockoption */ 
            );
            /**Returns  the angular threshold 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double AngularThreshold
            (
            );
            /**Sets  the angular threshold 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetAngularThreshold
            (
                double angularThreshold /** angularthreshold */ 
            );
            /**Returns   @brief whether to automatically remove all small disconnected lattice portions with a number of rods less than the specified value. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveDisconnectedRods2
            (
            );
            /**Sets   @brief whether to automatically remove all small disconnected lattice portions with a number of rods less than the specified value. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRemoveDisconnectedRods2
            (
                bool remove /** remove */ 
            );
            /**Returns   @brief the minimum rod number - All lattice portions with a number of rods less than specified will be removed. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int MinimumRodNumber
            (
            );
            /**Sets   @brief the minimum rod number - All lattice portions with a number of rods less than specified will be removed. 

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetMinimumRodNumber
            (
                int minimumRodNumber /** minimumrodnumber */ 
            );
            /**Returns   @brief whether to remove dangling rods from the lattice body. 
                        
                        The dangling rods are defined as the following: 
                        <ul>
                        <li>Connects at only one end to the lattice body</li> 
                        <li>Touches or intersects a face of the boundary body </li>
                        </ul>
                        The selected faces are (@link Features::Lattice2Builder::FilterToolFace Features::Lattice2Builder::FilterToolFace@endlink )
                        
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveDanglingRods
            (
            );
            /**Sets   @brief whether to remove dangling rods from the lattice body. 
                        
                        The dangling rods are defined as the following: 
                        <ul>
                        <li>Connects at only one end to the lattice body</li> 
                        <li>Touches or intersects a face of the boundary body </li>
                        </ul>
                        The selected faces are (@link Features::Lattice2Builder::FilterToolFace Features::Lattice2Builder::FilterToolFace@endlink )
                        
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRemoveDanglingRods
            (
                bool remove /** remove */ 
            );
            /**Returns   @brief whether to limit rods exactly at boundary for @link NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph@endlink .
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool SnipAtBoundary
            (
            );
            /**Sets   @brief whether to limit rods exactly at boundary for @link NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph NXOpen::Features::Lattice2Builder::LatticeTypesUnitGraph@endlink .
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetSnipAtBoundary
            (
                bool snipAtBoundary /** snipatboundary */ 
            );
            /**Returns the faces of the boundary body that the dangling rods connected to will be removed from the lattice body
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FilterToolFace
            (
            );
            /**Returns  the optimization iterations 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int OptimizationIterations
            (
            );
            /**Sets  the optimization iterations 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOptimizationIterations
            (
                int optimizationIterations /** optimizationiterations */ 
            );
            /**Returns   @brief the UV mapping parameterization. 
                        
                        The UV parameters for each parameterization type are defined as the following:
                        <ul>
                        <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeAutomatic NXOpen::Features::Lattice2Builder::ParameterizationTypeAutomatic@endlink ,
                             the centre of the first face will be the origin and the face UV direction is used for parametrization.</li>
                        <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypePlanar NXOpen::Features::Lattice2Builder::ParameterizationTypePlanar@endlink ,
                            @link Features::Lattice2Builder::OrientationPoint1 Features::Lattice2Builder::OrientationPoint1@endlink  is the origin and 
                            @link Features::Lattice2Builder::OrientationPoint2 Features::Lattice2Builder::OrientationPoint2@endlink   is the direction point for U direction.
                            V direction of UV mapping is perpendicular to U direction.
                            User needs to specify both these points on the input face.</li>
                         <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeContour NXOpen::Features::Lattice2Builder::ParameterizationTypeContour@endlink ,
                             User needs to specify all four contour points to define the lattice.</li>
                         <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeCylindrical NXOpen::Features::Lattice2Builder::ParameterizationTypeCylindrical@endlink ,
                             user needs to specify the split line used.</li>
                        </ul>
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::ParameterizationType Parameterization
            (
            );
            /**Sets   @brief the UV mapping parameterization. 
                        
                        The UV parameters for each parameterization type are defined as the following:
                        <ul>
                        <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeAutomatic NXOpen::Features::Lattice2Builder::ParameterizationTypeAutomatic@endlink ,
                             the centre of the first face will be the origin and the face UV direction is used for parametrization.</li>
                        <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypePlanar NXOpen::Features::Lattice2Builder::ParameterizationTypePlanar@endlink ,
                            @link Features::Lattice2Builder::OrientationPoint1 Features::Lattice2Builder::OrientationPoint1@endlink  is the origin and 
                            @link Features::Lattice2Builder::OrientationPoint2 Features::Lattice2Builder::OrientationPoint2@endlink   is the direction point for U direction.
                            V direction of UV mapping is perpendicular to U direction.
                            User needs to specify both these points on the input face.</li>
                         <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeContour NXOpen::Features::Lattice2Builder::ParameterizationTypeContour@endlink ,
                             User needs to specify all four contour points to define the lattice.</li>
                         <li>For @link NXOpen::Features::Lattice2Builder::ParameterizationTypeCylindrical NXOpen::Features::Lattice2Builder::ParameterizationTypeCylindrical@endlink ,
                             user needs to specify the split line used.</li>
                        </ul>
                         

             
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetParameterization
            (
                NXOpen::Features::Lattice2Builder::ParameterizationType parameterization /** parameterization */ 
            );
            /**Returns  the orientation point1 of planar UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * OrientationPoint1
            (
            );
            /**Sets  the orientation point1 of planar UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientationPoint1
            (
                NXOpen::Point * orientationPoint1 /** orientationpoint1 */ 
            );
            /**Returns  the orientation point2 of planar UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * OrientationPoint2
            (
            );
            /**Sets  the orientation point2 of planar UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientationPoint2
            (
                NXOpen::Point * orientationPoint2 /** orientationpoint2 */ 
            );
            /**Returns  the split curve of cylindrical UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SplitCurve
            (
            );
            /**Returns  the align at split curve option for cylindrical UV mapping
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignAtSplitCurve
            (
            );
            /**Sets  the align at split curve option for cylindrical UV mapping
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetAlignAtSplitCurve
            (
                bool alignAtSplitCurve /** alignatsplitcurve */ 
            );
            /**Returns  the contour point1 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint1
            (
            );
            /**Sets  the contour point1 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint1
            (
                NXOpen::Point * contourPt1 /** contourpt1 */ 
            );
            /**Returns  the contour point2 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint2
            (
            );
            /**Sets  the contour point2 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint2
            (
                NXOpen::Point * contourPt2 /** contourpt2 */ 
            );
            /**Returns  the contour point3 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint3
            (
            );
            /**Sets  the contour point3 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint3
            (
                NXOpen::Point * contourPt3 /** contourpt3 */ 
            );
            /**Returns  the contour point4 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ContourPoint4
            (
            );
            /**Sets  the contour point4 of contour UV mapping
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetContourPoint4
            (
                NXOpen::Point * contourPt4 /** contourpt4 */ 
            );
            /**Returns   @brief the lattice behavior version number 

             
                         
                        The default is V1. By setting this to default value, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX1899. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Lattice2Builder::Version LatticeVersion
            (
            );
            /**Sets   @brief the lattice behavior version number 

             
                         
                        The default is V1. By setting this to default value, user can get legacy conformal lattice behavior in NX12.
                        If this value is set to V2, user can get the enhanced conformal lattice behavior in NX1899. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLatticeVersion
            (
                NXOpen::Features::Lattice2Builder::Version version /** version */ 
            );
            /**Returns  the Unit Cell Builder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::UnitCellBuilder * UnitCell
            (
            );
            /**Returns  a voronoi lattice item list 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: NXOpen::GeometricUtilities::VoronoiItemListBuilder * VoronoiItemList
            (
            );
            /**Returns  the curve aligned list 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: NXOpen::GeometricUtilities::CurveAlignedListBuilder * CurveAlignedList
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
