#ifndef NXOpen_CAM_HOLEMAKINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_HOLEMAKINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_HoleMakingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class HoleMakingBuilder;
    }
    namespace CAM
    {
        class CutParameters;
    }
    namespace CAM
    {
        class FeedsBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _HoleMakingBuilderBuilder;
        class HoleMakingBuilderImpl;
        /** Represents a HoleMaking Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::OperationCollection::CreateHoleMakingBuilder  NXOpen::CAM::OperationCollection::CreateHoleMakingBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  HoleMakingBuilder : public NXOpen::CAM::OperationBuilder
        {
            /** Available types for Control Point Type in Hole Making Operation */
            public: enum ControlPointTypes
            {
                ControlPointTypesToolTip/** tool tip */,
                ControlPointTypesShoulder/** shoulder */
            };

            /** Available types for model depth in Hole Making Operation */
            public: enum ModelDepthTypes
            {
                ModelDepthTypesAlways/** always */,
                ModelDepthTypesRule/** rule */
            };

            /** the tool axis mode options */
            public: enum ToolAxisTypes
            {
                ToolAxisTypesPositiveZOfMcs/** Tool axis mode: +Z of MCS */,
                ToolAxisTypesFixedAxis/** Tool axis mode: Fixed axis */,
                ToolAxisTypesAllAxes/** Tool axis mode: All axes */
            };

            private: HoleMakingBuilderImpl * m_holemakingbuilder_impl;
            private: friend class  _HoleMakingBuilderBuilder;
            protected: HoleMakingBuilder();
            public: ~HoleMakingBuilder();
            /**Returns  the Engage Feed Rate 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double EngageFeedRate
            (
            );
            /**Sets  the Engage Feed Rate 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEngageFeedRate
            (
                double engageFeed /** The Engage Feed Rate value */
            );
            /**Returns  the Rapid Feed Rate 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double RapidFeedRate
            (
            );
            /**Sets  the Rapid Feed Rate 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRapidFeedRate
            (
                double rapidFeed /** The Rapid Feed Rate value */
            );
            /**Returns  the clearance vertical builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ClrVertBuilder
            (
            );
            /**Returns  the Clearance Distance builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ClrDistBuilder
            (
            );
            /**Returns  the Allow Oversize Tool flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllowOversizeTool
            (
            );
            /**Sets  the Allow Oversize Tool flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAllowOversizeTool
            (
                bool allowOversize /** the Allow Oversize Tool flag */
            );
            /**Returns  the oversize tool percent builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OversizeToolPercentBuilder
            (
            );
            /**Returns  the control point type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::HoleMakingBuilder::ControlPointTypes ControlPointType
            (
            );
            /**Sets  the control point type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetControlPointType
            (
                NXOpen::CAM::HoleMakingBuilder::ControlPointTypes controlPoint /** the control point type */
            );
            /**Returns  the rapto offset builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * RaptoOffsetBuilder
            (
            );
            /**Returns  the rapto offset flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool RaptoOffsetToggle
            (
            );
            /**Sets  the rapto offset flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRaptoOffsetToggle
            (
                bool raptoOffset /** the rapto offset flag */
            );
            /**Returns  the user defined tool path flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseUserDefinedTp
            (
            );
            /**Sets  the user defined tool path flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseUserDefinedTp
            (
                bool useUserTp /** the user defined tool path flag */
            );
            /**Returns  the check flute length flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckFluteLength
            (
            );
            /**Sets  the check flute length flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckFluteLength
            (
                bool checkFluteLength /** the check flute length flag */
            );
            /**Returns  the check tool length flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool CheckToolLength
            (
            );
            /**Sets  the check tool length flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckToolLength
            (
                bool checkToolLength /** the check tool length flag */
            );
            /**Returns  the use query flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseQuery
            (
            );
            /**Sets  the use query flag 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseQuery
            (
                bool useQuery /** the use query flag */
            );
            /**Returns  the model depth type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::HoleMakingBuilder::ModelDepthTypes ModelDepthType
            (
            );
            /**Sets  the model depth type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetModelDepthType
            (
                NXOpen::CAM::HoleMakingBuilder::ModelDepthTypes modelDepth /** the model depth type */
            );
            /**Returns  the blind hole stock builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlindHoleStockBuilder
            (
            );
            /**Returns  the thru clear builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ThruClearBuilder
            (
            );
            /**Returns  the feeds and speeds builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::FeedsBuilder * FeedsBuilder
            (
            );
            /**Returns  the cut parameter object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutParameters * CutParameters
            (
            );
            /**Returns  the tool axis mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::HoleMakingBuilder::ToolAxisTypes ToolAxisType
            (
            );
            /**Sets  the tool axis mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxisType
            (
                NXOpen::CAM::HoleMakingBuilder::ToolAxisTypes toolAxisType /** the integer value  */
            );
            /**Returns  the tool axis vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ToolAxisVector
            (
            );
            /**Sets  the tool axis vector 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxisVector
            (
                NXOpen::NXObject * toolAxisVector /** the vector tag */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
