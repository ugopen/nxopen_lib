#ifndef NXOpen_CAE_AFUDATACREATOR_HXX_INCLUDED
#define NXOpen_CAE_AFUDATACREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuDataCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuData.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AfuDataCreator;
    }
    namespace CAE
    {
        class AfuManager;
    }
    namespace CAE
    {
        class AfuData;
    }
    namespace CAE
    {
        class AfuDataCreatorImpl;
        /**Creates AFU Data  <br> To obtain an instance of this class, refer to @link NXOpen::CAE::AfuManager  NXOpen::CAE::AfuManager @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AfuDataCreator
        {
            private: AfuDataCreatorImpl * m_afudatacreator_impl;
            private: NXOpen::CAE::AfuManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AfuDataCreator(NXOpen::CAE::AfuManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AfuDataCreator();
            /** Get afu data for a half sine pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetHalfSineData
            (
                const NXString & afuFileName /** Output file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Maximum amplitude of half sine */,
                double timePeriod /** Time period of hals sine */,
                int numberOfCycles /** Number of cycles of half sine */,
                int numberOfIntervals /** Number of intervals of half sine */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a half sine pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetHalfSineData
            (
                const char * afuFileName /** Output file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Maximum amplitude of half sine */,
                double timePeriod /** Time period of hals sine */,
                int numberOfCycles /** Number of cycles of half sine */,
                int numberOfIntervals /** Number of intervals of half sine */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a full sine pulse  @return  Output afuData with all information set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetFullSineData
            (
                const NXString & afuFileName /** Output file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Maximum amplitude of half sine */,
                double timePeriod /** Time period of hals sine */,
                bool fullCycle /** Full Cycle Flag */,
                int numberOfCycles /** Number of cycles of half sine */,
                int numberOfIntervals /** Number of intervals of half sine */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a full sine pulse  @return  Output afuData with all information set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetFullSineData
            (
                const char * afuFileName /** Output file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Maximum amplitude of half sine */,
                double timePeriod /** Time period of hals sine */,
                bool fullCycle /** Full Cycle Flag */,
                int numberOfCycles /** Number of cycles of half sine */,
                int numberOfIntervals /** Number of intervals of half sine */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a haversine pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetHaversineData
            (
                const NXString & afuFileName /** Output file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Maximum amplitude of haverse sine */,
                double timePeriod /** Time period of haverse sine */,
                int numberOfCycles /** Number of cycles of haverse sine */,
                int numberOfIntervals /** Number of intervals of haverse sine*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a haversine pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetHaversineData
            (
                const char * afuFileName /** Output file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Maximum amplitude of haverse sine */,
                double timePeriod /** Time period of haverse sine */,
                int numberOfCycles /** Number of cycles of haverse sine */,
                int numberOfIntervals /** Number of intervals of haverse sine*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a full haversine pulse  @return  Output afuData with all information set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetFullHaversineData
            (
                const NXString & afuFileName /** Output file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Maximum amplitude of haverse sine */,
                double timePeriod /** Time period of haverse sine */,
                bool fullCycle /** Full Cycle Flag */,
                int numberOfCycles /** Number of cycles of haverse sine */,
                int numberOfIntervals /** Number of intervals of haverse sine*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a full haversine pulse  @return  Output afuData with all information set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetFullHaversineData
            (
                const char * afuFileName /** Output file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Maximum amplitude of haverse sine */,
                double timePeriod /** Time period of haverse sine */,
                bool fullCycle /** Full Cycle Flag */,
                int numberOfCycles /** Number of cycles of haverse sine */,
                int numberOfIntervals /** Number of intervals of haverse sine*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a triangle pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetTriangleData
            (
                const NXString & afuFileName /** Output file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Amplitude of the triangle pulse */,
                double timePeriod /** Time period of triangle pulse */,
                int numberOfCycles /** Number of cycles of triangle pulse */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a triangle pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetTriangleData
            (
                const char * afuFileName /** Output file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Amplitude of the triangle pulse */,
                double timePeriod /** Time period of triangle pulse */,
                int numberOfCycles /** Number of cycles of triangle pulse */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a square pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetSquareData
            (
                const NXString & afuFileName /** Output afu file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Amplitude of the square*/,
                double width /** Width of the Square */,
                double timePeriod /** Time period of square pulse */,
                int numberOfCycles /** Number of cycles of square pulse*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a square pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetSquareData
            (
                const char * afuFileName /** Output afu file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Amplitude of the square*/,
                double width /** Width of the Square */,
                double timePeriod /** Time period of square pulse */,
                int numberOfCycles /** Number of cycles of square pulse*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a ramp pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetRampData
            (
                const NXString & afuFileName /** Output afu file name  */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Amplitude of the Ramp */,
                double width /** Width of the Ramp */,
                double timePeriod /** Time period of Ramp pulse*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a ramp pulse  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetRampData
            (
                const char * afuFileName /** Output afu file name  */,
                const char * recordName /** Output record name */,
                double amplitude /** Amplitude of the Ramp */,
                double width /** Width of the Ramp */,
                double timePeriod /** Time period of Ramp pulse*/,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a random signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetRandomSignalData
            (
                const NXString & afuFileName /** Output afu file name  */,
                const NXString & recordName /** Output record name*/,
                double minimumTime /** Start time of Random Signal*/,
                double maximumTime /** End time of Random Signal*/,
                double timeIncrement /** time increment */,
                double amplitude /** Maximum Amplitude of the Random Signal*/,
                double mean /** Mean of the Random Signal*/,
                double stamdardDeviation /** Standard Deviation of the Random Signal*/,
                int seed /** Seed for the random generator */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for a random signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetRandomSignalData
            (
                const char * afuFileName /** Output afu file name  */,
                const char * recordName /** Output record name*/,
                double minimumTime /** Start time of Random Signal*/,
                double maximumTime /** End time of Random Signal*/,
                double timeIncrement /** time increment */,
                double amplitude /** Maximum Amplitude of the Random Signal*/,
                double mean /** Mean of the Random Signal*/,
                double stamdardDeviation /** Standard Deviation of the Random Signal*/,
                int seed /** Seed for the random generator */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for Unbalanced Force signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetUnbalancedForceData
            (
                const NXString & afuFileName /** Output afu file name */,
                const NXString & recordName /** Output record name */,
                double width /** Width of the signal */,
                double frequencyIncrement /** Frequency increment of the signal */,
                double mass /** Mass value*/,
                double eccentricity /** Eccentricity value */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for Unbalanced Force signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetUnbalancedForceData
            (
                const char * afuFileName /** Output afu file name */,
                const char * recordName /** Output record name */,
                double width /** Width of the signal */,
                double frequencyIncrement /** Frequency increment of the signal */,
                double mass /** Mass value*/,
                double eccentricity /** Eccentricity value */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for rectangle signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetRectangleData
            (
                const NXString & afuFileName /** Output afu file name */,
                const NXString & recordName /** Output record name*/,
                double amplitude /** Amplitude of the Rectangle */,
                double initialWidth /** Intial Width for which signal is off */,
                double signalWidth /** Width for which signal is on */,
                double finalWidth /** Final Width for which signal is off */,
                int numberOfCycles /** Number of cycles of Rectangle signal */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for rectangle signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetRectangleData
            (
                const char * afuFileName /** Output afu file name */,
                const char * recordName /** Output record name*/,
                double amplitude /** Amplitude of the Rectangle */,
                double initialWidth /** Intial Width for which signal is off */,
                double signalWidth /** Width for which signal is on */,
                double finalWidth /** Final Width for which signal is off */,
                int numberOfCycles /** Number of cycles of Rectangle signal */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */,
                NXOpen::CAE::XyFunctionUnit abscissaUnitType /** Abscissa unit type */
            );
            /** Get afu data for PSD Ecxcitation signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AfuData * GetPsdExcitationData
            (
                const NXString & afuFileName /** Output afu file name */,
                const NXString & recordName /** Output record name */,
                double amplitude /** Amplitude of the PSD function*/,
                double positiveSlope /** Initial Postive slope */,
                double negativeSlope /** Final Negative slope (input value is +ve but internally -ve sign is applied )*/,
                double firstFrequencyPoint /** First Frequency point */,
                double secondFrequencyPoint /** Second Frequency point */,
                double thirdFrequencyPoint /** Third Frequency point */,
                double fourthFrequencyPoint /** Fourth Frequency point */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */
            );
            /** Get afu data for PSD Ecxcitation signal  @return  Output afuData with all information set 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::AfuData * GetPsdExcitationData
            (
                const char * afuFileName /** Output afu file name */,
                const char * recordName /** Output record name */,
                double amplitude /** Amplitude of the PSD function*/,
                double positiveSlope /** Initial Postive slope */,
                double negativeSlope /** Final Negative slope (input value is +ve but internally -ve sign is applied )*/,
                double firstFrequencyPoint /** First Frequency point */,
                double secondFrequencyPoint /** Second Frequency point */,
                double thirdFrequencyPoint /** Third Frequency point */,
                double fourthFrequencyPoint /** Fourth Frequency point */,
                NXOpen::CAE::XyFunctionUnit ordinateUnitType /** Ordinate unit type */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
