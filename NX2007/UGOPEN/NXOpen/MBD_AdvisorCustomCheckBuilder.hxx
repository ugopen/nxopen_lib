#ifndef NXOpen_MBD_ADVISORCUSTOMCHECKBUILDER_HXX_INCLUDED
#define NXOpen_MBD_ADVISORCUSTOMCHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MBD_AdvisorCustomCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libmbdopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MBD
    {
        class AdvisorCustomCheckBuilder;
    }
    class Builder;
    namespace MBD
    {
        class _AdvisorCustomCheckBuilderBuilder;
        class AdvisorCustomCheckBuilderImpl;
        /** Represents a Builder for Advisor Custom Check functionality <br> To create a new instance of this class, use @link NXOpen::MBD::AdvisorManager::CreateAdvisorCustomCheckBuilder  NXOpen::MBD::AdvisorManager::CreateAdvisorCustomCheckBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class MBDOPENCPPEXPORT  AdvisorCustomCheckBuilder : public NXOpen::Builder
        {
            /** Advisor validation failure level */
            public: enum FailureLevel
            {
                FailureLevelWarning/** warning */ ,
                FailureLevelError/** error */ ,
                FailureLevelInformation/** information */ 
            };

            private: AdvisorCustomCheckBuilderImpl * m_advisorcustomcheckbuilder_impl;
            private: friend class  _AdvisorCustomCheckBuilderBuilder;
            protected: AdvisorCustomCheckBuilder();
            public: ~AdvisorCustomCheckBuilder();
            /**Returns  the display name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /**Sets  the display name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetDisplayName
            (
                const NXString & displayName /** displayname */ 
            );
            /**Sets  the display name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            void SetDisplayName
            (
                const char * displayName /** displayname */ 
            );
            /** Returns the description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Sets the description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetDescription
            (
                const std::vector<NXString> & description /** description */ 
            );
            /** Returns the alert message 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetAlertMessage
            (
            );
            /** Sets the alert message 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetAlertMessage
            (
                const std::vector<NXString> & alertMessage /** alertmessage */ 
            );
            /**Returns  the apply rule toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyRuleToggle
            (
            );
            /**Sets  the apply rule toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetApplyRuleToggle
            (
                bool applyRuleToggle /** applyruletoggle */ 
            );
            /**Returns  the failure level enum 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MBD::AdvisorCustomCheckBuilder::FailureLevel FailureLevelEnum
            (
            );
            /**Sets  the failure level enum 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetFailureLevelEnum
            (
                NXOpen::MBD::AdvisorCustomCheckBuilder::FailureLevel failureLevelEnum /** failurelevelenum */ 
            );
            /**Returns  the identifier prefix 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString IdentifierPrefix
            (
            );
            /**Sets  the identifier prefix 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetIdentifierPrefix
            (
                const NXString & identifierPrefix /** identifierprefix */ 
            );
            /**Sets  the identifier prefix 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            void SetIdentifierPrefix
            (
                const char * identifierPrefix /** identifierprefix */ 
            );
            /**Returns  the supported pmi types 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int EnabledPmiTypes
            (
            );
            /**Sets  the supported pmi types 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetEnabledPmiTypes
            (
                int enabledPmiTypes /** enabledpmitypes */ 
            );
            /**Returns  the supported standards 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int EnabledStandards
            (
            );
            /**Sets  the supported standards 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mbd (" Model Based Definition") */
            public: void SetEnabledStandards
            (
                int enabledStandards /** enabledstandards */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
