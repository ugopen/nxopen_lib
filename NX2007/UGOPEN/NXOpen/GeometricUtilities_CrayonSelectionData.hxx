#ifndef NXOpen_GEOMETRICUTILITIES_CRAYONSELECTIONDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CRAYONSELECTIONDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CrayonSelectionData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricutilities_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CrayonSelectionData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    class View;
    namespace GeometricUtilities
    {
        class _CrayonSelectionDataBuilder;
        class CrayonSelectionDataImpl;
        /** Represents a @link NXOpen::GeometricUtilities::CrayonSelectionData NXOpen::GeometricUtilities::CrayonSelectionData@endlink .
                A crayon is a trail of cursor in view plane selecting the entities underneath. 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICUTILITIESEXPORT  CrayonSelectionData : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
             /** Structure representing selected entity data. 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public:
            struct EntityData
            {
                public: /** Entity in root part */NXOpen::NXObject * Entity;
                public: /** Pick point on entity in root part */NXOpen::Point3d PickPoint;
                public: /** Selection view */NXOpen::View * View;
                public: EntityData() :
                    Entity(),
                    PickPoint(),
                    View()
                {
                }
                /** Constructor for the EntityData struct. */ 
                public: EntityData(NXOpen::NXObject * entityInitial /** Entity in root part */, 
                        const NXOpen::Point3d &pickPointInitial /** Pick point on entity in root part */, 
                        NXOpen::View * viewInitial /** Selection view */) :
                    Entity(entityInitial),
                    PickPoint(pickPointInitial),
                    View(viewInitial)
                {
                }
            };

            private: CrayonSelectionDataImpl * m_crayonselectiondata_impl;
            private: friend class  _CrayonSelectionDataBuilder;
            protected: CrayonSelectionData();
            public: ~CrayonSelectionData();
            /** Selects an entity and appends to currently selected array of entities. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SelectEntity
            (
                const NXOpen::GeometricUtilities::CrayonSelectionData::EntityData & entity /** entity */ 
            );
            /** Selects an array of entities and appends to currently selected entities. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SelectEntities
            (
                const std::vector<NXOpen::GeometricUtilities::CrayonSelectionData::EntityData> & entities /** entities */ 
            );
            /** Queries all the selected entities. Note that the returned array may contain repeated entries for
                        an entity as user may have selected it multiple times using crayon dragging.  @return  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::GeometricUtilities::CrayonSelectionData::EntityData> GetEntities
            (
            );
            /** Clears all the selected entities 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void Clear
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
