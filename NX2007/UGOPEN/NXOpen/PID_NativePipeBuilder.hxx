#ifndef NXOpen_PID_NATIVEPIPEBUILDER_HXX_INCLUDED
#define NXOpen_PID_NATIVEPIPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_NativePipeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PID_NativeEquipment.hxx>
#include <NXOpen/PID_NativePipe.hxx>
#include <NXOpen/PID_NativePortEquipment.hxx>
#include <NXOpen/PID_NativeSheet.hxx>
#include <NXOpen/PID_PipeBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class NativePipeBuilder;
    }
    namespace PID
    {
        class NativeManager;
    }
    namespace PID
    {
        class NativeEquipment;
    }
    namespace PID
    {
        class NativePipe;
    }
    namespace PID
    {
        class NativePortEquipment;
    }
    namespace PID
    {
        class NativeSheet;
    }
    namespace PID
    {
        class PipeBuilder;
    }
    namespace PID
    {
        class NativePipeBuilderImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  Represents a PipeBuilder.  

           <br> To obtain an instance of this class, refer to @link NXOpen::PID::NativeManager  NXOpen::PID::NativeManager @endlink  <br> 
         <br>  Created in NX12.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  NativePipeBuilder
        {
            private: NativePipeBuilderImpl * m_nativepipebuilder_impl;
            private: NXOpen::PID::NativeManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit NativePipeBuilder(NXOpen::PID::NativeManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~NativePipeBuilder();

            /// \cond NX_NO_DOC 
            /** Gets the line type of the pipe. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetLineType
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the line type of the pipe. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLineType
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                const NXString & lineType /** linetype */ 
            );
            /** Sets the line type of the pipe. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetLineType
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                const char * lineType /** linetype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the owning sheet of this pipe. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::NativeSheet * GetOwningSheet
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the owning sheet of this pipe. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningSheet
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                NXOpen::PID::NativeSheet * owningSheet /** owningsheet */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the start port of this connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void GetStart
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool* isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment ** equipment /** equipment */ ,
                NXString* portId /** portid */ ,
                NXOpen::PID::NativePortEquipment ** portEquipment /** portequipment */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the start port of this connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStart
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment * equipment /** works only when isNozzle is false*/,
                const NXString & portId /** works only when isNozzle is false*/,
                NXOpen::PID::NativePortEquipment * portEquipment /** works only when isNozzle is true*/
            );
            /** Sets the start port of this connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetStart
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment * equipment /** works only when isNozzle is false*/,
                const char * portId /** works only when isNozzle is false*/,
                NXOpen::PID::NativePortEquipment * portEquipment /** works only when isNozzle is true*/
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the end port of this pipe in native.
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void GetEnd
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool* isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment ** equipment /** equipment */ ,
                NXString* portId /** portid */ ,
                NXOpen::PID::NativePortEquipment ** portEquipment /** portequipment */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the end port of this pipe in native.
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetEnd
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment * equipment /** works only when isNozzle is false*/,
                const NXString & portId /** works only when isNozzle is false*/,
                NXOpen::PID::NativePortEquipment * portEquipment /** works only when isNozzle is true*/
            );
            /** Sets the end port of this pipe in native.
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetEnd
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                bool isNozzle /** isnozzle */ ,
                NXOpen::PID::NativeEquipment * equipment /** works only when isNozzle is false*/,
                const char * portId /** works only when isNozzle is false*/,
                NXOpen::PID::NativePortEquipment * portEquipment /** works only when isNozzle is true*/
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the connection location for tee object at the start of the connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void GetStartTeeLocation
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                NXOpen::PID::NativePipe ** pipe /** pipe */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the connection location for tee object at the start of the connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStartTeeLocation
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                NXOpen::PID::NativePipe * pipe /** pipe */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the connection location for tee object at the end of the connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void GetEndTeeLocation
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                NXOpen::PID::NativePipe ** pipe /** pipe */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the connection location for tee object at the end of the connection in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetEndTeeLocation
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ ,
                NXOpen::PID::NativePipe * pipe /** pipe */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets new connection after inserting the start Tee in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::NativePipe * GetNewStartTeeConnection
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets new connection after inserting the end Tee in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::NativePipe * GetNewEndTeeConnection
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the start Tee in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::NativeEquipment * GetStartTee
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the end Tee in native. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::NativeEquipment * GetEndTee
            (
                NXOpen::PID::PipeBuilder * builder /** builder */ 
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
