#ifndef NXOpen_PREFERENCES_MODELINGPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_PREFERENCES_MODELINGPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_ModelingPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LineFontBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class ModelingPreferencesBuilder;
    }
    class Builder;
    class LineFontBuilder;
    class NXColor;
    namespace Preferences
    {
        class _ModelingPreferencesBuilderBuilder;
        class ModelingPreferencesBuilderImpl;
        /** Represents a @link NXOpen::Preferences::ModelingPreferencesBuilder NXOpen::Preferences::ModelingPreferencesBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::Preferences::SessionPreferences::CreateModelingPreferencesBuilder  NXOpen::Preferences::SessionPreferences::CreateModelingPreferencesBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  ModelingPreferencesBuilder : public NXOpen::Builder
        {
            /** This enum specifies Body Type enum types */
            public: enum BodyType
            {
                BodyTypeSolid/** solid */ ,
                BodyTypeSheet/** sheet */ 
            };

            /** This enum specifies Density Units enum types */
            public: enum DensityUnits
            {
                DensityUnitsLbmin3/** lbmin3 */ ,
                DensityUnitsLbmft3/** lbmft3 */ ,
                DensityUnitsGcm3/** gcm3 */ ,
                DensityUnitsKgm3/** kgm3 */ 
            };

            /** This enum specifies For New Faces enum types */
            public: enum NewFaces
            {
                NewFacesInheritfromParent/** inheritfrom parent */ ,
                NewFacesInheritObjectPreferences/** inherit object preferences */ 
            };

            /** This enum specifies For Face Modified By Boolean enum types */
            public: enum FaceModifiedByBoolean
            {
                FaceModifiedByBooleanInheritfromTargetBody/** inheritfrom target body */ ,
                FaceModifiedByBooleanInheritfromToolBody/** inheritfrom tool body */ 
            };

            /** This enum specifies For Link Or Extract Geometry  enum types */
            public: enum LinkOrExtractGeometry
            {
                LinkOrExtractGeometryInheritfromParent/** inheritfrom parent */ ,
                LinkOrExtractGeometryInheritObjectPreferences/** inherit object preferences */ 
            };

            /** This enum specifies For Modeling Mode enum types */
            public: enum ModelingMode
            {
                ModelingModeHistoryFree/** history free */ ,
                ModelingModeHistory/** history */ 
            };

            /** This enum specifies For Feature Double Click Action enum types */
            public: enum FeatureDoubleClickAction
            {
                FeatureDoubleClickActionEditParameter/** edit parameter */ ,
                FeatureDoubleClickActionEditwithRollback/** editwith rollback */ 
            };

            /** This enum specifies For Sketch Double Click Action enum types */
            public: enum SketchDoubleClickAction
            {
                SketchDoubleClickActionEditwithRollback/** editwith rollback */ ,
                SketchDoubleClickActionDirectEdit/** direct edit */ 
            };

            /** This enum specifies For Delete Child Features enum types */
            public: enum DeleteChildFeatures
            {
                DeleteChildFeaturesYes/** yes */  = 1,
                DeleteChildFeaturesNo/** no */ ,
                DeleteChildFeaturesAsk/** ask */ 
            };

            /** This enum specifies For Model Delay And Update Granularity enum types */
            public: enum ModelDelayAndUpdateGranularity
            {
                ModelDelayAndUpdateGranularityGroup/** group */ ,
                ModelDelayAndUpdateGranularityFeature/** feature */ 
            };

            /** This enum specifies For Dynamic Update Mode enum types */
            public: enum DynamicUpdateMode
            {
                DynamicUpdateModeNone/** none */ ,
                DynamicUpdateModeIncremental/** incremental */ ,
                DynamicUpdateModeContinuous/** continuous */ 
            };

            /** This enum specifies For Dynamics Update Level enum types */
            public: enum DynamicsUpdateLevel
            {
                DynamicsUpdateLevelFirst/** first */ ,
                DynamicsUpdateLevelAll/** all */ 
            };

            /** This enum specifies For Action After nterrupt enum types */
            public: enum ActionAfternterrupt
            {
                ActionAfternterruptMakeLastSuccessfulFeatureCurrent/** make last successful feature current */ ,
                ActionAfternterruptUndo/** undo */ 
            };

            /** This enum specifies Curve Fit Method enum types */
            public: enum CurveFitMethod
            {
                CurveFitMethodCubic/** cubic */ ,
                CurveFitMethodQuintic/** quintic */ ,
                CurveFitMethodAdvanced/** advanced */ 
            };

            /** This enum specifies For Planar Face Type enum types */
            public: enum PlanarFaceType
            {
                PlanarFaceTypePlane/** plane */ ,
                PlanarFaceTypeBsurface/** bsurface */ 
            };

            /** This enum specifies For Surface Extension enum types */
            public: enum SurfaceExtension
            {
                SurfaceExtensionLinear/** linear */ ,
                SurfaceExtensionSoft/** soft */ 
            };

            /** This enum specifies For Spline Default ClickAction enum types */
            public: enum SplineDefaultClickAction
            {
                SplineDefaultClickActionStudioSpline/** studio spline */ ,
                SplineDefaultClickActionXForm/** xform */ 
            };

            /** This enum specifies For Preview Resolution enum types */
            public: enum PreviewResolution
            {
                PreviewResolutionNone/** none */ ,
                PreviewResolutionCoarse/** coarse */ ,
                PreviewResolutionStandard/** standard */ ,
                PreviewResolutionFine/** fine */ ,
                PreviewResolutionExtraFine/** extra fine */ ,
                PreviewResolutionSuperFine/** super fine */ ,
                PreviewResolutionUltraFine/** ultra fine */ 
            };

            /** This enum specifies For Pole Color enum types */
            public: enum PoleColor
            {
                PoleColorBodyColor/** body color */ ,
                PoleColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For Pole Style enum types */
            public: enum PoleStyle
            {
                PoleStyleThreeDimensionSphere/** three dimension sphere */ ,
                PoleStyleOpenCircle/** open circle */ ,
                PoleStyleFilledCircle/** filled circle */ ,
                PoleStylePlusSign/** plus sign */ ,
                PoleStyleCross/** cross */ 
            };

            /** This enum specifies For Edit Pole Color enum types */
            public: enum EditPoleColor
            {
                EditPoleColorBodyColor/** body color */ ,
                EditPoleColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For Edit Pole Style enum types */
            public: enum EditPoleStyle
            {
                EditPoleStyleThreeDimensionSphere/** three dimension sphere */ ,
                EditPoleStyleOpenCircle/** open circle */ ,
                EditPoleStyleFilledCircle/** filled circle */ ,
                EditPoleStylePlusSign/** plus sign */ ,
                EditPoleStyleCross/** cross */ 
            };

            /** This enum specifies For Polyline Color enum types */
            public: enum PolylineColor
            {
                PolylineColorBodyColor/** body color */ ,
                PolylineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For Edit Polyline Color enum types */
            public: enum EditPolylineColor
            {
                EditPolylineColorBodyColor/** body color */ ,
                EditPolylineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For Grid Line Color enum types */
            public: enum GridLineColor
            {
                GridLineColorBodyColor/** body color */ ,
                GridLineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For C0 Knot Line Color enum types */
            public: enum C0KnotLineColor
            {
                C0KnotLineColorBodyColor/** body color */ ,
                C0KnotLineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For C1 Knot Line Color enum types */
            public: enum C1KnotLineColor
            {
                C1KnotLineColorBodyColor/** body color */ ,
                C1KnotLineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For C2 Knot Line Color enum types */
            public: enum C2KnotLineColor
            {
                C2KnotLineColorBodyColor/** body color */ ,
                C2KnotLineColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For End Point Color enum types */
            public: enum EndPointColor
            {
                EndPointColorCurveColor/** curve color */ ,
                EndPointColorSpecificColor/** specific color */ 
            };

            /** This enum specifies For End Point Style enum types */
            public: enum EndPointStyle
            {
                EndPointStyleOpenCircle/** open circle */ ,
                EndPointStyleFilledCircle/** filled circle */ ,
                EndPointStylePlusSign/** plus sign */ ,
                EndPointStyleCross/** cross */ 
            };

            private: ModelingPreferencesBuilderImpl * m_modelingpreferencesbuilder_impl;
            private: friend class  _ModelingPreferencesBuilderBuilder;
            protected: ModelingPreferencesBuilder();
            public: ~ModelingPreferencesBuilder();
            /**Returns  the body type value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::BodyType BodyTypeValue
            (
            );
            /**Sets  the body type value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBodyTypeValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::BodyType bodyTypeValue /** bodytypevalue */ 
            );
            /**Returns  the density value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double DensityValue
            (
            );
            /**Sets  the density value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDensityValue
            (
                double densityValue /** densityvalue */ 
            );
            /**Returns  the density units value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::DensityUnits DensityUnitsValue
            (
            );
            /**Sets  the density units value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDensityUnitsValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::DensityUnits densityUnitsValue /** densityunitsvalue */ 
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the optimize curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptimizeCurve
            (
            );
            /**Sets  the optimize curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizeCurve
            (
                bool optimizeCurve /** optimizecurve */ 
            );
            /**Returns  the optimize curve ditance tol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double OptimizeCurveDitanceTol
            (
            );
            /**Sets  the optimize curve ditance tol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizeCurveDitanceTol
            (
                double optimizeCurveDitanceTol /** optimizecurveditancetol */ 
            );
            /**Returns  the optimize curve angle tol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double OptimizeCurveAngleTol
            (
            );
            /**Sets  the optimize curve angle tol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptimizeCurveAngleTol
            (
                double optimizeCurveAngleTol /** optimizecurveangletol */ 
            );
            /**Returns  the new faces value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::NewFaces NewFacesValue
            (
            );
            /**Sets  the new faces value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewFacesValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::NewFaces newFacesValue /** newfacesvalue */ 
            );
            /**Returns  the faces modified by boolean value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::FaceModifiedByBoolean FacesModifiedByBooleanValue
            (
            );
            /**Sets  the faces modified by boolean value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFacesModifiedByBooleanValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::FaceModifiedByBoolean facesModifiedByBooleanValue /** facesmodifiedbybooleanvalue */ 
            );
            /**Returns  the link or extract geometry value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::LinkOrExtractGeometry LinkOrExtractGeometryValue
            (
            );
            /**Sets  the link or extract geometry value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLinkOrExtractGeometryValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::LinkOrExtractGeometry linkOrExtractGeometryValue /** linkorextractgeometryvalue */ 
            );
            /**Returns  the u grid lines 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int UGridLines
            (
            );
            /**Sets  the u grid lines 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUGridLines
            (
                int uGridLines /** ugridlines */ 
            );
            /**Returns  the v grid lines 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int VGridLines
            (
            );
            /**Sets  the v grid lines 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVGridLines
            (
                int vGridLines /** vgridlines */ 
            );
            /**Returns  the make sketch internal 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakeSketchInternal
            (
            );
            /**Sets  the make sketch internal 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMakeSketchInternal
            (
                bool makeSketchInternal /** makesketchinternal */ 
            );
            /**Returns  the modeling mode value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::ModelingMode ModelingModeValue
            (
            );
            /**Sets  the modeling mode value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelingModeValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::ModelingMode modelingModeValue /** modelingmodevalue */ 
            );
            /**Returns  the feature double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::FeatureDoubleClickAction FeatureDoubleClickActionValue
            (
            );
            /**Sets  the feature double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFeatureDoubleClickActionValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::FeatureDoubleClickAction featureDoubleClickActionValue /** featuredoubleclickactionvalue */ 
            );
            /**Returns  the sketch double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::SketchDoubleClickAction SketchDoubleClickActionValue
            (
            );
            /**Sets  the sketch double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSketchDoubleClickActionValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::SketchDoubleClickAction sketchDoubleClickActionValue /** sketchdoubleclickactionvalue */ 
            );
            /**Returns  the show parent sketch dim 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowParentSketchDim
            (
            );
            /**Sets  the show parent sketch dim 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowParentSketchDim
            (
                bool showParentSketchDim /** showparentsketchdim */ 
            );
            /**Returns  the notify on delete 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool NotifyOnDelete
            (
            );
            /**Sets  the notify on delete 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNotifyOnDelete
            (
                bool notifyOnDelete /** notifyondelete */ 
            );
            /**Returns  the delete child features value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::DeleteChildFeatures DeleteChildFeaturesValue
            (
            );
            /**Sets  the delete child features value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeleteChildFeaturesValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::DeleteChildFeatures deleteChildFeaturesValue /** deletechildfeaturesvalue */ 
            );
            /**Returns  the delay model update 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool DelayModelUpdate
            (
            );
            /**Sets  the delay model update 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDelayModelUpdate
            (
                bool delayModelUpdate /** delaymodelupdate */ 
            );
            /**Returns  the update dialog on warning 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditDuringUpdateDialogOnWarning
            (
            );
            /**Sets  the update dialog on warning 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditDuringUpdateDialogOnWarning
            (
                bool updateOnWarning /** updateonwarning */ 
            );
            /**Returns  the update dialog on warning 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditDuringUpdateDialogOnError
            (
            );
            /**Sets  the update dialog on warning 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditDuringUpdateDialogOnError
            (
                bool updateOnError /** updateonerror */ 
            );
            /**Returns  the model delay and update granularity value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::ModelDelayAndUpdateGranularity ModelDelayAndUpdateGranularityValue
            (
            );
            /**Sets  the model delay and update granularity value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelDelayAndUpdateGranularityValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::ModelDelayAndUpdateGranularity modelDelayAndUpdateGranularityValue /** modeldelayandupdategranularityvalue */ 
            );
            /**Returns  the dynamics update mode value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::DynamicUpdateMode DynamicsUpdateModeValue
            (
            );
            /**Sets  the dynamics update mode value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicsUpdateModeValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::DynamicUpdateMode dynamicsUpdateModeValue /** dynamicsupdatemodevalue */ 
            );
            /**Returns  the dynamics update level value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::DynamicsUpdateLevel DynamicsUpdateLevelValue
            (
            );
            /**Sets  the dynamics update level value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicsUpdateLevelValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::DynamicsUpdateLevel dynamicsUpdateLevelValue /** dynamicsupdatelevelvalue */ 
            );
            /**Returns  the warn on missing reference 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool WarnOnMissingReference
            (
            );
            /**Sets  the warn on missing reference 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWarnOnMissingReference
            (
                bool warnOnMissingReference /** warnonmissingreference */ 
            );
            /**Returns  the make current feature on error 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakeCurrentFeatureOnError
            (
            );
            /**Sets  the make current feature on error 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMakeCurrentFeatureOnError
            (
                bool makeCurrentFeatureOnError /** makecurrentfeatureonerror */ 
            );
            /**Returns  the report warning after update 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportWarningAfterUpdate
            (
            );
            /**Sets  the report warning after update 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReportWarningAfterUpdate
            (
                bool reportWarningAfterUpdate /** reportwarningafterupdate */ 
            );
            /**Returns  the action after interrupt value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::ActionAfternterrupt ActionAfterInterruptValue
            (
            );
            /**Sets  the action after interrupt value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActionAfterInterruptValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::ActionAfternterrupt actionAfterInterruptValue /** actionafterinterruptvalue */ 
            );
            /**Returns  the curve fit method value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::CurveFitMethod CurveFitMethodValue
            (
            );
            /**Sets  the curve fit method value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveFitMethodValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::CurveFitMethod curveFitMethodValue /** curvefitmethodvalue */ 
            );
            /**Returns  the max rebuild degree 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxRebuildDegree
            (
            );
            /**Sets  the max rebuild degree 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxRebuildDegree
            (
                int maxRebuildDegree /** maxrebuilddegree */ 
            );
            /**Returns  the max rebuild segments 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxRebuildSegments
            (
            );
            /**Sets  the max rebuild segments 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxRebuildSegments
            (
                int maxRebuildSegments /** maxrebuildsegments */ 
            );
            /**Returns  the planar face type value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::PlanarFaceType PlanarFaceTypeValue
            (
            );
            /**Sets  the planar face type value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPlanarFaceTypeValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::PlanarFaceType planarFaceTypeValue /** planarfacetypevalue */ 
            );
            /**Returns  the surface extension value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::SurfaceExtension SurfaceExtensionValue
            (
            );
            /**Sets  the surface extension value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSurfaceExtensionValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::SurfaceExtension surfaceExtensionValue /** surfaceextensionvalue */ 
            );
            /**Returns  the spline double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::SplineDefaultClickAction SplineDoubleClickActionValue
            (
            );
            /**Sets  the spline double click action value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSplineDoubleClickActionValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::SplineDefaultClickAction splineDoubleClickActionValue /** splinedoubleclickactionvalue */ 
            );
            /**Returns  the associative free form edit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeFreeFormEdit
            (
            );
            /**Sets  the associative free form edit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociativeFreeFormEdit
            (
                bool associativeFreeFormEdit /** associativefreeformedit */ 
            );
            /**Returns  the preview resolution value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::PreviewResolution PreviewResolutionValue
            (
            );
            /**Sets  the preview resolution value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPreviewResolutionValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::PreviewResolution previewResolutionValue /** previewresolutionvalue */ 
            );
            /**Returns  the activate trimmed animation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ActivateTrimmedAnimation
            (
            );
            /**Sets  the activate trimmed animation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActivateTrimmedAnimation
            (
                bool activateTrimmedAnimation /** activatetrimmedanimation */ 
            );
            /**Returns  the use triangular mesh 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTriangularMesh
            (
            );
            /**Sets  the use triangular mesh 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseTriangularMesh
            (
                bool useTriangularMesh /** usetriangularmesh */ 
            );
            /**Returns  the treat degrre1 spline as polyline 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool TreatDegrre1SplineAsPolyline
            (
            );
            /**Sets  the treat degrre1 spline as polyline 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTreatDegrre1SplineAsPolyline
            (
                bool treatDegrre1SplineAsPolyline /** treatdegrre1splineaspolyline */ 
            );
            /**Returns  the facet distance tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double FacetDistanceTolerance
            (
            );
            /**Sets  the facet distance tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFacetDistanceTolerance
            (
                double facetDistanceTolerance /** facetdistancetolerance */ 
            );
            /**Returns  the facet angle tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double FacetAngleTolerance
            (
            );
            /**Sets  the facet angle tolerance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFacetAngleTolerance
            (
                double facetAngleTolerance /** facetangletolerance */ 
            );
            /**Returns  the limit facet width to maximum 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool LimitFacetWidthToMaximum
            (
            );
            /**Sets  the limit facet width to maximum 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimitFacetWidthToMaximum
            (
                bool limitFacetWidthToMaximum /** limitfacetwidthtomaximum */ 
            );
            /**Returns  the max facet width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxFacetWidth
            (
            );
            /**Sets  the max facet width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxFacetWidth
            (
                double maxFacetWidth /** maxfacetwidth */ 
            );
            /**Returns  the limit chord length to max 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool LimitChordLengthToMax
            (
            );
            /**Sets  the limit chord length to max 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimitChordLengthToMax
            (
                bool limitChordLengthToMax /** limitchordlengthtomax */ 
            );
            /**Returns  the max chord length 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxChordLength
            (
            );
            /**Sets  the max chord length 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaxChordLength
            (
                double maxChordLength /** maxchordlength */ 
            );
            /**Returns  the pole color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::PoleColor PoleColorValue
            (
            );
            /**Sets  the pole color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::PoleColor poleColorValue /** polecolorvalue */ 
            );
            /**Returns  the specific pole color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificPoleColor
            (
            );
            /**Sets  the specific pole color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificPoleColor
            (
                NXOpen::NXColor * specificPoleColor /** specificpolecolor */ 
            );
            /**Returns  the pole style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::PoleStyle PoleStyleValue
            (
            );
            /**Sets  the pole style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleStyleValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::PoleStyle poleStyleValue /** polestylevalue */ 
            );
            /**Returns  the edit pole color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::EditPoleColor EditPoleColorValue
            (
            );
            /**Sets  the edit pole color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditPoleColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::EditPoleColor editPoleColorValue /** editpolecolorvalue */ 
            );
            /**Returns  the edit specifc pole color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * EditSpecifcPoleColor
            (
            );
            /**Sets  the edit specifc pole color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditSpecifcPoleColor
            (
                NXOpen::NXColor * editSpecifcPoleColor /** editspecifcpolecolor */ 
            );
            /**Returns  the edit pole style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::EditPoleStyle EditPoleStyleValue
            (
            );
            /**Sets  the edit pole style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditPoleStyleValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::EditPoleStyle editPoleStyleValue /** editpolestylevalue */ 
            );
            /**Returns  the polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::PolylineColor PolylineColorValue
            (
            );
            /**Sets  the polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::PolylineColor polylineColorValue /** polylinecolorvalue */ 
            );
            /**Returns  the specific polyline color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificPolylineColor
            (
            );
            /**Sets  the specific polyline color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificPolylineColor
            (
                NXOpen::NXColor * specificPolylineColor /** specificpolylinecolor */ 
            );
            /**Returns  the polyline style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * PolylineStyleValue
            (
            );
            /**Returns  the edit polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::EditPolylineColor EditPolylineColorValue
            (
            );
            /**Sets  the edit polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditPolylineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::EditPolylineColor editPolylineColorValue /** editpolylinecolorvalue */ 
            );
            /**Returns  the edit specific polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * EditSpecificPolylineColorValue
            (
            );
            /**Sets  the edit specific polyline color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditSpecificPolylineColorValue
            (
                NXOpen::NXColor * editSpecificPolylineColorValue /** editspecificpolylinecolorvalue */ 
            );
            /**Returns  the edit polyline style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * EditPolylineStyleValue
            (
            );
            /**Returns  the grid line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::GridLineColor GridLineColorValue
            (
            );
            /**Sets  the grid line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGridLineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::GridLineColor gridLineColorValue /** gridlinecolorvalue */ 
            );
            /**Returns  the specific grid line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificGridLineColor
            (
            );
            /**Sets  the specific grid line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificGridLineColor
            (
                NXOpen::NXColor * specificGridLineColor /** specificgridlinecolor */ 
            );
            /**Returns  the grid line style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * GridLineStyleValue
            (
            );
            /**Returns  the c0 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::C0KnotLineColor C0KnotLineColorValue
            (
            );
            /**Sets  the c0 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC0KnotLineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::C0KnotLineColor c0KnotLineColorValue /** c0knotlinecolorvalue */ 
            );
            /**Returns  the specific c0 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificC0KnotLineColor
            (
            );
            /**Sets  the specific c0 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificC0KnotLineColor
            (
                NXOpen::NXColor * specificC0KnotLineColor /** specificc0knotlinecolor */ 
            );
            /**Returns  the c0 knot line style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * C0KnotLineStyleValue
            (
            );
            /**Returns  the c1 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::C1KnotLineColor C1KnotLineColorValue
            (
            );
            /**Sets  the c1 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC1KnotLineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::C1KnotLineColor c1KnotLineColorValue /** c1knotlinecolorvalue */ 
            );
            /**Returns  the specific c1 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificC1KnotLineColor
            (
            );
            /**Sets  the specific c1 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificC1KnotLineColor
            (
                NXOpen::NXColor * specificC1KnotLineColor /** specificc1knotlinecolor */ 
            );
            /**Returns  the c1 knot line style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * C1KnotLineStyleValue
            (
            );
            /**Returns  the c2 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::C2KnotLineColor C2KnotLineColorValue
            (
            );
            /**Sets  the c2 knot line color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetC2KnotLineColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::C2KnotLineColor c2KnotLineColorValue /** c2knotlinecolorvalue */ 
            );
            /**Returns  the specific c2 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificC2KnotLineColor
            (
            );
            /**Sets  the specific c2 knot line color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificC2KnotLineColor
            (
                NXOpen::NXColor * specificC2KnotLineColor /** specificc2knotlinecolor */ 
            );
            /**Returns  the c2 knot line style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * C2KnotLineStyleValue
            (
            );
            /**Returns  the end point color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::EndPointColor EndPointColorValue
            (
            );
            /**Sets  the end point color value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEndPointColorValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::EndPointColor endPointColorValue /** endpointcolorvalue */ 
            );
            /**Returns  the specific end point color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SpecificEndPointColor
            (
            );
            /**Sets  the specific end point color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecificEndPointColor
            (
                NXOpen::NXColor * specificEndPointColor /** specificendpointcolor */ 
            );
            /**Returns  the end point style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ModelingPreferencesBuilder::EndPointStyle EndPointStyleValue
            (
            );
            /**Sets  the end point style value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEndPointStyleValue
            (
                NXOpen::Preferences::ModelingPreferencesBuilder::EndPointStyle endPointStyleValue /** endpointstylevalue */ 
            );
            /**Returns  the show simulation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSimulation
            (
            );
            /**Sets  the show simulation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowSimulation
            (
                bool showSimulation /** showsimulation */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
