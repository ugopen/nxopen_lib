#ifndef NXOpen_SCHEMATIC_MECHANICAL_RUNBUILDER_HXX_INCLUDED
#define NXOpen_SCHEMATIC_MECHANICAL_RUNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Schematic_Mechanical_RunBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_PartOperationCreateBuilder.hxx>
#include <NXOpen/libnxopencpp_schematic_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Schematic
    {
        namespace Mechanical
        {
            class RunBuilder;
        }
    }
    class Builder;
    namespace PDM
    {
        class PartOperationCreateBuilder;
    }
    namespace Schematic
    {
        namespace Mechanical
        {
            class _RunBuilderBuilder;
            class RunBuilderImpl;
            /**  @brief  Represents a RunBuilder.  

               <br> To create a new instance of this class, use @link NXOpen::Schematic::Mechanical::RunCollection::CreateRunBuilder  NXOpen::Schematic::Mechanical::RunCollection::CreateRunBuilder @endlink  <br> 
             <br>  Created in NX1980.0.0.  <br>  
            */
            class NXOPENCPP_SCHEMATICEXPORT  RunBuilder : public NXOpen::Builder
            {
                private: RunBuilderImpl * m_runbuilder_impl;
                private: friend class  _RunBuilderBuilder;
                protected: RunBuilder();
                public: ~RunBuilder();
                /**Returns  the identifier
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Identifier
                (
                );
                /**Sets  the identifier
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetIdentifier
                (
                    const NXString & id /** The identifier of the run object*/
                );
                /**Sets  the identifier
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetIdentifier
                (
                    const char * id /** The identifier of the run object*/
                );
                /**Returns  the discipline
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Discipline
                (
                );
                /**Sets  the discipline
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetDiscipline
                (
                    const NXString & discipline /** The discipline of the run object*/
                );
                /**Sets  the discipline
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetDiscipline
                (
                    const char * discipline /** The discipline of the run object*/
                );
                /**Returns  the specification
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Specification
                (
                );
                /**Sets  the specification
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetSpecification
                (
                    const NXString & specification /** The specification of the run object*/
                );
                /**Sets  the specification
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetSpecification
                (
                    const char * specification /** The specification of the run object*/
                );
                /**Returns  the line type
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString LineType
                (
                );
                /**Sets  the line type
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetLineType
                (
                    const NXString & lineType /** The line type of the run object*/
                );
                /**Sets  the line type
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetLineType
                (
                    const char * lineType /** The line type of the run object*/
                );
                /**Returns  the display name
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString DisplayName
                (
                );
                /**Sets  the display name
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetDisplayName
                (
                    const NXString & name /** The display name of the run object*/
                );
                /**Sets  the display name
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetDisplayName
                (
                    const char * name /** The display name of the run object*/
                );
                /**Returns  the application name of the run. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString ObjectApplication
                (
                );
                /**Sets  the application name of the run. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetObjectApplication
                (
                    const NXString & objectApplication /** The application name of the run object */
                );
                /**Sets  the application name of the run. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                void SetObjectApplication
                (
                    const char * objectApplication /** The application name of the run object */
                );
                /**Returns  whether the run is standalone run which will be reside in logical model part. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Standalone
                (
                );
                /**Sets  whether the run is standalone run which will be reside in logical model part. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetStandalone
                (
                    bool standalone /** Whether the run object is a standalone run */
                );
                /** Set the @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink  
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_diagramming ("NX Diagramming"), routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
                public: void SetPartOperationCreateBuilder
                (
                    NXOpen::PDM::PartOperationCreateBuilder * createBuilder /** createbuilder */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
