#ifndef NXOpen_CAE_SIMBCDISPLAY_HXX_INCLUDED
#define NXOpen_CAE_SIMBCDISPLAY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimBCDisplay.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimBCDisplay;
    }
    namespace CAE
    {
        class _SimBCDisplayBuilder;
        class SimBCDisplayImpl;
        /**  @brief  Represents a BC display attributes 

          
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimBCDisplay : public NXOpen::TaggedObject
        {
            /** Used to specify the display mode for the BC */
            public: enum Mode
            {
                ModeCollapse/** Set a collapsed display mode */,
                ModeExpand/** Set an expanded display mode */,
                ModeOffset/** Set an offset display mode. Draw the edge BC display
                                                                     using an offset line along the BC target locations */
            };

            /** Used to specify the display distribute type */
            public: enum Distribute
            {
                DistributeDefault/** default */  = -1,
                DistributeNodes/** nodes */ ,
                DistributeElements/** elements */ ,
                DistributeElementFaces/** element faces */ ,
                DistributeElementEdges/** element edges */ 
            };

            private: SimBCDisplayImpl * m_simbcdisplay_impl;
            private: friend class  _SimBCDisplayBuilder;
            protected: SimBCDisplay();
            public: ~SimBCDisplay();
            /**Returns  the BC display mode 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCDisplay::Mode DisplayMode
            (
            );
            /**Sets  the BC display mode 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayMode
            (
                NXOpen::CAE::SimBCDisplay::Mode displayMode /** the display mode */
            );
            /**Returns  the true/false flag based on whether the value of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool ValueDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the value of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueDisplayFlag
            (
                bool valueFlag /** true when the value should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the distributed value of the BC is
                        displayed in the graphics window 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool DistValueDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the distributed value of the BC is
                        displayed in the graphics window 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDistValueDisplayFlag
            (
                bool valueFlag /** true when the distributed values should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the user wants to display
                        free faces based FE elements based display symbols 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool FreeFacesObjectsDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the user wants to display
                        free faces based FE elements based display symbols 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFreeFacesObjectsDisplayFlag
            (
                bool freeFacesFlag /** true when the free faces based symbols are displayed, false otherwise */
            );

            /// \cond NX_NO_DOC 
            /**Returns  the true/false flag based on whether the user wants to display
                        symbols in spectrum colors 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool SpectrumColorsDisplayFlag
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the true/false flag based on whether the user wants to display
                        symbols in spectrum colors 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSpectrumColorsDisplayFlag
            (
                bool spectrumColorsFlag /** true when the free faces based symbols are displayed, false otherwise */
            );

            /// \endcond 
            /**Returns  the true/false flag based on whether the name of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool NameDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the name of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNameDisplayFlag
            (
                bool nameFlag /** true when the name should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the text of the BC is
                        rotated in the graphics window 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool RotateDisplayTextFlag
            (
            );
            /**Sets  the true/false flag based on whether the text of the BC is
                        rotated in the graphics window 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRotateDisplayTextFlag
            (
                bool rotatedTextFlag /** true when the text is rotated, false otherwise */
            );
            /**Returns  the true/false flag based on whether the node id of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool NodeIdDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the node id of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeIdDisplayFlag
            (
                bool nodeIdFlag /** true when the node id should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the solver card name of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool SolverCardNameDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the solver card name of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolverCardNameDisplayFlag
            (
                bool solverCardNameFlag /** true when the solver card name should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the graphic symbol of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GraphicSymbolDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the graphic symbol of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGraphicSymbolDisplayFlag
            (
                bool graphicSymbolFlag /** true when the graphic symbol should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the text symbol of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool TextSymbolDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the text symbol of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTextSymbolDisplayFlag
            (
                bool textSymbolFlag /** true when the text symbol should be displayed, false otherwise */
            );
            /**Returns  the true/false flag based on whether the dof of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool DofDisplayFlag
            (
            );
            /**Sets  the true/false flag based on whether the dof of the BC is
                        displayed in the graphics window 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDofDisplayFlag
            (
                bool dofFlag /** true when the dof should be displayed, false otherwise */
            );
            /** Returns the number of sample points for BC display in first and second parametric direction
                        for a face. In case of an edge/curve only the first parametric direction applies.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetDisplayGrid
            (
                int* numUPoints /** number of points in the first parametric direction  */,
                int* numVPoints /** number of points in the second parametric direction */
            );
            /** Sets the number of sample points for BC display in first and second parametric direction
                        for a face. In case of an edge/curve only the first parametric direction applies.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayGrid
            (
                int numUPoints /** number of points in the first parametric direction  */,
                int numVPoints /** number of points in the second parametric direction */
            );
            /**Returns  the BC display scaling factor
                        this option specifies the scale of the graphic symbol relative to the size of the bounding box of the FE model.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int Scale
            (
            );
            /**Sets  the BC display scaling factor
                        this option specifies the scale of the graphic symbol relative to the size of the bounding box of the FE model.
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScale
            (
                int scale /** 1 is the smallest - 100 is the largest */
            );
            /**Returns  the BC display translucency factor
                        this option specifies the translucency of the BC display symbol.
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int Translucency
            (
            );
            /**Sets  the BC display translucency factor
                        this option specifies the translucency of the BC display symbol.
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTranslucency
            (
                int translucency /** 0 is the smallest (opaque) - 100 is the largest (translucent) */
            );
            /** Updates the display of the BC
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void UpdateDisplay
            (
            );
            /**Returns  the flag indicating whether or not shading of graphic symbols is required 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool ShadeGraphicSymbol
            (
            );
            /**Sets  the flag indicating whether or not shading of graphic symbols is required 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetShadeGraphicSymbol
            (
                bool shadeGsymbolFlag /** true when shading is required, false otherwise */
            );
            /**Returns  the flag indicating whether or not highlighting of targets is required 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HighlightTargets
            (
            );
            /**Sets  the flag indicating whether or not highlighting of targets is required 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetHighlightTargets
            (
                bool highlightTargetsFlag /** true when highlighting is required, false otherwise */
            );
            /**Returns  the neutral name of the property that will control the display 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString DisplayMagnitudeProperty
            (
            );
            /**Sets  the neutral name of the property that will control the display 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDisplayMagnitudeProperty
            (
                const NXString & displayMagnitudeProperty /** neutral name of existing property */
            );
            /**Sets  the neutral name of the property that will control the display 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetDisplayMagnitudeProperty
            (
                const char * displayMagnitudeProperty /** neutral name of existing property */
            );
            /**Returns  the true/false flag based on whether the graphics symbol display is to be simplified in expanded mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GraphicsThresholdFlag
            (
            );
            /**Sets  the true/false flag based on whether the graphics symbol display is to be simplified in expanded mode 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGraphicsThresholdFlag
            (
                bool graphicsThresholdFlag /** true when graphics symbol display is to be simplified in expanded mode, false otherwise */
            );
            /**Returns  the number of graphic symbols after which the number of symbols in expanded mode will be reduced 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GraphicsThreshold
            (
            );
            /**Sets  the number of graphic symbols after which the number of symbols in expanded mode will be reduced 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetGraphicsThreshold
            (
                int threshold /** The number of graphic symbols after which the number of symbols in expanded mode will be reduced */
            );
            /** Returns the color set to the displayable attribute object  @return  The color corresponding to the displayable attribute object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetSubColor
            (
                int index /** The index of color in the displayable attribute object */
            );
            /** Sets the color on the displayable attribute object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSubColor
            (
                int index /** The index of color in the displayable attribute object */,
                int color /** The color corresponding to the index in the displayable object */
            );
            /** Returns the distribute type for the specified target set  @return  The distribute type for the specified target set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCDisplay::Distribute GetDistributeType
            (
                int targetSetIndex /** The target set index */
            );
            /** Sets the distribute type for the specified target set 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDistributeType
            (
                int targetSetIndex /** The target set index */,
                NXOpen::CAE::SimBCDisplay::Distribute distribute /** The distribute type for the specified target set */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
