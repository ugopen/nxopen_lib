#ifndef NXOpen_MECHATRONICS_PREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_PREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_PreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class PreferencesBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class _PreferencesBuilderBuilder;
        class PreferencesBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::PreferencesBuilder NXOpen::Mechatronics::PreferencesBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::PhysicsPreferenceCollection::CreatePreferenceBuilder  NXOpen::Mechatronics::PhysicsPreferenceCollection::CreatePreferenceBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AngularDampingExpression.Value </term> <description> 
         
        3490.6585 (millimeters part), 0.030895 (inches part) </description> </item> 

        <item><term> 
         
        AngularSleepingThresholdExpression.Value </term> <description> 
         
        0.000014 (millimeters part), 0.000014 (inches part) </description> </item> 

        <item><term> 
         
        CoSimulation </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        CollisionDetectRate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CollisionPrecisionExpression.Value </term> <description> 
         
        0.1 (millimeters part), 0.0039 (inches part) </description> </item> 

        <item><term> 
         
        ConnectURL </term> <description> 
         
         </description> </item> 

        <item><term> 
         
        DynamicFrictionExpression.Value </term> <description> 
         
        0.7 </description> </item> 

        <item><term> 
         
        EnableParallel </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        EnablePlcSimAdvTimeSyn (deprecated) </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        EnableTimeSync </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ErrorReductionExpression.Value </term> <description> 
         
        50 </description> </item> 

        <item><term> 
         
        Gx.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Gy.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Gz.Value </term> <description> 
         
        -9806.65 (millimeters part), -386.09 (inches part) </description> </item> 

        <item><term> 
         
        LinearDampingExpression.Value </term> <description> 
         
        0.05 (millimeters part), 0.0002855 (inches part) </description> </item> 

        <item><term> 
         
        LinearSleepingThresholdExpression.Value </term> <description> 
         
        0.00025 (millimeters part), 0.00000975 (inches part) </description> </item> 

        <item><term> 
         
        MaxIterationExpression.Value </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        RatioLimitExpression.Value </term> <description> 
         
        50.0 </description> </item> 

        <item><term> 
         
        RestitutionExpression.Value </term> <description> 
         
        0.01 </description> </item> 

        <item><term> 
         
        RollingFrictionExpression.Value </term> <description> 
         
        0.0 </description> </item> 

        <item><term> 
         
        SleepTimeThresholdExpression.Value </term> <description> 
         
        2.0 </description> </item> 

        <item><term> 
         
        SpringForceMultiplierExpression.Value </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        StaticFrictionExpression.Value </term> <description> 
         
        0.7 </description> </item> 

        <item><term> 
         
        StepTimeExpression.Value </term> <description> 
         
        0.001 </description> </item> 

        <item><term> 
         
        ToleranceExpression.Value </term> <description> 
         
        0.1 (millimeters part), 0.0039 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX7.5.1.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  PreferencesBuilder : public NXOpen::Builder
        {
            /** the Co-Simulation master type. */
            public: enum MasterTypes
            {
                MasterTypesMcd/** MCD */,
                MasterTypesSimit/** SIMIT */
            };

            /** the simulation scope type. */
            public: enum SimulationScope
            {
                SimulationScopeActiveDisplayedPart/** Only active displayed part */,
                SimulationScopeAllDisplayedParts/** Active and inactive displayed parts */
            };

            /** the Precision Preset Mode. */
            public: enum PrecisionPresetModes
            {
                PrecisionPresetModesFine/** fine */ ,
                PrecisionPresetModesBalance/** balance */ ,
                PrecisionPresetModesRough/** rough */ ,
                PrecisionPresetModesUserDefined/** user defined */ ,
                PrecisionPresetModesNum/** num */ 
            };

            private: PreferencesBuilderImpl * m_preferencesbuilder_impl;
            private: friend class  _PreferencesBuilderBuilder;
            protected: PreferencesBuilder();
            public: ~PreferencesBuilder();
            /**Returns  the gx. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Gx
            (
            );
            /**Returns  the gy. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Gy
            (
            );
            /**Returns  the gz. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Gz
            (
            );
            /**Returns  the dynamic friction. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::DynamicFrictionExpression NXOpen::Mechatronics::PreferencesBuilder::DynamicFrictionExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::DynamicFrictionExpression instead") double DynamicFriction
            (
            );
            /**Sets  the dynamic friction. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetDynamicFriction
            (
                double dynamicFriction /** dynamicfriction */ 
            );
            /**Returns  the Dynamic Friction Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * DynamicFrictionExpression
            (
            );
            /**Returns  the static friction. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::StaticFrictionExpression NXOpen::Mechatronics::PreferencesBuilder::StaticFrictionExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::StaticFrictionExpression instead") double StaticFriction
            (
            );
            /**Sets  the static friction. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetStaticFriction
            (
                double staticFriction /** staticfriction */ 
            );
            /**Returns  the static friction. This is not used by current physics engine in Mechatronics Concept Designer. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StaticFrictionExpression
            (
            );
            /**Returns  the rolling Friction Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * RollingFrictionExpression
            (
            );
            /**Returns  the linear damping expression
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LinearDampingExpression
            (
            );
            /**Returns  the angular damping expression
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularDampingExpression
            (
            );
            /**Returns  the restitution. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::RestitutionExpression NXOpen::Mechatronics::PreferencesBuilder::RestitutionExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::RestitutionExpression instead") double Restitution
            (
            );
            /**Sets  the restitution. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetRestitution
            (
                double restitution /** restitution */ 
            );
            /**Returns  the Restitution Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * RestitutionExpression
            (
            );
            /**Returns  the Ratio Limit Expression 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * RatioLimitExpression
            (
            );
            /**Returns  the collision precision. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::CollisionPrecisionExpression NXOpen::Mechatronics::PreferencesBuilder::CollisionPrecisionExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::CollisionPrecisionExpression instead") double CollisionPrecision
            (
            );
            /**Sets  the collision precision. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetCollisionPrecision
            (
                double collisionPrecision /** collisionprecision */ 
            );
            /**Returns  the Collision Precision Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * CollisionPrecisionExpression
            (
            );
            /**Returns  the step time. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::StepTimeExpression NXOpen::Mechatronics::PreferencesBuilder::StepTimeExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::StepTimeExpression instead") double StepTime
            (
            );
            /**Sets  the step time. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetStepTime
            (
                double stepTime /** steptime */ 
            );
            /**Returns  the Step Time Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StepTimeExpression
            (
            );
            /**Returns  the spring force multiplier. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::SpringForceMultiplierExpression NXOpen::Mechatronics::PreferencesBuilder::SpringForceMultiplierExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::SpringForceMultiplierExpression instead") double SpringForceMultiplier
            (
            );
            /**Sets  the spring force multiplier. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetSpringForceMultiplier
            (
                double springForceMultiplier /** springforcemultiplier */ 
            );
            /**Returns  the Spring Force Multiplier Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SpringForceMultiplierExpression
            (
            );
            /**Returns  the tolerance. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::ToleranceExpression NXOpen::Mechatronics::PreferencesBuilder::ToleranceExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::ToleranceExpression instead") double Tolerance
            (
            );
            /**Sets  the tolerance. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the Tolerance Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ToleranceExpression
            (
            );
            /**Returns  the error reduction. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::ErrorReductionExpression NXOpen::Mechatronics::PreferencesBuilder::ErrorReductionExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::ErrorReductionExpression instead") double ErrorReduction
            (
            );
            /**Sets  the error reduction. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetErrorReduction
            (
                double errorReduction /** errorreduction */ 
            );
            /**Returns  the Error Reduction Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ErrorReductionExpression
            (
            );
            /**Returns  the max iteration. 
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::MaxIterationExpression NXOpen::Mechatronics::PreferencesBuilder::MaxIterationExpression@endlink  instead <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::MaxIterationExpression instead") int MaxIteration
            (
            );
            /**Sets  the max iteration. 
             <br>  @deprecated Deprecated in NX9.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  This functionality is no longer supported.") void SetMaxIteration
            (
                int maxIter /** maxiter */ 
            );
            /**Returns  the Maximum Iteration Expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * MaxIterationExpression
            (
            );
            /**Returns  the sticky factor. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Mechatronics::PreferencesBuilder::StickyForce NXOpen::Mechatronics::PreferencesBuilder::StickyForce@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Mechatronics::PreferencesBuilder::StickyForce instead.") double StickyFactor
            (
            );
            /**Sets  the sticky factor. 
             <br>  @deprecated Deprecated in NX11.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  This functionality is no longer supported.") void SetStickyFactor
            (
                double factor /** factor */ 
            );
            /**Returns  the sticky factor Expression 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StickyForce
            (
            );
            /**Returns  the inspector refresh precision.
                    This option specifies the refresh precision to be used by the inspector to determine whether to update property values in UI or not. 
             <br>  @deprecated Deprecated in NX1872.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  This functionality is no longer supported.") double RefreshPrecision
            (
            );
            /**Sets  the inspector refresh precision.
                    This option specifies the refresh precision to be used by the inspector to determine whether to update property values in UI or not. 
             <br>  @deprecated Deprecated in NX1872.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  This functionality is no longer supported.") void SetRefreshPrecision
            (
                double refreshPrecision /** refreshprecision */ 
            );
            /**Returns  the geometry highlight on collsion.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool GeometryHighlight
            (
            );
            /**Sets  the geometry highlight on collsion.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetGeometryHighlight
            (
                bool highlight /** highlight */ 
            );
            /**Returns  the shape highlight on collsion.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShapeHighlight
            (
            );
            /**Sets  the shape highlight on collsion.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShapeHighlight
            (
                bool highlight /** highlight */ 
            );
            /**Returns  the non physics color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int NonPhysicsColor
            (
            );
            /**Sets  the non physics color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetNonPhysicsColor
            (
                int nonPhysicsColor /** nonphysicscolor */ 
            );
            /**Returns  the rich geometry type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool RichGeomType
            (
            );
            /**Sets  the rich geometry type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetRichGeomType
            (
                bool richGeomType /** richgeomtype */ 
            );
            /**Returns  the load as saved option for MCD Objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool LoadAsSaved
            (
            );
            /**Sets  the load as saved option for MCD Objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetLoadAsSaved
            (
                bool loadAsSaved /** loadassaved */ 
            );
            /**Returns  the revision rule for MCD Objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString RevisionRule
            (
            );
            /**Sets  the revision rule for MCD Objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetRevisionRule
            (
                const NXString & revisionRule /** revisionrule */ 
            );
            /**Sets  the revision rule for MCD Objects. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetRevisionRule
            (
                const char * revisionRule /** revisionrule */ 
            );
            /**Returns  the plcsim adv time synchronization option 
             <br>  @deprecated Deprecated in NX1953.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  This functionality is no longer supported.") bool EnablePlcSimAdvTimeSyn
            (
            );
            /**Sets  the plcsim adv time synchronization option 
             <br>  @deprecated Deprecated in NX1953.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  This functionality is no longer supported.") void SetEnablePlcSimAdvTimeSyn
            (
                bool enablePlcSimAdvTimeSyn /** enableplcsimadvtimesyn */ 
            );
            /**Returns  the co-simulation option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool CoSimulation
            (
            );
            /**Sets  the co-simulation option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCoSimulation
            (
                bool coSimulation /** cosimulation */ 
            );
            /**Returns  the Simit Connect URL string 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ConnectURL
            (
            );
            /**Sets  the Simit Connect URL string 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectURL
            (
                const NXString & connectURL /** connecturl */ 
            );
            /**Sets  the Simit Connect URL string 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetConnectURL
            (
                const char * connectURL /** connecturl */ 
            );
            /**Returns  the time synchronization option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableTimeSync
            (
            );
            /**Sets  the time synchronization option 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableTimeSync
            (
                bool enableTimeSync /** enabletimesync */ 
            );
            /**Returns  the master type option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::PreferencesBuilder::MasterTypes MasterType
            (
            );
            /**Sets  the master type option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMasterType
            (
                NXOpen::Mechatronics::PreferencesBuilder::MasterTypes masterType /** mastertype */ 
            );
            /**Returns  the time interval to do synchronization with SIMIT
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SynchronizationTime
            (
            );
            /**Returns  the PLCSIM Advanced timeout expression 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * PlcSimAdvTimeoutExpression
            (
            );
            /**Returns  the time scale factor 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: double TimeScaleFactor
            (
            );
            /**Sets  the time scale factor 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetTimeScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the Forward Step Time Expression 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ForwardStepTime
            (
            );
            /**Returns  the option indicates whether to ignore warning during simulation 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool IgnoreRuntimeWarning
            (
            );
            /**Sets  the option indicates whether to ignore warning during simulation 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetIgnoreRuntimeWarning
            (
                bool param /** param */ 
            );
            /**Returns  the option indicates whether to pause simulation when have error occur 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool PauseRuntimeError
            (
            );
            /**Sets  the option indicates whether to pause simulation when have error occur 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPauseRuntimeError
            (
                bool param /** param */ 
            );
            /**Returns  the simulation recording sampling rate 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int SimulationRecordingSamplingRate
            (
            );
            /**Sets  the simulation recording sampling rate 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSimulationRecordingSamplingRate
            (
                int simulationRecordingSamplingRate /** simulationrecordingsamplingrate */ 
            );
            /**Returns  the automatically disable operations option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool AutoDisableOperation
            (
            );
            /**Sets  the automatically disable operations option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAutoDisableOperation
            (
                bool autoDisableOperation /** autodisableoperation */ 
            );
            /**Returns  the toggle value for the invoke timing chart after import 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool InvokeExport
            (
            );
            /**Sets  the toggle value for the invoke timing chart after import 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInvokeExport
            (
                bool param /** param */ 
            );
            /**Returns  the export timing chart file path 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString FilePicker
            (
            );
            /**Sets  the export timing chart file path 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetFilePicker
            (
                const NXString & exportFile /** exportfile */ 
            );
            /**Sets  the export timing chart file path 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetFilePicker
            (
                const char * exportFile /** exportfile */ 
            );
            /**Returns  the option to indicate whether to use user defined sequence editor refresh interval 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool UseSequenceEditorRefreshInterval
            (
            );
            /**Sets  the option to indicate whether to use user defined sequence editor refresh interval 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetUseSequenceEditorRefreshInterval
            (
                bool param /** param */ 
            );
            /**Returns  the sequence editor refresh interval Expression 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SequenceEditorRefreshInterval
            (
            );
            /**Returns  the Step Size Expression 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StepSize
            (
            );
            /**Returns  the option specifies if only simulates the active displayed part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Mechatronics::PreferencesBuilder::SimulationScope PartsToSimulate
            (
            );
            /**Sets  the option specifies if only simulates the active displayed part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPartsToSimulate
            (
                NXOpen::Mechatronics::PreferencesBuilder::SimulationScope partsToSimulate /** partstosimulate */ 
            );
            /**Returns  the option to indicate whether to simplify geometries to improve frame rate in simulation. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableSimplifyGeometry
            (
            );
            /**Sets  the option to indicate whether to simplify geometries to improve frame rate in simulation. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableSimplifyGeometry
            (
                bool enableSimpl /** enablesimpl */ 
            );
            /**Returns  the linear sleeping threshold expression
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LinearSleepingThresholdExpression
            (
            );
            /**Returns  the angular sleeping threshold expression
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularSleepingThresholdExpression
            (
            );
            /**Returns  the sleep time threshold expression
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * SleepTimeThresholdExpression
            (
            );
            /**Returns  the collision detection rate 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int CollisionDetectRate
            (
            );
            /**Sets  the collision detection rate 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCollisionDetectRate
            (
                int collisionDetectRate /** collisiondetectrate */ 
            );
            /**Returns  the parallel calculation option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableParallel
            (
            );
            /**Sets  the parallel calculation option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableParallel
            (
                bool enableParallel /** enableparallel */ 
            );
            /**Returns  the option indicates whether to randomize the solving order by the engine. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool RandomizeSolvingOrder
            (
            );
            /**Sets  the option indicates whether to randomize the solving order by the engine. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetRandomizeSolvingOrder
            (
                bool randomOrder /** randomorder */ 
            );
            /**Returns  the algorithm of external data for position control 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int ExternalDataAlgorithm
            (
            );
            /**Sets  the algorithm of external data for position control 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetExternalDataAlgorithm
            (
                int externalDataAlgorithm /** externaldataalgorithm */ 
            );
            /**Returns  the simulation preset mode 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::PreferencesBuilder::PrecisionPresetModes PrecisionPresetMode
            (
            );
            /**Sets  the simulation preset mode 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPrecisionPresetMode
            (
                NXOpen::Mechatronics::PreferencesBuilder::PrecisionPresetModes presetMode /** presetmode */ 
            );
            /**Return the collide categories  @return   
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<double> GetCollideCategoryVec
            (
            );
            /** Sets tthe collide categories 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCollideCategoryVec
            (
                const std::vector<double> & itemCategory /** itemcategory */ 
            );
            /**Returns  the bond zone highlight.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool BondHighlight
            (
            );
            /**Sets  the bond zone highlight.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetBondHighlight
            (
                bool show /** show */ 
            );
            /**Returns  the gripper highlight.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool GripperHighlight
            (
            );
            /**Sets  the gripper highlight.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetGripperHighlight
            (
                bool show /** show */ 
            );
            /**Returns  the show collision sensor.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowCollisionSensor
            (
            );
            /**Sets  the show collision sensor.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowCollisionSensor
            (
                bool show /** show */ 
            );
            /**Returns  the show distance sensor.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowDistanceSensor
            (
            );
            /**Sets  the show distance sensor.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowDistanceSensor
            (
                bool show /** show */ 
            );
            /**Returns  the show 2D laser scanner.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowScanner
            (
            );
            /**Sets  the show 2D laser scanner.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowScanner
            (
                bool show /** show */ 
            );
            /**Returns  the show light curtain.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowCurtain
            (
            );
            /**Sets  the show light curtain.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowCurtain
            (
                bool show /** show */ 
            );
            /**Returns  the highlight collision sensor color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int HighlightCollision
            (
            );
            /**Sets  the highlight collision sensor color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetHighlightCollision
            (
                int color /** color */ 
            );
            /**Returns  the highlight distance sensor color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int HighlightDistance
            (
            );
            /**Sets  the highlight distance sensor color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetHighlightDistance
            (
                int color /** color */ 
            );
            /**Returns  the highlight 2D laser scanner color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int HighlightScanner
            (
            );
            /**Sets  the highlight 2D laser scanner color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetHighlightScanner
            (
                int color /** color */ 
            );
            /**Returns  the light curtain active beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int ActiveBeams
            (
            );
            /**Sets  the light curtain active beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetActiveBeams
            (
                int color /** color */ 
            );
            /**Returns  the light curtain inactive beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int InactiveBeams
            (
            );
            /**Sets  the light curtain inactive beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInactiveBeams
            (
                int color /** color */ 
            );
            /**Returns  the light curtain blocked beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int BlockedBeams
            (
            );
            /**Sets  the light curtain blocked beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetBlockedBeams
            (
                int color /** color */ 
            );
            /**Returns  the light curtain free beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int FreeBeams
            (
            );
            /**Sets  the light curtain free beams color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetFreeBeams
            (
                int color /** color */ 
            );
            /**Returns  the show inactive beams.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowInactiveBeams
            (
            );
            /**Sets  the show inactive beams.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowInactiveBeams
            (
                bool show /** show */ 
            );
            /**Returns  the 2D laser scanner protective field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int ProtectiveField
            (
            );
            /**Sets  the 2D laser scanner protective field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetProtectiveField
            (
                int color /** color */ 
            );
            /**Returns  the 2D laser scanner warning field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int WarningField
            (
            );
            /**Sets  the 2D laser scanner warning field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetWarningField
            (
                int color /** color */ 
            );
            /**Returns  the 2D laser scanner contour monitor field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int MonitorField
            (
            );
            /**Sets  the 2D laser scanner contour monitor field color.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMonitorField
            (
                int color /** color */ 
            );
            /**Returns  the bonded rigid body highlight color.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int HighlightBondedRigid
            (
            );
            /**Sets  the bonded rigid body highlight color.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetHighlightBondedRigid
            (
                int color /** color */ 
            );
            /**Returns  the show the bonded rigid body in bond zone.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ShowBondedRigid
            (
            );
            /**Sets  the show the bonded rigid body in bond zone.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShowBondedRigid
            (
                bool show /** show */ 
            );
            /**Returns  the Flexible Material Density. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialDensity
            (
            );
            /**Returns  the Flexible Material Damping. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialDamping
            (
            );
            /**Returns  the Flexible Material Dynamic Friction. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialDynamicFriction
            (
            );
            /**Returns  the Flexible Material Linear Stiffness. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialLinearStiffness
            (
            );
            /**Returns  the Flexible Material Precision. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialPrecision
            (
            );
            /**Returns  the Flexible Material Anchor Hardness. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * FlexibleMaterialAnchorHardness
            (
            );
            /**Returns  the Contact Hardness With Collision Body. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ContactHardnessWithCollisionBody
            (
            );
            /**Returns  the Contact Hardness With Flexible Body. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ContactHardnessWithFlexibleBody
            (
            );
            /**Returns  the Impulse Split With Collision Body. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ImpulseSplitWithCollisionBody
            (
            );
            /**Returns  the Impulse Split With Flexible Body. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * ImpulseSplitWithFlexibleBody
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
