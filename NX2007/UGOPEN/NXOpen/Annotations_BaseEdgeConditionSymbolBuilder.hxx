#ifndef NXOpen_ANNOTATIONS_BASEEDGECONDITIONSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASEEDGECONDITIONSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseEdgeConditionSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LeaderBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseEdgeConditionSymbolBuilder;
    }
    namespace Annotations
    {
        class BaseEdgeConditionSymbol;
    }
    namespace Annotations
    {
        class LeaderBuilder;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class SelectBaseEdgeConditionSymbol;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    namespace Annotations
    {
        class _BaseEdgeConditionSymbolBuilderBuilder;
        class BaseEdgeConditionSymbolBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Represents a base edge condition symbol  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseEdgeConditionSymbolBuilder : public NXOpen::Builder
        {
            /** method types for edge condition symbol */
            public: enum MethodType
            {
                MethodTypeBasic/** basic */ ,
                MethodTypeUndefinedDirectionandSize/** undefined directionand size */ ,
                MethodTypeUndefinedDirectionDefinedSize/** undefined direction defined size */ ,
                MethodTypeUndefinedDirectionEqualBilateralSize/** undefined direction equal bilateral size */ ,
                MethodTypeDefinedDirection/** defined direction */ 
            };

            /** symbol element types for for undefined direction and size */
            public: enum SymbolElementEnum
            {
                SymbolElementEnumPlus/** plus */ ,
                SymbolElementEnumMinus/** minus */ 
            };

            private: BaseEdgeConditionSymbolBuilderImpl * m_baseedgeconditionsymbolbuilder_impl;
            private: friend class  _BaseEdgeConditionSymbolBuilderBuilder;
            protected: BaseEdgeConditionSymbolBuilder();
            public: ~BaseEdgeConditionSymbolBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the origin 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the leader 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderBuilder * Leader
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseEdgeConditionSymbolBuilder::MethodType Method
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the method 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMethod
            (
                NXOpen::Annotations::BaseEdgeConditionSymbolBuilder::MethodType method /** method */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the symbol element 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseEdgeConditionSymbolBuilder::SymbolElementEnum SymbolElement
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the symbol element 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSymbolElement
            (
                NXOpen::Annotations::BaseEdgeConditionSymbolBuilder::SymbolElementEnum symbolElement /** symbolelement */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviation
            (
                const NXString & limitDeviation /** limitdeviation */ 
            );
            /**Sets  the limit deviation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviation
            (
                const char * limitDeviation /** limitdeviation */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation a1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationA1
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation a1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationA1
            (
                const NXString & limitDeviationA1 /** limitdeviationa1 */ 
            );
            /**Sets  the limit deviation a1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationA1
            (
                const char * limitDeviationA1 /** limitdeviationa1 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation a2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationA2
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation a2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationA2
            (
                const NXString & limitDeviationA2 /** limitdeviationa2 */ 
            );
            /**Sets  the limit deviation a2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationA2
            (
                const char * limitDeviationA2 /** limitdeviationa2 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation b1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationB1
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation b1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationB1
            (
                const NXString & limitDeviationB1 /** limitdeviationb1 */ 
            );
            /**Sets  the limit deviation b1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationB1
            (
                const char * limitDeviationB1 /** limitdeviationb1 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation b2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationB2
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation b2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationB2
            (
                const NXString & limitDeviationB2 /** limitdeviationb2 */ 
            );
            /**Sets  the limit deviation b2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationB2
            (
                const char * limitDeviationB2 /** limitdeviationb2 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation c1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationC1
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation c1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationC1
            (
                const NXString & limitDeviationC1 /** limitdeviationc1 */ 
            );
            /**Sets  the limit deviation c1 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationC1
            (
                const char * limitDeviationC1 /** limitdeviationc1 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the limit deviation c2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LimitDeviationC2
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the limit deviation c2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLimitDeviationC2
            (
                const NXString & limitDeviationC2 /** limitdeviationc2 */ 
            );
            /**Sets  the limit deviation c2 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            void SetLimitDeviationC2
            (
                const char * limitDeviationC2 /** limitdeviationc2 */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the inherit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SelectBaseEdgeConditionSymbol * Inherit
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the style 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Inheriting properties from the edge condition symbol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void InheritProperties
            (
                NXOpen::Annotations::BaseEdgeConditionSymbol * ecsTag /** ecstag */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
