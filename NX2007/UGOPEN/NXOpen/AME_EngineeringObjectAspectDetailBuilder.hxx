#ifndef NXOpen_AME_ENGINEERINGOBJECTASPECTDETAILBUILDER_HXX_INCLUDED
#define NXOpen_AME_ENGINEERINGOBJECTASPECTDETAILBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_EngineeringObjectAspectDetailBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class EngineeringObjectAspectDetailBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXObject;
    class SelectNXObject;
    namespace AME
    {
        class _EngineeringObjectAspectDetailBuilderBuilder;
        class EngineeringObjectAspectDetailBuilderImpl;
        /**
                JA class for the Engineering Object Aspect Detail UI block
            
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  EngineeringObjectAspectDetailBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Aspect Detail columns*/
            public: enum Columns
            {
                ColumnsType/** type */ ,
                ColumnsParent/** parent */ ,
                ColumnsName/** name */ 
            };

            /** Aspect name from*/
            public: enum NameSource
            {
                NameSourceDefault/** default */ ,
                NameSourceNamingRule/** naming rule */ ,
                NameSourceUserInput/** user input */ ,
                NameSourceMapping/** mapping */ 
            };

            private: EngineeringObjectAspectDetailBuilderImpl * m_engineeringobjectaspectdetailbuilder_impl;
            private: friend class  _EngineeringObjectAspectDetailBuilderBuilder;
            protected: EngineeringObjectAspectDetailBuilder();
            public: ~EngineeringObjectAspectDetailBuilder();
            /**Returns  the selection parent 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObject * SelectionParent
            (
            );
            /**Sets a parent aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AssignParent
            (
                const NXString & aspectName /** aspectname */ ,
                NXOpen::NXObject * aspectType /** aspecttype */ 
            );
            /**Sets a parent aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AssignParent
            (
                const char * aspectName /** aspectname */ ,
                NXOpen::NXObject * aspectType /** aspecttype */ 
            );
            /**Deletes a parent aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnassignParent
            (
                const NXString & aspectType /** aspecttype */ 
            );
            /**Deletes a parent aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnassignParent
            (
                const char * aspectType /** aspecttype */ 
            );
            /** The parent aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * GetParent
            (
                const NXString & aspectType /** aspecttype */ 
            );
            /** The parent aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::NXObject * GetParent
            (
                const char * aspectType /** aspecttype */ 
            );
            /**Adds a specific name for an aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddNameAspect
            (
                const NXString & aspectType /** aspecttype */ ,
                const NXString & nameAspect /** nameaspect */ 
            );
            /**Adds a specific name for an aspect
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AddNameAspect
            (
                const char * aspectType /** aspecttype */ ,
                const char * nameAspect /** nameaspect */ 
            );
            /**Sets the source for aspect name
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNameSource
            (
                const NXString & aspectType /** aspecttype */ ,
                NXOpen::AME::EngineeringObjectAspectDetailBuilder::NameSource source /** source */ 
            );
            /**Sets the source for aspect name
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetNameSource
            (
                const char * aspectType /** aspecttype */ ,
                NXOpen::AME::EngineeringObjectAspectDetailBuilder::NameSource source /** source */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
