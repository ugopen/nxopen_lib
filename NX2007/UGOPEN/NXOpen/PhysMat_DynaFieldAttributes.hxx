#ifndef NXOpen_PHYSMAT_DYNAFIELDATTRIBUTES_HXX_INCLUDED
#define NXOpen_PHYSMAT_DYNAFIELDATTRIBUTES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysMat_DynaFieldAttributes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_IApplication.hxx>
#include <NXOpen/Fields_IApplicationData.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_physmat_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PhysMat
    {
        class DynaFieldAttributes;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class IApplication;
    }
    namespace Fields
    {
        class IApplicationData;
    }
    class INXObject;
    class NXObject;
    namespace PhysMat
    {
        class _DynaFieldAttributesBuilder;
        class DynaFieldAttributesImpl;
        /**  @brief Implementation of the @link NXOpen::Fields::IApplicationData NXOpen::Fields::IApplicationData@endlink . 
            This specific implementation extends fields with solver specific attributes.
            Instances of this class are created through the @link NXOpen::PhysMat::DynaFieldApplication NXOpen::PhysMat::DynaFieldApplication@endlink  object. 

          <br> Not support KF.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_PHYSMATEXPORT  DynaFieldAttributes : public NXOpen::NXObject, public virtual NXOpen::Fields::IApplicationData
        {
            /** This enum defines the load curve usage type. */
            public: enum LoadCurveUsage
            {
                LoadCurveUsageNormalAnalysisPhase/** normal analysis phase */ ,
                LoadCurveUsageDynamicRelaxationPhase/** dynamic relaxation phase */ ,
                LoadCurveUsageBothPhases/** both phases */ 
            };

            /** This enum defines the data type. */
            public: enum DataType
            {
                DataTypeChemicalShrinkage/** chemical shrinkage */  = -100,
                DataTypeFabricStress/** fabric stress */  = -2,
                DataTypeGeneral/** general */  = 0,
                DataTypeGeneralXY/** general xy */ ,
                DataTypeGeneralRS/** general rs */  = 6
            };

            private: DynaFieldAttributesImpl * m_dynafieldattributes_impl;
            private: friend class  _DynaFieldAttributesBuilder;
            protected: DynaFieldAttributes();
            public: ~DynaFieldAttributes();
            /**Returns  a load curve usage attribute.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysMat::DynaFieldAttributes::LoadCurveUsage LoadCurveUsageAttribute
            (
            );
            /**Sets  a load curve usage attribute.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLoadCurveUsageAttribute
            (
                NXOpen::PhysMat::DynaFieldAttributes::LoadCurveUsage loadCurveUsage /** loadcurveusage */ 
            );
            /**Returns  a data type attribute.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysMat::DynaFieldAttributes::DataType DataTypeAttribute
            (
            );
            /**Sets  a data type attribute.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDataTypeAttribute
            (
                NXOpen::PhysMat::DynaFieldAttributes::DataType dataType /** datatype */ 
            );
            /**Returns  the number of discretization points.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int NumDiscretizationPointsAttribute
            (
            );
            /**Sets  the number of discretization points.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumDiscretizationPointsAttribute
            (
                int numDiscPts /** numdiscpts */ 
            );
            /** Returns the application associated with this application data object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Fields::IApplication * GetApplication
            (
            );
            /** Delete the Application Data object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void DeleteApplicationData
            (
            );
            /** Copy the Application Data object to the specified field 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void CopyToField
            (
                NXOpen::Fields::Field * field /** field to copy to */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
