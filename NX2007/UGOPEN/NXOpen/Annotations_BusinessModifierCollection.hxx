#ifndef NXOpen_ANNOTATIONS_BUSINESSMODIFIERCOLLECTION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BUSINESSMODIFIERCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BusinessModifierCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CustomerValueBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_FeatureIdBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_RevisionBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_SafetyClassBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_UrlBusinessModifierBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BusinessModifierCollection;
    }
    namespace Annotations
    {
        class AnnotationManager;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class CustomerValueBusinessModifier;
    }
    namespace Annotations
    {
        class CustomerValueBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class FeatureIdBusinessModifier;
    }
    namespace Annotations
    {
        class FeatureIdBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class RevisionBusinessModifier;
    }
    namespace Annotations
    {
        class RevisionBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class SafetyClassBusinessModifier;
    }
    namespace Annotations
    {
        class SafetyClassBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class UrlBusinessModifier;
    }
    namespace Annotations
    {
        class UrlBusinessModifierBuilder;
    }
    class TaggedObject;
    namespace Annotations
    {
        class BusinessModifierCollectionImpl;
        /** Represents a collection of @link NXOpen::Annotations::BusinessModifier NXOpen::Annotations::BusinessModifier@endlink  objects  <br> To obtain an instance of this class, refer to @link NXOpen::Annotations::AnnotationManager  NXOpen::Annotations::AnnotationManager @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BusinessModifierCollection : public NXOpen::TaggedObjectCollection
        {
            private: BusinessModifierCollectionImpl * m_businessmodifiercollection_impl;
            private: NXOpen::Annotations::AnnotationManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BusinessModifierCollection(NXOpen::Annotations::AnnotationManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BusinessModifierCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Annotations::BusinessModifierCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Annotations::BusinessModifier *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Annotations::BusinessModifierCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ANNOTATIONSEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ANNOTATIONSEXPORT  void next();
                NXOpen::Annotations::BusinessModifierCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a URL business modifier  @return  New url business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateUrlBusinessModifier BusinessModifierCollection::CreateUrlBusinessModifier@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use BusinessModifierCollection::CreateUrlBusinessModifier instead.") NXOpen::Annotations::UrlBusinessModifier * CreateUrlBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a URL business modifier  @return  New url business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateUrlBusinessModifier BusinessModifierCollection::CreateUrlBusinessModifier@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            NXOpen::Annotations::UrlBusinessModifier * CreateUrlBusinessModifier
            (
                const char * modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a customer value business modifier   @return  New customer value business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateCustomerValueBusinessModifierBuilder BusinessModifierCollection::CreateCustomerValueBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use BusinessModifierCollection::CreateCustomerValueBusinessModifierBuilder instead.") NXOpen::Annotations::CustomerValueBusinessModifier * CreateCustomerValueBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a customer value business modifier   @return  New customer value business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateCustomerValueBusinessModifierBuilder BusinessModifierCollection::CreateCustomerValueBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            NXOpen::Annotations::CustomerValueBusinessModifier * CreateCustomerValueBusinessModifier
            (
                const char * modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a revision business modifier  @return  New revision business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateRevisionBusinessModifierBuilder BusinessModifierCollection::CreateRevisionBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use BusinessModifierCollection::CreateRevisionBusinessModifierBuilder instead.") NXOpen::Annotations::RevisionBusinessModifier * CreateRevisonBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a revision business modifier  @return  New revision business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateRevisionBusinessModifierBuilder BusinessModifierCollection::CreateRevisionBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            NXOpen::Annotations::RevisionBusinessModifier * CreateRevisonBusinessModifier
            (
                const char * modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a safety class business modifier  @return  New safety class business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateSafetyClassBusinessModifierBuilder BusinessModifierCollection::CreateSafetyClassBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use BusinessModifierCollection::CreateSafetyClassBusinessModifierBuilder instead.") NXOpen::Annotations::SafetyClassBusinessModifier * CreateSafetyClassBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a safety class business modifier  @return  New safety class business modifier 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link BusinessModifierCollection::CreateSafetyClassBusinessModifierBuilder BusinessModifierCollection::CreateSafetyClassBusinessModifierBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            NXOpen::Annotations::SafetyClassBusinessModifier * CreateSafetyClassBusinessModifier
            (
                const char * modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a @link NXOpen::Annotations::RevisionBusinessModifierBuilder NXOpen::Annotations::RevisionBusinessModifierBuilder@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::RevisionBusinessModifierBuilder * CreateRevisionBusinessModifierBuilder
            (
                NXOpen::Annotations::RevisionBusinessModifier * revisionbusinessModifier /** revisionbusiness modifier */ 
            );
            /** Creates a @link NXOpen::Annotations::SafetyClassBusinessModifierBuilder NXOpen::Annotations::SafetyClassBusinessModifierBuilder@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SafetyClassBusinessModifierBuilder * CreateSafetyClassBusinessModifierBuilder
            (
                NXOpen::Annotations::SafetyClassBusinessModifier * safetyclassbusinessmodifier /** safetyclassbusinessmodifier */ 
            );
            /** Creates a @link NXOpen::Annotations::FeatureIdBusinessModifierBuilder NXOpen::Annotations::FeatureIdBusinessModifierBuilder@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FeatureIdBusinessModifierBuilder * CreateFeatureIdBusinessModifierBuilder
            (
                NXOpen::Annotations::FeatureIdBusinessModifier * featureidbusinessmodifier /** featureidbusinessmodifier */ 
            );
            /** Creates a @link NXOpen::Annotations::CustomerValueBusinessModifierBuilder NXOpen::Annotations::CustomerValueBusinessModifierBuilder@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CustomerValueBusinessModifierBuilder * CreateCustomerValueBusinessModifierBuilder
            (
                NXOpen::Annotations::CustomerValueBusinessModifier * customervaluebusinessmodifier /** customervaluebusinessmodifier */ 
            );
            /** Creates a @link NXOpen::Annotations::UrlBusinessModifierBuilder NXOpen::Annotations::UrlBusinessModifierBuilder@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::UrlBusinessModifierBuilder * CreateUrlBusinessModifierBuilder
            (
                NXOpen::Annotations::UrlBusinessModifier * urlbusinessmodifier /** urlbusinessmodifier */ 
            );
            /** Finds the @link NXOpen::Annotations::BusinessModifier NXOpen::Annotations::BusinessModifier@endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.
                        
                        An exception will be thrown if no object can be found with the given journal identifier.  @return  Business Modifier with this identifier 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the business modifier */
            );
            /** Finds the @link NXOpen::Annotations::BusinessModifier NXOpen::Annotations::BusinessModifier@endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.
                        
                        An exception will be thrown if no object can be found with the given journal identifier.  @return  Business Modifier with this identifier 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * FindObject
            (
                const char * journalIdentifier /** Identifier of the business modifier */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
