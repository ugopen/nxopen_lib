#ifndef NXOpen_VSA_SIMULATIONPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_VSA_SIMULATIONPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Vsa_SimulationPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_vsa_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Vsa
    {
        class SimulationPreferencesBuilder;
    }
    class Builder;
    namespace Vsa
    {
        class _SimulationPreferencesBuilderBuilder;
        class SimulationPreferencesBuilderImpl;
        /**
            
             <br> To create a new instance of this class, use @link NXOpen::Vsa::VsaManager::CreateSimulationPreferencesBuilder  NXOpen::Vsa::VsaManager::CreateSimulationPreferencesBuilder @endlink  <br> 
         <br>  Usable only on Windows <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VSAEXPORT  SimulationPreferencesBuilder : public NXOpen::Builder
        {
            /**
                    
                    */
            public: enum APIEnumDistributionFloatType
            {
                APIEnumDistributionFloatTypeNormal/** normal */ ,
                APIEnumDistributionFloatTypeUniform/** uniform */ ,
                APIEnumDistributionFloatTypeExtreme/** extreme */ 
            };

            private: SimulationPreferencesBuilderImpl * m_simulationpreferencesbuilder_impl;
            private: friend class  _SimulationPreferencesBuilderBuilder;
            protected: SimulationPreferencesBuilder();
            public: ~SimulationPreferencesBuilder();
            /**Returns  the property represents  No Of Montecarlo. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int NoOfMontecarlo
            (
            );
            /**Sets  the property represents  No Of Montecarlo. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetNoOfMontecarlo
            (
                int noOfMontecarlo /** noofmontecarlo */ 
            );
            /**Returns  the property represents  HLM Simulation flag. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: bool HLMSimulation
            (
            );
            /**Sets  the property represents  HLM Simulation flag. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetHLMSimulation
            (
                bool hlmSimulation /** hlmsimulation */ 
            );
            /**Returns  the property represents Animate Simulation flag. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: bool AnimateSimulation
            (
            );
            /**Sets  the property represents Animate Simulation flag. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetAnimateSimulation
            (
                bool animateSimulation /** animatesimulation */ 
            );
            /**Returns  the property represents  Max Offset for Mating. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxOffsetMating
            (
            );
            /**Sets  the property represents  Max Offset for Mating. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMaxOffsetMating
            (
                double maxOffsetMating /** maxoffsetmating */ 
            );
            /**Returns  the property represents  Max Angle Tangency. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxAngleTangency
            (
            );
            /**Sets  the property represents  Max Angle Tangency. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMaxAngleTangency
            (
                int maxAngleTangency /** maxangletangency */ 
            );
            /**Returns  the property represents  DecimalPlaces. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int DecimalPlaces
            (
            );
            /**Sets  the property represents  DecimalPlaces. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetDecimalPlaces
            (
                int decimalPlaces /** decimalplaces */ 
            );
            /**Returns  the property represents  CutoffPercent. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoffPercent
            (
            );
            /**Sets  the property represents  CutoffPercent. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetCutoffPercent
            (
                double cutoffPercent /** cutoffpercent */ 
            );
            /**Returns  the property represents  Nominal. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Nominal
            (
            );
            /**Sets  the property represents  Nominal. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetNominal
            (
                bool nominal /** nominal */ 
            );
            /**Returns  the property represents  Mean. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Mean
            (
            );
            /**Sets  the property represents  Mean. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMean
            (
                bool mean /** mean */ 
            );
            /**Returns  the property represents  StandardDeviation. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandardDeviation
            (
            );
            /**Sets  the property represents  StandardDeviation. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetStandardDeviation
            (
                bool standardDeviation /** standarddeviation */ 
            );
            /**Returns  the property represents  Cp. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Cp
            (
            );
            /**Sets  the property represents  Cp. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetCp
            (
                bool cp /** cp */ 
            );
            /**Returns  the property represents  Cpk. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Cpk
            (
            );
            /**Sets  the property represents  Cpk. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetCpk
            (
                bool cpk /** cpk */ 
            );
            /**Returns  the property represents  SampleLow. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool SampleLow
            (
            );
            /**Sets  the property represents  SampleLow. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetSampleLow
            (
                bool sampleLow /** samplelow */ 
            );
            /**Returns  the property represents  SampleHigh. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool SampleHigh
            (
            );
            /**Sets  the property represents  SampleHigh. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetSampleHigh
            (
                bool sampleHigh /** samplehigh */ 
            );
            /**Returns  the property represents  SampleRange. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool SampleRange
            (
            );
            /**Sets  the property represents  SampleRange. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetSampleRange
            (
                bool sampleRange /** samplerange */ 
            );
            /**Returns  the property represents  EstimatedLow. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedLow
            (
            );
            /**Sets  the property represents  EstimatedLow. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedLow
            (
                bool estimatedLow /** estimatedlow */ 
            );
            /**Returns  the property represents  EstimatedHigh. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedHigh
            (
            );
            /**Sets  the property represents  EstimatedHigh. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedHigh
            (
                bool estimatedHigh /** estimatedhigh */ 
            );
            /**Returns  the property represents  EstimatedRange. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedRange
            (
            );
            /**Sets  the property represents  EstimatedRange. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedRange
            (
                bool estimatedRange /** estimatedrange */ 
            );
            /**Returns  the property represents  EstimatedPercentAboveUpperSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedPercentAboveUpperSpec
            (
            );
            /**Sets  the property represents  EstimatedPercentAboveUpperSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedPercentAboveUpperSpec
            (
                bool estimatedPercentAboveUpperSpec /** estimatedpercentaboveupperspec */ 
            );
            /**Returns  the property represents  EstimatedPercentBelowLowerSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedPercentBelowLowerSpec
            (
            );
            /**Sets  the property represents  EstimatedPercentBelowLowerSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedPercentBelowLowerSpec
            (
                bool estimatedPercentBelowLowerSpec /** estimatedpercentbelowlowerspec */ 
            );
            /**Returns  the property represents  EstimatedPercentOutOfSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EstimatedPercentOutOfSpec
            (
            );
            /**Sets  the property represents  EstimatedPercentOutOfSpec. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetEstimatedPercentOutOfSpec
            (
                bool estimatedPercentOutOfSpec /** estimatedpercentoutofspec */ 
            );
            /**Returns  the enum  Float Type. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vsa::SimulationPreferencesBuilder::APIEnumDistributionFloatType DistributionFloatType
            (
            );
            /**Sets  the enum  Float Type. 
             <br>  Usable only on Windows <br> 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetDistributionFloatType
            (
                NXOpen::Vsa::SimulationPreferencesBuilder::APIEnumDistributionFloatType distributionFloatType /** distributionfloattype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
