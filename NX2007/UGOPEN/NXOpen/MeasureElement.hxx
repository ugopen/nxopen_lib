#ifndef NXOpen_MEASUREELEMENT_HXX_INCLUDED
#define NXOpen_MEASUREELEMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeasureElement.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureManager.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MeasureElement;
    namespace Annotations
    {
        class Annotation;
    }
    class Expression;
    class NXObject;
    class ScCollector;
    namespace Validate
    {
        class RequirementCheck;
    }
    class MeasureElementImpl;
    /** Represents an element of a master measurement 
     <br>  Created in NX12.0.1.  <br>  
    */
    class NXOPENCPPEXPORT  MeasureElement : public NXOpen::TransientObject
    {
        /** Indicates the object to measure */
        public: enum Measure
        {
            MeasureObject/** object */ ,
            MeasurePoint/** point */ ,
            MeasureVector/** vector */ ,
            MeasureCsys/** csys */ 
        };

        private: MeasureElementImpl * m_measureelement_impl;
        /// \cond NX_NO_DOC 
        public: explicit MeasureElement(void *ptr);
        /// \endcond 
        /**Returns  the type of object to measure. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureElement::Measure MeasureObject1
        (
        );
        /**Sets  the type of object to measure. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetMeasureObject1
        (
            NXOpen::MeasureElement::Measure measureObject /** measure object */ 
        );
        /**Returns  the type of object to measure. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureElement::Measure MeasureObject2
        (
        );
        /**Sets  the type of object to measure. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetMeasureObject2
        (
            NXOpen::MeasureElement::Measure measureObject /** measure object */ 
        );
        /**Returns  the single selection flag. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool SingleSelect1
        (
        );
        /**Sets  the single selection flag. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetSingleSelect1
        (
            bool singleSelect /** single select */ 
        );
        /**Returns  the single selection flag. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool SingleSelect2
        (
        );
        /**Sets  the single selection flag. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetSingleSelect2
        (
            bool singleSelect /** single select */ 
        );
        /** Gets value of the save expression state.  @return   
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool GetExpressionState
        (
            int outputIndex /** output index */ 
        );
        /** Sets value of the save expression state. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetExpressionState
        (
            int outputIndex /** output index */ ,
            bool state /** state */ 
        );
        /** Gets value of the save geometry state.  @return   
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool GetGeometryState
        (
            int outputIndex /** output index */ 
        );
        /** Sets value of the save geometry state. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetGeometryState
        (
            int outputIndex /** output index */ ,
            bool state /** state */ 
        );
        /** Gets value of the show annotation state.  @return   
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool GetAnnotationState
        (
            int outputIndex /** output index */ 
        );
        /** Sets value of the save geometry state. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetAnnotationState
        (
            int outputIndex /** output index */ ,
            bool state /** state */ 
        );
        /** Gets value of the approximate calculation state.  @return   
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool GetApproximateState
        (
            int outputIndex /** output index */ 
        );
        /** Sets value of the approximate calculation state. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetApproximateState
        (
            int outputIndex /** output index */ ,
            bool state /** state */ 
        );
        /**Returns  the alternate solution selection. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: int AlternateSolution
        (
        );
        /**Sets  the alternate solution selection. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void SetAlternateSolution
        (
            int alternateSolution /** alternate solution */ 
        );
        /** Creates the on screen annotations for a measure element.  @return  
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::Annotations::Annotation * CreateAnnotation
        (
        );
        /** Edits the on screen annotations for a measure element. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void EditAnnotation
        (
        );
        /** Creates the saved geometry for a measure element. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void CreateGeometry
        (
        );
        /** Updates requirement checks for a measure element 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void UpdateRequirements
        (
            NXOpen::Validate::RequirementCheck * requirementCheck /** requirementcheck */ ,
            int outputIndex /** outputindex */ 
        );
        /** Makes the on screen annotations visible for a measure element.  @return  
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::Annotations::Annotation * ShowAnnotation
        (
        );
        /** Free resources associated with the measure. After this method
          is called, it is illegal to use the object.  In .NET, this method
          is automatically called when the object is deleted by the garbage
          collector. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: virtual ~MeasureElement();
        /** Makes the on screen annotations invisible for a measure element. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void HideAnnotation
        (
        );
        /** Makes the saved geometry visible for a measure element. This function will not create the saved geometry.
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void ShowGeometry
        (
        );
        /** Makes the saved geometry invisible for a measure element. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void HideGeometry
        (
        );
        /** Set a position for place the newly created annotation. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAnnotationPosition
        (
            const NXOpen::Point3d & position /** position */ 
        );
        /**Returns  the selection intent method used for object in measure. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: int SelectionIntent1
        (
        );
        /**Sets  the selection intent method used for object in measure. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSelectionIntent1
        (
            int selectionIntent /** selectionintent */ 
        );
        /**Returns  the selection intent method used for object in measure. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: int SelectionIntent2
        (
        );
        /**Sets  the selection intent method used for object in measure. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSelectionIntent2
        (
            int selectionIntent /** selectionintent */ 
        );
        /** Set a position for gwif. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetGwifPosition
        (
            const NXOpen::Point3d & position /** position */ 
        );
        /** Get measure element expressions. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void GetMeasureElementExpressions
        (
            std::vector<NXOpen::Expression *> & expsTag /** expstag */ 
        );
        /** Get measure element expressions. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void GetMeasureElementExpressionsType
        (
            std::vector<NXString> & expsType /** expstype */ 
        );
        /** Get measure element collector1. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ScCollector * GetMeasureElementCollector1
        (
        );
        /** Get measure element collector2. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ScCollector * GetMeasureElementCollector2
        (
        );
        /** Get measure element extra object vector1. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void GetExtraObjects1
        (
            std::vector<NXOpen::NXObject *> & extraObjects1 /** extraobjects1 */ 
        );
        /** Get measure element extra object vector2. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void GetExtraObjects2
        (
            std::vector<NXOpen::NXObject *> & extraObjects2 /** extraobjects2 */ 
        );
        /** Set measure element accuracy. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMeasureElementAccuracy
        (
            double accuracy /** accuracy */ 
        );
        /** Get measure element accuracy. 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: double GetMeasureElementAccuracy
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
