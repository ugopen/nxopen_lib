#ifndef NXOpen_PDM_PDMCOPYOREDITOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PDMCOPYOREDITOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PdmCopyOrEditOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LoadOptions.hxx>
#include <NXOpen/PDM_PartOperationBuilder.hxx>
#include <NXOpen/PDM_PdmCopyOrEditOperationObject.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PdmCopyOrEditOperationBuilder;
    }
    class NXObject;
    namespace PDM
    {
        class PartOperationBuilder;
    }
    namespace PDM
    {
        class PdmCopyOrEditOperationObject;
    }
    namespace PDM
    {
        class _PdmCopyOrEditOperationBuilderBuilder;
        class PdmCopyOrEditOperationBuilderImpl;
        /** Represents a builder class that performs Copy or Edit(Clone) operation  <br> To create a new instance of this class, use @link NXOpen::PDM::PdmSession::CreatePdmCopyOrEditOperationBuilder  NXOpen::PDM::PdmSession::CreatePdmCopyOrEditOperationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DefaultAction </term> <description> 
         
        Clone </description> </item> 

        <item><term> 
         
        NumberingSource </term> <description> 
         
        AutoGenerate </description> </item> 

        </list> 

         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PdmCopyOrEditOperationBuilder : public NXOpen::PDM::PartOperationBuilder
        {
            /** This enum is used to specify the default action for clone. */
            public: enum CloneAction
            {
                CloneActionClone/** clone */ ,
                CloneActionRetain/** retain */ ,
                CloneActionRevise/** revise */ ,
                CloneActionReplace/** replace */ ,
                CloneActionOverwrite/** overwrite */ 
            };

            /** This enum is used to specify the default behavior for auto assign. */
            public: enum NumberingSourceOption
            {
                NumberingSourceOptionAutoGenerate/** auto generate */ ,
                NumberingSourceOptionNamingRule/** naming rule */ ,
                NumberingSourceOptionUserName/** user name */ 
            };

            /** This enum is used to specify the conversion rule for @link NXOpen::PDM::PdmCopyOrEditOperationBuilder::NumberingSourceOptionNamingRule NXOpen::PDM::PdmCopyOrEditOperationBuilder::NumberingSourceOptionNamingRule@endlink . */
            public: enum ConversionRule
            {
                ConversionRuleWithPrefix/** with prefix */ ,
                ConversionRuleWithSuffix/** with suffix */ ,
                ConversionRuleWithReplaceString/** with replace string */ ,
                ConversionRuleWithRenumber/** with renumber */ ,
                ConversionRuleMixedRule/** mixed rule */ 
            };

            /** This enum is used to specify the related CAE types to be loaded. */
            public: enum CaeRelationTraversalOption
            {
                CaeRelationTraversalOptionSimFemIdeal/** sim fem ideal */ ,
                CaeRelationTraversalOptionFemIdeal/** fem ideal */ ,
                CaeRelationTraversalOptionIdeal/** ideal */ ,
                CaeRelationTraversalOptionNone/** none */ 
            };

            private: PdmCopyOrEditOperationBuilderImpl * m_pdmcopyoreditoperationbuilder_impl;
            private: friend class  _PdmCopyOrEditOperationBuilderBuilder;
            protected: PdmCopyOrEditOperationBuilder();
            public: ~PdmCopyOrEditOperationBuilder();
            /** This function adds parts to the Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddParts
            (
                std::vector<NXString> & parts /** parts */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** This function adds parts to the Pdm copy or edit operation using clone log file 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddPartsUsingCloneLogFile
            (
                const NXString & logFilePath /** logfilepath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** This function adds parts to the Pdm copy or edit operation using clone log file 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void AddPartsUsingCloneLogFile
            (
                const char * logFilePath /** logfilepath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** This function executes the dry run 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ExecuteDryRun
            (
            );
            /**Returns  the function returns/sets the default clone action to use for Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PdmCopyOrEditOperationBuilder::CloneAction DefaultAction
            (
            );
            /**Sets  the function returns/sets the default clone action to use for Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAction
            (
                NXOpen::PDM::PdmCopyOrEditOperationBuilder::CloneAction defaultAction /** defaultaction */ 
            );
            /**Returns  the function returns/sets the numbering source to use for Part ID generation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PdmCopyOrEditOperationBuilder::NumberingSourceOption NumberingSource
            (
            );
            /**Sets  the function returns/sets the numbering source to use for Part ID generation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNumberingSource
            (
                NXOpen::PDM::PdmCopyOrEditOperationBuilder::NumberingSourceOption numberingSource /** numberingsource */ 
            );
            /**Returns  the function returns/sets the conversion type to use for generating a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PdmCopyOrEditOperationBuilder::ConversionRule ConversionType
            (
            );
            /**Sets  the function returns/sets the conversion type to use for generating a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConversionType
            (
                NXOpen::PDM::PdmCopyOrEditOperationBuilder::ConversionRule conversionType /** conversiontype */ 
            );
            /**Returns  the function returns/sets the prefix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrefixStr
            (
            );
            /**Sets  the function returns/sets the prefix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPrefixStr
            (
                const NXString & prefixStr /** prefixstr */ 
            );
            /**Sets  the function returns/sets the prefix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetPrefixStr
            (
                const char * prefixStr /** prefixstr */ 
            );
            /**Returns  the function returns/sets the suffix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SuffixStr
            (
            );
            /**Sets  the function returns/sets the suffix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuffixStr
            (
                const NXString & suffixStr /** suffixstr */ 
            );
            /**Sets  the function returns/sets the suffix str to be applied to the source part ID to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetSuffixStr
            (
                const char * suffixStr /** suffixstr */ 
            );
            /**Returns  the function returns/sets the string in the source part ID to replace, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringToReplace
            (
            );
            /**Sets  the function returns/sets the string in the source part ID to replace, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetStringToReplace
            (
                const NXString & stringToReplace /** stringtoreplace */ 
            );
            /**Sets  the function returns/sets the string in the source part ID to replace, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetStringToReplace
            (
                const char * stringToReplace /** stringtoreplace */ 
            );
            /**Returns  the function returns/sets the string to replace with, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReplaceWithStr
            (
            );
            /**Sets  the function returns/sets the string to replace with, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetReplaceWithStr
            (
                const NXString & replaceWithStr /** replacewithstr */ 
            );
            /**Sets  the function returns/sets the string to replace with, to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetReplaceWithStr
            (
                const char * replaceWithStr /** replacewithstr */ 
            );
            /**Returns  the function returns/sets the renumber string to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RenumberStr
            (
            );
            /**Sets  the function returns/sets the renumber string to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetRenumberStr
            (
                const NXString & numberAttr /** numberattr */ 
            );
            /**Sets  the function returns/sets the renumber string to generate a new part ID 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetRenumberStr
            (
                const char * numberAttr /** numberattr */ 
            );
            /**Returns  the function returns/sets the output log file to dump Pdm copy or edit operation information 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputLogFile
            (
            );
            /**Sets  the function returns/sets the output log file to dump Pdm copy or edit operation information 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetOutputLogFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the function returns/sets the output log file to dump Pdm copy or edit operation information 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetOutputLogFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the function returns/sets the flag to include cae related components in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool CopyCaeRelations
            (
            );
            /**Sets  the function returns/sets the flag to include cae related components in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyCaeRelations
            (
                bool copyCaeRelations /** copycaerelations */ 
            );
            /**Returns  the function returns/sets the option to include cae components in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PdmCopyOrEditOperationBuilder::CaeRelationTraversalOption CopyCaeRelationOption
            (
            );
            /**Sets  the function returns/sets the option to include cae components in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyCaeRelationOption
            (
                NXOpen::PDM::PdmCopyOrEditOperationBuilder::CaeRelationTraversalOption copyCaeRelationOption /** copycaerelationoption */ 
            );
            /**Returns  the function returns/sets the flag to include master drawings of the assembly/parts added in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopyDrawingRelations
            (
            );
            /**Sets  the function returns/sets the flag to include master drawings of the assembly/parts added in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyDrawingRelations
            (
                bool copyDrawingRelations /** copydrawingrelations */ 
            );
            /**Returns  the function returns/sets the flag to copy associated files 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopyAssociatedFiles
            (
            );
            /**Sets  the function returns/sets the flag to copy associated files 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyAssociatedFiles
            (
                bool copyAssociatedFiles /** copyassociatedfiles */ 
            );
            /**Returns  the function returns/sets the flag to copy non-master specification 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopySpecification
            (
            );
            /**Sets  the function returns/sets the flag to copy non-master specification 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopySpecification
            (
                bool copySpecification /** copyspecification */ 
            );
            /**Returns  the function returns/sets the flag to copy non-master menifestation
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopyManifestation
            (
            );
            /**Sets  the function returns/sets the flag to copy non-master menifestation
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyManifestation
            (
                bool copyManifestation /** copymanifestation */ 
            );
            /**Returns  the function returns/sets the flag to copy non-master altrep 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopyAltrep
            (
            );
            /**Sets  the function returns/sets the flag to copy non-master altrep 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyAltrep
            (
                bool copyAltrep /** copyaltrep */ 
            );
            /**Returns  the function returns/sets the flag to copy non-master cae-motion 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool CopyCaeMotion
            (
            );
            /**Sets  the function returns/sets the flag to copy non-master cae-motion 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyCaeMotion
            (
                bool copyCaeMotion /** copycaemotion */ 
            );
            /**Returns  the function returns/sets the default owning user to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString DefaultOwningUser
            (
            );
            /**Sets  the function returns/sets the default owning user to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultOwningUser
            (
                const NXString & defaultOwningUser /** defaultowninguser */ 
            );
            /**Sets  the function returns/sets the default owning user to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultOwningUser
            (
                const char * defaultOwningUser /** defaultowninguser */ 
            );
            /**Returns  the function returns/sets the default owning group to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultOwningGroup
            (
            );
            /**Sets  the function returns/sets the default owning group to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultOwningGroup
            (
                const NXString & defaultOwningGroup /** defaultowninggroup */ 
            );
            /**Sets  the function returns/sets the default owning group to be assigned to the cloned parts 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultOwningGroup
            (
                const char * defaultOwningGroup /** defaultowninggroup */ 
            );
            /** This function validates the user inputs for following things:
                        - Validates whether the input property values are valid according to defined naming rules and specified user exits for the input property.
                        - Check for duplicate Ids/Mfk-Ids
                        - Check if all required attributes have been set
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ValidateOperationObjects
            (
            );
            /** This function sets the assembly load option for managed mode. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLoadOption
            (
                NXOpen::LoadOptions::ManagedModeLoadMethod loadOption /** loadoption */ 
            );
            /** This function sets the configuration context using the Revision Rule Name. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int SetConfigurationContextUsingRevRule
            (
                bool setDefault /** setdefault */ ,
                const NXString & revisionRuleName /** revisionrulename */ 
            );
            /** This function sets the configuration context using the Revision Rule Name. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            int SetConfigurationContextUsingRevRule
            (
                bool setDefault /** setdefault */ ,
                const char * revisionRuleName /** revisionrulename */ 
            );
            /**Returns  the function returns/sets the flag to retain ownership of the parts during clone 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool RetainOwnership
            (
            );
            /**Sets  the function returns/sets the flag to retain ownership of the parts during clone 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetRetainOwnership
            (
                bool retainOwnership /** retainownership */ 
            );
            /** This function gets the default projects information 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetDefaultProjectInformation
            (
                std::vector<NXString> & projectNames /** names of the projects */,
                std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
            );
            /** This function sets the default projects information 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultProjectInformation
            (
                std::vector<NXString> & projectNames /** names of the projects to assign */,
                const std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
            );
            /** This function updates the Teamcenter information string attribute 'TCIN_CLONE_TEAMCENTER_INFORMATION' on given operation objects 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void UpdateTeamcenterInformation
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /** This function cleara all attributes from the selected operation objects 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ResetAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**Returns  the function returns/sets the IdContext to be used while assigning alternate IDs during clone 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultAlternateIdContext
            (
            );
            /**Sets  the function returns/sets the IdContext to be used while assigning alternate IDs during clone 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAlternateIdContext
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the function returns/sets the IdContext to be used while assigning alternate IDs during clone 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultAlternateIdContext
            (
                const char * filename /** filename */ 
            );
            /**Returns  the function returns/sets the IdType to be used while assigning alternate IDs during clone
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultAlternateIdType
            (
            );
            /**Sets  the function returns/sets the IdType to be used while assigning alternate IDs during clone
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAlternateIdType
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the function returns/sets the IdType to be used while assigning alternate IDs during clone
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultAlternateIdType
            (
                const char * filename /** filename */ 
            );
            /**Returns  the function returns/sets the flag to assign alternate IDs during Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssignAlternateIds
            (
            );
            /**Sets  the function returns/sets the flag to assign alternate IDs during Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAssignAlternateIds
            (
                bool createAlternateIDs /** createalternateids */ 
            );
            /** This function creates/updates the operation objects of the parts participating in the Pdm copy or edit operation.
                        Note: The operation object needs to be updated in certain cases, e.g. after item type is changed.
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateOrUpdatePdmCopyOrEditOperationObjects
            (
                bool doUpdate /** doupdate */ ,
                std::vector<NXOpen::PDM::PdmCopyOrEditOperationObject *> & copyOperationObjects /** copyoperationobjects */ 
            );
            /** This function gets all the operation objects participating in the Pdm copy or edit operation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void GetPdmCopyOrEditOperationObjects
            (
                std::vector<NXOpen::PDM::PdmCopyOrEditOperationObject *> & copyOperationObjects /** copyoperationobjects */ 
            );
            /** This function gets the operation object for the given part spec. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PdmCopyOrEditOperationObject * GetPdmCopyOrEditOperationObject
            (
                const NXString & partFilename /** part filename */ 
            );
            /** This function gets the operation object for the given part spec. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PDM::PdmCopyOrEditOperationObject * GetPdmCopyOrEditOperationObject
            (
                const char * partFilename /** part filename */ 
            );
            /** This function sets the clone action on given operation objects, this change in action 
                    might cause clone action change on related operation objects. Operation objects
                    whose action got changed will be returned 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCloneAction
            (
                NXOpen::PDM::PdmCopyOrEditOperationObject * operationObject /** operationobject */ ,
                NXOpen::PDM::PdmCopyOrEditOperationBuilder::CloneAction cloneAction /** cloneaction */ ,
                std::vector<NXOpen::PDM::PdmCopyOrEditOperationObject *> & modifiedLogicalObjects /** modifiedlogicalobjects */ 
            );
            /** This function sets the replacement part for the given operation object, this is needed for Replace action 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int SetReplacePart
            (
                NXOpen::PDM::PdmCopyOrEditOperationObject * operationObject /** operationobject */ ,
                const NXString & replacePartCliSpec /** replacepartclispec */ 
            );
            /** This function sets the replacement part for the given operation object, this is needed for Replace action 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            int SetReplacePart
            (
                NXOpen::PDM::PdmCopyOrEditOperationObject * operationObject /** operationobject */ ,
                const char * replacePartCliSpec /** replacepartclispec */ 
            );
            /**Returns  the function returns/sets the flag to attach the output log file as associated file to the top part of the input assembly 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AttachLogFile
            (
            );
            /**Sets  the function returns/sets the flag to attach the output log file as associated file to the top part of the input assembly 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttachLogFile
            (
                bool attachLogFile /** attachlogfile */ 
            );
            /**Returns  the function returns/sets the flag to include component parts of the assembly added in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IncludeComponentParts
            (
            );
            /**Sets  the function returns/sets the flag to include component parts of the assembly added in Pdm copy or edit operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIncludeComponentParts
            (
                bool includeComponentParts /** includecomponentparts */ 
            );
            /**Returns  the function returns/sets the default change notice for Pdm copy or edit operation in CLI format. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultChangeNotice
            (
            );
            /**Sets  the function returns/sets the default change notice for Pdm copy or edit operation in CLI format. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultChangeNotice
            (
                const NXString & defaultChangeNotice /** defaultchangenotice */ 
            );
            /**Sets  the function returns/sets the default change notice for Pdm copy or edit operation in CLI format. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultChangeNotice
            (
                const char * defaultChangeNotice /** defaultchangenotice */ 
            );
            /** This function sets the transient part to overwrite for the given operation object, this is needed for OVERWRITE action 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int SetOverwritePart
            (
                NXOpen::PDM::PdmCopyOrEditOperationObject * operationObject /** operationobject */ ,
                const NXString & transientPartCliSpec /** transientpartclispec */ 
            );
            /** This function sets the transient part to overwrite for the given operation object, this is needed for OVERWRITE action 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            int SetOverwritePart
            (
                NXOpen::PDM::PdmCopyOrEditOperationObject * operationObject /** operationobject */ ,
                const char * transientPartCliSpec /** transientpartclispec */ 
            );
            /**Returns  the function returns/sets the flag to assign the default change notice set on builder to target objects created in pdm copy or edit operation. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssignDefaultChangeNotice
            (
            );
            /**Sets  the function returns/sets the flag to assign the default change notice set on builder to target objects created in pdm copy or edit operation. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssignDefaultChangeNotice
            (
                bool assignDefaultChangeNotice /** assigndefaultchangenotice */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
