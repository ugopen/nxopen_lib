#ifndef NXOpen_ROUTING_LINEARPATHSETTINGS_HXX_INCLUDED
#define NXOpen_ROUTING_LINEARPATHSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LinearPathSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class LinearPathSettings;
    }
    class Builder;
    namespace Routing
    {
        class _LinearPathSettingsBuilder;
        class LinearPathSettingsImpl;
        /** Helper object used the by @link Routing::LinearPathBuilder Routing::LinearPathBuilder@endlink  builder. 
                Determines various settings to be applied when the path is created.
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateLinearPathSettings  NXOpen::Routing::RouteManager::CreateLinearPathSettings @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        LockToSelectedObject </term> <description> 
         
        True </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  LinearPathSettings : public NXOpen::Builder
        {
            private: LinearPathSettingsImpl * m_linearpathsettings_impl;
            private: friend class  _LinearPathSettingsBuilder;
            protected: LinearPathSettings();
            public: ~LinearPathSettings();
            /**Returns  the preference to assign the current default corner to new segments. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool AssignDefaultCorner
            (
            );
            /**Sets  the preference to assign the current default corner to new segments. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAssignDefaultCorner
            (
                bool assign /** assign */ 
            );
            /**Returns  the preference to find and assign a default elbow to new segments. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool AssignDefaultElbow
            (
            );
            /**Sets  the preference to find and assign a default elbow to new segments. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAssignDefaultElbow
            (
                bool assign /** assign */ 
            );
            /**Returns  the preference to determine if the new segments and control points
                            should be constrained to the objects selected by the user. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool LockToSelectedObject
            (
            );
            /**Sets  the preference to determine if the new segments and control points
                            should be constrained to the objects selected by the user. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLockToSelectedObject
            (
                bool lock /** lock */ 
            );
            /**Returns  the preference to determine if the length of new segments should
                         be constrained. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool LockLength
            (
            );
            /**Sets  the preference to determine if the length of new segments should
                         be constrained. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLockLength
            (
                bool lock /** lock */ 
            );
            /**Returns  the preference to determine if the angle between segments should
                            be constrained.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool LockAngle
            (
            );
            /**Sets  the preference to determine if the angle between segments should
                            be constrained.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLockAngle
            (
                bool lock /** lock */ 
            );
            /**Returns   a flag indicating whether or not to allow cut elbow placement 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: bool AllowCutElbow
            (
            );
            /**Sets   a flag indicating whether or not to allow cut elbow placement 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_pipetube ("Routing Piping and Tubing") */
            public: void SetAllowCutElbow
            (
                bool assign /** assign */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
