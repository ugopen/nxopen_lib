#ifndef NXOpen_PREFERENCES_FRAMEBARPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_FRAMEBARPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_FrameBarPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_BaseFrameBarBuilder.hxx>
#include <NXOpen/Preferences_IGeneralViewPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class FrameBarPreferences;
    }
    namespace Preferences
    {
        class GeneralViewPreferences;
    }
    namespace Preferences
    {
        class IGeneralViewPreferences;
    }
    namespace Preferences
    {
        class FrameBarPreferencesImpl;
        /** Represents Frame Bar Preferencess applicable to drafting views. 
              <br> To obtain an instance of this class use @link Preferences::GeneralViewPreferences::FrameBar Preferences::GeneralViewPreferences::FrameBar@endlink   <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  FrameBarPreferences: public virtual NXOpen::Preferences::IGeneralViewPreferences
        {
            private: FrameBarPreferencesImpl * m_framebarpreferences_impl;
            private: NXOpen::Preferences::GeneralViewPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit FrameBarPreferences(NXOpen::Preferences::GeneralViewPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FrameBarPreferences();
            /**Returns  the status of horizontal framebar. If true it automatically creates 
                        horizontal framebar for views when ship axis matches with view axis
                        for horizontal framebar.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool Horizontal
            (
            );
            /**Sets  the status of horizontal framebar. If true it automatically creates 
                        horizontal framebar for views when ship axis matches with view axis
                        for horizontal framebar.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontal
            (
                bool horizontal /** horizontal */ 
            );
            /**Returns  the horizontal position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseFrameBarBuilder::HorizontalPositionType HorizontalPosition
            (
            );
            /**Sets  the horizontal position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalPosition
            (
                NXOpen::Annotations::BaseFrameBarBuilder::HorizontalPositionType horizontalPosition /** horizontalposition */ 
            );
            /**Returns  the horizontal distance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double HorizontalDistance
            (
            );
            /**Sets  the horizontal distance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalDistance
            (
                double horizontalDistance /** horizontaldistance */ 
            );
            /**Returns  the status of vertical framebar. If true it automatically creates 
                        vertical framebar for views when ship axis matches with view axis
                        for vertical framebar.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool Vertical
            (
            );
            /**Sets  the status of vertical framebar. If true it automatically creates 
                        vertical framebar for views when ship axis matches with view axis
                        for vertical framebar.
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVertical
            (
                bool vertical /** vertical */ 
            );
            /**Returns  the vertical position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseFrameBarBuilder::VerticalPositionType VerticalPosition
            (
            );
            /**Sets  the vertical position 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalPosition
            (
                NXOpen::Annotations::BaseFrameBarBuilder::VerticalPositionType verticalPosition /** verticalposition */ 
            );
            /**Returns  the vertical distance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double VerticalDistance
            (
            );
            /**Sets  the vertical distance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalDistance
            (
                double verticalDistance /** verticaldistance */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
