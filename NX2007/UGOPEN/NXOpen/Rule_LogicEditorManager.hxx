#ifndef NXOpen_RULE_LOGICEDITORMANAGER_HXX_INCLUDED
#define NXOpen_RULE_LOGICEDITORMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Rule_LogicEditorManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libruleopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Rule
    {
        class LogicEditorManager;
    }
    class Session;
    namespace Diagramming
    {
        class Node;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace Rule
    {
        class Node;
    }
    namespace Rule
    {
        class RuleInstance;
    }
    namespace Rule
    {
        class RuleObject;
    }
    namespace Rule
    {
        class SnippetNode;
    }
    namespace Rule
    {
        class LogicEditorManagerImpl;

        /// \cond NX_NO_DOC 
        /** Represents an object that manages Logic Editor application specific objects and preferences.
              <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class RULEOPENCPPEXPORT  LogicEditorManager
        {
            private: LogicEditorManagerImpl * m_logiceditormanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit LogicEditorManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static LogicEditorManager* theLogicEditorManager;
            /** Returns the LogicEditorManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static LogicEditorManager* GetLogicEditorManager(NXOpen::Session *owner);
            public: ~LogicEditorManager();

            /// \cond NX_NO_DOC 
            /** Initialize logic editor environment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            public: void Initialize
            (
                const NXString & application /** application */ 
            );
            /** Initialize logic editor environment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            void Initialize
            (
                const char * application /** application */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Exit logic editor environment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            public: void Exit
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Load rule into logic editor environment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Diagramming::Sheet * LoadRule
            (
                NXOpen::Rule::RuleInstance * ruleInstanceTag /** ruleinstancetag */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a Logic Node for the given Rule Node. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Diagramming::Node * CreateLogicNode
            (
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ ,
                NXOpen::Rule::Node * ruleNodeTag /** rulenodetag */ ,
                int xPosition /** x position */ ,
                int yPosition /** y position */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a Logic Rules for the given Rule Instance. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR assemblies ("ASSEMBLIES MODULE") */
            public: void CreateLogicObjects
            (
                NXOpen::Rule::RuleInstance * ruleInstanceTag /** ruleinstancetag */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update the snippet node from the library. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateSnippetNodeFromLibrary
            (
                NXOpen::Rule::SnippetNode * node /** node */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Group a set of nodes. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Node * GroupNodes
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ ,
                const NXString & name /** name */ ,
                const std::vector<NXOpen::Diagramming::Node *> & members /** members */ 
            );
            /** Group a set of nodes. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Diagramming::Node * GroupNodes
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ ,
                const char * name /** name */ ,
                const std::vector<NXOpen::Diagramming::Node *> & members /** members */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Ungroup a set of nodes. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UngroupNodes
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ ,
                NXOpen::Diagramming::Node * groupNode /** groupnode */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Flip the compact state of a node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void FlipCompactMode
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Sheet * sheetTag /** sheettag */ ,
                NXOpen::Diagramming::Node * nodeTag /** nodetag */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set descriptive name of a node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void RenameNode
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Node * nodeTag /** nodetag */ ,
                const NXString & name /** name */ 
            );
            /** Set descriptive name of a node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void RenameNode
            (
                NXOpen::Rule::RuleObject * ruleTag /** ruletag */ ,
                NXOpen::Diagramming::Node * nodeTag /** nodetag */ ,
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Delete a Logic Node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteLogicNode
            (
                NXOpen::Diagramming::Node * nodeTag /** nodetag */ 
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
