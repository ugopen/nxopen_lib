#ifndef NXOpen_CAE_MODELCHECK_CORRECTBEAMELEMENTSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELCHECK_CORRECTBEAMELEMENTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelCheck_CorrectBeamElementsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ModelCheckDataTypes.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelCheck_ISelectionBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ModelCheck
        {
            class CorrectBeamElementsBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        namespace ModelCheck
        {
            class ISelectionBuilder;
        }
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    namespace CAE
    {
        namespace ModelCheck
        {
            class _CorrectBeamElementsBuilderBuilder;
            class CorrectBeamElementsBuilderImpl;
            /** Represents a @link NXOpen::CAE::ModelCheck::CorrectBeamElementsBuilder NXOpen::CAE::ModelCheck::CorrectBeamElementsBuilder@endlink 
                        to check and correct for dangling nodes of 1d elements.
                         <br> 
                        It will check 1D elements for free leg nodes. 
                        If any of the nodes of the 1D element is not connected to any other element, then it will be considered as a free leg node. 
                         <br>            
                     <br> To create a new instance of this class, use @link NXOpen::CAE::ModelCheckManager::CreateCorrectBeamElementsBuilder  NXOpen::CAE::ModelCheckManager::CreateCorrectBeamElementsBuilder @endlink  <br> 
             <br>  Created in NX2007.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  CorrectBeamElementsBuilder : public NXOpen::Builder, public virtual NXOpen::CAE::ModelCheck::ISelectionBuilder
            {
                /** Represents the elements to check from */
                public: enum ElementToCheck
                {
                    ElementToCheckDisplayed/** All the displayed elements */,
                    ElementToCheckSelected/** Selected elements */
                };

                private: CorrectBeamElementsBuilderImpl * m_correctbeamelementsbuilder_impl;
                private: friend class  _CorrectBeamElementsBuilderBuilder;
                protected: CorrectBeamElementsBuilder();
                public: ~CorrectBeamElementsBuilder();
                /**Returns  the element select option .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::CorrectBeamElementsBuilder::ElementToCheck ElemCheckOption
                (
                );
                /**Sets  the element select option .
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetElemCheckOption
                (
                    NXOpen::CAE::ModelCheck::CorrectBeamElementsBuilder::ElementToCheck option /** option */ 
                );
                /**Returns  the selected elements 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::SelectElementsBuilder * ElementSelection
                (
                );
                /** Calculate the dangling nodes from selected or displayed elements
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void IdentifyFailedElements
                (
                    std::vector<NXOpen::CAE::FEElement *> & failedElement /** elements having dangling nodes*/
                );
                /** Delete dangling nodes of elements
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void DeleteDanglingNodesInElements
                (
                    const std::vector<NXOpen::CAE::FEElement *> & failedElement /** elements having dangling nodes*/
                );
                /** Delete failed elements
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void DeleteFailedElements
                (
                    const std::vector<NXOpen::CAE::FEElement *> & failedElement /** elements to delete*/
                );
                /**Returns  the node to replace 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::SelectFENodeList * NodeToReplace
                (
                );
                /**Returns  the replacement node
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::SelectFENodeList * ReplacementNode
                (
                );
                /** Correct failed element
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void CorrectFailedElements
                (
                    NXOpen::CAE::FEElement * failedElement /** element to correct*/,
                    NXOpen::CAE::FENode * nodeToReplace /** nodetoreplace */ ,
                    NXOpen::CAE::FENode * replacementNode /** replacementnode */ 
                );
                /**Returns  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::ModelCheck::CheckScope CheckScopeOption
                (
                );
                /**Sets  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual void SetCheckScopeOption
                (
                    NXOpen::CAE::ModelCheck::CheckScope scope /** scope */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
