#ifndef NXOpen_ASSEMBLIES_CLEARANCEANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_CLEARANCEANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ClearanceAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ClearanceAnalysisBuilder;
    }
    class Builder;
    class DisplayableObject;
    class Expression;
    class NXColor;
    class SelectDisplayableObjectList;
    namespace Assemblies
    {
        class _ClearanceAnalysisBuilderBuilder;
        class ClearanceAnalysisBuilderImpl;
        /** 
                Represents @link NXOpen::Assemblies::ClearanceAnalysisBuilder NXOpen::Assemblies::ClearanceAnalysisBuilder@endlink .  The builder builds the clearance set
                which contains properties for the analysis.  The properties are:

                Clearance Set Name: the name of the clearance set.

                Clearance Type: either components or bodies or PSM facet objects.

                Number of collections: either one or two.  Where one collection is chosen, the analysis is performed 
                between all objects in the collection.  Where two collections are chosen, the analysis compares objects 
                from one collection with objects from the other.

                Exceptions:
                    Select Subassemblies: Specific subassemblies selected within the displayed part can be treated as a single entity.

                    Explicitly Ignore: A number of options to reduce the amount of results reported.

                    Additional exceptions: Addtional pairs of objects to be excluded or included regardless of exception rules previously defined.
             <br> To create a new instance of this class, use @link NXOpen::Assemblies::AssemblyManager::CreateClearanceAnalysisBuilder  NXOpen::Assemblies::AssemblyManager::CreateClearanceAnalysisBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ClearanceAnalysisBuilder : public NXOpen::Builder
        {
            /** Specify the type of clearance analysis. */
            public: enum ClearanceBetweenEntity
            {
                ClearanceBetweenEntityComponents/** components */ ,
                ClearanceBetweenEntityBodies/** bodies */ 
            };

            /** Specify the number of collections used for clearance analysis. */
            public: enum NumberOfCollections
            {
                NumberOfCollectionsOne/** one */ ,
                NumberOfCollectionsTwo/** two */ 
            };

            /** Specify how to compare objects inside a collection. */
            public: enum CollectionRange
            {
                CollectionRangeAllObjects/** all objects */ ,
                CollectionRangeAllVisibleObjects/** all visible objects */ ,
                CollectionRangeSelectedObjects/** selected objects */ ,
                CollectionRangeAllButSelectedObjects/** all but selected objects */ 
            };

            /** Specify the clearance zone type. */
            public: enum ZoneType
            {
                ZoneTypeObject/** object */ ,
                ZoneTypePair/** pair */ 
            };

            /** Specify the analysis method. */
            public: enum CalculationMethodType
            {
                CalculationMethodTypeLightweight/** lightweight */ ,
                CalculationMethodTypeExactifLoaded/** exactif loaded */ ,
                CalculationMethodTypeExact/** exact */ 
            };

            /** Specify the source of the clearance zone */
            public: enum ClearanceZoneSource
            {
                ClearanceZoneSourcePair/** pair */ ,
                ClearanceZoneSourceObject1/** object1 */ ,
                ClearanceZoneSourceObject2/** object2 */ ,
                ClearanceZoneSourceDefault/** default */ ,
                ClearanceZoneSourceDefined/** defined */ 
            };

            /** Specify the reason for excluding the pair */
            public: enum PairExcludedReason
            {
                PairExcludedReasonNoReason/** default behavior */,
                PairExcludedReasonUserDefined/** user has explicitly included or excluded this pair */,
                PairExcludedReasonSameCompRule/** global exclusion rule for same component applies */,
                PairExcludedReasonSameGroupRule/** global exclusion rule for same group applies */,
                PairExcludedReasonMatedCompRule/** global exclusion rule for mated component applies */,
                PairExcludedReasonSamePartRule/** global exclusion rule for same part applies */,
                PairExcludedReasonCompSuppressed/** suppressed component */,
                PairExcludedReasonNonGeom/** no geometry */,
                PairExcludedReasonUnitSubassy/** in unit subassembly */
            };

            private: ClearanceAnalysisBuilderImpl * m_clearanceanalysisbuilder_impl;
            private: friend class  _ClearanceAnalysisBuilderBuilder;
            protected: ClearanceAnalysisBuilder();
            public: ~ClearanceAnalysisBuilder();
            /**Returns  the clearance set name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ClearanceSetName
            (
            );
            /**Sets  the clearance set name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetClearanceSetName
            (
                const NXString & clearanceSetName /** clearancesetname */ 
            );
            /**Sets  the clearance set name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetClearanceSetName
            (
                const char * clearanceSetName /** clearancesetname */ 
            );
            /**Returns  the setting to determine whether components or bodies should be used.
                        Please note that changing the collection type will clear the collections, 
                        exceptions and clearance zones from the clearance set
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceBetweenEntity ClearanceBetween
            (
            );
            /**Sets  the setting to determine whether components or bodies should be used.
                        Please note that changing the collection type will clear the collections, 
                        exceptions and clearance zones from the clearance set
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetClearanceBetween
            (
                NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceBetweenEntity clearanceBetweenEntity /** clearancebetweenentity */ 
            );
            /**Returns  the setting to determine whether one collection or two collections should be used. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::NumberOfCollections TotalCollectionCount
            (
            );
            /**Sets  the setting to determine whether one collection or two collections should be used. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetTotalCollectionCount
            (
                NXOpen::Assemblies::ClearanceAnalysisBuilder::NumberOfCollections totalCollectionCount /** totalcollectioncount */ 
            );
            /**Returns  the range setting for collection one. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::CollectionRange CollectionOneRange
            (
            );
            /**Sets  the range setting for collection one. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCollectionOneRange
            (
                NXOpen::Assemblies::ClearanceAnalysisBuilder::CollectionRange collectionRange /** collectionrange */ 
            );
            /**Returns  the selected objects for collection one. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::SelectDisplayableObjectList * CollectionOneObjects
            (
            );
            /**Returns  the range setting for collection two. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::CollectionRange CollectionTwoRange
            (
            );
            /**Sets  the range setting for collection two. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCollectionTwoRange
            (
                NXOpen::Assemblies::ClearanceAnalysisBuilder::CollectionRange collectionRange /** collectionrange */ 
            );
            /**Returns  the selected objects for collection two. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * CollectionTwoObjects
            (
            );
            /**Returns  the setting to determine whether to ignore pairs within the selected subassemblies. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsIgnorePairsWithinSelectedSubassemblies
            (
            );
            /**Sets  the setting to determine whether to ignore pairs within the selected subassemblies. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIgnorePairsWithinSelectedSubassemblies
            (
                bool isIgnorePairsWithinSelectedSubassemblies /** isignorepairswithinselectedsubassemblies */ 
            );
            /**Returns  the selected unit subassemblies. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * UnitSubassemblies
            (
            );
            /**Returns  the setting to determine whether to ignore pairs within same subassembly. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsIgnorePairsWithinSameSubassembly
            (
            );
            /**Sets  the setting to determine whether to ignore pairs within same subassembly. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIgnorePairsWithinSameSubassembly
            (
                bool isIgnorePairsWithinSameSubassembly /** isignorepairswithinsamesubassembly */ 
            );
            /**Returns  the setting to determine whether to ignore pairs within same group. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsIgnorePairsWithinSameGroup
            (
            );
            /**Sets  the setting to determine whether to ignore pairs within same group. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIgnorePairsWithinSameGroup
            (
                bool isIgnorePairsWithinSameGroup /** isignorepairswithinsamegroup */ 
            );
            /**Returns  the setting to determine whether to ignore pairs within same part. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsIgnorePairsWithinSamePart
            (
            );
            /**Sets  the setting to determine whether to ignore pairs within same part. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIgnorePairsWithinSamePart
            (
                bool isIgnorePairsWithinSamePart /** isignorepairswithinsamepart */ 
            );
            /** Add an exception. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddException
            (
                bool isExclude /** exclude or include type of the exception */,
                NXOpen::DisplayableObject * comp1 /** the first object of the pair */,
                NXOpen::DisplayableObject * comp2 /** the second object of the pair */,
                const NXString & text /** note for the exception */
            );
            /** Add an exception. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void AddException
            (
                bool isExclude /** exclude or include type of the exception */,
                NXOpen::DisplayableObject * comp1 /** the first object of the pair */,
                NXOpen::DisplayableObject * comp2 /** the second object of the pair */,
                const char * text /** note for the exception */
            );
            /** Delete an exception. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteException
            (
                NXOpen::DisplayableObject * comp1 /** the first object of the pair */,
                NXOpen::DisplayableObject * comp2 /** the second object of the pair */
            );
            /** Create an expression using the Clearance Zone naming convention.
                        The expression is intended for use in the following methods:
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::SetDefaultClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::SetDefaultClearanceZone@endlink  
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::AddPairClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::AddPairClearanceZone@endlink  
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::AddObjectClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::AddObjectClearanceZone@endlink   @return  the new expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * CreateClearanceZoneExpression
            (
                const NXString & rhsExpression /** the text for the expression */
            );
            /** Create an expression using the Clearance Zone naming convention.
                        The expression is intended for use in the following methods:
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::SetDefaultClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::SetDefaultClearanceZone@endlink  
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::AddPairClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::AddPairClearanceZone@endlink  
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::AddObjectClearanceZone NXOpen::Assemblies::ClearanceAnalysisBuilder::AddObjectClearanceZone@endlink   @return  the new expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            NXOpen::Expression * CreateClearanceZoneExpression
            (
                const char * rhsExpression /** the text for the expression */
            );
            /** Set the expression as the default Clearance Zone. 
                        Create the expression using @link CreateClearanceZoneExpression CreateClearanceZoneExpression@endlink  
                        if the Clearance Zone expression naming convention is desired. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultClearanceZone
            (
                NXOpen::Expression * expression /** the expression */
            );
            /** Get the default Clearance Zone expression. 
                        If there is no expression set previously, a NULL will be returned.  @return  the expression 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * GetDefaultClearanceZone
            (
            );
            /** Add a Clearance Zone between a pair of objects. 
                        Create the expression using @link CreateClearanceZoneExpression CreateClearanceZoneExpression@endlink  
                        if the Clearance Zone expression naming convention is desired. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddPairClearanceZone
            (
                NXOpen::DisplayableObject * object1 /** the first object */,
                NXOpen::DisplayableObject * object2 /** the second object */,
                NXOpen::Expression * expression /** the expression */
            );
            /** Inquire the Clearance Zone for a specific pair of objects.  Both objects
                        must be members of the Clearance Set.  The source parameter tells where the 
                        clearance zone comes from.  The clearance zone could be the greater of the zones 
                        from object 1 or 2 (@link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceObject1 NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceObject1@endlink 
                        or @link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceObject2 NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceObject2@endlink .
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourcePair NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourcePair@endlink 
                        means this pair has its own explicit clearance zone. 
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefault NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefault@endlink  means the default clearance zone is used..  @return  the source of the clearance zone 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSource GetPairClearanceZone
            (
                NXOpen::DisplayableObject * object1 /** the first object */,
                NXOpen::DisplayableObject * object2 /** the second object */,
                NXOpen::Expression ** expression /** the corresponding expression */
            );
            /** Delete an existing Clearance Zone between the given pair of objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeletePairClearanceZone
            (
                NXOpen::DisplayableObject * object1 /** the first object */,
                NXOpen::DisplayableObject * object2 /** the second object */
            );
            /**
                      Inquires if an object pair is to be included in the analysis. Both objects
                      must be solid bodies or facet models that are members of the
                      clearance analysis data set. If the pair is to be analyzed, the includeIt
                      is returned as TRUE. The reason parameter signifies why the pair is
                      included or excluded.
                      The text parameter is only returned for the @link NXOpen::Assemblies::ClearanceAnalysisBuilder::PairExcludedReasonUserDefined NXOpen::Assemblies::ClearanceAnalysisBuilder::PairExcludedReasonUserDefined@endlink  reason.
                     @return  the flag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetIsPairIncluded
            (
                NXOpen::DisplayableObject * object1 /** the first object */,
                NXOpen::DisplayableObject * object2 /** the second object */,
                NXOpen::Assemblies::ClearanceAnalysisBuilder::PairExcludedReason* reason /** the reason */,
                NXString* text /** the text */
            );
            /** Add a Clearance Zone around an object.
                        Create the expression using @link CreateClearanceZoneExpression CreateClearanceZoneExpression@endlink  
                        if the Clearance Zone expression naming convention is desired. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddObjectClearanceZone
            (
                NXOpen::DisplayableObject * object /** the object */,
                NXOpen::Expression * expression /** the expression */
            );
            /**  Inquire the Clearance Zone assigned to a given object.  The object must be
                        a member of the dataset.  The expression, the distance, and the source 
                        are the outputs.  If no expression has ever been set, the part of the given object is 
                        checked for a Clearance Zone expression, if none is found, NULL will be returned
                        for the expression. Interpret its value as 0.0 (this is the default value). The
                        source parameter tells where the clearance zone comes from.
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefined NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefined@endlink  specifies 
                        that the object has its own Clearance Zone.  
                        @link NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefault NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSourceDefault@endlink  means the 
                        default clearance zone is used.
                     @return  the source of the clearance zone 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::ClearanceZoneSource GetObjectClearanceZone
            (
                NXOpen::DisplayableObject * object /** the object */,
                NXOpen::Expression ** expression /** the expression */
            );
            /** Delete an existing Clearance Zone from around an object. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteObjectClearanceZone
            (
                NXOpen::DisplayableObject * object /** the object */
            );
            /**Returns  the setting to determine if interference geometry should be saved. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool SaveInterferenceGeometry
            (
            );
            /**Sets  the setting to determine if interference geometry should be saved. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSaveInterferenceGeometry
            (
                bool saveInterferenceGeometry /** saveinterferencegeometry */ 
            );
            /**Returns  the layer for interference geometry. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int Layer
            (
            );
            /**Sets  the layer for interference geometry. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the color of the interference geometry. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * InterferenceColor
            (
            );
            /**Sets  the color of the interference geometry. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetInterferenceColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the setting for the clearance calculation method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodType CalculationMethod
            (
            );
            /**Sets  the setting for the clearance calculation method. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCalculationMethod
            (
                NXOpen::Assemblies::ClearanceAnalysisBuilder::CalculationMethodType calculateMethod /** calculatemethod */ 
            );
            /**Returns  the setting to determine whether penetration depth should be calculated. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsCalculatePenetrationDepth
            (
            );
            /**Sets  the setting to determine whether penetration depth should be calculated. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCalculatePenetrationDepth
            (
                bool isCalculatePenetrationDepth /** iscalculatepenetrationdepth */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
