#ifndef NXOpen_MECHANICALROUTING_CABLEWAYNEARNODE_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_CABLEWAYNEARNODE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_CablewayNearNode.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class CablewayNearNode;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    namespace Routing
    {
        class MultiPort;
    }
    class SmartObject;
    namespace MechanicalRouting
    {
        class _CablewayNearNodeBuilder;
        class CablewayNearNodeImpl;
        /** The Cableway Near Node class maintains the relationship between a device and the
                @link Routing::ControlPoint Routing::ControlPoint@endlink s that are near to the device.
                Use the @link NXOpen::MechanicalRouting::CablewayNearNodeCollection NXOpen::MechanicalRouting::CablewayNearNodeCollection@endlink 
                to create a new Cableway Near Node object.
                You can use either a @link Assemblies::Component Assemblies::Component@endlink  to represent the device or a
                @link Routing::MultiPort Routing::MultiPort@endlink , but not both.
                 <br> To create an instance of this class use @link NXOpen::MechanicalRouting::CablewayNearNodeCollection NXOpen::MechanicalRouting::CablewayNearNodeCollection@endlink   <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  CablewayNearNode : public NXOpen::NXObject
        {
            private: CablewayNearNodeImpl * m_cablewaynearnode_impl;
            private: friend class  _CablewayNearNodeBuilder;
            protected: CablewayNearNode();
            public: ~CablewayNearNode();
            /**Returns  the device's @link Assemblies::Component Assemblies::Component@endlink . 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: NXOpen::Assemblies::Component * Device
            (
            );
            /**Sets  the device's @link Assemblies::Component Assemblies::Component@endlink . 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: void SetDevice
            (
                NXOpen::Assemblies::Component * device /** device */ 
            );
            /**Returns  the device's @link Routing::MultiPort Routing::MultiPort@endlink . 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: NXOpen::Routing::MultiPort * Multiport
            (
            );
            /**Sets  the device's @link Routing::MultiPort Routing::MultiPort@endlink . 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: void SetMultiport
            (
                NXOpen::Routing::MultiPort * multiport /** multiport */ 
            );
            /** Gets the @link Routing::ControlPoint Routing::ControlPoint@endlink  or @link Point Point@endlink 
                        selected as near node for the device. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: std::vector<NXOpen::SmartObject *> GetNodes
            (
            );
            /** Sets the @link Routing::ControlPoint Routing::ControlPoint@endlink  or @link Point Point@endlink 
                        selected as near node for the device. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: void SetNodes
            (
                const std::vector<NXOpen::SmartObject *> & nodes /** nodes */ 
            );
            /** Gets the distances between the @link Routing::ControlPoint Routing::ControlPoint@endlink  or @link Point Point@endlink 
                        and the device. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: std::vector<double> GetDistances
            (
            );
            /** Gets the distances between the @link Routing::ControlPoint Routing::ControlPoint@endlink  or @link Point Point@endlink 
                        and the device. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_cabling ("Routing Cabling") */
            public: void SetDistances
            (
                const std::vector<double> & distances /** distances */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
