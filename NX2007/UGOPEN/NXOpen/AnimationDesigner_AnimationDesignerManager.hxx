#ifndef NXOpen_ANIMATIONDESIGNER_ANIMATIONDESIGNERMANAGER_HXX_INCLUDED
#define NXOpen_ANIMATIONDESIGNER_ANIMATIONDESIGNERMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AnimationDesigner_AnimationDesignerManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AnimationDesigner_InverseKinematicsBuilder.hxx>
#include <NXOpen/AnimationDesigner_Nav_Solution.hxx>
#include <NXOpen/AnimationDesigner_PreferencesBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libanimationdesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AnimationDesigner
    {
        class AnimationDesignerManager;
    }
    class Session;
    namespace AnimationDesigner
    {
        class AnimatedCameraCollection;
    }
    namespace AnimationDesigner
    {
        class AnimatedColorCollection;
    }
    namespace AnimationDesigner
    {
        class AnimatedExplodeCollection;
    }
    namespace AnimationDesigner
    {
        class AnimatedVisibilityCollection;
    }
    namespace AnimationDesigner
    {
        class BondJointCollection;
    }
    namespace AnimationDesigner
    {
        class ConstraintConversionBuilder;
    }
    namespace AnimationDesigner
    {
        class Contact;
    }
    namespace AnimationDesigner
    {
        class ContactCollection;
    }
    namespace AnimationDesigner
    {
        class CurveOnCurveJointCollection;
    }
    namespace AnimationDesigner
    {
        class CylindricalJointCollection;
    }
    namespace AnimationDesigner
    {
        class ExportTraceBuilder;
    }
    namespace AnimationDesigner
    {
        class FixedJointCollection;
    }
    namespace AnimationDesigner
    {
        class GearCollection;
    }
    namespace AnimationDesigner
    {
        class InverseKinematicsBuilder;
    }
    namespace AnimationDesigner
    {
        class InverseKinematicsCollection;
    }
    namespace AnimationDesigner
    {
        class JointJoggerCollection;
    }
    namespace AnimationDesigner
    {
        class MeasureCollection;
    }
    namespace AnimationDesigner
    {
        class MechanicalCamCollection;
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class Container;
        }
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class ContainerCollection;
        }
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class Solution;
        }
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class SolutionCollection;
        }
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class SubFolder;
        }
    }
    namespace AnimationDesigner
    {
        namespace Nav
        {
            class SubFolderCollection;
        }
    }
    namespace AnimationDesigner
    {
        class PathConstraintJointCollection;
    }
    namespace AnimationDesigner
    {
        class PlanarJointCollection;
    }
    namespace AnimationDesigner
    {
        class PointOnCurveJointCollection;
    }
    namespace AnimationDesigner
    {
        class PositionMotorCollection;
    }
    namespace AnimationDesigner
    {
        class PreferencesBuilder;
    }
    namespace AnimationDesigner
    {
        class RackPinionCollection;
    }
    namespace AnimationDesigner
    {
        class RevoluteJointCollection;
    }
    namespace AnimationDesigner
    {
        class RigidGroup;
    }
    namespace AnimationDesigner
    {
        class RigidGroupCollection;
    }
    namespace AnimationDesigner
    {
        class ScrewJointCollection;
    }
    namespace AnimationDesigner
    {
        class SliderJointCollection;
    }
    namespace AnimationDesigner
    {
        class SpeedMotorCollection;
    }
    namespace AnimationDesigner
    {
        class SphericalJointCollection;
    }
    namespace AnimationDesigner
    {
        class Tracer;
    }
    namespace AnimationDesigner
    {
        class TracerCollection;
    }
    namespace Facet
    {
        class FacetedBody;
    }
    class NXObject;
    class Part;
    namespace AnimationDesigner
    {
        class AnimationDesignerManagerImpl;
        /** Represents an object to manage Animation Designer application objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class ANIMATIONDESIGNEROPENCPPEXPORT  AnimationDesignerManager
        {
            /**  @brief  Represents create interference type.  

              */
            public: enum JaAnimationDesignerInterferenceType
            {
                JaAnimationDesignerInterferenceTypeHighlight/** Highlight  */,
                JaAnimationDesignerInterferenceTypeShowCurve/** Show Intersection Curve */
            };

            /**  @brief  Represents create envelope mode.  

              */
            public: enum JaAnimationDesignerEnvelopeMode
            {
                JaAnimationDesignerEnvelopeModeWork/** work mode  */,
                JaAnimationDesignerEnvelopeModeTest/** auto/unit test mode */
            };

            /**  @brief  Represents display color option.  

              */
            public: enum JaAnimationDesignerDisplayColorOption
            {
                JaAnimationDesignerDisplayColorOptionShowRigid/** show rigid group color */,
                JaAnimationDesignerDisplayColorOptionClearRigid/** clear rigid group color */,
                JaAnimationDesignerDisplayColorOptionShowExplode/** show explode color */,
                JaAnimationDesignerDisplayColorOptionClearExplode/** clear explode color */,
                JaAnimationDesignerDisplayColorOptionShowVisibility/** show visibility color */,
                JaAnimationDesignerDisplayColorOptionClearVisibility/** clear visibility color */,
                JaAnimationDesignerDisplayColorOptionShowMotor/** show explode color */,
                JaAnimationDesignerDisplayColorOptionClearMotor/** clear explode color */
            };

            private: AnimationDesignerManagerImpl * m_animationdesignermanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AnimationDesignerManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static AnimationDesignerManager* theAnimationDesignerManager;
            /** Returns the AnimationDesignerManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static AnimationDesignerManager* GetAnimationDesignerManager(NXOpen::Session *owner);
            public: ~AnimationDesignerManager();
            /** Renames the physics object for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetName
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * physicsObject /** physics object */ ,
                const NXString & name /** the new name */
            );
            /** Renames the physics object for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void SetName
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * physicsObject /** physics object */ ,
                const char * name /** the new name */
            );
            /** Exports the PLMXML from Animation Designer in teamcenter. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ExportPlmxmlInTeamcenter
            (
            );
            /** Imports the PLMXML for Animation Designer in teamcenter. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ImportPlmxmlInTeamcenter
            (
            );
            /** Exports the PLMXML from Animation Designer in native. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ExportPlmxmlInNative
            (
                const NXString & dirName /** the plmxml dir name */,
                const NXString & configFileName /** the config file name */,
                bool reportWind /** reportwind */ 
            );
            /** Exports the PLMXML from Animation Designer in native. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void ExportPlmxmlInNative
            (
                const char * dirName /** the plmxml dir name */,
                const char * configFileName /** the config file name */,
                bool reportWind /** reportwind */ 
            );
            /** Imports the PLMXML for Animation Designer in native. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ImportPlmxmlInNative
            (
                const NXString & fileName /** the plmxml file name */,
                bool reportWind /** reportwind */ 
            );
            /** Imports the PLMXML for Animation Designer in native. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void ImportPlmxmlInNative
            (
                const char * fileName /** the plmxml file name */,
                bool reportWind /** reportwind */ 
            );
            /** Creates the preferences builder for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::PreferencesBuilder * CreatePreferenceBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates the solution for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::Nav::Solution * CreateSolution
            (
                NXOpen::Part * part /** part */ 
            );
            /** Gets the active solution for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::Nav::Solution * GetActiveSolution
            (
                NXOpen::Part * part /** part */ 
            );
            /** Sets the active solution for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetActiveSolution
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AnimationDesigner::Nav::Solution * studyFolder /** studyfolder */ 
            );
            /** Clears the auto solve data for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void AutoSolveClear
            (
                NXOpen::Part * part /** part */ 
            );
            /** Records the auto solve data for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void AutoSolveRecord
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * physicsObject /** physics object */ ,
                const std::vector<double> & matrix /** matrix */ 
            );
            /** Records the auto solve data for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void AutoSolve
            (
                NXOpen::Part * part /** part */ 
            );
            /** Indicates whether to freeze the animation position to do modeling operations. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ModelingInAnimationContext
            (
                NXOpen::Part * part /** part */ ,
                bool bFreeze /** bfreeze */ 
            );
            /** Creates a @link AnimationDesigner::ConstraintConversionBuilder AnimationDesigner::ConstraintConversionBuilder@endlink  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::ConstraintConversionBuilder * CreateConstraintConversionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Update the motor index for Animation Designer. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void UpdateMotorIndex
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * motor /** motor */ ,
                int index /** index */ 
            );
            /** Creates a @link AnimationDesigner::InverseKinematicsBuilder AnimationDesigner::InverseKinematicsBuilder@endlink  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::InverseKinematicsBuilder * CreateInverseKinematicsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Sets the display or hide state of folder object in OM class. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetSubfolderDisplayOrHide
            (
                NXOpen::NXObject * folderObject /** folder object */ ,
                bool bDisplay /** bdisplay */ 
            );
            /** Updates the display or hide state of folder object in OM class and icons in 3D graphic. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void UpdateSubfolderAndIconsDisplayState
            (
                NXOpen::NXObject * folderObject /** folder object */ ,
                bool bDisplay /** bdisplay */ ,
                bool bHandleIcons /** bhandleicons */ 
            );
            /** Creates an Envelope object. 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use JA_MOTION_DESIGNER_MANAGER_CreateEnvelopes instead. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use JA_MOTION_DESIGNER_MANAGER_CreateEnvelopes instead.") NXOpen::Facet::FacetedBody * CreateEnvelope
            (
                NXOpen::NXObject * physicsObject /** physics object */ ,
                NXOpen::NXObject * geometry /** geometry */ ,
                double tolerance /** tolerance */ ,
                NXOpen::AnimationDesigner::AnimationDesignerManager::JaAnimationDesignerEnvelopeMode mode /** mode */ ,
                int translucency /** translucency */ 
            );
            /** Creates Envelope objects. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void CreateEnvelopes
            (
                const std::vector<NXOpen::NXObject *> & physicsObject /** physicsobject */ ,
                const std::vector<NXOpen::NXObject *> & geometry /** geometry */ ,
                const std::vector<int> & physicsToGeometry /** physicstogeometry */ ,
                double tolerance /** tolerance */ ,
                NXOpen::AnimationDesigner::AnimationDesignerManager::JaAnimationDesignerEnvelopeMode mode /** mode */ ,
                int translucency /** translucency */ ,
                std::vector<NXOpen::Facet::FacetedBody *> & envelopeList /** envelopelist */ 
            );
            /** Creates an Interference object. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void CreateInterference
            (
                NXOpen::Facet::FacetedBody * firstEnvelope /** firstenvelope */ ,
                NXOpen::Facet::FacetedBody * secondEnvelope /** secondenvelope */ ,
                NXOpen::AnimationDesigner::AnimationDesignerManager::JaAnimationDesignerInterferenceType outputType /** outputtype */ 
            );
            /** Blanks the physics object for Animation Designer. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void WriteBlankStatus
            (
                NXOpen::NXObject * physicsObject /** physics object */ ,
                int blank /** Blank status: 0 - Unblanked, 1 - Blanked */
            );
            /** Frees the Animation Designer reserved license for autotest. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ResetReservedLicense
            (
                const NXString & licenseModule /** the license module */
            );
            /** Frees the Animation Designer reserved license for autotest. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void ResetReservedLicense
            (
                const char * licenseModule /** the license module */
            );
            /** Delete one spot in snapshot. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void EditSnapshotDeleteTime
            (
                NXOpen::NXObject * physicsObject /** snapshot tag */,
                double time /** delete time */
            );
            /**Add one spot in snapshot. Please simulation first to ensuer AutoSolveRecordData is not empty 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void EditSnapshotAddTime
            (
                NXOpen::NXObject * physicsObject /** snapshot tag */,
                double time /** add time */,
                bool isRecordManagerMode /** isrecordmanagermode */ 
            );
            /**Simulation first to ensure AutoSolveRecordData is not empty , then create a snapshot.  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void CreateSnapshot
            (
                double time /** add time */,
                bool isRecordManagerMode /** isrecordmanagermode */ 
            );
            /**Show or clear physics color.  
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ApplyPhysicsColor
            (
                NXOpen::AnimationDesigner::AnimationDesignerManager::JaAnimationDesignerDisplayColorOption displayOption /** displayoption */ 
            );
            /** Creates a NXOpen.AnimationDesigner.ExportTraceBuilder object.  @return  ExportTraceBuilder
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::ExportTraceBuilder * CreateExportTraceBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AnimationDesigner::Tracer * tracer /** @link NXOpen::AnimationDesigner::Tracer NXOpen::AnimationDesigner::Tracer@endlink  to be exported */
            );
            /** Sets a collision threshold. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetCollisionThreshold
            (
                NXOpen::Part * part /** part */ ,
                double threshold /** threshold */ 
            );
            /** Ignores a collision interfered node. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void IgnoreCollisionInterferedNode
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * firstGeometry /** firstgeometry */ ,
                NXOpen::NXObject * secondGeometry /** secondgeometry */ 
            );
            /** Restores a collision ignored node. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void RestoreCollisionIgnoredNode
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * firstGeometry /** firstgeometry */ ,
                NXOpen::NXObject * secondGeometry /** secondgeometry */ 
            );
            /** Creates a container in navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void CreateContainer
            (
                NXOpen::Part * part /** part */ ,
                const NXString & containerName /** the container name */
            );
            /** Creates a container in navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void CreateContainer
            (
                NXOpen::Part * part /** part */ ,
                const char * containerName /** the container name */
            );
            /** Reorders containers in navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void ReorderContainers
            (
                NXOpen::AnimationDesigner::Nav::Solution * parent /** parent tag */,
                const std::vector<NXOpen::AnimationDesigner::Nav::Container *> & objects /** The containers to be moved */,
                NXOpen::AnimationDesigner::Nav::Container * target /** target container tag */
            );
            /** Moves objects to container in navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void MovePhysicsToContainer
            (
                NXOpen::AnimationDesigner::Nav::Solution * solutionTag /** solutiontag */ ,
                const std::vector<NXOpen::NXObject *> & objects /** The physics objects to be moved */,
                NXOpen::AnimationDesigner::Nav::Container * target /** target container tag */
            );
            /** Moves objects to back to default folder in navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void MovePhysicsToSubfolder
            (
                NXOpen::AnimationDesigner::Nav::Solution * solutionTag /** solutiontag */ ,
                const std::vector<NXOpen::NXObject *> & objects /** The physics objects to be moved */,
                NXOpen::AnimationDesigner::Nav::SubFolder * target /** target subfolder tag */
            );
            /** Moves contact face objects to their rigid parent. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void MoveContactFacesToRigid
            (
                NXOpen::AnimationDesigner::Nav::Solution * solutionTag /** solutiontag */ ,
                const std::vector<NXOpen::AnimationDesigner::Contact *> & objects /** The contacts to be moved */,
                NXOpen::AnimationDesigner::RigidGroup * target /** target rigid */
            );


            /** Returns the @link NXOpen::AnimationDesigner::Nav::SolutionCollection NXOpen::AnimationDesigner::Nav::SolutionCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::Nav::SolutionCollection *Solutions();
            /** Returns the @link NXOpen::AnimationDesigner::RigidGroupCollection NXOpen::AnimationDesigner::RigidGroupCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::RigidGroupCollection *RigidGroups();
            /** Returns the @link NXOpen::AnimationDesigner::ContactCollection NXOpen::AnimationDesigner::ContactCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::ContactCollection *Contacts();
            /** Returns the @link NXOpen::AnimationDesigner::RevoluteJointCollection  NXOpen::AnimationDesigner::RevoluteJointCollection @endlink  belonging to this part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::RevoluteJointCollection *RevoluteJoints();
            /** Returns the @link NXOpen::AnimationDesigner::SliderJointCollection  NXOpen::AnimationDesigner::SliderJointCollection @endlink  belonging to this part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::SliderJointCollection *SliderJoints();
            /** Returns the @link NXOpen::AnimationDesigner::CylindricalJointCollection NXOpen::AnimationDesigner::CylindricalJointCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::CylindricalJointCollection *CylindricalJoints();
            /** Returns the @link NXOpen::AnimationDesigner::SphericalJointCollection  NXOpen::AnimationDesigner::SphericalJointCollection @endlink  belonging to this part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::SphericalJointCollection *SphericalJoints();
            /** Returns the @link NXOpen::AnimationDesigner::FixedJointCollection NXOpen::AnimationDesigner::FixedJointCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::FixedJointCollection *FixedJoints();
            /** Returns the @link NXOpen::AnimationDesigner::GearCollection NXOpen::AnimationDesigner::GearCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::GearCollection *Gears();
            /** Returns the @link NXOpen::AnimationDesigner::RackPinionCollection NXOpen::AnimationDesigner::RackPinionCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::RackPinionCollection *RackPinions();
            /** Returns the @link NXOpen::AnimationDesigner::PositionMotorCollection NXOpen::AnimationDesigner::PositionMotorCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::PositionMotorCollection *PositionMotors();
            /** Returns the @link NXOpen::AnimationDesigner::SpeedMotorCollection NXOpen::AnimationDesigner::SpeedMotorCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::SpeedMotorCollection *SpeedMotors();
            /** Returns the @link NXOpen::AnimationDesigner::MeasureCollection NXOpen::AnimationDesigner::MeasureCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::MeasureCollection *Measures();
            /** Returns the @link NXOpen::AnimationDesigner::PointOnCurveJointCollection NXOpen::AnimationDesigner::PointOnCurveJointCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::PointOnCurveJointCollection *PointOnCurveJoints();
            /** Returns the @link NXOpen::AnimationDesigner::CurveOnCurveJointCollection NXOpen::AnimationDesigner::CurveOnCurveJointCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::CurveOnCurveJointCollection *CurveOnCurveJoints();
            /** Returns the @link NXOpen::AnimationDesigner::MechanicalCamCollection NXOpen::AnimationDesigner::MechanicalCamCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::MechanicalCamCollection *MechanicalCams();
            /** Returns the @link NXOpen::AnimationDesigner::ScrewJointCollection  NXOpen::AnimationDesigner::ScrewJointCollection @endlink  belonging to this application. 
             <br>  Created in NX12.0.2.  <br>  
            */
            public: NXOpen::AnimationDesigner::ScrewJointCollection *ScrewJoints();
            /** Returns the @link NXOpen::AnimationDesigner::PlanarJointCollection NXOpen::AnimationDesigner::PlanarJointCollection@endlink  belonging to this application. 
             <br>  Created in NX12.0.2.  <br>  
            */
            public: NXOpen::AnimationDesigner::PlanarJointCollection *PlanarJoints();
            /** Returns the @link NXOpen::AnimationDesigner::AnimatedVisibilityCollection NXOpen::AnimationDesigner::AnimatedVisibilityCollection@endlink  belonging to this application. 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::AnimatedVisibilityCollection *AnimatedVisibilities();
            /** Returns the @link NXOpen::AnimationDesigner::AnimatedCameraCollection NXOpen::AnimationDesigner::AnimatedCameraCollection@endlink  belonging to this application. 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::AnimatedCameraCollection *AnimatedCameras();
            /** Returns the @link NXOpen::AnimationDesigner::AnimatedExplodeCollection NXOpen::AnimationDesigner::AnimatedExplodeCollection@endlink  belonging to this application. 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::AnimatedExplodeCollection *AnimatedExplodes();
            /** Returns the @link NXOpen::AnimationDesigner::AnimatedColorCollection NXOpen::AnimationDesigner::AnimatedColorCollection@endlink  belonging to this application. 
             <br>  Created in NX1953.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::AnimatedColorCollection *AnimatedColors();
            /** Returns the @link NXOpen::AnimationDesigner::JointJoggerCollection NXOpen::AnimationDesigner::JointJoggerCollection@endlink  belonging to this application. 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::JointJoggerCollection *JointJoggers();
            /** Returns the @link NXOpen::AnimationDesigner::InverseKinematicsCollection NXOpen::AnimationDesigner::InverseKinematicsCollection@endlink  belonging to this application. 
             <br>  Created in NX1899.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::InverseKinematicsCollection *InverseKinematics();
            /** Returns the @link NXOpen::AnimationDesigner::PathConstraintJointCollection NXOpen::AnimationDesigner::PathConstraintJointCollection@endlink  belonging to this application. 
             <br>  Created in NX1953.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::PathConstraintJointCollection *PathConstraintJoints();
            /** Returns the @link NXOpen::AnimationDesigner::TracerCollection NXOpen::AnimationDesigner::TracerCollection@endlink  belonging to this application. 
             <br>  Created in NX1980.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::TracerCollection *Tracers();
            /** Returns the @link NXOpen::AnimationDesigner::BondJointCollection  NXOpen::AnimationDesigner::BondJointCollection @endlink  belonging to this part 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::BondJointCollection *BondJoints();
            /** Returns the @link NXOpen::AnimationDesigner::Nav::ContainerCollection NXOpen::AnimationDesigner::Nav::ContainerCollection@endlink  belonging to this application. 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::Nav::ContainerCollection *Containers();
            /** Returns the @link NXOpen::AnimationDesigner::Nav::SubFolderCollection NXOpen::AnimationDesigner::Nav::SubFolderCollection@endlink  belonging to this application. 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public: NXOpen::AnimationDesigner::Nav::SubFolderCollection *SubFolders();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
