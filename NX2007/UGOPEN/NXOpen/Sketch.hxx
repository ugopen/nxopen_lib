#ifndef NXOpen_SKETCH_HXX_INCLUDED
#define NXOpen_SKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Sketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Sketch;
    class Arc;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    class DisplayableObject;
    class ErrorList;
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class INXObject;
    class IProfile;
    class IReferenceAxis;
    class ISurface;
    class NXMatrix;
    class NXObject;
    namespace Preferences
    {
        class SketchPreferences;
    }
    class SketchConstraint;
    class SketchDimensionalConstraint;
    class SketchGeometricConstraint;
    class SketchHelpedGeometricConstraint;
    class SketchRelation;
    class SketchTangentConstraint;
    class SketchVirtualPoint;
    class SmartObject;
    class Spline;
    class View;
    class _SketchBuilder;
    class SketchImpl;
    /** Represents a sketch  <br> Use the @link NXOpen::SketchCollection NXOpen::SketchCollection@endlink  class to create a sketch.  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Sketch : public NXOpen::DisplayableObject, public virtual NXOpen::IProfile
    {
        /** Represents the status of the sketch */
        public: enum Status
        {
            StatusUnknown/** unknown */ ,
            StatusNotEvaluated/** not evaluated */ ,
            StatusUnderConstrained/** More constraints are needed to fully constrain the sketch */,
            StatusWellConstrained/** The sketch is fully constrained */,
            StatusOverConstrained/** The sketch has more constraints than is needed */,
            StatusInconsistentlyConstrained/** The sketch has conflicting constraints */
        };

        /** Used to indicate whether to reorient the view when the sketch is activated */
        public: enum ViewReorient
        {
            ViewReorientFalse/** Do not reorient view to sketch */,
            ViewReorientTrue/** Reorient view to sketch */
        };

        /** Used to indicate how much the updating should occur */
        public: enum UpdateLevel
        {
            UpdateLevelSketchOnly/** Only update the sketch */,
            UpdateLevelModel/** Update the full model and the sketch */
        };

        /** Indicates if the infer constraints will be created or not */
        public: enum CreateInferConstraintSetting
        {
            CreateInferConstraintSettingOn/** Create infer constraints */,
            CreateInferConstraintSettingOff/** Dont create infer constraints */
        };

        /** Used in ConstraintGeometry to indicate what type of point, if any, the geometry is */
        public: enum ConstraintPointType
        {
            ConstraintPointTypeNone/** The geometry is not a point */,
            ConstraintPointTypeStartVertex/** Start vertex (e.g. the start point of a line) */,
            ConstraintPointTypeEndVertex/** End vertex (e.g. the end point of a line) */,
            ConstraintPointTypeArcCenter/** Center of a circle, arc, or ellipse */,
            ConstraintPointTypeSplineDefiningPoint/** A defining point of a spline. */,
            ConstraintPointTypeAnchor/** The anchor point of a conic */,
            ConstraintPointTypeSplinePole/** The control pole of a spline */,
            ConstraintPointTypeMidVertex/** The mid vertex of a line or an arc */
        };

         /** Used by the create geometric constraint methods to indicate what geometry
            the constraint should be applied to.
             @code 
            Examples:

            Assume in these examples that you have a Line object in a variable named line1 and a
            Spline object in a variable named spline1.

            1. To specify an entire line, set
            Geometry = line1
            PointType = None
            SplineDefiningPointIndex = 0

            2. To specify the start vertex of a line, set
            Geometry = line1
            PointType = StartVertex
            SplineDefiningPointIndex = 0

            3. To specify the third defining point of a spline
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 3

            4. To specify the first defining point of a spline
            Geometry = spline1
            PointType = StartVertex
            SplineDefiningPointIndex = 0
                -- OR --
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 1

            Notes on splines:
            - spline defining points are numbered starting from 1
            - to specify the first [or last] defining point of a spline, you can either
            use PointType = SplineDefiningPoint and set SplineDefiningPointIndex
            or use PointType = StartVertex [or EndVertex]
            - SplineDefiningPointIndex is only used when PointType = SplineDefiningPoint
             @endcode 
            */
        public:
        struct ConstraintGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** point type */ NXOpen::Sketch::ConstraintPointType PointType;
            public: /** Ignored unless PointType is SplineDefiningPoint.
                                                     Spline control points are numbered starting from 1 */int SplineDefiningPointIndex;
            public: ConstraintGeometry() :
                Geometry(),
                PointType((NXOpen::Sketch::ConstraintPointType)0),
                SplineDefiningPointIndex()
            {
            }
            /** Constructor for the ConstraintGeometry struct. */ 
            public: ConstraintGeometry(NXOpen::NXObject * geometryInitial /** geometry */ , 
                    NXOpen::Sketch::ConstraintPointType pointTypeInitial /** point type */ , 
                    int splineDefiningPointIndexInitial /** Ignored unless PointType is SplineDefiningPoint.
                                                             Spline control points are numbered starting from 1 */) :
                Geometry(geometryInitial),
                PointType(pointTypeInitial),
                SplineDefiningPointIndex(splineDefiningPointIndexInitial)
            {
            }
        };

        /** 
            Sketch operations can involve an entire geometric object, such as a @link NXOpen::Line NXOpen::Line@endlink , or 
            a control point of the geometry, such as a start point or center point. 
            */
        public: enum PointType
        {
            PointTypeNone/** none */ ,
            PointTypeStartPoint/** start point */ ,
            PointTypeEndPoint/** end point */ ,
            PointTypeCenter/** center */ ,
            PointTypeSplineDefiningPoint/** spline defining point */ ,
            PointTypeAnchor/** anchor */ ,
            PointTypeSplinePole/** spline pole */ ,
            PointTypeMidPoint/** mid point */ ,
            PointTypeQuadrant/** quadrant */ 
        };

         /** 
            Sketch operations can use an entire geometry, such as a @link NXOpen::Line NXOpen::Line@endlink , 
            or a control point of the geometry, such as a start point or center point.
            */
        public:
        struct SketchGeometry
        {
            public: /** Sketch geometry of type @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Point NXOpen::Point@endlink  */NXOpen::NXObject * Geometry;
            public: /** If set to @link NXOpen::Sketch::PointTypeNone NXOpen::Sketch::PointTypeNone@endlink , the entire geometry is used. 
                                                       Otherwise the appropriate control point of the geometry is used. */NXOpen::Sketch::PointType PointType;
            public: /** For PointType set to @link NXOpen::Sketch::PointTypeSplineDefiningPoint NXOpen::Sketch::PointTypeSplineDefiningPoint@endlink  or
                                              @link NXOpen::Sketch::PointTypeSplinePole NXOpen::Sketch::PointTypeSplinePole@endlink , this index identifies which point
                                              or pole along the @link NXOpen::Spline NXOpen::Spline@endlink .  A value of 0 is the same as using
                                              @link NXOpen::Sketch::PointTypeStartPoint NXOpen::Sketch::PointTypeStartPoint@endlink . 
                                              For PointType set to @link NXOpen::Sketch::PointTypeQuadrant NXOpen::Sketch::PointTypeQuadrant@endlink , a value of 0 
                                              should be used for a closed @link NXOpen::Arc NXOpen::Arc@endlink  or @link NXOpen::Ellipse NXOpen::Ellipse@endlink  to indicate
                                              the major radius point.  A value of 1 indicates an @link NXOpen::Ellipse NXOpen::Ellipse@endlink  minor radius. */int PointIndex;
            public: SketchGeometry() :
                Geometry(),
                PointType((NXOpen::Sketch::PointType)0),
                PointIndex()
            {
            }
            /** Constructor for the SketchGeometry struct. */ 
            public: SketchGeometry(NXOpen::NXObject * geometryInitial /** Sketch geometry of type @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Point NXOpen::Point@endlink  */, 
                    NXOpen::Sketch::PointType pointTypeInitial /** If set to @link NXOpen::Sketch::PointTypeNone NXOpen::Sketch::PointTypeNone@endlink , the entire geometry is used. 
                                                               Otherwise the appropriate control point of the geometry is used. */, 
                    int pointIndexInitial /** For PointType set to @link NXOpen::Sketch::PointTypeSplineDefiningPoint NXOpen::Sketch::PointTypeSplineDefiningPoint@endlink  or
                                                      @link NXOpen::Sketch::PointTypeSplinePole NXOpen::Sketch::PointTypeSplinePole@endlink , this index identifies which point
                                                      or pole along the @link NXOpen::Spline NXOpen::Spline@endlink .  A value of 0 is the same as using
                                                      @link NXOpen::Sketch::PointTypeStartPoint NXOpen::Sketch::PointTypeStartPoint@endlink . 
                                                      For PointType set to @link NXOpen::Sketch::PointTypeQuadrant NXOpen::Sketch::PointTypeQuadrant@endlink , a value of 0 
                                                      should be used for a closed @link NXOpen::Arc NXOpen::Arc@endlink  or @link NXOpen::Ellipse NXOpen::Ellipse@endlink  to indicate
                                                      the major radius point.  A value of 1 indicates an @link NXOpen::Ellipse NXOpen::Ellipse@endlink  minor radius. */) :
                Geometry(geometryInitial),
                PointType(pointTypeInitial),
                PointIndex(pointIndexInitial)
            {
            }
        };

        /** Used in @link NXOpen::Sketch::DimensionGeometry NXOpen::Sketch::DimensionGeometry@endlink  to indicate what type of
            geometry to use */
        public: enum AssocType
        {
            AssocTypeNone/** Use the entire geometric item, as opposed to a point */,
            AssocTypeStartPoint/** Start point. E.g. the start point of a line */,
            AssocTypeEndPoint/** End point. E.g. the start point of a line */,
            AssocTypeArcCenter/** Center of an arc, circle, or ellipse */,
            AssocTypeTangency/** Create the dimension tangent to the geometric item */,
            AssocTypeCurvePoint/** A point on a spline */,
            AssocTypeAnchorPoint/** The anchor of a conic */,
            AssocTypeMidpoint/** The midpoint of a curve */
        };

         /** Used in the dimension creation methods to indicate what geometry to
            create the dimension on.

             @code 
            Examples:
            1. To specify the start point of line1
            Geometry = line1
            AssocType = StartPoint
            AssocValue = 0
             @endcode 
            */
        public:
        struct DimensionGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** assoc type */ NXOpen::Sketch::AssocType AssocType;
            public: /** See table for meaning.
             @code 
            The AssocValue has the following meanings:
            AssocType           AssocValue meaning
            ----------          -------------------
            Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
            CurvePoint          the index number of the defining point of the spline(starting from 1)
            all else            not used
             @endcode 
                                     */int AssocValue;
            public: /** help point */NXOpen::Point3d HelpPoint;
            public: /** The view the geometry is dependent on, if any */NXOpen::NXObject * View;
            public: DimensionGeometry() :
                Geometry(),
                AssocType((NXOpen::Sketch::AssocType)0),
                AssocValue(),
                HelpPoint(),
                View()
            {
            }
            /** Constructor for the DimensionGeometry struct. */ 
            public: DimensionGeometry(NXOpen::NXObject * geometryInitial /** geometry */ , 
                    NXOpen::Sketch::AssocType assocTypeInitial /** assoc type */ , 
                    int assocValueInitial /** See table for meaning.
                     @code 
                    The AssocValue has the following meanings:
                    AssocType           AssocValue meaning
                    ----------          -------------------
                    Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
                    CurvePoint          the index number of the defining point of the spline(starting from 1)
                    all else            not used
                     @endcode 
                                             */, 
                    const NXOpen::Point3d &helpPointInitial /** help point */, 
                    NXOpen::NXObject * viewInitial /** The view the geometry is dependent on, if any */) :
                Geometry(geometryInitial),
                AssocType(assocTypeInitial),
                AssocValue(assocValueInitial),
                HelpPoint(helpPointInitial),
                View(viewInitial)
            {
            }
        };

        /** Used in ConstraintHelp to indicate what type of help it is */
        public: enum ConstraintGeometryHelpType
        {
            ConstraintGeometryHelpTypePoint/** point */ ,
            ConstraintGeometryHelpTypeParameter/** parameter */ 
        };

         /** Used by several constraint creation methods that need a help point or parameter
            to indicate how to create the constraint.  The manner that the help point is used
            depends on the type of constraint */
        public:
        struct ConstraintGeometryHelp
        {
            public: /** Point or Parameter */NXOpen::Sketch::ConstraintGeometryHelpType Type;
            public: /** Ignored unless type is Point */NXOpen::Point3d Point;
            public: /** Ignored unless type is Parameter.
                                      Represents a parameter, typically along a curve */double Parameter;
            public: ConstraintGeometryHelp() :
                Type((NXOpen::Sketch::ConstraintGeometryHelpType)0),
                Point(),
                Parameter()
            {
            }
            /** Constructor for the ConstraintGeometryHelp struct. */ 
            public: ConstraintGeometryHelp(NXOpen::Sketch::ConstraintGeometryHelpType typeInitial /** Point or Parameter */, 
                    const NXOpen::Point3d &pointInitial /** Ignored unless type is Point */, 
                    double parameterInitial /** Ignored unless type is Parameter.
                                              Represents a parameter, typically along a curve */) :
                Type(typeInitial),
                Point(pointInitial),
                Parameter(parameterInitial)
            {
            }
        };

        /** Represents the class of the constraint.  There are two classes of constraints: geometric and dimension */
        public: enum ConstraintClass
        {
            ConstraintClassNotConstraint/** not constraint */ ,
            ConstraintClassAny/** Used in query methods that filter by constraint class
                                                    to select both types of constraints */,
            ConstraintClassGeometric/** A non-dimension constraint */,
            ConstraintClassDimension/** A dimensional constraint */
        };

        /** Represents the type of constraint */
        public: enum ConstraintType
        {
            ConstraintTypeNoCon/** Used in query methods that filter by constraint type
                                                    to select any type of constraint */,
            ConstraintTypeFixed/** fixed */ ,
            ConstraintTypeHorizontal/** horizontal */ ,
            ConstraintTypeVertical/** vertical */ ,
            ConstraintTypeParallel/** parallel */ ,
            ConstraintTypePerpendicular/** perpendicular */ ,
            ConstraintTypeCollinear/** collinear */ ,
            ConstraintTypeEqualLength/** equal length */ ,
            ConstraintTypeEqualRadius/** equal radius */ ,
            ConstraintTypeConstantLength/** constant length */ ,
            ConstraintTypeConstantAngle/** constant angle */ ,
            ConstraintTypeCoincident/** coincident */ ,
            ConstraintTypeConcentric/** concentric */ ,
            ConstraintTypeMirror/** mirror */ ,
            ConstraintTypePointOnCurve/** point on curve */ ,
            ConstraintTypeMidpoint/** midpoint */ ,
            ConstraintTypeTangent/** tangent */ ,
            ConstraintTypeRadiusDim/** radius dim */ ,
            ConstraintTypeDiameterDim/** diameter dim */ ,
            ConstraintTypeHorizontalDim/** horizontal dim */ ,
            ConstraintTypeVerticalDim/** vertical dim */ ,
            ConstraintTypeParallelDim/** parallel dim */ ,
            ConstraintTypePerpendicularDim/** perpendicular dim */ ,
            ConstraintTypeAngularDim/** system will decide if it is major or minor */,
            ConstraintTypeReservedCon1/** Do not use */,
            ConstraintTypeReservedCon2/** Do not use */,
            ConstraintTypeReservedCon3/** Do not use */,
            ConstraintTypeReservedCon4/** Do not use */,
            ConstraintTypeReservedCon5/** Do not use */,
            ConstraintTypeReservedCon6/** Do not use */,
            ConstraintTypePointOnString/** point on string */ ,
            ConstraintTypeSlope/** slope */ ,
            ConstraintTypeUniformScaled/** uniform scaled */ ,
            ConstraintTypeNonUniformScaled/** non uniform scaled */ ,
            ConstraintTypeAssocTrim/** Limited support */,
            ConstraintTypeAssocOffset/** Limited support */,
            ConstraintTypePerimeterDim/** perimeter dim */ ,
            ConstraintTypeOffset/** offset */ ,
            ConstraintTypeNormal/** normal */ ,
            ConstraintTypePointOnLoop/** point on loop */ ,
            ConstraintTypeRecipeTrim/** recipe trim */ ,
            ConstraintTypePattern/** pattern */ ,
            ConstraintTypeMinorAngularDim/** minor angular dim */ ,
            ConstraintTypeMajorAngularDim/** major angular dim */ ,
            ConstraintTypeLastConType/** The last constraint type indicator;
                                            NOT to be used. */
        };

        /** Used by @link NXOpen::Sketch::CreateDimension NXOpen::Sketch::CreateDimension@endlink , @link NXOpen::Sketch::CreateRadialDimension NXOpen::Sketch::CreateRadialDimension@endlink 
                @link NXOpen::Sketch::CreateDiameterDimension NXOpen::Sketch::CreateDiameterDimension@endlink  and @link NXOpen::Sketch::CreatePerimeterDimension NXOpen::Sketch::CreatePerimeterDimension@endlink 
                to determine whether to create driving, constant, or reference dimension */
        public: enum DimensionOption
        {
            DimensionOptionCreateAsDriving/** Create dimension as driving   */,
            DimensionOptionCreateAsReference/** Create dimension as reference */,
            DimensionOptionCreateAsAutomatic/** Create dimension as automatic  */,
            DimensionOptionCreateAsConstant/** Create dimension as constant  */
        };

        /** Type of Auto Dimensioning rules. It should match the rule types defined in Auto Dimensioning
            engine. Auto Dimensioning rules affect how the dimensions are created by the Auto Dimensioner. The
            rules will be put in a list, the first the rule with the highest priority and the last rule with
            the lowest priority. The user can change the order of the rules in the list to persue the flavor 
            of the dimensions he wants. 
            @link NXOpen::Sketch::AutoDimensioningRuleSymmetric NXOpen::Sketch::AutoDimensioningRuleSymmetric@endlink : create symmetric dimensions if the curves are symmetric
            @link NXOpen::Sketch::AutoDimensioningRuleAdjacentAngle NXOpen::Sketch::AutoDimensioningRuleAdjacentAngle@endlink : create angles between adjacent lines 
            @link NXOpen::Sketch::AutoDimensioningRuleLength NXOpen::Sketch::AutoDimensioningRuleLength@endlink : create length dimension for lines
            @link NXOpen::Sketch::AutoDimensioningRuleHorizontalVertical NXOpen::Sketch::AutoDimensioningRuleHorizontalVertical@endlink : create horizontal and vertical dimensions 
            @link NXOpen::Sketch::AutoDimensioningRuleReferenceAxes NXOpen::Sketch::AutoDimensioningRuleReferenceAxes@endlink : create dimensions between curves and reference axes 
            */
        public: enum AutoDimensioningRule
        {
            AutoDimensioningRuleSymmetric/** Create Symmetric Dimensions */ = 1,
            AutoDimensioningRuleAdjacentAngle/** Create Adjacent Angles */,
            AutoDimensioningRuleLength/** Create Length Dimension */,
            AutoDimensioningRuleHorizontalVertical/** Create Horizontal and Vertical Dimensions */,
            AutoDimensioningRuleReferenceAxes/** Create Dimensions to Reference Axes */
        };

        /** Used by @link NXOpen::Sketch::AddGeometry NXOpen::Sketch::AddGeometry@endlink  to determine whether to treat an
            ellipse as an ellipse or generic conic when adding the curve to
            a sketch.  Treating an ellipse as a conic means that the ellipse
            will be given an anchor point.  This affects, among other things,
            how the ellipse behaves when it is dragged.

            In order for an ellipse to be treated as a conic, its
            end angle minus its start angle must be less than 180 degrees.
            */
        public: enum AddEllipseOption
        {
            AddEllipseOptionTreatAsEllipse/** treat as ellipse */ ,
            AddEllipseOptionTreatAsConic/** treat as conic */ 
        };

        /** Indicates whether the input curves should be trimmed when doing a fillet */
        public: enum TrimInputOption
        {
            TrimInputOptionFalse/** Do not trim the input curves */,
            TrimInputOptionTrue/** Trim the input curves */
        };

        /** Indicates whether the 3rd curve should be deleted when doing a 3 curve fillet */
        public: enum DeleteThirdCurveOption
        {
            DeleteThirdCurveOptionFalse/** Do not delete the 3rd curve */,
            DeleteThirdCurveOptionTrue/** Delete the 3rd curve */
        };

        /** Used in fillet to indicate whether a radius dimension should be created
            by the fillet */
        public: enum CreateDimensionOption
        {
            CreateDimensionOptionFalse/** Do not create a radius dimension */,
            CreateDimensionOptionTrue/** Create a radius dimension */
        };

        /** Indicates whether the alternate solution should be used instead of the regular solution.
                The alternate solution for an arc is the portion of the full circle that is left out of the
                regular solution.  For example, if the regular solution is an arc that goes from 0 to 45 degrees,
                the alternate solution will be an arc with the same center and origin but that goes from 45 degrees to 360.
                */
        public: enum AlternateSolutionOption
        {
            AlternateSolutionOptionFalse/** Use the regular solution */,
            AlternateSolutionOptionTrue/** Use the alternate solution */
        };

        /** Specifies the plane type used for a Sketch */
        public: enum PlaneOption
        {
            PlaneOptionInferred/** Use inferred plane */,
            PlaneOptionExistingPlane/** Use existing plane */,
            PlaneOptionNewPlane/** Use new plane      */,
            PlaneOptionNewCsys/** Use new CSYS      */
        };

        /** Used when adding a point or curve to a sketch.
            Specifies whether to infer coincident constraints between the geometry that already exists
            in the sketch and the geometry being added to the sketch.  If you choose to infer constraints,
            coincident constraints will be created if an end point of the geometry being added is at
            the same location (within system tolerance) as another end point in the sketch.
            */
        public: enum InferConstraintsOption
        {
            InferConstraintsOptionInferNoConstraints/** Do not infer constraints */,
            InferConstraintsOptionInferCoincidentConstraints/** Infer constraints */
        };

         /** This structure represents a map between the original object to be copied
            and the corresponding copied object.
            An array of these structures are returned from the API @link NXOpen::Sketch::CopyObjects NXOpen::Sketch::CopyObjects@endlink .
            */
        public:
        struct CopyObjectData
        {
            public: /** orig object */ NXOpen::NXObject * OrigObject;
            public: /** copied object */ NXOpen::NXObject * CopiedObject;
            public: CopyObjectData() :
                OrigObject(),
                CopiedObject()
            {
            }
            /** Constructor for the CopyObjectData struct. */ 
            public: CopyObjectData(NXOpen::NXObject * origObjectInitial /** orig object */ , 
                    NXOpen::NXObject * copiedObjectInitial /** copied object */ ) :
                OrigObject(origObjectInitial),
                CopiedObject(copiedObjectInitial)
            {
            }
        };

        private: SketchImpl * m_sketch_impl;
        private: friend class  _SketchBuilder;
        protected: Sketch();
        public: ~Sketch();
        /** Deletes objects from the sketch  @return  List of errors encountered during the delete 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::ErrorList * DeleteObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects to be deleted */
        );
        /**
            Reattaches a sketch.
            
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::SketchInPlaceBuilder NXOpen::SketchInPlaceBuilder@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::SketchInPlaceBuilder instead.") void Reattach
        (
            NXOpen::ISurface * attachmentPlane /** A face or datum plane that the sketch will be attached to. Must be planar. */,
            NXOpen::IReferenceAxis * referenceAxis /** Can be a datum axis, edge, datum plane, face, or NULL.
                                                                    If it is an edge, the edge must be a line segment. If it is a face, the
                                                                    face must be a plane. If NULL, the reference_direction is used instead. */,
            const NXOpen::Vector3d & referenceDirection /** If reference_axis is NULL,
                                                          this parameter sets the reference direction of the sketch.
                                                          In this case, this parameter must not be (0,0,0).
                                                          If reference_axis is not NULL
                                                          and this parameter is not (0,0,0), this parameter
                                                          determines whether the reference direction should be
                                                          in the same direction as reference_axis
                                                          or in the opposite direction. If this parameter is (0,0,0),
                                                          this parameter is not used. */,
            NXOpen::AxisOrientation referenceAxisOrientation /** Indicates whether the reference axis is horizontal or vertical. */,
            NXOpen::Sense referenceAxisSense /**  Ignored unless reference_direction
                                       is (0,0,0) and reference_axis is an edge or datum axis.
                                       This parameter indicates whether the reference axis should
                                       be in the same direction as reference_axis or in the opposite
                                       direction. */,
            NXOpen::PlaneNormalOrientation normalOrientation /** Whether the sketch's Z-axis should be outward or inward. */,
            const NXOpen::Point3d & localCoordinateSystemOrigin /** Origin of the sketch's local coordinate system. */
        );
        /** Activates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Activate
        (
            NXOpen::Sketch::ViewReorient orientView /** Indicates whether to orient the view to the sketch during activation */
        );
        /** Deactivates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Deactivate
        (
            NXOpen::Sketch::ViewReorient orientView /** Indicates whether to orient the view to the model during deactivation */,
            NXOpen::Sketch::UpdateLevel updateLevel /** Indicates whether just the sketch should be updated or the entire model */
        );
        /**Returns  true if the sketch is active 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsActive
        (
        );
        /**
            Sets the reference direction of the sketch.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetReferenceDirection
        (
            NXOpen::IReferenceAxis * referenceAxis /** Can be a datum axis, edge, datum plane, face, or NULL.
                                                                    If it is an edge, the edge must be a line segment. If it is a face, the
                                                                    face must be a plane. If NULL, the reference_direction is used instead. */,
            const NXOpen::Vector3d & referenceDirection /** If reference_axis is NULL,
                                                          this parameter sets the reference direction of the sketch.
                                                          In this case, this parameter must not be (0,0,0).
                                                          If reference_axis is not NULL
                                                          and this parameter is not (0,0,0), this parameter
                                                          determines whether the reference direction should be
                                                          in the same direction as reference_axis
                                                          or in the opposite direction. If this parameter is (0,0,0),
                                                          this parameter is not used. */,
            NXOpen::AxisOrientation referenceAxisOrientation /** Indicates whether the reference axis is horizontal or vertical. */,
            NXOpen::Sense referenceAxisSense /** Ignored unless reference_direction
                                       is (0,0,0) and reference_axis is an edge or datum axis.
                                       This parameter indicates whether the reference axis should
                                       be in the same direction as reference_axis or in the opposite
                                       direction. */
        );
        /** Flips the reference direction of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void FlipReferenceDirection
        (
        );
        /** Flips the outward normal vector of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void FlipNormal
        (
        );
        /**Returns  the plane that the sketch is attached to 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ISurface * AttachPlane
        (
        );
        /** Gets the reference direction of the sketch  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d GetReferenceDirection
        (
            NXOpen::IReferenceAxis ** referenceAxis /**
                                    An edge, datum axis, datum plane, or face that the sketch uses as a reference.
                                    May be NULL. */,
            NXOpen::AxisOrientation* referenceAxisOrientation /** Indicates whether the reference axis is horizontal or vertical */,
            NXOpen::Sense* referenceAxisSense /** If reference axis is an edge or datum axis,
                                       this parameter indicates whether the reference axis is
                                       in the same direction as the edge or datum axis or in the opposite
                                       direction.  If reference axis is not an edge or datum axis, this parameter is not used. */
        );
        /**Returns  the location of the origin of the local coordinate system for the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /**Returns  the orientation matrix of the local coordinate system of the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::NXMatrix * Orientation
        (
        );
        /**Returns  the toggle that controls the creation of infer constraints in sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::CreateInferConstraintSetting CreateInferConstraintsSetting
        (
        );
        /**Sets  the toggle that controls the creation of infer constraints in sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetCreateInferConstraintsSetting
        (
            NXOpen::Sketch::CreateInferConstraintSetting createInferCon /** create infer con */ 
        );
        /** Run auto dimensioning. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void RunAutoDimension
        (
        );
        /** Creates a coincident constraint  @return  The coincident constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateCoincidentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** Must be a vertex */,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** Must be a vertex */
        );
        /** Creates a fixed constraint  @return  The fixed constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateFixedConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates enough fixed constraints on the curve and all of its vertices such that the geometry is fully
                fixed without any redundant fixed constraints.  @return  The fixed constraints 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::SketchGeometricConstraint *> CreateFullyFixedConstraints
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates a horizontal constraint  @return  The horizontal constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateHorizontalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a vertical constraint  @return  The vertical constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateVerticalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a tangent constraint.
           Note: the input constraint geometries cannot both be linear.  @return  The tangent constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchTangentConstraint * CreateTangentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom1Help /** geom1 help */ ,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom2Help /** geom2 help */ 
        );
        /** Creates a constant length constraint  @return  The constant length constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a line */
        );
        /** Creates a constant angle constraint  @return  The constant angle constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantAngleConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a line */
        );
        /** Creates a uniform scale constraint  @return  The uniform scale constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a spline */
        );
        /** Creates a non-uniform scale constraint  @return  The non-uniform scale constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateNonUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom /** Must be a spline */
        );
        /** Creates a parallel constraint.
            A parallel constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The parallel constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateParallelConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */
        );
        /** Creates a perpendicular constraint.
            A perpendicular constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The perpendicular constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreatePerpendicularConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */
        );
        /** Creates a normal constraint.
            A normal constraint can be created between any two curve/edge type except between two linear objects. For
            linear objects, create a perpendicular constraint
             @return  The normal constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateNormalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom1Help /** Help data for first geom */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Second input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom2Help /** Help data for second geom */
        );
        /** Creates a collinear constraint.
            One of the input constraint geometries must be a line.  @return  The collinear constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateCollinearConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a line, linear edge, datum axis, or datum plane */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be a line, linear edge, datum axis, or datum plane */
        );
        /** Creates an equal length constraint.
            One of the input constraint geometries must be a line.  @return  The equal length constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a line or linear edge */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be a line or linear edge */
        );
        /** Creates an equal radius constraint.
           One of the input constraint geometries must be a curve.  @return  The equal radius constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualRadiusConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be an arc or edge shaped as an arc */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be an arc or edge shaped as an arc */
        );
        /** Creates a concentric constraint.
            One of the input constraint geometries must be a curve.  @return  The concentric constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateConcentricConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */
        );
        /** Creates a midpoint constraint.
            One of the input constraint geometries must be a vertex and the other
            must be a curve or edge.  @return  The midpoint constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateMidpointConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ 
        );
        /** Creates a slope constraint.
            One of the input constraint geometries must a spline defining point.
            The other must be datum axis, datum plane, or a curve or edge shaped as a line, arc, ellipse, conic, or spline.  @return  The slope constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchGeometricConstraint * CreateSlopeConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ 
        );
        /** Creates a point on curve constraint.
            One of the input geometries must be a vertex and the other must be a
            curve, edge, datum axis, or datum plane.  @return  The point on curve constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnCurveConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & conGeom2 /** con geom2 */ ,
            const NXOpen::Sketch::ConstraintGeometryHelp & help /** help */ 
        );
        /**
            Creates a point on string constraint.
             @return  The point on string constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a vertex */,
            const std::vector<NXOpen::Curve *> & curvesInString /** Must all be part of the same string.
                                                                                                      (You can create a string of curves through the UI
                                                                                                      through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & helpData /** help data */ ,
            int curveWhichHelpParamAppliesTo /** If helpData is a parameter, this parameter indicates
                       which curve in the curvesInString that the help parameter applies to.  Otherwise, this parameter is not used */
        );
        /**
            Creates a point on string constraint.  The string is specified using a single curve
            in the string.  The constraint is created on the entire string
            that curveInString belongs to.
             @return  The point on string constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & conGeom1 /** Must be a vertex */,
            NXOpen::Curve * curveInString /** A curve in the string that you want to create the constraint on.
                                                                  The constraint is created on the entire string
                                                                  that this curve belongs to.
                                                                  (You can create a string of curves through the UI
                                                                  through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & helpData /** help data */ 
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link NXOpen::Sketch::CreateRadialDimension NXOpen::Sketch::CreateRadialDimension@endlink  or @link NXOpen::Sketch::CreateDiameterDimension NXOpen::Sketch::CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link NXOpen::Sketch::CreatePerimeterDimension NXOpen::Sketch::CreatePerimeterDimension@endlink   @return  The dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dimType /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dimObject2 /** Second input geometry */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link NXOpen::Sketch::CreateRadialDimension NXOpen::Sketch::CreateRadialDimension@endlink  or @link NXOpen::Sketch::CreateDiameterDimension NXOpen::Sketch::CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link NXOpen::Sketch::CreatePerimeterDimension NXOpen::Sketch::CreatePerimeterDimension@endlink . This function
            takes in an argument to create the dimension as driving or reference.  @return  The dimensional constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dimType /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dimObject2 /** Second input geometry */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a radial dimension constraint  @return  The radial dimension constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a radial dimension constraint. Accepts a flag to create the dimension as driving or reference  @return  The radial dimension constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a diameter dimension constraint  @return  The diametral dimension constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a diameter dimension constraint. Accepts a flag to create the dim as driving or reference  @return  The diametral dimension constraint 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dimObject1 /** Should be an arc */,
            const NXOpen::Point3d & dimOrigin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption refDim /** option for creating driving or reference dimension */
        );
        /** Creates a perimeter dimension constraint  @return  The perimeter dimensional constraint 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionalConstraint * CreatePerimeterDimension
        (
            const std::vector<NXOpen::Curve *> & curves /** The curves that form the perimeter */,
            const NXOpen::Point3d & dimOrigin /** Not currently used */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Update the sketch and not the sketch children.  If a different sketch is active the SKETCH_NOT_INITIALIZED error will return. The function works even if the sketch is not active.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void LocalUpdate
        (
        );
        /** Updates the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Update
        (
        );
        /** Updates the given set of geometries in the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Update
        (
            const std::vector<NXOpen::NXObject *> & geoms /** Geoms that need to be updated */
        );
        /** Updates the geometry display without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateGeometryDisplay
        (
        );
        /** Updates the geometry display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateGeometryDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateDimensionDisplay
        (
        );
        /** Updates the dimension display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display of given set of dims without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::NXObject *> & dims /** Dims for which cons must be re-displayed */
        );
        /** Updates the constraint display without updating the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateConstraintDisplay
        (
        );
        /** Updates the constraint display of given set of geoms without updating the sketch 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void UpdateConstraintDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Adds a curve or point to the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */
        );
        /** Adds a curve or point to the sketch.  Infers coincident constraints with other geometry
            in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */
        );
        /** Adds a curve or point to a sketch.
             
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void AddGeometry
        (
            NXOpen::Curve * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */,
            NXOpen::Sketch::AddEllipseOption ellipseOption /** If you are adding an ellipse to the sketch, this parameter
                                                                    indicates whether the ellipse should be treated as an
                                                                    ellipse or general conic.  If you are not adding an ellipse, the
                                                                    option is ignored.
                                                                    See the documentation for @link NXOpen::Sketch::AddEllipseOption NXOpen::Sketch::AddEllipseOption@endlink  for more details.
                                                                    The default value is
                                                                    @link NXOpen::Sketch::AddEllipseOptionTreatAsEllipse NXOpen::Sketch::AddEllipseOptionTreatAsEllipse@endlink .
                                                                    In order to treat an ellipse as a conic, its end angle minus its
                                                                    start angle must be less than 180 degrees.*/
        );
        /** Adds an array of curves or points to a sketch.
             
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void AddGeometry
        (
            NXOpen::Sketch::InferConstraintsOption inferCoincidentConstraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */,
            NXOpen::Sketch::AddEllipseOption ellipseOption /** If you are adding an ellipse to the sketch, this parameter
                                                                    indicates whether the ellipse should be treated as an
                                                                    ellipse or general conic.  If you are not adding an ellipse, the
                                                                    option is ignored.
                                                                    See the documentation for @link NXOpen::Sketch::AddEllipseOption NXOpen::Sketch::AddEllipseOption@endlink  for more details.
                                                                    The default value is
                                                                    @link NXOpen::Sketch::AddEllipseOptionTreatAsEllipse NXOpen::Sketch::AddEllipseOptionTreatAsEllipse@endlink .
                                                                    In order to treat an ellipse as a conic, its end angle minus its
                                                                    start angle must be less than 180 degrees.*/,
            const std::vector<NXOpen::SmartObject *> & curvesOrPoints /** Must be a curve or point */
        );
        /** Gets the status of the sketch and the number of degrees of freedom that remain in the sketch.
            The status of the sketch indicates whether the sketch is fully constrained or under, over, or
            inconsistently constrained.  @return  The sketch's status, which indicates how well constrained the sketch is 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::Status GetStatus
        (
            int* dofNeeded /** The number of degrees of freedom left in the sketch */
        );
        /** Calculate the sketch status to detect if the dimensions and persistent relations
            define the sketch properly.  The calculated status is stored on the sketch and can be 
            accessed using @link NXOpen::Sketch::GetStatus NXOpen::Sketch::GetStatus@endlink .  The sketch should be 
            active without the Work Region enabled to get the correct status. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void CalculateStatus
        (
        );
        /** Gets all constraints in the sketch of a particular type  @return  All the constraints in the sketch of the specified type 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetAllConstraintsOfType
        (
            NXOpen::Sketch::ConstraintClass conClass /** Optional filter.  Use @link NXOpen::Sketch::ConstraintClassAny NXOpen::Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */,
            NXOpen::Sketch::ConstraintType conType /** Optional filter.  Use @link NXOpen::Sketch::ConstraintTypeNoCon NXOpen::Sketch::ConstraintTypeNoCon@endlink  if you
                                                        do not want to filter by constraint type */
        );
        /** Gets all the constraints associated with a particular geometric item  @return  All the constraints associated with the geometry that is input 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetConstraintsForGeometry
        (
            NXOpen::SmartObject * geometry /** Must be a curve or point */,
            NXOpen::Sketch::ConstraintClass conClass /** Optional filter.  Use @link NXOpen::Sketch::ConstraintClassAny NXOpen::Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */
        );
        /** Returns all the expressions in the sketch  @return  All the expressions in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetAllExpressions
        (
        );
        /** Returns all the curves and points in the sketch  @return  All the curves and points in the sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetAllGeometry
        (
        );
        /** Determine if the input curve or point is owned by the sketch.  Returns true for the sketch origin,
            sketch axes, and the sketch geometry returned by @link NXOpen::Sketch::GetAllGeometry NXOpen::Sketch::GetAllGeometry@endlink .  @return  True if the geometry belongs to the sketch 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsSketchGeometry
        (
            NXOpen::SmartObject * geometry /** Must be a curve or point */
        );
        /**Returns  a flag indicating whether the degree of freedom arrows are currently being
            displayed 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool DOFDisplay
        (
        );
        /**Sets  a flag indicating whether the degree of freedom arrows are currently being
            displayed 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetDOFDisplay
        (
            bool displayDof /** display dof */ 
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & pointOnArc /** Point on fillet arc */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            NXOpen::Curve * curve3 /** Third curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint3 /** Should be a point on the third curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::DeleteThirdCurveOption doDelete /** Indicates whether the third curve should be deleted */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            NXOpen::Curve * curve3 /** Third curve for the fillet */,
            const NXOpen::Point3d & helpPoint1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & helpPoint3 /** Should be a point on the third curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & pointOnArc /** Point on fillet arc */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption doTrim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::DeleteThirdCurveOption doDelete /** Indicates whether the third curve should be deleted */,
            NXOpen::Sketch::CreateDimensionOption createRadiusDim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternateSolution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /**Returns  the feature associated with this sketch 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * Feature
        (
        );
        /**Returns  the view corresponding to sketch 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * View
        (
        );
        /**Returns  true if drafting sketch 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsDraftingSketch
        (
        );
        /** Deletes all geometric constraints associated with the object and all of its
                vertices. Converts all the driving dimensions associated with the object and its
                vertices to reference dimensions. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void DeleteConstraintsOnGeometries
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Deletes all geometric constraints associated with the object and all of its vertices. Converts all the driving dimensions 
                associated with the object and its vertices to reference dimensions. The user can pass in a vertex to do the same on just the
                supplied vertex. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void DeleteConstraintsOnGeometries
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Deletes constraints associated with the input sketch geometry and vertices according to the constraint class, e.g.,   
                <ul>
                <li>@link NXOpen::Sketch::ConstraintClassAny NXOpen::Sketch::ConstraintClassAny@endlink  will remove all geometric constraints and convert driving dimensions to reference dimensions.</li>
                <li>@link NXOpen::Sketch::ConstraintClassGeometric NXOpen::Sketch::ConstraintClassGeometric@endlink  will remove all geometric constraints.</li>
                <li>@link NXOpen::Sketch::ConstraintClassDimension NXOpen::Sketch::ConstraintClassDimension@endlink  will remove all dimensions and not convert them to reference.</li>
                <li>@link NXOpen::Sketch::ConstraintClassNotConstraint NXOpen::Sketch::ConstraintClassNotConstraint@endlink  will not remove any geometric constraints and dimensions.</li> 
                </ul> 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void DeleteConstraintsOnGeometries
        (
            NXOpen::Sketch::ConstraintClass conClass /** Use @link NXOpen::Sketch::ConstraintClassAny NXOpen::Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */,
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Creates copies of input objects and constraints between these objects.  @return  Copies of objects 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::NXObject *> CopyObjects
        (
            const std::vector<NXOpen::NXObject *> & inputObjects /** Objects to be copied */
        );
        /** Creates copies of input objects and constraints between these objects. This function is same as
                @link NXOpen::Sketch::CopyObjects NXOpen::Sketch::CopyObjects@endlink  except that it returns an array of newly created dimensions 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void CopyObjectsWithDimensionOutput
        (
            const std::vector<NXOpen::NXObject *> & inputObjects /** Objects to be copied */,
            std::vector<NXOpen::NXObject *> & outputObjects /** Copies of objects */,
            std::vector<NXOpen::NXObject *> & outputDims /** Copies of dims */
        );
        /** Unblanks dimensions in the active sketch associated with the input sketch geometry 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ShowDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Geometry and groups in active sketch */
        );
        /** Blanks dimensions in the active sketch associated with the input sketch geometry.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void HideDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Geometry and groups in active sketch */
        );
        /** Unblanks all the dimensions of input sketch 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ShowDimensions
        (
        );
        /** Unblanks dimensions in the active sketch associated with the input sketch geometry. This function can accept vertices. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ShowDimensions
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Geometry and vertices in active sketch */
        );
        /** Blanks all the dimensions of input sketch 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void HideDimensions
        (
        );
        /** Blanks dimensions in the active sketch associated with the input sketch geometry. This function can accept vertices 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void HideDimensions
        (
            const std::vector<NXOpen::Sketch::ConstraintGeometry> & objects /** Geometry and vertices in active sketch */
        );
        /** Creates Automatic Constraints on input set of geometries.  @return  Array of deduced constraints 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::SketchConstraint *> AutoConstrain
        (
            double linearTolerance /** Capture Distance           */,
            double angularTolerance /** Capture Angle              */,
            bool allowRemoteConstraints /** Allow remote constraints   */,
            const std::vector<NXOpen::SmartObject *> & geometries /** Array of geometries     */,
            const std::vector<NXOpen::Sketch::ConstraintType> & autoconstraintTypes /** Constraint type array      */
        );
        /** Makes the sketch placement face and directional reference internal to the sketch
               if they are both datums referenced only by the sketch. 
         <br>  @deprecated Deprecated in NX11.0.0.  None. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  None.") void MakeDatumsInternal
        (
        );
        /** Makes the internal sketch placement face and directional reference datums external. 
         <br>  @deprecated Deprecated in NX11.0.0.  Please use @link NXOpen::Sketch::MakeDatumsExternal2 NXOpen::Sketch::MakeDatumsExternal2@endlink  instead. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Please use NXOpen::Sketch::MakeDatumsExternal2 instead.") void MakeDatumsExternal
        (
        );
        /**Returns  true if the sketch is internal. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: bool IsInternal
        (
        );
        /** Makes the internal sketch placement face and directional reference datums external. It should be called
           only when the internal datum is not a datum CSYS or is not a PlaneAxisPoint type of datum CSYS. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void MakeDatumsExternal2
        (
        );
        /** Creates copies of input objects and constraints between these objects.
            Sketch dimensions are copied only if explicitly included in the input_objects array. 
             @return  Map between the original input object and the corresponding copied object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Sketch::CopyObjectData> CopyObjectsWithTracking
        (
            const std::vector<NXOpen::DisplayableObject *> & inputObjects /** Objects to be copied */
        );
        /**Returns  the current update scope. Used in Direct Sketch to control update 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch::UpdateLevel UpdateScope
        (
        );
        /**Sets  the current update scope. Used in Direct Sketch to control update 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetUpdateScope
        (
            NXOpen::Sketch::UpdateLevel updateScope /** update scope */ 
        );
        /** Changes the locations of the control poles of a spline. The length of poles array should be enough to cover existing poles. You cannot add/remove poles nor change
                knot sequence via this call. The order of data in poles array is x, y, z, weight. You can edit any or all of these four values via this function.
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void EditSplinePoles
        (
            NXOpen::Spline * spline /** spline */ ,
            const std::vector<double> & poles /** pole locations. Size is four times the number of poles. */
        );
        /** Changes the locations of the defining points of a spline. The length of point array should be enough to cover existing defining points. You cannot add/remove points nor change
                knot sequence via this call. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void EditSplineDefiningPoints
        (
            NXOpen::Spline * spline /** spline */ ,
            const std::vector<double> & points /** point locations. Size is three times the number of points. */
        );
        /** Convert the legacy splines to new NX10 splines. The input spline will be upgraded to NX10 spline. No new splines will be created to replace the input spline. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ConvertToNx10Spline
        (
            NXOpen::Spline * spline /** spline */ 
        );
        /** Remove redundant vertices of the given sketch geometry 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void RemoveRedundantVertices
        (
            const std::vector<NXOpen::NXObject *> & geoms /** Array of geometries  */
        );
        /** Deletes or adjusts constraints of the input geometry that are incompatible after geometry edit.  Call this before sketch update 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ManageConstraintsAfterEdit
        (
            const std::vector<NXOpen::NXObject *> & sketchGeoms /** sketchgeoms */ ,
            bool preserveComplexConstraints /** Complex constraints are Pattern, Mirror and Offset */
        );
        /**  Breaks associativity of recipe geometry (projected or intersection curves and points) in the sketch, making the curves regular sketch geometry. 
                  Any non-recipe geometry is ignored. Call this before sketch update. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void BreakAssociativity
        (
            const std::vector<NXOpen::NXObject *> & sketchGeoms /** Recipe geometry in the active sketch  */
        );
        /** Scale the sketch entities by the given scale factor. The sketch cannot be scaled if there are recipe curves or external constraints/dimensions or 
                 constraints/dimensions that controls the size of one or more geometries in the sketch. The sketch can have at most one non-angular driving dimension 
                 and that dimension must have its expression value scaled by the scale factor. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Scale
        (
            double scaleFactor /** the scaleFactor must be greater than zero */
        );
        /** Sets the text height of all dimensions in the given sketch.
                 If the part type is metric, than the textHeight units would be millimeters.
                 If the part type is english, than the textHeight units would be inches.
                 Note that the height can only be changed when @link NXOpen::Preferences::SketchPreferences::SetTextSizeMode NXOpen::Preferences::SketchPreferences::SetTextSizeMode@endlink 
                 is set to Variable mode.
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetTextHeight
        (
            double textHeight /** the textHeight must be greater than zero */
        );
        /** Convert radius to diameter dimensions or diameter to radius dimensions.
                 When the dimension is a driving dimension and its expression is referenced by another expression or its value is a formula that references expressions,
                 then the conversion would do nothing.
                 When converting radius to diameter, the radius value would double to diameter value.
                 When converting diameter to radius, the diameter value would halve to radius value. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ConvertRadialDimension
        (
            const std::vector<NXOpen::DisplayableObject *> & dimensions /** dimensions to convert */
        );
        /** Returns all the virtual points in the sketch  @return  All the virtual points in the sketch 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchVirtualPoint *> GetVirtualPoints
        (
        );
        /** The method returns the ignored relations on a geometry  @return  Ignored relations on the input geometry 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::SketchRelation *> GetIgnoredRelationsOfGeometry
        (
            const NXOpen::Sketch::ConstraintGeometry & geometry /** geometry */ 
        );
        /**Returns  the toggle that controls the rotate drag mode in an active sketch. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: bool RotateDragMode
        (
        );
        /**Sets  the toggle that controls the rotate drag mode in an active sketch. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetRotateDragMode
        (
            bool rotateDrag /** rotatedrag */ 
        );
        /** Set rotation origin 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetRotationOrigin
        (
            const NXOpen::Point3d & center /** center */ 
        );
        /**Returns  the flag which causes the sketch to be upgraded upon activation
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool UpgradeUponActivation
        (
        );
        /**Sets  the flag which causes the sketch to be upgraded upon activation
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetUpgradeUponActivation
        (
            bool upgrade /**  When true, the sketch will be upgraded upon activation. */
        );
        /**Returns  a true value if the sketch uses a legacy solver or no solver, false otherwise. 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: bool UsesLegacySolver
        (
        );


        /** Contains preferences for the sketch 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::SketchPreferences *Preferences();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
