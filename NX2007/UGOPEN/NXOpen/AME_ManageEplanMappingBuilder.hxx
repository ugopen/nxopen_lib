#ifndef NXOpen_AME_MANAGEEPLANMAPPINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGEEPLANMAPPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageEplanMappingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageEplanMappingBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        /**
                Definition of the Eplan mapping behaviour types
            */
        enum EplanImportType
        {
            EplanImportTypeAddType/** add type */ ,
            EplanImportTypeAddChildren/** add children */ ,
            EplanImportTypeAddPort/** add port */ ,
            EplanImportTypeAddPortAndType/** add port and type */ ,
            EplanImportTypeAddConnection/** add connection */ 
        };

    }
    namespace AME
    {
        class _ManageEplanMappingBuilderBuilder;
        class ManageEplanMappingBuilderImpl;
        /** Represents a ManageEplanMappingBuilder class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManageEplanmappingBuilder  NXOpen::AME::AMEManager::CreateManageEplanmappingBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageEplanMappingBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            private: ManageEplanMappingBuilderImpl * m_manageeplanmappingbuilder_impl;
            private: friend class  _ManageEplanMappingBuilderBuilder;
            protected: ManageEplanMappingBuilder();
            public: ~ManageEplanMappingBuilder();
            /**Returns  the Eplan node selection 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectedEplanNode
            (
            );
            /**Returns  the reuse library selection port
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryPort
            (
            );
            /**Returns  the reuse library selection item
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryItem
            (
            );
            /**Returns  the enum import type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanImportType ImportType
            (
            );
            /**Sets  the enum import type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetImportType
            (
                NXOpen::AME::EplanImportType importType /** importtype */ 
            );
            /** Map selected Eplan object 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEplanObjectToADLibraryObject
            (
            );
            /** Unmap selected Eplan object 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEplanObject
            (
            );
            /** Map selected Eplan property with AD Library Object property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEplanPropertyToADLibraryObjectProperty
            (
                const NXString & selectedEplanProperty /** selectedeplanproperty */ ,
                const NXString & selectedADPropertyId /** selectedadpropertyid */ ,
                const NXString & selectedADPropertyName /** selectedadpropertyname */ ,
                bool isPort /** isport */ 
            );
            /** Map selected Eplan property with AD Library Object property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEplanPropertyToADLibraryObjectProperty
            (
                const char * selectedEplanProperty /** selectedeplanproperty */ ,
                const char * selectedADPropertyId /** selectedadpropertyid */ ,
                const char * selectedADPropertyName /** selectedadpropertyname */ ,
                bool isPort /** isport */ 
            );
            /** Unmap selected Eplan property with AD Library Object property
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEplanPropertyToADLibraryObjectProperty
            (
                const NXString & selectedEplanProperty /** selectedeplanproperty */ ,
                bool isPort /** isport */ 
            );
            /** Unmap selected Eplan property with AD Library Object property
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnMapEplanPropertyToADLibraryObjectProperty
            (
                const char * selectedEplanProperty /** selectedeplanproperty */ ,
                bool isPort /** isport */ 
            );
            /** Map selected Eplan property value with AD Library Object property value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEplanPropValueToADLibraryObjectPropValue
            (
                const NXString & selectedEplanPropertyId /** selectedeplanpropertyid */ ,
                const NXString & selectedEplanPropValueId /** selectedeplanpropvalueid */ ,
                const NXString & selectedADLibraryObjectPropValueName /** selectedadlibraryobjectpropvaluename */ ,
                bool isPort /** isport */ 
            );
            /** Map selected Eplan property value with AD Library Object property value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEplanPropValueToADLibraryObjectPropValue
            (
                const char * selectedEplanPropertyId /** selectedeplanpropertyid */ ,
                const char * selectedEplanPropValueId /** selectedeplanpropvalueid */ ,
                const char * selectedADLibraryObjectPropValueName /** selectedadlibraryobjectpropvaluename */ ,
                bool isPort /** isport */ 
            );
            /** Unmap selected Eplan property value with AD Library Object property value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEplanPropertyValue
            (
                const NXString & selectedEplanPropId /** selectedeplanpropid */ ,
                const NXString & selectedEplanPropValueId /** selectedeplanpropvalueid */ ,
                bool isPort /** isport */ 
            );
            /** Unmap selected Eplan property value with AD Library Object property value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnMapEplanPropertyValue
            (
                const char * selectedEplanPropId /** selectedeplanpropid */ ,
                const char * selectedEplanPropValueId /** selectedeplanpropvalueid */ ,
                bool isPort /** isport */ 
            );
            /** Set a map of for all AD properties and their respective Default values
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAdPropertyIdToDefaultValueMap
            (
                const std::vector<NXString> & adPropId /** adpropid */ ,
                const std::vector<NXString> & adPropName /** adpropname */ ,
                const std::vector<NXString> & adDefaultValue /** addefaultvalue */ ,
                const std::vector<NXString> & adDefaultValueID /** addefaultvalueid */ ,
                bool isPort /** isport */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
