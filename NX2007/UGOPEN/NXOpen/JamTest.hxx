#ifndef NXOpen_JAMTEST_HXX_INCLUDED
#define NXOpen_JAMTEST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     JamTest.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/JamNXColor.hxx>
#include <NXOpen/JamTestNamespace_NotATaggedObject.hxx>
#include <NXOpen/JamTestNamespace_OMPPTagged.hxx>
#include <NXOpen/JamTestNamespace_Subspace_OMPPTagged2.hxx>
#include <NXOpen/JamTestNamespace_Subspace_Tagged2.hxx>
#include <NXOpen/JamTestNamespace_Subspace_TransientObj.hxx>
#include <NXOpen/JamTestPointer.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopenjamtestcpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class JamTest;
    class IOMName;
    class JamNXColor;
    namespace JamTestNamespace
    {
        class NotATaggedObject;
    }
    namespace JamTestNamespace
    {
        class OMPPTagged;
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class OMPPTagged2;
        }
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class Tagged2;
        }
    }
    namespace JamTestNamespace
    {
        namespace Subspace
        {
            class TransientObj;
        }
    }
    namespace JamTestNamespace
    {
        class Tagged;
    }
    class JamTestPointer;
    class TaggedObject;
    class JamTestImpl;

    /// \cond NX_NO_DOC 
    /** Test spelling error test DO NOT CHANGE: clas with methods involving various different parameter types to test the parameter marshalling code 
     <br>  Created in NX1847.0.0.  <br>  
    */
    class NXOPENJAMTESTCPPEXPORT  JamTest : public NXOpen::TransientObject
    {
        /** simple spelling error test DO NOT CHANGE: tes enum */

        /// \cond NX_NO_DOC 
        public: enum Enum1
        {
            Enum1Val1/** spelling error test DO NOT CHANGE: enum meme comment */,
            Enum1Val2/** spelling error test DO NOT CHANGE: this is a priviledged enum member */
        };


        /// \endcond 
        /** simple test enum with special first value */

        /// \cond NX_NO_DOC 
        public: enum Enum2
        {
            Enum2Val1/** val1 */  = 1,
            Enum2Val2/** val2 */ 
        };


        /// \endcond 
        /** simple test enum with gap in member values */

        /// \cond NX_NO_DOC 
        public: enum Enum3
        {
            Enum3Val1/** val1 */ ,
            Enum3Val2/** val2 */  = 2
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** simple test struct - containing a spelling error test DO NOT CHANGE: srig */
        public:
        struct Struct1
        {
            public: /** test comment1 */int I;
            public: /** test comment2 */double D;
            public: /** test comment3 */NXString S;
            public: /** test comment4 */NXString T;
            public: Struct1() :
                I(),
                D(),
                S(),
                T()
            {
            }
            /** Constructor for the Struct1 struct. */ 
            public: Struct1(int iInitial /** test comment1 */, 
                    double dInitial /** test comment2 */, 
                    const NXString &sInitial /** test comment3 */, 
                    const NXString &tInitial /** test comment4 */) :
                I(iInitial),
                D(dInitial),
                S(sInitial),
                T(tInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** test struct */
        public:
        struct Struct2
        {
            public: /** x */ double X;
            public: /** y */ double Y;
            public: Struct2() :
                X(),
                Y()
            {
            }
            /** Constructor for the Struct2 struct. */ 
            public: Struct2(double xInitial /** x */ , 
                    double yInitial /** y */ ) :
                X(xInitial),
                Y(yInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** test struct - contains nested spelling error test DO NOT CHANGE: struc and spelling error test DO NOT CHANGE: logicallll and enum fields */
        public:
        struct Struct3
        {
            public: /** spelling error test DO NOT CHANGE: ligcal flag */bool Flag;
            public: /** spelling error test DO NOT CHANGE: recieve */int I;
            public: /** spelling error test DO NOT CHANGE: this is a feild */NXOpen::JamTest::Struct1 S1;
            public: /** spelling error test DO NOT CHANGE: supersede */NXOpen::JamTest::Struct2 S;
            public: /** e */ NXOpen::JamTest::Enum3 E;
            public: Struct3() :
                Flag(),
                I(),
                S1(),
                S(),
                E((NXOpen::JamTest::Enum3)0)
            {
            }
            /** Constructor for the Struct3 struct. */ 
            public: Struct3(bool flagInitial /** spelling error test DO NOT CHANGE: ligcal flag */, 
                    int iInitial /** spelling error test DO NOT CHANGE: recieve */, 
                    const NXOpen::JamTest::Struct1 &s1Initial /** spelling error test DO NOT CHANGE: this is a feild */, 
                    const NXOpen::JamTest::Struct2 &sInitial /** spelling error test DO NOT CHANGE: supersede */, 
                    NXOpen::JamTest::Enum3 eInitial /** e */ ) :
                Flag(flagInitial),
                I(iInitial),
                S1(s1Initial),
                S(sInitial),
                E(eInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** test struct - contains multiply nested structs with logical, int, and double fields */
        public:
        struct Struct4
        {
            public: /** status string */ NXString StatusString;
            public: /** third struct */ NXOpen::JamTest::Struct3 ThirdStruct;
            public: /** first struct */ NXOpen::JamTest::Struct1 FirstStruct;
            public: Struct4() :
                StatusString(),
                ThirdStruct(),
                FirstStruct()
            {
            }
            /** Constructor for the Struct4 struct. */ 
            public: Struct4(const NXString &statusStringInitial /** status string */ , 
                    const NXOpen::JamTest::Struct3 &thirdStructInitial /** third struct */ , 
                    const NXOpen::JamTest::Struct1 &firstStructInitial /** first struct */ ) :
                StatusString(statusStringInitial),
                ThirdStruct(thirdStructInitial),
                FirstStruct(firstStructInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** test struct - contains IDClass field */
        public:
        struct Struct5
        {
            public: /** id */ JamNXColor* Id;
            public: Struct5() :
                Id()
            {
            }
            /** Constructor for the Struct5 struct. */ 
            public: Struct5(JamNXColor* idInitial /** id */ ) :
                Id(idInitial)
            {
            }
        };


        /// \endcond 

        public: enum TestId { TestIdDummyMember }; // Used as an id
        public: /** Test callback for simple callback function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<int, int> TestCallback;
        public: /** Callback function definition for a void function taking no arguments. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback0<void> TestCallback1;
        public: /** Callback function definition for a function taking a string and an OM TaggedObject. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback2<double, NXString, NXOpen::TaggedObject *> TestCallback2;
        public: /** Callback function definition for a function taking a boolean, double and enum
                arguments. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback3<bool, bool, double, NXOpen::JamTest::Enum1> TestCallback3;
        public: /** Callback function definition for a function returning an enum. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback0<NXOpen::JamTest::Enum1> TestCallback4;
        public: /** Callback function definition for a function taking a string argument and
                returning a different string. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<NXString, NXString> TestCallback5;

        /// \cond NX_NO_DOC 
         /** Struct used to test what happens when there are types from 
            a deeply nested namespace */
        public:
        struct StructWithTypesFromNestedNamespace
        {
            public: /** type */ NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType Type;
            public: /** data */ NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 Data;
            public: /** obj */ NXOpen::JamTestNamespace::Subspace::Tagged2 * Obj;
            public: StructWithTypesFromNestedNamespace() :
                Type((NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType)0),
                Data(),
                Obj()
            {
            }
            /** Constructor for the StructWithTypesFromNestedNamespace struct. */ 
            public: StructWithTypesFromNestedNamespace(NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType typeInitial /** type */ , 
                    const NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 &dataInitial /** data */ , 
                    NXOpen::JamTestNamespace::Subspace::Tagged2 * objInitial /** obj */ ) :
                Type(typeInitial),
                Data(dataInitial),
                Obj(objInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** Struct used to test what happens when there are types from 
            a deeply nested namespace */
        public:
        struct StructWithTypesFromNestedNamespaceOmpp
        {
            public: /** type */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType Type;
            public: /** data */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 Data;
            public: /** obj */ NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * Obj;
            public: StructWithTypesFromNestedNamespaceOmpp() :
                Type((NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType)0),
                Data(),
                Obj()
            {
            }
            /** Constructor for the StructWithTypesFromNestedNamespaceOmpp struct. */ 
            public: StructWithTypesFromNestedNamespaceOmpp(NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType typeInitial /** type */ , 
                    const NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 &dataInitial /** data */ , 
                    NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * objInitial /** obj */ ) :
                Type(typeInitial),
                Data(dataInitial),
                Obj(objInitial)
            {
            }
        };


        /// \endcond 
        public: /** Test callback for callback function using transient object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        typedef NXOpen::Callback1<int, NXOpen::JamTestNamespace::Subspace::TransientObj *> TestCallbackTransient;

        /// \cond NX_NO_DOC 
         /** A struct property*/
        public:
        struct StructPropertyStruct
        {
            public: /** x */ double X;
            public: /** y */ double Y;
            public: StructPropertyStruct() :
                X(),
                Y()
            {
            }
            /** Constructor for the StructPropertyStruct struct. */ 
            public: StructPropertyStruct(double xInitial /** x */ , 
                    double yInitial /** y */ ) :
                X(xInitial),
                Y(yInitial)
            {
            }
        };


        /// \endcond 
        /** an enum property for testing*/

        /// \cond NX_NO_DOC 
        public: enum EnumProperty
        {
            EnumPropertyMember1/** member1 */ ,
            EnumPropertyMember2/** member2 */ ,
            EnumPropertyMember3/** member3 */ 
        };


        /// \endcond 
        public: enum { Constant = 42 };
        private: JamTestImpl * m_jamtest_impl;
        /// \cond NX_NO_DOC 
        public: explicit JamTest(void *ptr);
        /// \endcond 
        public: JamTest();

        /// \cond NX_NO_DOC 
        /** 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~JamTest();

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Writes a string to the log file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void WriteToLog
        (
            const NXString & s /** s */ 
        );
        /** Writes a string to the log file 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void WriteToLog
        (
            const char * s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Some comment.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void NoArgs
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** This is to test naughty condition of JA call within a JAX method 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void JACallWithinJACall
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input of simple data types spelling error test DO NOT CHANGE: I'm i'm it's isn't we're would've they'll aren't haven't 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InSimple
        (
            int i1 /** spelling error test DO NOT CHANGE: parmameter */,
            double d1 /** d1 */ ,
            const NXString & s1 /** s1 */ ,
            bool l1 /** l1 */ 
        );
        /** Test input of simple data types spelling error test DO NOT CHANGE: I'm i'm it's isn't we're would've they'll aren't haven't 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void InSimple
        (
            int i1 /** spelling error test DO NOT CHANGE: parmameter */,
            double d1 /** d1 */ ,
            const char * s1 /** s1 */ ,
            bool l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple output parameter types 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutSimple
        (
            int* i1 /** i1 */ ,
            double* d1 /** d1 */ ,
            bool* l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test integer return spelling error test DO NOT CHANGE: valuer  @return  spelling error test DO NOT CHANGE: this number is a ponter 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: int RetInt
        (
            int i1 /** i1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test double return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: double RetDouble
        (
            double d1 /** d1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test boolean return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool RetLogical
        (
            bool l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test enum return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 RetEnum
        (
            NXOpen::JamTest::Enum1 e1 /** e1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test enum out value  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::Enum2 OutEnum
        (
            NXOpen::JamTest::Enum1 e1 /** e1 */ ,
            bool* b1 /** b1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test enum out value spelling error test DO NOT CHANGE: ennuiest 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnum2
        (
            NXOpen::JamTest::Enum1 e1 /** spelling error test DO NOT CHANGE: enum1 */,
            bool* b1 /** b1 */ ,
            NXOpen::JamTest::Enum2* e2 /** e2 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test statically allocated string return value spelling error test DO NOT CHANGE: harrass greatful heirarchy  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetString
        (
            const NXString & s1 /** spelling error test DO NOT CHANGE: allcated string */
        );
        /** Test statically allocated string return value spelling error test DO NOT CHANGE: harrass greatful heirarchy  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetString
        (
            const char * s1 /** spelling error test DO NOT CHANGE: allcated string */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test dynamically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetStringFree
        (
            const NXString & s1 /** s1 */ 
        );
        /** Test dynamically allocated string return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetStringFree
        (
            const char * s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test text return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RetText
        (
            const NXString & s1 /** s1 */ 
        );
        /** Test text return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString RetText
        (
            const char * s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input arrays with independent lengths 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InArrays
        (
            const std::vector<int> & i1 /** i1 */ ,
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<bool> & l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input arrays with linked lengths 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InArrays2
        (
            const std::vector<int> & i1 /** i1 */ ,
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<bool> & l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStringArray
        (
            std::vector<NXString> & s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStringArrays
        (
            std::vector<NXString> & s1 /** s1 */ ,
            std::vector<NXString> & s2 /** s2 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output string array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStringArray
        (
            std::vector<NXString> & s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InEnumArray
        (
            const std::vector<NXOpen::JamTest::Enum1> & e /** e */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray
        (
            int c /** c */ ,
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray2
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output enum array 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void OutArrayBadLength
        (
            std::vector<int> & e /** e */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output enum array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutEnumArray3
        (
            std::vector<NXOpen::JamTest::Enum3> & e /** e */ ,
            bool* b1 /** b1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output enum array  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Enum3> OutEnumArray4
        (
            bool* b1 /** b1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input text array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InTextArray
        (
            std::vector<NXString> & s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test function for TEXT_p_t array output @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> OutTextArray
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test a simple output array 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArray
        (
            std::vector<int> & i1 /** i1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array return value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> RetArray
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array output where length is an input parameter 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArray2
        (
            int c1 /** c1 */ ,
            std::vector<int> & i1 /** i1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test linked array output values 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutArrays
        (
            std::vector<int> & i1 /** i1 */ ,
            std::vector<double> & d1 /** d1 */ ,
            std::vector<bool> & l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the prime color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamNXColor * PrimeColor
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  the prime color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPrimeColor
        (
            NXOpen::JamNXColor * s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input of color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InColor
        (
            double d1 /** d1 */ ,
            NXOpen::JamNXColor * s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output of color 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void OutColor
        (
            double* d1 /** d1 */ ,
            NXOpen::JamNXColor ** l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test color return value  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamNXColor * RetColor
        (
            int i1 /** i1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test input array of colors 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InColorArray
        (
            const std::vector<double> & d1 /** d1 */ ,
            const std::vector<NXOpen::JamNXColor *> & l1 /** l1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test output color array 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void OutColorArray
        (
            std::vector<NXOpen::JamNXColor *> & s1 /** s1 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test color array return value  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamNXColor *> RetColorArray
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct2
        (
            const NXOpen::JamTest::Struct2 & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct2
        (
            NXOpen::JamTest::Struct2* s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct1
        (
            const NXOpen::JamTest::Struct1 & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct3
        (
            const NXOpen::JamTest::Struct3 & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct3
        (
            NXOpen::JamTest::Struct3* s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test struct 4  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TestStruct4
        (
            const NXString & statusIn /** statusin */ ,
            const NXOpen::JamTest::Struct1 & struct1 /** struct1 */ ,
            const NXOpen::JamTest::Struct3 & struct3 /** struct3 */ ,
            NXOpen::JamTest::Struct4* struct4 /** struct4 */ ,
            bool* boolStatus /** bool status */ 
        );
        /** Test struct 4  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXString TestStruct4
        (
            const char * statusIn /** statusin */ ,
            const NXOpen::JamTest::Struct1 & struct1 /** struct1 */ ,
            const NXOpen::JamTest::Struct3 & struct3 /** struct3 */ ,
            NXOpen::JamTest::Struct4* struct4 /** struct4 */ ,
            bool* boolStatus /** bool status */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test struct5 input value 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct5
        (
            const NXOpen::JamTest::Struct5 & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test struct5 output value  @return  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::Struct5 OutStruct5
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of struct input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of struct input value  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::Struct1> OutStruct1Array
        (
            const std::vector<NXOpen::JamTest::Struct1> & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test simple struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct1
        (
            NXOpen::JamTest::Struct1* s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of struct output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutStruct2Array
        (
            std::vector<NXOpen::JamTest::Struct2> & s /** s */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test pointer wrapper output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerObject
        (
            NXOpen::JamTestPointer ** object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test pointer wrapper output value  @return  
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestPointer * OutPointerObjectNull
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::OMPPTagged * CreateOmppTaggedObject
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test pointer wrapper output value where actual class varies
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerSubclassObject
        (
            bool returnSubclass /** if true returns a JamTestPointerSubclass object else a JamTestPointer object */,
            NXOpen::JamTestPointer ** object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test pointer wrapper input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InPointerObject
        (
            NXOpen::JamTestPointer * object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of pointer wrapper output value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerObjectArray
        (
            std::vector<NXOpen::JamTestPointer *> & objects /** objects */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of pointer wrapper output value 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void OutPointerObjectArrayNull
        (
            std::vector<NXOpen::JamTestPointer *> & objects /** objects */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test array of pointer wrapper input value 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void InPointerObjectArray
        (
            const std::vector<NXOpen::JamTestPointer *> & object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test handling of raised error 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void RaiseError
        (
            int errorCode /** error code */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test handling of returned error code 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void ReturnError
        (
            int errorCode /** error code */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test segmentation violation  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int SegViolation
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Tagged * CreateTaggedObject
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Deletes a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteTaggedObject
        (
            NXOpen::JamTestNamespace::Tagged * object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Deletes a tagged object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteOmppTaggedObject
        (
            NXOpen::JamTestNamespace::OMPPTagged * object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Prints a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintObject
        (
            NXOpen::TaggedObject * object /** object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests using a simple callback function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback
        (
            const NXOpen::JamTest::TestCallback&  cb /** cb */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests using a simple callback function with a member function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InMemberCallback
        (
            const NXOpen::JamTest::TestCallback&  cb /** cb */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests using multiple callback functions in a single function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback2
        (
            const NXOpen::JamTest::TestCallback1&  cb1 /** cb1 */ ,
            const NXOpen::JamTest::TestCallback2&  cb2 /** cb2 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests using multiple callback functions in a single function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallback3
        (
            const NXOpen::JamTest::TestCallback3&  cb3 /** cb3 */ ,
            const NXOpen::JamTest::TestCallback4&  cb4 /** cb4 */ ,
            const NXOpen::JamTest::TestCallback5&  cb5 /** cb5 */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a callback function and generates an error for negative testing. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallbackError
        (
            const NXOpen::JamTest::TestCallback1&  cb /** cb */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type from a deeply nested namespace.
                Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type from a deeply nested namespace.
                Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * CreateOmppTagged2Object
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests returning OM tagged objects as the result in the JA C function.
                Creates a tagged object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2 * CreateTagged2Object2
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests returning OM tagged objects as the result in the JA C function.
                Creates a tagged object  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * CreateOmppTagged2Object2
        (
            int id /** id */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests passing an OM tagged object as an out parameter in the JA C function.
                Creates a tagged object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateTagged2Object2
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType type /** type */ ,
            int id /** id */ ,
            int* theid /** theid */ ,
            NXOpen::JamTestNamespace::Subspace::Tagged2 ** apiResult /** api result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and enum type from a deeply nested namespace.
                Tests passing an OM tagged object as an out parameter in the JA C function.
                Creates a tagged object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateOmppTagged2Object2
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType type /** type */ ,
            int id /** id */ ,
            int* theid /** theid */ ,
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 ** apiResult /** api result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 & data /** data */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 & data /** data */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::Tagged2::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::OMPPTagged2::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::StructWithTypesFromNestedNamespace GetData
        (
            NXOpen::JamTestNamespace::Subspace::Tagged2 * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a tagged object type and struct type from a deeply nested namespace.
                Tests passing an OM tagged object as an input parameter in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::StructWithTypesFromNestedNamespaceOmpp GetOmppData
        (
            NXOpen::JamTestNamespace::Subspace::OMPPTagged2 * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as an input parameter array in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> GetIdsOfTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & objs /** objs */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as an input parameter array in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<int> GetIdsOfOmppTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> & objs /** objs */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as an output parameter array in the JA C function 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** type */ ,
            const std::vector<int> & ids /** ids */ ,
            int* numCreated /** num created */ ,
            std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> & result /** result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as an output parameter array in the JA C function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateOmppTagged2Objects
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType> & type /** type */ ,
            const std::vector<int> & ids /** ids */ ,
            int* numCreated /** num created */ ,
            std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> & apiResult /** api result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as a return parameter array in the JA C function  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2 *> CreateTagged2Objects
        (
            const std::vector<int> & ids /** ids */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::Tagged2::ObjType> & type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests passing an OM tagged object as a return parameter array in the JA C function  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2 *> CreateOmppTagged2Objects
        (
            const std::vector<int> & ids /** ids */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::OMPPTagged2::ObjType> & type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Create  a transient object that is returned as nullptr This is to test a case where if
                nullptr is passed back we treat this case corectly  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj * CreateSubspaceTransientNull
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj * CreateSubspaceTransientObj
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type from a deeply nested namespace.
                Creates a transient object.
                Returns the object as a API_OUT parameter 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateSubspaceTransientObj
        (
            int dum /** dum */ ,
            NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType type /** type */ ,
            int* dumout /** dumout */ ,
            NXOpen::JamTestNamespace::Subspace::TransientObj ** apiResult /** api result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> CreateSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** type */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type from a deeply nested namespace.
                Creates an array of transient objects.
                Returns the array as an API_OUT parameter. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CreateSubspaceTransientObjs
        (
            int dum /** dum */ ,
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::ObjType> & type /** type */ ,
            int* dumout /** equals dum */,
            std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & result /** result */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  the number of objects of type spelling error test DO NOT CHANGE: dialogue JamTestNamespace.Subspace.TransientObj
            in existence.  Used to test the destruction of the transient objects spelling error test DO NOT CHANGE: collectable humour
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int NumberOfSubspaceTransientObjs
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type and struct type from a deeply nested namespace 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** obj */ ,
            const NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 & data /** data */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests a transient object type and struct type from a deeply nested namespace  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1 GetStruct
        (
            NXOpen::JamTestNamespace::Subspace::TransientObj * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests returning an array of structs from a deeply nested namespace  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj::Struct1> GetStructsOfSubspaceTransientObjs
        (
            const std::vector<NXOpen::JamTestNamespace::Subspace::TransientObj *> & objs /** objs */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Tests using a transient object callback function. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void InCallbackTransient
        (
            const NXOpen::JamTest::TestCallbackTransient&  cb /** cb */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test to check if API_id is supported for OUTPUT_ARRAY @return  The array of API_id type 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::JamTest::TestId> GetApiIdOutputArray
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Test to check if API_id is supported for INPUT_ARRAY
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetApiIdInputArray
        (
            const std::vector<NXOpen::JamTest::TestId> & lst /** The array of API_id type */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a boolean property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: bool BoolProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a boolean property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBoolProperty
        (
            bool val /** val */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a ja_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::TaggedObject * JaObject
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a ja_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetJaObject
        (
            NXOpen::TaggedObject * jaObject /** ja object */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  an int property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: int IntProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  an int property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIntProperty
        (
            int val /** val */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a double property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: double DoubleProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a double property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDoubleProperty
        (
            double val /** val */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a string property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXString StringProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a string property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetStringProperty
        (
            const NXString & val /** val */ 
        );
        /**Sets  a string property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        void SetStringProperty
        (
            const char * val /** val */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a text property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TextProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a text property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTextProperty
        (
            const NXString & val /** val */ 
        );
        /**Sets  a text property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        void SetTextProperty
        (
            const char * val /** val */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  an enum member property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTest::EnumProperty EnumMemberProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  an enum member property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetEnumMemberProperty
        (
            NXOpen::JamTest::EnumProperty retval /** retval */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  a tagged_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::Tagged * TaggedObjectProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  a tagged_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTaggedObjectProperty
        (
            NXOpen::JamTestNamespace::Tagged * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  an tagged_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::OMPPTagged * TaggedOmppObjectProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Sets  an tagged_object property for testing
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTaggedOmppObjectProperty
        (
            NXOpen::JamTestNamespace::OMPPTagged * obj /** obj */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  an object that is not really a tagged object 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::NotATaggedObject * ObjectThatIsNotTaggedObjectProperty
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** A method that returns an object that is not really a Tagged Object @return  
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::NotATaggedObject * ObjectThatIsNotTaggedObjectMethod
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Returns  an object that is not really a tagged object 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::NotATaggedObject * ObjectThatIsNotTaggedObjectPropertyUsesTag
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** A method that returns an object that is not really a Tagged Object @return  
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::JamTestNamespace::NotATaggedObject * ObjectThatIsNotTaggedObjectMethodUsesTag
        (
        );

        /// \endcond 
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
