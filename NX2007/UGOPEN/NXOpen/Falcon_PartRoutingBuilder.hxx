#ifndef NXOpen_FALCON_PARTROUTINGBUILDER_HXX_INCLUDED
#define NXOpen_FALCON_PARTROUTINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Falcon_PartRoutingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_falcon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Falcon
    {
        class PartRoutingBuilder;
    }
    class Builder;
    class Expression;
    namespace Falcon
    {
        class SelectDBBaseDisplayableNode;
    }
    namespace Falcon
    {
        class SelectDBBaseNode;
    }
    namespace Falcon
    {
        class SelectDBBaseNodeList;
    }
    namespace Falcon
    {
        class _PartRoutingBuilderBuilder;
        class PartRoutingBuilderImpl;
        /** the class for creating Falcon part routing  <br> To create a new instance of this class, use @link NXOpen::Falcon::FalconManager::CreatePartRoutingBuilder  NXOpen::Falcon::FalconManager::CreatePartRoutingBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Container </term> <description> 
         
        Container </description> </item> 

        <item><term> 
         
        ContainerStatus </term> <description> 
         
        Full </description> </item> 

        <item><term> 
         
        Equipment </term> <description> 
         
         </description> </item> 

        <item><term> 
         
        SpecifiedDistance.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_FALCONEXPORT  PartRoutingBuilder : public NXOpen::Builder
        {
            private: PartRoutingBuilderImpl * m_partroutingbuilder_impl;
            private: friend class  _PartRoutingBuilderBuilder;
            protected: PartRoutingBuilder();
            public: ~PartRoutingBuilder();
            /**Returns  the part on which routing needs to be defined
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseNode * Part
            (
            );
            /**Returns  the activity point from which routing is outgoing
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseDisplayableNode * FromActivityPoint
            (
            );
            /**Returns  the activity point to which routing is incoming
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseDisplayableNode * ToActivityPoint
            (
            );
            /**Returns  the equipment type
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Equipment
            (
            );
            /**Sets  the equipment type
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetEquipment
            (
                const NXString & equipment /** equipment */ 
            );
            /**Sets  the equipment type
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetEquipment
            (
                const char * equipment /** equipment */ 
            );
            /**Returns  the percentage of flow
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double FlowPercentage
            (
            );
            /**Sets  the percentage of flow
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetFlowPercentage
            (
                double flowPercent /** flowpercent */ 
            );
            /**Returns  the use specified distance toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseSpecifiedDistance
            (
            );
            /**Sets  the use specified distance toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetUseSpecifiedDistance
            (
                bool useSpecifiedDistance /** usespecifieddistance */ 
            );
            /**Returns  the specified distance 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * SpecifiedDistance
            (
            );
            /**Returns  the container
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Container
            (
            );
            /**Sets  the container
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetContainer
            (
                const NXString & container /** container */ 
            );
            /**Sets  the container
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetContainer
            (
                const char * container /** container */ 
            );
            /**Returns  the quantity at destination
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int Quantity
            (
            );
            /**Sets  the quantity at destination
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetQuantity
            (
                int quantity /** quantity */ 
            );
            /**Returns  the number of parts per container
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int PartsPerContainer
            (
            );
            /**Sets  the number of parts per container
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPartsPerContainer
            (
                int partsPerContainer /** partspercontainer */ 
            );
            /**Returns  the number container per trip
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int ContainersPerTrip
            (
            );
            /**Sets  the number container per trip
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetContainersPerTrip
            (
                int containersPerTrip /** containerspertrip */ 
            );
            /**Returns  the container status
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ContainerStatus
            (
            );
            /**Sets  the container status
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetContainerStatus
            (
                const NXString & containerStatus /** containerstatus */ 
            );
            /**Sets  the container status
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetContainerStatus
            (
                const char * containerStatus /** containerstatus */ 
            );
            /**Returns  the use local activity for load 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseLocalLoadActivity
            (
            );
            /**Sets  the use local activity for load 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetUseLocalLoadActivity
            (
                bool useLocalLoadActivity /** uselocalloadactivity */ 
            );
            /**Returns  the use local activity for unload 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseLocalUnloadActivity
            (
            );
            /**Sets  the use local activity for unload 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetUseLocalUnloadActivity
            (
                bool useLocalUnloadActivity /** uselocalunloadactivity */ 
            );
            /**Returns  the load template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LoadTemplate
            (
            );
            /**Sets  the load template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetLoadTemplate
            (
                const NXString & loadTemplate /** loadtemplate */ 
            );
            /**Sets  the load template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetLoadTemplate
            (
                const char * loadTemplate /** loadtemplate */ 
            );
            /**Returns  the unload template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UnloadTemplate
            (
            );
            /**Sets  the unload template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetUnloadTemplate
            (
                const NXString & unloadTemplate /** unloadtemplate */ 
            );
            /**Sets  the unload template
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetUnloadTemplate
            (
                const char * unloadTemplate /** unloadtemplate */ 
            );
            /**Returns  the passing through activity points
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseNodeList * PassThroughActivityPoints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
