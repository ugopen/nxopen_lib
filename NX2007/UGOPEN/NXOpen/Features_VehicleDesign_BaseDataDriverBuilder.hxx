#ifndef NXOpen_FEATURES_VEHICLEDESIGN_BASEDATADRIVERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_BASEDATADRIVERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_BaseDataDriverBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class BaseDataDriverBuilder;
        }
    }
    class Builder;
    class Expression;
    class Point;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _BaseDataDriverBuilderBuilder;
            class BaseDataDriverBuilderImpl;
            /** Represents a @link NXOpen::Features::VehicleDesign::BaseDataDriverBuilder NXOpen::Features::VehicleDesign::BaseDataDriverBuilder@endlink .  <br> This class can only be used in base data, thus cannot be created directly by user.  <br> 
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  BaseDataDriverBuilder : public NXOpen::Builder
            {
                /** This enum represents the options to define the driver's type. */
                public: enum DriverTypeOptions
                {
                    DriverTypeOptionsSeating/** Seating driver type */,
                    DriverTypeOptionsStanding/** Standing driver type */,
                    DriverTypeOptionsAutonomous/** Autonomous driver type */
                };

                private: BaseDataDriverBuilderImpl * m_basedatadriverbuilder_impl;
                private: friend class  _BaseDataDriverBuilderBuilder;
                protected: BaseDataDriverBuilder();
                public: ~BaseDataDriverBuilder();
                /**Returns  the vehicle transmission type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString Transmission
                (
                );
                /**Sets  the vehicle transmission type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetTransmission
                (
                    const NXString & transmission /** transmission */ 
                );
                /**Sets  the vehicle transmission type. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetTransmission
                (
                    const char * transmission /** transmission */ 
                );
                /**Returns  the aero space control type. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString ControlType
                (
                );
                /**Sets  the aero space control type. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetControlType
                (
                    const NXString & controlType /** controltype */ 
                );
                /**Sets  the aero space control type. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetControlType
                (
                    const char * controlType /** controltype */ 
                );
                /**Returns  the front shoulder room.
                                This information is needed in the calculation for eye ellipses and the head position contour.
                             
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * FrontShoulderRoom
                (
                );
                /**Returns  the rear shoulder room.
                                This information is needed in the calculation for head position contour.
                             
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * RearShoulderRoom
                (
                );
                /**Returns  the horizontal seat adjustment in the direction of the x axis. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * HorizontalPointTravel
                (
                );
                /**Returns  the inclination angle of the backrest. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * BackAngle
                (
                );
                /**Returns  the option to indicate whether the Back Angle is fixed for not. If it is true, the back angle is not adjustable. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool BackAngleFixed
                (
                );
                /**Sets  the option to indicate whether the Back Angle is fixed for not. If it is true, the back angle is not adjustable. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetBackAngleFixed
                (
                    bool driverBackAngleFixed /** driverbackanglefixed */ 
                );
                /**Returns  the grip diameter.
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * GripDiameter
                (
                );
                /**Returns  the steering wheel diameter.
                 <br>  Created in NX12.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * SteeringWheelDiameter
                (
                );
                /**Returns  the grip sideway level angle.
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * GripSidewayLevelAngle
                (
                );
                /**Returns  the steering wheel angle.
                 <br>  Created in NX12.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * SteeringWheelAngle
                (
                );
                /**Returns  the throttle forward angle.
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ThrottleForwardAngle
                (
                );
                /**Returns  the throttle sideways angle.
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ThrottleSidewaysAngle
                (
                );
                /**Returns  the seat track rise angle.
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * SeatTrackRiseAngle
                (
                );
                /**Returns  the option to indicate whether the Second Lever is Active 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SecondLeverActive
                (
                );
                /**Sets  the option to indicate whether the Second Lever is Active 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSecondLeverActive
                (
                    bool driverSecondLeverActive /** driversecondleveractive */ 
                );
                /**Returns  the second lever forward angle.
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * SecondLeverForwardAngle
                (
                );
                /**Returns  the second lever sideways angle.
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * SecondLeverSidewaysAngle
                (
                );
                /**Returns  the Driver side. This value indicates either it is a left driven or right driven vehicle. 
                                This value is calculated from the driver's seat reference point coordinates and can not be edited by the user.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString DriverSide
                (
                );
                /**Returns  the driver type. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::BaseDataDriverBuilder::DriverTypeOptions DriverType
                (
                );
                /**Sets  the driver type. 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDriverType
                (
                    NXOpen::Features::VehicleDesign::BaseDataDriverBuilder::DriverTypeOptions driverType /** drivertype */ 
                );
                /**Sets  the Driver side. This value indicates either it is a left driven or right driven vehicle. 
                                This value is calculated from the driver's seat reference point coordinates and can not be edited by the user.
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDriverSide
                (
                    const NXString & driverSide /** driverside */ 
                );
                /**Sets  the Driver side. This value indicates either it is a left driven or right driven vehicle. 
                                This value is calculated from the driver's seat reference point coordinates and can not be edited by the user.
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetDriverSide
                (
                    const char * driverSide /** driverside */ 
                );
                /**Returns  the status to indicate whether the driver seat reference point is active or not. If it is true, the driver seat reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool SeatReferencePointActive
                (
                );
                /**Sets  the status to indicate whether the driver seat reference point is active or not. If it is true, the driver seat reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSeatReferencePointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the driver seat reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SeatReferencePoint
                (
                );
                /**Sets  the driver seat reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSeatReferencePoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
                /**Returns  the status to indicate whether the driver heel reference point is active or not. If it is true, the driver heel reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool HeelReferencePointActive
                (
                );
                /**Sets  the status to indicate whether the driver heel reference point is active or not. If it is true, the driver heel reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetHeelReferencePointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the driver heel reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * HeelReferencePoint
                (
                );
                /**Sets  the driver heel reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetHeelReferencePoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
                /**Returns  the status to indicate whether the steering wheel center point is active or not. If it is true, the steering wheel center point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool SteeringWheelCenterPointActive
                (
                );
                /**Sets  the status to indicate whether the steering wheel center point is active or not. If it is true, the steering wheel center point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSteeringWheelCenterPointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the center point of the driver steering wheel. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SteeringWheelCenterPoint
                (
                );
                /**Sets  the center point of the driver steering wheel. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSteeringWheelCenterPoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
                /**Returns  the status to indicate whether the throttle control grip center point is active or not. If it is true, the throttle control grip center point is active. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ThrottleControlGripCenterPointActive
                (
                );
                /**Sets  the status to indicate whether the throttle control grip center point is active or not. If it is true, the throttle control grip center point is active. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetThrottleControlGripCenterPointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the center point of the driver throttle control grip. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * ThrottleControlGripCenterPoint
                (
                );
                /**Sets  the center point of the driver throttle control grip. 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetThrottleControlGripCenterPoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
                /**Returns  the status to indicate whether the second lever grip center point is active or not. If it is true, the second lever grip center point is active. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SecondLeverGripCenterPointActive
                (
                );
                /**Sets  the status to indicate whether the second lever grip center point is active or not. If it is true, the second lever grip center point is active. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSecondLeverGripCenterPointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the center point of the driver second lever grip. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SecondLeverGripCenterPoint
                (
                );
                /**Sets  the center point of the driver second lever grip. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSecondLeverGripCenterPoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
                /**Returns  the driver pedal reference point's activeness. If true, the driver pedal reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool PedalReferencePointActive
                (
                );
                /**Sets  the driver pedal reference point's activeness. If true, the driver pedal reference point is active. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPedalReferencePointActive
                (
                    bool activeStatus /** activestatus */ 
                );
                /**Returns  the driver pedal reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * PedalReferencePoint
                (
                );
                /**Sets  the driver pedal reference point. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPedalReferencePoint
                (
                    NXOpen::Point * refPoint /** refpoint */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
