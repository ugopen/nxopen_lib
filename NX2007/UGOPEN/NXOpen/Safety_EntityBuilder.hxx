#ifndef NXOpen_SAFETY_ENTITYBUILDER_HXX_INCLUDED
#define NXOpen_SAFETY_ENTITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Safety_EntityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libsafetyopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Safety
    {
        class EntityBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class NXObject;
    class Point;
    class Unit;
    namespace Safety
    {
        class _EntityBuilderBuilder;
        class EntityBuilderImpl;
        /** Represents a builder of Safety entity object  <br> This is an abstract class, and cannot be directly instantiated.  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class SAFETYOPENCPPEXPORT  EntityBuilder : public NXOpen::Builder
        {
            private: EntityBuilderImpl * m_entitybuilder_impl;
            private: friend class  _EntityBuilderBuilder;
            protected: EntityBuilder();
            public: ~EntityBuilder();
            /**Returns   @brief the system this entity belongs to.  
                                 The owning entity can be a @link Safety::ModelSystem Safety::ModelSystem@endlink  or a @link Safety::ModelComponent Safety::ModelComponent@endlink ,
                                 and is defined by the type of entity that is to be created.  
                     

             
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * OwningEntity
            (
            );
            /**Sets   @brief the system this entity belongs to.  
                                 The owning entity can be a @link Safety::ModelSystem Safety::ModelSystem@endlink  or a @link Safety::ModelComponent Safety::ModelComponent@endlink ,
                                 and is defined by the type of entity that is to be created.  
                     

             
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetOwningEntity
            (
                NXOpen::NXObject * owningEntity /** owningentity */ 
            );
            /** Returns the entity subtype name  @return  the name of the entity subtype 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEntitySubtypeName
            (
            );
            /** Set the entity subtype name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEntitySubtypeName
            (
                const NXString & entitySubtypeName /** the name of the entity subtype */
            );
            /** Set the entity subtype name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetEntitySubtypeName
            (
                const char * entitySubtypeName /** the name of the entity subtype */
            );
            /** Unset a property value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPropertyWithoutValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Unset a property value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPropertyWithoutValue
            (
                const char * propertyName /** name of the property */
            );
            /** Returns the integer value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the integer value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            int GetIntegerPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the integer value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                int propertyValue /** value of the property */
            );
            /** Sets the integer value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetIntegerPropertyValue
            (
                const char * propertyName /** name of the property */,
                int propertyValue /** value of the property */
            );
            /** Returns the point value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * GetPointPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the point value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Point * GetPointPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the point value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPointPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Sets the point value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPointPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Returns the coordinate system value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * GetCSystemPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the coordinate system value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CoordinateSystem * GetCSystemPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the coordinate system value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCSystemPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::CoordinateSystem * propertyValue /** value of the property */
            );
            /** Sets the coordinate system value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetCSystemPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::CoordinateSystem * propertyValue /** value of the property */
            );
            /** Returns the vector value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * GetDirrPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the vector value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Direction * GetDirrPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the vector value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDirrPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Sets the vector value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetDirrPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Returns the double value with unit of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetScalarExpressionPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                double* propertyValue /** value of the property */,
                NXOpen::Unit ** unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Returns the double value with unit of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            void GetScalarExpressionPropertyValue
            (
                const char * propertyName /** name of the property */,
                double* propertyValue /** value of the property */,
                NXOpen::Unit ** unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the string value with unit of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetScalarExpressionPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const NXString & propertyValue /** The string value for the scalar */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the string value with unit of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetScalarExpressionPropertyValue
            (
                const char * propertyName /** name of the property */,
                const char * propertyValue /** The string value for the scalar */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Returns multiple object values of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetReferencesPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns multiple object values of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::NXObject *> GetReferencesPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets multiple object values of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReferencesPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const std::vector<NXOpen::NXObject *> & propertyValue /** value of the property */
            );
            /** Sets multiple object values of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetReferencesPropertyValue
            (
                const char * propertyName /** name of the property */,
                const std::vector<NXOpen::NXObject *> & propertyValue /** value of the property */
            );
            /** Returns the string value of the property  @return  value of the property 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetStringPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the string value of the property  @return  value of the property 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            NXString GetStringPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the string value of the property 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStringPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const NXString & propertyValue /** value of the property */
            );
            /** Sets the string value of the property 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetStringPropertyValue
            (
                const char * propertyName /** name of the property */,
                const char * propertyValue /** value of the property */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
