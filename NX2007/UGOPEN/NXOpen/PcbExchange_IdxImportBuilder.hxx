#ifndef NXOpen_PCBEXCHANGE_IDXIMPORTBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_IDXIMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_IdxImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class IdxImportBuilder;
    }
    class Builder;
    namespace PcbExchange
    {
        class _IdxImportBuilderBuilder;
        class IdxImportBuilderImpl;
        /** Represents a builder to import IDX file.  <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateIdxImportBuilder  NXOpen::PcbExchange::Manager::CreateIdxImportBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  IdxImportBuilder : public NXOpen::Builder
        {
            /** The IDX data location options. */
            public: enum DataLocation
            {
                DataLocationLocal/** local */ ,
                DataLocationTeamcenterDS/** teamcenter ds */ ,
                DataLocationTeamcenterCS/** teamcenter cs */ 
            };

            private: IdxImportBuilderImpl * m_idximportbuilder_impl;
            private: friend class  _IdxImportBuilderBuilder;
            protected: IdxImportBuilder();
            public: ~IdxImportBuilder();
            /**Returns  the location of IDX data. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::IdxImportBuilder::DataLocation IdxDataFrom
            (
            );
            /**Sets  the location of IDX data. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdxDataFrom
            (
                NXOpen::PcbExchange::IdxImportBuilder::DataLocation idxDataFrom /** idxdatafrom */ 
            );
            /**Returns  the baseline file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BaselineFile
            (
            );
            /**Sets  the baseline file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBaselineFile
            (
                const NXString & baselineFile /** baselinefile */ 
            );
            /**Sets  the baseline file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBaselineFile
            (
                const char * baselineFile /** baselinefile */ 
            );
            /**Returns  the flag indicating whether to use the current work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCurrentPart
            (
            );
            /**Sets  the flag indicating whether to use the current work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetUseCurrentPart
            (
                bool useCurrentPart /** usecurrentpart */ 
            );
            /**Returns  the IDX number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString IdxNumber
            (
            );
            /**Sets  the IDX number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetIdxNumber
            (
                const NXString & idxNumber /** idxnumber */ 
            );
            /**Sets  the IDX number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetIdxNumber
            (
                const char * idxNumber /** idxnumber */ 
            );
            /**Returns  the IDX revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString IdxRevision
            (
            );
            /**Sets  the IDX revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetIdxRevision
            (
                const NXString & idxRevision /** idxrevision */ 
            );
            /**Sets  the IDX revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetIdxRevision
            (
                const char * idxRevision /** idxrevision */ 
            );
            /**Returns  the flag indicating whether to use existing components. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseExistComp
            (
            );
            /**Sets  the flag indicating whether to use existing components. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseExistComp
            (
                bool useExistComp /** useexistcomp */ 
            );
            /**Returns  the output part file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputPartFile
            (
            );
            /**Sets  the output part file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOutputPartFile
            (
                const NXString & outputPartString /** outputpartstring */ 
            );
            /**Sets  the output part file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetOutputPartFile
            (
                const char * outputPartString /** outputpartstring */ 
            );
            /**Returns  the assembly number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssemblyNumber
            (
            );
            /**Sets  the assembly number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyNumber
            (
                const NXString & assemblyNumber /** assemblynumber */ 
            );
            /**Sets  the assembly number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void SetAssemblyNumber
            (
                const char * assemblyNumber /** assemblynumber */ 
            );
            /**Returns  the assembly revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssemblyRevision
            (
            );
            /**Sets  the assembly revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyRevision
            (
                const NXString & assemblyRevision /** assemblyrevision */ 
            );
            /**Sets  the assembly revision. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void SetAssemblyRevision
            (
                const char * assemblyRevision /** assemblyrevision */ 
            );
            /**Returns  the assembly name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssemblyName
            (
            );
            /**Sets  the assembly name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetAssemblyName
            (
                const NXString & assemblyName /** assemblyname */ 
            );
            /**Sets  the assembly name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetAssemblyName
            (
                const char * assemblyName /** assemblyname */ 
            );
            /**Returns  the collaboration directory. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CollaborationDir
            (
            );
            /**Sets  the collaboration directory. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetCollaborationDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the collaboration directory. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetCollaborationDir
            (
                const char * foldername /** foldername */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
