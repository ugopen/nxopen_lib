#ifndef NXOpen_CAE_POSTSCENARIODATAMATCHESINPUT_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIODATAMATCHESINPUT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioDataMatchesInput.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioDataMatch.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioDataMatchesInput;
    }
    namespace CAE
    {
        class PostScenarioDataMatch;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioDataMatchesInputImpl;
        /**  @brief   
                    Represents the default data matched to slots (@link NXOpen::CAE::PostScenarioBuilderSlot NXOpen::CAE::PostScenarioBuilderSlot@endlink ). 
                  

         
                 
                 
                      <br> 
                        This is an input for @link NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideMatchCallback NXOpen::CAE::PostScenarioDescriptorBuilder::OverrideMatchCallback@endlink  callback
                      <br> 
                      <br> 
                        A @link NXOpen::CAE::PostScenarioDataMatchesInput NXOpen::CAE::PostScenarioDataMatchesInput@endlink  has:
                        <ul>
                            <li> 
                                The names of preferred data sources 
                            </li>
                            <li> 
                                The name of the selected input definition 
                            </li>
                            <li>
                                A list with the available data matches for each slot name 
                            </li>
                        </ul>
                        You can find more details in the methods of this class.
                      <br> 
                      <br> 
                        See @link NXOpen::CAE::PostScenarioDataMatch NXOpen::CAE::PostScenarioDataMatch@endlink  for details about the data match.
                      <br> 
                 
             <br> No support for KF.  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioDataMatchesInput : public NXOpen::TransientObject
        {
            private: PostScenarioDataMatchesInputImpl * m_postscenariodatamatchesinput_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioDataMatchesInput(void *ptr);
            /// \endcond 
            /** Dispose of this instance. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioDataMatchesInput();
            /**  @brief  
                            Returns the names of preferred data sources which is a list of the default data source expected by 
                            the user and this influence the default configuration of a scenario.
                         

             
                        
                         
                           You should take this list into consideration when you override the initial configuration.
                           See also @link NXOpen::CAE::PostScenarioParameters NXOpen::CAE::PostScenarioParameters@endlink  
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetNamesOfPreferredDataSources
            (
            );
            /**Returns  the selected input definition name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedInputDefinitionName
            (
            );
            /**  @brief 
                            Returns the available data matches for slot by name 
                         

             
                        
                            See also @link NXOpen::CAE::PostScenarioDataMatch NXOpen::CAE::PostScenarioDataMatch@endlink  and 
                            @link NXOpen::CAE::PostScenarioBuilderSlot NXOpen::CAE::PostScenarioBuilderSlot@endlink 
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioDataMatch *> GetSlotDataMatches
            (
                const NXString & slotName /** slotname */ 
            );
            /**  @brief 
                            Returns the available data matches for slot by name 
                         

             
                        
                            See also @link NXOpen::CAE::PostScenarioDataMatch NXOpen::CAE::PostScenarioDataMatch@endlink  and 
                            @link NXOpen::CAE::PostScenarioBuilderSlot NXOpen::CAE::PostScenarioBuilderSlot@endlink 
                        
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::CAE::PostScenarioDataMatch *> GetSlotDataMatches
            (
                const char * slotName /** slotname */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
