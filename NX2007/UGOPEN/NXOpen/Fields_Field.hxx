#ifndef NXOpen_FIELDS_FIELD_HXX_INCLUDED
#define NXOpen_FIELDS_FIELD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_Field.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Xyplot_Plot.hxx>
#include <NXOpen/Fields_FieldEvaluator.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class Field;
    }
    class BasePart;
    namespace CAE
    {
        namespace Xyplot
        {
            class Plot;
        }
    }
    class DisplayableObject;
    namespace Fields
    {
        class FieldEvaluator;
    }
    namespace Fields
    {
        class FieldFolder;
    }
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class IApplicationData;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    namespace Fields
    {
        class _FieldBuilder;
        class FieldImpl;
        /**  @brief Represents an Field abstract class. 

          
                 <br> Fields represent a way of defining a function for one or more dependent 
                domains/variables (see @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink ) based on relationships 
                to one or more independent domains/variables (time, temperature, etc.). <br> 
                 <br> Fields are a generic, reusable concept that crosses many 
                areas of functionality.  Defined properly, they provide an extendable concept that can 
                service both simple and complicated needs, for example,  modeling elements, properties, 
                materials, boundary conditions in CAE/FEM applications. <br>  
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  Field : public NXOpen::DisplayableObject
        {
            /** plotting options*/
            public: enum PlotOption
            {
                PlotOptionInterpolatedValues/** interpolated values */ ,
                PlotOptionInterpolatedValuesWithBounds/** interpolated values with bounds */ ,
                PlotOptionRawTableValues/** raw table values */ 
            };

            private: FieldImpl * m_field_impl;
            private: friend class  _FieldBuilder;
            protected: Field();
            public: ~Field();
            /** Returns a field evaluator which can be used to evaluate this field.
                     @return  Field Evaluator 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator * GetFieldEvaluator
            (
            );
            /** Set part context.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartContext
            (
            );
            /** Copy the field to the target part.
                     @return  newly created field 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * CreateCopyInPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Create a new table field from this field (regardless of type).  Note
                    * that the table will be created have the N number of rows, where
                    * N is the product of the number of points for each independent variable, 
                    * resulting in a grid (or lattice).  The resulting field will be in the
                    * same part.
                     @return  newly created table 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldTable * CreateTableInPart
            (
                NXOpen::BasePart * targetPart /** target part */
            );
            /** Update the name of the field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Rename
            (
                const NXString & newName /** new field name */
            );
            /** Update the name of the field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void Rename
            (
                const char * newName /** new field name */
            );
            /** Set the spatial map for the formula field.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpatialMap
            (
                NXOpen::Fields::SpatialMap * overrideMap /** spatial map to set */
            );
            /** Returns the spatial map for the formula field if one exists.
                     @return  spatial map  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap * GetSpatialMap
            (
            );
            /** Delete this field; destroys the field and removes all references to it.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
            /** Creates displayed graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */
            );
            /** Plots or overlays graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */
            );
            /** Plots or overlays graphs of the Field's specified independent variable
                        versus all the Field's dependent variables
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int windowDevice /** great than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */
            );
            /** Plots or overlays graphs of the Field's specified independent variable
                        versus all the Field's dependent variables; returns newly created plot object(s).
                     
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int windowDevice /** great than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */,
                std::vector<NXOpen::CAE::Xyplot::Plot *> & plots /** Created plot(s) */
            );
            /** Plots or overlays graphs of the Field's specified independent variable 
                        versus all the Field's scaled dependent variables; returns newly created plot object(s).
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraph
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int windowDevice /** great than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */,
                double scaleFactor /** scale dependent variable(s) */,
                std::vector<NXOpen::CAE::Xyplot::Plot *> & plots /** Created plot(s) */
            );
            /** Plots or overlays graphs of the Field's specified independent variable raw data or interpolated data
                        versus all the Field's scaled dependent variables; returns newly created plot object(s).
                     
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraphPlotData
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int windowDevice /** great than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */,
                double scaleFactor /** scale dependent variable(s) */,
                NXOpen::Fields::Field::PlotOption plotOption /** whether to plot raw table data or bounded interpolation or default interpolated values */,
                std::vector<NXOpen::CAE::Xyplot::Plot *> & plots /** Created plot(s) */
            );
            /** Plots the Field's specified independent variable 
                        versus all the Field's scaled dependent variables as an Argand graph; returns newly created plot object(s).
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void XYGraphArgand
            (
                NXOpen::Fields::FieldVariable * indepVar /** the specified independent variable for which to create the graph */,
                double abscissaMinimum /** the minimum bounds along the abscissa  */,
                double abscissaMaximum /** the maximum bounds along the abscissa  */,
                int abscissaPointCount /** the number of points to graph along the abscissa.
                                                                                         the number of times to evaluate the graphed independent variable */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 1 independent variable, this parameter is NULL */,
                int windowDevice /** great than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                std::vector<NXOpen::CAE::Xyplot::Plot *> & plots /** Created plot(s) */
            );
            /** Update the description of the field.
                    
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                std::vector<NXString> & lines /** new description */
            );
            /** Returns the description of the field.
                     @return  description 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Update the ID/Label of the field.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdLabel
            (
                int idLabel /** ID/Label */
            );
            /** Returns the ID/Label of the field.
                     @return  ID/Label 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIdLabel
            (
            );
            /**Returns  a value that indicates whether this field is a user created/managed field.
                        Many fields are created automatically by the system for internal uses. The life of these
                        fields is managed by the objects that own them and so these fields are 
                        not consider user fields. 
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool IsUserField
            (
            );
            /**Returns  a value that indicates whether this field is locked against edits. 
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool IsLocked
            (
            );
            /** Returns the dependent variables for this @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink   
                     @return  dependent variables for this @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetDependentVariables
            (
            );
            /** Returns the independent variables for this @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink   
                     @return  independent variables for this @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetIndependentVariables
            (
            );
            /** Plots or overlays graphs of the Field's specified x-axis and z-axis independent variables
                        versus the Field's specified y-axis dependent variable ; returns newly created plot object.
                      @return  Created plot(s) 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Xyplot::Plot * XYGraph3D
            (
                NXOpen::Fields::FieldVariable * xAxisIndepVar /** the specified x-axis independent variable for which to create the graph */,
                double xAxisBndsMinimum /** the minimum bounds along the x-axis  */,
                double xAxisBndsMaximum /** the maximum bounds along the x-axis  */,
                int xAxisBndsSampleSize /** the sample size to graph along the x-axis.
                                                                                      the number of times to evaluate the x-axis independent variable */,
                NXOpen::Fields::FieldVariable * zAxisIndepVar /** the specified z-Axis independent variable for which to create the graph */,
                double zAxisBndsMinimum /** the minimum bounds along the z-Axis  */,
                double zAxisBndsMaximum /** the maximum bounds along the z-Axis  */,
                int zAxisBndsSampleSize /** the sample size to graph along the z-Axis.
                                                                                      the number of times to evaluate the z-Axis independent variable */,
                NXOpen::Fields::FieldVariable * yAxisDepVar /** the specified y-Axis dependent variable for which to create the graph */,
                const std::vector<NXOpen::Fields::FieldVariable *> & constantIndepVarArray /**
                                                                                         independent variables to hold constant 
                                                                                         If the field has only 2 independent variables, this parameter is NULL */,
                const std::vector<double> & constantIndepVarValueArray /** independent variables constant values
                                                                                         If the field has only 2 independent variables, this parameter is NULL */,
                bool interpolateTableData /** a true value means that the table field data will be interpolated if there are more than 2 independent variables. 
                                                                                         a false value means that the data is plotted directly from the table and the constant values will be ignored.
                                                                                         this value is only used for table fields with over 2 independent variables.*/,
                int windowDevice /** greater than 0. the index of display device to show the graph. 1 represents main graphic window*/,
                int viewIndex /** 0 thru 8, viewport number to place the graph in */,
                bool overlay /** create a new plot or add to existing */,
                double scaleFactor /** scale dependent variable */
            );
            /** Adds the specified application data object to the field
                         
                        NOTE: Only one application data object per IApplication can be added
                        and the data must be owned by an IApplication with the same Part::Field::Main 
                        as the field.  
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void AddApplicationData
            (
                NXOpen::Fields::IApplicationData * appData /** appdata */ 
            );
            /** Retrieves the application data associated with the field for the specified application.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::IApplicationData * GetApplicationData
            (
                const NXString & applicationName /** applicationname */ 
            );
            /** Retrieves the application data associated with the field for the specified application.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::IApplicationData * GetApplicationData
            (
                const char * applicationName /** applicationname */ 
            );
            /** Reloads the field from its data source.  If the data source does not support
                    reload functionality or if the field does not have a data source
                    the function will do nothing.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void Reload
            (
            );
            /** Set lock value that indicates whether this field is locked against edits. 
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLocked
            (
                bool locked /** Lock value of field */
            );
            /** Get the parent folder for this field.  A null folder returned is in the root collection.  @return  folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldFolder * GetFolder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
