#ifndef NXOpen_FALCON_ACTIVITYPOINTBUILDER_HXX_INCLUDED
#define NXOpen_FALCON_ACTIVITYPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Falcon_ActivityPointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_falcon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Falcon
    {
        class ActivityPointBuilder;
    }
    class Builder;
    class Point;
    namespace Falcon
    {
        class _ActivityPointBuilderBuilder;
        class ActivityPointBuilderImpl;
        /** the Class for creating Activity Point  <br> To create a new instance of this class, use @link NXOpen::Falcon::FalconManager::CreateActivityPointBuilder  NXOpen::Falcon::FalconManager::CreateActivityPointBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ActivityPointType </term> <description> 
         
        EmptyStorage </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_FALCONEXPORT  ActivityPointBuilder : public NXOpen::Builder
        {
            private: ActivityPointBuilderImpl * m_activitypointbuilder_impl;
            private: friend class  _ActivityPointBuilderBuilder;
            protected: ActivityPointBuilder();
            public: ~ActivityPointBuilder();
            /**Returns  the activity point type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ActivityPointType
            (
            );
            /**Sets  the activity point type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetActivityPointType
            (
                const NXString & activityPointType /** activitypointtype */ 
            );
            /**Sets  the activity point type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetActivityPointType
            (
                const char * activityPointType /** activitypointtype */ 
            );
            /**Returns  the name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the position 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Position
            (
            );
            /**Sets  the position 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPosition
            (
                NXOpen::Point * position /** position */ 
            );
            /** Returns the description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );
            /** Sets the description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetDescription
            (
                const std::vector<NXString> & description /** description */ 
            );
            /**Returns  the sensitivity of Process Parameters Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsProcessParametersGroupEnabled
            (
            );
            /**Sets  the sensitivity of Process Parameters Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetProcessParametersGroupEnabled
            (
                bool isProcessParametersGroupEnabled /** isprocessparametersgroupenabled */ 
            );
            /**Returns  the setup time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double SetupTime
            (
            );
            /**Sets  the setup time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSetupTime
            (
                double setupTime /** setuptime */ 
            );
            /**Returns  the setup time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SetupTimeUnit
            (
            );
            /**Sets  the setup time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSetupTimeUnit
            (
                const NXString & setupTimeUnit /** setuptimeunit */ 
            );
            /**Sets  the setup time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetSetupTimeUnit
            (
                const char * setupTimeUnit /** setuptimeunit */ 
            );
            /**Returns  the cycle time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double CycleTime
            (
            );
            /**Sets  the cycle time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetCycleTime
            (
                double cycleTime /** cycletime */ 
            );
            /**Returns  the cycle time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CycleTimeUnit
            (
            );
            /**Sets  the cycle time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetCycleTimeUnit
            (
                const NXString & cycleTimeUnit /** cycletimeunit */ 
            );
            /**Sets  the cycle time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetCycleTimeUnit
            (
                const char * cycleTimeUnit /** cycletimeunit */ 
            );
            /**Returns  the batch size 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double BatchSize
            (
            );
            /**Sets  the batch size 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBatchSize
            (
                double batchSize /** batchsize */ 
            );
            /**Returns  the scrap rate 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double ScrapRate
            (
            );
            /**Sets  the scrap rate 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetScrapRate
            (
                double scrapRate /** scraprate */ 
            );
            /**Returns  the available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double AvailableTime
            (
            );
            /**Sets  the available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAvailableTime
            (
                double availableTime /** availabletime */ 
            );
            /**Returns  the available time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AvailableTimeUnit
            (
            );
            /**Sets  the available time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAvailableTimeUnit
            (
                const NXString & availableTimeUnit /** availabletimeunit */ 
            );
            /**Sets  the available time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetAvailableTimeUnit
            (
                const char * availableTimeUnit /** availabletimeunit */ 
            );
            /**Returns  the sensitivity of Off Aisle Distance Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsOffAisleDistanceGroupEnabled
            (
            );
            /**Sets  the sensitivity of Off Aisle Distance Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetOffAisleDistanceGroupEnabled
            (
                bool isOffAisleDistanceGroupEnabled /** isoffaisledistancegroupenabled */ 
            );
            /**Returns  the incoming full 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double IncomingFull
            (
            );
            /**Sets  the incoming full 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetIncomingFull
            (
                double incomingFull /** incomingfull */ 
            );
            /**Returns  the incoming empty 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double IncomingEmpty
            (
            );
            /**Sets  the incoming empty 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetIncomingEmpty
            (
                double incomingEmpty /** incomingempty */ 
            );
            /**Returns  the outgoing full 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double OutgoingFull
            (
            );
            /**Sets  the outgoing full 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetOutgoingFull
            (
                double outgoingFull /** outgoingfull */ 
            );
            /**Returns  the outgoing empty 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double OutgoingEmpty
            (
            );
            /**Sets  the outgoing empty 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetOutgoingEmpty
            (
                double outgoingEmpty /** outgoingempty */ 
            );
            /**Returns  the off floor height 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double OffFloorHeight
            (
            );
            /**Sets  the off floor height 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetOffFloorHeight
            (
                double offFloorHeight /** offfloorheight */ 
            );
            /**Returns  the sensitivity of Dock Capacity Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsDockCapacityGroupEnabled
            (
            );
            /**Sets  the sensitivity of Dock Capacity Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetDockCapacityGroupEnabled
            (
                bool isDockCapacityGroupEnabled /** isdockcapacitygroupenabled */ 
            );
            /**Returns  the trucks per day 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double TrucksPerDay
            (
            );
            /**Sets  the trucks per day 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetTrucksPerDay
            (
                double trucksPerDay /** trucksperday */ 
            );
            /**Returns  the loads per truck 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double LoadsPerTruck
            (
            );
            /**Sets  the loads per truck 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetLoadsPerTruck
            (
                double loadsPerTruck /** loadspertruck */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
