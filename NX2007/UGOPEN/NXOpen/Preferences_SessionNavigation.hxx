#ifndef NXOpen_PREFERENCES_SESSIONNAVIGATION_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONNAVIGATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionNavigation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SessionNavigation;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SessionNavigationImpl;
        /** Represents the set of navigation preferences applicable to entire session.
               <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::SessionPreferences  NXOpen::Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX12.0.2.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SessionNavigation
        {
            /** Specifies perspective on exit.
                      */
            public: enum PerspectiveStatusOnExit
            {
                PerspectiveStatusOnExitRetain/** Retains the perspective view when exiting fly-through */,
                PerspectiveStatusOnExitRevertToPreviousState/** Reverts the perspective view to the state it had before entering fly-through */
            };

            private: SessionNavigationImpl * m_sessionnavigation_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SessionNavigation(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionNavigation();
            /**Returns  the navigation speed. The higher the value, the faster the speed of the navigation. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double NavigationSpeed
            (
            );
            /**Sets  the navigation speed. The higher the value, the faster the speed of the navigation. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetNavigationSpeed
            (
                double navigationSpeed /** navigationspeed */ 
            );
            /**Returns  the adaptive speed. If adaptive speed is toggled on, gradually slows down the navigation 
                        speed when approaching a reference location and gradually speeds up the navigation speed 
                        when moving away from a reference location. A reference location is a point coordinate 
                        derived from setting the persistent Rotation Reference (e.g., snapping to a point on face).  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool AdaptiveSpeed
            (
            );
            /**Sets  the adaptive speed. If adaptive speed is toggled on, gradually slows down the navigation 
                        speed when approaching a reference location and gradually speeds up the navigation speed 
                        when moving away from a reference location. A reference location is a point coordinate 
                        derived from setting the persistent Rotation Reference (e.g., snapping to a point on face).  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAdaptiveSpeed
            (
                bool adaptiveSpeed /** adaptivespeed */ 
            );
            /**Returns  the perspective on exit. These states mean: Retains the perspective view when exiting fly-through, or
                       reverts the perspective view to the state it had before entering fly-through.
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionNavigation::PerspectiveStatusOnExit PerspectiveOnFlyThoughExit
            (
            );
            /**Sets  the perspective on exit. These states mean: Retains the perspective view when exiting fly-through, or
                       reverts the perspective view to the state it had before entering fly-through.
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetPerspectiveOnFlyThoughExit
            (
                NXOpen::Preferences::SessionNavigation::PerspectiveStatusOnExit perspectiveOnExit /** perspectiveonexit */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
