#ifndef NXOpen_TOOLING_LETTERINGINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_LETTERINGINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_LetteringInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class LetteringInsertBuilder;
    }
    class Builder;
    class Expression;
    class ScCollector;
    class TaggedObject;
    namespace Tooling
    {
        class _LetteringInsertBuilderBuilder;
        class LetteringInsertBuilderImpl;
        /** Represents lettering insert builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateLetteringInsertBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateLetteringInsertBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BottomingPlateClearance </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        BottomingPlateToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DiePlateClearance </term> <description> 
         
        0.05 </description> </item> 

        <item><term> 
         
        DiePlateToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DraftAngularDim.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EndDistanceLinearDim.Value </term> <description> 
         
        0.2 (millimeters part), 0.08 (inches part) </description> </item> 

        <item><term> 
         
        FontStyle </term> <description> 
         
        Regular </description> </item> 

        <item><term> 
         
        Height.Value </term> <description> 
         
        2 (millimeters part), 0.08 (inches part) </description> </item> 

        <item><term> 
         
        Length.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        LetterDirection </term> <description> 
         
        Up </description> </item> 

        <item><term> 
         
        OnlyAddLetteringStandardPartToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ParentPartNode </term> <description> 
         
        NoParent </description> </item> 

        <item><term> 
         
        PunchPlateClearance </term> <description> 
         
        0.025 </description> </item> 

        <item><term> 
         
        PunchPlateToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StartDistanceLinearDim.Value </term> <description> 
         
        -0.1 (millimeters part), -0.04 (inches part) </description> </item> 

        <item><term> 
         
        StripperPlateClearance </term> <description> 
         
        0.05 </description> </item> 

        <item><term> 
         
        StripperPlateToggle </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  LetteringInsertBuilder : public NXOpen::Builder
        {
            /** Specify the parent node of insert part. */
            public: enum ParentPartNodeOption
            {
                ParentPartNodeOptionNoParent/** No parent node */
            };

            /** Specify the direction of letter. */
            public: enum LetterDirectionOption
            {
                LetterDirectionOptionUp/** Up direction */,
                LetterDirectionOptionDown/** Down direction */
            };

            /** Script or character set options */
            public: enum ScriptOptions
            {
                ScriptOptionsOther/** Specifies a default character set based on current system locale */,
                ScriptOptionsWestern/** Specifies the English character set */,
                ScriptOptionsBaltic/** Specifies the Baltic (Northeastern European) character set */,
                ScriptOptionsChineseBig5/** Specifies the "traditional" Chinese character set */,
                ScriptOptionsCentralEuropean/** Specifies a Eastern European character set */,
                ScriptOptionsGb2312/** Specifies the "simplified" Chinese character set  */,
                ScriptOptionsGreek/** Specifies the Greek character set */,
                ScriptOptionsHangul/** Specifies the Hangul Korean character set */,
                ScriptOptionsMac/** Specifies the Apple Macintosh character set */,
                ScriptOptionsOem/** Specifies a mapping to one of the OEM code pages, according to the current system locale setting */,
                ScriptOptionsCyrillic/** Specifies the Russian Cyrillic character set */,
                ScriptOptionsShiftJIS/** Specifies the Japanese character set */,
                ScriptOptionsSymbol/** Specifies a character set of symbols */,
                ScriptOptionsTurkish/** Specifies the Turkish character set */,
                ScriptOptionsVietnamese/** Specifies the Vietnamese character set */,
                ScriptOptionsJohab/** Specifies the Johab Korean character set */,
                ScriptOptionsArabic/** Specifies the Arabic character set */,
                ScriptOptionsHebrew/** Specifies the Hebrew character set */,
                ScriptOptionsThai/** Specifies the Thai character set */
            };

            /** Font style options */
            public: enum FontStyleOptions
            {
                FontStyleOptionsRegular/** Regular style */,
                FontStyleOptionsItalic/** Italic style */,
                FontStyleOptionsBold/** Bold style */,
                FontStyleOptionsBoldItalic/** Bold italic style */
            };

            private: LetteringInsertBuilderImpl * m_letteringinsertbuilder_impl;
            private: friend class  _LetteringInsertBuilderBuilder;
            protected: LetteringInsertBuilder();
            public: ~LetteringInsertBuilder();
            /**Returns  the select face 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the parent part node 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LetteringInsertBuilder::ParentPartNodeOption ParentPartNode
            (
            );
            /**Sets  the parent part node 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPartNode
            (
                NXOpen::Tooling::LetteringInsertBuilder::ParentPartNodeOption parentPartNode /** parentpartnode */ 
            );
            /**Returns  the letter direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LetteringInsertBuilder::LetterDirectionOption LetterDirection
            (
            );
            /**Sets  the letter direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLetterDirection
            (
                NXOpen::Tooling::LetteringInsertBuilder::LetterDirectionOption letterDirection /** letterdirection */ 
            );
            /**Returns  the input letter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString InputLetter
            (
            );
            /**Sets  the input letter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInputLetter
            (
                const NXString & inputLetter /** inputletter */ 
            );
            /**Sets  the input letter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetInputLetter
            (
                const char * inputLetter /** inputletter */ 
            );
            /**Returns  the start distance linear dim 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartDistanceLinearDim
            (
            );
            /**Returns  the end distance linear dim 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndDistanceLinearDim
            (
            );
            /**Returns  the draft angular dim 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftAngularDim
            (
            );
            /**Returns  the die plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool DiePlateToggle
            (
            );
            /**Sets  the die plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDiePlateToggle
            (
                bool diePlateToggle /** dieplatetoggle */ 
            );
            /**Returns  the die plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double DiePlateClearance
            (
            );
            /**Sets  the die plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDiePlateClearance
            (
                double diePlateClearance /** dieplateclearance */ 
            );
            /**Returns  the punch plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPlateToggle
            (
            );
            /**Sets  the punch plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPlateToggle
            (
                bool punchPlateToggle /** punchplatetoggle */ 
            );
            /**Returns  the punch plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPlateClearance
            (
            );
            /**Sets  the punch plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPlateClearance
            (
                double punchPlateClearance /** punchplateclearance */ 
            );
            /**Returns  the bottoming plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool BottomingPlateToggle
            (
            );
            /**Sets  the bottoming plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBottomingPlateToggle
            (
                bool bottomingPlateToggle /** bottomingplatetoggle */ 
            );
            /**Returns  the bottoming plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double BottomingPlateClearance
            (
            );
            /**Sets  the bottoming plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBottomingPlateClearance
            (
                double bottomingPlateClearance /** bottomingplateclearance */ 
            );
            /**Returns  the stripper plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool StripperPlateToggle
            (
            );
            /**Sets  the stripper plate toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStripperPlateToggle
            (
                bool stripperPlateToggle /** stripperplatetoggle */ 
            );
            /**Returns  the stripper plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double StripperPlateClearance
            (
            );
            /**Sets  the stripper plate clearance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStripperPlateClearance
            (
                double stripperPlateClearance /** stripperplateclearance */ 
            );
            /** Create lettering insert by standard insert method. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void StandardInsert
            (
            );
            /**Returns  the only add lettering standard part toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool OnlyAddLetteringStandardPartToggle
            (
            );
            /**Sets  the only add lettering standard part toggle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOnlyAddLetteringStandardPartToggle
            (
                bool onlyAddLetteringStandardPartToggle /** onlyaddletteringstandardparttoggle */ 
            );
            /**Returns  the font 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Font
            (
            );
            /** Selects the font along with appropriate charactor set 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SelectFont
            (
                const NXString & fontName /** Font */,
                NXOpen::Tooling::LetteringInsertBuilder::ScriptOptions script /** Charactor set */
            );
            /** Selects the font along with appropriate charactor set 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SelectFont
            (
                const char * fontName /** Font */,
                NXOpen::Tooling::LetteringInsertBuilder::ScriptOptions script /** Charactor set */
            );
            /**Returns  the script 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LetteringInsertBuilder::ScriptOptions Script
            (
            );
            /**Sets  the script 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetScript
            (
                NXOpen::Tooling::LetteringInsertBuilder::ScriptOptions script /** script */ 
            );
            /**Returns  the font style 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LetteringInsertBuilder::FontStyleOptions FontStyle
            (
            );
            /**Sets  the font style 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFontStyle
            (
                NXOpen::Tooling::LetteringInsertBuilder::FontStyleOptions fontStyle /** fontstyle */ 
            );
            /**Returns  the length 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the height 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the wizard type attribute 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type attribute 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /**Returns  the parent part name to create insert. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPartName
            (
                const NXString & parentPartName /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetParentPartName
            (
                const char * parentPartName /** Specifies the parent part name */
            );
            /** Get the parent names  @return  Parent names list 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetParentNames
            (
            );
            /** Set the parent names 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentNames
            (
                std::vector<NXString> & parentNames /** Parent names list */
            );
            /** Gets selected face occurrences 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSelectedFaceOccurrences
            (
                std::vector<NXOpen::TaggedObject *> & selectedFaceOccurrences /** selectedfaceoccurrences */ 
            );
            /** Sets selected face occurrences 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectedFaceOccurrences
            (
                const std::vector<NXOpen::TaggedObject *> & selectedFaceOccurrences /** selectedfaceoccurrences */ 
            );
            /** Prepare PDW standard client data for standard part management 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PreparePDWStandardClientData
            (
            );
            /** Post process PDW standard client data after inserting standard part @return  Returns the new created part instance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::TaggedObject * PostProcessPDWStandardClientData
            (
            );
            /**Returns  the new insert instance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * InsertInstanceTag
            (
            );
            /**Sets  the new insert instance 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertInstanceTag
            (
                NXOpen::TaggedObject * insertInstanceTag /** Specifies the new instance instance */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
