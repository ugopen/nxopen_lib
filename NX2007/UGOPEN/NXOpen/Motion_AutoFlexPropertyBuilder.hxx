#ifndef NXOpen_MOTION_AUTOFLEXPROPERTYBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_AUTOFLEXPROPERTYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AutoFlexPropertyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class AutoFlexPropertyBuilder;
    }
    class Builder;
    class DisplayableObject;
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class Link;
    }
    namespace Motion
    {
        class SelectLink;
    }
    class PhysicalMaterial;
    class SelectNXObjectList;
    class TaggedObject;
    namespace Motion
    {
        class _AutoFlexPropertyBuilderBuilder;
        class AutoFlexPropertyBuilderImpl;
        /** Represents a builder of automatic flex property object  <br> To create a new instance of this class, use @link NXOpen::Motion::AutoFlexPropertyCollection::CreateAutoFlexPropertyBuilder  NXOpen::Motion::AutoFlexPropertyCollection::CreateAutoFlexPropertyBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        EnableFrequencyRangeLower </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EnableFrequencyRangeUpper </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EnableNormalModeCount </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        EnableStrain </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EnableStress </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        MeshElementOption </term> <description> 
         
        Parabolic </description> </item> 

        <item><term> 
         
        ModelDefineOption </term> <description> 
         
        SelectGeometry </description> </item> 

        <item><term> 
         
        NormalModeCount </term> <description> 
         
        10 </description> </item> 

        <item><term> 
         
        ProcessOption </term> <description> 
         
        Automatic </description> </item> 

        <item><term> 
         
        SolverOption </term> <description> 
         
        SimcenterNastran </description> </item> 

        </list> 

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  AutoFlexPropertyBuilder : public NXOpen::Builder, public virtual NXOpen::IExternalFileReferencer
        {
            /** AutoFlexProperty process type */
            public: enum ProcessType
            {
                ProcessTypeAutomatic/** automatic */ ,
                ProcessTypeInteractive/** interactive */ 
            };

            /** AutoFlexProperty solver type */
            public: enum SolverType
            {
                SolverTypeSimcenterNastran/** Simcenter Nastran solver */,
                SolverTypeAnsys/** ANSYS solver */,
                SolverTypeAbaqus/** Abaqus solver */
            };

            /** AutoFlexProperty model define type */
            public: enum ModelDefineType
            {
                ModelDefineTypeSelectGeometry/** select geometry */ ,
                ModelDefineTypeSelectFeModelFile/** select fe model file */ 
            };

            /** AutoFlexProperty mesh element type */
            public: enum MeshElementType
            {
                MeshElementTypeParabolic/** parabolic */ ,
                MeshElementTypeLinear/** linear */ 
            };

            /** AutoFlexProperty connection define type */
            public: enum ConnectionDefineType
            {
                ConnectionDefineTypeAssociate/** associate */ ,
                ConnectionDefineTypeCreate/** create */ ,
                ConnectionDefineTypeIgnore/** ignore */ 
            };

            /** AutoFlexProperty connection element type */
            public: enum ConnectionElementType
            {
                ConnectionElementTypeSimcenterNastranRbe2/** simcenter nastran rbe2 */ ,
                ConnectionElementTypeSimcenterNastranRbe3/** simcenter nastran rbe3 */ ,
                ConnectionElementTypeAnsysMpc184/** ansys mpc184 */ ,
                ConnectionElementTypeAbaqusKinematicCoupling/** abaqus kinematic coupling */ ,
                ConnectionElementTypeAbaqusDcoup3d/** abaqus dcoup3d */ 
            };

            private: AutoFlexPropertyBuilderImpl * m_autoflexpropertybuilder_impl;
            private: friend class  _AutoFlexPropertyBuilderBuilder;
            protected: AutoFlexPropertyBuilder();
            public: ~AutoFlexPropertyBuilder();
            /**Returns  the automatic flex name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString AutoFlexName
            (
            );
            /**Sets  the automatic flex name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAutoFlexName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the automatic flex name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetAutoFlexName
            (
                const char * name /** name */ 
            );
            /**Returns  the flexible body name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString FlexBodyName
            (
            );
            /**Sets  the flexible body name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFlexBodyName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the flexible body name. Must be unique across all motion elements. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFlexBodyName
            (
                const char * name /** name */ 
            );
            /**Returns  the selection link 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectLink * Link
            (
            );
            /**Returns  the selection geometry 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns  the thickness expression 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the option that specifies whether to use user defined mesh size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableMeshSize
            (
            );
            /**Sets  the option that specifies whether to use user defined mesh size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableMeshSize
            (
                bool enableMeshSize /** enablemeshsize */ 
            );
            /**Returns  the mesh size expression
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MeshSize
            (
            );
            /**Returns  the mesh element option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::MeshElementType MeshElementOption
            (
            );
            /**Sets  the mesh element option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMeshElementOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::MeshElementType meshElementOption /** meshelementoption */ 
            );
            /**Returns  the material 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * Material
            (
            );
            /**Sets  the material 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterial
            (
                NXOpen::PhysicalMaterial * material /** material */ 
            );
            /**Returns  the option that specifies whether to use normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableNormalModeCount
            (
            );
            /**Sets  the option that specifies whether to use normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableNormalModeCount
            (
                bool enableNormalModeCount /** enablenormalmodecount */ 
            );
            /**Returns  the normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NormalModeCount
            (
            );
            /**Sets  the normal mode count 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetNormalModeCount
            (
                int normalModeCount /** normalmodecount */ 
            );
            /**Returns  the option that specifies whether to use lower frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableFrequencyRangeLower
            (
            );
            /**Sets  the option that specifies whether to use lower frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableFrequencyRangeLower
            (
                bool enableFrequencyRangeLower /** enablefrequencyrangelower */ 
            );
            /**Returns  the frequency range lower expression
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyRangeLower
            (
            );
            /**Returns  the option that specifies whether to use upper frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableFrequencyRangeUpper
            (
            );
            /**Sets  the option that specifies whether to use upper frequency range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableFrequencyRangeUpper
            (
                bool enableFrequencyRangeUpper /** enablefrequencyrangeupper */ 
            );
            /**Returns  the frequency range upper expression
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrequencyRangeUpper
            (
            );
            /**Returns  the option that specifies whether to output stress 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableStress
            (
            );
            /**Sets  the option that specifies whether to output stress 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableStress
            (
                bool toggleStress /** togglestress */ 
            );
            /**Returns  the option that specifies whether to output strain 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableStrain
            (
            );
            /**Sets  the option that specifies whether to output strain 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableStrain
            (
                bool toggleStrain /** togglestrain */ 
            );
            /**Returns  the option that specifies whether to use ERFEM 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool EnableErfem
            (
            );
            /**Sets  the option that specifies whether to use ERFEM 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnableErfem
            (
                bool toggleErfem /** toggleerfem */ 
            );
            /**Returns  the input mesh file 
             <br>  @deprecated Deprecated in NX2007.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  This functionality is no longer supported.") NXString InputMeshFile
            (
            );
            /**Sets  the input mesh file 
             <br>  @deprecated Deprecated in NX2007.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX2007.0.0.  This functionality is no longer supported.") void SetInputMeshFile
            (
                const NXString & meshFile /** meshfile */ 
            );
            /**Sets  the input mesh file 
             <br>  @deprecated Deprecated in NX2007.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetInputMeshFile
            (
                const char * meshFile /** meshfile */ 
            );
            /**Returns  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FemPartName
            (
            );
            /**Sets  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFemPartName
            (
                const NXString & femName /** femname */ 
            );
            /**Sets  the FEM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFemPartName
            (
                const char * femName /** femname */ 
            );
            /**Returns  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SimPartName
            (
            );
            /**Sets  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSimPartName
            (
                const NXString & simName /** simname */ 
            );
            /**Sets  the SIM part name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSimPartName
            (
                const char * simName /** simname */ 
            );
            /**Returns  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SolutionName
            (
            );
            /**Sets  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolutionName
            (
                const NXString & solutionName /** solutionname */ 
            );
            /**Sets  the solution name 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSolutionName
            (
                const char * solutionName /** solutionname */ 
            );
            /**Returns  the process option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::ProcessType ProcessOption
            (
            );
            /**Sets  the process option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetProcessOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::ProcessType processOption /** processoption */ 
            );
            /**Returns  the solver option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::SolverType SolverOption
            (
            );
            /**Sets  the solver option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolverOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::SolverType solverOption /** solveroption */ 
            );
            /** Get link connections 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLinkConnections
            (
                NXOpen::Motion::Link * link /** link */ ,
                std::vector<NXOpen::DisplayableObject *> & connectionObjects /** connectionobjects */ 
            );
            /** Get link connection targets 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetConnectionTargets
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                std::vector<NXOpen::DisplayableObject *> & connectionTargets /** connectiontargets */ 
            );
            /** Set connection target list 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionTargets
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                const std::vector<NXOpen::DisplayableObject *> & connectionTargets /** connectiontargets */ 
            );
            /**Returns  the model define option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::ModelDefineType ModelDefineOption
            (
            );
            /**Sets  the model define option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetModelDefineOption
            (
                NXOpen::Motion::AutoFlexPropertyBuilder::ModelDefineType modelDefineOption /** modeldefineoption */ 
            );
            /** Get connection define option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::ConnectionDefineType GetConnectionDefineOption
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */
            );
            /** Set connection define option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionDefineOption
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                NXOpen::Motion::AutoFlexPropertyBuilder::ConnectionDefineType connectionDefineOption /** connectiondefineoption */ 
            );
            /** Get connection element option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AutoFlexPropertyBuilder::ConnectionElementType GetConnectionElementOption
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */
            );
            /** Set connection element option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionElementOption
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                NXOpen::Motion::AutoFlexPropertyBuilder::ConnectionElementType connectionElementOption /** connectionelementoption */ 
            );
            /** Get connection associate node 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int GetConnectionAssociateNodeID
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */
            );
            /** Set connection associate node 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionAssociateNodeID
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                int associateNodeID /** associatenodeid */ 
            );
            /** Get connection target nodes 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetConnectionTargetNodeIDs
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                std::vector<int> & connectionTargetNodeIDs /** connectiontargetnodeids */ 
            );
            /** Set connection target nodes 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetConnectionTargetNodeIDs
            (
                NXOpen::DisplayableObject * connection /** the connection is coming from @link NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections NXOpen::Motion::AutoFlexPropertyBuilder::GetLinkConnections@endlink */,
                const std::vector<int> & connectionTargetNodes /** connectiontargetnodes */ 
            );
            /** Create a FEM part with a FE solver input file
                     Allowed solver input file types are .bdf .blk .dat .nas
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString CreateFemPartWithSolverInputFile
            (
                const NXString & solverFilePath /** solverfilepath */ 
            );
            /** Create a FEM part with a FE solver input file
                     Allowed solver input file types are .bdf .blk .dat .nas
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXString CreateFemPartWithSolverInputFile
            (
                const char * solverFilePath /** solverfilepath */ 
            );
            /**Returns  the wireframe property 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::TaggedObject * WireFrameProperty
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns  the connectionToNode 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::TaggedObject * ConnectionToNode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the connectionToGeometry 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::TaggedObject * ConnectionToGeometry
            (
            );

            /// \endcond 
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
