#ifndef NXOpen_FEATURES_MORPHMESHCAGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MORPHMESHCAGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MorphMeshCageBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_Subdivision_SelectCageObjectData.hxx>
#include <NXOpen/GeometricUtilities_TransformerData.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MorphMeshCageBuilder;
    }
    class Builder;
    class Expression;
    namespace Features
    {
        namespace Subdivision
        {
            class SelectCageObjectData;
        }
    }
    namespace GeometricUtilities
    {
        class TransformerData;
    }
    class Point;
    class SelectNXObjectList;
    namespace Features
    {
        class _MorphMeshCageBuilderBuilder;
        class MorphMeshCageBuilderImpl;
        /** Represents a @link Features::MorphMeshCageBuilder Features::MorphMeshCageBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Features::MorphMeshCollection::CreateMorphMeshCageBuilder  NXOpen::Features::MorphMeshCollection::CreateMorphMeshCageBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CylinderCircularSegments </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        CylinderLinearSegments </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        Height.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        HeightZ.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        InnerSize.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        LengthX.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        OuterSize.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        Size.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        TorusCircularSegments </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        TorusRadialSegments </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        TubeSegments </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        TubeSize.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        WidthY.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        XSegments </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        YSegments </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        ZSegments </term> <description> 
         
        3 </description> </item> 

        </list> 

         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MorphMeshCageBuilder : public NXOpen::Builder
        {
            /** Type of primitive. */
            public: enum Types
            {
                TypesWrapBody/** wrap body */ ,
                TypesBlock/** block */ ,
                TypesCylinder/** cylinder */ ,
                TypesTube/** tube */ ,
                TypesTorus/** torus */ 
            };

            private: MorphMeshCageBuilderImpl * m_morphmeshcagebuilder_impl;
            private: friend class  _MorphMeshCageBuilderBuilder;
            protected: MorphMeshCageBuilder();
            public: ~MorphMeshCageBuilder();
            /**Returns  the type. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MorphMeshCageBuilder::Types Type
            (
            );
            /**Sets  the type. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetType
            (
                NXOpen::Features::MorphMeshCageBuilder::Types type /** type */ 
            );
            /**Returns  the origin. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Origin
            (
            );
            /**Sets  the origin. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetOrigin
            (
                NXOpen::Point * origin /** origin */ 
            );
            /**Returns  the size. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Size
            (
            );
            /**Returns  the height. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the length in X direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LengthX
            (
            );
            /**Returns  the width in Y direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * WidthY
            (
            );
            /**Returns  the height in Z direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HeightZ
            (
            );
            /** Updates the mesh data after changes in the origin. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateMesh
            (
            );
            /**Returns  the transformation tool. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TransformerData * Transformer
            (
            );
            /**Returns  the inner size of torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InnerSize
            (
            );
            /**Returns  the outer size of torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OuterSize
            (
            );
            /**Returns  the number of segments in X direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int XSegments
            (
            );
            /**Sets  the number of segments in X direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetXSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in Y direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int YSegments
            (
            );
            /**Sets  the number of segments in Y direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetYSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in Z direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int ZSegments
            (
            );
            /**Sets  the number of segments in Z direction. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetZSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in radial direction for torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int TorusRadialSegments
            (
            );
            /**Sets  the number of segments in radial direction for torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetTorusRadialSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in circular direction for torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int TorusCircularSegments
            (
            );
            /**Sets  the number of segments in circular direction for torus. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetTorusCircularSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in circular direction for cylinder. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int CylinderCircularSegments
            (
            );
            /**Sets  the number of segments in circular direction for cylinder. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderCircularSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the number of segments in linear direction for cylinder. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int CylinderLinearSegments
            (
            );
            /**Sets  the number of segments in linear direction for cylinder. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCylinderLinearSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the object as path of tube. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Subdivision::SelectCageObjectData * PathObject
            (
            );
            /**Returns  the size of tube in cross section. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TubeSize
            (
            );
            /**Returns  the number of tube segments. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int TubeSegments
            (
            );
            /**Sets  the number of tube segments. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetTubeSegments
            (
                int numSegments /** numsegments */ 
            );
            /**Returns  the mesh bodies. The cage of Body type will enclose the selected mesh bodies 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * MeshBodies
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
