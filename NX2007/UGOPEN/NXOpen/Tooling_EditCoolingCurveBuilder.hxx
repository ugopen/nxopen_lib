#ifndef NXOpen_TOOLING_EDITCOOLINGCURVEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_EDITCOOLINGCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_EditCoolingCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class EditCoolingCurveBuilder;
    }
    class Builder;
    class Expression;
    class Point;
    class TaggedObject;
    namespace Tooling
    {
        class _EditCoolingCurveBuilderBuilder;
        class EditCoolingCurveBuilderImpl;
        /** Builder for Edit Cooling Curve in NX  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateEditCoolingCurveBuilder  NXOpen::Tooling::MoldwizardManager::CreateEditCoolingCurveBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Associative </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ExtendMethod </term> <description> 
         
        Linear </description> </item> 

        <item><term> 
         
        OriginalCurveLayer </term> <description> 
         
        255 </description> </item> 

        <item><term> 
         
        OriginalCurveOperation </term> <description> 
         
        Hide </description> </item> 

        <item><term> 
         
        TangentShapeControlScaleValue </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  EditCoolingCurveBuilder : public NXOpen::Builder
        {
            /** The types for action of editing cooling curve. */
            public: enum Types
            {
                TypesTrim/** trim */ ,
                TypesExtend/** extend */ ,
                TypesDivide/** divide */ ,
                TypesBridge/** bridge */ ,
                TypesMove/** move */ ,
                TypesDrag/** drag */ 
            };

            /** Extension method for extending cooling curve */
            public: enum ExtensionMethod
            {
                ExtensionMethodNatural/** Natural method */,
                ExtensionMethodLinear/** Linear method */,
                ExtensionMethodCircular/** Circular method */
            };

            /** Operation to be performed on the original curve */
            public: enum OriginalCurveOperationType
            {
                OriginalCurveOperationTypeNone/** none */ ,
                OriginalCurveOperationTypeHide/** hide */ ,
                OriginalCurveOperationTypeMovetoLayer/** moveto layer */ ,
                OriginalCurveOperationTypeDelete/** delete */ 
            };

            private: EditCoolingCurveBuilderImpl * m_editcoolingcurvebuilder_impl;
            private: friend class  _EditCoolingCurveBuilderBuilder;
            protected: EditCoolingCurveBuilder();
            public: ~EditCoolingCurveBuilder();
            /**Returns  the first point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * FirstPoint
            (
            );
            /**Sets  the first point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFirstPoint
            (
                NXOpen::Point * firstPoint /** firstpoint */ 
            );
            /**Returns  the flag that indicates whether to reverse the trim side of the first point selected curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseFirstPointTrimSide
            (
            );
            /**Sets  the flag that indicates whether to reverse the trim side of the first point selected curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseFirstPointTrimSide
            (
                bool reverseFirstPointTrimSide /** reversefirstpointtrimside */ 
            );
            /**Returns  the second point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SecondPoint
            (
            );
            /**Sets  the second point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSecondPoint
            (
                NXOpen::Point * secondPoint /** secondpoint */ 
            );
            /**Returns  the flag that indicates whether to reverse the trim side of the second point selected curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSecondPointTrimSide
            (
            );
            /**Sets  the flag that indicates whether to reverse the trim side of the second point selected curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseSecondPointTrimSide
            (
                bool reverseSecondPointTrimSide /** reversesecondpointtrimside */ 
            );
            /**Returns  the extend method for extending curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::EditCoolingCurveBuilder::ExtensionMethod ExtendMethod
            (
            );
            /**Sets  the extend method for extending curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtendMethod
            (
                NXOpen::Tooling::EditCoolingCurveBuilder::ExtensionMethod extendMethod /** extendmethod */ 
            );
            /**Returns  the start distance expression for the Extend action type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartDistance
            (
            );
            /**Returns  the end distance expression for the Extend action type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndDistance
            (
            );
            /**Returns  the tangent magnitude scale value for the shape control used in Bridge action type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double TangentShapeControlScaleValue
            (
            );
            /**Sets  the tangent magnitude scale value for the shape control used in Bridge action type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTangentShapeControlScaleValue
            (
                double tangentShapeControlScaleValue /** tangentshapecontrolscalevalue */ 
            );
            /**Returns  the origin of the Orientation manipulator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d ManipulatorOrigin
            (
            );
            /**Sets  the origin of the Orientation manipulator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetManipulatorOrigin
            (
                const NXOpen::Point3d & manipulatorOrigin /** manipulatororigin */ 
            );
            /**Returns  the old origin of the Orientation manipulator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d ManipulatorOldOrigin
            (
            );
            /**Sets  the old origin of the Orientation manipulator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetManipulatorOldOrigin
            (
                const NXOpen::Point3d & manipulatorOldOrigin /** manipulatoroldorigin */ 
            );
            /**Returns  the flag that indicates whether the old origin of the Orientation manipulator is available. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ManipulatorOldOriginAvailable
            (
            );
            /**Sets  the flag that indicates whether the old origin of the Orientation manipulator is available. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetManipulatorOldOriginAvailable
            (
                bool manipulatorOldOriginAvailable /** manipulatoroldoriginavailable */ 
            );
            /**Returns  the smooth curve rate.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int CurveSmoothRates
            (
            );
            /**Sets  the smooth curve rate.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveSmoothRates
            (
                int smoothRates /** smoothrates */ 
            );
            /**Returns  the type for the method of editing cooling curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::EditCoolingCurveBuilder::Types Type
            (
            );
            /**Sets  the type for the method of editing cooling curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::EditCoolingCurveBuilder::Types type /** type */ 
            );
            /** Update the selected curve for the first or second point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePointSelectedCurve
            (
                int pointNumber /** pointnumber */ ,
                NXOpen::TaggedObject * selectedCurveTag /** Selected curve of the point */
            );
            /** Create or update the output curve for first or second point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateOutputCurve
            (
                int pointNumber /** Point number */
            );
            /** Update the value of the trim length 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateTrimLength
            (
                int pointNumber /** Point number */,
                double trimLength /** Trim length */,
                const NXOpen::Point3d & trimPoint /** Trim point */
            );
            /** Update the output curve after editing the location by moving handle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateOutputCurveAfterMoveHandle
            (
            );
            /** Update the start distance expression string 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateStartDistanceExpStr
            (
                const NXString & startDistance /** Start distance expression */
            );
            /** Update the start distance expression string 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void UpdateStartDistanceExpStr
            (
                const char * startDistance /** Start distance expression */
            );
            /** Update the end distance expression string 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateEndDistanceExpStr
            (
                const NXString & endDistance /** End distance expression */
            );
            /** Update the end distance expression string 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void UpdateEndDistanceExpStr
            (
                const char * endDistance /** End distance expression */
            );
            /**Returns  the operation to be performed on the original curve  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::EditCoolingCurveBuilder::OriginalCurveOperationType OriginalCurveOperation
            (
            );
            /**Sets  the operation to be performed on the original curve  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOriginalCurveOperation
            (
                NXOpen::Tooling::EditCoolingCurveBuilder::OriginalCurveOperationType originalCurveOperation /** originalcurveoperation */ 
            );
            /**Returns  the move to layer for the original curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int OriginalCurveLayer
            (
            );
            /**Sets  the move to layer for the original curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOriginalCurveLayer
            (
                int originalCurveLayer /** originalcurvelayer */ 
            );
            /**Returns  the associative flag that indicates whether output curve is associative with the original curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative flag that indicates whether output curve is associative with the original curve 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
