#ifndef NXOpen_PDM_SMARTSAVEOBJECT_HXX_INCLUDED
#define NXOpen_PDM_SMARTSAVEOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_SmartSaveObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class SmartSaveObject;
    }
    class NXObject;
    namespace PDM
    {
        class _SmartSaveObjectBuilder;
        class SmartSaveObjectImpl;
        /**
                Represents the class for object participating in the smart save operation.
                It is an object that wraps actual NXObject that is modified in the session and processes it to be able to display in Save dialog's table. 
                Refer to technical documentation to know more about Save Management.
             <br> Instances of this class can be accessed through smart save builder.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  SmartSaveObject : public NXOpen::NXObject
        {
            /**
                        Specifies operation type. 
                    */
            public: enum OperationType
            {
                OperationTypeNone/** Invalid/Ignore */ = -1,
                OperationTypeCreate/** Create */,
                OperationTypeRevise/** Revise */,
                OperationTypeSaveAs/** SaveAs */,
                OperationTypeSave/** Save */,
                OperationTypeDelete/** Delete/Discontinue */
            };

            private: SmartSaveObjectImpl * m_smartsaveobject_impl;
            private: friend class  _SmartSaveObjectBuilder;
            protected: SmartSaveObject();
            public: ~SmartSaveObject();
            /** Returns the modification reason for this smart save object. This reason is used to calculate valid and current operation/s to be performed. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetModificationReason
            (
            );
            /** Returns the state of object in Teamcenter. An object state is considered frozen if the released status on this object marks it to be final. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsFrozenByStatus
            (
            );
            /** Returns if this object is modifiable by the current user. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsModifiable
            (
            );
            /** This is applicable only for 4G components. Returns if the current user can add new components to the Product. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool HasAddContentPrivilege
            (
            );
            /** This is applicable only for 4G components. Returns if the current user can remove components to the Product. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool HasRemoveContentPrivilege
            (
            );
            /** Returns if this part is a non-master. For non-part objects this will return false. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsNonMaster
            (
            );
            /** Returns if the object is major revisable in Teamcenter. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsMajorRevisable
            (
            );
            /** Returns if the object being saved has status applied in Teamcenter. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsReleased
            (
            );
            /** Returns if the object is currently checkedout by another user. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsCheckedOutByAnotherUser
            (
            );
            /** Returns if the object being saved need to be explicitly checked out. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsExplicitCheckOutNeeded
            (
            );
            /** Returns if this object is currently being shown on the save dialog. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsDisplayedOnTheSaveDialog
            (
            );
            /** Set whether this object is to be shown on the dialog (i.e. valid for user interaction). 
                        Setting this to false will remove the object from the Save dialog's table but it will still be processed for set operation. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetAsDisplayedOnTheSaveDialog
            (
                bool markDisplayedOnDialog /** markdisplayedondialog */ 
            );
            /** Returns the current operation type @link NXOpen::PDM::SmartSaveObject::OperationType NXOpen::PDM::SmartSaveObject::OperationType@endlink  for this smart save object. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::SmartSaveObject::OperationType GetCurrentOperationType
            (
            );
            /** Sets the new operation type @link NXOpen::PDM::SmartSaveObject::OperationType NXOpen::PDM::SmartSaveObject::OperationType@endlink  for this smart save object. This operation should be from among the valid operation types or
                        else the operation will fail. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCurrentOperationType
            (
                NXOpen::PDM::SmartSaveObject::OperationType newOperationType /** newoperationtype */ 
            );
            /** Returns the valid operation types (array of @link NXOpen::PDM::SmartSaveObject::OperationType NXOpen::PDM::SmartSaveObject::OperationType@endlink ) for this object. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::PDM::SmartSaveObject::OperationType> GetValidOperationTypes
            (
            );
            /** Returns the Teamcenter object type for this object. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GetTeamcenterObjectType
            (
            );
            /** Sets the new valid operation types for this object. These operations should be from among the ones returned by 
                        @link NXOpen::PDM::SmartSaveObject::GetValidOperationTypes NXOpen::PDM::SmartSaveObject::GetValidOperationTypes@endlink  or they might be invalid. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetValidOperationTypes
            (
                const std::vector<NXOpen::PDM::SmartSaveObject::OperationType> & newValidOperationTypes /** newvalidoperationtypes */ 
            );
            /** Returns the current effectivity formula for this object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEffectivityFormula
            (
            );
            /** Sets the new effectivity formula to be applied on this object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            public: void SetEffectivityFormula
            (
                const NXString & effectivityFormula /** effectivityformula */ ,
                const NXString & effectivityDisplayString /** effectivitydisplaystring */ 
            );
            /** Sets the new effectivity formula to be applied on this object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_4gd_integration ("4th Generation Design") */
            void SetEffectivityFormula
            (
                const char * effectivityFormula /** effectivityformula */ ,
                const char * effectivityDisplayString /** effectivitydisplaystring */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
