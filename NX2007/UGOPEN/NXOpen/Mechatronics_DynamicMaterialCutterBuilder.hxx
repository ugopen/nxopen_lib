#ifndef NXOpen_MECHATRONICS_DYNAMICMATERIALCUTTERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DYNAMICMATERIALCUTTERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DynamicMaterialCutterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DynamicMaterialCutterBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class SelectDynamicMaterial;
    }
    class SelectNXObject;
    namespace Mechatronics
    {
        class _DynamicMaterialCutterBuilderBuilder;
        class DynamicMaterialCutterBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::DynamicMaterialCutter NXOpen::Mechatronics::DynamicMaterialCutter@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DynamicMaterialCutterCollection::CreateMaterialCutterBuilder  NXOpen::Mechatronics::DynamicMaterialCutterCollection::CreateMaterialCutterBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DynamicMaterialCutterBuilder : public NXOpen::Builder
        {
            /** the material cut mode. */
            public: enum CutMode
            {
                CutModeBySize/** cut with box/cylinder specific direction size */,
                CutModeByToolBody/** cut with specific tool body */
            };

            /** the target material to cut source type. */
            public: enum CutTarget
            {
                CutTargetOnlySelected/** cut target is only selected */,
                CutTargetBodyFromSensor/** cut target which triggered the sensor */,
                CutTargetDetectByTooling/** cut target which collide with tooling body */
            };

            private: DynamicMaterialCutterBuilderImpl * m_dynamicmaterialcutterbuilder_impl;
            private: friend class  _DynamicMaterialCutterBuilderBuilder;
            protected: DynamicMaterialCutterBuilder();
            public: ~DynamicMaterialCutterBuilder();
            /**Returns  the material cutter mode. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialCutterBuilder::CutMode Mode
            (
            );
            /**Sets  the material cutter mode. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMode
            (
                NXOpen::Mechatronics::DynamicMaterialCutterBuilder::CutMode mode /** mode */ 
            );
            /**Returns  the option for cut target is from sensor. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialCutterBuilder::CutTarget TargetSourceType
            (
            );
            /**Sets  the option for cut target is from sensor. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetTargetSourceType
            (
                NXOpen::Mechatronics::DynamicMaterialCutterBuilder::CutTarget targetSourceType /** targetsourcetype */ 
            );
            /**Returns  the object to cut. This can be @link NXOpen::Mechatronics::DynamicMaterial NXOpen::Mechatronics::DynamicMaterial@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::SelectDynamicMaterial * ObjectToCut
            (
            );
            /**Returns  the cutter shape body. This can be solid body, face
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::SelectNXObject * CuttingTool
            (
            );
            /**Returns  the material cut option. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: int CutOption
            (
            );
            /**Sets  the material cut option. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCutOption
            (
                int cutOption /** cutoption */ 
            );
            /**Returns  the cut offset. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * CutOffset
            (
            );
            /**Returns  the cutter width. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * CutterWidth
            (
            );
            /**Returns  the reverse of cut direction. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse of cut direction. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the object name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the object name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the object name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
