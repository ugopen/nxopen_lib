#ifndef NXOpen_MECHATRONICS_GENERICSIGNAL_HXX_INCLUDED
#define NXOpen_MECHATRONICS_GENERICSIGNAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_GenericSignal.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class GenericSignal;
    }
    class Expression;
    namespace Mechatronics
    {
        class AdapterFormula;
    }
    namespace Mechatronics
    {
        class AdapterSignal;
    }
    class NXObject;
    class Unit;
    namespace Mechatronics
    {
    }
    namespace Mechatronics
    {
        class GenericSignalImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::GenericSignal NXOpen::Mechatronics::GenericSignal@endlink  .  

          
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  GenericSignal : public NXOpen::TransientObject
        {
            /**  @brief  Represents the signal IO type.  

              */
            public: enum IOTypes
            {
                IOTypesInvalid/** Invalid   */ = -1,
                IOTypesInput/** Input  */,
                IOTypesOutput/** Output */
            };

            /**  @brief  Represents the external signal IO type.  

              */
            public: enum ExternalIOTypes
            {
                ExternalIOTypesInvalid/** Invalid  */ = -1,
                ExternalIOTypesInput/** Input  */,
                ExternalIOTypesOutput/** Output */,
                ExternalIOTypesInout/** Output */
            };

            /**  @brief  Represents the signal data type.  

              */
            public: enum DataTypes
            {
                DataTypesInvalid/** Invalid   */ = -1,
                DataTypesBool/** bool   */,
                DataTypesInt/** int    */,
                DataTypesDouble/** double */,
                DataTypesString/** string */,
                DataTypesBoolArray/** bool array */,
                DataTypesIntArray/** int  array */,
                DataTypesDoubleArray/** double array */,
                DataTypesStringArray/** string array */
            };

            /**  @brief  Represents the external signal data type.  

              */
            public: enum ExternalDataTypes
            {
                ExternalDataTypesInvalid/** Invalid   */ = -1,
                ExternalDataTypesBool/** bool   */,
                ExternalDataTypesByte/** byte    */,
                ExternalDataTypesWord/** uint16 */,
                ExternalDataTypesInt/** int16 */,
                ExternalDataTypesDword/** uint32 */,
                ExternalDataTypesDint/** int32 */,
                ExternalDataTypesReal/** float */,
                ExternalDataTypesLreal/** double */,
                ExternalDataTypesString/** string */,
                ExternalDataTypesBoolArray/** bool array */,
                ExternalDataTypesByteArray/** byte array */,
                ExternalDataTypesWordArray/** uint16 array */,
                ExternalDataTypesIntArray/** int16 array */,
                ExternalDataTypesDwordArray/** uint32 array */,
                ExternalDataTypesDintArray/** int32 array */,
                ExternalDataTypesRealArray/** float array */,
                ExternalDataTypesLrealArray/** double array */,
                ExternalDataTypesStringArray/** string array */
            };

            /**  @brief  represents the expression block slot type.  

              */
            public: enum SlotTypes
            {
                SlotTypesNone/** None  */ = -1,
                SlotTypesInput/** Input that should connect to runtime parameter as input value. */,
                SlotTypesOutput/** Output that should connect to runtime parameter to output value */,
                SlotTypesParam/** Param that is used to configure the block to differentiate mode */,
                SlotTypesState/** State that is change during runtime based on internal data */,
                SlotTypesCustom/** Custom that represents the user created temporary variable */,
                SlotTypesNum/** Total Num  */
            };

            private: GenericSignalImpl * m_genericsignal_impl;
            /// \cond NX_NO_DOC 
            public: explicit GenericSignal(void *ptr);
            /// \endcond 
            /**  @brief  Dispose to free the memory.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~GenericSignal();
            /**Returns   @brief  the signal adapter name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString AdapterName
            (
            );
            /**Sets   @brief  the signal adapter name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetAdapterName
            (
                const NXString & adapterName /** adaptername */ 
            );
            /**Sets   @brief  the signal adapter name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetAdapterName
            (
                const char * adapterName /** adaptername */ 
            );
            /**Returns   @brief  the signal name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString Name
            (
            );
            /**Sets   @brief  the signal name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetName
            (
                const NXString & signalName /** signalname */ 
            );
            /**Sets   @brief  the signal name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetName
            (
                const char * signalName /** signalname */ 
            );
            /**Returns   @brief  the physics object.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::NXObject * PhysicsObject
            (
            );
            /**Sets   @brief  the physics object.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetPhysicsObject
            (
                NXOpen::NXObject * physicsObject /** physicsobject */ 
            );
            /**Returns   @brief  the property index.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: int PropertyIndex
            (
            );
            /**Sets   @brief  the property index.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetPropertyIndex
            (
                int propertyIndex /** propertyindex */ 
            );
            /**Returns   @brief  the IO type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::GenericSignal::IOTypes IOType
            (
            );
            /**Sets   @brief  the IO type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetIOType
            (
                NXOpen::Mechatronics::GenericSignal::IOTypes ioType /** iotype */ 
            );
            /**Returns   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::GenericSignal::DataTypes DataType
            (
            );
            /**Sets   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetDataType
            (
                NXOpen::Mechatronics::GenericSignal::DataTypes dataType /** datatype */ 
            );
            /**Returns   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::GenericSignal::ExternalDataTypes ExternalDataType
            (
            );
            /**Sets   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetExternalDataType
            (
                NXOpen::Mechatronics::GenericSignal::ExternalDataTypes extDataType /** extdatatype */ 
            );
            /**Returns   @brief  the bool expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Expression * BoolExpression
            (
            );
            /**Sets   @brief  the bool expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetBoolExpression
            (
                NXOpen::Expression * boolValueExp /** boolvalueexp */ 
            );
            /**Returns   @brief  the integer expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Expression * IntegerExpression
            (
            );
            /**Sets   @brief  the integer expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetIntegerExpression
            (
                NXOpen::Expression * intValueExp /** intvalueexp */ 
            );
            /**Returns   @brief  the double expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Expression * DoubleExpression
            (
            );
            /**Sets   @brief  the double expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetDoubleExpression
            (
                NXOpen::Expression * doubleValueExp /** doublevalueexp */ 
            );
            /**Returns   @brief  the string expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Expression * StringExpression
            (
            );
            /**Sets   @brief  the string expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetStringExpression
            (
                NXOpen::Expression * stringValueExp /** stringvalueexp */ 
            );
            /**Returns   @brief  the array value expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Expression * ArrayExpression
            (
            );
            /**Sets   @brief  the array value expression.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetArrayExpression
            (
                NXOpen::Expression * arrayValueExp /** arrayvalueexp */ 
            );
            /**Returns   @brief  the bool value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: bool BoolValue
            (
            );
            /**Sets   @brief  the bool value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetBoolValue
            (
                bool boolValue /** boolvalue */ 
            );
            /**Returns   @brief  the integer value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: int IntegerValue
            (
            );
            /**Sets   @brief  the integer value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetIntegerValue
            (
                int intValue /** intvalue */ 
            );
            /**Returns   @brief  the double value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: double DoubleValue
            (
            );
            /**Sets   @brief  the double value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetDoubleValue
            (
                double doubleValue /** doublevalue */ 
            );
            /**Returns   @brief  the string value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString StringValue
            (
            );
            /**Sets   @brief  the string value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetStringValue
            (
                const NXString & strValue /** strvalue */ 
            );
            /**Sets   @brief  the string value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetStringValue
            (
                const char * strValue /** strvalue */ 
            );
            /**  @brief  Gets bool array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetBoolArrayValue
            (
                std::vector<bool> & boolArrayValue /** boolarrayvalue */ 
            );
            /**  @brief  Sets bool array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetBoolArrayValue
            (
                const std::vector<bool> & boolArrayValue /** boolarrayvalue */ 
            );
            /**  @brief  Gets int array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetIntArrayValue
            (
                std::vector<int> & intArrayValue /** intarrayvalue */ 
            );
            /**  @brief  Sets int array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetIntArrayValue
            (
                const std::vector<int> & intArrayValue /** intarrayvalue */ 
            );
            /**  @brief  Gets double array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetDoubleArrayValue
            (
                std::vector<double> & doubleArrayValue /** doublearrayvalue */ 
            );
            /**  @brief  Sets double array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetDoubleArrayValue
            (
                const std::vector<double> & doubleArrayValue /** doublearrayvalue */ 
            );
            /**  @brief  Gets string array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void GetStringArrayValue
            (
                std::vector<NXString> & strArrayValue /** strarrayvalue */ 
            );
            /**  @brief  Sets string array value.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetStringArrayValue
            (
                const std::vector<NXString> & strArrayValue /** strarrayvalue */ 
            );
            /**Returns   @brief  the address.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString Address
            (
            );
            /**Sets   @brief  the address.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetAddress
            (
                const NXString & address /** address */ 
            );
            /**Sets   @brief  the address.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetAddress
            (
                const char * address /** address */ 
            );
            /**Returns   @brief  the comment.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString Comment
            (
            );
            /**Sets   @brief  the comment.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetComment
            (
                const NXString & comment /** comment */ 
            );
            /**Sets   @brief  the comment.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetComment
            (
                const char * comment /** comment */ 
            );
            /**Returns   @brief  the signal mapping connection Name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString ConnectionName
            (
            );
            /**Sets   @brief  the signal mapping connection Name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetConnectionName
            (
                const NXString & connectionName /** connectionname */ 
            );
            /**Sets   @brief  the signal mapping connection Name.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetConnectionName
            (
                const char * connectionName /** connectionname */ 
            );
            /**Returns   @brief  the unit.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Unit * Unit
            (
            );
            /**Sets   @brief  the unit.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetUnit
            (
                NXOpen::Unit * unit /** unit */ 
            );
            /**Returns   @brief  the signal id.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: int SignalId
            (
            );
            /**Sets   @brief  the signal id.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetSignalId
            (
                int signalId /** signalid */ 
            );
            /**Returns   @brief  the edited signal.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::AdapterSignal * EditedSignal
            (
            );
            /**Sets   @brief  the edited signal.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetEditedSignal
            (
                NXOpen::Mechatronics::AdapterSignal * editedSignal /** editedsignal */ 
            );
            /**Returns   @brief  the assigned formula.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::AdapterFormula * AssignedFormula
            (
            );
            /**Sets   @brief  the assigned formula.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetAssignedFormula
            (
                NXOpen::Mechatronics::AdapterFormula * assignedFormula /** assignedformula */ 
            );
            /**Returns   @brief  the formula text.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString FormulaText
            (
            );
            /**Sets   @brief  the formula text.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetFormulaText
            (
                const NXString & formula /** formula */ 
            );
            /**Sets   @brief  the formula text.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetFormulaText
            (
                const char * formula /** formula */ 
            );
            /**Returns   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::GenericSignal::SlotTypes SlotType
            (
            );
            /**Sets   @brief  the data type.  

              
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetSlotType
            (
                NXOpen::Mechatronics::GenericSignal::SlotTypes slotType /** slottype */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
