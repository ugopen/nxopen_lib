#ifndef NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_SHAPECONSTRAINTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_SHAPECONSTRAINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TopologyOptimization_ShapeConstraintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_TopologyOptimization_DesignSpace.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace TopologyOptimization
        {
            class ShapeConstraintBuilder;
        }
    }
    class Axis;
    class Builder;
    class Direction;
    class Expression;
    namespace Features
    {
        namespace TopologyOptimization
        {
            class DesignSpace;
        }
    }
    class Plane;
    class ScCollector;
    namespace Features
    {
        namespace TopologyOptimization
        {
            class _ShapeConstraintBuilderBuilder;
            class ShapeConstraintBuilderImpl;
            /** Represents a @link Features::TopologyOptimization::ShapeConstraint Features::TopologyOptimization::ShapeConstraint@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::TopologyOptimization::Study::CreateShapeConstraintBuilder  NXOpen::Features::TopologyOptimization::Study::CreateShapeConstraintBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            DraftAngle.Value </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            DraftPartingObjectOptions </term> <description> 
             
            SpecifiedPlane </description> </item> 

            <item><term> 
             
            ExtrudeBiDirectionFlag </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            MaxOverhangAngle </term> <description> 
             
            Degrees45 </description> </item> 

            <item><term> 
             
            MaximumDiameter.Value </term> <description> 
             
            50 (millimeters part), 2 (inches part) </description> </item> 

            <item><term> 
             
            MaximumWallThickness.Value </term> <description> 
             
            50 (millimeters part), 2 (inches part) </description> </item> 

            <item><term> 
             
            MinimumDiameter.Value </term> <description> 
             
            5 (millimeters part), 0.2 (inches part) </description> </item> 

            <item><term> 
             
            MinimumWallThickness.Value </term> <description> 
             
            5 (millimeters part), 0.2 (inches part) </description> </item> 

            <item><term> 
             
            PlanarSymmetryInputMode </term> <description> 
             
            Whole </description> </item> 

            <item><term> 
             
            Type </term> <description> 
             
            PlanarSymmetry </description> </item> 

            </list> 

             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  ShapeConstraintBuilder : public NXOpen::Builder
            {
                /** Shape Constraint Type */
                public: enum ConstraintType
                {
                    ConstraintTypePlanarSymmetry/** planar symmetry */ ,
                    ConstraintTypeRepeatedRotationalSymmetry/** repeated rotational symmetry */ ,
                    ConstraintTypeSegmentalRotationalSymmetry/** segmental rotational symmetry */ ,
                    ConstraintTypeExtrudeAlongVector/** extrude along vector */ ,
                    ConstraintTypeDraftAngle/** draft angle */ ,
                    ConstraintTypeMinimumMemberSize/** minimum member size */ ,
                    ConstraintTypeMaximumMemberSize/** maximum member size */ ,
                    ConstraintTypeMinimumWallThickness/** minimum wall thickness */ ,
                    ConstraintTypeMaximumWallThickness/** maximum wall thickness */ ,
                    ConstraintTypeOverhangingGeometryPrevention/** overhanging geometry prevention */ ,
                    ConstraintTypeSelfSupporting/** self supporting */ 
                };

                /** Draft Angle Parting Object Options */
                public: enum DraftPartingObjectType
                {
                    DraftPartingObjectTypeSpecifiedPlane/** specified plane */ ,
                    DraftPartingObjectTypeSpecifiedFace/** specified face */ ,
                    DraftPartingObjectTypeAutomaticFace/** automatic face */ 
                };

                /** Planar Symmetry Input Option */
                public: enum PlanarSymmetryInputOption
                {
                    PlanarSymmetryInputOptionSegment/** segment */ ,
                    PlanarSymmetryInputOptionWhole/** whole */ 
                };

                /** Max Overhang Angle Option */
                public: enum MaxOverhangAngleValue
                {
                    MaxOverhangAngleValueDegrees27/** degrees27 */ ,
                    MaxOverhangAngleValueDegrees45/** degrees45 */ ,
                    MaxOverhangAngleValueDegrees65/** degrees65 */ 
                };

                private: ShapeConstraintBuilderImpl * m_shapeconstraintbuilder_impl;
                private: friend class  _ShapeConstraintBuilderBuilder;
                protected: ShapeConstraintBuilder();
                public: ~ShapeConstraintBuilder();
                /**Returns  the Constraint type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::ConstraintType Type
                (
                );
                /**Sets  the Constraint type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetType
                (
                    NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::ConstraintType type /** type */ 
                );
                /**Returns  the design space 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::DesignSpace * DesignSpace
                (
                );
                /**Sets  the design space 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetDesignSpace
                (
                    NXOpen::Features::TopologyOptimization::DesignSpace * designSpace /** designspace */ 
                );
                /**Returns  the shape constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );
                /**Sets  the shape constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetName
                (
                    const NXString & shapeConstraintName /** shapeconstraintname */ 
                );
                /**Sets  the shape constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                void SetName
                (
                    const char * shapeConstraintName /** shapeconstraintname */ 
                );
                /**Returns  the first symmetry plane for Planar Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * PlanarSymmetryPlane1
                (
                );
                /**Sets  the first symmetry plane for Planar Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetPlanarSymmetryPlane1
                (
                    NXOpen::Plane * symmetryPlane /** symmetryplane */ 
                );
                /**Returns  the second symmetry plane for Planar Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * PlanarSymmetryPlane2
                (
                );
                /**Sets  the second symmetry plane for Planar Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetPlanarSymmetryPlane2
                (
                    NXOpen::Plane * symmetryPlane /** symmetryplane */ 
                );
                /**Returns  the input mode for planar symmetry  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::PlanarSymmetryInputOption PlanarSymmetryInputMode
                (
                );
                /**Sets  the input mode for planar symmetry  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetPlanarSymmetryInputMode
                (
                    NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::PlanarSymmetryInputOption planarSymmetyrInputMode /** planarsymmetyrinputmode */ 
                );
                /**Returns  the Rotational Symmetry axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Axis * RotationalSymmetryAxis
                (
                );
                /**Sets  the Rotational Symmetry axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetRotationalSymmetryAxis
                (
                    NXOpen::Axis * symmetryAxis /** symmetryaxis */ 
                );
                /**Returns  the number of segments 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: int NumberOfSegments
                (
                );
                /**Sets  the number of segments 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetNumberOfSegments
                (
                    int numberOfSegments /** numberofsegments */ 
                );
                /**Returns  the first limit plane for Segmental Rotational Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * FirstLimitPlane
                (
                );
                /**Sets  the first limit plane for Segmental Rotational Symmetry type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetFirstLimitPlane
                (
                    NXOpen::Plane * firstLimitPlane /** firstlimitplane */ 
                );
                /**Returns  the first second plane for Segmental Rotational Symmetry type  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * SecondLimitPlane
                (
                );
                /**Sets  the first second plane for Segmental Rotational Symmetry type  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetSecondLimitPlane
                (
                    NXOpen::Plane * secondLimitPlane /** secondlimitplane */ 
                );
                /**Returns  the help axis for Segmental Rotational Symmetry  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Axis * SegmentLimitHelpAxis
                (
                );
                /**Sets  the help axis for Segmental Rotational Symmetry  
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetSegmentLimitHelpAxis
                (
                    NXOpen::Axis * helpAxis /** helpaxis */ 
                );
                /**Returns  the Minimum Member Size diameter value 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MinimumDiameter
                (
                );
                /**Returns  the Maximum Member Size diameter value 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MaximumDiameter
                (
                );
                /**Returns  the user set name flag 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UserSetName
                (
                );
                /**Sets  the user set name flag 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetUserSetName
                (
                    bool userSetName /** usersetname */ 
                );
                /**Returns  the extrude along vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * ExtrudeDirection
                (
                );
                /**Sets  the extrude along vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetExtrudeDirection
                (
                    NXOpen::Direction * extDirection /** extdirection */ 
                );
                /**Returns  the extrude along vector bi-direction flag 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ExtrudeBiDirectionFlag
                (
                );
                /**Sets  the extrude along vector bi-direction flag 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetExtrudeBiDirectionFlag
                (
                    bool extBiDirection /** extbidirection */ 
                );
                /**Returns  the Draft Angle Parting Object Options 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::DraftPartingObjectType DraftPartingObjectOptions
                (
                );
                /**Sets  the Draft Angle Parting Object Options 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetDraftPartingObjectOptions
                (
                    NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::DraftPartingObjectType draftPartingObjectOptions /** draftpartingobjectoptions */ 
                );
                /**Returns  the draft angle 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * DraftAngle
                (
                );
                /**Returns  the draft draw direction 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * DraftDrawDirection
                (
                );
                /**Sets  the draft draw direction 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetDraftDrawDirection
                (
                    NXOpen::Direction * draftDrawDirection /** draftdrawdirection */ 
                );
                /**Returns  the draft parting plane 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * DraftPartingPlane
                (
                );
                /**Sets  the draft parting plane 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetDraftPartingPlane
                (
                    NXOpen::Plane * draftPartingPlane /** draftpartingplane */ 
                );
                /**Returns  the draft parting faces 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * DraftPartingFace
                (
                );
                /**Returns  the Minimum Member Wall Thickness value 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MinimumWallThickness
                (
                );
                /**Returns  the Maximum Member Wall Thickness value 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MaximumWallThickness
                (
                );
                /**Returns  the overhang vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * OverhangVector
                (
                );
                /**Sets  the overhang vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetOverhangVector
                (
                    NXOpen::Direction * overhangVector /** overhangvector */ 
                );
                /**Returns  the Max Overhang Angle 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::MaxOverhangAngleValue MaxOverhangAngle
                (
                );
                /**Sets  the Max Overhang Angle 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : des_top_opt ("Topology Optimization for Designers") OR sc_des_topol_opt (" Topology Optimization for Designers") */
                public: void SetMaxOverhangAngle
                (
                    NXOpen::Features::TopologyOptimization::ShapeConstraintBuilder::MaxOverhangAngleValue maxOverhangAngle /** maxoverhangangle */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
