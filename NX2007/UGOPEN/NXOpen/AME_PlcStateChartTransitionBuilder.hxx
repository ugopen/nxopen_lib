#ifndef NXOpen_AME_PLCSTATECHARTTRANSITIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCSTATECHARTTRANSITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcStateChartTransitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_PlcStateChartConditionOperatorTypes.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcStateChartTransitionBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace AME
    {
        class _PlcStateChartTransitionBuilderBuilder;
        class PlcStateChartTransitionBuilderImpl;
        /** Represents builder for AME::DB::PlcStateChartTransition  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcStateChartTransitionBuilder  NXOpen::AME::AMEManager::CreatePlcStateChartTransitionBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcStateChartTransitionBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            /** the move condition enum type */
            public: enum MoveCondition
            {
                MoveConditionUp/** up */ ,
                MoveConditionDown/** down */ ,
                MoveConditionLeft/** left */ ,
                MoveConditionRight/** right */ 
            };

            private: PlcStateChartTransitionBuilderImpl * m_plcstatecharttransitionbuilder_impl;
            private: friend class  _PlcStateChartTransitionBuilderBuilder;
            protected: PlcStateChartTransitionBuilder();
            public: ~PlcStateChartTransitionBuilder();
            /**Returns  the transition name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString TransitionName
            (
            );
            /**Sets  the transition name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTransitionName
            (
                const NXString & resultText /** resulttext */ 
            );
            /**Sets  the transition name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetTransitionName
            (
                const char * resultText /** resulttext */ 
            );
            /**Returns  the entry state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString EntryStateName
            (
            );
            /**Sets  the entry state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEntryStateName
            (
                const NXString & resultText /** resulttext */ 
            );
            /**Sets  the entry state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetEntryStateName
            (
                const char * resultText /** resulttext */ 
            );
            /**Returns  the exit state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ExitStateName
            (
            );
            /**Sets  the exit state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExitStateName
            (
                const NXString & resultText /** resulttext */ 
            );
            /**Sets  the exit state name 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetExitStateName
            (
                const char * resultText /** resulttext */ 
            );
            /** Adds a root condition operator to the transition with default as AND type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddRootConditionOperator
            (
            );
            /** Adds a sub condition operator to the parent condition with default as AND type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddSubConditionOperator
            (
                NXOpen::AME::AMEExtendedObject * parentOperator /** parentoperator */ 
            );
            /** Adds an operand as a root condition to the transition 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddRootConditionOperand
            (
            );
            /** Adds a sub condition operand to the parent condition 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEExtendedObject * AddSubConditionOperand
            (
                NXOpen::AME::AMEExtendedObject * parentOperator /** parentoperator */ ,
                NXOpen::AME::AMEExtendedObject * siblingOperand /** siblingoperand */ 
            );
            /** Set the operator type on the condition item
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeConditionOperationType
            (
                NXOpen::AME::AMEExtendedObject * conditionOperator /** conditionoperator */ ,
                NXOpen::AME::AmePlcStatechartConditionOperatortype operatorType /** operatortype */ 
            );
            /** Set the negation on the condition item
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeConditionItemNegation
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ ,
                bool isNegation /** isnegation */ 
            );
            /** Add the condition rule to the condition value
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddConditionValue
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ 
            );
            /** Set the constant text value to the condition rule
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConditionValueWithConstantText
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ ,
                const NXString & textValue /** textvalue */ 
            );
            /** Set the constant text value to the condition rule
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConditionValueWithConstantText
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ ,
                const char * textValue /** textvalue */ 
            );
            /** Reset the condition value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetConditionValue
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ 
            );
            /** Remove the condition value 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveConditionItem
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ 
            );
            /** Move the condition Item 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveConditionItem
            (
                NXOpen::AME::AMEExtendedObject * conditionItem /** conditionitem */ ,
                NXOpen::AME::PlcStateChartTransitionBuilder::MoveCondition moveDirection /** movedirection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
