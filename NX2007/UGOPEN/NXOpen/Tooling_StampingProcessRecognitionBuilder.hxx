#ifndef NXOpen_TOOLING_STAMPINGPROCESSRECOGNITIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_STAMPINGPROCESSRECOGNITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_StampingProcessRecognitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_CostTableDataProvider.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class StampingProcessRecognitionBuilder;
    }
    class Builder;
    class SelectFace;
    namespace Tooling
    {
        class CostDataObject;
    }
    namespace Tooling
    {
        class CostTableDataProvider;
    }
    namespace Tooling
    {
        class StampingProcessBendingAreaData;
    }
    namespace Tooling
    {
        class StampingProcessCutoutAreaData;
    }
    namespace Tooling
    {
        class StampingProcessDrawingAreaData;
    }
    namespace Tooling
    {
        class StampingProcessEmbossingAreaData;
    }
    namespace Tooling
    {
        class StampingProcessInformationData;
    }
    namespace Tooling
    {
        class _StampingProcessRecognitionBuilderBuilder;
        class StampingProcessRecognitionBuilderImpl;
        /** Represents a @link NXOpen::Tooling::StampingProcessRecognitionBuilder NXOpen::Tooling::StampingProcessRecognitionBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateStampingProcessRecognitionBuilder  NXOpen::Tooling::MoldwizardManager::CreateStampingProcessRecognitionBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  StampingProcessRecognitionBuilder : public NXOpen::Builder
        {
            private: StampingProcessRecognitionBuilderImpl * m_stampingprocessrecognitionbuilder_impl;
            private: friend class  _StampingProcessRecognitionBuilderBuilder;
            protected: StampingProcessRecognitionBuilder();
            public: ~StampingProcessRecognitionBuilder();
            /**Returns  the selected base face for analysis 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::SelectFace * SelectionBaseFace
            (
            );
            /** Analyze selected body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void AnalyzeBody
            (
            );
            /** Export analysis result 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void ExportResult
            (
            );
            /**Returns  the x dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double XDimension
            (
            );
            /**Sets  the x dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetXDimension
            (
                double xLength /** xlength */ 
            );
            /**Returns  the y dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double YDimension
            (
            );
            /**Sets  the y dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetYDimension
            (
                double yLength /** ylength */ 
            );
            /**Returns  the z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double ZDimension
            (
            );
            /**Sets  the z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetZDimension
            (
                double zLength /** zlength */ 
            );
            /**Returns  the minimum x dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double MinimumXDimension
            (
            );
            /**Sets  the minimum x dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetMinimumXDimension
            (
                double minxLength /** minxlength */ 
            );
            /**Returns  the minimum y dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double MinimumYDimension
            (
            );
            /**Sets  the minimum y dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetMinimumYDimension
            (
                double minyLength /** minylength */ 
            );
            /**Returns  the minimum z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double MinimumZDimension
            (
            );
            /**Sets  the minimum z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetMinimumZDimension
            (
                double minzLength /** minzlength */ 
            );
            /**Returns  the surface area value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double BodySurfaceArea
            (
            );
            /**Sets  the surface area value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetBodySurfaceArea
            (
                double surfaceArea /** surfacearea */ 
            );
            /**Returns  the product body volume 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double PartVolume
            (
            );
            /**Sets  the product body volume 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetPartVolume
            (
                double partVolume /** partvolume */ 
            );
            /**Returns  the project area 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double SheetMetalThickness
            (
            );
            /**Sets  the project area 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetSheetMetalThickness
            (
                double thickness /** thickness */ 
            );
            /**Returns  the minimum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double UnfoldedLength
            (
            );
            /**Sets  the minimum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetUnfoldedLength
            (
                double len /** len */ 
            );
            /**Returns  the maximum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double UnfoldedWidth
            (
            );
            /**Sets  the maximum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetUnfoldedWidth
            (
                double width /** width */ 
            );
            /**Returns  the cutting length 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double CuttingLength
            (
            );
            /**Sets  the cutting length 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetCuttingLength
            (
                double length /** length */ 
            );
            /** Set the product orientation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetProductOrientation
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
            /** Get the product orientation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Matrix3x3 GetProductOrientation
            (
            );
            /**Returns  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool SaveAndExportStatus
            (
            );
            /**Sets  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetSaveAndExportStatus
            (
                bool status /** status */ 
            );
            /**Returns  the folder in which output XML results can be found 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString XmlFolderBrowser
            (
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetXmlFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetXmlFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the folder of part file to be saved 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString PartFolderBrowser
            (
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetPartFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetPartFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /** Initializes the costing data 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void InitCostingData
            (
            );
            /**Returns  the output xml file name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString XmlFileName
            (
            );
            /**Sets  the output xml file name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetXmlFileName
            (
                const NXString & xmlFileName /** xmlfilename */ 
            );
            /**Sets  the output xml file name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetXmlFileName
            (
                const char * xmlFileName /** xmlfilename */ 
            );
            /** Asks the default xml file name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString AskDefaultXmlFileName
            (
            );
            /** Get active table index 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int GetActivePage
            (
            );
            /** Set active table index 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetActivePage
            (
                int activeTableIndex /** activetableindex */ 
            );
            /**Returns  the data provider for cutout data table 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * CutoutDataProvider
            (
            );
            /**Returns  the data provider for bending area table 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * BendingDataProvider
            (
            );
            /**Returns  the data provider for drawing area table 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * DrawingDataProvider
            (
            );
            /**Returns  the data provider for embossing area table 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * EmbossingDataProvider
            (
            );
            /** Ask current active data provider
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * AskCurrentActiveDataProvider
            (
            );
            /** Updates the provider data according specified stamping cost object data 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void UpdateProviderData
            (
                NXOpen::Tooling::CostTableDataProvider * pDataProvider /** pdataprovider */ ,
                const std::vector<NXOpen::Tooling::CostDataObject *> & pCostObjects /** all specified cost objects in table. */
            );
            /** Collects all cutout objects including its children 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CollectCutoutObjects
            (
                std::vector<NXOpen::Tooling::StampingProcessCutoutAreaData *> & pCostObjects /** all cutout objects in stamping cost data collection. */
            );
            /** Collects all drawing area objects including its children 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CollectDrawingObjects
            (
                std::vector<NXOpen::Tooling::StampingProcessDrawingAreaData *> & pCostObjects /** all drawing area objects in stamping cost data collection. */
            );
            /** Collects all bending objects including its children 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CollectBendingObjects
            (
                std::vector<NXOpen::Tooling::StampingProcessBendingAreaData *> & pCostObjects /** all bending objects in stamping cost data collection. */
            );
            /** Collects all embossing objects including its children 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CollectEmbossingObjects
            (
                std::vector<NXOpen::Tooling::StampingProcessEmbossingAreaData *> & pCostObjects /** all embossing objects in stamping cost data collection. */
            );
            /** Groups selected cost objects  @return  the grouped cost objects. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostDataObject * GroupStampingFeatures
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObject /** current selected cost objects. */
            );
            /** Ungroups selected cost object 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void UngroupStampingFeature
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObjects /** current selected cost objects. */,
                std::vector<NXOpen::Tooling::CostDataObject *> & ungroupedObjects /** the ungrouped cost objects. */
            );
            /** Delete selected cost objects 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void DeleteStampingFeatures
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObjects /** current selected cost objects. */
            );
            /** Adds a new cost object manully  @return  new created cost object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostDataObject * AddStampingFeature
            (
            );
            /** Collects all process objects including its children 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CollectStageObjects
            (
                std::vector<NXOpen::Tooling::StampingProcessInformationData *> & pCostObjects /** all process objects in stamping cost data collection. */
            );
            /**Returns  the data provider for process information table 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CostTableDataProvider * ProcessDataProvider
            (
            );
            /**Returns  the minimum z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString ToolName
            (
            );
            /**Sets  the minimum z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetToolName
            (
                const NXString & toolName /** toolname */ 
            );
            /**Sets  the minimum z dimension of product body 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetToolName
            (
                const char * toolName /** toolname */ 
            );
            /**Returns  the maximum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double ToolLength
            (
            );
            /**Sets  the maximum wall thickness 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetToolLength
            (
                double length /** length */ 
            );
            /**Returns  the tool width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double ToolWidth
            (
            );
            /**Sets  the tool width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetToolWidth
            (
                double width /** width */ 
            );
            /**Returns  the tool height 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double ToolHeight
            (
            );
            /**Sets  the tool height 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetToolHeight
            (
                double height /** height */ 
            );
            /**Returns  the band feed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double BandFeed
            (
            );
            /**Sets  the band feed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetBandFeed
            (
                double bandFeed /** bandfeed */ 
            );
            /**Returns  the band width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double BandWidth
            (
            );
            /**Sets  the band width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetBandWidth
            (
                double bandWidth /** bandwidth */ 
            );
            /**Returns  the flag that indicates left or right 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool LeftRight
            (
            );
            /**Sets  the flag that indicates left or right 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetLeftRight
            (
                bool status /** status */ 
            );
            /**Returns  the number of parts per stroke in feed direction 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int NumberX
            (
            );
            /**Sets  the number of parts per stroke in feed direction 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetNumberX
            (
                int numberX /** numberx */ 
            );
            /**Returns  the number of bands 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int NumberY
            (
            );
            /**Sets  the number of bands 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetNumberY
            (
                int numberY /** numbery */ 
            );
            /**Returns  the overlapping in feed direction 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double OverLapX
            (
            );
            /**Sets  the overlapping in feed direction 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetOverLapX
            (
                double overLapX /** overlapx */ 
            );
            /**Returns  the overlapping along band width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: double OverLapY
            (
            );
            /**Sets  the overlapping along band width 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetOverLapY
            (
                double overLapY /** overlapy */ 
            );
            /**Returns  the corsswise rotation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool CavityRotationVertical
            (
            );
            /**Sets  the corsswise rotation 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetCavityRotationVertical
            (
                bool status /** status */ 
            );
            /**Returns  the flag produced in pairs
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: bool Paired
            (
            );
            /**Sets  the flag produced in pairs
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetPaired
            (
                bool status /** status */ 
            );
            /**Returns  the Left or Right flag type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int TypeOfLeftRight
            (
            );
            /**Sets  the Left or Right flag type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetTypeOfLeftRight
            (
                int type /** type */ 
            );
            /**Returns  the cavity rotation vertical type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int TypeOfCavityRotationVertical
            (
            );
            /**Sets  the cavity rotation vertical type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetTypeOfCavityRotationVertical
            (
                int type /** type */ 
            );
            /**Returns  the paired type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: int TypeOfPaired
            (
            );
            /**Sets  the paired type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetTypeOfPaired
            (
                int type /** type */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
