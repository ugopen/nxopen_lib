#ifndef NXOpen_SIM_POSTCONFIGURATOR_ENCRYPTPOSTPROCESSORFILESBUILDER_HXX_INCLUDED
#define NXOpen_SIM_POSTCONFIGURATOR_ENCRYPTPOSTPROCESSORFILESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_PostConfigurator_EncryptPostprocessorFilesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        namespace PostConfigurator
        {
            class EncryptPostprocessorFilesBuilder;
        }
    }
    class Builder;
    namespace SIM
    {
        namespace PostConfigurator
        {
            class _EncryptPostprocessorFilesBuilderBuilder;
            class EncryptPostprocessorFilesBuilderImpl;
            /** This class is used to encrypt the post builder or tcl based postprocessor.
                        Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
                     <br> To create a new instance of this class, use @link NXOpen::SIM::PostConfigurator::PostConfiguratorManager::CreateEncryptPostprocessorFilesBuilder  NXOpen::SIM::PostConfigurator::PostConfiguratorManager::CreateEncryptPostprocessorFilesBuilder @endlink  <br> 
             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_SIMEXPORT  EncryptPostprocessorFilesBuilder : public NXOpen::Builder
            {
                private: EncryptPostprocessorFilesBuilderImpl * m_encryptpostprocessorfilesbuilder_impl;
                private: friend class  _EncryptPostprocessorFilesBuilderBuilder;
                protected: EncryptPostprocessorFilesBuilder();
                public: ~EncryptPostprocessorFilesBuilder();
                /** Sets the encrypt postprocessor files. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") */
                public: void SetEncryptPostprocessorFiles
                (
                    std::vector<NXString> & encryptFilename /** the fullpath encrypt filename */
                );
                /** Gets the encrypt postprocessor files. 
                                This function allocates the memory for encryptFiles. The caller is responsible to deallocate the memory.  @return  the encrypt files 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetEncryptPostprocessorFiles
                (
                );
                /** Sets the sold to ids. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") */
                public: void SetSoldToIds
                (
                    const NXString & soldToIDs /** the sold to ids */
                );
                /** Sets the sold to ids. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") */
                void SetSoldToIds
                (
                    const char * soldToIDs /** the sold to ids */
                );
                /** Gets the sold to ids.  @return  the sold to ids 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetSoldToIds
                (
                );
                /**Returns  the expiration date. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString ExpirationDate
                (
                );
                /**Sets  the expiration date. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") */
                public: void SetExpirationDate
                (
                    const NXString & expirationDate /** the expiration date */
                );
                /**Sets  the expiration date. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") */
                void SetExpirationDate
                (
                    const char * expirationDate /** the expiration date */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
