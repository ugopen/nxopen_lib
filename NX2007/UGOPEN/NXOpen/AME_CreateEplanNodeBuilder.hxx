#ifndef NXOpen_AME_CREATEEPLANNODEBUILDER_HXX_INCLUDED
#define NXOpen_AME_CREATEEPLANNODEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_CreateEplanNodeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class CreateEplanNodeBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    namespace AME
    {
        class _CreateEplanNodeBuilderBuilder;
        class CreateEplanNodeBuilderImpl;
        /** Class to add new Eplan property/product/function node and new propery value depending of the type. <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateCreateEplanNodeBuilder  NXOpen::AME::AMEManager::CreateCreateEplanNodeBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  CreateEplanNodeBuilder : public NXOpen::Builder
        {
            /** Represents the type of Eplan node */
            public: enum Types
            {
                TypesProperty/** property */ ,
                TypesPropertyValue/** property value */ ,
                TypesProduct/** product */ ,
                TypesFunctionTemplate/** function template */ 
            };

            /** Represents the mode */
            public: enum Mode
            {
                ModeCreate/** create */ ,
                ModeEdit/** edit */ 
            };

            /** Represents the Data type options */
            public: enum DataTypeOptions
            {
                DataTypeOptionsBool/** Boolean, the value will be true or false */,
                DataTypeOptionsInteger/** Integer, the value is a whole number */,
                DataTypeOptionsNumber/** Number, the value is a floating point number and may contain units */,
                DataTypeOptionsString/** String, the value will be a textual string */,
                DataTypeOptionsStringTranslatable/** String, the value will be a textual string which is translatable */,
                DataTypeOptionsDate/** Date, the value will be date and time */
            };

            private: CreateEplanNodeBuilderImpl * m_createeplannodebuilder_impl;
            private: friend class  _CreateEplanNodeBuilderBuilder;
            protected: CreateEplanNodeBuilder();
            public: ~CreateEplanNodeBuilder();
            /**Returns  the Eplan node type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateEplanNodeBuilder::Types Type
            (
            );
            /**Sets  the Eplan node type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetType
            (
                NXOpen::AME::CreateEplanNodeBuilder::Types type /** type */ 
            );
            /**Returns  the Creation mode 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateEplanNodeBuilder::Mode CreationMode
            (
            );
            /**Sets  the Creation mode 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCreationMode
            (
                NXOpen::AME::CreateEplanNodeBuilder::Mode type /** type */ 
            );
            /**Returns  the Parent node selection 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * ParentSelection
            (
            );
            /**Returns  the Property node selection 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * PropertySelection
            (
            );
            /**Returns  the Condition name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ConditionName
            (
            );
            /**Sets  the Condition name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConditionName
            (
                const NXString & conditionName /** conditionname */ 
            );
            /**Sets  the Condition name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConditionName
            (
                const char * conditionName /** conditionname */ 
            );
            /**Returns  the Condition value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ConditionValue
            (
            );
            /**Sets  the Condition value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConditionValue
            (
                const NXString & conditionValue /** conditionvalue */ 
            );
            /**Sets  the Condition value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConditionValue
            (
                const char * conditionValue /** conditionvalue */ 
            );
            /**Returns  the Data type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateEplanNodeBuilder::DataTypeOptions DataType
            (
            );
            /**Sets  the Data type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDataType
            (
                NXOpen::AME::CreateEplanNodeBuilder::DataTypeOptions propertyDataType /** propertydatatype */ 
            );
            /**Returns  the Unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Unit
            (
            );
            /**Sets  the Unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetUnit
            (
                const NXString & units /** units */ 
            );
            /**Sets  the Unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetUnit
            (
                const char * units /** units */ 
            );
            /**Returns  the Eplan id 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString EplanId
            (
            );
            /**Sets  the Eplan id 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEplanId
            (
                const NXString & eplanId /** eplanid */ 
            );
            /**Sets  the Eplan id 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetEplanId
            (
                const char * eplanId /** eplanid */ 
            );
            /**Returns  the English name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString EnglishName
            (
            );
            /**Sets  the English name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEnglishName
            (
                const NXString & englishName /** englishname */ 
            );
            /**Sets  the English name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetEnglishName
            (
                const char * englishName /** englishname */ 
            );
            /**Returns  the German name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GermanName
            (
            );
            /**Sets  the German name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetGermanName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the German name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetGermanName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the French name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString FrenchName
            (
            );
            /**Sets  the French name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFrenchName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the French name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetFrenchName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Spanish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SpanishName
            (
            );
            /**Sets  the Spanish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSpanishName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Spanish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSpanishName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Portuguese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PortugueseName
            (
            );
            /**Sets  the Portuguese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortugueseName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Portuguese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortugueseName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Italian name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ItalianName
            (
            );
            /**Sets  the Italian name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetItalianName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Italian name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetItalianName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Polish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PolishName
            (
            );
            /**Sets  the Polish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPolishName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Polish name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPolishName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Czech name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString CzechName
            (
            );
            /**Sets  the Czech name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCzechName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Czech name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetCzechName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Russian name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString RussianName
            (
            );
            /**Sets  the Russian name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetRussianName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Russian name or value
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetRussianName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Japanese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString JapaneseName
            (
            );
            /**Sets  the Japanese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetJapaneseName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Japanese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetJapaneseName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the Korean name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString KoreanName
            (
            );
            /**Sets  the Korean name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetKoreanName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the Korean name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetKoreanName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the SimplifiedChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SimplifiedChineseName
            (
            );
            /**Sets  the SimplifiedChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSimplifiedChineseName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the SimplifiedChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSimplifiedChineseName
            (
                const char * germanName /** germanname */ 
            );
            /**Returns  the TraditionalChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString TraditionalChineseName
            (
            );
            /**Sets  the TraditionalChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTraditionalChineseName
            (
                const NXString & germanName /** germanname */ 
            );
            /**Sets  the TraditionalChinese name or value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetTraditionalChineseName
            (
                const char * germanName /** germanname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
