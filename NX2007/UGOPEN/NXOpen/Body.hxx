#ifndef NXOpen_BODY_HXX_INCLUDED
#define NXOpen_BODY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Body.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureManager.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/IBody.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IOrientation.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Body;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class ConvergentFacet;
    class DisplayableObject;
    class Edge;
    class Face;
    namespace Facet
    {
        class FacetedBody;
    }
    namespace Features
    {
        class Feature;
    }
    class IBody;
    class INXObject;
    class IOrientation;
    class MeasureBodies;
    class _BodyBuilder;
    class BodyImpl;
    /** 
    Represents a Body

     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Body : public NXOpen::DisplayableObject, public virtual NXOpen::IOrientation, public virtual NXOpen::IBody
    {
        private: BodyImpl * m_body_impl;
        private: friend class  _BodyBuilder;
        protected: Body();
        public: ~Body();
        /** Returns the features used to construct the body  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Features::Feature *> GetFeatures
        (
        );
        /** Returns the faces in the body  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Face *> GetFaces
        (
        );
        /** Returns the edges in the body  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: std::vector<NXOpen::Edge *> GetEdges
        (
        );
        /**Returns  the solid density of the body.  The units of the density will be in kilograms per cubic meter  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: double Density
        (
        );
        /**Sets  the solid density of the body.  The units of the density will be in kilograms per cubic meter  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetDensity
        (
            double density /** density */ 
        );
        /**Returns  true if the body is a sheet body 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsSheetBody
        (
        );
        /**Returns  true if the body is a solid body 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsSolidBody
        (
        );
        /** Removes imprinted edges created by the merged rib rule. 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void RemoveMergedRibImprintedEdges
        (
            NXOpen::Face * originalFace /** the seed face of the rule. It can be null*/,
            const std::vector<NXOpen::Edge *> & imprintedEdges /**  edges. */
        );
        /** Returns a lightweight JT @link NXOpen::Facet::FacetedBody NXOpen::Facet::FacetedBody@endlink  associated with this body and checks whether it is out of date.
         <br>  Created in NX7.5.5.  <br>  
         <br> License requirements : None */
        public: void GetFacetedBody
        (
            NXOpen::Facet::FacetedBody ** facetBody /** facetbody */ ,
            bool* upToDate /** up to date */ 
        );
        /**Returns  true if the body is a convergent body. A convergent body is one that has at least one convergent face. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: bool IsConvergentBody
        (
        );
        /** Sweepability check 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: int SweepabilityCheck
        (
        );
        /**  @brief Returns the number of facets on all the faces of this convergent body. 

         
                
                This method is valid only for convergent bodies. If this body is not a convergent body, 
                then an error is returned. 
                  @return  the number of facets on a body
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: int GetNumberOfFacets
        (
        );
        /**  @brief Returns the number of vertices on all the faces of this convergent body. 

         
                
                This method is valid only for convergent bodies. If this face is not a convergent body, then an error is returned. 
                  @return  the number of vertices on a body
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: int GetNumberOfVertices
        (
        );
        /**  @brief Returns a facet next to given facet on convergent body. 

         
                
                If input facet is the last facet on a face, then first facet of next face is returned.
                If input facet is the last facet on last face, then NULL is returned.
                This method is valid only for convergent bodies. If this face is not a convergent body, then an error is returned. 
                  @return  The next facet. 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::ConvergentFacet * GetNextFacet
        (
            NXOpen::ConvergentFacet * facet /** The input facet, next to which facet is to find. */
        );
        /**  @brief Returns first facet on a convergent body. 

         
                This method is valid only for convergent bodies. If this face is not a convergent body, then an error is returned. 
                  @return  the first facet on a body. 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::ConvergentFacet * GetFirstFacetOnBody
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
