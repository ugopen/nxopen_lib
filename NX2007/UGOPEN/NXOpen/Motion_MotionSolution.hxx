#ifndef NXOpen_MOTION_MOTIONSOLUTION_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONSOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionSolution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Xyplot_Plot.hxx>
#include <NXOpen/Motion_AnimationControl.hxx>
#include <NXOpen/Motion_ArticulationControl.hxx>
#include <NXOpen/Motion_EigenvectorAnimationControl.hxx>
#include <NXOpen/Motion_Graph.hxx>
#include <NXOpen/Motion_LoadTransferControl.hxx>
#include <NXOpen/Motion_PostToolsControl.hxx>
#include <NXOpen/Motion_SolutionSpreadsheetExport.hxx>
#include <NXOpen/Motion_SpreadsheetRunControl.hxx>
#include <NXOpen/Motion_StaticModeAnimationControl.hxx>
#include <NXOpen/Motion_IGraphSource.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class MotionSolution;
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class Plot;
        }
    }
    namespace Motion
    {
        class AnimationCollection;
    }
    namespace Motion
    {
        class AnimationControl;
    }
    namespace Motion
    {
        class ArticulationControl;
    }
    namespace Motion
    {
        class EigenvectorAnimationControl;
    }
    namespace Motion
    {
        class Graph;
    }
    namespace Motion
    {
        class GraphObjectCollection;
    }
    namespace Motion
    {
        class IGraphSource;
    }
    namespace Motion
    {
        class LoadTransferControl;
    }
    namespace Motion
    {
        class ModelAndLoadPreProcessCollection;
    }
    namespace Motion
    {
        class PostToolsControl;
    }
    namespace Motion
    {
        class SolutionSpreadsheetExport;
    }
    namespace Motion
    {
        class SpreadsheetRunControl;
    }
    namespace Motion
    {
        class StaticModeAnimationControl;
    }
    class NXObject;
    class Unit;
    namespace Motion
    {
        class _MotionSolutionBuilder;
        class MotionSolutionImpl;
        /** Represents a solution  <br> To create or edit an instance of this class, use @link NXOpen::Motion::MotionSolutionBuilder  NXOpen::Motion::MotionSolutionBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  MotionSolution : public NXOpen::NXObject, public virtual NXOpen::Motion::IGraphSource
        {
            private: MotionSolutionImpl * m_motionsolution_impl;
            private: friend class  _MotionSolutionBuilder;
            protected: MotionSolution();
            public: ~MotionSolution();
            /** Solve normal run solution. If motion has not been initialized,
                        call @link NXOpen::Motion::MotionSession::InitializeSimulation NXOpen::Motion::MotionSession::InitializeSimulation@endlink  before solving. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SolveNormalRunSolution
            (
            );
            /** Export the motion model for solving on an external platform. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportToExternalPlatform
            (
            );
            /** Export motion host cosim mfiles
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_motion_cosim ("NX Motion CoSimulation") */
            public: void ExportMotionHostCosimMfiles
            (
            );
            /** Edit runsimulink mfile 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_motion_cosim ("NX Motion CoSimulation") */
            public: void EditRunsimulinkMfile
            (
            );
            /** Export simulink host cosim mfiles
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_motion_cosim ("NX Motion CoSimulation") */
            public: void ExportSimulinkHostCosimMfiles
            (
            );
            /** Calculate gruebler count of motion solution  @return  The gruebler count 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int CalculateGrueblerCount
            (
            );
            /** Adds a suppressed object to a solution 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AddSuppressedObject
            (
                NXOpen::NXObject * object /** The solution suppressed object */
            );
            /** Removes a suppressed object from a solution 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RemoveSuppressedObject
            (
                NXOpen::NXObject * object /** The solution suppressed object */
            );
            /** Removes a suppressed object from a solution
                        Takes a flag that can be use to force ok to the dialog that could arise when conflict objects are found:
                        e.g. 2 active drivers on the same joint. Using this flag as true might leave conflict objects active and an incosistent model.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RemoveSuppressedObject
            (
                NXOpen::NXObject * motionObject /** The solution suppressed object */,
                bool forceOk /** if true, skips verbosity when 2 conflicts object found and allow activation */
            );
            /** Returns whether this object is suppressed or not in this solution  @return  True if suppress (In Active), or False if not suppressed (Active) 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool GetIsSuppressed
            (
                NXOpen::NXObject * objectTag /** The solution object of interest */
            );
            /** Get name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString GetName
            (
            );
            /** Set name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & solutionName /** solutionname */ ,
                bool renameResultFile /** if true, rename both result file and solution, otherwise, rename solution only */
            );
            /** Set name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * solutionName /** solutionname */ ,
                bool renameResultFile /** if true, rename both result file and solution, otherwise, rename solution only */
            );
            /** Get @link NXOpen::Motion::AnimationControl NXOpen::Motion::AnimationControl@endlink  object, must be called before any other animation control operation, and 
                    the finish API must be call if not use anymore  @return  The @link NXOpen::Motion::AnimationControl NXOpen::Motion::AnimationControl@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnimationControl * GetAnimationControl
            (
            );
            /** Get @link NXOpen::Motion::ArticulationControl NXOpen::Motion::ArticulationControl@endlink  object, must be called before any other articulation control operation, and 
                    the finish API must be call if not use anymore  @return  The @link NXOpen::Motion::ArticulationControl NXOpen::Motion::ArticulationControl@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ArticulationControl * GetArticulationControl
            (
            );
            /** Get @link NXOpen::Motion::SpreadsheetRunControl NXOpen::Motion::SpreadsheetRunControl@endlink  object, must be called before any other spreadsheet run control operation, and 
                    the finish API must be call if not use anymore  @return  The @link NXOpen::Motion::SpreadsheetRunControl NXOpen::Motion::SpreadsheetRunControl@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SpreadsheetRunControl * GetSpreadsheetRunControl
            (
                const NXString & spreadsheetName /** spreadsheetname */ 
            );
            /** Get @link NXOpen::Motion::SpreadsheetRunControl NXOpen::Motion::SpreadsheetRunControl@endlink  object, must be called before any other spreadsheet run control operation, and 
                    the finish API must be call if not use anymore  @return  The @link NXOpen::Motion::SpreadsheetRunControl NXOpen::Motion::SpreadsheetRunControl@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Motion::SpreadsheetRunControl * GetSpreadsheetRunControl
            (
                const char * spreadsheetName /** spreadsheetname */ 
            );
            /** Get @link NXOpen::Motion::LoadTransferControl NXOpen::Motion::LoadTransferControl@endlink  object, must be called before any other load transfer control operation.
                    @link NXOpen::Motion::LoadTransferControl::Finish NXOpen::Motion::LoadTransferControl::Finish@endlink  must be called after use is over.  @return  The @link NXOpen::Motion::LoadTransferControl NXOpen::Motion::LoadTransferControl@endlink  object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::LoadTransferControl * GetLoadTransferControl
            (
            );
            /** Get @link NXOpen::Motion::PostToolsControl NXOpen::Motion::PostToolsControl@endlink  object, must be called before any other post tools control operation.
                    @link NXOpen::Motion::PostToolsControl::Finish NXOpen::Motion::PostToolsControl::Finish@endlink  must be called after use is over.  @return  The @link NXOpen::Motion::PostToolsControl NXOpen::Motion::PostToolsControl@endlink  object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PostToolsControl * GetPostToolsControl
            (
            );
            /** Get @link NXOpen::Motion::EigenvectorAnimationControl NXOpen::Motion::EigenvectorAnimationControl@endlink  object, must be called before any other post eigenvctor animation control operation.
                    @link NXOpen::Motion::EigenvectorAnimationControl::Finish NXOpen::Motion::EigenvectorAnimationControl::Finish@endlink  must be called after use is over.  @return  The @link NXOpen::Motion::PostToolsControl NXOpen::Motion::PostToolsControl@endlink  object 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::EigenvectorAnimationControl * GetEigenvectorAnimationControl
            (
            );
            /** Get @link NXOpen::Motion::StaticModeAnimationControl NXOpen::Motion::StaticModeAnimationControl@endlink  object, must be called before any other post static mode animation control operation.
                    @link NXOpen::Motion::StaticModeAnimationControl::Finish NXOpen::Motion::StaticModeAnimationControl::Finish@endlink  must be called after use is over.  @return  The @link NXOpen::Motion::PostToolsControl NXOpen::Motion::PostToolsControl@endlink  object 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::StaticModeAnimationControl * GetStaticModeAnimationControl
            (
            );
            /** Get the result of the graph object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetGraphObjectResult
            (
                NXOpen::Motion::Graph * graph /** graph */ ,
                std::vector<double> & resultPoints /** Need to free it*/,
                NXOpen::Unit ** unit /** unit */ 
            );
            /** Save the result of graph to spreadsheet 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::Motion::SolutionSpreadsheetExport::ExportGraphObject NXOpen::Motion::SolutionSpreadsheetExport::ExportGraphObject@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::Motion::SolutionSpreadsheetExport::ExportGraphObject") void SaveGraphObjectToSpreadsheet
            (
                NXOpen::Motion::Graph * xGraph /** xgraph */ ,
                const std::vector<NXOpen::Motion::Graph *> & yGraphs /** ygraphs */ ,
                bool showGraph /** showgraph */ ,
                bool writeTime /** writetime */ 
            );
            /** Save the result of graph to afu file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SaveGraphObjectToAfu
            (
                const NXString & fileName /** file name */ ,
                NXOpen::Motion::Graph * xGraph /** xgraph */ ,
                NXOpen::Motion::Graph * yGraph /** ygraph */ 
            );
            /** Save the result of graph to afu file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SaveGraphObjectToAfu
            (
                const char * fileName /** file name */ ,
                NXOpen::Motion::Graph * xGraph /** xgraph */ ,
                NXOpen::Motion::Graph * yGraph /** ygraph */ 
            );
            /** Load result 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void LoadResult
            (
            );
            /** Review result 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ReviewResult
            (
                const NXString & fileName /** file name */ 
            );
            /** Review result 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ReviewResult
            (
                const char * fileName /** file name */ 
            );
            /** Export solver input file for a solution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ExportSolverInputFile
            (
            );
            /** Plots a @link NXOpen::Motion::Graph NXOpen::Motion::Graph@endlink  object @return  Created plot 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::CAE::Xyplot::Plot * PlotGraphObjectsInViewport
            (
                NXOpen::Motion::Graph * xGraph /** x axis of the plot will use time when xGraph is not specified*/,
                const std::vector<NXOpen::Motion::Graph *> & yGraphs /** y axis of the plot */,
                int winDevice /** windevice */ ,
                int viewIndex /** viewindex */ ,
                bool overlay /** overlay */ 
            );

            /// \cond NX_NO_DOC 
            /** Print animation objects for a solution
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void PrintAnimationObjects
            (
            );

            /// \endcond 
            /** Clone the input solution and return the clone.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionSolution * CloneSolution
            (
            );
            /** Clone the input solution multiple times and return the clones.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CloneMultipleSolutions
            (
                int numClones /** numclones */ ,
                std::vector<NXOpen::Motion::MotionSolution *> & clonedSolutions /** clonedsolutions */ 
            );
            /** Get @link NXOpen::Motion::SolutionSpreadsheetExport NXOpen::Motion::SolutionSpreadsheetExport@endlink  object.
                        Use @link NXOpen::Motion::MotionSolution::LoadResult NXOpen::Motion::MotionSolution::LoadResult@endlink  to load the result file first. @return  The @link NXOpen::Motion::SolutionSpreadsheetExport NXOpen::Motion::SolutionSpreadsheetExport@endlink  object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SolutionSpreadsheetExport * GetSolutionSpreadsheetExport
            (
            );
            /** Convert advanced solution to generic solution. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ConvertAdvancedSolutionToGeneric
            (
            );
            /** Solve normal run solution in background. If motion has not been initialized,
                    call @link NXOpen::Motion::MotionSession::InitializeSimulation NXOpen::Motion::MotionSession::InitializeSimulation@endlink  before solving.
                    It supports @link NXOpen::Motion::MotionEnvironment::SolverSimcenter NXOpen::Motion::MotionEnvironment::SolverSimcenter@endlink solver only.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SolveNormalRunSolutionInBackground
            (
            );
            /** Check if a solution is in the background solving process. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool IsSolvingInBackground
            (
            );
            /** Terminate the background solving process of a solution. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void TerminateSolvingInBackground
            (
            );
            /** Clone the input solution and return the clone.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionSolution * CloneSolutionFromSimulation
            (
                NXOpen::NXObject * simulationRun /** simulation run */ 
            );


            /** Returns the @link NXOpen::Motion::AnimationCollection NXOpen::Motion::AnimationCollection@endlink  belonging to this part 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::Motion::AnimationCollection *Animations();
            /** Returns the @link NXOpen::Motion::ModelAndLoadPreProcessCollection NXOpen::Motion::ModelAndLoadPreProcessCollection@endlink  belonging to this object
             <br>  Created in NX1926.0.0.  <br>  
            */
            public: NXOpen::Motion::ModelAndLoadPreProcessCollection *ModelAndLoadPreProcesses();
            /** Returns the @link NXOpen::Motion::GraphObjectCollection NXOpen::Motion::GraphObjectCollection@endlink  belonging to this object 
             <br>  Created in NX1953.0.0.  <br>  
            */
            public: NXOpen::Motion::GraphObjectCollection *Graphs();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
