#ifndef NXOpen_CAE_CURVEOPERATIONEXPRESSIONRECORD_HXX_INCLUDED
#define NXOpen_CAE_CURVEOPERATIONEXPRESSIONRECORD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CurveOperationExpressionRecord.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_FTK_ArrayRecord2D.hxx>
#include <NXOpen/CAE_XYFunctionDataTypes.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CurveOperationExpressionRecord;
    }
    namespace CAE
    {
        namespace FTK
        {
            class ArrayRecord2D;
        }
    }
    class NXObject;
    namespace CAE
    {
        class _CurveOperationExpressionRecordBuilder;
        class CurveOperationExpressionRecordImpl;
        /** Represents an expression record for curve operation. <br> Not support KF.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CurveOperationExpressionRecord : public NXOpen::NXObject
        {
            private: CurveOperationExpressionRecordImpl * m_curveoperationexpressionrecord_impl;
            private: friend class  _CurveOperationExpressionRecordBuilder;
            protected: CurveOperationExpressionRecord();
            public: ~CurveOperationExpressionRecord();
            /**Returns  the name of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the description of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description of expression record. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /** Gets the formulas of expression record including data type and formula strings.
                        
                        User is responsible to free memory for formula strings.
                        
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::XyFunctionDataComplexType GetFormulas
            (
                std::vector<NXString> & formulaStrings /** formulastrings */ 
            );
            /** Sets the formulas of expression record.
                        
                         <br> 
                        For different formula data type, the amount of formula strings is limited.
                        The first formula is to generate X data, the other formulas are to generate Y data.
                        <ol>
                        <li>
                        For @link NXOpen::CAE::XyFunctionDataComplexType::RealOnly NXOpen::CAE::XyFunctionDataComplexType::RealOnly@endlink , the expression record consists of two formulas.
                        Y data is real only data.
                        </li>
                        <li>
                        For @link NXOpen::CAE::XyFunctionDataComplexType::RealImaginary NXOpen::CAE::XyFunctionDataComplexType::RealImaginary@endlink , the expression record consists of three formulas.
                        Y data is complex data, the second formula is to generate real part, the third formula is to generate imaginary part.
                        </li>
                        <li>
                        For @link NXOpen::CAE::XyFunctionDataComplexType::MagnitudePhase NXOpen::CAE::XyFunctionDataComplexType::MagnitudePhase@endlink , the expression record consists of three formulas.
                        Y data is complex data, the second formula is to generate magnitude part, the third formula is to generate phase part.
                        </li>
                        </ol>
                         <br> 
                        
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFormulas
            (
                NXOpen::CAE::XyFunctionDataComplexType dataType /** datatype */ ,
                std::vector<NXString> & formulaStrings /** formulastrings */ 
            );
            /** Evaluates the expression record, then creates a @link  NXOpen::CAE::FTK::ArrayRecord2D   NXOpen::CAE::FTK::ArrayRecord2D @endlink  with evaluated data. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FTK::ArrayRecord2D * Evaluate
            (
            );
            /** Copies a @link  NXOpen::CAE::CurveOperationExpressionRecord   NXOpen::CAE::CurveOperationExpressionRecord @endlink  with an unduplicated name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CurveOperationExpressionRecord * Copy
            (
                const NXString & name /** name */ 
            );
            /** Copies a @link  NXOpen::CAE::CurveOperationExpressionRecord   NXOpen::CAE::CurveOperationExpressionRecord @endlink  with an unduplicated name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::CurveOperationExpressionRecord * Copy
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
