#ifndef NXOpen_CAE_MODELCHECK_SOLIDELEMENTFACENORMALBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELCHECK_SOLIDELEMENTFACENORMALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelCheck_SolidElementFaceNormalBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ModelCheckDataTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelCheck_ISelectionBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ModelCheck
        {
            class SolidElementFaceNormalBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        namespace ModelCheck
        {
            class ISelectionBuilder;
        }
    }
    class SelectTaggedObjectList;
    namespace CAE
    {
        namespace ModelCheck
        {
            class _SolidElementFaceNormalBuilderBuilder;
            class SolidElementFaceNormalBuilderImpl;
            /**
                    Represents a @link NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder@endlink  used to reorient normals
                    for left handed solid elements.
                    Both of the methods are only available in fem context.
                     <br> To create a new instance of this class, use @link NXOpen::CAE::ModelCheckManager::CreateSolidElementFaceNormalBuilder  NXOpen::CAE::ModelCheckManager::CreateSolidElementFaceNormalBuilder @endlink  <br> 
             <br>  Created in NX11.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  SolidElementFaceNormalBuilder : public NXOpen::Builder, public virtual NXOpen::CAE::ModelCheck::ISelectionBuilder
            {
                private: SolidElementFaceNormalBuilderImpl * m_solidelementfacenormalbuilder_impl;
                private: friend class  _SolidElementFaceNormalBuilderBuilder;
                protected: SolidElementFaceNormalBuilder();
                public: ~SolidElementFaceNormalBuilder();
                /**Returns  the selected objects to be checked. The objects must be @link NXOpen::CAE::Mesh NXOpen::CAE::Mesh@endlink  or
                            @link NXOpen::CAE::FEElement NXOpen::CAE::FEElement@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * SelectionList
                (
                );
                /** Display normals of @link NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::DisplayNormals NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::DisplayNormals@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void DisplayNormals
                (
                );
                /** Reorient normals specified in @link NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::ReorientLeftHandedElements NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::ReorientLeftHandedElements@endlink 
                                which normal is left handed and returns those elements whose normals were reoriented successfully. This method will only reorient
                                the normals for solid left handed elements in the current work fem part.
                            
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void ReorientLeftHandedElements
                (
                );
                /** Create group for the left handed elements in
                                @link NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::CreateGroupOfLeftHandedElements NXOpen::CAE::ModelCheck::SolidElementFaceNormalBuilder::CreateGroupOfLeftHandedElements@endlink 
                                and returns those elements which were grouped successfully. This method will only group left handed solid elements
                                in the current work fem part.
                            
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void CreateGroupOfLeftHandedElements
                (
                );
                /**Returns  the positive face color 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: int PositiveFaceColor
                (
                );
                /**Sets  the positive face color 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetPositiveFaceColor
                (
                    int positiveFaceColor /** positivefacecolor */ 
                );
                /**Returns  the negative face color 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: int NegativeFaceColor
                (
                );
                /**Sets  the negative face color 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetNegativeFaceColor
                (
                    int negativeFaceColor /** negativefacecolor */ 
                );
                /**Returns  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::ModelCheck::CheckScope CheckScopeOption
                (
                );
                /**Sets  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual void SetCheckScopeOption
                (
                    NXOpen::CAE::ModelCheck::CheckScope scope /** scope */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
