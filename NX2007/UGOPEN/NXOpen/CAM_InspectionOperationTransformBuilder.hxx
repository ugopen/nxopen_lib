#ifndef NXOpen_CAM_INSPECTIONOPERATIONTRANSFORMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONOPERATIONTRANSFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionOperationTransformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionOperationTransformBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Plane;
    class Point;
    class SelectLine;
    namespace CAM
    {
        class _InspectionOperationTransformBuilderBuilder;
        class InspectionOperationTransformBuilderImpl;
        /** Create transformed inspection operations,
            this builder's Commit can produce more than one object,
            the GetCommittedObjects can be used to get the objects 
            and the order of GetCommittedObject's output array is not stable.  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionOperationTransformBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionOperationTransformBuilder @endlink  <br> 
         <br>  Created in NX9.0.3.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionOperationTransformBuilder : public NXOpen::Builder
        {
            /** Transform Type */
            public: enum Transform
            {
                TransformTranslate/** translate */,
                TransformScale/** scale */,
                TransformRotateAboutPoint/** rotate about point */,
                TransformRotateAboutLine/** rotate about line */,
                TransformMirrorThroughALine/** mirror through a line */,
                TransformMirrorThroughAPlane/** mirror through a plane */,
                TransformCircularArray/** circular array */,
                TransformRectangularArray/** rectangular array */,
                TransformReposition/** reposition */
            };

            /** Motion Type */
            public: enum Motion
            {
                MotionDelta/** motion delta */,
                MotionToAPoint/** motion to a point */
            };

            /** Angle Type */
            public: enum Angle
            {
                AngleSpecify/** specify a angle */,
                AngleTwoPoint/** use two point to sepcify a angle */
            };

            /** Line Type */
            public: enum Line
            {
                LineSpecify/** specify a line */,
                LineTwoPoint/** specify a line by two point */,
                LinePointAndVector/** specify a line by a point and a vector */
            };

            /** Transform Option */
            public: enum Result
            {
                ResultMove/** move */,
                ResultCopy/** copy */,
                ResultInstance/** instance */
            };

            private: InspectionOperationTransformBuilderImpl * m_inspectionoperationtransformbuilder_impl;
            private: friend class  _InspectionOperationTransformBuilderBuilder;
            protected: InspectionOperationTransformBuilder();
            public: ~InspectionOperationTransformBuilder();
            /**Returns  the transform type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionOperationTransformBuilder::Transform TransformType
            (
            );
            /**Sets  the transform type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTransformType
            (
                NXOpen::CAM::InspectionOperationTransformBuilder::Transform transformType /** transformtype */ 
            );
            /**Returns  the motion type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionOperationTransformBuilder::Motion MotionType
            (
            );
            /**Sets  the motion type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMotionType
            (
                NXOpen::CAM::InspectionOperationTransformBuilder::Motion motionType /** motiontype */ 
            );
            /**Returns  the delta XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double DeltaXc
            (
            );
            /**Sets  the delta XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDeltaXc
            (
                double deltaXC /** deltaxc */ 
            );
            /**Returns  the delta YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double DeltaYc
            (
            );
            /**Sets  the delta YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDeltaYc
            (
                double deltaYC /** deltayc */ 
            );
            /**Returns  the delta ZC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double DeltaZc
            (
            );
            /**Sets  the delta ZC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDeltaZc
            (
                double deltaZC /** deltazc */ 
            );
            /**Returns  the reference point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the to point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the to point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the scale factor 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the angle pivot point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AnglePivotPoint
            (
            );
            /**Sets  the angle pivot point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAnglePivotPoint
            (
                NXOpen::Point * anglePivotPoint /** anglepivotpoint */ 
            );
            /**Returns  the angle method 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionOperationTransformBuilder::Angle AngleMethod
            (
            );
            /**Sets  the angle method 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleMethod
            (
                NXOpen::CAM::InspectionOperationTransformBuilder::Angle angleMethod /** anglemethod */ 
            );
            /**Returns  the angle value 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double AngleValue
            (
            );
            /**Sets  the angle value 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleValue
            (
                double angleValue /** anglevalue */ 
            );
            /**Returns  the angle start point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AngleStartPoint
            (
            );
            /**Sets  the angle start point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleStartPoint
            (
                NXOpen::Point * angleStartPoint /** anglestartpoint */ 
            );
            /**Returns  the angle end point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * AngleEndPoint
            (
            );
            /**Sets  the angle end point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleEndPoint
            (
                NXOpen::Point * angleEndPoint /** angleendpoint */ 
            );
            /**Returns  the line method 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionOperationTransformBuilder::Line LineMethod
            (
            );
            /**Sets  the line method 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineMethod
            (
                NXOpen::CAM::InspectionOperationTransformBuilder::Line lineMethod /** linemethod */ 
            );
            /**Returns  the line selection 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectLine * LineSelection
            (
            );
            /**Returns  the line start point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LineStartPoint
            (
            );
            /**Sets  the line start point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineStartPoint
            (
                NXOpen::Point * lineStartPoint /** linestartpoint */ 
            );
            /**Returns  the line end point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LineEndPoint
            (
            );
            /**Sets  the line end point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineEndPoint
            (
                NXOpen::Point * lineEndPoint /** lineendpoint */ 
            );
            /**Returns  the line point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * LinePoint
            (
            );
            /**Sets  the line point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLinePoint
            (
                NXOpen::Point * linePoint /** linepoint */ 
            );
            /**Returns  the line vector 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * LineVector
            (
            );
            /**Sets  the line vector 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLineVector
            (
                NXOpen::Direction * lineVector /** linevector */ 
            );
            /**Returns  the mirror plane 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the mirror plane 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the array origin point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ArrayOriginPoint
            (
            );
            /**Sets  the array origin point 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayOriginPoint
            (
                NXOpen::Point * arrayOriginPoint /** arrayoriginpoint */ 
            );
            /**Returns  the array number along XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int ArrayNumberAlongXc
            (
            );
            /**Sets  the array number along XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayNumberAlongXc
            (
                int arrayNumberAlongXC /** arraynumberalongxc */ 
            );
            /**Returns  the array number along YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int ArrayNumberAlongYc
            (
            );
            /**Sets  the array number along YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayNumberAlongYc
            (
                int arrayNumberAlongYC /** arraynumberalongyc */ 
            );
            /**Returns  the array offset XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayOffsetXc
            (
            );
            /**Sets  the array offset XC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayOffsetXc
            (
                double arrayOffsetXC /** arrayoffsetxc */ 
            );
            /**Returns  the array offset YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayOffsetYc
            (
            );
            /**Sets  the array offset YC 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayOffsetYc
            (
                double arrayOffsetYc /** arrayoffsetyc */ 
            );
            /**Returns  the array angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayAngle
            (
            );
            /**Sets  the array angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayAngle
            (
                double arrayAngle /** arrayangle */ 
            );
            /**Returns  the array circular number 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int ArrayCircularNumber
            (
            );
            /**Sets  the array circular number 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayCircularNumber
            (
                int arrayCircularNumber /** arraycircularnumber */ 
            );
            /**Returns  the array circular radius 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayCircularRadius
            (
            );
            /**Sets  the array circular radius 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayCircularRadius
            (
                double arrayCircularRadius /** arraycircularradius */ 
            );
            /**Returns  the array circular start angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayCircularStartAngle
            (
            );
            /**Sets  the array circular start angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayCircularStartAngle
            (
                double arrayCircularStartAngle /** arraycircularstartangle */ 
            );
            /**Returns  the array circular increment angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double ArrayCircularIncrementAngle
            (
            );
            /**Sets  the array circular increment angle 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetArrayCircularIncrementAngle
            (
                double arrayCircularIncrementAngle /** arraycircularincrementangle */ 
            );
            /**Returns  the reposition from CSYS 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RepositionFromCsys
            (
            );
            /**Sets  the reposition from CSYS 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRepositionFromCsys
            (
                NXOpen::CoordinateSystem * repositionFromCSYS /** repositionfromcsys */ 
            );
            /**Returns  the reposition to CSYS 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RepositionToCsys
            (
            );
            /**Sets  the reposition to CSYS 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRepositionToCsys
            (
                NXOpen::CoordinateSystem * repositionToCSYS /** repositiontocsys */ 
            );
            /**Returns  the move copy instance option 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionOperationTransformBuilder::Result MoveCopyInstance
            (
            );
            /**Sets  the move copy instance option 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMoveCopyInstance
            (
                NXOpen::CAM::InspectionOperationTransformBuilder::Result moveCopyInstance /** movecopyinstance */ 
            );
            /**Returns  the distance angle division 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int DistanceAngleDivision
            (
            );
            /**Sets  the distance angle division 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDistanceAngleDivision
            (
                int distanceAngleDivision /** distanceangledivision */ 
            );
            /**Returns  the num of copy or instance 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int NumOfCopyInstance
            (
            );
            /**Sets  the num of copy or instance 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNumOfCopyInstance
            (
                int numOfCopyInstance /** numofcopyinstance */ 
            );
            /** Remove the tranformation 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void RemoveTransformation
            (
            );
            /**Returns  the tolerance used for checking distance of transformed geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the tolerance used for checking distance of transformed geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the tolerance used for checking angles of transformed geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the tolerance used for checking angles of transformed geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
