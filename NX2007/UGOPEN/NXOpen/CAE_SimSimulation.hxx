#ifndef NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
#define NXOpen_CAE_SIMSIMULATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSimulation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DeleteUnreferencedEntitiesBuilder.hxx>
#include <NXOpen/CAE_LoadcaseCombinationBuilder.hxx>
#include <NXOpen/CAE_NodalForceReport.hxx>
#include <NXOpen/CAE_SimBCMultiCopyBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class Acoustics;
    }
    namespace CAE
    {
        class AcousticsAndVibrationManager;
    }
    namespace CAE
    {
        class AdaptivityMetaSolutionCollection;
    }
    namespace CAE
    {
        class AeroStructManager;
    }
    namespace CAE
    {
        class AutoBCBuilder;
    }
    namespace CAE
    {
        class AutoCyclicSymmetryPairsBuilder;
    }
    namespace CAE
    {
        class AutoEdgeBCBuilder;
    }
    namespace CAE
    {
        class AutoEdgePairsBuilder;
    }
    namespace CAE
    {
        class AutoPairsBuilder;
    }
    namespace CAE
    {
        class BCSelectionDisplayBuilder;
    }
    namespace CAE
    {
        class BcLabelManagerBuilder;
    }
    namespace CAE
    {
        class CaeDOFSetCollection;
    }
    namespace CAE
    {
        class CaeRegion;
    }
    namespace CAE
    {
        class CaeRegionBuilder;
    }
    namespace CAE
    {
        class CaeRegionCollection;
    }
    namespace CAE
    {
        class CorrelManager;
    }
    namespace CAE
    {
        class DataProcessingCollection;
    }
    namespace CAE
    {
        class DeleteUnreferencedEntitiesBuilder;
    }
    namespace CAE
    {
        class DirectionalityFieldBuilder;
    }
    namespace CAE
    {
        class DurSpecialistManager;
    }
    namespace CAE
    {
        class DurabilityManager;
    }
    namespace CAE
    {
        class EnergyDistributionTableBuilder;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class ImportedSimInterfaceCollection;
    }
    namespace CAE
    {
        class ImportedSolutionBuilder;
    }
    namespace CAE
    {
        class LaminateManager;
    }
    namespace CAE
    {
        class LoadMappingBuilder;
    }
    namespace CAE
    {
        class LoadcaseCombinationBuilder;
    }
    namespace CAE
    {
        class ModelAndLoadPreProcessor;
    }
    namespace CAE
    {
        class MultiTargetsetCopyBuilder;
    }
    namespace CAE
    {
        class NodalForceReport;
    }
    namespace CAE
    {
        namespace Optimization
        {
            class DAOOptimizationManager;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSOptimizationManager;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class Manager;
        }
    }
    namespace CAE
    {
        class ResultMeasureCollection;
    }
    namespace CAE
    {
        class ResultSourceBuilder;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimBCBuilder;
    }
    namespace CAE
    {
        class SimBCMultiCopyBuilder;
    }
    namespace CAE
    {
        class SimBcPlotContoursBuilder;
    }
    namespace CAE
    {
        class SimBcXyPlotBuilder;
    }
    namespace CAE
    {
        class SimConditionSeqMgr;
    }
    namespace CAE
    {
        class SimConditionSequence;
    }
    namespace CAE
    {
        class SimConstraintCollection;
    }
    namespace CAE
    {
        class SimConstraintSet;
    }
    namespace CAE
    {
        class SimConstraintSetBuilder;
    }
    namespace CAE
    {
        class SimConstraintSetCollection;
    }
    namespace CAE
    {
        class SimFieldFromBcBuilder;
    }
    namespace CAE
    {
        class SimInterfaceCollection;
    }
    namespace CAE
    {
        class SimLbcFolderCollection;
    }
    namespace CAE
    {
        class SimLoadCollection;
    }
    namespace CAE
    {
        class SimLoadRecipeCollection;
    }
    namespace CAE
    {
        class SimLoadSet;
    }
    namespace CAE
    {
        class SimLoadSetBuilder;
    }
    namespace CAE
    {
        class SimLoadSetCollection;
    }
    namespace CAE
    {
        class SimMotionLoadsBuilder;
    }
    namespace CAE
    {
        class SimMotionLoadsListItemBuilder;
    }
    namespace CAE
    {
        class SimMultiBCEditBuilder;
    }
    namespace CAE
    {
        class SimRecipeCollection;
    }
    namespace CAE
    {
        class SimResultReference;
    }
    namespace CAE
    {
        class SimSimulationObjectCollection;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class SimSolutionCollection;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    namespace CAE
    {
        class SimSoundProcessingCollection;
    }
    namespace CAE
    {
        class SmoothOptResultsBuilder;
    }
    namespace CAE
    {
        class SolutionManager;
    }
    namespace CAE
    {
        class StepManager;
    }
    namespace CAE
    {
        class TargetEntitiesBuilder;
    }
    namespace CAE
    {
        class TestModelCollection;
    }
    class NXObject;
    class Unit;
    namespace CAE
    {
        class _SimSimulationBuilder;
        class SimSimulationImpl;
        /**  @brief  This is the root object in a .sim file. Only one instance of this class will exist in each fem part file. 

           <br> To obtain an instance of this class, use @link NXOpen::CAE::SimPart::Simulation  NXOpen::CAE::SimPart::Simulation @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimSimulation : public NXOpen::NXObject
        {
            /** Used to specify the axisymmetric abstraction type during solution creation. */
            public: enum AxisymAbstractionType
            {
                AxisymAbstractionTypeNone/** No axisymmetric elements are allowed */,
                AxisymAbstractionTypeZxPlane/** ZX plane - Z axis axisymmetric elements are allowed */,
                AxisymAbstractionTypeXyPlane/** XY plane - Y axis axisymmetric elements are allowed */,
                AxisymAbstractionTypeXxyPlane/** XY plane - X axis axisymmetric elements are allowed */
            };

            private: SimSimulationImpl * m_simsimulation_impl;
            private: friend class  _SimSimulationBuilder;
            protected: SimSimulation();
            public: ~SimSimulation();
            /**Returns  the Condition Sequence Manager
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimConditionSeqMgr * ConditionSeqManager
            (
            );
            /**Returns  the active solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * ActiveSolution
            (
            );
            /**Sets  the active solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveSolution
            (
                NXOpen::CAE::SimSolution * activeSolution /** the active solution  @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink */
            );
            /** Creates a solution
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  with abstraction type input instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::SimSimulation::CreateSolution with abstraction type input instead.") NXOpen::CAE::SimSolution * CreateSolution
            (
                const NXString & solverType /** name of the solver */,
                const NXString & analysisType /** name of the analysis type */,
                const NXString & solutionType /** name of the solution type */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  with abstraction type input instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                const char * solverType /** name of the solver */,
                const char * analysisType /** name of the analysis type */,
                const char * solutionType /** name of the solution type */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                const NXString & solverType /** name of the solver */,
                const NXString & analysisType /** name of the analysis type */,
                const NXString & solutionType /** name of the solution type */,
                const NXString & name /** name of the solution to be created */,
                NXOpen::CAE::SimSimulation::AxisymAbstractionType abstractionType /** the axisymmetric abstraction type. Refer to NX help for more information */
            );
            /** Creates a solution
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                const char * solverType /** name of the solver */,
                const char * analysisType /** name of the analysis type */,
                const char * solutionType /** name of the solution type */,
                const char * name /** name of the solution to be created */,
                NXOpen::CAE::SimSimulation::AxisymAbstractionType abstractionType /** the axisymmetric abstraction type. Refer to NX help for more information */
            );
            /** Creates a solution from a condition sequence
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::SimSimulation::CreateSolution and NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence instead.") NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                const NXString & solverType /** name of the solver */,
                const NXString & analysisType /** name of the analysis type */,
                const NXString & solutionType /** name of the solution type */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                const char * solverType /** name of the solver */,
                const char * analysisType /** name of the analysis type */,
                const char * solutionType /** name of the solution type */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and number of integration steps
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  with number of steps input instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::SimSimulation::CreateSolution and NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence with number of steps input instead.") NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                int numSteps /** number of integration steps */,
                const NXString & solverType /** name of the solver */,
                const NXString & analysisType /** name of the analysis type */,
                const NXString & solutionType /** name of the solution type */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and number of integration steps
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  with number of steps input instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                int numSteps /** number of integration steps */,
                const char * solverType /** name of the solver */,
                const char * analysisType /** name of the analysis type */,
                const char * solutionType /** name of the solution type */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and integration step size
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  with step size input instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::SimSimulation::CreateSolution and NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence with step size input instead.") NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                double stepSize /** size of integration steps */,
                NXOpen::Unit * stepUnit /** step size @link NXOpen::Unit NXOpen::Unit@endlink */,
                const NXString & solverType /** name of the solver */,
                const NXString & analysisType /** name of the analysis type */,
                const NXString & solutionType /** name of the solution type */,
                const NXString & name /** name of the solution to be created */
            );
            /** Creates a solution from a condition sequence and integration step size
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateSolution NXOpen::CAE::SimSimulation::CreateSolution@endlink  and @link NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence NXOpen::CAE::SimSolution::SetTimePropsFromConditionSequence@endlink  with step size input instead. <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** create solution from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                double stepSize /** size of integration steps */,
                NXOpen::Unit * stepUnit /** step size @link NXOpen::Unit NXOpen::Unit@endlink */,
                const char * solverType /** name of the solver */,
                const char * analysisType /** name of the analysis type */,
                const char * solutionType /** name of the solution type */,
                const char * name /** name of the solution to be created */
            );
            /** Creates a solution from free body
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::NodalForceReport * nodalForceReport /** create solution from @link NXOpen::CAE::NodalForceReport NXOpen::CAE::NodalForceReport@endlink  */,
                const NXString & name /** name of the solution to be created */,
                NXOpen::CAE::NodalForceReport::SubcaseOption subcaseOption /** the subcase option */,
                NXOpen::CAE::SimSolutionStep * stepTag /** solution step to be used if subcase option is single */,
                bool createForce /** should be true to create force lbc */,
                bool createMoment /** should be true to create moment lbc */
            );
            /** Creates a solution from free body
                      @return  the created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::SimSolution * CreateSolution
            (
                NXOpen::CAE::NodalForceReport * nodalForceReport /** create solution from @link NXOpen::CAE::NodalForceReport NXOpen::CAE::NodalForceReport@endlink  */,
                const char * name /** name of the solution to be created */,
                NXOpen::CAE::NodalForceReport::SubcaseOption subcaseOption /** the subcase option */,
                NXOpen::CAE::SimSolutionStep * stepTag /** solution step to be used if subcase option is single */,
                bool createForce /** should be true to create force lbc */,
                bool createMoment /** should be true to create moment lbc */
            );
            /** Delete the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteSolution
            (
                NXOpen::CAE::SimSolution * solution /** the @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  to be deleted */
            );
            /** Clone the solution
                      @return  the  newly created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * CloneSolution
            (
                NXOpen::CAE::SimSolution * oldSolution /** the @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  to be cloned */,
                const NXString & suggestedName /** name to use instead of default name (may be NULL) */
            );
            /** Clone the solution
                      @return  the  newly created @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink   
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolution * CloneSolution
            (
                NXOpen::CAE::SimSolution * oldSolution /** the @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  to be cloned */,
                const char * suggestedName /** name to use instead of default name (may be NULL) */
            );
            /** Creates a step and add to the solution
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateSolutionStep
            (
                NXOpen::CAE::SimSolution * solution /** the solution to which the step will be added,
                                                                                                 if a NULL is passed the current active solution
                                                                                                 will be used */,
                int stepType /** index of the step type */,
                const NXString & name /** name of the step */
            );
            /** Creates a step and add to the solution
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateSolutionStep
            (
                NXOpen::CAE::SimSolution * solution /** the solution to which the step will be added,
                                                                                                 if a NULL is passed the current active solution
                                                                                                 will be used */,
                int stepType /** index of the step type */,
                const char * name /** name of the step */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const NXString & bcDescName /** name of the load descriptor */,
                const NXString & bcName /** name of the load to be created */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const char * bcDescName /** name of the load descriptor */,
                const char * bcName /** name of the load to be created */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const NXString & bcDescName /** name of the load descriptor */,
                const NXString & bcName /** name of the load to be created */,
                int label /** load label */
            );
            /** Creates a BC builder for the load descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForLoadDescriptor
            (
                const char * bcDescName /** name of the load descriptor */,
                const char * bcName /** name of the load to be created */,
                int label /** load label */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const NXString & bcDescName /** name of the constraint descriptor */,
                const NXString & bcName /** name of the constraint to be created */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const char * bcDescName /** name of the constraint descriptor */,
                const char * bcName /** name of the constraint to be created */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const NXString & bcDescName /** name of the constraint descriptor */,
                const NXString & bcName /** name of the constraint to be created */,
                int label /** constraint label */
            );
            /** Creates a BC builder for the constraint descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForConstraintDescriptor
            (
                const char * bcDescName /** name of the constraint descriptor */,
                const char * bcName /** name of the constraint to be created */,
                int label /** constraint label */
            );
            /** Creates a boundary condition builder for the simulation object descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const NXString & bcDescName /** name of the simulation object descriptor */,
                const NXString & bcName /** name of the simulation object to be created */
            );
            /** Creates a boundary condition builder for the simulation object descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const char * bcDescName /** name of the simulation object descriptor */,
                const char * bcName /** name of the simulation object to be created */
            );
            /** Creates a boundary condition builder for the simulation object descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const NXString & bcDescName /** name of the simulation object descriptor */,
                const NXString & bcName /** name of the simulation object to be created */,
                int label /** simulation object label */
            );
            /** Creates a boundary condition builder for the simulation object descriptor passed
                      @return  boundary condition builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimBCBuilder * CreateBcBuilderForSimulationObjectDescriptor
            (
                const char * bcDescName /** name of the simulation object descriptor */,
                const char * bcName /** name of the simulation object to be created */,
                int label /** simulation object label */
            );
            /** Creates a boundary condition builder for the boundary condition passed
                      @return  boundary condition builder 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCBuilder * CreateBcBuilderForBc
            (
                NXOpen::CAE::SimBC * bc /** boundary condition object */
            );
            /** Creates a multiple lbc builder
                      @return  multi boundary condition builder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimMultiBCEditBuilder * CreateMultiBcEditBuilder
            (
                const std::vector<NXOpen::CAE::SimBC *> & bcs /** boundary conditions to edit */
            );
            /** Adds the boundary condition to the step in the solution passed.
                        If solution is NULL then the boundary condition is added to the active solution
                        If step is NULL then the boundary condition is added to the active step
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** boundary condition object */,
                NXOpen::CAE::SimSolution * solution /** solution */,
                NXOpen::CAE::SimSolutionStep * solutionStep /** solution step */
            );
            /** Creates a @link NXOpen::CAE::AutoPairsBuilder NXOpen::CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateAutoFacePairsBuilder NXOpen::CAE::SimSimulation::CreateAutoFacePairsBuilder@endlink . <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use NXOpen::CAE::SimSimulation::CreateAutoFacePairsBuilder.") NXOpen::CAE::AutoPairsBuilder * CreateAutoPairsBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoPairsBuilder NXOpen::CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateAutoFacePairsBuilder NXOpen::CAE::SimSimulation::CreateAutoFacePairsBuilder@endlink . <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoPairsBuilder * CreateAutoPairsBuilder
            (
                const char * pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoPairsBuilder NXOpen::CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoPairsBuilder * CreateAutoFacePairsBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoPairsBuilder NXOpen::CAE::AutoPairsBuilder@endlink   @return  The AutoPairsBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoPairsBuilder * CreateAutoFacePairsBuilder
            (
                const char * pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoEdgePairsBuilder NXOpen::CAE::AutoEdgePairsBuilder@endlink   @return  The AutoEdgePairsBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoEdgePairsBuilder * CreateAutoEdgePairsBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoEdgePairsBuilder NXOpen::CAE::AutoEdgePairsBuilder@endlink   @return  The AutoEdgePairsBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoEdgePairsBuilder * CreateAutoEdgePairsBuilder
            (
                const char * pcBCDescName /** The neutral name of the AutoPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoCyclicSymmetryPairsBuilder NXOpen::CAE::AutoCyclicSymmetryPairsBuilder@endlink   @return  The AutoCyclicSymmetryPairsBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoCyclicSymmetryPairsBuilder * CreateAutoCyclicSymmetryPairsBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the AutoCyclicSymmetryPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoCyclicSymmetryPairsBuilder NXOpen::CAE::AutoCyclicSymmetryPairsBuilder@endlink   @return  The AutoCyclicSymmetryPairsBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoCyclicSymmetryPairsBuilder * CreateAutoCyclicSymmetryPairsBuilder
            (
                const char * pcBCDescName /** The neutral name of the AutoCyclicSymmetryPairsDescriptor.  */
            );
            /** Creates a @link NXOpen::CAE::AutoBCBuilder NXOpen::CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateAutoFaceBcBuilder NXOpen::CAE::SimSimulation::CreateAutoFaceBcBuilder@endlink . <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use NXOpen::CAE::SimSimulation::CreateAutoFaceBcBuilder.") NXOpen::CAE::AutoBCBuilder * CreateAutoBcBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const NXString & pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /** Creates a @link NXOpen::CAE::AutoBCBuilder NXOpen::CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use @link NXOpen::CAE::SimSimulation::CreateAutoFaceBcBuilder NXOpen::CAE::SimSimulation::CreateAutoFaceBcBuilder@endlink . <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoBCBuilder * CreateAutoBcBuilder
            (
                const char * pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const char * pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /** Creates a @link NXOpen::CAE::AutoBCBuilder NXOpen::CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoBCBuilder * CreateAutoFaceBcBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const NXString & pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /** Creates a @link NXOpen::CAE::AutoBCBuilder NXOpen::CAE::AutoBCBuilder@endlink   @return  The AutoBCBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoBCBuilder * CreateAutoFaceBcBuilder
            (
                const char * pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const char * pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /** Creates a @link NXOpen::CAE::AutoEdgeBCBuilder NXOpen::CAE::AutoEdgeBCBuilder@endlink   @return  The AutoEdgeLbcBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::AutoEdgeBCBuilder * CreateAutoEdgeBcBuilder
            (
                const NXString & pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const NXString & pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /** Creates a @link NXOpen::CAE::AutoEdgeBCBuilder NXOpen::CAE::AutoEdgeBCBuilder@endlink   @return  The AutoEdgeLbcBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::AutoEdgeBCBuilder * CreateAutoEdgeBcBuilder
            (
                const char * pcBCDescName /** The neutral name of the LBCDescriptor.  */,
                const char * pcRecipeName /** The name of the AutoBCRecipe  */
            );
            /**Returns  the FEModelOccurrence @link  NXOpen::CAE::FEModelOccurrence   NXOpen::CAE::FEModelOccurrence @endlink  associated with the simulation object
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::FEModelOccurrence * Femodel
            (
            );
            /** Creates a @link NXOpen::CAE::SimMotionLoadsBuilder NXOpen::CAE::SimMotionLoadsBuilder@endlink   @return  The SimMotionLoadsBuilder object 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimMotionLoadsBuilder * CreateMotionLoadsBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::SimMotionLoadsListItemBuilder NXOpen::CAE::SimMotionLoadsListItemBuilder@endlink   @return  The SimMotionLoadsListItemBuilder object 
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimMotionLoadsListItemBuilder * CreateMotionLoadsListItemBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::CaeRegionBuilder NXOpen::CAE::CaeRegionBuilder@endlink   @return  The RegionBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeRegionBuilder * CreateCaeRegionBuilder
            (
                const NXString & pcRegionDescName /** The neutral name of the region descriptor.  */,
                NXOpen::CAE::CaeRegion * tRegion /** The region if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link NXOpen::CAE::CaeRegionBuilder NXOpen::CAE::CaeRegionBuilder@endlink   @return  The RegionBuilder object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeRegionBuilder * CreateCaeRegionBuilder
            (
                const char * pcRegionDescName /** The neutral name of the region descriptor.  */,
                NXOpen::CAE::CaeRegion * tRegion /** The region if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link NXOpen::CAE::SimBcPlotContoursBuilder NXOpen::CAE::SimBcPlotContoursBuilder@endlink   @return  The SimBcPlotContoursBuilder object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimBcPlotContoursBuilder * CreateSimBcPlotContoursBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::SimBcXyPlotBuilder NXOpen::CAE::SimBcXyPlotBuilder@endlink   @return  The SimBcXyPlotBuilder object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimBcXyPlotBuilder * CreateSimBcXyPlotBuilder
            (
            );
            /** Creates a builder for boundary condition selection display controls command to display boundary condition's selection CAE geometries
                        with this boundary condition's persistent display color
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BCSelectionDisplayBuilder * CreateBcSelectionDisplayBuilder
            (
            );
            /** Updates the specified boundary conditions persistent display color according to the sequence colors defined in 
                        customer default setting. The behavior of this API is depends on the inputs:
                        1, If only @link NXOpen::CAE::SimBC NXOpen::CAE::SimBC@endlink  objects are input, then each boundary condition will get its own sequence color.
                        2, If only @link NXOpen::CAE::SimLbcFolder NXOpen::CAE::SimLbcFolder@endlink  objects are input, then each Folder will get its 
                           own sequence color and that color will be applied to all the boundary condition in the folder; If a folder is 
                           subfolders and the parent folder also in the input objects list, then this subfolder's color is same
                           as the parent folder's color, if the subfolder in the input list but its parent folder is not in the
                           list, this subfolder will get its own sequence color.            
                        3, If only one @link NXOpen::CAE::SimLbcFolder NXOpen::CAE::SimLbcFolder@endlink  is input, or if the input contains both 
                           @link NXOpen::CAE::SimBC NXOpen::CAE::SimBC@endlink  and @link NXOpen::CAE::SimLbcFolder NXOpen::CAE::SimLbcFolder@endlink  objects, then each boundary condition will 
                           get its own sequence color.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void BcSequenceDisplay
            (
                const std::vector<NXOpen::NXObject *> & objects /** The input objects can be 1, @link NXOpen::CAE::SimBC NXOpen::CAE::SimBC@endlink 
                                                                                                                       2, @link NXOpen::CAE::SimLbcFolder NXOpen::CAE::SimLbcFolder@endlink */
            );
            /** Creates a @link NXOpen::CAE::StepManager NXOpen::CAE::StepManager@endlink  for a solution @return  The StepManager object 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::StepManager * CreateStepManager
            (
                NXOpen::CAE::SimSolution * tSol /** solution */
            );
            /** Creates a @link NXOpen::CAE::SolutionManager NXOpen::CAE::SolutionManager@endlink  for the active solution environment @return  The SolutionManager object 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SolutionManager * CreateSolutionManager
            (
            );
            /** Creates a @link NXOpen::CAE::SimLoadSetBuilder NXOpen::CAE::SimLoadSetBuilder@endlink   @return  The LoadSetBuilder object 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimLoadSetBuilder * CreateLoadSetBuilder
            (
                const NXString & pcLoadSetDescName /** The neutral name of the load set descriptor.  */,
                const NXString & pName /** The name of the load set.  */,
                NXOpen::CAE::SimLoadSet * tLoadSet /** The load set if we are editing it, or NULL if we are creating a new one */,
                int iLabel /** The label of the load set.  */
            );
            /** Creates a @link NXOpen::CAE::SimLoadSetBuilder NXOpen::CAE::SimLoadSetBuilder@endlink   @return  The LoadSetBuilder object 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimLoadSetBuilder * CreateLoadSetBuilder
            (
                const char * pcLoadSetDescName /** The neutral name of the load set descriptor.  */,
                const char * pName /** The name of the load set.  */,
                NXOpen::CAE::SimLoadSet * tLoadSet /** The load set if we are editing it, or NULL if we are creating a new one */,
                int iLabel /** The label of the load set.  */
            );
            /** Creates a @link NXOpen::CAE::ImportedSolutionBuilder NXOpen::CAE::ImportedSolutionBuilder@endlink   @return  The ImportedSolutionBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ImportedSolutionBuilder * CreateImportedSolutionBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::ResultSourceBuilder NXOpen::CAE::ResultSourceBuilder@endlink   @return  The ResultSourceBuilder object 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultSourceBuilder * CreateResultSourceBuilder
            (
                NXOpen::CAE::SimSolution * tSolution /** The solution to edit */
            );
            /** Creates a @link NXOpen::CAE::SimConstraintSetBuilder NXOpen::CAE::SimConstraintSetBuilder@endlink   @return  The ConstraintSetBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimConstraintSetBuilder * CreateConstraintSetBuilder
            (
                const NXString & pcConstraintSetDescName /** The neutral name of the constraint set descriptor.  */,
                NXOpen::CAE::SimConstraintSet * tConstraintSet /** The constraint set if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link NXOpen::CAE::SimConstraintSetBuilder NXOpen::CAE::SimConstraintSetBuilder@endlink   @return  The ConstraintSetBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimConstraintSetBuilder * CreateConstraintSetBuilder
            (
                const char * pcConstraintSetDescName /** The neutral name of the constraint set descriptor.  */,
                NXOpen::CAE::SimConstraintSet * tConstraintSet /** The constraint set if we are editing it, or NULL if we are creating a new one */
            );
            /** Creates a @link NXOpen::CAE::SmoothOptResultsBuilder NXOpen::CAE::SmoothOptResultsBuilder@endlink   @return  The SmoothOptResultsBuilder object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SmoothOptResultsBuilder * SmoothOptResultsCreateBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::BcLabelManagerBuilder NXOpen::CAE::BcLabelManagerBuilder@endlink   @return  The BcLabelManagerBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::BcLabelManagerBuilder * CreateBcLabelManagerBuilder
            (
            );
            /** Creates a @link NXOpen::CAE::DeleteUnreferencedEntitiesBuilder NXOpen::CAE::DeleteUnreferencedEntitiesBuilder@endlink   @return  The DeleteUnreferencedEntitiesBuilder object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DeleteUnreferencedEntitiesBuilder * CreateDeleteUnreferencedEntitiesBuilder
            (
            );
            /** This method will update the finite element model 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UpdateFemodel
            (
            );
            /** Creates the builder to create and edit target entities  @return   
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::TargetEntitiesBuilder * CreateTargetEntitiesBuilder
            (
            );
            /** Creates a @link CAE::LoadcaseCombinationBuilder CAE::LoadcaseCombinationBuilder@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::LoadcaseCombinationBuilder * CreateLoadcaseCombinationBuilder
            (
                NXOpen::CAE::SimResultReference * tResult /** Result @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink  */
            );
            /** Creates the builder to generate energy distribution table for result file  @return   
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_nv_modeling ("Simcenter Noise and Vibration modeling") */
            public: NXOpen::CAE::EnergyDistributionTableBuilder * CreateEnergyDistributionTableBuilder
            (
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::CAE::SimFieldFromBcBuilder NXOpen::CAE::SimFieldFromBcBuilder@endlink   @return  The SimFieldFromBcBuilder object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SimFieldFromBcBuilder * CreateSimFieldFromBcBuilder
            (
            );

            /// \endcond 
            /** Creates the builder to generate a directionality field from a pressure result  @return   
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_sysnoisebem_ui (" Simcenter 3D Acoustic BEM environment") OR sc_nv_modeling ("Simcenter Noise and Vibration modeling") */
            public: NXOpen::CAE::DirectionalityFieldBuilder * CreateDirectionalityFieldBuilder
            (
            );
            /** Creates a @link CAE::SimBCMultiCopyBuilder CAE::SimBCMultiCopyBuilder@endlink    @return  multi boundary condition copy builder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimBCMultiCopyBuilder * CreateBcMultiCopyBuilder
            (
            );
            /** Creates a builder that copies a source targetset to multiple targetsets
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::MultiTargetsetCopyBuilder * CreateMultiTargetsetCopyBuilder
            (
            );
            /** Creates a load mapping builder
                     
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::LoadMappingBuilder * CreateLoadMappingBuilder
            (
            );


            /** Returns the load collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLoadCollection *Loads();
            /** Returns the constraint collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimConstraintCollection *Constraints();
            /** Returns the simulation object collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimSimulationObjectCollection *SimulationObjects();
            /** Returns the response simulation manager belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::ResponseSimulation::Manager *ResponseSimulationManager();
            /** Returns the correl manager belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::CorrelManager *CorrelManager();
            /** Returns the simulation recipe collection belonging to this sim part 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::CAE::SimRecipeCollection *SimulationRecipes();
            /** Returns the CAE region collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::CaeRegionCollection *CaeRegions();
            /** Returns the CAE DOFSet collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::CaeDOFSetCollection *CaeDOFSets();
            /** Returns the durability manager belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::DurabilityManager *DurabilityManager();
            /** Returns the CAE Solution collection belonging to this sim part 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::CAE::SimSolutionCollection *Solutions();
            /** Returns the laminate manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::LaminateManager *LaminateManager();
            /** Returns the optimization manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::Optimization::TBSOptimizationManager *TBSOptimizationManager();
            /** Returns the Design and Analysis optimization manager belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::Optimization::DAOOptimizationManager *OptimizationManager();
            /** Returns the CAE ResultMeasure collection belonging to this sim part 
             <br>  Created in NX8.0.0.  <br>  
            */
            public: NXOpen::CAE::ResultMeasureCollection *ResultMeasures();
            /** Returns the CAE SimLbcFolder collection belonging to this sim part 
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLbcFolderCollection *LbcFolders();
            /** Returns the CAE Adaptivity collection belonging to this sim part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::CAE::AdaptivityMetaSolutionCollection *AdaptivitySolutions();
            /** Returns the CAE Load Recipe collection belonging to this sim part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLoadRecipeCollection *LoadRecipes();
            /** Returns the CAE SimLoadSet collection belonging to this sim part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::CAE::SimLoadSetCollection *LoadSets();
            /** Returns the CAE SimConstraintSet collection belonging to this sim part 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::CAE::SimConstraintSetCollection *ConstraintSets();
            /** Returns the durability specialist manager belonging to this sim part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::CAE::DurSpecialistManager *DurSpecialistManager();
            /** Returns the Data Processing collection belonging to this sim part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::CAE::DataProcessingCollection *DataProcessings();
            /** Returns the aero structure manager belonging to this sim part 
             <br>  Created in NX12.0.0.  <br>  
            */
            public: NXOpen::CAE::AeroStructManager *AeroStructManager();
            /** Returns the aero structure manager belonging to this sim part 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::CAE::ModelAndLoadPreProcessor *ModelAndLoadPreProcessor();
            /** Returns the acoustics and vibration manager belonging to this sim part 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::CAE::AcousticsAndVibrationManager *AcousticsAndVibrationManager();
            /** Returns the acoustics manage belonging to this sim part 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::CAE::Acoustics *Acoustics();
            /** Returns the test model collection belonging to this sim part 
             <br>  Created in NX1847.0.0.  <br>  
            */
            public: NXOpen::CAE::TestModelCollection *TestModels();
            /** Returns the collaborative interface collection belonging to this sim part 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public: NXOpen::CAE::SimInterfaceCollection *SimInterfaces();
            /** Returns the imported collaborative interface collection belonging to this sim part 
             <br>  Created in NX2007.0.0.  <br>  
            */
            public: NXOpen::CAE::ImportedSimInterfaceCollection *ImportedSimInterfaces();
            /** Returns the sound processors 
             <br>  Created in NX1980.0.0.  <br>  
            */
            public: NXOpen::CAE::SimSoundProcessingCollection *SoundProcessors();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
