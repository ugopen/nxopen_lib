#ifndef NXOpen_CAE_MODELDEPENDENCYCHECK_MANAGER_HXX_INCLUDED
#define NXOpen_CAE_MODELDEPENDENCYCHECK_MANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelDependencyCheck_Manager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ModelDependencyCheck_Result.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ModelDependencyCheck
        {
            class Manager;
        }
    }
    namespace CAE
    {
        class CaeSession;
    }
    namespace CAE
    {
        namespace ModelDependencyCheck
        {
            class Result;
        }
    }
    class INXObject;
    namespace CAE
    {
        namespace ModelDependencyCheck
        {
            class ManagerImpl;
            /**  @brief  The Model Dependency Check Utilities class offers means for utilities methods  

               <br> To obtain an instance of this class use @link NXOpen::CAE::CaeSession::ModelDependencyCheckManager NXOpen::CAE::CaeSession::ModelDependencyCheckManager@endlink .  <br> 
             <br>  Created in NX2007.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Manager
            {
                private: ManagerImpl * m_manager_impl;
                private: NXOpen::CAE::CaeSession* m_owner;
                /// \cond NX_NO_DOC 
                public: explicit Manager(NXOpen::CAE::CaeSession *owner);


                /// \endcond 
                public: 
                /**Returns the tag of this object.  */
                tag_t Tag() const; 
                public: ~Manager();
                /** Performs check to find dependency model conflicts
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: void PerformCheck
                (
                );
                /** Auto resolve all results
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: void AutoResolveAllResults
                (
                );
                /** Auto resolve subset of results
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: void AutoResolveSubsetResults
                (
                    const std::vector<NXOpen::CAE::ModelDependencyCheck::Result *> & resultsToResolve /** resultstoresolve */ 
                );
                /** Export results in txt file
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: void ExportResults
                (
                    const NXString & resultsFile /** resultsfile */ 
                );
                /** Export results in txt file
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                void ExportResults
                (
                    const char * resultsFile /** resultsfile */ 
                );
                /** Get results obtained from the latest check
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::ModelDependencyCheck::Result *> GetResults
                (
                );
                /** Finds the @link  NXOpen::INXObject   NXOpen::INXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.
                            An exception will be thrown if no object can be found with the given journal identifier.  @return  An object matching the journal identifier 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::INXObject * FindObject
                (
                    const NXString & journalIdentifier /** Journal identifier of the object */
                );
                /** Finds the @link  NXOpen::INXObject   NXOpen::INXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.
                            An exception will be thrown if no object can be found with the given journal identifier.  @return  An object matching the journal identifier 
                 <br>  Created in NX2007.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::INXObject * FindObject
                (
                    const char * journalIdentifier /** Journal identifier of the object */
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
