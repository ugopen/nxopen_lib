#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSMESHMAPPINGDATABUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSMESHMAPPINGDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessMeshMappingDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessMeshMappingDataBuilder;
    }
    class Builder;
    class Expression;
    class SelectTaggedObjectList;
    namespace CAE
    {
        class _ModelAndLoadPreProcessMeshMappingDataBuilderBuilder;
        class ModelAndLoadPreProcessMeshMappingDataBuilderImpl;
        /** Represents a @link CAE::ModelAndLoadPreProcessMeshMappingData CAE::ModelAndLoadPreProcessMeshMappingData@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDatas::CreateBuilder  NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDatas::CreateBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessMeshMappingDataBuilder : public NXOpen::Builder
        {
            /** The mapping method for this data*/
            public: enum MappingMethod
            {
                MappingMethodMaximumDistance/** maximum distance */ ,
                MappingMethodConservativeMaximumDistance/** conservative maximum distance */ ,
                MappingMethodNearestNeighbour/** nearest neighbour */ ,
                MappingMethodMatrix/** matrix */ 
            };

            /** The intermediate entity type*/
            public: enum IntermediateEntity
            {
                IntermediateEntityNone/** none */ ,
                IntermediateEntityNode/** node */ ,
                IntermediateEntityElement/** element */ ,
                IntermediateEntityElementFace/** element face */ 
            };

            /** the selection criterion.
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the TargetSelectionTypeEnum instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the TargetSelectionTypeEnum instead.") SelectionCriterion
            {
                SelectionCriterionModelEntities/** Model entities */,
                SelectionCriterionIntermediaryEntities/** intermediary entities */ 
            };

            /** the selection type for target mesh.*/
            public: enum TargetSelectionTypeEnum
            {
                TargetSelectionTypeEnumModelMeshSelection/** model mesh selection */ ,
                TargetSelectionTypeEnumIntermediaryMeshSelection/** intermediary mesh selection */ ,
                TargetSelectionTypeEnumSourceMeshSelection/** source mesh selection */ 
            };

            /** the selection type for source mesh.*/
            public: enum SourceSelectionTypeEnum
            {
                SourceSelectionTypeEnumIntermediaryMeshSelection/** intermediary mesh selection */ ,
                SourceSelectionTypeEnumAllMesh/** all mesh */ ,
                SourceSelectionTypeEnumModelMeshSelection/** model mesh selection */ 
            };

            /** The intermediate slot*/
            public: enum IntermediateSlot
            {
                IntermediateSlotSource/** source */ ,
                IntermediateSlotTarget/** target */ 
            };

            /** The coordinate system type*/
            public: enum TargetDataCsysTypeEnum
            {
                TargetDataCsysTypeEnumAbsolute/** absolute */ ,
                TargetDataCsysTypeEnumNative/** native */ 
            };

            private: ModelAndLoadPreProcessMeshMappingDataBuilderImpl * m_modelandloadpreprocessmeshmappingdatabuilder_impl;
            private: friend class  _ModelAndLoadPreProcessMeshMappingDataBuilderBuilder;
            protected: ModelAndLoadPreProcessMeshMappingDataBuilder();
            public: ~ModelAndLoadPreProcessMeshMappingDataBuilder();
            /**Returns  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetName
            (
                const NXString & title /** title */ 
            );
            /**Sets  the name. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetName
            (
                const char * title /** title */ 
            );
            /**Returns  the method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::MappingMethod Method
            (
            );
            /**Sets  the method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMethod
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::MappingMethod method /** method */ 
            );
            /**Returns  the num infl nodes 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NumInflNodes
            (
            );
            /**Sets  the num infl nodes 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNumInflNodes
            (
                int numInflNodes /** numinflnodes */ 
            );
            /**Returns  the maximum distance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumDistance
            (
            );
            /**Returns  the path to the mapping matrix file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MatrixFilePath
            (
            );
            /**Sets  the path to the mapping matrix file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMatrixFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the path to the mapping matrix file 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetMatrixFilePath
            (
                const char * filePath /** filepath */ 
            );
            /**Returns  the target criterion 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the TargetSelectionType property instead. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the TargetSelectionType property instead.") NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::SelectionCriterion TargetCriterion
            (
            );
            /**Sets  the target criterion 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the TargetSelectionType property instead. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the TargetSelectionType property instead.") void SetTargetCriterion
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::SelectionCriterion selCrit /** selcrit */ 
            );
            /**Returns  the target selection type
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::TargetSelectionTypeEnum TargetSelectionType
            (
            );
            /**Sets  the target selection type
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetSelectionType
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::TargetSelectionTypeEnum selType /** seltype */ 
            );
            /**Returns  the source selection type
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::SourceSelectionTypeEnum SourceSelectionType
            (
            );
            /**Sets  the source selection type
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSourceSelectionType
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::SourceSelectionTypeEnum selType /** seltype */ 
            );
            /**Returns  the model selection 
             <br>  @deprecated Deprecated in NX1953.0.0.  Use TargetModelSelection property instead. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1953.0.0.  Use TargetModelSelection property instead.") NXOpen::SelectTaggedObjectList * ModelSelection
            (
            );
            /**Returns  the target model selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * TargetModelSelection
            (
            );
            /**Returns  the target model selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * SourceModelSelection
            (
            );
            /** Sets the intermediate entities by labels to the source or target selection. Clears previous selection.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntermediateEntities
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::IntermediateSlot slot /** slot */ ,
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::IntermediateEntity entityType /** entitytype */ ,
                const std::vector<int> & intermediateEntities /** intermediateentities */ 
            );
            /** Sets the intermediate mesh groups to the source or target selection. Clears previous selection.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntermediateMeshGroups
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::IntermediateSlot slot /** slot */ ,
                std::vector<NXString> & meshGroupNames /** meshgroupnames */ 
            );
            /**Returns  the target (mapped) data coordinate system type
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::TargetDataCsysTypeEnum TargetDataCsysType
            (
            );
            /**Sets  the target (mapped) data coordinate system type
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTargetDataCsysType
            (
                NXOpen::CAE::ModelAndLoadPreProcessMeshMappingDataBuilder::TargetDataCsysTypeEnum csysType /** csystype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
