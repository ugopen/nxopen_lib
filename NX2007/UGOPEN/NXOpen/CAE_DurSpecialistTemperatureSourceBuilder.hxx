#ifndef NXOpen_CAE_DURSPECIALISTTEMPERATURESOURCEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTTEMPERATURESOURCEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistTemperatureSourceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurSpecialistDataSources.hxx>
#include <NXOpen/CAE_DurSpecialistTemperatureLoadBuilder.hxx>
#include <NXOpen/CAE_SimSolution.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistTemperatureSourceBuilder;
    }
    class Builder;
    namespace CAE
    {
        class DurSpecialistDataSources;
    }
    namespace CAE
    {
        class DurSpecialistTemperatureLoad;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _DurSpecialistTemperatureSourceBuilderBuilder;
        class DurSpecialistTemperatureSourceBuilderImpl;
        /** Represents a @link CAE::DurSpecialistTemperatureSourceBuilder CAE::DurSpecialistTemperatureSourceBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::DurSpecialistTemperatureSourceCollection::CreateTemperatureSourceBuilder  NXOpen::CAE::DurSpecialistTemperatureSourceCollection::CreateTemperatureSourceBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        EnumLoadSource </term> <description> 
         
        Field </description> </item> 

        <item><term> 
         
        EnumOverlapResolution </term> <description> 
         
        Maximum </description> </item> 

        <item><term> 
         
        EnumResultSource </term> <description> 
         
        SolutionResult </description> </item> 

        <item><term> 
         
        EnumSourceType </term> <description> 
         
        Constant </description> </item> 

        <item><term> 
         
        EnumTemperatureDistribution </term> <description> 
         
        EntireModel </description> </item> 

        <item><term> 
         
        ToggleTemperatureRemainingStructure </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TransientLoadTimeControl </term> <description> 
         
        DefineIncrement </description> </item> 

        <item><term> 
         
        TransientLoadTimeIncrement </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistTemperatureSourceBuilder : public NXOpen::Builder
        {
            /** the temperature source type. */
            public: enum SourceType
            {
                SourceTypeConstant/** constant */ ,
                SourceTypeTimeHistory/** time history */ ,
                SourceTypeDataSource/** data source */ ,
                SourceTypeTransientDataSource/** transient data source */ 
            };

            /** the options for temperature source type. */
            public: enum TemperatureDistribution
            {
                TemperatureDistributionEntireModel/** entire model */ ,
                TemperatureDistributionGroups/** groups */ 
            };

            /** the nodal combination. */
            public: enum OverlapResolution
            {
                OverlapResolutionMaximum/** maximum */ ,
                OverlapResolutionMinimum/** minimum */ ,
                OverlapResolutionAverage/** average */ 
            };

            /** the time step control. */
            public: enum TimeStepControl
            {
                TimeStepControlDefineIncrement/** define increment */ ,
                TimeStepControlStartandEnd/** startand end */ 
            };

            /** the Results source */
            public: enum ResultSource
            {
                ResultSourceFile/** use selected file */,
                ResultSourceSolutionResult/** use solution result */
            };

            /** Type of move operations for the increment list */
            public: enum MoveOperation
            {
                MoveOperationReverseOrder/** Reverse order of selected increments */,
                MoveOperationMoveUp/** Move selected increments up */,
                MoveOperationMoveDown/** Move selected increments down */
            };

            /** Type of edit operations for the increments in the list */
            public: enum EditOperation
            {
                EditOperationActive/** Set Active property for selected increments */,
                EditOperationVisible/** Set Visible property for selected increments */,
                EditOperationOutput/** Set Output (for solver use) property for selected increments */
            };

            /** Represents the match by type */
            public: enum MatchByType
            {
                MatchByTypeName/** Name matching */,
                MatchByTypeIndex/** Index matching */
            };

            /** Type of operation for the subcase link list */
            public: enum SubcaseLinkOperation
            {
                SubcaseLinkOperationMoveUp/** Move selected subcase links up */,
                SubcaseLinkOperationMoveDown/** Move selected subcase links down */,
                SubcaseLinkOperationActivate/** Activate selected subcase links */,
                SubcaseLinkOperationDeactivate/** Deactivate selected subcase links */,
                SubcaseLinkOperationScale/** Scale selected subcase links */,
                SubcaseLinkOperationReverseOrder/** Reverse order for selected subcase links */,
                SubcaseLinkOperationOriginalOrder/** Original order for selected subcase links */,
                SubcaseLinkOperationDuplicate/** Duplicate selected subcase links*/,
                SubcaseLinkOperationRemove/** Remove selected subcase links */
            };

            private: DurSpecialistTemperatureSourceBuilderImpl * m_durspecialisttemperaturesourcebuilder_impl;
            private: friend class  _DurSpecialistTemperatureSourceBuilderBuilder;
            protected: DurSpecialistTemperatureSourceBuilder();
            public: ~DurSpecialistTemperatureSourceBuilder();
            /**Returns  the source type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::SourceType EnumSourceType
            (
            );
            /**Sets  the source type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumSourceType
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::SourceType enumSourceType /** enumsourcetype */ 
            );
            /**Returns  the options 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::TemperatureDistribution EnumTemperatureDistribution
            (
            );
            /**Sets  the options 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumTemperatureDistribution
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::TemperatureDistribution enumTemperatureDistribution /** enumtemperaturedistribution */ 
            );
            /**Returns  the toggle for the temperature of the remaining structure 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleTemperatureRemainingStructure
            (
            );
            /**Sets  the toggle for the temperature of the remaining structure 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetToggleTemperatureRemainingStructure
            (
                bool toggleTemperatureRemainingStructure /** toggletemperatureremainingstructure */ 
            );
            /**Returns  the temperature load type for the remaining structure 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadType EnumRemainingStructureTemperatureLoadType
            (
            );
            /**Sets  the temperature load type for the remaining structure 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumRemainingStructureTemperatureLoadType
            (
                NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadType loadType /** loadtype */ 
            );
            /**Returns  the property table 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
            /**Returns  the nodal combination 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::OverlapResolution EnumOverlapResolution
            (
            );
            /**Sets  the nodal combination 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumOverlapResolution
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::OverlapResolution enumOverlapResolution /** enumoverlapresolution */ 
            );
            /**Returns  the enum load source 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadSource EnumLoadSource
            (
            );
            /**Sets  the enum load source 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumLoadSource
            (
                NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadSource enumLoadSource /** enumloadsource */ 
            );
            /**Returns  the transient load time control 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::TimeStepControl TransientLoadTimeControl
            (
            );
            /**Sets  the transient load time control 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetTransientLoadTimeControl
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::TimeStepControl transientLoadTimeControl /** transientloadtimecontrol */ 
            );
            /**Returns  the transient load time increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int TransientLoadTimeIncrement
            (
            );
            /**Sets  the transient load time increment 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetTransientLoadTimeIncrement
            (
                int transientLoadTimeIncrement /** transientloadtimeincrement */ 
            );
            /**Returns  the enum result source 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::ResultSource EnumResultSource
            (
            );
            /**Sets  the enum result source 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumResultSource
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::ResultSource enumResultSource /** enumresultsource */ 
            );
            /** Get the file name. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFileName
            (
            );
            /** Set file name and type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFile
            (
                const NXString & fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** type */ 
            );
            /** Set file name and type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetFile
            (
                const char * fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** type */ 
            );
            /** Set solution 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetSolution
            (
                NXOpen::CAE::SimSolution * sol /** sol */ 
            );
            /** Get the file type. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistDataSources::FileFormat GetDataSourceType
            (
            );
            /** Get the temperature unit system. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistDataSources::TemperatureUnitSystem GetTemperatureUnitSystem
            (
            );
            /** Set the temperature unit system. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetTemperatureUnitSystem
            (
                NXOpen::CAE::DurSpecialistDataSources::TemperatureUnitSystem temperatureUnitSystem /** temperatureunitsystem */ 
            );
            /**Returns  the selected subcase (index starting with 1). 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int Subcase
            (
            );
            /**Sets  the selected subcase (index starting with 1). 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetSubcase
            (
                int subcaseIndex /** starts with 1 */
            );
            /**Returns  the name. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the description. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the FE results. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistDataSources * FeResults
            (
            );
            /** Move items of the transient increment list. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void MoveSelectedTransientSubcases
            (
                const std::vector<int> & subcaseToMoveIndices /** subcasetomoveindices */ ,
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::MoveOperation operation /** operation */ 
            );
            /** Edit items of the transient increment list. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void EditSelectedTransientIncrements
            (
                const std::vector<int> & incrementToEditIndices /** incrementtoeditindices */ ,
                const std::vector<int> & parentSubcaseIndices /** parentsubcaseindices */ ,
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::EditOperation operation /** operation */ ,
                bool value /** value */ 
            );
            /** Edit items scale of the transient increment list. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void EditSelectedTransientIncrementsScale
            (
                const std::vector<int> & incrementToEditIndices /** incrementtoeditindices */ ,
                const std::vector<int> & parentSubcaseIndices /** parentsubcaseindices */ ,
                const std::vector<double> & scales /** scale values*/
            );
            /** Tag as output the transient increments selected for solver use. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void TagOutputTransientIncrements
            (
            );
            /** Give the number of transient increments. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: int GetNumTransientIncrements
            (
            );
            /** Adds new the Temperature Load object to the list in the builder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void AddTemperatureLoad
            (
                NXOpen::CAE::DurSpecialistTemperatureLoad * newLoadTag /** Load object*/
            );
            /** Removes selected Temperature Load objects in the builder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void RemoveTemperatureLoad
            (
                const std::vector<int> & indexes /** indexes */ 
            );
            /**Returns  the match by for automatic matching. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::MatchByType MatchBy
            (
            );
            /**Sets  the match by for automatic matching. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetMatchBy
            (
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::MatchByType type /** type */ 
            );
            /** Edit selected subcase links. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: bool EditSelectedSubcaseLinks
            (
                const std::vector<int> & subcaseLinksToEditIndices /** subcaselinkstoeditindices */ ,
                NXOpen::CAE::DurSpecialistTemperatureSourceBuilder::SubcaseLinkOperation operation /** operation */ ,
                double scale /** scale */ 
            );
            /** Get the time history file name for remaining structure. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetRemainingStructureFileName
            (
            );
            /** Set the time history file name and type for remaining structure 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFileForRemainingStructure
            (
                const NXString & fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** Refer to @link NXOpen::CAE::DurSpecialistDataSources NXOpen::CAE::DurSpecialistDataSources@endlink . */
            );
            /** Set the time history file name and type for remaining structure 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetFileForRemainingStructure
            (
                const char * fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** Refer to @link NXOpen::CAE::DurSpecialistDataSources NXOpen::CAE::DurSpecialistDataSources@endlink . */
            );
            /**Returns  the selected channel (index starting with 1) for remaining structure. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int RemainingStructureSubcase
            (
            );
            /**Sets  the selected channel (index starting with 1) for remaining structure. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetRemainingStructureSubcase
            (
                int modeIndex /** starts with 1 */
            );
            /** Plot temperature time history curve for selected channel of remaining structure 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void PlotChannelDataCurveForRemainingStructure
            (
                int deviceIndex /** deviceindex */ ,
                int viewIndex /** viewindex */ 
            );
            /**Returns  the enum remaining structure load source 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadSource EnumRemainingStructureLoadSource
            (
            );
            /**Sets  the enum remaining structure load source 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEnumRemainingStructureLoadSource
            (
                NXOpen::CAE::DurSpecialistTemperatureLoadBuilder::LoadSource enumLoadSource /** enumloadsource */ 
            );
            /** Get the time history file name for entire model. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEntireModelFileName
            (
            );
            /** Set the time history file name and type for entire model 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetFileForEntireModel
            (
                const NXString & fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** Refer to @link NXOpen::CAE::DurSpecialistDataSources NXOpen::CAE::DurSpecialistDataSources@endlink . */
            );
            /** Set the time history file name and type for entire model 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            void SetFileForEntireModel
            (
                const char * fileName /** filename */ ,
                NXOpen::CAE::DurSpecialistDataSources::FileFormat type /** Refer to @link NXOpen::CAE::DurSpecialistDataSources NXOpen::CAE::DurSpecialistDataSources@endlink . */
            );
            /**Returns  the selected channel (index starting with 1) for entire model. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int EntireModelSubcase
            (
            );
            /**Sets  the selected channel (index starting with 1) for entire model. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void SetEntireModelSubcase
            (
                int modeIndex /** starts with 1 */
            );
            /** Plot temperature time history curve for selected channel of entire model 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void PlotChannelDataCurveForEntireModel
            (
                int deviceIndex /** deviceindex */ ,
                int viewIndex /** viewindex */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
