#ifndef NXOpen_PREFERENCES_WIRINGPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_WIRINGPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_WiringPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class WiringPreferences;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    class NXColor;
    namespace Preferences
    {
        class WiringPreferencesImpl;

        /// \cond NX_NO_DOC 
        /** Represents the set of Routed System Designer Wiring Preferences, which are applicable to entire session.  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::SessionPreferences  NXOpen::Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  WiringPreferences
        {
            /** Manual/Auto Assign component uses the component match method to determine
                        which component(s) are candidates for assignment to a component list record.

                        Matching consists of matching the:
                         o the file name of a component
                         o the component name
                         o Part Name field of the component list record to an attribute

                        If attribute name matching is specified, indicate the name of the attribute.  */

            /// \cond NX_NO_DOC 
            public: enum CompMatchMethod
            {
                CompMatchMethodAttribute/** Match attribute name during component assignment. */,
                CompMatchMethodComponentName/** Match component name during component assignment. */,
                CompMatchMethodFileName/** Match file name during component assignment. */
            };


            /// \endcond 
            /** To opt the column name of the component list used for component matching
                        if the component match method is attribute.  */

            /// \cond NX_NO_DOC 
            public: enum CompListColumnHeading
            {
                CompListColumnHeadingDeviceID/** Select to use Device ID */,
                CompListColumnHeadingConnectorID/** Select to use Connector ID */,
                CompListColumnHeadingPartName/** Select to use Part Name */,
                CompListColumnHeadingDescription/** Select to use Description */
            };


            /// \endcond 
            /** Auto Route for connections usually happens at Pin Level and Component Level */

            /// \cond NX_NO_DOC 
            public: enum RouteLevelGroupEnumOptions
            {
                RouteLevelGroupEnumOptionsPinLevel/** Create Auto Route Connections at Pin Level */ = 1,
                RouteLevelGroupEnumOptionsComponentLevel/** Create Auto Route Connections at Component Level*/
            };


            /// \endcond 
            /** A Stock style for connections can be a Centerline or a simple Solid. */

            /// \cond NX_NO_DOC 
            public: enum StockStyleGroupEnumOptions
            {
                StockStyleGroupEnumOptionsCenterline/** For a stock style to be center line */,
                StockStyleGroupEnumOptionsSimple/** For a stock style to be simple solid */
            };


            /// \endcond 
            private: WiringPreferencesImpl * m_wiringpreferences_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit WiringPreferences(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~WiringPreferences();

            /// \cond NX_NO_DOC 
            /**Returns  the default harness name is returned as output.  The default harness name replaces
                        the Harness field value of any records in an imported
                        connection/component list that are empty.  A blank string in the
                        DefaultHarnessName element below replaces blank Harness fields
                        with the leaf name of the work part. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString DefaultHarnessName
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the default harness name is returned as output.  The default harness name replaces
                        the Harness field value of any records in an imported
                        connection/component list that are empty.  A blank string in the
                        DefaultHarnessName element below replaces blank Harness fields
                        with the leaf name of the work part. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetDefaultHarnessName
            (
                const NXString & defaultHarnessName /** defaultharnessname */ 
            );
            /**Sets  the default harness name is returned as output.  The default harness name replaces
                        the Harness field value of any records in an imported
                        connection/component list that are empty.  A blank string in the
                        DefaultHarnessName element below replaces blank Harness fields
                        with the leaf name of the work part. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetDefaultHarnessName
            (
                const char * defaultHarnessName /** defaultharnessname */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  a check as an option to delete space reservation stock on route is enabled 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool DeleteStockOnRoute
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  a check as an option to delete space reservation stock on route is enabled 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetDeleteStockOnRoute
            (
                bool deleteStockOnRoute /** deletestockonroute */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  a check to whether an option to highlight a wire stock from connection list navigator is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool WireStock
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  a check to whether an option to highlight a wire stock from connection list navigator is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetWireStock
            (
                bool wireStock /** wirestock */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  a check to whether an option to highlight a wire path from connection list navigator is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool WirePath
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  a check to whether an option to highlight a wire path from connection list navigator is enabled. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetWirePath
            (
                bool wirePath /** wirepath */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the bundle color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::NXColor * BundleColor
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the bundle color 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetBundleColor
            (
                NXOpen::NXColor * bundleColor /** bundlecolor */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the component match method option for manual/automatic component assignment. 
                        This is the first priority method while assigning automatically 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::WiringPreferences::CompMatchMethod ComponentMatchMethod
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the component match method option for manual/automatic component assignment. 
                        This is the first priority method while assigning automatically 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetComponentMatchMethod
            (
                NXOpen::Preferences::WiringPreferences::CompMatchMethod compMatchMethod /** compmatchmethod */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the component column name in which to look for a match 
                        to the component attribute value.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString ComponentListColumnTitle
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the component column name in which to look for a match 
                        to the component attribute value.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetComponentListColumnTitle
            (
                const NXString & componentListColumnTitle /** componentlistcolumntitle */ 
            );
            /**Sets  the component column name in which to look for a match 
                        to the component attribute value.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetComponentListColumnTitle
            (
                const char * componentListColumnTitle /** componentlistcolumntitle */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the component attribute name used for component matching
                        if the method is attribute matching. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString CompAttributeTitle
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the component attribute name used for component matching
                        if the method is attribute matching. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCompAttributeTitle
            (
                const NXString & compAttributeTitle /** compattributetitle */ 
            );
            /**Sets  the component attribute name used for component matching
                        if the method is attribute matching. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetCompAttributeTitle
            (
                const char * compAttributeTitle /** compattributetitle */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the column name of the component list used for component matching
                        if the method is attribute matching. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::WiringPreferences::CompListColumnHeading CompListColHeading
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the column name of the component list used for component matching
                        if the method is attribute matching. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCompListColHeading
            (
                NXOpen::Preferences::WiringPreferences::CompListColumnHeading compListColHeading /** complistcolheading */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the auto route level option as a pin level or component level 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::WiringPreferences::RouteLevelGroupEnumOptions RouteLevelEnum
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the auto route level option as a pin level or component level 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetRouteLevelEnum
            (
                NXOpen::Preferences::WiringPreferences::RouteLevelGroupEnumOptions routeLevelEnum /** routelevelenum */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the stock style option as a center line or simple 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Preferences::WiringPreferences::StockStyleGroupEnumOptions StockStyleEnum
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the stock style option as a center line or simple 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetStockStyleEnum
            (
                NXOpen::Preferences::WiringPreferences::StockStyleGroupEnumOptions stockStyleEnum /** stockstyleenum */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** The priority list of auto assign match method is returned 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Preferences::WiringPreferences::CompMatchMethod> GetCompMatchMethodPriorityList
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCompMatchMethodPriorityList
            (
                const std::vector<NXOpen::Preferences::WiringPreferences::CompMatchMethod> & priorityList /** prioritylist */ 
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
