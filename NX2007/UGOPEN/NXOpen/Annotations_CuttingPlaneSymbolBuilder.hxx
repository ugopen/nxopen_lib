#ifndef NXOpen_ANNOTATIONS_CUTTINGPLANESYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CUTTINGPLANESYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CuttingPlaneSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/LineFontBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class CuttingPlaneSymbolBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineFontBuilder;
    namespace Annotations
    {
        class _CuttingPlaneSymbolBuilderBuilder;
        class CuttingPlaneSymbolBuilderImpl;
        /**
            Represents a @link NXOpen::Annotations::CuttingPlaneSymbolBuilder NXOpen::Annotations::CuttingPlaneSymbolBuilder@endlink 
             <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  CuttingPlaneSymbolBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents whether the view name is derived from the PMI cutting plane symbol text. */
            public: enum ViewNameFormatOption
            {
                ViewNameFormatOptionUserDefined/** User Defined View Name */,
                ViewNameFormatOptionA/** View Name is in the 'Section Prefix A' format, Where Section Prefix is taken from PMI Preferences 
                                                                                                     and A is the Text of the PMI Cutting Plane Symbol. */,
                ViewNameFormatOptionAA/** View Name is in the 'Section Prefix A-A' format, Where Where Section Prefix is taken from PMI Preferences
                                                                                                     and A is the Text of the PMI Cutting Plane Symbol. */
            };

            /** Represents position of the text relative to the arrow option */
            public: enum TextPlaneRelativeArrow
            {
                TextPlaneRelativeArrowParallel/** The Plane of the PMI Cutting Plane Symbol Text is Parallel to its Arrow. */,
                TextPlaneRelativeArrowPerpendicular/** The Plane of the PMI Cutting Plane Symbol Text is Perpendicular to its Arrow. */
            };

            /** Represents position of the arrow direction relative to cutting plane */
            public: enum ArrowDirectionOption
            {
                ArrowDirectionOptionTowards/** The Direction of the PMI Cutting Plane Symbol Arrow Towards Plane. */,
                ArrowDirectionOptionAway/** The Direction of the PMI Cutting Plane Symbol Arrow Away From Plane. */
            };

            private: CuttingPlaneSymbolBuilderImpl * m_cuttingplanesymbolbuilder_impl;
            private: friend class  _CuttingPlaneSymbolBuilderBuilder;
            protected: CuttingPlaneSymbolBuilder();
            public: ~CuttingPlaneSymbolBuilder();
            /**Returns  the display cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayCuttingPlaneSymbol
            (
            );
            /**Sets  the display cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetDisplayCuttingPlaneSymbol
            (
                bool displayCuttingPlaneSymbol /** displaycuttingplanesymbol */ 
            );
            /**Returns  the Cutting Plane Symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CuttingPlaneSymbolText
            (
            );
            /**Sets  the Cutting Plane Symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetCuttingPlaneSymbolText
            (
                const NXString & cuttingPlaneSymbolName /** cuttingplanesymbolname */ 
            );
            /**Sets  the Cutting Plane Symbol text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            void SetCuttingPlaneSymbolText
            (
                const char * cuttingPlaneSymbolName /** cuttingplanesymbolname */ 
            );
            /**Returns  the use two arrows 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTwoArrows
            (
            );
            /**Sets  the use two arrows 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetUseTwoArrows
            (
                bool useTwoArrows /** usetwoarrows */ 
            );
            /**Returns  the name view from symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder::ViewNameFormatOption ViewNameFormat
            (
            );
            /**Sets  the name view from symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetViewNameFormat
            (
                NXOpen::Annotations::CuttingPlaneSymbolBuilder::ViewNameFormatOption viewNameFormat /** viewnameformat */ 
            );
            /**Returns  the font 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineFontBuilder * Font
            (
            );
            /**Returns  the shaded plane 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShadedPlane
            (
            );
            /**Sets  the shaded plane 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetShadedPlane
            (
                bool shadedPlane /** shadedplane */ 
            );
            /**Returns  the color of the Cutting Plane Symbol
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the color of the Cutting Plane Symbol
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetColor
            (
                int cuttingPlaneSymbolColor /** cuttingplanesymbolcolor */ 
            );
            /**Returns  the text plane relative to arrow 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder::TextPlaneRelativeArrow TextPlaneRelativeToArrow
            (
            );
            /**Sets  the text plane relative to arrow 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetTextPlaneRelativeToArrow
            (
                NXOpen::Annotations::CuttingPlaneSymbolBuilder::TextPlaneRelativeArrow textPlaneRelativeToArrow /** textplanerelativetoarrow */ 
            );
            /**Returns  the Cutting Plane Symbol Style 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /** The Cutting Plane Symbol Alternate Arrow
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AlternateArrow
            (
            );
            /** The Cutting Plane Symbol Alternate Arrow Rotation
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void AlternateArrowRotation
            (
            );
            /**Returns  the Cutting Plane Symbol Arrow Length
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowLength
            (
            );
            /**Sets  the Cutting Plane Symbol Arrow Length
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the Cutting Plane Symbol Arrow Direction relative to plane 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder::ArrowDirectionOption ArrowDirection
            (
            );
            /**Sets  the Cutting Plane Symbol Arrow Direction relative to plane 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetArrowDirection
            (
                NXOpen::Annotations::CuttingPlaneSymbolBuilder::ArrowDirectionOption arrowDirection /** arrowdirection */ 
            );
            /**Returns  the size based on section cut 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool SizeBasedOnSectionCut
            (
            );
            /**Sets  the size based on section cut 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetSizeBasedOnSectionCut
            (
                bool sizeBasedOnSectionCut /** sizebasedonsectioncut */ 
            );
            /**Returns  the margin 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double MarginPercentage
            (
            );
            /**Sets  the margin 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: void SetMarginPercentage
            (
                double marginPercentage /** marginpercentage */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
