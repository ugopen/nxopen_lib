#ifndef NXOpen_DISPLAY_IDYNAMICSECTIONCUTCREATOR_HXX_INCLUDED
#define NXOpen_DISPLAY_IDYNAMICSECTIONCUTCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_IDynamicSectionCutCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class IDynamicSectionCutCreator;
    }
    namespace Display
    {
        class DynamicSectionCut;
    }
    class INXObject;
    class NXObject;
    class View;
    namespace Display
    {
        /** Represents a dynamic section-cut creator that generates dynamic
                section-cuts (see @link NXOpen::Display::DynamicSectionCut NXOpen::Display::DynamicSectionCut@endlink ).
                 <br> 
                Examples of dynamic section-cut creator are:
                @link NXOpen::Display::DynamicSection NXOpen::Display::DynamicSection@endlink 
                @link NXOpen::Display::Grid NXOpen::Display::Grid@endlink 
                 <br> 
              <br> Dynamic sectioncut creator is not supported in KF.  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  IDynamicSectionCutCreator : public virtual NXOpen::INXObject
        {
            public: virtual ~IDynamicSectionCutCreator() {}
            /** Finds the @link  NXOpen::Display::DynamicSectionCut   NXOpen::Display::DynamicSectionCut @endlink  
                    with the given identifier as recorded in a journal. An object may 
                    not return the same value as its JournalIdentifier in different 
                    versions of  the software. However newer versions of the software 
                    should find the same object when FindObject is passed older versions 
                    of its journal identifier. In general, this method should not be 
                    used in handwritten code and exists to support record and playback 
                    of journals.

                    An exception will be thrown if no object can be found with the 
                    given journal identifier.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Display::DynamicSectionCut * Find
            (
                const NXString & journalIdentifier /** Journal identifier */
            ) = 0;
            /** Finds the @link  NXOpen::Display::DynamicSectionCut   NXOpen::Display::DynamicSectionCut @endlink  
                    with the given identifier as recorded in a journal. An object may 
                    not return the same value as its JournalIdentifier in different 
                    versions of  the software. However newer versions of the software 
                    should find the same object when FindObject is passed older versions 
                    of its journal identifier. In general, this method should not be 
                    used in handwritten code and exists to support record and playback 
                    of journals.

                    An exception will be thrown if no object can be found with the 
                    given journal identifier.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::Display::DynamicSectionCut * Find
            (
                const char * journalIdentifier /** Journal identifier */
            ) = 0;
            /** Gets section-cuts generated by the sectioning the model shown
                        in the specified view. 

                        View must belong to the same part as the section-cut creator. If
                        no view is specified, then section-cuts generated from the 
                        sectionable entities in the part are returned.
                        
                        If a view is specified, then @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink 
                        active in the view is used to get section-cuts for the explosion.
                        If the view does not have any active explosion, then
                        section-cuts generated from the sectionable entities in the part 
                        are returned. 
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void GetSectionCuts
            (
                NXOpen::NXObject * contextOccurrence /** This can be NULL. If non NULL, then this must
                                    be an occurrence.
                                 */,
                NXOpen::View * view /** view */ ,
                std::vector<NXOpen::Display::DynamicSectionCut *> & sectionCuts /** sectioncuts */ 
            ) = 0;
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
