#ifndef NXOpen_ANNOTATIONS_BASEANGULARDIMENSIONBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASEANGULARDIMENSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseAngularDimensionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AppendedTextBuilder.hxx>
#include <NXOpen/Annotations_Dimension.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseAngularDimensionBuilder;
    }
    namespace Annotations
    {
        class AppendedTextBuilder;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class SelectDimension;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    class Direction;
    class SelectDisplayableObject;
    class View;
    namespace Annotations
    {
        class _BaseAngularDimensionBuilderBuilder;
        class BaseAngularDimensionBuilderImpl;
        /** Represents a @link NXOpen::Annotations::AngularDimension NXOpen::Annotations::AngularDimension@endlink  builder  <br> This is an abstract class and cannot be instantiated.  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseAngularDimensionBuilder : public NXOpen::Builder
        {
            private: BaseAngularDimensionBuilderImpl * m_baseangulardimensionbuilder_impl;
            private: friend class  _BaseAngularDimensionBuilderBuilder;
            protected: BaseAngularDimensionBuilder();
            public: ~BaseAngularDimensionBuilder();
            /**Returns  the first associativity 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * FirstAssociativity
            (
            );
            /**Returns  the first vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * FirstVector
            (
            );
            /**Sets  the first vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFirstVector
            (
                NXOpen::Direction * firstVector /** firstvector */ 
            );
            /**Returns  the first vector view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * FirstVectorView
            (
            );
            /**Sets  the first vector view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFirstVectorView
            (
                NXOpen::View * firstVectorView /** firstvectorview */ 
            );
            /**Returns  the second associativity 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * SecondAssociativity
            (
            );
            /**Returns  the second vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SecondVector
            (
            );
            /**Sets  the second vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSecondVector
            (
                NXOpen::Direction * secondVector /** secondvector */ 
            );
            /**Returns  the second vector view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * SecondVectorView
            (
            );
            /**Sets  the second vector view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSecondVectorView
            (
                NXOpen::View * firstVectorView /** firstvectorview */ 
            );
            /**Returns  the origin 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the style 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the inherit 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SelectDimension * Inherit
            (
            );
            /** Alternate angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void AlternateAngle
            (
            );
            /** First associativity vector flipped 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstAssociativityVectorFlipped
            (
                bool firstVectorFlipped /** firstvectorflipped */ 
            );
            /** Second associativity vector flipped 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") OR solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondAssociativityVectorFlipped
            (
                bool secondVectorFlipped /** secondvectorflipped */ 
            );
            /** First associativity vector flipped 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetFirstAssociativityVectorFlipped
            (
            );
            /** Second associativity vector flipped 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetSecondAssociativityVectorFlipped
            (
            );
            /**Returns  the appended text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AppendedTextBuilder * AppendedText
            (
            );
            /**Returns  the measurement type
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::Dimension::MeasurementTypes MeasurementType
            (
            );
            /**Sets  the measurement type
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetMeasurementType
            (
                NXOpen::Annotations::Dimension::MeasurementTypes measurementType /** measurementtype */ 
            );
            /** Set nth associativity edited flag in the builder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNthAssociativityEdited
            (
                int index /** index */ ,
                bool edited /** edited */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
