#ifndef NXOpen_FALCON_FALCONPARTBUILDER_HXX_INCLUDED
#define NXOpen_FALCON_FALCONPARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Falcon_FalconPartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_falcon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Falcon
    {
        class FalconPartBuilder;
    }
    class Builder;
    namespace Falcon
    {
        class SelectDBBaseNode;
    }
    namespace Falcon
    {
        class _FalconPartBuilderBuilder;
        class FalconPartBuilderImpl;
        /** the class for creating Falcon part  <br> To create a new instance of this class, use @link NXOpen::Falcon::FalconManager::CreateFalconPartBuilder  NXOpen::Falcon::FalconManager::CreateFalconPartBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ContainerStackCheck </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ContainerUnstackCheck </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PartUsage </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        Quantity </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_FALCONEXPORT  FalconPartBuilder : public NXOpen::Builder
        {
            private: FalconPartBuilderImpl * m_falconpartbuilder_impl;
            private: friend class  _FalconPartBuilderBuilder;
            protected: FalconPartBuilder();
            public: ~FalconPartBuilder();
            /**Returns  the part name is returned 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the part name is returned 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Sets  the part name is returned 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetPartName
            (
                const char * partName /** partname */ 
            );
            /**Returns  the parent of the defined part
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseNode * Parent
            (
            );
            /**Returns  the quantity defined for the part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double Quantity
            (
            );
            /**Sets  the quantity defined for the part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetQuantity
            (
                double quantity /** quantity */ 
            );
            /**Returns  the usage percent for the defined part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double PartUsage
            (
            );
            /**Sets  the usage percent for the defined part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPartUsage
            (
                double partUsage /** partusage */ 
            );
            /**Returns  the weight for the defined part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double PartWeight
            (
            );
            /**Sets  the weight for the defined part is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPartWeight
            (
                double partWeight /** partweight */ 
            );
            /**Returns  the arrival quantity is returned for the part
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int ArrivalQuantity
            (
            );
            /**Sets  the arrival quantity is returned for the part
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetArrivalQuantity
            (
                int arrivalQuantity /** arrivalquantity */ 
            );
            /** Returns the part description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetPartDescription
            (
            );
            /** Sets the part description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetPartDescription
            (
                const std::vector<NXString> & partDescription /** partdescription */ 
            );
            /**Returns  the container stack check 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContainerStackCheck
            (
            );
            /**Sets  the container stack check 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetContainerStackCheck
            (
                bool containerStackCheck /** containerstackcheck */ 
            );
            /**Returns  the container unstack check 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContainerUnstackCheck
            (
            );
            /**Sets  the container unstack check 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetContainerUnstackCheck
            (
                bool containerUnstackCheck /** containerunstackcheck */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
