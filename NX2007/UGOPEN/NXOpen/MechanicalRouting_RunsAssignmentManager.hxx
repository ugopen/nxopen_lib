#ifndef NXOpen_MECHANICALROUTING_RUNSASSIGNMENTMANAGER_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_RUNSASSIGNMENTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_RunsAssignmentManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class RunsAssignmentManager;
    }
    namespace MechanicalRouting
    {
        class RoutingManager;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    class Part;
    namespace Routing
    {
        class Port;
    }
    namespace MechanicalRouting
    {
        class RunsAssignmentManagerImpl;
        /** Represents the Runs Assignment Manager used to assign or unassign objects in the Routing Assembly
                to their corresponding objects in the P and ID run
             <br> To obtain an instance of this class, refer to @link NXOpen::MechanicalRouting::RoutingManager  NXOpen::MechanicalRouting::RoutingManager @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  RunsAssignmentManager
        {
            /** The status returned from checking the logical design mapping to the physical design. */
            public: enum MappingStatus
            {
                MappingStatusUnknown/** unknown */ ,
                MappingStatusPass/** pass */ ,
                MappingStatusWarning/** warning */ ,
                MappingStatusError/** error */ ,
                MappingStatusCannotBeEvaluated/** cannot be evaluated */ 
            };

            /** The status message returned from checking the logical design mapping to the physical design. */
            public: enum MappingStatusMessage
            {
                MappingStatusMessageUnknown/** unknown */ ,
                MappingStatusMessageAssigned/** assigned */ ,
                MappingStatusMessageNotAssigned/** not assigned */ ,
                MappingStatusMessageOneOrMoreConnectedPortsNotAssigned/** one or more connected ports not assigned */ ,
                MappingStatusMessageUnloaded/** unloaded */ ,
                MappingStatusMessageDeviationOfDiscipline/** deviation of discipline */ ,
                MappingStatusMessageDeviationOfSpecification/** deviation of specification */ ,
                MappingStatusMessageDeviationOfDisciplineAndSpecification/** deviation of discipline and specification */ ,
                MappingStatusMessageBreakAtFromPort/** break at from port */ ,
                MappingStatusMessageBreakAtToPort/** break at to port */ ,
                MappingStatusMessageBreakInContinuityOfObjectsInConnection/** break in continuity of objects in connection */ ,
                MappingStatusMessageOneOrMoreBareSegmentsInConnection/** one or more bare segments in connection */ ,
                MappingStatusMessageAssignedStockDoesNotMatchLogicalStock/** assigned stock does not match logical stock */ ,
                MappingStatusMessagePortIdentifierDoesNotMatchLogicalPortIdentifier/** port identifier does not match logical port identifier */ ,
                MappingStatusMessageParentRunLoadedInMultipleOpenParts/** parent run loaded in multiple open parts */ ,
                MappingStatusMessagePartAssociatedToRunNotLoaded/** part associated to run not loaded */ ,
                MappingStatusMessageOneOrMoreBranchMembersHasAWarning/** one or more branch members has awarning */ ,
                MappingStatusMessageOneOrMoreBranchMembersHasAnError/** one or more branch members has an error */ ,
                MappingStatusMessageOneOrMoreBranchMembersCannotBeEvaluated/** one or more branch members cannot be evaluated */ ,
                MappingStatusMessageOneOrMoreRunMembersHasAWarning/** one or more run members has awarning */ ,
                MappingStatusMessageOneOrMoreRunMembersHasAnError/** one or more run members has an error */ ,
                MappingStatusMessageOneOrMoreRunMembersCannotBeEvaluated/** one or more run members cannot be evaluated */ ,
                MappingStatusMessageToPortEquipmentPartNotLoaded/** to port equipment part not loaded */ ,
                MappingStatusMessageFromPortEquipmentPartNotLoaded/** from port equipment part not loaded */ ,
                MappingStatusMessageAnUnkownErrorHasOccurred/** an unkown error has occurred */ ,
                MappingStatusMessageOpenEndedConnectionAtFromPort/** open ended connection at from port */ ,
                MappingStatusMessageOpenEndedConnectionAtToPort/** open ended connection at to port */ ,
                MappingStatusMessageAssignedEquipmentDoesNotMatchLogicalEquipment/** assigned equipment does not match logical equipment */ ,
                MappingStatusMessageSuppressed/** suppressed */ ,
                MappingStatusMessageToPortEquipmentSuppressed/** to port equipment suppressed */ ,
                MappingStatusMessageFromPortEquipmentSuppressed/** from port equipment suppressed */ ,
                MappingStatusMessageTerminatingPortDisconnectedFromAllTerminatingPorts/** terminating port disconnected from all terminating ports */ ,
                MappingStatusMessageTerminatingPortNotConnectedToAllTerminatingPorts/** terminating port not connected to all terminating ports */ ,
                MappingStatusMessageBranchesWithinRunAreNotContiguous/** branches within run are not contiguous */ 
            };

            private: RunsAssignmentManagerImpl * m_runsassignmentmanager_impl;
            private: NXOpen::MechanicalRouting::RoutingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RunsAssignmentManager(NXOpen::MechanicalRouting::RoutingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RunsAssignmentManager();
            /** Assigns the 3D port object to the logical object it corresponds to 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssignComponentPort
            (
                NXOpen::Assemblies::Component * component /** The part occurrence to assign from. */,
                NXOpen::Routing::Port * physicalPort /** The 3D port to assign from. */,
                NXOpen::NXObject * logicalPort /** The logical port to assign to.*/
            );
            /** Assigns the 3D WAVE linked port object to the logical object it corresponds to 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssignPort
            (
                NXOpen::Routing::Port * physicalPort /** The 3D port to assign from. */,
                NXOpen::NXObject * logicalPort /** The logical port to assign to.*/
            );
            /** Removes assignment of any 3D port objects to the passed in logical object 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void Unassign
            (
                NXOpen::Part * part /** The part containing the logical port to unassign */,
                NXOpen::NXObject * logicalPort /** The logical port to unassign */
            );
            /** Removes assignment of the 3D part occurrence from any connection or equipment it might be assigned to 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void UnassignComponent
            (
                NXOpen::Assemblies::Component * component /** The component to unassign */
            );
            /** Assigns a list of components mapping to a logical connection object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssignComponentsToLogicalConnection
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** A list of Components to assign to the logical connection. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object. */
            );
            /** Assigns a single component to a logical connection object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssignSingleComponentToLogicalConnection
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a 3D routing equipment. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object. */
            );
            /** Unassigns all the components currently assigned to this logical connection object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void UnassignComponentsFromLogicalConnection
            (
                NXOpen::Part * part /** The part containing the components to unassign from the connection */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Assigns a component @link Assemblies::Component Assemblies::Component@endlink  to a logical equipment object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AssignComponentToLogicalEquipment
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a 3D routing equipment. */,
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/
            );
            /** Unassigns all the components that are currently assigned to the given logical equipment object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void UnassignComponentFromLogicalEquipment
            (
                NXOpen::Part * part /** The part containing the component to unassign. */,
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/
            );
            /** Gets the mapping status from the logical design object.  @return  The mapping status.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::RunsAssignmentManager::MappingStatus GetLogicalObjectMappingStatus
            (
                NXOpen::NXObject * logicalDesignObject /** The logical design object.*/,
                NXOpen::MechanicalRouting::RunsAssignmentManager::MappingStatusMessage* message /** The mapping status message.*/
            );
            /** Gets the simplified view mapping status from the logical design object.  @return  The mapping status.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::RunsAssignmentManager::MappingStatus GetSimplifiedViewLogicalObjectMappingStatus
            (
                NXOpen::NXObject * logicalDesignObject /** The logical design object.*/,
                NXOpen::MechanicalRouting::RunsAssignmentManager::MappingStatusMessage* message /** The mapping status message.*/
            );
            /** Gets the user string for the passed in mapping status message.  @return  The mapping status message string.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString GetMappingStatusMessageUserString
            (
                NXOpen::MechanicalRouting::RunsAssignmentManager::MappingStatusMessage message /** The mapping status message.*/
            );
            /** Is the 3D port object assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsPortAssigned
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */,
                NXOpen::NXObject * port /** The Routing Port object.*/
            );
            /** Is the given part occ assigned to connection?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsComponentAssignedToConnection
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */
            );
            /** Is the given part occ assigned to equipment?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsComponentAssignedToEquipment
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */
            );
            /** Is the given logical design object assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalDesignObjectAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalDesignObject /** The logical design object.*/
            );
            /** Is the given logical port assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalPortAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalPort /** The logical port object.*/
            );
            /** Is the given logical connection assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalConnectionAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Is the given logical connection's From Port assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalConnectionFromPortAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Is the given logical connection's To Port assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalConnectionToPortAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Is the given logical equipment assigned?  @return  The result of whether the object is assigned.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsLogicalEquipmentAssigned
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/
            );
            /** Gets the 3D port object and the component the logical port is assigned to in the part 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void GetPortLogicalPortAssignedTo
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalPort /** The logical port object.*/,
                NXOpen::Assemblies::Component ** component /** The component the 3D port represents.*/,
                NXOpen::NXObject ** port /** The Routing Port object.*/
            );
            /** Gets the port of the from port the logical connection is assigned to and its corresponding component in the part
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void GetLogicalConnectionFromPortAssignedTo
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/,
                NXOpen::Assemblies::Component ** component /** The component the 3D port represents.*/,
                NXOpen::NXObject ** port /** The Routing Port object.*/
            );
            /** Gets the port of the to port the logical connection is assigned to and its corresponding component in the part 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void GetLogicalConnectionToPortAssignedTo
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/,
                NXOpen::Assemblies::Component ** component /** The component the 3D port represents.*/,
                NXOpen::NXObject ** port /** The Routing Port object.*/
            );
            /** Gets the part occurrence the logical equipment is assigned to in the part  @return  The component the logical equipment is assigned to.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * GetComponentLogicalEquipmentAssignedTo
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/
            );
            /** Gets the assigned logical port for the passed in port  @return  The logical port object.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::NXObject * GetAssignedLogicalPort
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */,
                NXOpen::NXObject * port /** The Routing Port object.*/
            );
            /** Gets the assigned logical connection for the passed in part occurrence  @return  The logical connection object.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::NXObject * GetAssignedLogicalConnection
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */
            );
            /** Gets the assigned logical equipment for the passed in part occurrence  @return  The logical equipment object.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::NXObject * GetAssignedLogicalEquipment
            (
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a part occ. */
            );
            /** Maps a component to a given part  @return  The mapped component
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * MapComponentToPart
            (
                NXOpen::Part * part /** given part */,
                NXOpen::Assemblies::Component * component /** The component to be mapped*/
            );
            /** Gets the part occurrences the logical connection is assigned to in the part  @return  The output component array.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Assemblies::Component *> GetComponentsLogicalConnectionAssignedTo
            (
                NXOpen::Part * part /** The part containing the component. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Converts a non-terminating component into a terminating component. Will only have an effect on components that are not inherently terminating. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void MakeComponentBranchTerminating
            (
                NXOpen::Assemblies::Component * component /** The component that should now terminate a branch. */
            );
            /** Converts a terminating component into a non-terminating component. Will only have an effect on components that are not inherently terminating. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void MakeComponentNotBranchTerminating
            (
                NXOpen::Assemblies::Component * component /** The component that should no longer terminate a branch. */
            );
            /** Refreshes mapping status and update run navigator view. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RefreshMappingStatusAndUpdateView
            (
                NXOpen::Part * part /** Given part. */,
                NXOpen::NXObject * runObject /** The run object to be updated. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
