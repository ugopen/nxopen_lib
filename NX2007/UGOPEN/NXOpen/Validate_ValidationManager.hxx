#ifndef NXOpen_VALIDATE_VALIDATIONMANAGER_HXX_INCLUDED
#define NXOpen_VALIDATE_VALIDATIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_ValidationManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validate_CheckerDefinition.hxx>
#include <NXOpen/Validate_Parameter.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class ValidationManager;
    }
    class Session;
    class NXObject;
    namespace Validate
    {
        class CheckerDefinition;
    }
    namespace Validate
    {
        class CheckerNode;
    }
    namespace Validate
    {
        class Parameter;
    }
    namespace Validate
    {
        class Parser;
    }
    namespace Validate
    {
        class Validator;
    }
    namespace Validate
    {
        class ValidationManagerImpl;
        /**  @brief Represents an object that manages validator and parser associated instance objects. 

         
              <br> It handles the creation of new validators and parsers.
             The ValidationManager also provides @link NXOpen::Validate::ValidationManager::FindValidator NXOpen::Validate::ValidationManager::FindValidator@endlink  to 
             get validators in current session. <br> 
             <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  ValidationManager
        {
             /** Optional settings for defining a @link Validate::Parameter Validate::Parameter@endlink */
            public:
            struct ParameterOptions
            {
                public: /** Parameter label */NXString Label;
                public: /** Parameter group. Optional. */NXString Group;
                public: /** If parameter can be modified */bool Modifiable;
                public: ParameterOptions() :
                    Label(),
                    Group(),
                    Modifiable()
                {
                }
                /** Constructor for the ParameterOptions struct. */ 
                public: ParameterOptions(const NXString &labelInitial /** Parameter label */, 
                        const NXString &groupInitial /** Parameter group. Optional. */, 
                        bool modifiableInitial /** If parameter can be modified */) :
                    Label(labelInitial),
                    Group(groupInitial),
                    Modifiable(modifiableInitial)
                {
                }
            };

            public: /** User defined method that is called when Check-Mate executes the @link Validate::CheckerNode Validate::CheckerNode@endlink . 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::Validate::CheckerNode *> DoCheckHandler;
            private: ValidationManagerImpl * m_validationmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ValidationManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ValidationManager();
            /** 
                    Creates a validator.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: NXOpen::Validate::Validator * CreateValidator
            (
                const NXString & name /** name of the validator */
            );
            /** 
                    Creates a validator.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            NXOpen::Validate::Validator * CreateValidator
            (
                const char * name /** name of the validator */
            );
            /** 
                    Creates a parser.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parser * CreateParser
            (
                const NXString & name /** name of the parser */
            );
            /** 
                    Creates a parser.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parser * CreateParser
            (
                const char * name /** name of the parser */
            );
            /** 
                    Finds validators in current session. It will return all validators with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void FindValidator
            (
                const NXString & name /** name */ ,
                std::vector<NXOpen::Validate::Validator *> & validators /** validators */ 
            );
            /** 
                    Finds validators in current session. It will return all validators with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            void FindValidator
            (
                const char * name /** name */ ,
                std::vector<NXOpen::Validate::Validator *> & validators /** validators */ 
            );
            /** 
                    Deletes a validator.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_checkmate ("UG Check Mate") */
            public: void DeleteValidator
            (
                NXOpen::Validate::Validator * validator /** validator */ 
            );
            /** 
                    Deletes a parser.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteParser
            (
                NXOpen::Validate::Parser * parser /** parser */ 
            );
            /** 
                    Finds parsers in current session. It will return all parsers with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void FindParser
            (
                const NXString & name /** name */ ,
                std::vector<NXOpen::Validate::Parser *> & parsers /** parsers */ 
            );
            /** 
                    Finds parsers in current session. It will return all parsers with the same name.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void FindParser
            (
                const char * name /** name */ ,
                std::vector<NXOpen::Validate::Parser *> & parsers /** parsers */ 
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for an integer number.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                int parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for an integer number.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                int parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for an integer array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<int> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for an integer array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<int> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a boolean.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                bool parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a boolean.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                bool parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a boolean array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<bool> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a boolean array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<bool> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a real number.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                double parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a real number.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                double parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a real number array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<double> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a real number array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<double> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a string.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const NXString & parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a string.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const char * parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a string array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                std::vector<NXString> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a string array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                std::vector<NXString> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a @link Point3d Point3d@endlink .  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const NXOpen::Point3d & parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a @link Point3d Point3d@endlink .  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const NXOpen::Point3d & parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a @link Point3d Point3d@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::Point3d> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a @link Point3d Point3d@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::Point3d> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a @link Vector3d Vector3d@endlink .  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const NXOpen::Vector3d & parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for a @link Vector3d Vector3d@endlink .  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const NXOpen::Vector3d & parameterValue /** The value of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a @link Vector3d Vector3d@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::Vector3d> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for a @link Vector3d Vector3d@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::Vector3d> & parameterValue /** The values of parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for an @link NXObject NXObject@endlink .  @return  Return defined parameter.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineNXObjectParameter
            (
                const NXString & parameterID /** The ID of parameter.*/,
                NXOpen::NXObject * parameterValue /** The NXobject type parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a single value @link Validate::Parameter Validate::Parameter@endlink  for an @link NXObject NXObject@endlink .  @return  Return defined parameter.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineNXObjectParameter
            (
                const char * parameterID /** The ID of parameter.*/,
                NXOpen::NXObject * parameterValue /** The NXobject type parameter.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for an @link NXObject NXObject@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Parameter * DefineNXObjectParameters
            (
                const NXString & parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::NXObject *> & parameterValue /** The NXobject type parameters.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /** Creates a multi-value @link Validate::Parameter Validate::Parameter@endlink  for an @link NXObject NXObject@endlink  array.  @return  Return defined parameter.
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Parameter * DefineNXObjectParameters
            (
                const char * parameterID /** The ID of parameter.*/,
                const std::vector<NXOpen::NXObject *> & parameterValue /** The NXobject type parameters.*/,
                const NXOpen::Validate::ValidationManager::ParameterOptions & options /** The option of parameter.*/
            );
            /**  @brief 
                    Creates a @link Validate::CheckerDefinition Validate::CheckerDefinition@endlink .
                     

             
                    
                    Once a checker definition is created successfully, the class ID can be used to create instances of @link Validate::CheckerNode Validate::CheckerNode@endlink .<br/>
                    To obtain an instance of @link Validate::CheckerNode Validate::CheckerNode@endlink , refer to @link Validate::Validator::AppendCheckerNode Validate::Validator::AppendCheckerNode@endlink .
                    This method will check the presence of the ug_checkmate ("UG Check Mate") license.
                    
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckerDefinition * CreateCheckerDefinition
            (
                const NXString & classID /** classid */ ,
                const NXString & displayName /** displayname */ ,
                const NXString & category /** category */ ,
                const std::vector<NXOpen::Validate::Parameter *> & parameters /** parameters */ ,
                const NXOpen::Validate::ValidationManager::DoCheckHandler&  doCheck /** docheck */ 
            );
            /**  @brief 
                    Creates a @link Validate::CheckerDefinition Validate::CheckerDefinition@endlink .
                     

             
                    
                    Once a checker definition is created successfully, the class ID can be used to create instances of @link Validate::CheckerNode Validate::CheckerNode@endlink .<br/>
                    To obtain an instance of @link Validate::CheckerNode Validate::CheckerNode@endlink , refer to @link Validate::Validator::AppendCheckerNode Validate::Validator::AppendCheckerNode@endlink .
                    This method will check the presence of the ug_checkmate ("UG Check Mate") license.
                    
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::CheckerDefinition * CreateCheckerDefinition
            (
                const char * classID /** classid */ ,
                const char * displayName /** displayname */ ,
                const char * category /** category */ ,
                const std::vector<NXOpen::Validate::Parameter *> & parameters /** parameters */ ,
                const NXOpen::Validate::ValidationManager::DoCheckHandler&  doCheck /** docheck */ 
            );
            /**  @brief 
                    Deletes a @link Validate::CheckerDefinition Validate::CheckerDefinition@endlink .
                     

             
                    
                    Any instance of @link Validate::CheckerNode Validate::CheckerNode@endlink  based on a checker definition should be eliminated before deleting the checker definition.<br/>
                    Refer to @link Validate::Validator::EraseCheckerNode Validate::Validator::EraseCheckerNode@endlink  or @link Validate::Validator::ClearCheckerNodes Validate::Validator::ClearCheckerNodes@endlink .
                    
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteCheckerDefinition
            (
                NXOpen::Validate::CheckerDefinition * checkerDefinition /** checkerdefinition */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
