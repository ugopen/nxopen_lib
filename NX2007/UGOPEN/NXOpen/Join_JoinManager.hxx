#ifndef NXOpen_JOIN_JOINMANAGER_HXX_INCLUDED
#define NXOpen_JOIN_JOINMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Join_JoinManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Join_GroupJoinsBuilder.hxx>
#include <NXOpen/Join_JoinConversionStatus.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libjoinopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Join
    {
        class JoinManager;
    }
    class Session;
    namespace Annotations
    {
        class Annotation;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Join
    {
        class AttachedHardware;
    }
    namespace Join
    {
        class AttachedHardwareBuilder;
    }
    namespace Join
    {
        class CurveJoin;
    }
    namespace Join
    {
        class CurveJoinBuilder;
    }
    namespace Join
    {
        class CurveSelectBuilder;
    }
    namespace Join
    {
        class ExportJoinBuilder;
    }
    namespace Join
    {
        class FaceIntersection;
    }
    namespace Join
    {
        class FaceIntersectionBuilder;
    }
    namespace Join
    {
        class FaceJoin;
    }
    namespace Join
    {
        class FaceJoinBuilder;
    }
    namespace Join
    {
        class FaceSelectBuilder;
    }
    namespace Join
    {
        class GroupJoinsBuilder;
    }
    namespace Join
    {
        class ImportJoinBuilder;
    }
    namespace Join
    {
        class JoinConversionStatus;
    }
    namespace Join
    {
        class JoinNoteBuilder;
    }
    namespace Join
    {
        class JoinPreferences;
    }
    namespace Join
    {
        class MultiEditPointJoinBuilder;
    }
    namespace Join
    {
        class MultiEditPointJoinParametersBuilder;
    }
    namespace Join
    {
        class Overlap;
    }
    namespace Join
    {
        class OverlapBuilder;
    }
    namespace Join
    {
        class PointJoin;
    }
    namespace Join
    {
        class PointJoinBuilder;
    }
    namespace Join
    {
        class PointLayout;
    }
    namespace Join
    {
        class PointLayoutBuilder;
    }
    namespace Join
    {
        class PreferencesBuilder;
    }
    namespace Join
    {
        class SubtypeAuthorBuilder;
    }
    namespace Join
    {
        class TransformBuilder;
    }
    class NXObject;
    class Part;
    namespace Join
    {
        class JoinManagerImpl;
        /** Represents a manager of join feature builders.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class JOINOPENCPPEXPORT  JoinManager
        {
            /** The reason for registering a callback indicates which Join commands will use
                        the callback.
                    */
            public: enum CallbackReason
            {
                CallbackReasonUnknown/** Used only for validation. */ = -1,
                CallbackReasonPostCommit/** Called in dialog apply processing after Join builder commit has been executed. */,
                CallbackReasonGroupJoinsCustomMethod/** Called on apply of group joins utility. */,
                CallbackReasonCount/** The number of callback reasons. */
            };

            public: /** This defines the prototype for all Join callbacks. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            typedef NXOpen::Callback1<void, std::vector<NXOpen::NXObject *>> Callback;
            private: JoinManagerImpl * m_joinmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit JoinManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static JoinManager* theJoinManager;
            /** Returns the JoinManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static JoinManager* GetJoinManager(NXOpen::Session *owner);
            public: ~JoinManager();
            /** Creates a @link Join::PointJoinBuilder Join::PointJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::PointJoinBuilder * CreatePointJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::PointJoin * pointJoin /** @link Join::PointJoin Join::PointJoin@endlink  to be edited */
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link Join::CurveJoinBuilder Join::CurveJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::CurveJoinBuilder * CreateCurveJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::CurveJoin * curveJoin /** @link Join::CurveJoin Join::CurveJoin@endlink  to be edited */
            );

            /// \endcond 
            /** Creates an @link Join::OverlapBuilder Join::OverlapBuilder@endlink  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::OverlapBuilder * CreateOverlapBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::Overlap * overlapFeature /** @link Join::Overlap Join::Overlap@endlink  to be edited */
            );
            /** Creates an @link Join::PointLayoutBuilder Join::PointLayoutBuilder@endlink  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::PointLayoutBuilder * CreatePointLayoutBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::PointLayout * pointLayoutFeature /** @link Join::PointLayout Join::PointLayout@endlink  to be edited */
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link Join::FaceJoinBuilder Join::FaceJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::FaceJoinBuilder * CreateFaceJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::FaceJoin * faceJoin /** @link Join::FaceJoin Join::FaceJoin@endlink  to be edited */
            );

            /// \endcond 
            /** Creates a @link Join::FaceIntersectionBuilder Join::FaceIntersectionBuilder@endlink  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::FaceIntersectionBuilder * CreateFaceIntersectionBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::FaceIntersection * faceIntersection /** @link Join::FaceIntersection Join::FaceIntersection@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Join::ExportJoinBuilder NXOpen::Join::ExportJoinBuilder@endlink  object.  @return  ExportJoin builder
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::ExportJoinBuilder * CreateExportJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::ImportJoinBuilder NXOpen::Join::ImportJoinBuilder@endlink  object.  @return  ImportJoin builder
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::ImportJoinBuilder * CreateImportJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::Join::SubtypeAuthorBuilder NXOpen::Join::SubtypeAuthorBuilder@endlink  object.  @return  SubtypeAuthor builder
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_join_advanced (" NX Join Advanced Functionality") */
            public: NXOpen::Join::SubtypeAuthorBuilder * CreateSubtypeAuthorBuilder
            (
            );

            /// \endcond 
            /** Creates a @link NXOpen::Join::JoinNoteBuilder NXOpen::Join::JoinNoteBuilder@endlink  object.  @return  Join Note builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::JoinNoteBuilder * CreateJoinNoteBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Annotations::Annotation * annotation /** annotation */ 
            );
            /** Method to show or hide the solid body associated with a @link Join::PointJoin Join::PointJoin@endlink  feature in the work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void HideSolids
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Point Join features. If empty, all feature in work part will be used. */,
                bool hideSolids /** true to hide solids, false to show solids. */
            );
            /** Method to turn on or off the show through state for @link Join::PointJoin Join::PointJoin@endlink  features in the work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void ShowThrough
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Join features. If empty, all feature in work part will be used. */,
                bool showThrough /** true to turn show through state on, false to turn off. */
            );
            /** Method to recompute the stackup for the Point Joint Feature. The method creates a build for each feature, commits it, and runs update for all changed features. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateStackup
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Point Join features. */
            );
            /** Creates a @link NXOpen::Join::MultiEditPointJoinBuilder NXOpen::Join::MultiEditPointJoinBuilder@endlink  object.  @return  MultiEditPointJoinBuilder builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::MultiEditPointJoinBuilder * CreateMultiEditPointJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::FaceSelectBuilder NXOpen::Join::FaceSelectBuilder@endlink  object.  @return  FaceSelectBuilder builder
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::FaceSelectBuilder * CreateFaceSelectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::CurveSelectBuilder NXOpen::Join::CurveSelectBuilder@endlink  object.  @return  CurveSelectBuilder builder
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::CurveSelectBuilder * CreateCurveSelectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::MultiEditPointJoinParametersBuilder NXOpen::Join::MultiEditPointJoinParametersBuilder@endlink  object.  @return  MultiEditPointJoinBuilder builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::MultiEditPointJoinParametersBuilder * CreateMultiEditPointJoinParametersBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::MultiEditPointJoinBuilder * parentBuilder /** parentbuilder */ 
            );
            /** Creates a @link NXOpen::Weld::TransformBuilder NXOpen::Weld::TransformBuilder@endlink  object.  @return  TransformBuilder builder
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::TransformBuilder * CreateTransformBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Features::Feature * feature /** Feature to be edited */
            );
            /** Creates a @link Join::AttachedHardwareBuilder Join::AttachedHardwareBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::AttachedHardwareBuilder * CreateAttachedHardwareBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::AttachedHardware * attachedHardware /** @link Join::AttachedHardware Join::AttachedHardware@endlink  to be edited */
            );
            /** Adds the callback with the given reason.
                        NOTE: You can register more than one callback with the same reason.  @return  A unique identifier for your callback. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: int AddCallback
            (
                NXOpen::Join::JoinManager::CallbackReason reason /** The reason for which you want this callback called. */,
                const NXOpen::Join::JoinManager::Callback&  callbackMethod /** The method you want to be called. */
            );
            /** Removes the registered callback. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void RemoveCallback
            (
                int callbackMethodId /** The callback identifier indicating which callback to remove. */
            );
            /** Removes all the callbacks registered for a particular reason. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void RemoveAllCallbacksForReason
            (
                NXOpen::Join::JoinManager::CallbackReason reason /** The reason for which you want to remove all the callbacks. */
            );
            /** Removes all the registered callbacks, except those configured in the Application View (APV) file. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: void RemoveAllCallbacks
            (
            );

            /// \cond NX_NO_DOC 
            /** The execution of this API is controlled by the Feature Toggle.
                        Converts all spot welds present in given part, to joins. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::JoinConversionStatus * ConvertSpotWeldsToJoins
            (
                NXOpen::Part * part /** part */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** The execution of this API is controlled by the Feature Toggle.
                        Converts all line welds present in given part, to joins. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::JoinConversionStatus * ConvertLineWeldsToJoins
            (
                NXOpen::Part * part /** part */ 
            );

            /// \endcond 
            /** Creates a @link NXOpen::Join::PreferencesBuilder NXOpen::Join::PreferencesBuilder@endlink  object. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::PreferencesBuilder * CreatePreferencesBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::JoinPreferences * joinPrefs /** The join preferences object will be used in edit */
            );
            /** Creates a @link Join::GroupJoinsBuilder Join::GroupJoinsBuilder@endlink  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::GroupJoinsBuilder * CreateGroupJoinsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
