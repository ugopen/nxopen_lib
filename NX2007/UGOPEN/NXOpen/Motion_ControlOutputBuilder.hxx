#ifndef NXOpen_MOTION_CONTROLOUTPUTBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_CONTROLOUTPUTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_ControlOutputBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_LinkAttachmentData.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class ControlOutputBuilder;
    }
    namespace Motion
    {
        class LinkAttachmentData;
    }
    namespace Motion
    {
        class MotionBuilder;
    }
    namespace Motion
    {
        class SelectControlPort;
    }
    namespace Motion
    {
        class SelectJoint;
    }
    namespace Motion
    {
        class SelectLink;
    }
    namespace Motion
    {
        class _ControlOutputBuilderBuilder;
        class ControlOutputBuilderImpl;
        /** Represents a @link Motion::ControlOutput Motion::ControlOutput@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::ControlOutputCollection::CreateControlOutputBuilder  NXOpen::Motion::ControlOutputCollection::CreateControlOutputBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Application </term> <description> 
         
        ActionReaction </description> </item> 

        <item><term> 
         
        Direction </term> <description> 
         
        Z </description> </item> 

        <item><term> 
         
        OutputType </term> <description> 
         
        Link </description> </item> 

        <item><term> 
         
        Variable </term> <description> 
         
        Force </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  ControlOutputBuilder : public NXOpen::Motion::MotionBuilder
        {
            /** Control Output type */
            public: enum ControlOutputType
            {
                ControlOutputTypeLink/** Control Output Type Motion Body. Requires an action motion body attachment. Can have a base motion body attachment. */,
                ControlOutputTypeJointOrConstraint/** Control Output Type Joint or Constraint. Requires a Joint or Point on Curve Constraint as input. */,
                ControlOutputTypeMassProperty/** Control Output Type Mass property. */,
                ControlOutputTypeSolution/** Control Output Type Solution. */
            };

            /** Output Variable type */
            public: enum VariableType
            {
                VariableTypeForce/** Output Variable type Force */,
                VariableTypeTorque/** Output Variable type Torque. */,
                VariableTypeActionTorque/** Output Variable type Action Torque. Requires universal joint or compound joint as input.*/,
                VariableTypeBaseTorque/** Output Variable type Base Torque. Requires universal joint or compound joint as input..*/,
                VariableTypeBaseForce/** Output Variable type Base Force. Requires compound joint as input.*/
            };

            /** Output Variable Direction */
            public: enum DirectionType
            {
                DirectionTypeX/** Output Variable Direction X*/,
                DirectionTypeY/** Output Variable Direction Y*/,
                DirectionTypeZ/** Output Variable Direction Z*/
            };

            /** Output Variable Application Type*/
            public: enum ApplicationType
            {
                ApplicationTypeActionReaction/** Output Variable Application type Action Reaction. Valid only in control output has point on curve constraint of type flexible as input*/,
                ApplicationTypeActionOnly/** Output Variable Application type Action. Valid only in control output has point on curve constraint of type flexible as input*/
            };

            /** Output Variable Mass Property Type*/
            public: enum MassPropertyTypes
            {
                MassPropertyTypesMass/** Output Variable Mass Property type Mass.*/,
                MassPropertyTypesIxx/** Output Variable Mass Property type Ixx.*/,
                MassPropertyTypesIyy/** Output Variable Mass Property type Iyy.*/,
                MassPropertyTypesIzz/** Output Variable Mass Property type Izz.*/,
                MassPropertyTypesIxy/** Output Variable Mass Property type Ixy.*/,
                MassPropertyTypesIxz/** Output Variable Mass Property type Ixz.*/,
                MassPropertyTypesIyz/** Output Variable Mass Property type Iyz.*/,
                MassPropertyTypesCGOffsetX/** Output Variable Mass Property type CG Offset X.*/,
                MassPropertyTypesCGOffsetY/** Output Variable Mass Property type CG Offset Y.*/,
                MassPropertyTypesCGOffsetZ/** Output Variable Mass Property type CG Offset Z.*/
            };

            /** Output Variable Solution*/
            public: enum SolutionVariableTypes
            {
                SolutionVariableTypesReset/** Output Variable Solution Variable type Reset.*/,
                SolutionVariableTypesGravityVector/** Output Variable Solution Variable type Gravity Vector.*/,
                SolutionVariableTypesEnableResultsReport/** Output Variable Solution Variable type Enable Results Report.*/
            };

            private: ControlOutputBuilderImpl * m_controloutputbuilder_impl;
            private: friend class  _ControlOutputBuilderBuilder;
            protected: ControlOutputBuilder();
            public: ~ControlOutputBuilder();
            /**Returns  the Control Output type. Default Control Output Type is Motion Body. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::ControlOutputType OutputType
            (
            );
            /**Sets  the Control Output type. Default Control Output Type is Motion Body. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetOutputType
            (
                NXOpen::Motion::ControlOutputBuilder::ControlOutputType outputType /** outputtype */ 
            );
            /**Returns  the action motion body attachment. Required in type of Control Output is Motion Body.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::LinkAttachmentData * ActionLinkAttachment
            (
            );
            /**Returns  the base motion body attachment. Used if the type of Control Output is Motion Body. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::LinkAttachmentData * BaseLinkAttachment
            (
            );
            /**Returns  the joint selection. Required if the type of Control Output is Joint/Constraint. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectJoint * JointSelection
            (
            );
            /**Returns  the mass property motion body selection. Required if the type of Control Output is MassProperty. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * MassPropertyMotionBody
            (
            );
            /**Returns  the control Output Variable type. Default Control Output Variable Type is Force. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::VariableType Variable
            (
            );
            /**Sets  the control Output Variable type. Default Control Output Variable Type is Force. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetVariable
            (
                NXOpen::Motion::ControlOutputBuilder::VariableType variable /** variable */ 
            );
            /**Returns  the control Output Variable direction. Default Control Output Variable Direction is Z direction.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::DirectionType Direction
            (
            );
            /**Sets  the control Output Variable direction. Default Control Output Variable Direction is Z direction.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDirection
            (
                NXOpen::Motion::ControlOutputBuilder::DirectionType direction /** direction */ 
            );
            /**Returns  the control Output Variable application type. Default Control Output Variable Direction is action reaction.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::ApplicationType Application
            (
            );
            /**Sets  the control Output Variable application type. Default Control Output Variable Direction is action reaction.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetApplication
            (
                NXOpen::Motion::ControlOutputBuilder::ApplicationType application /** application */ 
            );
            /**Returns  the mass property type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::MassPropertyTypes MassPropertyType
            (
            );
            /**Sets  the mass property type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMassPropertyType
            (
                NXOpen::Motion::ControlOutputBuilder::MassPropertyTypes massPropertyType /** masspropertytype */ 
            );
            /**Returns  the control Output Solution Variable type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ControlOutputBuilder::SolutionVariableTypes SolutionVariableType
            (
            );
            /**Sets  the control Output Solution Variable type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolutionVariableType
            (
                NXOpen::Motion::ControlOutputBuilder::SolutionVariableTypes variable /** variable */ 
            );
            /**Returns  the control output port
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectControlPort * PortSelection
            (
            );
            /**Returns  the name of the control output element. Must be unique across all motion elements. An unique name is set by default.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name of the control output element. Must be unique across all motion elements. An unique name is set by default.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the control output element. Must be unique across all motion elements. An unique name is set by default.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the override state of the Port 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState PortSelectionOvrCtrl
            (
            );
            /**Sets  the override state of the Port 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPortSelectionOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Mass property motion body 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState MassPropertyMotionBodyOvrCtrl
            (
            );
            /**Sets  the override state of the Mass property motion body 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMassPropertyMotionBodyOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the control output X coordinate port
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectControlPort * XCoordinatePortSelection
            (
            );
            /**Returns  the control output Y coordinate port
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectControlPort * YCoordinatePortSelection
            (
            );
            /**Returns  the control output Z coordinate port
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectControlPort * ZCoordinatePortSelection
            (
            );
            /**Returns  the override state of the x coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState XCoordinatePortSelectionOvrCtrl
            (
            );
            /**Sets  the override state of the x coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetXCoordinatePortSelectionOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the y coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState YCoordinatePortSelectionOvrCtrl
            (
            );
            /**Sets  the override state of the y coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetYCoordinatePortSelectionOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the z coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ZCoordinatePortSelectionOvrCtrl
            (
            );
            /**Sets  the override state of the z coordinate Port 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetZCoordinatePortSelectionOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
