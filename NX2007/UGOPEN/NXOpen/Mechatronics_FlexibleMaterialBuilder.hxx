#ifndef NXOpen_MECHATRONICS_FLEXIBLEMATERIALBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_FLEXIBLEMATERIALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_FlexibleMaterialBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class FlexibleMaterialBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class _FlexibleMaterialBuilderBuilder;
        class FlexibleMaterialBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::FlexibleMaterial NXOpen::Mechatronics::FlexibleMaterial@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::FlexibleMaterialCollection::CreateFlexibleMaterialBuilder  NXOpen::Mechatronics::FlexibleMaterialCollection::CreateFlexibleMaterialBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  FlexibleMaterialBuilder : public NXOpen::Builder
        {
            private: FlexibleMaterialBuilderImpl * m_flexiblematerialbuilder_impl;
            private: friend class  _FlexibleMaterialBuilderBuilder;
            protected: FlexibleMaterialBuilder();
            public: ~FlexibleMaterialBuilder();
            /**Returns  the density value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * DensityValue
            (
            );
            /**Returns  the damping value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * DampingValue
            (
            );
            /**Returns  the dynamic friction value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * DynamicFrictionValue
            (
            );
            /**Returns  the linear stiffness value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * LinearStiffnessValue
            (
            );
            /**Returns  the name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
