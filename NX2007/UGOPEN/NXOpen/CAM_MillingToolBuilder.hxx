#ifndef NXOpen_CAM_MILLINGTOOLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_MILLINGTOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MillingToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ToolBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class MillingToolBuilder;
    }
    namespace CAM
    {
        class HolderSectionBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class MillingTrackpointBuilder;
    }
    namespace CAM
    {
        class ShankSectionBuilder;
    }
    namespace CAM
    {
        class ToolBuilder;
    }
    namespace CAM
    {
        class _MillingToolBuilderBuilder;
        class MillingToolBuilderImpl;
        /** Represents a MillingTool Builder  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  MillingToolBuilder : public NXOpen::CAM::ToolBuilder
        {
            /** Available types for tool direction milling tool */
            public: enum ToolDirectionTypes
            {
                ToolDirectionTypesNone/** None */,
                ToolDirectionTypesClw/** CLW */,
                ToolDirectionTypesCclw/** CCLW */
            };

            private: MillingToolBuilderImpl * m_millingtoolbuilder_impl;
            private: friend class  _MillingToolBuilderBuilder;
            protected: MillingToolBuilder();
            public: ~MillingToolBuilder();
            /**Returns  the tool direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::MillingToolBuilder::ToolDirectionTypes TlDirection
            (
            );
            /**Sets  the tool direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlDirection
            (
                NXOpen::CAM::MillingToolBuilder::ToolDirectionTypes tlDirection /** tldirection */ 
            );
            /**Returns  the Number of Flutes builder (inheritable integer) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * TlNumFlutesBuilder
            (
            );
            /**Returns  the Adjust Register  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlAdjRegBuilder
            (
            );
            /**Returns  the Holder Description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlHolderDescription
            (
            );
            /**Sets  the Holder Description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlHolderDescription
            (
                const NXString & tlHolderDescriptionValue /** the tool holder description value */
            );
            /**Sets  the Holder Description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlHolderDescription
            (
                const char * tlHolderDescriptionValue /** the tool holder description value */
            );
            /**Returns  the Holder Library Reference 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TlHolderLibref
            (
            );
            /**Sets  the Holder Library Reference 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlHolderLibref
            (
                const NXString & tlHolderLibrefValue /** the holder Library Reference value */
            );
            /**Sets  the Holder Library Reference 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetTlHolderLibref
            (
                const char * tlHolderLibrefValue /** the holder Library Reference value */
            );
            /**Returns  the Z Mount builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlZMountBuilder
            (
            );
            /**Returns  the Z Offset builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlZOffsetBuilder
            (
            );
            /**Returns  the Cutcom Register Builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlCutcomRegBuilder
            (
            );
            /**Returns  the Cutcom Register  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int TlCutcomReg
            (
            );
            /**Sets  the Cutcom Register  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTlCutcomReg
            (
                int tlCutcomRegValue /**  the tool cutcom register value */
            );
            /**Returns  the Tool Diameter builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlDiameterBuilder
            (
            );
            /**Returns  the length  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlHeightBuilder
            (
            );
            /**Returns  the flute length  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlFluteLnBuilder
            (
            );
            /**Returns  the Taper Angle builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlTaperAngBuilder
            (
            );
            /**Returns  the Shank Diameter builder (inheritable double) 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlShankDiaBuilder
            (
            );
            /**Returns  the low corner radius  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlLowCorRadBuilder
            (
            );
            /**Returns  the up corner radius  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlUpCorRadBuilder
            (
            );
            /**Returns  the holder sections builder  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::HolderSectionBuilder * HolderSectionBuilder
            (
            );
            /**Returns  the mill trackpoint builder  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillingTrackpointBuilder * MillingTrackpointBuilder
            (
            );
            /**Returns  the coolant through parameter 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CoolantThrough
            (
            );
            /**Sets  the coolant through parameter 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCoolantThrough
            (
                bool coolantThrough /**  the coolant through */
            );
            /**Returns  the use tapered shank 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTaperedShank
            (
            );
            /**Sets  the use tapered shank 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseTaperedShank
            (
                bool useTaperedShank /** use tapered shank */
            );
            /**Returns  the tapered shank diameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TaperedShankDiameterBuilder
            (
            );
            /**Returns  the tapered shank length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TaperedShankLengthBuilder
            (
            );
            /**Returns  the tapered shank taper length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TaperedShankTaperLengthBuilder
            (
            );
            /**Returns  the ramp angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * HelicalRampAngle
            (
            );
            /**Returns  the min ramp length 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinRampLength
            (
            );
            /**Returns  the helical diameter 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * HelicalDiameter
            (
            );
            /**Returns  the max cut width 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaxCutWidth
            (
            );
            /**Returns  the tool helix angle builder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ToolHelixAngleBuilder
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns  the shank sections builder  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ShankSectionBuilder * ShankSectionBuilder
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
