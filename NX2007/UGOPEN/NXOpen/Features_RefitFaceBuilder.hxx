#ifndef NXOpen_FEATURES_REFITFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_REFITFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RefitFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_RefitControlBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class RefitFaceBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class RefitControlBuilder;
    }
    class SelectTaggedObject;
    class SelectTaggedObjectList;
    namespace Features
    {
        class _RefitFaceBuilderBuilder;
        class RefitFaceBuilderImpl;
        /**
            Represents a @link NXOpen::Features::RefitFace NXOpen::Features::RefitFace@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateRefitFaceBuilder  NXOpen::Features::FeatureCollection::CreateRefitFaceBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.Degree </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.SegmentsOrPatches </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UDegree </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UPatches </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VDegree </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VPatches </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  RefitFaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** the type of face refit */
            public: enum Types
            {
                TypesRefit/** refit face */,
                TypesFitToTarget/** refit face to target */
            };

            private: RefitFaceBuilderImpl * m_refitfacebuilder_impl;
            private: friend class  _RefitFaceBuilderBuilder;
            protected: RefitFaceBuilder();
            public: ~RefitFaceBuilder();
            /**Returns  the refitting face
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * Face
            (
            );
            /**Returns  the list of targets. Inputs to this command can be convergent objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * Targets
            (
            );
            /**Returns  the refit face max check distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxCheckingDist
            (
            );
            /**Sets  the refit face max check distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaxCheckingDist
            (
                double maxChckDst /** maxchckdst */ 
            );
            /**Returns  a flag that shows refit face direction in use 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasFitDirection
            (
            );
            /**Sets  a flag that shows refit face direction in use 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHasFitDirection
            (
                bool hasFitDir /** hasfitdir */ 
            );
            /**Returns  the refit face fit direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * FitDirection
            (
            );
            /**Sets  the refit face fit direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitDirection
            (
                NXOpen::Direction * fitDir /** fitdir */ 
            );
            /**Returns  the refit control parameters - type, degree, patches, direction, tolerance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::RefitControlBuilder * RefitControl
            (
            );
            /**Returns  the refit face constraints use flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseConstraintsAll
            (
            );
            /**Sets  the refit face constraints use flag
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseConstraintsAll
            (
                bool constrAll /** constrall */ 
            );
            /**Returns  the refit face Umin constraint 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintUMin
            (
            );
            /**Returns  the refit face Umax constraint 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintUMax
            (
            );
            /**Returns  the refit face Vmin constraint 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintVMin
            (
            );
            /**Returns  the refit face Vmax constraint 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * ConstraintVMax
            (
            );
            /**Returns  the refit face smoothing factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int SmoothFactor
            (
            );
            /**Sets  the refit face smoothing factor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSmoothFactor
            (
                int refitFaceSmoothFac /** refitfacesmoothfac */ 
            );
            /**Returns  the refit face modification percentage 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int ModificationPercent
            (
            );
            /**Sets  the refit face modification percentage 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModificationPercent
            (
                int modPercent /** modpercent */ 
            );
            /**Returns  the refit type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::RefitFaceBuilder::Types Type
            (
            );
            /**Sets  the refit type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::RefitFaceBuilder::Types type /** type */ 
            );
            /**Returns  the new copy of match edge surface 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsCreateCopy
            (
            );
            /**Sets  the new copy of match edge surface 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetCreateCopy
            (
                bool createCopy /** createcopy */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
