#ifndef NXOpen_MECHATRONICS_DYNAMICMATERIALBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_DYNAMICMATERIALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_DynamicMaterialBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_DynamicMaterialPointBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class DynamicMaterialBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Mechatronics
    {
        class DynamicMaterialPointBuilder;
    }
    namespace Mechatronics
    {
        class DynamicMaterialPointBuilderList;
    }
    namespace Mechatronics
    {
        class SelectRigidBody;
    }
    class NXObject;
    class Point;
    class SelectFaceList;
    namespace Mechatronics
    {
        class _DynamicMaterialBuilderBuilder;
        class DynamicMaterialBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::DynamicMaterial NXOpen::Mechatronics::DynamicMaterial@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Mechatronics::DynamicMaterialCollection::CreateDynamicMaterialBuilder  NXOpen::Mechatronics::DynamicMaterialCollection::CreateDynamicMaterialBuilder @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  DynamicMaterialBuilder : public NXOpen::Builder
        {
            /** the dynamic material type. */
            public: enum MaterialMode
            {
                MaterialModeBox/** box shape material */,
                MaterialModeCylinder/** cylinder shape material */,
                MaterialModeUserDefined/** user defined shape material */,
                MaterialModeAlongGuide/** along guide material */,
                MaterialModeDynamicVariables/** dynamic variables material */
            };

            /** the dynamic material shape type option. */
            public: enum ShapeType
            {
                ShapeTypeAutomatic/** automatic shape option */,
                ShapeTypeUserDefined/** user defined shape option */
            };

            private: DynamicMaterialBuilderImpl * m_dynamicmaterialbuilder_impl;
            private: friend class  _DynamicMaterialBuilderBuilder;
            protected: DynamicMaterialBuilder();
            public: ~DynamicMaterialBuilder();
            /**Returns  the superseded body. This can be @link NXOpen::Mechatronics::RigidBody NXOpen::Mechatronics::RigidBody@endlink .
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::SelectRigidBody * Superseded
            (
            );
            /**Set the superseded. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSuperseded
            (
                NXOpen::NXObject * superseded /** superseded */ 
            );
            /**Returns  the dynamic material type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialBuilder::MaterialMode Mode
            (
            );
            /**Sets  the dynamic material type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMode
            (
                NXOpen::Mechatronics::DynamicMaterialBuilder::MaterialMode type /** type */ 
            );
            /**Returns  the dynamic material shape type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialBuilder::ShapeType ShapeOption
            (
            );
            /**Sets  the dynamic material shape type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShapeOption
            (
                NXOpen::Mechatronics::DynamicMaterialBuilder::ShapeType type /** type */ 
            );
            /**Returns  the orientation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::CoordinateSystem * Orientation
            (
            );
            /**Sets  the orientation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetOrientation
            (
                NXOpen::CoordinateSystem * orientation /** orientation */ 
            );
            /**Returns  the box x dir length. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * BoxXlen
            (
            );
            /**Returns  the box y dir length. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * BoxYlen
            (
            );
            /**Returns  the box z dir length. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * BoxZlen
            (
            );
            /**Returns  the cylinder shape height. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * CylinderHeight
            (
            );
            /**Returns  the cylinder shape radius. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * CylinderRadius
            (
            );
            /**Returns  the faces. This can be a @link NXOpen::Face NXOpen::Face@endlink . 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::SelectFaceList * Faces
            (
            );
            /** Sets the faces.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetFaces
            (
                const std::vector<NXOpen::NXObject *> & faces /** faces */ 
            );
            /**Returns  the specify axis vector. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Direction * AxisVector
            (
            );
            /**Sets  the specify axis vector. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAxisVector
            (
                NXOpen::Direction * axisVector /** axisvector */ 
            );
            /**Returns  the selected point on guide. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * PointOnGuide
            (
            );
            /**Sets  the selected point on guide. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetPointOnGuide
            (
                NXOpen::Point * pointOnGuide /** pointonguide */ 
            );
            /**Returns  the vector of guideline direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Direction * GuideVector
            (
            );
            /**Sets  the vector of guideline direction 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetGuideVector
            (
                NXOpen::Direction * guideVector /** guidevector */ 
            );
            /**Returns  the offset for user defined mode. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * Offset
            (
            );
            /** Get the section curves for along guide mode  @return  curve or edge
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::NXObject *> GetSectionCurves
            (
            );
            /** Set the section curves for along guide mode
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSectionCurves
            (
                const std::vector<NXOpen::NXObject *> & curves /** curve or edge*/
            );
            /** Get the guide curves for along guide mode  @return  curve or edge
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::NXObject *> GetGuideCurves
            (
            );
            /** Set the guide curves for along guide mode
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetGuideCurves
            (
                const std::vector<NXOpen::NXObject *> & curves /** curve or edge*/
            );
            /**Returns  the offset for along guide mode. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * GuideOffset
            (
            );
            /** Creates a @link NXOpen::Mechatronics::DynamicMaterialPointBuilder NXOpen::Mechatronics::DynamicMaterialPointBuilder@endlink  object. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialPointBuilder * NewDrivePoint
            (
            );
            /**Returns  the list containing the drive points. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::DynamicMaterialPointBuilderList * PointList
            (
            );
            /** Get the variable expressions for 'Dynamic Variable' mode  @return  expression
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::NXObject *> GetVariableExps
            (
            );
            /** Set the variable expressions for 'Dynamic Variable' mode 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetVariableExps
            (
                const std::vector<NXOpen::NXObject *> & exps /** expression*/
            );
            /** Evaluate the section curves. If there is no composite curve, create it, otherwise evaluate it.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void EvaluateSection
            (
                const std::vector<NXOpen::NXObject *> & curves /** curve or edge*/
            );
            /** Evaluate the guideline curves. If there is no composite curve, create it, otherwise evaluate it.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void EvaluateGuideSection
            (
                const std::vector<NXOpen::NXObject *> & curves /** curve or edge*/
            );
            /**Returns  the object name. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the object name. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the object name. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
