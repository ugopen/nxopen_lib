#ifndef NXOpen_FACETSELECTIONRULEFACTORY_HXX_INCLUDED
#define NXOpen_FACETSELECTIONRULEFACTORY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     FacetSelectionRuleFactory.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/FacetSelectionRule.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class FacetSelectionRuleFactory;
    class Part;
    class BodyFacetsRule;
    class ColorRegionRule;
    class FaceFacetsRule;
    class FillBoundaryRule;
    class FineBrushFacetsRule;
    class FloodFillFacetsRule;
    class IFacet;
    class NXObject;
    class PrimitiveFacetsRule;
    class RoughBrushFacetsRule;
    class SingleFacetRule;
    class TangentFacetsRule;
    class WithinCurvesRule;
    class FacetSelectionRuleFactoryImpl;
    /** This class contains the factory methods for creating facet selection intent rules  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
     <br>  Created in NX12.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  FacetSelectionRuleFactory
    {
        private: FacetSelectionRuleFactoryImpl * m_facetselectionrulefactory_impl;
        private: NXOpen::Part* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit FacetSelectionRuleFactory(NXOpen::Part *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~FacetSelectionRuleFactory();
        /**  @brief 
                Creates single facet selection intent rule: @link  NXOpen::SingleFacetRule   NXOpen::SingleFacetRule @endlink 
                 

         
                
                This rule adds given facets to collector without any chaining.
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::SingleFacetRule * CreateRuleSingleFacet
        (
            const std::vector<NXOpen::IFacet *> & facets /** facets to add through the rule.*/
        );
        /**  @brief 
                Creates face facets selection intent rule: @link  NXOpen::FaceFacetsRule   NXOpen::FaceFacetsRule @endlink 
                 

         
                
                This rule chains to collect all facets of input faces or faceted bodies. Note that NX faceted body has single face.
                An Exception is raised if input object is not a face or a faceted body.
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FaceFacetsRule * CreateRuleFaceFacets
        (
            const std::vector<NXOpen::NXObject *> & faces /** a face or NX faceted body whose facets are to be collected.*/
        );
        /**  @brief 
                Creates flood filled facet region selection intent rule: @link  NXOpen::FloodFillFacetsRule   NXOpen::FloodFillFacetsRule @endlink .
                 

         
                
                <ol>
                <li>If isDeselectionRule is passed false, This rule chains to add all neighboring facets of seed (and the neighbor-neighbors) until the region reaches a closed ring of already collected facets in collector.
                If already collected facets in collector do not form a closed ring, then all facets of owning face of the seed are added to collector.</li>
                <li>If isDeselectionRule is passed true, then on adding the rule to collector it removes all facets of region from where seed facet belongs.</li>
                </ol>
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FloodFillFacetsRule * CreateRuleFloodFillFacets
        (
            NXOpen::IFacet * seedFacet /** seed facet for flood filled facet collection */,
            bool isDeselectionRule /** flag to specify whether it is deselection rule or not.*/
        );
        /**  @brief 
                Creates rough brush facets selection intent rule: @link  NXOpen::BrushFacetsRule   NXOpen::BrushFacetsRule @endlink . 
                 

         
                
                This rule chains to collect all neighboring facets of seed (and the neighbor-neighbors) that are inside or crossing brush tool.
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RoughBrushFacetsRule * CreateRuleRoughBrushFacets
        (
            const NXOpen::Point3d & brushToolStartPoint /** the start point of brush tool */,
            const NXOpen::Vector3d & brushToolDirection /** the vector defining direction of brush tool */,
            double brushToolRadius /** the radius of brush tool */,
            bool allowHiddenFacetsSel /** the flag to allow selection of invisible facets in view direction specified by brush tool.
                                                             If this flag is false, facets hidden by parts of the same facet body in current view will not be collected  */,
            NXOpen::IFacet * seedFacet /** the seed facet */
        );
        /**  @brief 
                Creates fine brush facets selection intent rule: @link  NXOpen::BrushFacetsRule   NXOpen::BrushFacetsRule @endlink . 
                 

         
                
                This rule chains to collect all neighboring facets of seed (and the neighbor-neighbors) that are stictly inside brush tool.
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FineBrushFacetsRule * CreateRuleFineBrushFacets
        (
            const NXOpen::Point3d & brushToolStartPoint /** the start point of brush tool */,
            const NXOpen::Vector3d & brushToolDirection /** the vector defining direction of brush tool */,
            double brushToolRadius /** the radius of brush tool */,
            bool allowHiddenFacetsSel /** the flag to allow selection of invisible facets in view direction specified by brush tool.
                                                             If this flag is false, facets hidden by parts of the same facet body in current view will not be collected  */,
            NXOpen::IFacet * seedFacet /** the seed facet */
        );
        /**  @brief 
                Creates color region facets selection intent rule: @link  NXOpen::ColorRegionRule   NXOpen::ColorRegionRule @endlink 
                 

         
                
                This rule chains to collect all neighboring facets of seed (and the neighbor-neighbors) that are of same color as that of seed facet.
                The chaining grows upto an unicolor region of connected facets. Also the chainging does not cross the boundary of owning face for convergent facets and NX facet body for NX facets.
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::ColorRegionRule * CreateRuleColorRegionFacets
        (
            NXOpen::IFacet * seedFacet /** the seed facet */
        );
        /**  @brief 
                Creates fill boundary rule: @link  NXOpen::FillBoundaryRule   NXOpen::FillBoundaryRule @endlink 
                 

         
                
                This rule chains to add all neighboring facets of seed (and the neighbor-neighbors) until the region reaches a closed ring of specified boundary facets.
                While @link  NXOpen::FloodFillFacetsRule   NXOpen::FloodFillFacetsRule @endlink  smartly identifies the boundary facets from existing collection,
                @link  NXOpen::FillBoundaryRule   NXOpen::FillBoundaryRule @endlink  chains over existing collected facets until input boundary facets.
                
                
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FillBoundaryRule * CreateRuleFillBoundary
        (
            const std::vector<NXOpen::IFacet *> & boundaryFacets /** boundary facets upto which chaining is done.*/,
            NXOpen::IFacet * seedFacet /** the seed facet */,
            bool includeBoudaryFacets /** if true, input boundary facets are added to resultant chained collection of facets */
        );
        /**  @brief 
                Creates fill boundary rule: @link  NXOpen::FillBoundaryRule   NXOpen::FillBoundaryRule @endlink  with multiple rules
                 

         
                
                Similar to the method @link FacetSelectionRuleFactory::CreateRuleFillBoundary  FacetSelectionRuleFactory::CreateRuleFillBoundary @endlink  this method also creates @link  NXOpen::FillBoundaryRule   NXOpen::FillBoundaryRule @endlink 
                but the only difference is that this method accepts multiple seeds.        
                
             @return  
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::FillBoundaryRule * CreateRuleFillBoundary
        (
            const std::vector<NXOpen::IFacet *> & boundaryFacets /** boundary facets upto which chaining is done.*/,
            const std::vector<NXOpen::IFacet *> & seedFacets /** the seed facets */,
            bool includeBoudaryFacets /** if true, input boundary facets are added to resultant chained collection of facets */
        );
        /**  @brief 
            Create body facets selection rule: @link  NXOpen::BodyFacetsRule   NXOpen::BodyFacetsRule @endlink 
             

         
            
            This rule chains to collect all facets of input facet bodies.
            An Exception is raised if input object is not facet body.
            
             @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::BodyFacetsRule * CreateRuleBodyFacets
        (
            const std::vector<NXOpen::NXObject *> & bodies /** a faceted body whose facets are to be collected.*/
        );
        /**  @brief 
            Creates primitive facets region selection intent rule: @link  NXOpen::PrimitiveFacetsRule   NXOpen::PrimitiveFacetsRule @endlink .
             

         
            
            This rule chains to add all neighbouring facets of seed (and the neighbour-neighbours) which belong to a particular primitive shape.
            Currently this rule collects facets only from planar, cylindrical, conical and spherical shapes.    
            
             @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::PrimitiveFacetsRule * CreateRulePrimitiveFacets
        (
            NXOpen::IFacet * seedFacet /** seed facet for primitive facets collection */,
            double primitiveShapeToleranceFactor /** tolerance factor to be used for primitive shape detection */
        );
        /**  @brief 
            Create tangent facets selection rule: @link  NXOpen::TangentFacetsRule   NXOpen::TangentFacetsRule @endlink 
             

         
            
            This rule chains to add all neighbouring facets of seed (and the neighbour-neighbours) which satisfy the tangency condition.
            
             @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::TangentFacetsRule * CreateRuleTangentFacets
        (
            NXOpen::IFacet * seedFacet /** seed facet for tangent facet collection */,
            double tangencyTolerance /** tolerance to detect tangency of facets with each other */
        );
        /**  @brief 
            Create within curve facets selection rule: @link  NXOpen::WithinCurvesRule   NXOpen::WithinCurvesRule @endlink 
             

         
            
            This rule chains to add all neighbouring facets of seed (and the neighbour-neighbours) within curve.
            If curves are not found in the vicinity of the face, all facets of the face will be added to the selection.
            
             @return  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::WithinCurvesRule * CreateRuleWithinCurves
        (
            NXOpen::IFacet * seedFacet /** seed facet for within curve facets collection */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
