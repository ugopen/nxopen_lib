#ifndef NXOpen_CAE_POSTSMARTSELECTIONMANAGER_HXX_INCLUDED
#define NXOpen_CAE_POSTSMARTSELECTIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostSmartSelectionManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostNMaxMinMethod.hxx>
#include <NXOpen/CAE_PostRelatedElementsMethod.hxx>
#include <NXOpen/CAE_PostRelatedNodesMethod.hxx>
#include <NXOpen/CAE_PostResultRangeMethod.hxx>
#include <NXOpen/CAE_PostSelectionEntity.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostSmartSelectionManager;
    }
    namespace CAE
    {
        class Post;
    }
    namespace CAE
    {
        class PostNMaxMinMethod;
    }
    namespace CAE
    {
        class PostRelatedElementsMethod;
    }
    namespace CAE
    {
        class PostRelatedNodesMethod;
    }
    namespace CAE
    {
        class PostResultRangeMethod;
    }
    namespace CAE
    {
        class PostSelectionEntity;
    }
    class TaggedObject;
    namespace CAE
    {
        class PostSmartSelectionManagerImpl;
        /** Manages methods  <br> Not support KF.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostSmartSelectionManager
        {
            /** Entity type */
            public: enum EntityType
            {
                EntityTypeNone/** none */  = -1,
                EntityTypeNode/** node */ ,
                EntityTypeElem/** elem */ 
            };

             /** NMaxMinMethod parameters */
            public:
            struct NMaxMinParameters
            {
                public: /** entitytype */ NXOpen::CAE::PostSmartSelectionManager::EntityType EntityType;
                public: /** number of results */int NResults;
                public: /** pvid */ int Pvid;
                public: /** includevisibleentitiesonly */ bool IncludeVisibleEntitiesOnly;
                public: NMaxMinParameters() :
                    EntityType((NXOpen::CAE::PostSmartSelectionManager::EntityType)0),
                    NResults(),
                    Pvid(),
                    IncludeVisibleEntitiesOnly()
                {
                }
                /** Constructor for the NMaxMinParameters struct. */ 
                public: NMaxMinParameters(NXOpen::CAE::PostSmartSelectionManager::EntityType entityTypeInitial /** entitytype */ , 
                        int nResultsInitial /** number of results */, 
                        int pvidInitial /** pvid */ , 
                        bool includeVisibleEntitiesOnlyInitial /** includevisibleentitiesonly */ ) :
                    EntityType(entityTypeInitial),
                    NResults(nResultsInitial),
                    Pvid(pvidInitial),
                    IncludeVisibleEntitiesOnly(includeVisibleEntitiesOnlyInitial)
                {
                }
            };

             /** ResultRangeMethod parameters */
            public:
            struct ResultRangeParameters
            {
                public: /** pvid */ int Pvid;
                public: /** isbelowvaluespecified */ bool IsBelowValueSpecified;
                public: /** belowvalue */ double BelowValue;
                public: /** isabovevaluespecified */ bool IsAboveValueSpecified;
                public: /** abovevalue */ double AboveValue;
                public: /** entitytype */ NXOpen::CAE::PostSmartSelectionManager::EntityType EntityType;
                public: /** includevisibleentitiesonly */ bool IncludeVisibleEntitiesOnly;
                public: ResultRangeParameters() :
                    Pvid(),
                    IsBelowValueSpecified(),
                    BelowValue(),
                    IsAboveValueSpecified(),
                    AboveValue(),
                    EntityType((NXOpen::CAE::PostSmartSelectionManager::EntityType)0),
                    IncludeVisibleEntitiesOnly()
                {
                }
                /** Constructor for the ResultRangeParameters struct. */ 
                public: ResultRangeParameters(int pvidInitial /** pvid */ , 
                        bool isBelowValueSpecifiedInitial /** isbelowvaluespecified */ , 
                        double belowValueInitial /** belowvalue */ , 
                        bool isAboveValueSpecifiedInitial /** isabovevaluespecified */ , 
                        double aboveValueInitial /** abovevalue */ , 
                        NXOpen::CAE::PostSmartSelectionManager::EntityType entityTypeInitial /** entitytype */ , 
                        bool includeVisibleEntitiesOnlyInitial /** includevisibleentitiesonly */ ) :
                    Pvid(pvidInitial),
                    IsBelowValueSpecified(isBelowValueSpecifiedInitial),
                    BelowValue(belowValueInitial),
                    IsAboveValueSpecified(isAboveValueSpecifiedInitial),
                    AboveValue(aboveValueInitial),
                    EntityType(entityTypeInitial),
                    IncludeVisibleEntitiesOnly(includeVisibleEntitiesOnlyInitial)
                {
                }
            };

            private: PostSmartSelectionManagerImpl * m_postsmartselectionmanager_impl;
            private: NXOpen::CAE::Post* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PostSmartSelectionManager(NXOpen::CAE::Post *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PostSmartSelectionManager();
            /** Creates a @link NXOpen::CAE::PostRelatedElementsMethod NXOpen::CAE::PostRelatedElementsMethod@endlink  object.
                        It is user's responsibility to destroy the result object once done.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostRelatedElementsMethod * CreateRelatedElementsMethodBySeedEntity
            (
                NXOpen::CAE::PostSelectionEntity * seedEntity /** seedentity */ ,
                int pvid /** the postview id returned by post view create command*/
            );
            /** Creates a @link NXOpen::CAE::PostRelatedElementsMethod NXOpen::CAE::PostRelatedElementsMethod@endlink  object by geometry seed object. The see object could be only type of 
                        @link NXOpen::CAE::PostMesh NXOpen::CAE::PostMesh@endlink , @link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink  or @link NXOpen::CAE::CAEEdge NXOpen::CAE::CAEEdge@endlink . 
                        It is user's responsibility to destroy the result object once done.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostRelatedElementsMethod * CreateRelatedElementsMethodBySeedGeometry
            (
                NXOpen::TaggedObject * seedGeom /** seedgeom */ ,
                int pvid /** the postview id returned by post view create command*/
            );
            /** Creates a @link NXOpen::CAE::PostRelatedNodesMethod NXOpen::CAE::PostRelatedNodesMethod@endlink  object.
                        It is user's responsibility to destroy the result object once done
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostRelatedNodesMethod * CreateRelatedNodesMethodBySeedEntity
            (
                NXOpen::CAE::PostSelectionEntity * seedEntity /** seedentity */ ,
                int pvid /** the postview id returned by post view create command*/
            );
            /** Creates a @link NXOpen::CAE::PostRelatedNodesMethod NXOpen::CAE::PostRelatedNodesMethod@endlink  object by geometry seed object. The seed object could be only type of 
                        @link NXOpen::CAE::PostMesh NXOpen::CAE::PostMesh@endlink , @link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink  or @link NXOpen::CAE::CAEEdge NXOpen::CAE::CAEEdge@endlink .
                        It is user's responsibility to destroy the result object once done
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostRelatedNodesMethod * CreateRelatedNodesMethodBySeedGeometry
            (
                NXOpen::TaggedObject * seedGeom /** seedgeom */ ,
                int pvid /** the postview id returned by post view create command*/
            );
            /** Creates a @link NXOpen::CAE::PostNMaxMinMethod NXOpen::CAE::PostNMaxMinMethod@endlink  object.
                        It is user's responsibility to destroy the result object once done
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostNMaxMinMethod * CreateNMaxResultsMethod
            (
                const NXOpen::CAE::PostSmartSelectionManager::NMaxMinParameters & pMethodParameters /** pmethodparameters */ 
            );
            /** Creates a @link NXOpen::CAE::PostNMaxMinMethod NXOpen::CAE::PostNMaxMinMethod@endlink  object.
                        It is user's responsibility to destroy the result object once done
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostNMaxMinMethod * CreateNMinResultsMethod
            (
                const NXOpen::CAE::PostSmartSelectionManager::NMaxMinParameters & pMethodParameters /** pmethodparameters */ 
            );
            /** Creates a @link NXOpen::CAE::PostResultRangeMethod NXOpen::CAE::PostResultRangeMethod@endlink  object.
                        It is user's responsibility to destroy the result object once done
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostResultRangeMethod * CreateResultRangeMethod
            (
                const NXOpen::CAE::PostSmartSelectionManager::ResultRangeParameters & pMethodParameters /** pmethodparameters */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
