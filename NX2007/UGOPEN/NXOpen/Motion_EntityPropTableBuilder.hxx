#ifndef NXOpen_MOTION_ENTITYPROPTABLEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_ENTITYPROPTABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_EntityPropTableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class EntityPropTableBuilder;
    }
    class CoordinateSystem;
    class Direction;
    namespace Motion
    {
        class MotionBuilder;
    }
    class NXObject;
    class PhysicalMaterial;
    class Point;
    class Unit;
    namespace Motion
    {
        class _EntityPropTableBuilderBuilder;
        class EntityPropTableBuilderImpl;
        /**
            Represents a @link NXOpen::Motion::EntityPropTableBuilder NXOpen::Motion::EntityPropTableBuilder@endlink 
             <br> This is an abstract class, and cannot be created.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  EntityPropTableBuilder : public NXOpen::Motion::MotionBuilder
        {
            private: EntityPropTableBuilderImpl * m_entityproptablebuilder_impl;
            private: friend class  _EntityPropTableBuilderBuilder;
            protected: EntityPropTableBuilder();
            public: ~EntityPropTableBuilder();
            /** Returns the entity subtype name  @return  the name of the entity subtype 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetEntitySubtypeName
            (
            );
            /** Set the entity subtype name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEntitySubtypeName
            (
                const NXString & entitySubtypeName /** the name of the entity subtype */
            );
            /** Set the entity subtype name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetEntitySubtypeName
            (
                const char * entitySubtypeName /** the name of the entity subtype */
            );
            /** Returns the override state of the property  @return  override state of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState GetPropertyOverrideState
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the override state of the property  @return  override state of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Motion::ParamOverrideState GetPropertyOverrideState
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the override state of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPropertyOverrideState
            (
                const NXString & propertyName /** name of the property */,
                NXOpen::Motion::ParamOverrideState overrideState /** override state of the property */
            );
            /** Sets the override state of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPropertyOverrideState
            (
                const char * propertyName /** name of the property */,
                NXOpen::Motion::ParamOverrideState overrideState /** override state of the property */
            );
            /** Unset a property value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPropertyWithoutValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Unset a property value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPropertyWithoutValue
            (
                const char * propertyName /** name of the property */
            );
            /** Returns the boolean value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetBooleanPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the boolean value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            bool GetBooleanPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the boolean value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBooleanPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                bool propertyValue /** value of the property */
            );
            /** Sets the boolean value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetBooleanPropertyValue
            (
                const char * propertyName /** name of the property */,
                bool propertyValue /** value of the property */
            );
            /** Returns the integer value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the integer value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            int GetIntegerPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the integer value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetIntegerPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                int propertyValue /** value of the property */
            );
            /** Sets the integer value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetIntegerPropertyValue
            (
                const char * propertyName /** name of the property */,
                int propertyValue /** value of the property */
            );
            /** Returns the string value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetStringPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the string value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXString GetStringPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the string value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStringPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const NXString & propertyValue /** value of the property */
            );
            /** Sets the string value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetStringPropertyValue
            (
                const char * propertyName /** name of the property */,
                const char * propertyValue /** value of the property */
            );
            /** Returns the multi text value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetMultiTextPropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the multi text value of the property  @return  value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            NXString GetMultiTextPropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the multi text value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMultiTextPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const NXString & propertyValue /** value of the property */
            );
            /** Sets the multi text value of the property 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMultiTextPropertyValue
            (
                const char * propertyName /** name of the property */,
                const char * propertyValue /** value of the property */
            );
            /** Returns the RGB color value of the property as 0.0 to 1.0 doubles 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetRGBColorPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                std::vector<double> & propertyValue /** value of the property */
            );
            /** Returns the RGB color value of the property as 0.0 to 1.0 doubles 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void GetRGBColorPropertyValue
            (
                const char * propertyName /** name of the property */,
                std::vector<double> & propertyValue /** value of the property */
            );
            /** Sets the RGB color value of the property as 0.0 to 1.0 doubles 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRGBColorPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const std::vector<double> & propertyValue /** value of the property */
            );
            /** Sets the RGB color value of the property as 0.0 to 1.0 doubles 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetRGBColorPropertyValue
            (
                const char * propertyName /** name of the property */,
                const std::vector<double> & propertyValue /** value of the property */
            );
            /** Returns the RGB color value of the property as 0 to 255 ints 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetRGBColorPropertyValue255
            (
                const NXString & propertyName /** name of the property */,
                std::vector<int> & propertyValue /** value of the property */
            );
            /** Returns the RGB color value of the property as 0 to 255 ints 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void GetRGBColorPropertyValue255
            (
                const char * propertyName /** name of the property */,
                std::vector<int> & propertyValue /** value of the property */
            );
            /** Sets the RGB color value of the property as 0 to 255 ints 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRGBColorPropertyValue255
            (
                const NXString & propertyName /** name of the property */,
                const std::vector<int> & propertyValue /** value of the property */
            );
            /** Sets the RGB color value of the property as 0 to 255 ints 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetRGBColorPropertyValue255
            (
                const char * propertyName /** name of the property */,
                const std::vector<int> & propertyValue /** value of the property */
            );
            /** Returns the double value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetScalarExpressionPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                double* propertyValue /** value of the property */,
                NXOpen::Unit ** unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Returns the double value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            void GetScalarExpressionPropertyValue
            (
                const char * propertyName /** name of the property */,
                double* propertyValue /** value of the property */,
                NXOpen::Unit ** unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the double value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetScalarExpressionPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                double propertyValue /** value of the property */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the double value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetScalarExpressionPropertyValue
            (
                const char * propertyName /** name of the property */,
                double propertyValue /** value of the property */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the string value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetScalarExpressionPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const NXString & propertyValue /** The string value for the Scalar */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Sets the string value of the property with unit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetScalarExpressionPropertyValue
            (
                const char * propertyName /** name of the property */,
                const char * propertyValue /** The string value for the Scalar */,
                NXOpen::Unit * unitType /** Unit type for the scalar NULL if the scalar has no units */
            );
            /** Returns the referenced object value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the referenced object value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::NXObject * GetReferencePropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the referenced object value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReferencePropertyValue
            (
                const NXString & propertyName /** name of the property */,
                NXOpen::NXObject * propertyValue /** value of the property */
            );
            /** Sets the referenced object value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetReferencePropertyValue
            (
                const char * propertyName /** name of the property */,
                NXOpen::NXObject * propertyValue /** value of the property */
            );
            /** Returns the multiple referenced object values of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetMultipleReferencePropertyValue
            (
                const NXString & propertyName /** name of the property */
            );
            /** Returns the multiple referenced object values of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXOpen::NXObject *> GetMultipleReferencePropertyValue
            (
                const char * propertyName /** name of the property */
            );
            /** Sets the multiple referenced object values of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMultipleReferencePropertyValue
            (
                const NXString & propertyName /** name of the property */,
                const std::vector<NXOpen::NXObject *> & propertyValue /** value of the property */
            );
            /** Sets the multiple referenced object values of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMultipleReferencePropertyValue
            (
                const char * propertyName /** name of the property */,
                const std::vector<NXOpen::NXObject *> & propertyValue /** value of the property */
            );
            /** Returns the point value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * GetPointPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the point value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Point * GetPointPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the point value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPointPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Sets the point value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPointPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::Point * propertyValue /** value of the property */
            );
            /** Returns the direction value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * GetDirectionPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the direction value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Direction * GetDirectionPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the direction value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDirectionPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Sets the direction value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetDirectionPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::Direction * propertyValue /** value of the property */
            );
            /** Returns the csys value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * GetCsysPropertyValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the csys value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CoordinateSystem * GetCsysPropertyValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the csys value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCsysPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                NXOpen::CoordinateSystem * propertyValue /** value of the property */
            );
            /** Sets the csys value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetCsysPropertyValue
            (
                const char * propertyName /** name of the property  */,
                NXOpen::CoordinateSystem * propertyValue /** value of the property */
            );
            /** Returns the file reference value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFileReferenceValue
            (
                const NXString & propertyName /** name of the property  */
            );
            /** Returns the file reference value of the property  @return  value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXString GetFileReferenceValue
            (
                const char * propertyName /** name of the property  */
            );
            /** Sets the file reference value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFileReferenceValue
            (
                const NXString & propertyName /** name of the property  */,
                const NXString & propertyValue /** value of the property */
            );
            /** Sets the file reference value of the property 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFileReferenceValue
            (
                const char * propertyName /** name of the property  */,
                const char * propertyValue /** value of the property */
            );
            /** Returns the material value of the property  @return  value of the property 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PhysicalMaterial * GetMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                bool* isInherited /** true indicate the material is inherited from referenced object assignments such as geometry */
            );
            /** Returns the material value of the property  @return  value of the property 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PhysicalMaterial * GetMaterialPropertyValue
            (
                const char * propertyName /** name of the property  */,
                bool* isInherited /** true indicate the material is inherited from referenced object assignments such as geometry */
            );
            /** Sets the material value of the property 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterialPropertyValue
            (
                const NXString & propertyName /** name of the property  */,
                bool isInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
                NXOpen::PhysicalMaterial * propertyValue /** value of the property */
            );
            /** Sets the material value of the property 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMaterialPropertyValue
            (
                const char * propertyName /** name of the property  */,
                bool isInherited /** true indicate the material is inherited from referenced object assignments such as geometry */,
                NXOpen::PhysicalMaterial * propertyValue /** value of the property */
            );
            /** Returns the multi-column-selection-list value of the property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMultiColumnSelectionListPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                std::vector<NXString> & propertyValue /** row values */
            );
            /** Returns the multi-column-selection-list value of the property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void GetMultiColumnSelectionListPropertyValue
            (
                const char * propertyName /** name of the property */,
                std::vector<NXString> & propertyValue /** row values */
            );
            /** Sets the multi-column-selection-list value of the property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMultiColumnSelectionListPropertyValue
            (
                const NXString & propertyName /** name of the property */,
                std::vector<NXString> & propertyValue /** row values */
            );
            /** Sets the multi-column-selection-list value of the property 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetMultiColumnSelectionListPropertyValue
            (
                const char * propertyName /** name of the property */,
                std::vector<NXString> & propertyValue /** row values */
            );
            /**Returns  the entity name. Must be unique across all motion elements. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EntityName
            (
            );
            /**Sets  the entity name. Must be unique across all motion elements. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEntityName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the entity name. Must be unique across all motion elements. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetEntityName
            (
                const char * name /** name */ 
            );
            /** Returns all the boolean property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetBooleanPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the integer property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetIntegerPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the scalar expression property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetScalarExpressionPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the string property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetStringPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the multi-text property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMultiTextPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the RGB color property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetRGBColorPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the reference property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetReferencePropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the multiple reference property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMultipleReferencePropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the file reference property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetFileReferencePropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the material property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMaterialPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the point property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetPointPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the direction property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDirectionPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the csys property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetCsysPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
            /** Returns all the multi-column-selection-list property names 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMultiColumnSelectionListPropertyNames
            (
                std::vector<NXString> & propertyNames /** propertynames */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
