#ifndef NXOpen_TOOLING_WALLTHICKNESSCHECKERBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_WALLTHICKNESSCHECKERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_WallThicknessCheckerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class WallThicknessCheckerBuilder;
    }
    class Body;
    class Builder;
    class Direction;
    class Face;
    class NXColor;
    class SelectBody;
    class SelectFace;
    class SelectFaceList;
    class TaggedObject;
    namespace Tooling
    {
        class _WallThicknessCheckerBuilderBuilder;
        class WallThicknessCheckerBuilderImpl;
        /** Represents a builder to be used to perform wall thickness analysis. The method @link NXOpen::Tooling::WallThicknessCheckerBuilder::Calculate NXOpen::Tooling::WallThicknessCheckerBuilder::Calculate@endlink  should be called before calling commit.  <br> To create a new instance of this class, use @link NXOpen::Tooling::WallThicknessCheckerManager::CreateBuilder  NXOpen::Tooling::WallThicknessCheckerManager::CreateBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CalculationCalculateMethod </term> <description> 
         
        Ray </description> </item> 

        <item><term> 
         
        CalculationMaximumSpacing </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CalculationMaximumThicknessTolerance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CalculationProjectToFace </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CalculationSamplePointsIntervalScale </term> <description> 
         
        50 </description> </item> 

        <item><term> 
         
        InspectDisplayVolumeFillers </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectDisplayWithExcludeColor </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        InspectExcludeDistance </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        InspectExcludeSharpEdgeResultsDisplay </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionChangeFacesColor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionDisplayFringeColorPlot </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionDisplayRayVectors </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionIncludeAllFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionThicknessFilterRangeHighLimit </term> <description> 
         
        100 </description> </item> 

        <item><term> 
         
        InspectionThicknessFilterRangeLowLimit </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InspectionUseThicknessRangeSelect </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsCreateBall </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsCreateThicknessText </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsDisplayDynamicBall </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        OptionsDisplayMeshElements </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsDisplayOppositeMeshElements </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsDisplayThicknessVectors </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        OptionsDynamicSnapToVertex </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLegendControl </term> <description> 
         
        Blend </description> </item> 

        <item><term> 
         
        OptionsLowerLimit01 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit02 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit03 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit04 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit05 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit06 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit07 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit08 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit09 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit10 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit11 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsLowerLimit12 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsNumDecimals </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        OptionsNumberOfColors </term> <description> 
         
        12 </description> </item> 

        <item><term> 
         
        OptionsRangeHighLimit </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsRangeLowLimit </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsRangeType </term> <description> 
         
        Uniform </description> </item> 

        <item><term> 
         
        OptionsSaveThicknessVectorsAsLines </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit01 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit02 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit03 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit04 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit05 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit06 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit07 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit08 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit09 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit10 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit11 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OptionsUpperLimit12 </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  WallThicknessCheckerBuilder : public NXOpen::Builder
        {
            /** The calculation method used for the wall thickness analysis. */
            public: enum CalculateMethod
            {
                CalculateMethodRay/** Ray          */,
                CalculateMethodRollingBall/** Rolling ball */,
                CalculateMethodVectorProject/** Vector project */
            };

            /** The range type for defining the ranges used in displaying the thickness results. */
            public: enum RangeType
            {
                RangeTypeUniform/** Uniform      */,
                RangeTypeUserDefined/** User-defined */
            };

            /** The legend control used in displaying the thickness results. */
            public: enum LegendControl
            {
                LegendControlBlend/** Blend */,
                LegendControlSharp/** Sharp */
            };

            private: WallThicknessCheckerBuilderImpl * m_wallthicknesscheckerbuilder_impl;
            private: friend class  _WallThicknessCheckerBuilderBuilder;
            protected: WallThicknessCheckerBuilder();
            public: ~WallThicknessCheckerBuilder();
            /**Returns  the body for thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * CalculationBody
            (
            );
            /**Returns  the scale for controlling the sampling spacing and thickness analysis tolerance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int CalculationSamplePointsIntervalScale
            (
            );
            /**Sets  the scale for controlling the sampling spacing and thickness analysis tolerance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationSamplePointsIntervalScale
            (
                int calculationSamplePointsIntervalScale /** calculationsamplepointsintervalscale */ 
            );
            /**Returns  the maximum thickness tolerance used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double CalculationMaximumThicknessTolerance
            (
            );
            /**Sets  the maximum thickness tolerance used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationMaximumThicknessTolerance
            (
                double calculationMaximumThicknessTolerance /** calculationmaximumthicknesstolerance */ 
            );
            /**Returns  the maximum spacing used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double CalculationMaximumSpacing
            (
            );
            /**Sets  the maximum spacing used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationMaximumSpacing
            (
                double calculationMaximumSpacing /** calculationmaximumspacing */ 
            );
            /**Returns  the calculation method used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod CalculationCalculateMethod
            (
            );
            /**Sets  the calculation method used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationCalculateMethod
            (
                NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod calculationCalculateMethod /** calculationcalculatemethod */ 
            );
            /**Returns  the normal used when @link NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod@endlink  is set to @link  NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethodVectorProject   NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethodVectorProject @endlink  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * CalPageNormalVector
            (
            );
            /**Sets  the normal used when @link NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethod@endlink  is set to @link  NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethodVectorProject   NXOpen::Tooling::WallThicknessCheckerBuilder::CalculateMethodVectorProject @endlink  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCalPageNormalVector
            (
                NXOpen::Direction * calPageNormalVector /** calpagenormalvector */ 
            );
            /**Returns  the project to face option for the thickness analysis on the Calculation Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CalculationProjectToFace
            (
            );
            /**Sets  the project to face option for the thickness analysis on the Calculation Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationProjectToFace
            (
                bool calculationProjectToFace /** calculationprojecttoface */ 
            );
            /** Method for the "Calculate" button, needs to be called before calling commit. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void Calculate
            (
            );
            /** Saves the Results after calling the @link NXOpen::Tooling::WallThicknessCheckerBuilder::Calculate NXOpen::Tooling::WallThicknessCheckerBuilder::Calculate@endlink  to save the thickness calculation results. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveResults
            (
            );
            /** Deletes the saved thickness results if the thickness calculation results are no longer needed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteSavedResults
            (
            );
            /**Returns  the option of displaying the fringe color plot for the thickness analysis results on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionDisplayFringeColorPlot
            (
            );
            /**Sets  the option of displaying the fringe color plot for the thickness analysis results on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionDisplayFringeColorPlot
            (
                bool inspectionDisplayFringeColorPlot /** inspectiondisplayfringecolorplot */ 
            );
            /**Returns  the option of displaying the ray vectors for the thickness analysis results on the Inspect Tab page 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionDisplayRayVectors
            (
            );
            /**Sets  the option of displaying the ray vectors for the thickness analysis results on the Inspect Tab page 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionDisplayRayVectors
            (
                bool inspectionDisplayRayVectors /** inspectiondisplayrayvectors */ 
            );
            /**Returns  the option of displaying the internal volume fillers for the thickness analysis results on the Inspect Tab page 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool InspectDisplayVolumeFillers
            (
            );
            /**Sets  the option of displaying the internal volume fillers for the thickness analysis results on the Inspect Tab page 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInspectDisplayVolumeFillers
            (
                bool inspectDisplayVolumeFillers /** inspectdisplayvolumefillers */ 
            );
            /**Returns  the option of selecting all faces for displaying thickness analysis results on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionIncludeAllFaces
            (
            );
            /**Sets  the option of selecting all faces for displaying thickness analysis results on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionIncludeAllFaces
            (
                bool inspectionIncludeAllFaces /** inspectionincludeallfaces */ 
            );
            /**Returns  the selected faces for displaying the thickness results on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * InspectionFaces
            (
            );
            /**Returns  the option of using range select for selecting faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionUseThicknessRangeSelect
            (
            );
            /**Sets  the option of using range select for selecting faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionUseThicknessRangeSelect
            (
                bool inspectionUseThicknessRangeSelect /** inspectionusethicknessrangeselect */ 
            );
            /**Returns  the low limit of range select on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double InspectionThicknessFilterRangeLowLimit
            (
            );
            /**Sets  the low limit of range select on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionThicknessFilterRangeLowLimit
            (
                double inspectionThicknessFilterRangeLowLimit /** inspectionthicknessfilterrangelowlimit */ 
            );
            /**Returns  the high limit of range select on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double InspectionThicknessFilterRangeHighLimit
            (
            );
            /**Sets  the high limit of range select on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionThicknessFilterRangeHighLimit
            (
                double inspectionThicknessFilterRangeHighLimit /** inspectionthicknessfilterrangehighlimit */ 
            );
            /**Returns  the option of changing color of selected faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool InspectionChangeFacesColor
            (
            );
            /**Sets  the option of changing color of selected faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionChangeFacesColor
            (
                bool inspectionChangeFacesColor /** inspectionchangefacescolor */ 
            );
            /**Returns  the color used in changing the color of selected faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * InspectionSelectedFacesColor
            (
            );
            /**Sets  the color used in changing the color of selected faces on the Inspect Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionSelectedFacesColor
            (
                NXOpen::NXColor * inspectionSelectedFacesColor /** inspectionselectedfacescolor */ 
            );
            /**Returns  the option to exclude sharp edge thickness analysis results display 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool InspectExcludeSharpEdgeResultsDisplay
            (
            );
            /**Sets  the option to exclude sharp edge thickness analysis results display 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInspectExcludeSharpEdgeResultsDisplay
            (
                bool inspectExcludeSharpEdgeResultsDisplay /** inspectexcludesharpedgeresultsdisplay */ 
            );
            /**Returns  the distance from sharp edge to exclude thickness analysis results display 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double InspectExcludeDistance
            (
            );
            /**Sets  the distance from sharp edge to exclude thickness analysis results display 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInspectExcludeDistance
            (
                double inspectExcludeDistance /** inspectexcludedistance */ 
            );
            /**Returns  the option to display with exclude color for excluded results 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool InspectDisplayWithExcludeColor
            (
            );
            /**Sets  the option to display with exclude color for excluded results 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInspectDisplayWithExcludeColor
            (
                bool inspectDisplayWithExcludeColor /** inspectdisplaywithexcludecolor */ 
            );
            /**Returns  the color used for displaying excluded sharp edge results 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * InspectExcludeColor
            (
            );
            /**Sets  the color used for displaying excluded sharp edge results 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInspectExcludeColor
            (
                NXOpen::NXColor * inspectExcludeColor /** inspectexcludecolor */ 
            );
            /**Returns  the selected location on face for displaying dynamic thickness display 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * InspectionDynamicPointOnFace
            (
            );
            /**Returns  the translucency for the faces of the selected solid body 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int InspectionTranslucency
            (
            );
            /**Sets  the translucency for the faces of the selected solid body 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInspectionTranslucency
            (
                int inspectionTranslucency /** inspectiontranslucency */ 
            );
            /**Returns  the range type for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::WallThicknessCheckerBuilder::RangeType OptionsRangeType
            (
            );
            /**Sets  the range type for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsRangeType
            (
                NXOpen::Tooling::WallThicknessCheckerBuilder::RangeType optionsRangeType /** optionsrangetype */ 
            );
            /**Returns  the legend control for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::WallThicknessCheckerBuilder::LegendControl OptionsLegendControl
            (
            );
            /**Sets  the legend control for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLegendControl
            (
                NXOpen::Tooling::WallThicknessCheckerBuilder::LegendControl optionsLegendControl /** optionslegendcontrol */ 
            );
            /**Returns  the number of colors used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int OptionsNumberOfColors
            (
            );
            /**Sets  the number of colors used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsNumberOfColors
            (
                int optionsNumberOfColors /** optionsnumberofcolors */ 
            );
            /**Returns  the thickness high limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsRangeHighLimit
            (
            );
            /**Sets  the thickness high limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsRangeHighLimit
            (
                double optionsRangeHighLimit /** optionsrangehighlimit */ 
            );
            /**Returns  the 1st color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor01
            (
            );
            /**Sets  the 1st color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor01
            (
                NXOpen::NXColor * optionsColor01 /** optionscolor01 */ 
            );
            /**Returns  the 1st lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit01
            (
            );
            /**Sets  the 1st lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit01
            (
                double optionsLowerLimit01 /** optionslowerlimit01 */ 
            );
            /**Returns  the 1st upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit01
            (
            );
            /**Sets  the 1st upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit01
            (
                double optionsUpperLimit01 /** optionsupperlimit01 */ 
            );
            /**Returns  the 2nd color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor02
            (
            );
            /**Sets  the 2nd color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor02
            (
                NXOpen::NXColor * optionsColor02 /** optionscolor02 */ 
            );
            /**Returns  the 2nd lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit02
            (
            );
            /**Sets  the 2nd lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit02
            (
                double optionsLowerLimit02 /** optionslowerlimit02 */ 
            );
            /**Returns  the 2nd upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit02
            (
            );
            /**Sets  the 2nd upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit02
            (
                double optionsUpperLimit02 /** optionsupperlimit02 */ 
            );
            /**Returns  the 3rd color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor03
            (
            );
            /**Sets  the 3rd color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor03
            (
                NXOpen::NXColor * optionsColor03 /** optionscolor03 */ 
            );
            /**Returns  the 3rd lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit03
            (
            );
            /**Sets  the 3rd lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit03
            (
                double optionsLowerLimit03 /** optionslowerlimit03 */ 
            );
            /**Returns  the 3rd upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit03
            (
            );
            /**Sets  the 3rd upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit03
            (
                double optionsUpperLimit03 /** optionsupperlimit03 */ 
            );
            /**Returns  the 4th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor04
            (
            );
            /**Sets  the 4th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor04
            (
                NXOpen::NXColor * optionsColor04 /** optionscolor04 */ 
            );
            /**Returns  the 4th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit04
            (
            );
            /**Sets  the 4th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit04
            (
                double optionsLowerLimit04 /** optionslowerlimit04 */ 
            );
            /**Returns  the 4th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit04
            (
            );
            /**Sets  the 4th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit04
            (
                double optionsUpperLimit04 /** optionsupperlimit04 */ 
            );
            /**Returns  the 5th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor05
            (
            );
            /**Sets  the 5th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor05
            (
                NXOpen::NXColor * optionsColor05 /** optionscolor05 */ 
            );
            /**Returns  the 5th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit05
            (
            );
            /**Sets  the 5th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit05
            (
                double optionsLowerLimit05 /** optionslowerlimit05 */ 
            );
            /**Returns  the 5th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit05
            (
            );
            /**Sets  the 5th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit05
            (
                double optionsUpperLimit05 /** optionsupperlimit05 */ 
            );
            /**Returns  the 6th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor06
            (
            );
            /**Sets  the 6th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor06
            (
                NXOpen::NXColor * optionsColor06 /** optionscolor06 */ 
            );
            /**Returns  the 6th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit06
            (
            );
            /**Sets  the 6th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit06
            (
                double optionsLowerLimit06 /** optionslowerlimit06 */ 
            );
            /**Returns  the 6th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit06
            (
            );
            /**Sets  the 6th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit06
            (
                double optionsUpperLimit06 /** optionsupperlimit06 */ 
            );
            /**Returns  the 7th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor07
            (
            );
            /**Sets  the 7th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor07
            (
                NXOpen::NXColor * optionsColor07 /** optionscolor07 */ 
            );
            /**Returns  the 7th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit07
            (
            );
            /**Sets  the 7th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit07
            (
                double optionsLowerLimit07 /** optionslowerlimit07 */ 
            );
            /**Returns  the 7th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit07
            (
            );
            /**Sets  the 7th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit07
            (
                double optionsUpperLimit07 /** optionsupperlimit07 */ 
            );
            /**Returns  the 8th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor08
            (
            );
            /**Sets  the 8th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor08
            (
                NXOpen::NXColor * optionsColor08 /** optionscolor08 */ 
            );
            /**Returns  the 8th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit08
            (
            );
            /**Sets  the 8th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit08
            (
                double optionsLowerLimit08 /** optionslowerlimit08 */ 
            );
            /**Returns  the 8th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit08
            (
            );
            /**Sets  the 8th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit08
            (
                double optionsUpperLimit08 /** optionsupperlimit08 */ 
            );
            /**Returns  the 9th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor09
            (
            );
            /**Sets  the 9th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor09
            (
                NXOpen::NXColor * optionsColor09 /** optionscolor09 */ 
            );
            /**Returns  the 9th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit09
            (
            );
            /**Sets  the 9th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit09
            (
                double optionsLowerLimit09 /** optionslowerlimit09 */ 
            );
            /**Returns  the 9th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit09
            (
            );
            /**Sets  the 9th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit09
            (
                double optionsUpperLimit09 /** optionsupperlimit09 */ 
            );
            /**Returns  the 10th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor10
            (
            );
            /**Sets  the 10th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor10
            (
                NXOpen::NXColor * optionsColor10 /** optionscolor10 */ 
            );
            /**Returns  the 10th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit10
            (
            );
            /**Sets  the 10th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit10
            (
                double optionsLowerLimit10 /** optionslowerlimit10 */ 
            );
            /**Returns  the 10th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit10
            (
            );
            /**Sets  the 10th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit10
            (
                double optionsUpperLimit10 /** optionsupperlimit10 */ 
            );
            /**Returns  the 11th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor11
            (
            );
            /**Sets  the 11th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor11
            (
                NXOpen::NXColor * optionsColor11 /** optionscolor11 */ 
            );
            /**Returns  the 11th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit11
            (
            );
            /**Sets  the 11th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit11
            (
                double optionsLowerLimit11 /** optionslowerlimit11 */ 
            );
            /**Returns  the 11th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit11
            (
            );
            /**Sets  the 11th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit11
            (
                double optionsUpperLimit11 /** optionsupperlimit11 */ 
            );
            /**Returns  the 12th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OptionsColor12
            (
            );
            /**Sets  the 12th color used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsColor12
            (
                NXOpen::NXColor * optionsColor12 /** optionscolor12 */ 
            );
            /**Returns  the 12th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsLowerLimit12
            (
            );
            /**Sets  the 12th lower range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsLowerLimit12
            (
                double optionsLowerLimit12 /** optionslowerlimit12 */ 
            );
            /**Returns  the 12th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsUpperLimit12
            (
            );
            /**Sets  the 12th upper range limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsUpperLimit12
            (
                double optionsUpperLimit12 /** optionsupperlimit12 */ 
            );
            /**Returns  the thickness low limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OptionsRangeLowLimit
            (
            );
            /**Sets  the thickness low limit used for displaying the thickness analysis results on the Options Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsRangeLowLimit
            (
                double optionsRangeLowLimit /** optionsrangelowlimit */ 
            );
            /**Returns  the number of decimal places for thickness output. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int OptionsNumDecimals
            (
            );
            /**Sets  the number of decimal places for thickness output. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsNumDecimals
            (
                int optionsNumDecimals /** optionsnumdecimals */ 
            );
            /**Returns  the option to display the thickness ray vectors. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsDisplayThicknessVectors
            (
            );
            /**Sets  the option to display the thickness ray vectors. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsDisplayThicknessVectors
            (
                bool optionsDisplayThicknessVectors /** optionsdisplaythicknessvectors */ 
            );
            /**Returns  the option to create permanent lines as the thickness ray vectors. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsSaveThicknessVectorsAsLines
            (
            );
            /**Sets  the option to create permanent lines as the thickness ray vectors. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsSaveThicknessVectorsAsLines
            (
                bool optionsSaveThicknessVectorsAsLines /** optionssavethicknessvectorsaslines */ 
            );
            /**Returns  the option to mesh elements. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsDisplayMeshElements
            (
            );
            /**Sets  the option to mesh elements. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsDisplayMeshElements
            (
                bool optionsDisplayMeshElements /** optionsdisplaymeshelements */ 
            );
            /**Returns  the option to display opposite mesh elements. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsDisplayOppositeMeshElements
            (
            );
            /**Sets  the option to display opposite mesh elements. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsDisplayOppositeMeshElements
            (
                bool optionsDisplayOppositeMeshElements /** optionsdisplayoppositemeshelements */ 
            );
            /**Returns  the option to snap to vertex for displaying dynamic thickness results. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsDynamicSnapToVertex
            (
            );
            /**Sets  the option to snap to vertex for displaying dynamic thickness results. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsDynamicSnapToVertex
            (
                bool optionsDynamicSnapToVertex /** optionsdynamicsnaptovertex */ 
            );
            /**Returns  the option to display dynamic ball for @link Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsDisplayDynamicBall
            (
            );
            /**Sets  the option to display dynamic ball for @link Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsDisplayDynamicBall
            (
                bool optionsDisplayDynamicBall /** optionsdisplaydynamicball */ 
            );
            /**Returns  the option to create a ball for @link Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall@endlink 
                        when a point is selected on a face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsCreateBall
            (
            );
            /**Sets  the option to create a ball for @link Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall Tooling::WallThicknessCheckerBuilder::CalculateMethodRollingBall@endlink 
                        when a point is selected on a face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsCreateBall
            (
                bool optionsCreateBall /** optionscreateball */ 
            );
            /**Returns  the option to create text for the thickness results. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool OptionsCreateThicknessText
            (
            );
            /**Sets  the option to create text for the thickness results. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOptionsCreateThicknessText
            (
                bool optionsCreateThicknessText /** optionscreatethicknesstext */ 
            );
            /**Returns  the flag that indicates the Apply status of the command, needed only in the interactive environment. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int InApplyStatus
            (
            );
            /**Sets  the flag that indicates the Apply status of the command, needed only in the interactive environment. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInApplyStatus
            (
                int inApplyStatus /** inapplystatus */ 
            );
            /** Initialize the default thickness calculation data for the new input body used in the thickness analysis. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void InitThicknessData
            (
                int changeBody /** changebody */ 
            );
            /** Update the information of the seleted faces in the thickness calculation database for inspecting thickness results. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateSelectedFacesInfo
            (
            );
            /** Create graphic objects for the thickness results. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateThicknessGraphicObjects
            (
                const NXOpen::Point3d & startPoint /** Start point for creating graphic objects */,
                const NXOpen::Vector3d & directionVector /** Direction vector */,
                double length /** Thickness length for creating graphic objects */,
                NXOpen::NXColor * color /** Color for use in creating graphic objects */
            );
            /** Record the transient meshes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void RecordTransientMeshes
            (
            );
            /** Set the flag for keeping the transient meshes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void KeepTransientMeshes
            (
                int keepMeshes /** keepmeshes */ 
            );
            /** Set the flag for saving to Wall Thickness UDO. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveThicknessUDO
            (
                bool saveThicknessUDO /** savethicknessudo */ 
            );
            /** Save the selected wall thickness analysis results display AO 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveSelectedWTAnalysisResultsAO
            (
                NXOpen::TaggedObject * selectedWTAnalysisResultsAO /** Wall thickness analysis results AO */
            );
            /** Get the average, minimum and maximum wall thicknesses from the results of thickness analysis for a solid body or a face 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetWallThicknessResultsData
            (
                NXOpen::TaggedObject * bodyOrFaceTag /** Body or face */,
                double* averageThickness /** Average wall thickness */,
                double* minimumThickness /** Minimum wall thickness */,
                double* maximumThickness /** Maximum wall thickness */
            );
            /** Get the thickness at a point on a face of the solid body from the results of thickness analysis 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetThicknessAtPointOnFace
            (
                const NXOpen::Point3d & pntOnFace /** A point on face */,
                double* thickness /** Thickness at the given point on face */,
                NXOpen::Face ** faceTag /** the face where the point is on */
            );
            /** Get a list of facets where the thicknesses at vertices are within the given range 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetFacetsAndThicknessWithinRange
            (
                double lowerLimit /** Lower limit of thickness range */,
                double upperLimit /** Upper limit of thickness range */,
                std::vector<int> & facetIDs /** A list of facets */,
                std::vector<NXOpen::Face *> & facetFaceTags /** A list of faces the facets are on */,
                std::vector<NXOpen::Point3d> & vertexCoords /** Coordinates of vertices of facets */,
                std::vector<double> & thicknesses /** Thickness at the vertices of facets */
            );
            /** Update the values of the maximum thickness tolerance and maximum spacing given a new value of sample points settings 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateMaximumThicknessToleranceAndMaximumSpacingOnSamplePointsSettingsValueChange
            (
                int samplePointsSettingsValue /** Sample points settings scale, between 0 and 100 */
            );
            /** Method to apply all default parameters asfter initialization 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ApplyAllDefaultParametersAfterInit
            (
            );
            /** Apply default display parameters for results color display after calculate 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ApplyDefaultDisplayParametersAfterCalculate
            (
            );
            /** Execute operations done when the Apply button in dialog is clicked to display fringe color plot for results 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ExecuteApply
            (
            );
            /** Execute cleanup operations before exiting the builder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CleanupDataAndDisplay
            (
            );
            /** Get a list of RGB colors of the legend color bar in ascending order 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLegendColorRGBs
            (
                std::vector<NXOpen::NXColor::Rgb> & colorRGBs /** A list of legend color RGBs */
            );
            /** Get a list of color labels of the legend color bar in ascending order 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLegendColorLabels
            (
                std::vector<NXString> & colorLabels /** A list of legend color Labels */
            );
            /** Get a list of the lower and upper range limits for the legend color bar in ascending order 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLegendLowerAndUpperRangeLimits
            (
                std::vector<double> & lowerRangeLimits /** A list of lower range limits for legend color bar */,
                std::vector<double> & upperRangeLimits /** A list of upper range limits for legend color bar */
            );
            /** Create a PMI at a point on face showing the thickness at that point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePMIAtPointOnFace
            (
                const NXOpen::Point3d & pointOnFace /** A point on a face */
            );

            /// \cond NX_NO_DOC 
            /** Get a list of rays within a thickness range and the corresponding colors 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetRayVectorsAndColorsWithinRange
            (
                double lowerLimit /** Lower limit of thickness range */,
                double upperLimit /** Upper limit of thickness range */,
                std::vector<NXOpen::Point3d> & rayStartPnts /** A list of start points of rays */,
                std::vector<NXOpen::Point3d> & rayEndPnts /** A list of end points of rays */,
                std::vector<NXOpen::NXColor::Rgb> & rayColorRGBs /** A list of color RGBs of rays */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Check if the wall thickness analysis results are available in part file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CheckThicknessAnalysisResultsAvailableInPartFile
            (
                NXOpen::Body * bodyTag /** Solid body to be checked if analysis results are available, NULL_TAG when query if any body with results is available */,
                int* resultsAvailable /** Analysis results available or not */,
                NXOpen::Body ** bodyWithResults /** Body with analysis results */,
                NXOpen::Body ** bodyWithNoResults /** Body with no analysis results only when there is no body with analysis results */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Save wall thickness analysis results to the part file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveThicknessAnalysisResultsToPartFile
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**  Delete wall thickness analysis results of the current solid body from the part file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteThicknessAnalysisResultsOfCurrentBodyFromPartFile
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get thickness calculation parameters from results set for a given body 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void GetThicknessCalculationParametersByBody
            (
                NXOpen::Body * bodyTag /** Solid body for which the thickness calculation parameters are to be retrieved */,
                int* resultsAvailable /** Results available or not */,
                int* elemSizeScale /** Scale for element size */,
                double* elemSize /** Element size */,
                double* chordDistTol /** Chord height distance tolerance */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get thickness calculation parameters and calculate method from results set for a given body 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetThicknessCalculationParametersAndMethodByBody
            (
                NXOpen::Body * bodyTag /** Solid body for which the thickness calculation parameters are to be retrieved */,
                int* resultsAvailable /** Results available or not */,
                int* elemSizeScale /** Scale for element size */,
                double* elemSize /** Element size */,
                double* chordDistTol /** Chord height distance tolerance */,
                int* calculateMethod /** Calculate method */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Check if the results are available and up-to-date for the body 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CheckResultsAvailableAndUpToDate
            (
                NXOpen::Body * bodyTag /** Solid body for which the information is needed */,
                int* resultsAvailable /** Results available or not  */,
                int* resultsUpToDate /** Results up-to-date or not */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Identify a list of input bodies and group them into bodies with results and bodies with no results. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void IdentifyAndGroupBodies
            (
                const std::vector<NXOpen::Body *> & bodyTags /** A list of bodies to be identified and grouped */,
                std::vector<NXOpen::Body *> & bodyResults /** A list of bodies with results */,
                std::vector<NXOpen::Body *> & bodyNoResults /** A list of bodies with no results */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update wall thickness results color display when the selected range limits change 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateColorDisplayOnSelectedRangeLimitsChange
            (
                double lowerRangeLimit /** Lower range limit */,
                double upperRangeLimit /** Upper range limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update wall thickness results full color display when the range limits change 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateFullColorDisplayOnRangeLimitsChange
            (
                double lowerRangeLimit /** Lower range limit */,
                double upperRangeLimit /** Upper range limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update wall thickness results above limit color display when the above limit changes 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateAboveLimitColorDisplayOnAboveLimitChange
            (
                double aboveLimit /** Above limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update wall thickness results below limit color display when the below limit changes 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateBelowLimitColorDisplayOnBelowLimitChange
            (
                double belowLimit /** Below limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create sets for connected facets in range filter selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateConnectedFacetsSets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Free sets for connected facets in range filter selection 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void FreeConnectedFacetsSets
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get or create convergent bodies for set of range areas given the area set ID. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOrCreateRangeAreasSetConvergentBodies
            (
                int areaNodeID /** Area ID in Easy Tree list, 1,2,3.......N. */,
                std::vector<NXOpen::Body *> & convergentBodies /** Convergent bodies associated with the range areas set */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Delete all convergent bodies for all continous connecting areas. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteAllConnectedAreasConvergentBodies
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Draw temporary display of rays for a given range area. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void DrawRangeAreaRaysTemporaryDisplay
            (
                int areaNodeID /** Area node ID: 1,2,3.......N. */
            );

            /// \endcond 
            /**Returns  the flag that indicates whether the Check Wall Thickness command is invoked from the Part Navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool InvokedFromPartNavigator
            (
            );
            /**Sets  the flag that indicates whether the Check Wall Thickness command is invoked from the Part Navigator. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInvokedFromPartNavigator
            (
                bool invokedFromPartNavigator /** invokedfrompartnavigator */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
