#ifndef NXOpen_DIAGRAMMINGLIBRARYAUTHOR_LINETYPEBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMINGLIBRARYAUTHOR_LINETYPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DiagrammingLibraryAuthor_LineTypeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_diagramminglibraryauthor_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace DiagrammingLibraryAuthor
    {
        class LineTypeBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace DiagrammingLibraryAuthor
    {
        class _LineTypeBuilderBuilder;
        class LineTypeBuilderImpl;
        /**  @brief  Represents a LineTypeBuilder.  

          
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGLIBRARYAUTHOREXPORT  LineTypeBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: LineTypeBuilderImpl * m_linetypebuilder_impl;
            private: friend class  _LineTypeBuilderBuilder;
            protected: LineTypeBuilder();
            public: ~LineTypeBuilder();
            /**Returns  the object Id of the line type. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString ObjectId
            (
            );
            /**Returns  the name of the line type. It should be unique. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString LineTypeName
            (
            );
            /**Sets  the name of the line type. It should be unique. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineTypeName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the line type. It should be unique. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetLineTypeName
            (
                const char * name /** name */ 
            );
            /**Returns  the priority of the line type. It should be greater than or equal to 0. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: int LineTypePriority
            (
            );
            /**Sets  the priority of the line type. It should be greater than or equal to 0. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineTypePriority
            (
                int priority /** priority */ 
            );
            /**Returns  the line color. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * LineColor
            (
            );
            /**Sets  the line color. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineColor
            (
                NXOpen::NXColor * colorId /** colorid */ 
            );
            /**Returns  the line width. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectWidth LineWidth
            (
            );
            /**Sets  the line width. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineWidth
            (
                NXOpen::DisplayableObject::ObjectWidth width /** width */ 
            );
            /**Returns  the line font. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject::ObjectFont LineFont
            (
            );
            /**Sets  the line font. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLineFont
            (
                NXOpen::DisplayableObject::ObjectFont font /** font */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
