#ifndef NXOpen_IMPLICIT_EQUATIONOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_IMPLICIT_EQUATIONOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Implicit_EquationOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Fields_ScalarFieldWrapper.hxx>
#include <NXOpen/ModlUtils_SelectObjectDimList.hxx>
#include <NXOpen/Implicit_OperationBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_implicit_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Implicit
    {
        class EquationOperationBuilder;
    }
    class CoordinateSystem;
    class Expression;
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    namespace Implicit
    {
        class OperationBuilder;
    }
    namespace ModlUtils
    {
        class SelectObjectDimList;
    }
    class ScCollector;
    namespace Implicit
    {
        class _EquationOperationBuilderBuilder;
        class EquationOperationBuilderImpl;
        /**
            Represents a Implicit.EquationOperationBuilder.
            It will create an Implicit surfaces derived from equations with three variables (x, y, and z) in the 3D space.
            The definition of an implicit surface is that a coordinate is located on the surface if the equation results in zero.
             <br> To create a new instance of this class, use @link NXOpen::Implicit::ImplicitOperationCollection::CreateEquationOperationBuilder  NXOpen::Implicit::ImplicitOperationCollection::CreateEquationOperationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BlendFactor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        BoundaryConditionOption </term> <description> 
         
        SolidVolume </description> </item> 

        <item><term> 
         
        EdgeLength.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        KFactor </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SizeX.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        SizeY.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        SizeZ.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        Thickness.Value </term> <description> 
         
        1.0 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        ThicknessFactor.Value </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        ThicknessMethod </term> <description> 
         
        Absolute </description> </item> 

        <item><term> 
         
        TypeOfEquation </term> <description> 
         
        Gyroid </description> </item> 

        <item><term> 
         
        UniformCubeFlag </term> <description> 
         
        true </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_IMPLICITEXPORT  EquationOperationBuilder : public NXOpen::Implicit::OperationBuilder
        {
            /** Implicit Operation type */
            public: enum EquationType
            {
                EquationTypeGyroid/** Gyroid  */,
                EquationTypeSchwarz/** Schwarz */,
                EquationTypeDiamond/** Diamond */,
                EquationTypeNeovius/** Neovius */,
                EquationTypeSchoen/** Schoen  */,
                EquationTypeScherk/** Scherk  */,
                EquationTypeLidinoid/** Lidinoid */,
                EquationTypeSplitP/** Split P */
            };

            /** Boundary Condition options*/
            public: enum BoundaryConditionOptionType
            {
                BoundaryConditionOptionTypeSolidVolume/** Solid region */,
                BoundaryConditionOptionTypeVoidVolume/** Void region */,
                BoundaryConditionOptionTypeVoidVolumeAndUnite/** void volume and unite */ 
            };

            /** Thickness methods*/
            public: enum ThicknessMethodType
            {
                ThicknessMethodTypeAbsolute/** Absolute thickness */,
                ThicknessMethodTypeAbsoluteVariable/** Variable Thickness */,
                ThicknessMethodTypeRelative/** relative */ 
            };

            private: EquationOperationBuilderImpl * m_equationoperationbuilder_impl;
            private: friend class  _EquationOperationBuilderBuilder;
            protected: EquationOperationBuilder();
            public: ~EquationOperationBuilder();
            /**Returns  the type of equation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Implicit::EquationOperationBuilder::EquationType TypeOfEquation
            (
            );
            /**Sets  the type of equation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetTypeOfEquation
            (
                NXOpen::Implicit::EquationOperationBuilder::EquationType typeOfEquation /** typeofequation */ 
            );
            /**Returns  the input body.
                    Since the equation itself is defined infinitely a boundary body needs to limit its shape.
                    As boundary body a solid body that is either an implicit body (within feature/TE)
                    or a parametric body from outside the TE can be provided.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BoundaryBody
            (
            );
            /**Returns  the Boundary Condition Option
                    Solid volume fill, void volume fill or void volume fill with unite to outer body
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Implicit::EquationOperationBuilder::BoundaryConditionOptionType BoundaryConditionOption
            (
            );
            /**Sets  the Boundary Condition Option
                    Solid volume fill, void volume fill or void volume fill with unite to outer body
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetBoundaryConditionOption
            (
                NXOpen::Implicit::EquationOperationBuilder::BoundaryConditionOptionType boundaryConditionOption /** boundaryconditionoption */ 
            );
            /**Returns  the blend factor.
                    factor to adjust the blend of intersections between tool and target body. 
                    No Blend(0) - to - large Blends(100)
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int BlendFactor
            (
            );
            /**Sets  the blend factor.
                    factor to adjust the blend of intersections between tool and target body. 
                    No Blend(0) - to - large Blends(100)
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetBlendFactor
            (
                int blendFactor /** blendfactor */ 
            );
            /**Returns  the uniform cube toggle.
                    Since the equation is periodic in 2PI the shape can be defined in a cube of (2PI*2PI*2PI)
                    that will be patterned in X, Y, and Z. A uniform cube with one edge length in all three
                    directions can be defined or specify the length for each axis separately.
                    ture for uniform cube false otherwise.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool UniformCubeFlag
            (
            );
            /**Sets  the uniform cube toggle.
                    Since the equation is periodic in 2PI the shape can be defined in a cube of (2PI*2PI*2PI)
                    that will be patterned in X, Y, and Z. A uniform cube with one edge length in all three
                    directions can be defined or specify the length for each axis separately.
                    ture for uniform cube false otherwise.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetUniformCubeFlag
            (
                bool uniformCubeFlag /** uniformcubeflag */ 
            );
            /**Returns  the edge length.
                    Edge length in X, Y and Z direction if it is a uniform cube.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EdgeLength
            (
            );
            /**Returns  the size x.
                    Edge length in X if it is a non-uniform cube.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeX
            (
            );
            /**Returns  the size y.
                    Edge length in Y if it is a non-uniform cube.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeY
            (
            );
            /**Returns  the size z.
                    Edge length in Z if it is a non-uniform cube.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeZ
            (
            );
            /**Returns  the location and orientation of the seed cell.
                    The orientation can be inferred from objects inside or outside the TE.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * LocationAndOrientation
            (
            );
            /**Sets  the location and orientation of the seed cell.
                    The orientation can be inferred from objects inside or outside the TE.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetLocationAndOrientation
            (
                NXOpen::CoordinateSystem * locationAndOrientation /** locationandorientation */ 
            );
            /**Returns  the k factor.
                    The porosity of the structure can be controlled by a dimensionless "k Factor".
                    The lower the k Factor "thicker" the structure gets. Increasing the k Factor 
                    the structure gets thinner and thinner until it splits into multiple regions 
                    and finally disappears.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double KFactor
            (
            );
            /**Sets  the k factor.
                    The porosity of the structure can be controlled by a dimensionless "k Factor".
                    The lower the k Factor "thicker" the structure gets. Increasing the k Factor 
                    the structure gets thinner and thinner until it splits into multiple regions 
                    and finally disappears.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetKFactor
            (
                double kFactor /** kfactor */ 
            );
            /**Returns  the thickness.
                    The equation creates just a surface. To create a solid body the user needs to specify a thickness.
                    The surface will be thickened with 50% of that value in both directions.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns  the thickness defined using scalar field.
                    The equation creates just a surface. To create a solid body the user needs to specify a thickness.
                    The surface will be thickened with 50% of that value in both directions.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * ThicknessField
            (
            );

            /// \endcond 
            /**Returns  the thickness method
                    Methods of adding thickness to the TPMS structure : Absolute, Absolute variable, Relative
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Implicit::EquationOperationBuilder::ThicknessMethodType ThicknessMethod
            (
            );
            /**Sets  the thickness method
                    Methods of adding thickness to the TPMS structure : Absolute, Absolute variable, Relative
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetThicknessMethod
            (
                NXOpen::Implicit::EquationOperationBuilder::ThicknessMethodType thicknessMethod /** thicknessmethod */ 
            );
            /**Returns  the thickness factor.
                    The factor for the relative thickness method.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThicknessFactor
            (
            );
            /**Returns  the variable thickness list, in order to assign variable thickness to the TPMS. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ModlUtils::SelectObjectDimList * VariableThicknessList
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
