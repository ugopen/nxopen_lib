#ifndef NXOpen_PID_EQUIPMENTBUILDER_HXX_INCLUDED
#define NXOpen_PID_EQUIPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_EquipmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Node.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_ConnectionElementRevision.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_SheetRevision.hxx>
#include <NXOpen/PID_DataType.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class EquipmentBuilder;
    }
    class Builder;
    namespace Diagramming
    {
        class Node;
    }
    class NXObject;
    namespace PID
    {
        class Equipment;
    }
    namespace PID
    {
        class Pipe;
    }
    namespace PID
    {
        class Sheet;
    }
    namespace PID
    {
        class _EquipmentBuilderBuilder;
        class EquipmentBuilderImpl;
        /**  @brief 
            Builder used to model a piece of Equipment.  

         
             <br> To create a new instance of this class, use @link NXOpen::PID::PidManager::CreateEquipmentBuilder  NXOpen::PID::PidManager::CreateEquipmentBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Rotate </term> <description> 
         
        Zero </description> </item> 

        <item><term> 
         
        SymbolSourceType </term> <description> 
         
        ReuseLibrary </description> </item> 

        </list> 

         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  EquipmentBuilder : public NXOpen::Builder
        {
            private: EquipmentBuilderImpl * m_equipmentbuilder_impl;
            private: friend class  _EquipmentBuilderBuilder;
            protected: EquipmentBuilder();
            public: ~EquipmentBuilder();
            /**Returns  the symbol source type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::SymbolSourceOption SymbolSourceType
            (
            );
            /**Sets  the symbol source type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolSourceType
            (
                NXOpen::PID::SymbolSourceOption symbolSourceType /** symbolsourcetype */ 
            );
            /**Returns  the symbol ID of this equipment. It is only applicable when @link NXOpen::PID::EquipmentBuilder::SymbolSourceType NXOpen::PID::EquipmentBuilder::SymbolSourceType@endlink  is @link NXOpen::PID::SymbolSourceOptionReuseLibrary NXOpen::PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString SymbolId
            (
            );
            /**Sets  the symbol ID of this equipment. It is only applicable when @link NXOpen::PID::EquipmentBuilder::SymbolSourceType NXOpen::PID::EquipmentBuilder::SymbolSourceType@endlink  is @link NXOpen::PID::SymbolSourceOptionReuseLibrary NXOpen::PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolId
            (
                const NXString & symbolId /** symbolid */ 
            );
            /**Sets  the symbol ID of this equipment. It is only applicable when @link NXOpen::PID::EquipmentBuilder::SymbolSourceType NXOpen::PID::EquipmentBuilder::SymbolSourceType@endlink  is @link NXOpen::PID::SymbolSourceOptionReuseLibrary NXOpen::PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetSymbolId
            (
                const char * symbolId /** symbolid */ 
            );
            /**Returns  the current node ID of this equipment. It works only in edit mode, it's optional and the first node ID stored in the equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString NodeId
            (
            );
            /**Sets  the current node ID of this equipment. It works only in edit mode, it's optional and the first node ID stored in the equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetNodeId
            (
                const NXString & nodeId /** nodeid */ 
            );
            /**Sets  the current node ID of this equipment. It works only in edit mode, it's optional and the first node ID stored in the equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetNodeId
            (
                const char * nodeId /** nodeid */ 
            );
            /**Returns  the symbol from foundation window. It is only applicable when @link PID::EquipmentBuilder::SymbolSourceType PID::EquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Node * ExistingSymbol
            (
            );
            /**Sets  the symbol from foundation window. It is only applicable when @link PID::EquipmentBuilder::SymbolSourceType PID::EquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetExistingSymbol
            (
                NXOpen::Diagramming::Node * existingSymbol /** existingsymbol */ 
            );
            /**Returns  the owning sheet of this sheet element. Its setting method works only in creation mode. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::Sheet * OwningSheet
            (
            );
            /**Sets  the owning sheet of this sheet element. Its setting method works only in creation mode. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningSheet
            (
                NXOpen::PID::Sheet * owningSheet /** owningsheet */ 
            );
            /** Gets the symbol location.  @return  the symbol location. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetLocation
            (
            );
            /** Sets the symbol location. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLocation
            (
                const NXOpen::Point2d & location /** the symbol location. */
            );
            /**Returns  the option to place a duplicate symbol. It is only applicable when @link NXOpen::PID::EquipmentBuilder::SymbolSourceType NXOpen::PID::EquipmentBuilder::SymbolSourceType@endlink  is @link NXOpen::PID::SymbolSourceOptionExistingSymbol NXOpen::PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool UseExistingID
            (
            );
            /**Sets  the option to place a duplicate symbol. It is only applicable when @link NXOpen::PID::EquipmentBuilder::SymbolSourceType NXOpen::PID::EquipmentBuilder::SymbolSourceType@endlink  is @link NXOpen::PID::SymbolSourceOptionExistingSymbol NXOpen::PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetUseExistingID
            (
                bool useExistingID /** useexistingid */ 
            );
            /**Returns  the option to lock the aspect ratio. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool LockAspectRatio
            (
            );
            /**Sets  the option to lock the aspect ratio. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLockAspectRatio
            (
                bool lockAspectRatio /** lockaspectratio */ 
            );
            /**Returns  the scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the x scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ScaleX
            (
            );
            /**Sets  the x scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScaleX
            (
                double scaleX /** scalex */ 
            );
            /**Returns  the y scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ScaleY
            (
            );
            /**Sets  the y scale value. It is only applicable when @link PID::EquipmentBuilder::LockAspectRatio PID::EquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScaleY
            (
                double scaleY /** scaley */ 
            );
            /**Returns  the symbol rotation angle. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::RotateAngleOption Rotate
            (
            );
            /**Sets  the symbol rotation angle. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetRotate
            (
                NXOpen::PID::RotateAngleOption rotate /** rotate */ 
            );
            /**Returns  the option to flip the symbol horizontally. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool FlipHorizontal
            (
            );
            /**Sets  the option to flip the symbol horizontally. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetFlipHorizontal
            (
                bool flipHorizontal /** fliphorizontal */ 
            );
            /**Returns  the option to flip the symbol vertically. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool FlipVertical
            (
            );
            /**Sets  the option to flip the symbol vertically. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetFlipVertical
            (
                bool flipVertical /** flipvertical */ 
            );
            /**Returns  the tag of this equipment. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString Label
            (
            );
            /** Sets connection location for the inline symbol. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetInlineSymbolLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const NXString & connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Sets connection location for the inline symbol. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetInlineSymbolLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const char * connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Gets connection location for the inline symbol. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void GetInlineSymbolLocation
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );
            /** Gets new connection after inserting an inline symbol. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void GetNewInlineConnection
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ 
            );
            /**Returns  the owner of need attributes group.
             <br>  @deprecated Deprecated in NX1988.0.0.  Use @link NXOpen::PID::EquipmentBuilder::NeedAttributeOwner NXOpen::PID::EquipmentBuilder::NeedAttributeOwner@endlink instead. <br>  

             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1988.0.0.  Use NXOpen::PID::EquipmentBuilder::NeedAttributeOwnerinstead.") NXOpen::NXObject * NeedAttrOwner
            (
            );
            /** Detaches the equipment from all attached connections. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void DetachAllConnections
            (
            );
            /** Get the node object of the equipment builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Node * GetNode
            (
            );
            /** Sets the fulfillment data of the symbol. The input symbol should be a 3D one and in the same category with the entity of the builder
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetFulfillment
            (
                const NXString & symbolID /** symbolid */ 
            );
            /** Sets the fulfillment data of the symbol. The input symbol should be a 3D one and in the same category with the entity of the builder
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetFulfillment
            (
                const char * symbolID /** symbolid */ 
            );
            /**Returns  the Logical Element Revision for the symbol. It is only applicable when @link PID::EquipmentBuilder::SymbolSourceType PID::EquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionLogicalElementRevision PID::SymbolSourceOptionLogicalElementRevision@endlink .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PID::Equipment * ExistingSymbolLogicalElementRevision
            (
            );
            /**Sets  the Logical Element Revision for the symbol. It is only applicable when @link PID::EquipmentBuilder::SymbolSourceType PID::EquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionLogicalElementRevision PID::SymbolSourceOptionLogicalElementRevision@endlink .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetExistingSymbolLogicalElementRevision
            (
                NXOpen::PID::Equipment * existingSymbolLogicalElementRevision /** existingsymbollogicalelementrevision */ 
            );
            /** Sets the attached symbol. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetAttachedSymbol
            (
                const NXString & fromPortId /** the port id of this equipment symbol for the attachment. */,
                NXOpen::NXObject * toSymbol /** @link NXOpen::PID::Equipment NXOpen::PID::Equipment@endlink  or @link NXOpen::PID::NativeEquipment NXOpen::PID::NativeEquipment@endlink */,
                const NXString & toSymbolNodeSidId /** the node id of the toSymbol. */,
                const NXString & toSymbolPortId /** the port id of the toSymbol for the attachment. */
            );
            /** Sets the attached symbol. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetAttachedSymbol
            (
                const char * fromPortId /** the port id of this equipment symbol for the attachment. */,
                NXOpen::NXObject * toSymbol /** @link NXOpen::PID::Equipment NXOpen::PID::Equipment@endlink  or @link NXOpen::PID::NativeEquipment NXOpen::PID::NativeEquipment@endlink */,
                const char * toSymbolNodeSidId /** the node id of the toSymbol. */,
                const char * toSymbolPortId /** the port id of the toSymbol for the attachment. */
            );
            /**Returns  the owner of need attributes group.
             <br>  Created in NX1988.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * NeedAttributeOwner
            (
            );
            /**Returns  the owner of fulfillment attributes group.
             <br>  Created in NX1988.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FulfillmentAttributeOwner
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
