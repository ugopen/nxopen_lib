#ifndef NXOpen_SIM_ISVCONTROLPANELBUILDER_HXX_INCLUDED
#define NXOpen_SIM_ISVCONTROLPANELBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_IsvControlPanelBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_Snapshot.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class IsvControlPanelBuilder;
    }
    class Builder;
    namespace CAM
    {
        class SimulationOptionsBuilder;
    }
    namespace SIM
    {
        class LoadSnapshotBuilder;
    }
    namespace SIM
    {
        class NcProgram;
    }
    namespace SIM
    {
        class SaveSnapshotBuilder;
    }
    namespace SIM
    {
        class SimDebugBuilder;
    }
    namespace SIM
    {
        class Snapshot;
    }
    namespace SIM
    {
        class TimeAnalysis;
    }
    namespace SIM
    {
        class _IsvControlPanelBuilderBuilder;
        class IsvControlPanelBuilderImpl;
        /**
            Represents a @link NXOpen::SIM::IsvControlPanelBuilder NXOpen::SIM::IsvControlPanelBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::SIM::KinematicConfigurator::CreateIsvControlPanelBuilder  NXOpen::SIM::KinematicConfigurator::CreateIsvControlPanelBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  IsvControlPanelBuilder : public NXOpen::Builder
        {
            /** The Visualization type */
            public: enum VisualizationType
            {
                VisualizationTypeMachineCodeSimulateCse/** Machine Code Simulate Cse */,
                VisualizationTypeMachineCodeSimulateMtd/** Machine Code Simulate Mtd */,
                VisualizationTypeToolPathSimulation/** Tool Path Simulate */
            };

            /** The Single Step type that used in @link  NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeMachineCodeSimulateMtd   NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeMachineCodeSimulateMtd @endlink  or
                        @link  NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeToolPathSimulation   NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeToolPathSimulation @endlink  simulation mode.
                        The following @link  NXOpen::SIM::IsvControlPanelBuilder::SingleStepType   NXOpen::SIM::IsvControlPanelBuilder::SingleStepType @endlink  members are removed in NX10.0.2:
                        - StepOut
                        - StepIn
                        - Display
                        Replacement:
                        Use the following @link  NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeType   NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeType @endlink  member instead:
                        - @link  NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeStepOut   NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeStepOut @endlink 
                        - @link  NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeStepIn   NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeStepIn @endlink 
                        - @link  NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeDisplayUpdate   NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeTypeDisplayUpdate @endlink 
                    */
            public: enum SingleStepType
            {
                SingleStepTypeBlock/** Block */,
                SingleStepTypeMove/** Move */,
                SingleStepTypeEvent/** Event */
            };

            /** The Single Step Mode type that used in @link  NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeMachineCodeSimulateCse   NXOpen::SIM::IsvControlPanelBuilder::VisualizationTypeMachineCodeSimulateCse @endlink  simulation mode.*/
            public: enum SingleStepModeType
            {
                SingleStepModeTypeStepIn/** Step In */,
                SingleStepModeTypeStepOver/** Step Over */,
                SingleStepModeTypeStepOut/** Step Out */,
                SingleStepModeTypeDisplayUpdate/** Display */
            };

            /** Type of record reported in the Simulation Details group */
            public: enum DetailType
            {
                DetailTypeInfo/** Info        */,
                DetailTypeController/** Controller  */,
                DetailTypeLimit/** Limit       */,
                DetailTypeCollision/** Collision   */,
                DetailTypeGouge/** Gouge       */,
                DetailTypeSingularity/** Singularity */
            };

            /** Type of VNC Mode  */
            public: enum VncMode
            {
                VncModeError/** ERROR  */ = -1,
                VncModeNotconnected/** NOT CONNECTED */,
                VncModeConnected/** CONNECTED */,
                VncModeBooted/** BOOTED */,
                VncModeConfigured/** CONFIGURED */,
                VncModeInitialized/** INITIALIZED */,
                VncModeProgramsLoaded/** PROGRAMS LOADED */,
                VncModeReset/** RESET */,
                VncModeStop/** STOP */,
                VncModeStart/** START */,
                VncModeRun/** RUN */
            };

            public: /** Prototype for IsInHistoryBufferChanged callbacks 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, bool> IsInHistoryBufferCb;
            public: /** Prototype for VNC Status callbacks 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::SIM::IsvControlPanelBuilder::VncMode> VncStatusCb;
            public: /** Prototype for SimStart callbacks 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<void> SimStartCb;
            public: /** Prototype for SimStop callbacks 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<void> SimStopCb;
            public: /** Prototype for SimEnd callbacks 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<void> SimEndCb;
            private: IsvControlPanelBuilderImpl * m_isvcontrolpanelbuilder_impl;
            private: friend class  _IsvControlPanelBuilderBuilder;
            protected: IsvControlPanelBuilder();
            public: ~IsvControlPanelBuilder();
            /** Gets the visualization
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::VisualizationType GetVisualization
            (
            );
            /** Sets the visualization 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetVisualization
            (
                NXOpen::SIM::IsvControlPanelBuilder::VisualizationType type /** The visualization type*/
            );
            /** Gets the show 3d material removal
             <br>  @deprecated Deprecated in NX12.0.1.  Use @link CAM::SimulationOptionsBuilder::EnableMaterialRemoval CAM::SimulationOptionsBuilder::EnableMaterialRemoval@endlink  and @link CAM::SimulationOptionsBuilder::DisplayIpw CAM::SimulationOptionsBuilder::DisplayIpw@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  Use CAM::SimulationOptionsBuilder::EnableMaterialRemoval and CAM::SimulationOptionsBuilder::DisplayIpw instead.") bool GetShow3dMaterialRemoval
            (
            );
            /** Sets the show 3d material removal  @return  The dialog response, 
                                                     if the user don't define workpiece the autoblock dialog will displayed.
                                                     And if the user cancel it the response is UGII_CANCEL
             <br>  @deprecated Deprecated in NX12.0.1.  Use @link CAM::SimulationOptionsBuilder::SetEnableMaterialRemoval CAM::SimulationOptionsBuilder::SetEnableMaterialRemoval@endlink  and @link CAM::SimulationOptionsBuilder::SetDisplayIpw CAM::SimulationOptionsBuilder::SetDisplayIpw@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NX_DEPRECATED("Deprecated in NX12.0.1.  Use CAM::SimulationOptionsBuilder::SetEnableMaterialRemoval and CAM::SimulationOptionsBuilder::SetDisplayIpw instead.") int SetShow3dMaterialRemoval
            (
                bool state /** The state*/
            );
            /** Gets the show tool path
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetShowToolPath
            (
            );
            /** Sets the show tool path 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetShowToolPath
            (
                bool state /** The state*/
            );
            /** Gets the single step in Tool Path Based Simulation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::SingleStepType GetSingleStep
            (
            );
            /** Sets the single step in Tool Path Based Simulation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSingleStep
            (
                NXOpen::SIM::IsvControlPanelBuilder::SingleStepType type /** The single step type*/
            );
            /** Gets the single step mode in Machine Code Simulation
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeType GetSingleStepMode
            (
            );
            /** Sets the single step mode in Machine Code Simulation
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSingleStepMode
            (
                NXOpen::SIM::IsvControlPanelBuilder::SingleStepModeType type /** The single step mode type*/
            );
            /** Play to Machine Time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayToMachineTime
            (
                const NXString & machineTime /** The machine time in hh:mm:ss.s format*/
            );
            /** Play to Machine Time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void PlayToMachineTime
            (
                const char * machineTime /** The machine time in hh:mm:ss.s format*/
            );
            /** Simulation Control Panel: Play Forward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayForward
            (
            );
            /** Simulation Control Panel: Play Backward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void PlayBackward
            (
            );
            /** Simulation Control Panel: Single Step Forward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SingleStepForward
            (
            );
            /**Returns  the simulation is inside history buffer  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool IsInHistoryBuffer
            (
            );
            /** Registers the IsInHistoryBufferChanged callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int AddIsInHistoryBuffer
            (
                const NXOpen::SIM::IsvControlPanelBuilder::IsInHistoryBufferCb&  handler /** handler */ 
            );
            /** Unregisters the IsInHistoryBufferChanged callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool RemoveIsInHistoryBuffer
            (
                int handlerId /** handlerid */ 
            );
            /**Returns  the mode of VNC 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::IsvControlPanelBuilder::VncMode VncStatus
            (
            );
            /** Registers the VNC Status callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int AddVncStatus
            (
                const NXOpen::SIM::IsvControlPanelBuilder::VncStatusCb&  handler /** handler */ 
            );
            /** Unregisters the VNC Status callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool RemoveVncStatus
            (
                int handlerId /** handlerid */ 
            );
            /** Registers the SimStart callback.  @return  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int AddSimStart
            (
                const NXOpen::SIM::IsvControlPanelBuilder::SimStartCb&  handler /** handler */ 
            );
            /** Unregisters the SimStart callback.  @return  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveSimStart
            (
                int handlerId /** handlerid */ 
            );
            /** Registers the SimStop callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int AddSimStop
            (
                const NXOpen::SIM::IsvControlPanelBuilder::SimStopCb&  handler /** handler */ 
            );
            /** Unregisters the SimStop callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool RemoveSimStop
            (
                int handlerId /** handlerid */ 
            );
            /** Registers the SimEnd callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int AddSimEnd
            (
                const NXOpen::SIM::IsvControlPanelBuilder::SimEndCb&  handler /** handler */ 
            );
            /** Unregisters the SimEnd callback.  @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool RemoveSimEnd
            (
                int handlerId /** handlerid */ 
            );
            /** Simulation Control Panel: Single Step Backward
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SingleStepBackward
            (
            );
            /** Simulation Control Panel: Step to Next Operation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void StepToNextOperation
            (
            );
            /** Simulation Control Panel: Step to Previous Operation
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void StepToPreviousOperation
            (
            );
            /** Simulation Control Panel: Simulation Speed
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetSpeed
            (
                int simSpeed /** The simulation speed*/
            );
            /**Returns  the sim debug builder 
             <br>  @deprecated Deprecated in NX1899.0.0.  Use @link NXOpen::SIM::KinematicConfigurator::CreateSimDebugBuilder() NXOpen::SIM::KinematicConfigurator::CreateSimDebugBuilder()@endlink  instead to create a SimDebugBuilder. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NX_DEPRECATED("Deprecated in NX1899.0.0.  Use NXOpen::SIM::KinematicConfigurator::CreateSimDebugBuilder() instead to create a SimDebugBuilder.") NXOpen::SIM::SimDebugBuilder * SimDebugBuilder
            (
            );
            /**Returns  the simulation options builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::CAM::SimulationOptionsBuilder * SimulationOptionsBuilder
            (
            );
            /** Jump to machine time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToMachineTime
            (
                const NXString & machineTime /** The machine time in hh:mm:ss.s format*/
            );
            /** Jump to machine time
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void JumpToMachineTime
            (
                const char * machineTime /** The machine time in hh:mm:ss.s format*/
            );
            /** Jump to details line
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToDetailsLine
            (
                int line /** The details window line*/
            );
            /** Jump to nc program line in the active channel
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToNcProgramLine
            (
                int line /** The nc program window line*/
            );
            /** Jump to nc program line in the specified channel
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void JumpToNcProgramLine
            (
                const NXString & channelName /** The channel name. If this is NULL or empty the active channel will be used.*/,
                int line /** The nc program line*/
            );
            /** Jump to nc program line in the specified channel
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void JumpToNcProgramLine
            (
                const char * channelName /** The channel name. If this is NULL or empty the active channel will be used.*/,
                int line /** The nc program line*/
            );
            /** Set execution cursor to nc program line in the specified channel
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetCurrentProgramLine
            (
                const NXString & channelName /** The channel name. If this is NULL or empty the active channel will be used.*/,
                int line /** The nc program line*/
            );
            /** Set execution cursor to nc program line in the specified channel
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void SetCurrentProgramLine
            (
                const char * channelName /** The channel name. If this is NULL or empty the active channel will be used.*/,
                int line /** The nc program line*/
            );
            /** Return the Machining Time Analysis Clock for the specified channel. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::TimeAnalysis * GetMachiningTimeAnalysisClock
            (
                const NXString & channelName /** The channel name.*/
            );
            /** Return the Machining Time Analysis Clock for the specified channel. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            NXOpen::SIM::TimeAnalysis * GetMachiningTimeAnalysisClock
            (
                const char * channelName /** The channel name.*/
            );
            /** Apply the simulation options
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ApplySimulationOptions
            (
            );
            /** Simulation Control Panel: (Full) Reset Machine
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ResetMachine
            (
            );
            /** Return the number of Details of the specified type 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int GetDetailCount
            (
                NXOpen::SIM::IsvControlPanelBuilder::DetailType type /** type */ 
            );
            /** Return the Details Information to a specified type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool GetDetail
            (
                NXOpen::SIM::IsvControlPanelBuilder::DetailType type /** type */ ,
                int position /** position */ ,
                double* time /** time */ ,
                NXString* description /** description */ ,
                int* ncLine /** ncline */ ,
                NXString* programName /** programname */ ,
                NXString* channelName /** channelname */ 
            );
            /** Machine Control Panel: NC Reset for all channels
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetNc
            (
            );
            /** Machine Control Panel: NC Reset for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetNc
            (
                std::vector<NXString> & channels /** channels */ 
            );
            /** Machine Control Panel: Reset Part
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetPart
            (
            );
            /** Machine Control Panel: Fast Reset Machine
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetMachine
            (
            );
            /** Machine Control Panel: Clear Alarms for all channels
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlClearAlarm
            (
            );
            /** Machine Control Panel: Clear Alarms for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlClearAlarm
            (
                std::vector<NXString> & channels /** channels */ 
            );
            /** Machine Control Panel: Show HMI
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlShowHmi
            (
            );
            /** Machine Control Panel: Activate Machine Single Block Mode
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlSingleBlockMode
            (
                bool enable /** Enable or disable the single block mode*/
            );
            /** Machine Control Panel: Activate Machine Dry Run
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlDryRun
            (
                bool enable /** Enable or disable the dry run*/
            );
            /** Machine Control Panel: Sets Machine Feed Rate Override
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlFeedRateOverride
            (
                int value /** The feed rate override value*/
            );
            /** Machine Control Panel: Save the Machine Data (SRAM)
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlSaveMachineData
            (
            );
            /** Machine Control Panel: Reset the Machine Data (SRAM) to the library Machine Data (SRAM)
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlResetMachineData
            (
            );
            /** Simulation Control Panel: Stop the simulation
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void Stop
            (
            );
            /** Machine Control Panel: Gets the Machine Feed Rate Override Maximum Value @return  The feed rate override max value
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int MachineControlGetFeedRateOverrideMaximumValue
            (
            );
            /** Gets the Machine Cycle Time @return  The cycle time in ms
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: int MachineControlGetCycleTime
            (
            );
            /** Write Variable e.g. VDI Variable, Machine Data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool MachineControlWriteVariable
            (
                const NXString & channelName /** The channel name, NULL or empty means all channels*/,
                const NXString & variableName /** The variable name*/,
                const NXString & variableValue /** The variable value*/,
                const NXString & variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Write Variable e.g. VDI Variable, Machine Data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            bool MachineControlWriteVariable
            (
                const char * channelName /** The channel name, NULL or empty means all channels*/,
                const char * variableName /** The variable name*/,
                const char * variableValue /** The variable value*/,
                const char * variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Read Variable e.g. VDI Variable, Machine Data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool MachineControlReadVariable
            (
                const NXString & channelName /** The channel name, NULL or empty means all channels*/,
                const NXString & variableName /** The variable name*/,
                NXString* variableValue /** The variable value*/,
                NXString* variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Read Variable e.g. VDI Variable, Machine Data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            bool MachineControlReadVariable
            (
                const char * channelName /** The channel name, NULL or empty means all channels*/,
                const char * variableName /** The variable name*/,
                NXString* variableValue /** The variable value*/,
                NXString* variableType /** The variable type: VDI_SWITCH, VDI_INTEGER, VDI_SINGLESTEP*/
            );
            /** Gets the Channel Names @return  the names of available channel 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: std::vector<NXString> MachineControlGetChannels
            (
            );
            /** Machine Control Panel: NC Stop for all channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStopNc
            (
            );
            /** Machine Control Panel: NC Stop for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStopNc
            (
                std::vector<NXString> & channels /** channels */ 
            );
            /** Machine Control Panel: NC Start for all channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStartNc
            (
            );
            /** Machine Control Panel: NC Start for specific channels
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlStartNc
            (
                std::vector<NXString> & channels /** channels */ 
            );
            /**  @brief 
                        Machine Control Panel: Boot the virtual controller
                        Once the virtual controller has been successfully booted, the state remains as long as the part stays open or the machine setup is replaced.
                        To shut down the controller manually, @link NXOpen::SIM::IsvControlPanelBuilder::MachineControlShutdownVnck() NXOpen::SIM::IsvControlPanelBuilder::MachineControlShutdownVnck()@endlink  can be invoked.
                         

             
                        
                        The new behavior eliminates the wait required to boot the controller. However, it happens that the machine must be restarted. 
                        For this purpose @link NXOpen::SIM::IsvControlPanelBuilder::MachineControlShutdownVnck() NXOpen::SIM::IsvControlPanelBuilder::MachineControlShutdownVnck()@endlink  and @link NXOpen::SIM::IsvControlPanelBuilder::MachineControlBootVnck() NXOpen::SIM::IsvControlPanelBuilder::MachineControlBootVnck()@endlink  can be successively invoked.
                        
                    
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: bool MachineControlBootVnck
            (
            );
            /**  @brief 
                        Machine Control Panel: Shut down the virtual controller
                        Used in conjunction with @link NXOpen::SIM::IsvControlPanelBuilder::MachineControlBootVnck() NXOpen::SIM::IsvControlPanelBuilder::MachineControlBootVnck()@endlink .
                         

                       
                    
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void MachineControlShutdownVnck
            (
            );
            /** Save simulation settings to xml file 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SaveSettingsToFile
            (
                const NXString & filename /** filename */ 
            );
            /** Save simulation settings to xml file 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void SaveSettingsToFile
            (
                const char * filename /** filename */ 
            );
            /** Read simulation settings from xml file 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ReadSettingsFromFile
            (
                const NXString & filename /** filename */ 
            );
            /** Read simulation settings from xml file 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void ReadSettingsFromFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the machine configurator filename with full path
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXString MachineConfiguratorFilename
            (
            );
            /** Get the post processor definition and tcl filename with full path @return  The tcl filename with full path
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXString GetPostprocessorFilename
            (
                NXString* definitionFilename /** The definition filename with full path*/
            );
            /**Returns  the save snapshot builder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::SaveSnapshotBuilder * SimulationSaveSnapshotBuilder
            (
            );
            /**Returns  the load snapshot builder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SIM::LoadSnapshotBuilder * SimulationLoadSnapshotBuilder
            (
            );
            /** Show snapshot 
             <br>  @deprecated Deprecated in NX12.0.2.  Use new version with additional arguments instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NX_DEPRECATED("Deprecated in NX12.0.2.  Use new version with additional arguments instead.") void ShowSnapshot
            (
                bool bRunToSimTime /** bruntosimtime */ ,
                NXOpen::SIM::Snapshot * snapshot /** The snapshot */
            );
            /** Show snapshot 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void ShowSnapshot
            (
                bool bRunToSimTime /** bruntosimtime */ ,
                const NXString & sourceComp /** sourcecomp */ ,
                NXOpen::SIM::Snapshot * snapshot /** The snapshot */
            );
            /** Show snapshot 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void ShowSnapshot
            (
                bool bRunToSimTime /** bruntosimtime */ ,
                const char * sourceComp /** sourcecomp */ ,
                NXOpen::SIM::Snapshot * snapshot /** The snapshot */
            );
            /** Returns a program currently used in the simulation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: NXOpen::SIM::NcProgram * GetCurrentProgram
            (
                const NXString & channelName /** The channel name. */,
                int stackLevel /** The callstack level. During simulation the main program is on callstack level 0. */
            );
            /** Returns a program currently used in the simulation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            NXOpen::SIM::NcProgram * GetCurrentProgram
            (
                const char * channelName /** The channel name. */,
                int stackLevel /** The callstack level. During simulation the main program is on callstack level 0. */
            );
            /** Check the syntax of nc programs. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void CheckProgramSyntax
            (
                const std::vector<NXOpen::SIM::NcProgram *> & programs /** nc programs where the syntax should be checked. */
            );
            /**Returns  the active channel in simulation. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ActiveChannel
            (
            );
            /**Sets  the active channel in simulation. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            public: void SetActiveChannel
            (
                const NXString & channelName /** Name of the channel. */
            );
            /**Sets  the active channel in simulation. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") */
            void SetActiveChannel
            (
                const char * channelName /** Name of the channel. */
            );
            /**Returns  the current machine time. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MachineTime
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
