#ifndef NXOpen_BASEPART_HXX_INCLUDED
#define NXOpen_BASEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     BasePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_DynamicSectionBuilder.hxx>
#include <NXOpen/EffectivityConditionBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartCloseResponses.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/PartReopenReport.hxx>
#include <NXOpen/PartSaveStatus.hxx>
#include <NXOpen/PartTypes.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class BasePart;
    namespace Annotations
    {
        class AnnotationManager;
    }
    class ArcCollection;
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class AssemblyManager;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class ProductOutlineManager;
    }
    class AxisCollection;
    namespace CAE
    {
        class CurveOperationExpressionRecordCollection;
    }
    namespace CAE
    {
        class FunctionCollection;
    }
    namespace CAE
    {
        class LayoutStateCollection;
    }
    namespace CAE
    {
        class LayoutStatePreferences;
    }
    namespace CAE
    {
        class PostScenarioManager;
    }
    namespace CAE
    {
        class ViewLayoutManager;
    }
    namespace CAM
    {
        class CAMFeatureCollection;
    }
    class CollaborativeDesign;
    class ColorManager;
    class CoordinateSystemCollection;
    class CurveCollection;
    class DatumCollection;
    class DirectionCollection;
    namespace Display
    {
        class AnimationCameraCollection;
    }
    namespace Display
    {
        class CameraCollection;
    }
    namespace Display
    {
        class CgfxAttrCollection;
    }
    namespace Display
    {
        class CgfxMattexCollection;
    }
    namespace Display
    {
        class DecalCollection;
    }
    namespace Display
    {
        class DynamicSectionBuilder;
    }
    namespace Display
    {
        class DynamicSectionCollection;
    }
    namespace Display
    {
        class FacetSettingsBuilder;
    }
    namespace Display
    {
        class GridCollection;
    }
    namespace Display
    {
        class ImageCollection;
    }
    namespace Display
    {
        class ImageDataCollection;
    }
    namespace Display
    {
        class PerspectiveOptionsBuilder;
    }
    namespace Display
    {
        class PointCloudCollection;
    }
    namespace Display
    {
        class SelPrefCollection;
    }
    namespace Display
    {
        class TrueShadingCollection;
    }
    namespace Display
    {
        class TrueStudioCollection;
    }
    namespace Display
    {
        class UVMapCollection;
    }
    namespace Drawings
    {
        class ConvertToPMIBuilderManager;
    }
    class EffectivityConditionBuilder;
    class EllipseCollection;
    class ExpressionCollection;
    class ExpressionGroupCollection;
    class ExternalFileReferenceManager;
    namespace Features
    {
        class BaseFeatureCollection;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class SelectionProgramCollection;
    }
    namespace Fields
    {
        class FieldManager;
    }
    class FontCollection;
    namespace Gateway
    {
        class ImageCaptureManager;
    }
    namespace GeometricAnalysis
    {
        class AnalysisManager;
    }
    namespace GeometricAnalysis
    {
        class AnalysisResultCollection;
    }
    class Group;
    class GroupBuilder;
    class HyperbolaCollection;
    namespace Implicit
    {
        class ImplicitOperationCollection;
    }
    class InfiniteLineCollection;
    namespace Layer
    {
        class CategoryCollection;
    }
    namespace Layer
    {
        class LayerManager;
    }
    class LayoutCollection;
    class LightCollection;
    class LineCollection;
    namespace Markup
    {
        class MarkupCollection;
    }
    class MaterialManager;
    class MeasureManager;
    namespace MendixReporting
    {
        class CadInfoManager;
    }
    namespace MendixReporting
    {
        class CheckerData;
    }
    class ModelingViewCollection;
    class NXMatrixCollection;
    class NXObject;
    class OffsetCollection;
    namespace Optimization
    {
        class DesignStudyCollection;
    }
    namespace Optimization
    {
        class OptimizationCollection;
    }
    namespace PDM
    {
        class PdmPart;
    }
    class ParabolaCollection;
    class ParamLibParameterLibraryManager;
    class ParameterTableCollection;
    class PartCloseResponses;
    class PartLoadStatus;
    class PartReopenReport;
    class PartSaveOptions;
    class PartSaveStatus;
    class PlaneCollection;
    class PlotManager;
    class PointCollection;
    class PolylineCollection;
    namespace Preferences
    {
        class PartPreferences;
    }
    class PropertiesManager;
    class ReferenceSet;
    class RuleManager;
    class ScCollectorCollection;
    class ScRuleFactory;
    class ScalarCollection;
    class SectionCollection;
    class SplineCollection;
    class StrokeCollection;
    class UnitCollection;
    namespace UserDefinedObjects
    {
        class UserDefinedObjectManager;
    }
    namespace Validate
    {
        class AnalysisResultCollection;
    }
    namespace Validate
    {
        class PersistentResultCollection;
    }
    namespace Validate
    {
        class RequirementCheckCollection;
    }
    namespace Validate
    {
        class RequirementCollection;
    }
    class ValidationCollection;
    class ViewCollection;
    class ViewSetCollection;
    class WCS;
    class XformCollection;
    class _BasePartBuilder;
    class BasePartImpl;
    /** Base class for an NX part.  <br> Use the @link NXOpen::PartCollection NXOpen::PartCollection@endlink  class to load or create a part. Use @link NXOpen::PartCollection::Work NXOpen::PartCollection::Work@endlink  to obtain the current work part.  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  BasePart : public NXOpen::NXObject
    {
        /** Controls the information written to a bookmark file.
                In batch mode, the options:
                   @link BasePart::BookmarkOptionAllPlusDisplay BasePart::BookmarkOptionAllPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay BasePart::BookmarkOptionComponentGroupsLoadOptionsPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay BasePart::BookmarkOptionComponentGroupsOnlyPlusDisplay@endlink 
                   @link BasePart::BookmarkOptionDisplayOnly BasePart::BookmarkOptionDisplayOnly@endlink 
                are not supported.  They will be treated as if the option specfied were:
                    @link BasePart::BookmarkOptionAll BasePart::BookmarkOptionAll@endlink 
                    @link BasePart::BookmarkOptionComponentGroupsLoadOptions BasePart::BookmarkOptionComponentGroupsLoadOptions@endlink 
                    @link BasePart::BookmarkOptionComponentGroupsOnly BasePart::BookmarkOptionComponentGroupsOnly@endlink 
                    @link BasePart::BookmarkOptionEmpty BasePart::BookmarkOptionEmpty@endlink 
                respectively. */
        public: enum BookmarkOption
        {
            BookmarkOptionAll/** Write component groups, load options and structure. */,
            BookmarkOptionComponentGroupsLoadOptions/** Write component groups and load options. */,
            BookmarkOptionComponentGroupsOnly/** Write component groups only. */,
            BookmarkOptionAllPlusDisplay/** Write component groups, load options, structure and display attributes */,
            BookmarkOptionComponentGroupsLoadOptionsPlusDisplay/** Write component groups, load options and display attributes */,
            BookmarkOptionComponentGroupsOnlyPlusDisplay/** Write component groups and display attributes */,
            BookmarkOptionDisplayOnly/** Write only display attributes */,
            BookmarkOptionEmpty/** Write nothing but header information */
        };

        /** The units of the part file. */
        public: enum Units
        {
            UnitsInches/** inches */ ,
            UnitsMillimeters/** millimeters */ ,
            UnitsMix/** mix */ 
        };

        /** Used to specify whether a part's components should be saved (if modified)
            when the part is saved. */
        public: enum SaveComponents
        {
            SaveComponentsFalse/** false */ ,
            SaveComponentsTrue/** true */ 
        };

        /** Used to specify whether a part should be closed after it is saved. */
        public: enum CloseAfterSave
        {
            CloseAfterSaveFalse/** false */ ,
            CloseAfterSaveTrue/** true */ 
        };

        /** Used to specify whether or not to close a part's components during a close operation. */
        public: enum CloseWholeTree
        {
            CloseWholeTreeFalse/** false */ ,
            CloseWholeTreeTrue/** true */ 
        };

         /** Contains part history event information */
        public:
        struct HistoryEventInformation
        {
            public: /** program name */NXString Program;
            public: /** user id */NXString User;
            public: /** type of machine. eg.  NT Intel */NXString Machine;
            public: /** time of last change */NXString Time;
            public: /** version number */int Version;
            public: HistoryEventInformation() :
                Program(),
                User(),
                Machine(),
                Time(),
                Version()
            {
            }
            /** Constructor for the HistoryEventInformation struct. */ 
            public: HistoryEventInformation(const NXString &programInitial /** program name */, 
                    const NXString &userInitial /** user id */, 
                    const NXString &machineInitial /** type of machine. eg.  NT Intel */, 
                    const NXString &timeInitial /** time of last change */, 
                    int versionInitial /** version number */) :
                Program(programInitial),
                User(userInitial),
                Machine(machineInitial),
                Time(timeInitial),
                Version(versionInitial)
            {
            }
        };

        /** Indicates how part close should handle component parts when they are modified */
        public: enum CloseModified
        {
            CloseModifiedUseResponses/** Use the responses in
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  to determine whether to close a
                        modified part or not */,
            CloseModifiedCloseModified/** Close all modified parts */,
            CloseModifiedDontCloseModified/** Do not close any modified parts */
        };

        /** Represents the collaborative content type corresponding to this part*/
        public: enum CollaborativeContentType
        {
            CollaborativeContentTypeWorkset/** Workset */,
            CollaborativeContentTypeSubset/** Subset */,
            CollaborativeContentTypeShapeDesignElement/** Shape Design Part in a Workset*/,
            CollaborativeContentTypeOverridePart/** Override Part */,
            CollaborativeContentTypeNotAssigned/** Non-collaborative content such as items*/
        };

        /** Specifies the preview mode of the part file. */
        public: enum PartPreview
        {
            PartPreviewNone/** No preview image is stored for the part. */,
            PartPreviewOnSave/** Create a preview image when the part is saved. */,
            PartPreviewOnDemand/** Create a preview image on demand. */
        };

         /** Transient part return data */
        public:
        struct TransientStatus
        {
            public: /** Part is transient */bool Trans;
            public: /** Did part start out in a transient state */bool InitiallyTransient;
            public: /** Part is locked in a transient state */bool Locked;
            public: /** Part has transient children */bool TransientChildren;
            public: TransientStatus() :
                Trans(),
                InitiallyTransient(),
                Locked(),
                TransientChildren()
            {
            }
            /** Constructor for the TransientStatus struct. */ 
            public: TransientStatus(bool transInitial /** Part is transient */, 
                    bool initiallyTransientInitial /** Did part start out in a transient state */, 
                    bool lockedInitial /** Part is locked in a transient state */, 
                    bool transientChildrenInitial /** Part has transient children */) :
                Trans(transInitial),
                InitiallyTransient(initiallyTransientInitial),
                Locked(lockedInitial),
                TransientChildren(transientChildrenInitial)
            {
            }
        };

         /** Incomplete part return data */
        public:
        struct IncompleteStatus
        {
            public: /** Parts structure is incomplete */bool StructIncomplete;
            public: /** Part has components pending */bool PendIncomplete;
            public: /** Part has incomplete children */bool IncompleteChildren;
            public: IncompleteStatus() :
                StructIncomplete(),
                PendIncomplete(),
                IncompleteChildren()
            {
            }
            /** Constructor for the IncompleteStatus struct. */ 
            public: IncompleteStatus(bool structIncompleteInitial /** Parts structure is incomplete */, 
                    bool pendIncompleteInitial /** Part has components pending */, 
                    bool incompleteChildrenInitial /** Part has incomplete children */) :
                StructIncomplete(structIncompleteInitial),
                PendIncomplete(pendIncompleteInitial),
                IncompleteChildren(incompleteChildrenInitial)
            {
            }
        };

        private: BasePartImpl * m_basepart_impl;
        private: friend class  _BasePartBuilder;
        protected: BasePart();
        public: ~BasePart();
        /**Returns  the leaf name of the part. When called in a managed environment, this will give the Item ID and Revision
                (prior to NX8.5 this method only returned the Item ID).
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Leaf
        (
        );
        /**Returns  the full path of the part. When called in a managed environment, this will give the same value as
                @link NXOpen::BasePart::Leaf NXOpen::BasePart::Leaf@endlink . 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString FullPath
        (
        );
        /**Returns  the units of the part file. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart::Units PartUnits
        (
        );
        /** Saves the part whether it is modified or not.  @return  Parts that could not be saved and their associated errors. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartSaveStatus * Save
        (
            NXOpen::BasePart::SaveComponents saveComponentParts /** The part's
                        components are saved if modified if this parameter is set to
                        @link NXOpen::BasePart::SaveComponentsTrue NXOpen::BasePart::SaveComponentsTrue@endlink . */,
            NXOpen::BasePart::CloseAfterSave close /** The part is closed if
                        this parameter is set to @link NXOpen::BasePart::CloseAfterSaveTrue NXOpen::BasePart::CloseAfterSaveTrue@endlink . */
        );
        /** Creates copy of target part.
                Note for using this in managed environment: This is <b>deprecated in NX10</b> for "Save As of master parts" operation.
                This API should only be used in case of Save As Non Master parts and Save As New Item Type Operations.
                In  managed environment, for Save As of master parts, use @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink .
                This API will not support Save As if there are duplicate item ids in database.
             @return  Parts that could could not saved and their associated errors. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartSaveStatus * SaveAs
        (
            const NXString & newFileName /** name of new part file to create */
        );
        /** Creates copy of target part.
                Note for using this in managed environment: This is <b>deprecated in NX10</b> for "Save As of master parts" operation.
                This API should only be used in case of Save As Non Master parts and Save As New Item Type Operations.
                In  managed environment, for Save As of master parts, use @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink .
                This API will not support Save As if there are duplicate item ids in database.
             @return  Parts that could could not saved and their associated errors. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::PartSaveStatus * SaveAs
        (
            const char * newFileName /** name of new part file to create */
        );
        /** Saves a temporary part with the given name. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void AssignPermanentName
        (
            const NXString & newFileName /** name of new part file to create */
        );
        /** Saves a temporary part with the given name. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        void AssignPermanentName
        (
            const char * newFileName /** name of new part file to create */
        );
        /** Reopens a loaded part.  @return  The reloaded part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * Reopen
        (
            NXOpen::BasePart::CloseWholeTree wholeTree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopenReport /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.  @return  The reloaded part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart * ReopenAs
        (
            const NXString & fileName /** name of part file to open */,
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopenReport /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.  @return  The reloaded part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::BasePart * ReopenAs
        (
            const char * fileName /** name of part file to open */,
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopenReport /** Report
                       containing results of reopen command */
        );
        /** Closes an open part. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Close
        (
            NXOpen::BasePart::CloseWholeTree wholeTree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink . If
                        @link NXOpen::BasePart::CloseModifiedUseResponses NXOpen::BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link NXOpen::PartCloseResponses NXOpen::PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /**Returns  the load status of a part. Set to true if part is fully loaded
                and set to false if the part is partially loaded. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsFullyLoaded
        (
        );
        /**Returns  the read-only status of a part. Set to true if part is read-only
                and set to false if the part is modifiable. 
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : None */
        public: bool IsReadOnly
        (
        );
        /**Returns  the modified status of a part. Set to true if the part has modifications. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsModified
        (
        );
        /**Returns  the write-access status of a part independent of the load state. Set to true
                if current user has write access on the part, otherwise set to false. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool HasWriteAccess
        (
        );
        /** Ensures that this part is fully loaded. If the part is already fully loaded
                (@link NXOpen::BasePart::IsFullyLoaded NXOpen::BasePart::IsFullyLoaded@endlink  returns true) then
                this method has no effect.
             @return  If the part could not be loaded, this object contains the error information. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadStatus * LoadFully
        (
        );
        /** Ensures that this part is fully loaded. If the part is already fully loaded
                (@link NXOpen::BasePart::IsFullyLoaded NXOpen::BasePart::IsFullyLoaded@endlink  returns true) then
                this method has no effect.
                Does not load any components regardless of the current load option.
             @return  If the part could not be loaded, this object contains the error information. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadStatus * LoadThisPartFully
        (
        );
        /** Ensures that this part is at least partially loaded.
                This only has an effect on minimally loaded parts, so if the part is already
                at least partially loaded then this method has no effect.
                Does not load any components regardless of the current load option.
             @return  If the part could not be loaded, this object contains the error information. 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadStatus * LoadThisPartPartially
        (
        );
        /** Ensure that feature data is loaded for a part.  @return  If the part could not be loaded, this object contains the error information. 
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadStatus * LoadFeatureDataForSelection
        (
        );
        /** Reverse blank all the objects in the part. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ReverseBlankAll
        (
        );
        /** Get history of part  @return  list of history data for the part. The list is sorted in
                                    descending order on version number. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::BasePart::HistoryEventInformation> GetHistoryInformation
        (
        );
        /**Returns  the preview mode 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart::PartPreview PartPreviewMode
        (
        );
        /**Sets  the preview mode 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPartPreviewMode
        (
            NXOpen::BasePart::PartPreview mode /** mode */ 
        );
        /** Get the preview image
            This will return the graphic preview image of the part (when available).  The call returns
            the image width and height and a single array of integer RGB pixels.  The total number of
            pixels is width * height.  Each 32 bit integer pixel contains 8 bit values for the red,
            green and blue color components and the alpha channel is not used and set to 255.
            The byte order corresponds to the .NET method System.Drawing.Color.FromArgb, so the order is ARGB.
            For Java the byte order and data corresponds to the BufferedImage type TYPE_INT_RGB.
            The pixels at an xy location can be found as (y*width+x) where x is from 0 to width-1,
            and y indexes from 0 to height-1. The RGB pixels can be loaded into an appropriate image
            tool such as the Java BufferedImage class for display.

            Note: this will return the modeling preview image only.
            
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : None */
        public: void GetPreviewImage
        (
            int* width /** image width */,
            int* height /** image height */,
            std::vector<int> & pixels /** Array of pixels  */
        );
        /**Returns  the component assembly. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Assemblies::ComponentAssembly * ComponentAssembly
        (
        );
        /** Remove the transient status from the input part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void RemoveTransience
        (
        );
        /** Reinstate the transient status to the formerly transient input part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ReinstateTransience
        (
        );
        /** Inquire whether the provided part is flagged as being transient  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart::TransientStatus GetTransientStatus
        (
        );
        /** Inquire whether the provided part is flagged as being incomplete  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart::IncompleteStatus GetIncompleteStatus
        (
        );
        /** Make additions necessary to complete the incomplete assembly structure of the input part 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void CompleteStructure
        (
        );
        /**Returns  the field main. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Fields::FieldManager * FieldManager
        (
        );
        /** Saves a bookmark file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveBookmark
        (
            const NXString & fileName /** Name of bookmark file. */,
            NXOpen::BasePart::BookmarkOption option /** See definitions of @link NXOpen::BasePart::BookmarkOption NXOpen::BasePart::BookmarkOption@endlink  */
        );
        /** Saves a bookmark file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void SaveBookmark
        (
            const char * fileName /** Name of bookmark file. */,
            NXOpen::BasePart::BookmarkOption option /** See definitions of @link NXOpen::BasePart::BookmarkOption NXOpen::BasePart::BookmarkOption@endlink  */
        );
        /** Creates a @link NXOpen::Display::DynamicSectionBuilder NXOpen::Display::DynamicSectionBuilder@endlink 
                The base part must be a displayable part, otherwise an
                exception will be thrown.
                 <br> 
                By default, the section builder uses the current work view.
                The current work view must be a modeling view, otherwise an exception
                will be thrown.
                 <br> 
             
         <br>  @deprecated Deprecated in NX6.0.0.  Use @link NXOpen::BasePart::DynamicSections NXOpen::BasePart::DynamicSections@endlink  instead. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use NXOpen::BasePart::DynamicSections instead.") NXOpen::Display::DynamicSectionBuilder * CreateDynamicSectionBuilder
        (
            bool loadFromView /** If true, reads section information from
                                                     working view. Otherwise, default section
                                                     is created. */
        );
        /** Creates a Groups builder  @return  GroupBuilder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::GroupBuilder * CreateGatewayGroupBuilder
        (
            NXOpen::Group * group /** group */ 
        );
        /** Creates a builder for the Perspective Options dialog 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::PerspectiveOptionsBuilder * CreatePerspectiveOptionsBuilder
        (
        );
        /** Creates a builder for the Facet Settings dialog 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::FacetSettingsBuilder * CreateFacetSettingsBuilder
        (
        );
        /**Returns  whether display quality facets are saved in the part file 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool SaveDisplayFacets
        (
        );
        /**Sets  whether display quality facets are saved in the part file 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSaveDisplayFacets
        (
            bool saveDisplayFacets /** savedisplayfacets */ 
        );
        /** Regenerates display specific transient cached facets in the part. This
                does not change display facets that are saved in the part file.
             
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::BasePart::RegenerateDisplayFacets NXOpen::BasePart::RegenerateDisplayFacets@endlink  overload instead. <br>  

         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::BasePart::RegenerateDisplayFacets overload instead.") void RegenerateDisplayFacets
        (
            bool regenerateChildren /** Should the children of this part have their cached display facets regenerated also */
        );
        /** Regenerates display specific cached facets in the part.
                 <br> 
                Display facets that are currently saved in the part can be deleted
                along with the transient display facets. Transient display facets
                are held in memory for reuse. Deleting saved display facets will
                mark the part as modified.
                 <br> 
             
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void RegenerateDisplayFacets
        (
            bool deleteSavedDisplayFacets /** Indicates if saved display facets should be deleted */,
            bool regenerateChildren /** Indicates if the children of this part have their cached display facets regenerated */
        );
        /** Creates a @link NXOpen::ReferenceSet NXOpen::ReferenceSet@endlink  object  @return  New reference set object 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ReferenceSet * CreateReferenceSet
        (
        );
        /** Deletes a @link NXOpen::ReferenceSet NXOpen::ReferenceSet@endlink  object 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteReferenceSet
        (
            NXOpen::ReferenceSet * referenceSetObject /** Reference set object to be deleted*/
        );
        /** Get all the @link NXOpen::ReferenceSet NXOpen::ReferenceSet@endlink  objects in this part.  Does not include the default reference sets Empty and Entire Part. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::ReferenceSet *> GetAllReferenceSets
        (
        );
        /**Returns  the unique identifier for this part used to determine whether parts can be quietly substituted during part open. When set
                if the input value is the empty string a new unqiue uid is allocated for the part otherwise the supplied uid is used. 
         <br>  Created in NX6.0.5.  <br>  
         <br> License requirements : None */
        public: NXString UniqueIdentifier
        (
        );
        /**Sets  the unique identifier for this part used to determine whether parts can be quietly substituted during part open. When set
                if the input value is the empty string a new unqiue uid is allocated for the part otherwise the supplied uid is used. 
         <br>  Created in NX6.0.5.  <br>  
         <br> License requirements : None */
        public: void SetUniqueIdentifier
        (
            const NXString & identifier /** identifier */ 
        );
        /**Sets  the unique identifier for this part used to determine whether parts can be quietly substituted during part open. When set
                if the input value is the empty string a new unqiue uid is allocated for the part otherwise the supplied uid is used. 
         <br>  Created in NX6.0.5.  <br>  
         <br> License requirements : None */
        void SetUniqueIdentifier
        (
            const char * identifier /** identifier */ 
        );
        /** Gets the Unique name on a part for the Make Unique operation 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: NXString GetMakeUniqueName
        (
        );
        /** Sets the unique name on part for the Make Unique operation 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: void SetMakeUniqueName
        (
            const NXString & newUniqueName /** new unique name */ 
        );
        /** Sets the unique name on part for the Make Unique operation 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        void SetMakeUniqueName
        (
            const char * newUniqueName /** new unique name */ 
        );
        /** Creates a @link NXOpen::EffectivityConditionBuilder NXOpen::EffectivityConditionBuilder@endlink  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::EffectivityConditionBuilder * CreateEffectivityConditionBuilder
        (
            NXOpen::CollaborativeDesign * cd /** cd */ ,
            const NXString & effectivityFormula /** effectivityformula */ 
        );
        /** Creates a @link NXOpen::EffectivityConditionBuilder NXOpen::EffectivityConditionBuilder@endlink  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        NXOpen::EffectivityConditionBuilder * CreateEffectivityConditionBuilder
        (
            NXOpen::CollaborativeDesign * cd /** cd */ ,
            const char * effectivityFormula /** effectivityformula */ 
        );
        /** Creates a @link NXOpen::EffectivityConditionBuilder NXOpen::EffectivityConditionBuilder@endlink  with initializing validation basis formula
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::EffectivityConditionBuilder * CreateEffectivityConditionBuilder
        (
            NXOpen::CollaborativeDesign * cd /** cd */ ,
            const NXString & validationBasisFormula /** validationbasisformula */ ,
            const NXString & effectivityFormula /** effectivityformula */ 
        );
        /** Creates a @link NXOpen::EffectivityConditionBuilder NXOpen::EffectivityConditionBuilder@endlink  with initializing validation basis formula
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::EffectivityConditionBuilder * CreateEffectivityConditionBuilder
        (
            NXOpen::CollaborativeDesign * cd /** cd */ ,
            const char * validationBasisFormula /** validationbasisformula */ ,
            const char * effectivityFormula /** effectivityformula */ 
        );
        /** The collaborative content type of this part. It will return @link NXOpen::BasePart::CollaborativeContentTypeNotAssigned NXOpen::BasePart::CollaborativeContentTypeNotAssigned@endlink 
                for the part that does not represent any collaborative content.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::BasePart::CollaborativeContentType GetCollaborativeContentType
        (
        );
        /**
                 @brief 
                Returns true if the part can be displayed and false if not displayed.
                 

         
                
                See also @link NXOpen::PartCollection::SetActiveDisplay NXOpen::PartCollection::SetActiveDisplay@endlink .
                
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool CanBeDisplayPart
        (
        );
        /**Returns  true if the part represents a displayed part.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool Displayed
        (
        );
        /**
                 @brief 
                Undisplays the part, if it is currently a displayed part.
                 

         
                
                This method does nothing if the part is not a displayed part.
                The part file will not be closed.
                See also @link NXOpen::PartCollection::SetActiveDisplay NXOpen::PartCollection::SetActiveDisplay@endlink .
                
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void Undisplay
        (
        );
        /** Outputs the @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  objects within the given part.
                They are output in alphabetic order.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void GetArrangements
        (
            std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Alphabetically sorted arrangements */
        );
        /**Returns  the load state of a part. It returns @link NXOpen::PartLoadStateNotLoaded NXOpen::PartLoadStateNotLoaded@endlink  if the part is not loaded.
              
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::PartLoadState PartLoadState
        (
        );
        /** Determines whether part has any minimally loaded descendent parts.
              
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool HasAnyMinimallyLoadedChildren
        (
        );
        /** Gets the minimally loaded parts from input part.
                It cycle through all the descendents of the input part and returns parts which are minimally loaded.
             
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void GetMinimallyLoadedParts
        (
            std::vector<NXOpen::BasePart *> & minimallyLoadedParts /** minimallyloadedparts */ 
        );
        /** Deletes transient and optionally saved display facets.
             
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void DeleteDisplayFacets
        (
            bool deleteSavedDisplayFacets /** Indicates if saved display facets should be deleted */,
            bool processChildren /** Indicates if the children of this part should be processed */
        );
        /**Returns  the status on whether input part is design review part or not. 
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: bool IsDesignReviewPart
        (
        );


        /** Returns the WCS instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::WCS *WCS();
        /** Returns the ArcCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ArcCollection *Arcs();
        /** Returns the ParabolaCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ParabolaCollection *Parabolas();
        /** Returns the GeometricAnalysisManager for part 
         <br>  Created in NX5.0.0.  <br>  
        */
        public: NXOpen::GeometricAnalysis::AnalysisManager *AnalysisManager();
        /** Returns the measure manager for this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::MeasureManager *MeasureManager();
        /** Returns the LayerManager for this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Layer::LayerManager *Layers();
        /** Returns the XformCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::XformCollection *Xforms();
        /** Returns the OffsetCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::OffsetCollection *Offsets();
        /** Return a collection of Planes 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PlaneCollection *Planes();
        /** Returns the HyperbolaCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::HyperbolaCollection *Hyperbolas();
        /** Returns the CurveCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CurveCollection *Curves();
        /** Returns the PointCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PointCollection *Points();
        /** Returns the EllipseCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::EllipseCollection *Ellipses();
        /** Returns the LineCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LineCollection *Lines();
        /** Returns the InfiniteLineCollection instance belonging to this part 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::InfiniteLineCollection *InfiniteLines();
        /** Returns the SplineCollection instance belonging to this part 
         <br>  Created in NX5.0.0.  <br>  
        */
        public: NXOpen::SplineCollection *Splines();
        /** Returns the PolylineCollection instance belonging to this part 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::PolylineCollection *Polylines();
        /** Returns the NXMatrixCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::NXMatrixCollection *NXMatrices();
        /** Returns the ScalarCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ScalarCollection *Scalars();
        /** Returns the FontCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::FontCollection *Fonts();
        /** Returns the DatumCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::DatumCollection *Datums();
        /** Returns the ViewCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ViewCollection *Views();
        /** Returns the ExpressionGroupCollection instance belonging to this part 
         <br>  Created in NX10.0.0.  <br>  
        */
        public: NXOpen::ExpressionGroupCollection *ExpressionGroups();
        /** Returns the ExpressionCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ExpressionCollection *Expressions();
        /** Returns the ParameterTableCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ParameterTableCollection *ParameterTables();
        /** Returns a collection of Units 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::UnitCollection *UnitCollection();
        /** Returns the DirectionCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::DirectionCollection *Directions();
        /** Returns the ModelingViewCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ModelingViewCollection *ModelingViews();
        /** Returns a collection of layer categories 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Layer::CategoryCollection *LayerCategories();
        /** Returns the rule manager for this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::RuleManager *RuleManager();
        /** Returns the PartPreferences instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::PartPreferences *Preferences();
        /** Returns the AxisCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::AxisCollection *Axes();
        /** Returns the LightCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LightCollection *Lights();
        /** Returns the SectionCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::SectionCollection *Sections();
        /** Returns the ScCollectorCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ScCollectorCollection *ScCollectors();
        /** Returns the ScRuleFactory instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ScRuleFactory *ScRuleFactory();
        /** Returns the CoordinateSystemCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::CoordinateSystemCollection *CoordinateSystems();
        /** Returns the LayoutCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::LayoutCollection *Layouts();
        /** Returns the instance of the PDM.PdmPart class 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PDM::PdmPart *PDMPart();
        /** Returns the Display.CameraCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Display::CameraCollection *Cameras();
        /** Returns the Display.AnimationCameraCollection instance belonging to this part 
         <br>  Created in NX1847.0.0.  <br>  
        */
        public: NXOpen::Display::AnimationCameraCollection *AnimationCameras();
        /** Returns the Display.DynamicSectionCollection instance belonging to this part 
         <br>  Created in NX6.0.0.  <br>  
        */
        public: NXOpen::Display::DynamicSectionCollection *DynamicSections();
        /** Returns the Display.DecalCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Display::DecalCollection *Decals();
        /** Returns the @link NXOpen::UserDefinedObjects::UserDefinedObjectManager NXOpen::UserDefinedObjects::UserDefinedObjectManager@endlink  belonging to this session 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::UserDefinedObjects::UserDefinedObjectManager *UserDefinedObjectManager();
        /** Returns the CAE.FunctionCollection for this part
         <br>  Created in NX5.0.0.  <br>  
        */
        public: NXOpen::CAE::FunctionCollection *Functions();
        /** Returns the CAE.ViewLayoutManager in the session
         <br>  Created in NX12.0.0.  <br>  
        */
        public: NXOpen::CAE::ViewLayoutManager *CaeViewLayoutManager();
        /** Returns the PostScenarioManager instance belonging to this part 
         <br>  Created in NX1980.0.0.  <br>  
        */
        public: NXOpen::CAE::PostScenarioManager *PostScenarioMgr();
        /** Returns the Display.SelPrefCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Display::SelPrefCollection *SelPref();
        /** Returns the PlotManager instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PlotManager *PlotManager();
        /** Returns the PropertiesManager instance belonging to this part 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::PropertiesManager *PropertiesManager();
        /** Returns the FeatureCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Features::BaseFeatureCollection *BaseFeatures();
        /** Returns the FeatureCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Features::FeatureCollection *Features();
        /** Manages the standard NX colors 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ColorManager *Colors();
        /** Returns the optimization instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Optimization::OptimizationCollection *Optimization();
        /** Returns the Material Manager belonging to this Part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::MaterialManager *MaterialManager();
        /** Returns the design study instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Optimization::DesignStudyCollection *DesignStudy();
        /** Returns the PartSaveOptions instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::PartSaveOptions *SaveOptions();
        /** Returns the validation  for this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ValidationCollection *Validations();
        /** Returns the @link NXOpen::Assemblies::ProductOutlineManager NXOpen::Assemblies::ProductOutlineManager@endlink  belonging to this session 
         <br>  Created in NX6.0.0.  <br>  
        */
        public: NXOpen::Assemblies::ProductOutlineManager *Assemblies();
        /** Returns the @link NXOpen::Assemblies::AssemblyManager NXOpen::Assemblies::AssemblyManager@endlink  belonging to this session 
         <br>  Created in NX6.0.0.  <br>  
        */
        public: NXOpen::Assemblies::AssemblyManager *AssemblyManager();
        /** Returns the Display.TrueShadingCollection instance belonging to this part 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Display::TrueShadingCollection *SHEDObjs();
        /** Returns the Display.TrueStudioCollection instance belonging to this part 
         <br>  Created in NX8.0.0.  <br>  
        */
        public: NXOpen::Display::TrueStudioCollection *TrueStudioObjs();
        /** Returns the Display.GridCollection instance belonging to this part 
         <br>  Created in NX6.0.0.  <br>  
        */
        public: NXOpen::Display::GridCollection *Grids();
        /** Returns the Gateway.ImageCaptureManager instance belonging to this part 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::Gateway::ImageCaptureManager *ImageCaptureManager();
        /** Returns the CAMFeatureCollection instance belonging to this part 
         <br>  Created in NX7.5.0.  <br>  
        */
        public: NXOpen::CAM::CAMFeatureCollection *CAMFeatures();
        /** Returns the RequirementCheckCollection instance belonging to this part 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::Validate::RequirementCheckCollection *RequirementChecks();
        /** Returns the RequirementCollection instance belonging to this part 
         <br>  Created in NX8.5.0.  <br>  
        */
        public: NXOpen::Validate::RequirementCollection *Requirements();
        /** Returns the Display.ImageCollection instance belonging to this part 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::Display::ImageCollection *Images();
        /** Returns the Display.ImageDataCollection instance belonging to this part 
         <br>  Created in NX9.0.0.  <br>  
        */
        public: NXOpen::Display::ImageDataCollection *ImagesData();
        /** Returns the Drawings.BuilderManager belonging to this part 
         <br>  Created in NX11.0.0.  <br>  
        */
        public: NXOpen::Drawings::ConvertToPMIBuilderManager *ConvertToPMIBuilderManager();
        /** Returns the Display.PointCloudCollection instance belonging to this part 
         <br>  Created in NX11.0.0.  <br>  
        */
        public: NXOpen::Display::PointCloudCollection *PointClouds();
        /** Returns the PMI Annotation Manager for part 
         <br>  Created in NX12.0.0.  <br>  
        */
        public: NXOpen::Annotations::AnnotationManager *Annotations();
        /** Returns the Parameter Library Manager belonging to this Part 
         <br>  Created in NX1847.0.0.  <br>  
        */
        public: NXOpen::ParamLibParameterLibraryManager *ParameterLibraryManager();
        /** Returns the @link NXOpen::ExternalFileReferenceManager NXOpen::ExternalFileReferenceManager@endlink  belonging to this part 
         <br>  Created in NX1847.0.0.  <br>  
        */
        public: NXOpen::ExternalFileReferenceManager *ExternalFileReferenceManager();
        /** Returns the AnalysisResultCollection instance belonging to this part 
         <br>  Created in NX1872.0.0.  <br>  
        */
        public: NXOpen::Validate::AnalysisResultCollection *AnalysisResults();
        /** Returns the PersistentResultCollection instance belonging to this part 
         <br>  Created in NX1872.0.0.  <br>  
        */
        public: NXOpen::Validate::PersistentResultCollection *PersistentResults();

        /// \cond NX_NO_DOC 
        /** Returns the @link NXOpen::Markup::MarkupCollection NXOpen::Markup::MarkupCollection@endlink  instance belonging to this part 
         <br>  Created in NX1899.0.0.  <br>  
        */
        public: NXOpen::Markup::MarkupCollection *Markups();

        /// \endcond 
        /** Returns the ViewSetCollection instance belonging to this part 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public: NXOpen::ViewSetCollection *ViewSets();
        /** Returns the ImplicitOperationCollection instance belonging to this part 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public: NXOpen::Implicit::ImplicitOperationCollection *ImplictOperations();
        /** Returns the StrokeCollection instance belonging to this part 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public: NXOpen::StrokeCollection *Strokes();

        /// \cond NX_NO_DOC 
        /** Returns the @link NXOpen::MendixReporting::CheckerData NXOpen::MendixReporting::CheckerData@endlink  belonging to this part 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public: NXOpen::MendixReporting::CheckerData *CheckerData();

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Returns the @link NXOpen::MendixReporting::CadInfoManager NXOpen::MendixReporting::CadInfoManager@endlink  instance belonging to this part 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public: NXOpen::MendixReporting::CadInfoManager *CadInfoManager();

        /// \endcond 
        /** Returns the Display.UVMapCollection instance belonging to this part 
         <br>  Created in NX1980.0.0.  <br>  
        */
        public: NXOpen::Display::UVMapCollection *UVMaps();
        /** Returns the GeometricAnalysis AnalysisResultCollection instance belonging to this part 
         <br>  Created in NX1953.0.0.  <br>  
        */
        public: NXOpen::GeometricAnalysis::AnalysisResultCollection *GeometricAnalysisAnalysisResultCollection();
        /** Returns the Features SelectionProgramCollection instance belonging to this part 
         <br>  Created in NX1980.0.0.  <br>  
        */
        public: NXOpen::Features::SelectionProgramCollection *SelectionProgramCollections();
        /** Contains a @link NXOpen::CAE::LayoutStateCollection NXOpen::CAE::LayoutStateCollection@endlink . 
         <br>  Created in NX2007.0.0.  <br>  
        */
        public: NXOpen::CAE::LayoutStateCollection *LayoutStates();
        /** Contains a @link NXOpen::CAE::LayoutStatePreferences NXOpen::CAE::LayoutStatePreferences@endlink . 
         <br>  Created in NX2007.0.0.  <br>  
        */
        public: NXOpen::CAE::LayoutStatePreferences *LayoutStatePreferences();
        /** Contains a @link NXOpen::CAE::CurveOperationExpressionRecordCollection NXOpen::CAE::CurveOperationExpressionRecordCollection@endlink  
         <br>  Created in NX2007.0.0.  <br>  
        */
        public: NXOpen::CAE::CurveOperationExpressionRecordCollection *CurveOperationExpRecords();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
