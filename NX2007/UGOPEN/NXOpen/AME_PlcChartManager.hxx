#ifndef NXOpen_AME_PLCCHARTMANAGER_HXX_INCLUDED
#define NXOpen_AME_PLCCHARTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcChartManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_PlcTypes.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Diagramming_Node.hxx>
#include <NXOpen/Diagramming_Port.hxx>
#include <NXOpen/Diagramming_Sheet.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcChartManager;
    }
    class Session;
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace Diagramming
    {
        class Connection;
    }
    namespace Diagramming
    {
        class Node;
    }
    namespace Diagramming
    {
        class Port;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace AME
    {
        class PlcChartManagerImpl;
        /** Represents an object that manages sheet elements.  <br> This object does not need a creator.  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcChartManager
        {
            private: PlcChartManagerImpl * m_plcchartmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PlcChartManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static PlcChartManager* thePlcChartManager;
            /** Returns the PlcChartManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static PlcChartManager* GetPlcChartManager(NXOpen::Session *owner);
            public: ~PlcChartManager();
            /** Create Plc Logic Block Connection
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreatePlcLogicBlockConnection
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::Diagramming::Port * targetPort /** targetport */ ,
                NXOpen::Diagramming::Connection * connection /** connection */ ,
                int connectionEndType /** connectionendtype */ 
            );
            /** Create Plc Logic Block Operand
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreatePlcLogicBlockOperand
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                NXOpen::AME::PlcLogicBlockNodeType operandType /** operandtype */ 
            );
            /** Add Pin to Plc Logic Block Operator
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddPinToPlcLogicBlockOperator
            (
                NXOpen::Diagramming::Node * selectedNode /** selectednode */ 
            );
            /** Negate Pin of Plc Logic Block Operator or Operand
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void NegatePlcLogicBlockPin
            (
                NXOpen::Diagramming::Port * selectedPort /** selectedport */ 
            );
            /** Delete Input Pin of Plc Logic Block Operator
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeletePlcLogicBlockPin
            (
                NXOpen::Diagramming::Port * selectedPort /** selectedport */ 
            );
            /** Delete multiple Input Pins of Plc Logic Block Operator
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeletePlcLogicBlockPins
            (
                const std::vector<NXOpen::Diagramming::Port *> & selectedPorts /** selectedports */ 
            );
            /** Get diagram sheet for chart code block
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER"), ad_tia_addon ("AUTOMATION DESIGNER TIA ADDON") */
            public: NXOpen::Diagramming::Sheet * GetDiagramSheetOfChartBlock
            (
                NXOpen::AME::AMEExtendedObject * selectedNode /** selectednode */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
