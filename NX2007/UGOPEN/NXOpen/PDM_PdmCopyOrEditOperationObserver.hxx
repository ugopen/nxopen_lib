#ifndef NXOpen_PDM_PDMCOPYOREDITOPERATIONOBSERVER_HXX_INCLUDED
#define NXOpen_PDM_PDMCOPYOREDITOPERATIONOBSERVER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PdmCopyOrEditOperationObserver.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PdmCopyOrEditOperationObserver;
    }
    namespace PDM
    {
        class PdmSession;
    }
    namespace PDM
    {
        class PdmCopyOrEditOperationCallbackData;
    }
    namespace PDM
    {
        class PdmCopyOrEditOperationObserverImpl;
        /**
            * This class is responsible for invoking registered callbacks at different stages in clone operation.
            *
            * NOTE: Use callback data @link NXOpen::PDM::PdmCopyOrEditOperationCallbackData NXOpen::PDM::PdmCopyOrEditOperationCallbackData@endlink , which is
            * passed as input to these callback functions, to get the logical objects participating in the current
            * clone operation. It is recommended not to hold onto these logical objects since there lifecycle is
            * controlled by the key attributes viz. Item type, Relation type; which could be updated during this
            * operation, resulting in redefining the logical object.
            * 
             <br> To obtain an instance of this class, refer to @link NXOpen::PDM::PdmSession  NXOpen::PDM::PdmSession @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PdmCopyOrEditOperationObserver : public NXOpen::TaggedObjectCollection
        {
            public: /** User defined Initialize callback that is called during the initialization of clone builder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> InitializeCallback;
            public: /** User defined PreAutoAssign callback that is called before auto-assigning attributes
                    * NOTE: You may use this callback to override the Item Type or Relation type for the part being cloned.
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> PreAutoassignCallback;
            public: /** User defined PreCommit callback that is called before commit of clone operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> PreCommitCallback;
            public: /** User defined PostCommit callback that is called after commit of clone operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> PostCommitCallback;
            public: /** User defined Terminate callback that is called during the destruction of clone builder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> TerminateCallback;
            public: /** User defined PreValidate callback that is called at start of validate objects of clone operation 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<void, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *> PreValidateCallback;
            private: PdmCopyOrEditOperationObserverImpl * m_pdmcopyoreditoperationobserver_impl;
            private: NXOpen::PDM::PdmSession* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PdmCopyOrEditOperationObserver(NXOpen::PDM::PdmSession *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PdmCopyOrEditOperationObserver();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::PDM::PdmCopyOrEditOperationObserver::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::PDM::PdmCopyOrEditOperationCallbackData *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::PDM::PdmCopyOrEditOperationObserver *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_PDMEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_PDMEXPORT  void next();
                NXOpen::PDM::PdmCopyOrEditOperationObserver *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Registers a user defined Initialize callback that is called during the initialization of clone builder  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddInitializeCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::InitializeCallback&  initializeCb /** method to register */
            );
            /** Unregisters the user defined Initialize callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveInitializeCallback
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined PreAutoAssign callback that is called before auto-assigning attributes  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddPreAutoassignCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::PreAutoassignCallback&  preAutoassignCb /** method to register */
            );
            /** Unregisters the user defined PreAutoAssign callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePreAutoassignCallback
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined PreCommit callback that is called before commit of clone operation  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddPreCommitCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::PreCommitCallback&  preCommitCb /** method to register */
            );
            /** Unregisters the user defined PreCommit callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePreCommitCallback
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined PostCommit callback that is called after commit of clone operation  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddPostCommitCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::PostCommitCallback&  postCommitCb /** method to register */
            );
            /** Unregisters the user defined PostCommit callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePostCommitCallback
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined Terminate callback that is called during the destruction of clone builder  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddTerminateCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::TerminateCallback&  terminateCb /** method to register */
            );
            /** Unregisters the user defined Terminate callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveTerminateCallback
            (
                int id /** identifier for method to unregister */
            );
            /** Registers a user defined PreValidate callback that is called at start of validate objects of clone operation  @return  identifier of registered method (used to unregister the method) 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: int AddPreValidateCallback
            (
                const NXOpen::PDM::PdmCopyOrEditOperationObserver::PreValidateCallback&  preValidateCb /** method to register */
            );
            /** Unregisters the user defined PreValidate callback 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void RemovePreValidateCallback
            (
                int id /** identifier for method to unregister */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
