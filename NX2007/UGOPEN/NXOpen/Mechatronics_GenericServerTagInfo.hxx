#ifndef NXOpen_MECHATRONICS_GENERICSERVERTAGINFO_HXX_INCLUDED
#define NXOpen_MECHATRONICS_GENERICSERVERTAGINFO_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_GenericServerTagInfo.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_GenericSignal.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class GenericServerTagInfo;
    }
    class NXObject;
    namespace Mechatronics
    {
    }
    namespace Mechatronics
    {
        class GenericServerTagInfoImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::GenericServerTagInfo NXOpen::Mechatronics::GenericServerTagInfo@endlink  .  

          
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  GenericServerTagInfo : public NXOpen::TransientObject
        {
            private: GenericServerTagInfoImpl * m_genericservertaginfo_impl;
            /// \cond NX_NO_DOC 
            public: explicit GenericServerTagInfo(void *ptr);
            /// \endcond 
            /**  @brief  Dispose to free the memory.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~GenericServerTagInfo();
            /**Returns   @brief  the tag name.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::NXObject * TagId
            (
            );
            /**Sets   @brief  the tag name.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetTagId
            (
                NXOpen::NXObject * tgSignal /** tgsignal */ 
            );
            /**Returns   @brief  the item id.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: bool Checked
            (
            );
            /**Sets   @brief  the item id.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetChecked
            (
                bool bChecked /** bchecked */ 
            );
            /**Returns   @brief  the tag IO type.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXString Address
            (
            );
            /**Sets   @brief  the tag IO type.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetAddress
            (
                const NXString & strAddress /** straddress */ 
            );
            /**Sets   @brief  the tag IO type.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            void SetAddress
            (
                const char * strAddress /** straddress */ 
            );
            /**Returns   @brief  the data type.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: NXOpen::Mechatronics::GenericSignal::ExternalDataTypes ExtDataType
            (
            );
            /**Sets   @brief  the data type.  

              
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") OR nx_mcd_player ("Mechatronics Concept Designer Player") */
            public: void SetExtDataType
            (
                NXOpen::Mechatronics::GenericSignal::ExternalDataTypes dataType /** datatype */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
