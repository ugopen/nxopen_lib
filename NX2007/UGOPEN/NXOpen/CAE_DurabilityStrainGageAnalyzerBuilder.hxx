#ifndef NXOpen_CAE_DURABILITYSTRAINGAGEANALYZERBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DURABILITYSTRAINGAGEANALYZERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurabilityStrainGageAnalyzerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurabilityStrainGageAnalyzerBuilder;
    }
    class Builder;
    class Expression;
    class PhysicalMaterial;
    namespace CAE
    {
        class _DurabilityStrainGageAnalyzerBuilderBuilder;
        class DurabilityStrainGageAnalyzerBuilderImpl;
        /** Represents the builder for analyzing strain gage data.  <br> To create a new instance of this class, use @link NXOpen::CAE::DurabilityManager::CreateStrainGageAnalyzerBuilder  NXOpen::CAE::DurabilityManager::CreateStrainGageAnalyzerBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurabilityStrainGageAnalyzerBuilder : public NXOpen::Builder
        {
            /** the gage source enum.*/
            public: enum GageSourceEnum
            {
                GageSourceEnumResponse/** Response */,
                GageSourceEnumAfu/** Afu */
            };

            /** the gage type enum.*/
            public: enum GageTypeEnum
            {
                GageTypeEnumRectangular/** Rectangular */,
                GageTypeEnumDelta/** Delta */,
                GageTypeEnumTee/** Tee */
            };

            /** the gage construction enum.*/
            public: enum GageConstructionEnum
            {
                GageConstructionEnumStacked/** Stacked */,
                GageConstructionEnumPlanar/** Planar */,
                GageConstructionEnumUser/** User */
            };

            /** the axis direction search enum.*/
            public: enum AxisDirectionSearchMethodEnum
            {
                AxisDirectionSearchMethodEnumCriticalPlane/** Critical Plane */,
                AxisDirectionSearchMethodEnumPrincipalAxis/** Principal Axis */
            };

            /** the critical plane option enum.*/
            public: enum CriticalPlaneOptionEnum
            {
                CriticalPlaneOptionEnumMaximumShear/** Maximum Shear */,
                CriticalPlaneOptionEnumMaximumPrincipal/** Maximum Principal */
            };

            private: DurabilityStrainGageAnalyzerBuilderImpl * m_durabilitystraingageanalyzerbuilder_impl;
            private: friend class  _DurabilityStrainGageAnalyzerBuilderBuilder;
            protected: DurabilityStrainGageAnalyzerBuilder();
            public: ~DurabilityStrainGageAnalyzerBuilder();
            /**Returns  the gage source. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageSourceEnum GageSource
            (
            );
            /**Sets  the gage source. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetGageSource
            (
                NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageSourceEnum gageSource /** gagesource */ 
            );
            /**Returns  the gage type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageTypeEnum GageType
            (
            );
            /**Sets  the gage type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetGageType
            (
                NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageTypeEnum gageType /** gagetype */ 
            );
            /** Use straingage data. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void UseStrainGageData
            (
                const NXString & prefixName /** prefixname */ ,
                const NXString & name /** name */ ,
                const NXString & afuName /** afuname */ ,
                int numRecords /** numrecords */ ,
                int index1 /** index1 */ ,
                int index2 /** index2 */ ,
                int index3 /** index3 */ 
            );
            /** Use straingage data. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            void UseStrainGageData
            (
                const char * prefixName /** prefixname */ ,
                const char * name /** name */ ,
                const char * afuName /** afuname */ ,
                int numRecords /** numrecords */ ,
                int index1 /** index1 */ ,
                int index2 /** index2 */ ,
                int index3 /** index3 */ 
            );
            /**Returns  the gage construction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageConstructionEnum GageConstruction
            (
            );
            /**Sets  the gage construction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetGageConstruction
            (
                NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::GageConstructionEnum gageConstruction /** gageconstruction */ 
            );
            /**Returns  the kt1. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double Kt1
            (
            );
            /**Sets  the kt1. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetKt1
            (
                double kt1 /** kt1 */ 
            );
            /**Returns  the kt2. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double Kt2
            (
            );
            /**Sets  the kt2. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetKt2
            (
                double kt2 /** kt2 */ 
            );
            /**Returns  the kt3. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double Kt3
            (
            );
            /**Sets  the kt3. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetKt3
            (
                double kt3 /** kt3 */ 
            );
            /**Returns  the gagePoissonRatio. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: double GagePoissonRatio
            (
            );
            /**Sets  the gagePoissonRatio. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetGagePoissonRatio
            (
                double gagePoissonRatio /** gagepoissonratio */ 
            );
            /**Returns  the axis direction search method. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::AxisDirectionSearchMethodEnum AxisDirectionSearchMethod
            (
            );
            /**Sets  the axis direction search method. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAxisDirectionSearchMethod
            (
                NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::AxisDirectionSearchMethodEnum axisDirectionSearchMethod /** axisdirectionsearchmethod */ 
            );
            /**Returns  the critical plane option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::CriticalPlaneOptionEnum CriticalPlaneOption
            (
            );
            /**Sets  the critical plane option. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetCriticalPlaneOption
            (
                NXOpen::CAE::DurabilityStrainGageAnalyzerBuilder::CriticalPlaneOptionEnum criticalPlaneOption /** criticalplaneoption */ 
            );
            /**Returns  the search resolution. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::Expression * SearchResolution
            (
            );
            /**Returns  the biaxialityRatioHistory. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool BiaxialityRatioHistory
            (
            );
            /**Sets  the biaxialityRatioHistory. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetBiaxialityRatioHistory
            (
                bool biaxialityRatioHistory /** biaxialityratiohistory */ 
            );
            /**Returns  the effective biaxiality ratio. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool UseEffectiveBiaxialityRatio
            (
            );
            /**Sets  the effective biaxiality ratio. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetUseEffectiveBiaxialityRatio
            (
                bool useEffectiveBiaxialityRatio /** useeffectivebiaxialityratio */ 
            );
            /**Returns  the maximumPrincipalStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MaximumPrincipalStrain
            (
            );
            /**Sets  the maximumPrincipalStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaximumPrincipalStrain
            (
                bool maximumPrincipalStrain /** maximumprincipalstrain */ 
            );
            /**Returns  the absoluteMaximumPrincipalStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool AbsoluteMaximumPrincipalStrain
            (
            );
            /**Sets  the absoluteMaximumPrincipalStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAbsoluteMaximumPrincipalStrain
            (
                bool absoluteMaximumPrincipalStrain /** absolutemaximumprincipalstrain */ 
            );
            /**Returns  the maximumShearStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MaximumShearStrain
            (
            );
            /**Sets  the maximumShearStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaximumShearStrain
            (
                bool maximumShearStrain /** maximumshearstrain */ 
            );
            /**Returns  the absoluteMaximumShearStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool AbsoluteMaximumShearStrain
            (
            );
            /**Sets  the absoluteMaximumShearStrain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAbsoluteMaximumShearStrain
            (
                bool absoluteMaximumShearStrain /** absolutemaximumshearstrain */ 
            );
            /**Returns  the effective strain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool EffectiveStrain
            (
            );
            /**Sets  the effective strain. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEffectiveStrain
            (
                bool effectiveStrain /** effectivestrain */ 
            );
            /**Returns  the maxPrinStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MaximumPrincipalStress
            (
            );
            /**Sets  the maxPrinStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaximumPrincipalStress
            (
                bool maximumPrincipalStress /** maximumprincipalstress */ 
            );
            /**Returns  the absoluteMaximumPrincipalStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool AbsoluteMaximumPrincipalStress
            (
            );
            /**Sets  the absoluteMaximumPrincipalStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAbsoluteMaximumPrincipalStress
            (
                bool absoluteMaximumPrincipalStress /** absolutemaximumprincipalstress */ 
            );
            /**Returns  the maximumShearStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MaximumShearStress
            (
            );
            /**Sets  the maximumShearStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaximumShearStress
            (
                bool maximumShearStress /** maximumshearstress */ 
            );
            /**Returns  the absoluteMaximumShearStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool AbsoluteMaximumShearStress
            (
            );
            /**Sets  the absoluteMaximumShearStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAbsoluteMaximumShearStress
            (
                bool absoluteMaximumShearStress /** absolutemaximumshearstress */ 
            );
            /**Returns  the signedVonMisesStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool SignedVonMisesStress
            (
            );
            /**Sets  the signedVonMisesStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetSignedVonMisesStress
            (
                bool signedVonMisesStress /** signedvonmisesstress */ 
            );
            /**Returns  the vonMisesStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool VonMisesStress
            (
            );
            /**Sets  the vonMisesStress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetVonMisesStress
            (
                bool vonMisesStress /** vonmisesstress */ 
            );
            /**Returns  the effective stress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool EffectiveStress
            (
            );
            /**Sets  the effective stress. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetEffectiveStress
            (
                bool effectiveStress /** effectivestress */ 
            );
            /**Returns  the materialTag. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXOpen::PhysicalMaterial * MaterialTag
            (
            );
            /**Sets  the materialTag. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaterialTag
            (
                NXOpen::PhysicalMaterial * materialTag /** materialtag */ 
            );
            /**Returns  the absoluteMaximumPrincipalAngle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool AbsoluteMaximumPrincipalAngle
            (
            );
            /**Sets  the absoluteMaximumPrincipalAngle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetAbsoluteMaximumPrincipalAngle
            (
                bool absoluteMaximumPrincipalAngle /** absolutemaximumprincipalangle */ 
            );
            /**Returns  the maximumPrincipalAngle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: bool MaximumPrincipalAngle
            (
            );
            /**Sets  the maximumPrincipalAngle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetMaximumPrincipalAngle
            (
                bool maximumPrincipalAngle /** maximumprincipalangle */ 
            );
            /**Returns  the targetFileName. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: NXString TargetFileName
            (
            );
            /**Sets  the targetFileName. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            public: void SetTargetFileName
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the targetFileName. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_adv_durability ("NX Advanced Durability") */
            void SetTargetFileName
            (
                const char * filename /** filename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
