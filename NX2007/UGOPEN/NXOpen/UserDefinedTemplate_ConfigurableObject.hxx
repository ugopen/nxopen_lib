#ifndef NXOpen_USERDEFINEDTEMPLATE_CONFIGURABLEOBJECT_HXX_INCLUDED
#define NXOpen_USERDEFINEDTEMPLATE_CONFIGURABLEOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UserDefinedTemplate_ConfigurableObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_userdefinedtemplate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace UserDefinedTemplate
    {
        class ConfigurableObject;
    }
    class NXObject;
    namespace UserDefinedTemplate
    {
        class _ConfigurableObjectBuilder;
        class ConfigurableObjectImpl;
        /** Represents a @link NXOpen::UserDefinedTemplate::ConfigurableObject NXOpen::UserDefinedTemplate::ConfigurableObject@endlink   <br> This is the configurable object class.  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_USERDEFINEDTEMPLATEEXPORT  ConfigurableObject : public NXOpen::NXObject
        {
            /** Indicates the type of property for a configuration node */
            public: enum PropertyId
            {
                PropertyIdTitle/** title */ ,
                PropertyIdCue/** cue */ ,
                PropertyIdHelpcontext/** helpcontext */ ,
                PropertyIdTemplateName/** template name */ ,
                PropertyIdTemplateLocation/** template location */ ,
                PropertyIdAllowExplode/** allow explode */ ,
                PropertyIdAllowBoolean/** allow boolean */ ,
                PropertyIdExpanded/** expanded */ ,
                PropertyIdName/** from label */,
                PropertyIdFileSystem/** from label */,
                PropertyIdBitmap/** from label */,
                PropertyIdItemRevision/** from label */,
                PropertyIdDataset/** from label */,
                PropertyIdUpdate/** update */ ,
                PropertyIdDisplayStyle/** display style */ ,
                PropertyIdValues/** values */ ,
                PropertyIdTooltipImages/** tooltip images */ ,
                PropertyIdReturnType/** return type */ ,
                PropertyIdOriginPoint/** origin point */ ,
                PropertyIdVector/** vector */ ,
                PropertyIdXVector/** xvector */ ,
                PropertyIdZVector/** zvector */ ,
                PropertyIdRadius/** radius */ ,
                PropertyIdPositive/** positive */ ,
                PropertyIdMinValue/** min value */ ,
                PropertyIdMinInclusive/** min inclusive */ ,
                PropertyIdMaxValue/** max value */ ,
                PropertyIdMaxInclusive/** max inclusive */ ,
                PropertyIdIncrement/** increment */ ,
                PropertyIdDecimalPlaces/** decimal places */ ,
                PropertyIdListExpression/** list expression */ ,
                PropertyIdAllowDynamic/** allow dynamic */ ,
                PropertyIdCheckMismatch/** check mismatch */ ,
                PropertyIdEnsureValue/** ensure value */ ,
                PropertyIdButtonAction/** from button */,
                PropertyIdDatasetType/** from button */,
                PropertyIdHelpUrl/** from button */,
                PropertyIdTooltip/** from button */,
                PropertyIdUseAlert/** from button */,
                PropertyIdExternalLibrary/** from button */,
                PropertyIdClassName/** from button */,
                PropertyIdMethodName/** from button */,
                PropertyIdParameters/** from button */,
                PropertyIdVisualRules/** from button */,
                PropertyIdJournalFile/** from button */,
                PropertyIdVisEnabled/** dependencies */,
                PropertyIdVisType/** dependencies */,
                PropertyIdVisObject/** dependencies */,
                PropertyIdVisComparison/** dependencies */,
                PropertyIdVisValue/** dependencies */,
                PropertyIdSensEnabled/** dependencies */,
                PropertyIdSensType/** dependencies */,
                PropertyIdSensObject/** dependencies */,
                PropertyIdSensComparison/** dependencies */,
                PropertyIdSensValue/** dependencies */,
                PropertyIdTooltipText/** tooltip text */ ,
                PropertyIdBooleanOrder/** boolean order */ ,
                PropertyIdReferenceBehavior/** reference behavior */ ,
                PropertyIdContentVisibility/** white box or black box */,
                PropertyIdRollback/** geometry */,
                PropertyIdOptional/** geometry */,
                PropertyIdTarget/** geometry */,
                PropertyIdShowHandle/** point */,
                PropertyIdSelectionScope/** point */,
                PropertyIdHd3d/** hd3d folder */,
                PropertyIdHd3dTitle1/** hd3d */,
                PropertyIdHd3dUrl1/** hd3d */,
                PropertyIdHd3dIcon1/** hd3d */,
                PropertyIdHd3dDescription1/** hd3d */,
                PropertyIdHd3dAnchor1/** hd3d */,
                PropertyIdHd3dTitle2/** hd3d */,
                PropertyIdHd3dUrl2/** hd3d */,
                PropertyIdHd3dIcon2/** hd3d */,
                PropertyIdHd3dDescription2/** hd3d */,
                PropertyIdHd3dAnchor2/** hd3d */,
                PropertyIdHd3dTitle3/** hd3d */,
                PropertyIdHd3dUrl3/** hd3d */,
                PropertyIdHd3dIcon3/** hd3d */,
                PropertyIdHd3dDescription3/** hd3d */,
                PropertyIdHd3dAnchor3/** hd3d */,
                PropertyIdFreezeWaveUpdate/** PTS dialog properties */,
                PropertyIdEnableCopyClone/** PTS dialog properties */,
                PropertyIdRunRelinker/** PTS dialog properties */,
                PropertyIdRunPartFamilyUpdate/** PTS dialog properties */,
                PropertyIdShowAssemblyInstances/** PTS dialog properties */,
                PropertyIdUseDropPosition/** PTS dialog properties */,
                PropertyIdLaunchRedefineConstraints/** PTS dialog properties */,
                PropertyIdAllowQuickAccess/** PTS dialog properties */,
                PropertyIdDefaultRefSet/** PTS dialog properties */,
                PropertyIdActiveRefSet/** PTS dialog properties */,
                PropertyIdActiveView/** PTS dialog properties */,
                PropertyIdCheckTinyObjects/** PTS dialog properties */,
                PropertyIdCheckMisalignedObjects/** PTS dialog properties */,
                PropertyIdCheckBodyDataStructures/** PTS dialog properties */,
                PropertyIdCheckBodyConsistency/** PTS dialog properties */,
                PropertyIdCheckFaceFaceIntersection/** PTS dialog properties */,
                PropertyIdCheckFaceSmoothness/** PTS dialog properties */,
                PropertyIdCheckFaceSelfIntersection/** PTS dialog properties */,
                PropertyIdCheckFaceSpikesCuts/** PTS dialog properties */,
                PropertyIdCheckEdgeSmoothness/** PTS dialog properties */,
                PropertyIdCheckEdgeTolerances/** PTS dialog properties */,
                PropertyIdCheckOrphanBodies/** PTS dialog properties */,
                PropertyIdCheckInterpartWaveLinks/** PTS dialog properties */,
                PropertyIdCheckInterpartExpressionStatus/** PTS dialog properties */,
                PropertyIdRelinkUnbroken/** PTS dialog relinker properties */,
                PropertyIdIncludeSuppressed/** PTS dialog relinker properties */,
                PropertyIdFaceCurveDirection/** PTS dialog relinker properties */,
                PropertyIdSourceScope/** PTS dialog relinker properties */,
                PropertyIdTargetScope/** PTS dialog relinker properties */,
                PropertyIdRelinkOption/** PTS dialog relinker properties */,
                PropertyIdBreakWaveLinksAfterUpdate/** PTS dialog relinker properties */,
                PropertyIdBreakExpLinksAfterUpdate/** PTS dialog relinker properties */,
                PropertyIdCheckTinyObjectsTol/** PTS dialog checker properties */,
                PropertyIdCheckTinyObjectsLevel/** PTS dialog checker properties */,
                PropertyIdCheckTinyObjectsDesc/** PTS dialog checker properties */,
                PropertyIdCheckMisalignedObjectsTol/** PTS dialog checker properties */,
                PropertyIdCheckMisalignedObjectsLevel/** PTS dialog checker properties */,
                PropertyIdCheckMisalignedObjectsDesc/** PTS dialog checker properties */,
                PropertyIdCheckBodyDataStructuresLevel/** PTS dialog checker properties */,
                PropertyIdCheckBodyDataStructuresDesc/** PTS dialog checker properties */,
                PropertyIdCheckBodyConsistencyLevel/** PTS dialog checker properties */,
                PropertyIdCheckBodyConsistencyDesc/** PTS dialog checker properties */,
                PropertyIdCheckFaceFaceIntersectionLevel/** PTS dialog checker properties */,
                PropertyIdCheckFaceFaceIntersectionDesc/** PTS dialog checker properties */,
                PropertyIdCheckFaceSmoothnessLevel/** PTS dialog checker properties */,
                PropertyIdCheckFaceSmoothnessDesc/** PTS dialog checker properties */,
                PropertyIdCheckFaceSelfIntersectionLevel/** PTS dialog checker properties */,
                PropertyIdCheckFaceSelfIntersectionDesc/** PTS dialog checker properties */,
                PropertyIdCheckFaceSpikesCutsTol/** PTS dialog checker properties */,
                PropertyIdCheckFaceSpikesCutsLevel/** PTS dialog checker properties */,
                PropertyIdCheckFaceSpikesCutsDesc/** PTS dialog checker properties */,
                PropertyIdCheckEdgeSmoothnessTol/** PTS dialog checker properties */,
                PropertyIdCheckEdgeSmoothnessLevel/** PTS dialog checker properties */,
                PropertyIdCheckEdgeSmoothnessDesc/** PTS dialog checker properties */,
                PropertyIdCheckEdgeTolerancesTol/** PTS dialog checker properties */,
                PropertyIdCheckEdgeTolerancesLevel/** PTS dialog checker properties */,
                PropertyIdCheckEdgeTolerancesDesc/** PTS dialog checker properties */,
                PropertyIdCheckOrphanBodiesRefset/** PTS dialog checker properties */,
                PropertyIdCheckOrphanBodiesLevel/** PTS dialog checker properties */,
                PropertyIdCheckOrphanBodiesDesc/** PTS dialog checker properties */,
                PropertyIdCheckInterpartWaveLinksStatus/** PTS dialog checker properties */,
                PropertyIdCheckInterpartWaveLinksLevel/** PTS dialog checker properties */,
                PropertyIdCheckInterpartWaveLinksDesc/** PTS dialog checker properties */,
                PropertyIdCheckInterpartExpressionStatusLevel/** PTS dialog checker properties */,
                PropertyIdCheckInterpartExpressionStatusDesc/** PTS dialog checker properties */,
                PropertyIdLayerCategories/** PTS dialog property */,
                PropertyIdPreview/** Modeling preview option */,
                PropertyIdPositioning/** Feature template positioning option */,
                PropertyIdExternalState/** PTS expression external state */,
                PropertyIdTemplateOrder/** Hidden property used to store template order */
            };

            /** Indicates the type of update to perform */
            public: enum UpdateType
            {
                UpdateTypeNone/** none */ ,
                UpdateTypeExternalChange/** external change */ ,
                UpdateTypePartFamily/** part family */ 
            };

            private: ConfigurableObjectImpl * m_configurableobject_impl;
            private: friend class  _ConfigurableObjectBuilder;
            protected: ConfigurableObject();
            public: ~ConfigurableObject();
            /** Set a parameter of the object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                const NXString & value /** value */ 
            );
            /** Set a parameter of the object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                const char * value /** value */ 
            );
            /** Set a logical parameter of the object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLogicalParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                bool value /** value */ 
            );
            /** Set a menu parameter of the object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMenuParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                int menuIndex /** menuindex */ 
            );
            /** Set a list of choices for the object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetChoiceParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                std::vector<NXString> & choices /** choices */ 
            );
            /** Set an object tag for the parameter. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTagParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ ,
                NXOpen::NXObject * referenceObject /** referenceobject */ 
            );
            /** Get a parameter of the object.  @return  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ 
            );
            /** Get a logical parameter of the object.  @return  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetLogicalParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ 
            );
            /** Get a menu parameter of the object.  @return  
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int GetMenuParameter
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::PropertyId propertyId /** property id */ 
            );
            /** Perform an update for a configurable object. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void Update
            (
                NXOpen::UserDefinedTemplate::ConfigurableObject::UpdateType updateType /** updatetype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
