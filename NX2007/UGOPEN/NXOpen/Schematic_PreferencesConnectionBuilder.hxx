#ifndef NXOpen_SCHEMATIC_PREFERENCESCONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_SCHEMATIC_PREFERENCESCONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Schematic_PreferencesConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_DataType.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_schematic_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Schematic
    {
        class PreferencesConnectionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Schematic
    {
        class _PreferencesConnectionBuilderBuilder;
        class PreferencesConnectionBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a PreferencesConnectionBuilder
            
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_SCHEMATICEXPORT  PreferencesConnectionBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PreferencesConnectionBuilderImpl * m_preferencesconnectionbuilder_impl;
            private: friend class  _PreferencesConnectionBuilderBuilder;
            protected: PreferencesConnectionBuilder();
            public: ~PreferencesConnectionBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the allow non-orthogonal connections.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: bool AllowNonOrthogonalConnections
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the allow non-orthogonal connections.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetAllowNonOrthogonalConnections
            (
                bool allowNonOrthogonal /** allownonorthogonal */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum segment length.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: double MinimumSegmentLength
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum segment length.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetMinimumSegmentLength
            (
                double length /** length */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the jumper type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: NXOpen::Diagramming::DiagrammingJumpertype JumperType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the jumper type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetJumperType
            (
                NXOpen::Diagramming::DiagrammingJumpertype jumperType /** jumpertype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the jumper gap.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: double JumperGap
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the jumper gap.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetJumperGap
            (
                double gap /** gap */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the jumper priority use line type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: bool JumperPriorityUseLineType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the jumper priority use line type.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetJumperPriorityUseLineType
            (
                bool useLineType /** uselinetype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the jumper priority type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: NXOpen::Diagramming::DiagrammingJumperprioritytype JumperPriority
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the jumper priority type. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetJumperPriority
            (
                NXOpen::Diagramming::DiagrammingJumperprioritytype jumperPriorityType /** jumperprioritytype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the snap angle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: double SnapAngle
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the snap angle 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetSnapAngle
            (
                double angle /** angle */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the arrow style.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: NXOpen::Diagramming::DiagrammingFlowdirectionarrowstyle ArrowStyle
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the arrow style.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetArrowStyle
            (
                NXOpen::Diagramming::DiagrammingFlowdirectionarrowstyle style /** style */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the arrow size.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: double ArrowSize
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the arrow size.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetArrowSize
            (
                double size /** size */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the tee size.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: double TeeSize
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the tee size.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : nx_diagramming ("NX Diagramming") */
            public: void SetTeeSize
            (
                double size /** size */ 
            );

            /// \endcond 
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
