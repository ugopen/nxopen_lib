#ifndef NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOLSAVEBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOLSAVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DiagrammingLibraryAuthor_SymbolSaveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_diagramminglibraryauthor_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace DiagrammingLibraryAuthor
    {
        class SymbolSaveBuilder;
    }
    class Builder;
    namespace DiagrammingLibraryAuthor
    {
        class _SymbolSaveBuilderBuilder;
        class SymbolSaveBuilderImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  Represents a SymbolSaveBuilder.  

          
                Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.  <br> To create a new instance of this class, use @link NXOpen::DiagrammingLibraryAuthor::SymbolDesignerManager::CreateSymbolSaveBuilder  NXOpen::DiagrammingLibraryAuthor::SymbolDesignerManager::CreateSymbolSaveBuilder @endlink  <br> 
         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGLIBRARYAUTHOREXPORT  SymbolSaveBuilder : public NXOpen::Builder
        {
            private: SymbolSaveBuilderImpl * m_symbolsavebuilder_impl;
            private: friend class  _SymbolSaveBuilderBuilder;
            protected: SymbolSaveBuilder();
            public: ~SymbolSaveBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the folder path to save symbol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FolderPath
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the folder path to save symbol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFolderPath
            (
                const NXString & path /** path */ 
            );
            /**Sets  the folder path to save symbol 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetFolderPath
            (
                const char * path /** path */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the symbol name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the symbol name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetName
            (
                const NXString & symbolName /** the symbol name */
            );
            /**Sets  the symbol name 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetName
            (
                const char * symbolName /** the symbol name */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the symbol description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetDescription
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the symbol description 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDescription
            (
                const std::vector<NXString> & text /** text */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
