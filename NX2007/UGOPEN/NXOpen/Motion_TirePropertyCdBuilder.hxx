#ifndef NXOpen_MOTION_TIREPROPERTYCDBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYCDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyCdBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/Motion_TirePropertyBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyCdBuilder;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class SelectFieldData;
    }
    namespace Motion
    {
        class TirePropertyBuilder;
    }
    namespace Motion
    {
        class _TirePropertyCdBuilderBuilder;
        class TirePropertyCdBuilderImpl;
        /** Represents a @link Motion::TirePropertyCd Motion::TirePropertyCd@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::TirePropertyCdCollection::CreateTirePropertyCdBuilder  NXOpen::Motion::TirePropertyCdCollection::CreateTirePropertyCdBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AmbientTempTypeSelection </term> <description> 
         
        TireParameterFile </description> </item> 

        <item><term> 
         
        AmbientTempValue.Value </term> <description> 
         
        273.15 (millimeters part), 459.67 (inches part) </description> </item> 

        <item><term> 
         
        ContactLengthWidth </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ContactPointGlobal </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ContactPointRoadRef </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CorrectorIter.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        Inclination </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        InflationPressureTypeSelection </term> <description> 
         
        TireParameterFile </description> </item> 

        <item><term> 
         
        InflationPressureValue.Value </term> <description> 
         
        0.0 (millimeters part), 0.0 (inches part) </description> </item> 

        <item><term> 
         
        ModelTypeSelection </term> <description> 
         
        Cdt30 </description> </item> 

        <item><term> 
         
        RimRoadGlobal </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RimRoadTydexW </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RimTydexCH </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RoadGlobal </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SolverResults </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StaticHold </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        StaticRadius.Value </term> <description> 
         
        0.1 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        StaticVerticalStiffness.Value </term> <description> 
         
        0.0 (millimeters part), 0.0 (inches part) </description> </item> 

        <item><term> 
         
        TimeStatistics </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        WheelGlobal </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        WheelRoadRef </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyCdBuilder : public NXOpen::Motion::TirePropertyBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /** The Model type. 
                       See detailed documentation about each model type. */
            public: enum ModelType
            {
                ModelTypeCdt30/** cdt30 */ ,
                ModelTypeCdt30Hps/** cdt30hps */ ,
                ModelTypeCdt40/** cdt40 */ ,
                ModelTypeCdt50/** cdt50 */ 
            };

            /** The Inflation Pressure type.
                       Specifies how the tire pressure will be defined. 
                       If the TireParameterFile is selected, then the tire pressure is set in the selected tire parameter file.
                       If Constant is set, then the constant pressure is defined in the CD Tire dialog.
                       If Variable is selected, then the pressure is defined by a curve.
                       The pressure curve defines tire pressure as a function of simulation time.*/
            public: enum InflationPressureType
            {
                InflationPressureTypeTireParameterFile/** tire parameter file */ ,
                InflationPressureTypeConstant/** constant */ ,
                InflationPressureTypeFunction/** function */ ,
                InflationPressureTypeProfile/** profile */ 
            };

            /** The Ambient Temp type.
                       Specifies how the ambient temperature will be defined.
                       If TireParameterFile is selected, then the ambient temperature is set in the selected tire parameter file.
                       If Constant is set, then the ambient temperature is defined in the CD Tire dialog.
                       If Variable is selected, then the ambient temperature is defined by a curve.
                       The pressure curve defines ambient temperature as a function of simulation time.*/
            public: enum AmbientTempType
            {
                AmbientTempTypeTireParameterFile/** tire parameter file */ ,
                AmbientTempTypeConstant/** constant */ ,
                AmbientTempTypeFunction/** function */ ,
                AmbientTempTypeProfile/** profile */ 
            };

            /** the enum for external file reference object id of CDTire */
            public: enum ExternalFileReferenceId
            {
                ExternalFileReferenceIdPrimaryParam/** primary param */ ,
                ExternalFileReferenceIdTireControl/** tire control */ 
            };

            private: TirePropertyCdBuilderImpl * m_tirepropertycdbuilder_impl;
            private: friend class  _TirePropertyCdBuilderBuilder;
            protected: TirePropertyCdBuilder();
            public: ~TirePropertyCdBuilder();
            /**Returns  the corrector iterations. Define the maximum number of corrector iterations 
                        to be performed at each simulation time step in the CDTire internal PECE integrator. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CorrectorIter
            (
            );
            /**Returns  the CDTire model type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::ModelType ModelTypeSelection
            (
            );
            /**Sets  the CDTire model type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetModelTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::ModelType modelTypeSelection /** modeltypeselection */ 
            );
            /**Returns  the static radius. Approximate radius of the tire. Used only for the purpose of 
                        including additional stabilizing forces during static analysis if 
                        @link TirePropertyCdBuilder::StaticHold TirePropertyCdBuilder::StaticHold@endlink  is true.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticRadius
            (
            );
            /**Returns  the static vertical stiffness. Specifies the vertical stiffness only used in static equilibrating force calculations.
                        Used only for the purpose of including additional stabilizing forces during static analysis
                        if @link TirePropertyCdBuilder::StaticHold TirePropertyCdBuilder::StaticHold@endlink  is true. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticVerticalStiffness
            (
            );
            /**Returns  the static hold. Enables or disables holding forces during static analysis.
                        These holding forces are applied to prevent add tire spin and gross chassis motion
                        (X and Y translation and yaw with respect to the road "up" vector)
                        stiffness in order to improve convergence during static analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StaticHold
            (
            );
            /**Sets  the static hold. Enables or disables holding forces during static analysis.
                        These holding forces are applied to prevent add tire spin and gross chassis motion
                        (X and Y translation and yaw with respect to the road "up" vector)
                        stiffness in order to improve convergence during static analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticHold
            (
                bool staticHold /** statichold */ 
            );
            /**Returns  the inflation pressure type.Specifies how the tire pressure will be defined.
                        If @link InflationPressureTypeTireParameterFile InflationPressureTypeTireParameterFile@endlink  is selected,
                         then the tire pressure is set in the selected tire parameter file.
                        Otherwise, it will be defined as a constant, function, or a profile.
                        The pressure curve defines tire pressure as a function of simulation time. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::InflationPressureType InflationPressureTypeSelection
            (
            );
            /**Sets  the inflation pressure type.Specifies how the tire pressure will be defined.
                        If @link InflationPressureTypeTireParameterFile InflationPressureTypeTireParameterFile@endlink  is selected,
                         then the tire pressure is set in the selected tire parameter file.
                        Otherwise, it will be defined as a constant, function, or a profile.
                        The pressure curve defines tire pressure as a function of simulation time. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInflationPressureTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::InflationPressureType inflationPressureTypeSelection /** inflationpressuretypeselection */ 
            );
            /**Returns  the inflation pressure constant value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InflationPressureValue
            (
            );
            /**Returns  the inflation pressure function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * InflationPressureFunction
            (
            );
            /**Sets  the inflation pressure function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInflationPressureFunction
            (
                NXOpen::Motion::MotionFunction * inflationPressureFunction /** inflationpressurefunction */ 
            );
            /**Returns  the ambient temperature type.Specifies how the ambient temperature will be defined.
                        If @link AmbientTempTypeTireParameterFile AmbientTempTypeTireParameterFile@endlink  is selected,
                         then the ambient temperature is set in the selected tire parameter file. 
                         Otherwise, it will be defined as a constant, function, or a profile.
                        The pressure curve defines ambient temperature as a function of simulation time. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::AmbientTempType AmbientTempTypeSelection
            (
            );
            /**Sets  the ambient temperature type.Specifies how the ambient temperature will be defined.
                        If @link AmbientTempTypeTireParameterFile AmbientTempTypeTireParameterFile@endlink  is selected,
                         then the ambient temperature is set in the selected tire parameter file. 
                         Otherwise, it will be defined as a constant, function, or a profile.
                        The pressure curve defines ambient temperature as a function of simulation time. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAmbientTempTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::AmbientTempType ambientTempTypeSelection /** ambienttemptypeselection */ 
            );
            /**Returns  the ambient temperature constant value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AmbientTempValue
            (
            );
            /**Returns  the ambient temperature function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * AmbientTempFunction
            (
            );
            /**Sets  the ambient temperature function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAmbientTempFunction
            (
                NXOpen::Motion::MotionFunction * ambientTempFunction /** ambienttempfunction */ 
            );
            /**Returns  the name of the Tire Property
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the Tire Property
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the Tire Property
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the rim road global frame. Activates specific CDTire results: 
                        Global x, y, or z-component of tire force/torque applied to Tire Body 
                        (tb_gl_fx, tb_gl_fy, tb_gl_fz, tb_gl_tx, tb_gl_ty, tb_gl_tz); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimRoadGlobal
            (
            );
            /**Sets  the rim road global frame. Activates specific CDTire results: 
                        Global x, y, or z-component of tire force/torque applied to Tire Body 
                        (tb_gl_fx, tb_gl_fy, tb_gl_fz, tb_gl_tx, tb_gl_ty, tb_gl_tz); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimRoadGlobal
            (
                bool rimRoadGlobal /** rimroadglobal */ 
            );
            /**Returns  the rim road tydex-W frame. Activates specific CDTire results: 
                        X, y, or z-component of tire force/torque applied to Tire body, in Tydex-W frame
                        (tb_tw_fx, tb_tw_fy, tb_tw_fz, tb_tw_tx, tb_tw_ty, tb_tw_tz); 
                        X, y, or z-component of contact force/torque applied to Road body, in Tydex-W frame
                        (rb_tw_fx, rb_tw_fy, rb_tw_fz, rb_tw_tx, rb_tw_ty, rb_tw_tz); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimRoadTydexW
            (
            );
            /**Sets  the rim road tydex-W frame. Activates specific CDTire results: 
                        X, y, or z-component of tire force/torque applied to Tire body, in Tydex-W frame
                        (tb_tw_fx, tb_tw_fy, tb_tw_fz, tb_tw_tx, tb_tw_ty, tb_tw_tz); 
                        X, y, or z-component of contact force/torque applied to Road body, in Tydex-W frame
                        (rb_tw_fx, rb_tw_fy, rb_tw_fz, rb_tw_tx, rb_tw_ty, rb_tw_tz); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimRoadTydexW
            (
                bool rimRoadTydexW /** rimroadtydexw */ 
            );
            /**Returns  the rim Tydex-C and Tydex-H frames. 
                        Activates specific CDTire results:
                        x, y, or z-component of tire force applied to Tire Body wrt Tydex-C coordinate system
                        (tb_tc_fx, tb_tc_fy, tb_tc_fz, tb_tc_tx, tb_tc_ty, tb_tc_tz);
                        x, y, or z-component of tire force applied to Tire Body wrt Tydex-H coordinate system
                        (tb_th_fx, tb_th_fy, tb_th_fz, tb_th_tx, tb_th_ty, tb_th_tz);. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimTydexCH
            (
            );
            /**Sets  the rim Tydex-C and Tydex-H frames. 
                        Activates specific CDTire results:
                        x, y, or z-component of tire force applied to Tire Body wrt Tydex-C coordinate system
                        (tb_tc_fx, tb_tc_fy, tb_tc_fz, tb_tc_tx, tb_tc_ty, tb_tc_tz);
                        x, y, or z-component of tire force applied to Tire Body wrt Tydex-H coordinate system
                        (tb_th_fx, tb_th_fy, tb_th_fz, tb_th_tx, tb_th_ty, tb_th_tz);. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimTydexCH
            (
                bool rimTydexCH /** rimtydexch */ 
            );
            /**Returns  the wheel center global.
                        Activates specific CDTire results: 
                        Global position of rim center (wheelx_world, wheely_world, wheelz_world);
                        Euler parameters orientation coordinates of rim center axis system with respect to world
                        (wheele0_world, wheele1_world, wheele2_world, wheele4_world);
                        Global velocity of rim center (wheelxd_world, wheelyd_world, wheelzd_world);
                        Global angular velocity of rim center (wheelwx_world, wheelwy_world, wheelwz_world);.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WheelGlobal
            (
            );
            /**Sets  the wheel center global.
                        Activates specific CDTire results: 
                        Global position of rim center (wheelx_world, wheely_world, wheelz_world);
                        Euler parameters orientation coordinates of rim center axis system with respect to world
                        (wheele0_world, wheele1_world, wheele2_world, wheele4_world);
                        Global velocity of rim center (wheelxd_world, wheelyd_world, wheelzd_world);
                        Global angular velocity of rim center (wheelwx_world, wheelwy_world, wheelwz_world);.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetWheelGlobal
            (
                bool wheelGlobal /** wheelglobal */ 
            );
            /**Returns  the road center global.
                        Activates specific CDTire results:
                        Vector from road axis system to rim center, in road axis system coordinates
                        (roadx_world, roady_world, roadz_world);
                        Euler parameter orientation coordinates of rim axis system with respect to road axis system
                        (roade0_world, roade1_world, roade2_world, roade3_world);
                        Velocity of rim center, relative to road axis system, in road axis system coordinates
                        (roadxd_world, roadyd_world, roadzd_world);
                        Angular velocity of rim relative to road axis system, in road axis system coordinates
                        (roadwx_world, roadwy_world, roadwz_world); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RoadGlobal
            (
            );
            /**Sets  the road center global.
                        Activates specific CDTire results:
                        Vector from road axis system to rim center, in road axis system coordinates
                        (roadx_world, roady_world, roadz_world);
                        Euler parameter orientation coordinates of rim axis system with respect to road axis system
                        (roade0_world, roade1_world, roade2_world, roade3_world);
                        Velocity of rim center, relative to road axis system, in road axis system coordinates
                        (roadxd_world, roadyd_world, roadzd_world);
                        Angular velocity of rim relative to road axis system, in road axis system coordinates
                        (roadwx_world, roadwy_world, roadwz_world); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRoadGlobal
            (
                bool roadGlobal /** roadglobal */ 
            );
            /**Returns  the wheel center road reference frame.
                        Activates specific CDTire results:
                        Vector from road axis system to rim center, in road axis system coordinates
                        (wheelx_road, wheely_road, wheelz_road);
                        Euler parameter orientation coordinates of rim axis system with respect to road axis system
                        (wheele0_road, wheele1_road, wheele2_road, wheele3_road);
                        Velocity of rim center, relative to road axis system, in road axis system coordinates
                        (wheelxd_road, wheelyd_road, wheelzd_road);
                        Angular velocity of rim relative to road axis system, in road axis system coordinates
                        (wheelwx_road, wheelwy_road, wheelwz_road); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WheelRoadRef
            (
            );
            /**Sets  the wheel center road reference frame.
                        Activates specific CDTire results:
                        Vector from road axis system to rim center, in road axis system coordinates
                        (wheelx_road, wheely_road, wheelz_road);
                        Euler parameter orientation coordinates of rim axis system with respect to road axis system
                        (wheele0_road, wheele1_road, wheele2_road, wheele3_road);
                        Velocity of rim center, relative to road axis system, in road axis system coordinates
                        (wheelxd_road, wheelyd_road, wheelzd_road);
                        Angular velocity of rim relative to road axis system, in road axis system coordinates
                        (wheelwx_road, wheelwy_road, wheelwz_road); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetWheelRoadRef
            (
                bool wheelRoadRef /** wheelroadref */ 
            );
            /**Returns  the contact point surface friction road frame.
                        Activates specific CDTire results:
                        x, y, or z-component of contact center position wrt Road Body (contact_x, contact_y, contact_z);
                        Coefficient of friction at contact point (mu);
                         
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactPointRoadRef
            (
            );
            /**Sets  the contact point surface friction road frame.
                        Activates specific CDTire results:
                        x, y, or z-component of contact center position wrt Road Body (contact_x, contact_y, contact_z);
                        Coefficient of friction at contact point (mu);
                         
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactPointRoadRef
            (
                bool contactPointRoadRef /** contactpointroadref */ 
            );
            /**Returns  the contact point surface friction global.
                        Activates specific CDTire results: 
                        Global location of contact center (contact_x_world, contact_y_world, contact_z_world);
                        Coefficient of friction at contact point (mu);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactPointGlobal
            (
            );
            /**Sets  the contact point surface friction global.
                        Activates specific CDTire results: 
                        Global location of contact center (contact_x_world, contact_y_world, contact_z_world);
                        Coefficient of friction at contact point (mu);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactPointGlobal
            (
                bool contactPointGlobal /** contactpointglobal */ 
            );
            /**Returns  the inclination and slip angle, slip loaded radius, rim rotation.
                        Activates specific CDTire results:
                        Deflected tire radius (dynrad);
                        y-component of rotational rim velocity wrt Tire Body (wy);
                        Inclination angle (gamma); Slip angle (alpha); Longitudinal slip (longslip);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Inclination
            (
            );
            /**Sets  the inclination and slip angle, slip loaded radius, rim rotation.
                        Activates specific CDTire results:
                        Deflected tire radius (dynrad);
                        y-component of rotational rim velocity wrt Tire Body (wy);
                        Inclination angle (gamma); Slip angle (alpha); Longitudinal slip (longslip);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInclination
            (
                bool inclination /** inclination */ 
            );
            /**Returns  the contact length/width.
                        Activates specific CDTire results:
                        Contact patch length (contlength);
                        Contact patch width (contwidth); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactLengthWidth
            (
            );
            /**Sets  the contact length/width.
                        Activates specific CDTire results:
                        Contact patch length (contlength);
                        Contact patch width (contwidth); 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactLengthWidth
            (
                bool contactLengthWidth /** contactlengthwidth */ 
            );
            /**Returns  the Wear Indicator Per Cross Section Segment.
                        Activates specific CDTire results:
                        (wear_ind_gl, wear_ind_01 ...  wear_ind_29);
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool WearIndicatorPerSegment
            (
            );
            /**Sets  the Wear Indicator Per Cross Section Segment.
                        Activates specific CDTire results:
                        (wear_ind_gl, wear_ind_01 ...  wear_ind_29);
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetWearIndicatorPerSegment
            (
                bool attributeValue /** attributevalue */ 
            );
            /**Returns  the Contact Kinematics (Effective Rolling Radius, Slip Velocities, Surface Normal). 
                        Activates specific CDTire results:
                        Effective rolling radius (eff_roll_rad);Loaded radius rate of change (radius_rate);
                        Longitudinal slip velocity (long_slip_vel);Lateral slip velocity (lat_slip_vel);
                        Surface normal in road frame (surf_norm_x, surf_norm_y, surf_norm_z);
                        Longitudinal velocity (long_vel);Spin velocity (spin_vel);
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactKinematics
            (
            );
            /**Sets  the Contact Kinematics (Effective Rolling Radius, Slip Velocities, Surface Normal). 
                        Activates specific CDTire results:
                        Effective rolling radius (eff_roll_rad);Loaded radius rate of change (radius_rate);
                        Longitudinal slip velocity (long_slip_vel);Lateral slip velocity (lat_slip_vel);
                        Surface normal in road frame (surf_norm_x, surf_norm_y, surf_norm_z);
                        Longitudinal velocity (long_vel);Spin velocity (spin_vel);
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactKinematics
            (
                bool attributeValue /** attributevalue */ 
            );
            /**Returns  the Energy Loss Per Cross Section Segment 
                        Activates specific CDTire results:
                        eloss_gl, eloss_01 ... eloss_29;
                        
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnergyLossPerSegment
            (
            );
            /**Sets  the Energy Loss Per Cross Section Segment 
                        Activates specific CDTire results:
                        eloss_gl, eloss_01 ... eloss_29;
                        
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnergyLossPerSegment
            (
                bool attributeValue /** attributevalue */ 
            );
            /**Returns  the Energy Loss Of Specific Entities.
                        Activates specific CDTire results:
                        (el_all, el_rubber_circ_damp, el_rubber_lat_damp, el_rubber_diag_damp,
                         el_rubber_shear_damp, el_carcass_damp, el_capply_damp, el_belt_damp,
                         el_bend_damp_x, el_bend_damp_y, el_bend_damp_xy,
                         el_tread_slip, el_tread_radial_damp, el_tread_inner_frict); 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnergyLossOfSpecificEntities
            (
            );
            /**Sets  the Energy Loss Of Specific Entities.
                        Activates specific CDTire results:
                        (el_all, el_rubber_circ_damp, el_rubber_lat_damp, el_rubber_diag_damp,
                         el_rubber_shear_damp, el_carcass_damp, el_capply_damp, el_belt_damp,
                         el_bend_damp_x, el_bend_damp_y, el_bend_damp_xy,
                         el_tread_slip, el_tread_radial_damp, el_tread_inner_frict); 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnergyLossOfSpecificEntities
            (
                bool attributeValue /** attributevalue */ 
            );
            /**Returns  the time statistics 
                        Activates specific CDTire results:
                        Simulation time (time);
                        CDTire tire model type (submodel);
                        CDTire road model type (type);
                        CPU time for this tire (cpu_time);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool TimeStatistics
            (
            );
            /**Sets  the time statistics 
                        Activates specific CDTire results:
                        Simulation time (time);
                        CDTire tire model type (submodel);
                        CDTire road model type (type);
                        CPU time for this tire (cpu_time);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTimeStatistics
            (
                bool timeStatistics /** timestatistics */ 
            );
            /**Returns  the solver results 
                        Activates specific CDTire results:
                        Integration step size (h);Time integration error (err);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolverResults
            (
            );
            /**Sets  the solver results 
                        Activates specific CDTire results:
                        Integration step size (h);Time integration error (err);
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolverResults
            (
                bool solverResults /** solverresults */ 
            );
            /**Returns  the Profile for Inflation Pressure.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * InflationPressureProfile
            (
            );
            /**Returns  the Profile for Ambient Temperature.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * AmbientTempProfile
            (
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
