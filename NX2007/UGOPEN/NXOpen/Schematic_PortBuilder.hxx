#ifndef NXOpen_SCHEMATIC_PORTBUILDER_HXX_INCLUDED
#define NXOpen_SCHEMATIC_PORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Schematic_PortBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Port.hxx>
#include <NXOpen/Schematic_BaseObjectBuilder.hxx>
#include <NXOpen/Schematic_DataType.hxx>
#include <NXOpen/Schematic_Node.hxx>
#include <NXOpen/libnxopencpp_schematic_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Schematic
    {
        class PortBuilder;
    }
    namespace Diagramming
    {
        class Port;
    }
    namespace Schematic
    {
        class BaseObjectBuilder;
    }
    namespace Schematic
    {
        class Node;
    }
    namespace Schematic
    {
        class _PortBuilderBuilder;
        class PortBuilderImpl;

        /// \cond NX_NO_DOC 
        /**  @brief 
            Builder used to model a piece of Port.  

         
             <br> To create a new instance of this class, use @link NXOpen::Schematic::SchematicManager::CreatePortBuilder  NXOpen::Schematic::SchematicManager::CreatePortBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        SymbolSourceType </term> <description> 
         
        ReuseLibrary </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_SCHEMATICEXPORT  PortBuilder : public NXOpen::Schematic::BaseObjectBuilder
        {
            private: PortBuilderImpl * m_portbuilder_impl;
            private: friend class  _PortBuilderBuilder;
            protected: PortBuilder();
            public: ~PortBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the symbol source type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Schematic::SymbolSourceOption SymbolSourceType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the symbol source type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolSourceType
            (
                NXOpen::Schematic::SymbolSourceOption symbolSourceType /** symbolsourcetype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the symbol ID of this port equipment. It is only applicable when @link NXOpen::Schematic::PortBuilder::SymbolSourceType NXOpen::Schematic::PortBuilder::SymbolSourceType@endlink  is @link NXOpen::Schematic::SymbolSourceOptionReuseLibrary NXOpen::Schematic::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SymbolId
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the symbol ID of this port equipment. It is only applicable when @link NXOpen::Schematic::PortBuilder::SymbolSourceType NXOpen::Schematic::PortBuilder::SymbolSourceType@endlink  is @link NXOpen::Schematic::SymbolSourceOptionReuseLibrary NXOpen::Schematic::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSymbolId
            (
                const NXString & symbolId /** symbolid */ 
            );
            /**Sets  the symbol ID of this port equipment. It is only applicable when @link NXOpen::Schematic::PortBuilder::SymbolSourceType NXOpen::Schematic::PortBuilder::SymbolSourceType@endlink  is @link NXOpen::Schematic::SymbolSourceOptionReuseLibrary NXOpen::Schematic::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            void SetSymbolId
            (
                const char * symbolId /** symbolid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the symbol from foundation window. It is only applicable when @link NXOpen::Schematic::PortBuilder::SymbolSourceType NXOpen::Schematic::PortBuilder::SymbolSourceType@endlink  is @link NXOpen::Schematic::SymbolSourceOptionExistingSymbol NXOpen::Schematic::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Port * ExistingSymbol
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the symbol from foundation window. It is only applicable when @link NXOpen::Schematic::PortBuilder::SymbolSourceType NXOpen::Schematic::PortBuilder::SymbolSourceType@endlink  is @link NXOpen::Schematic::SymbolSourceOptionExistingSymbol NXOpen::Schematic::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExistingSymbol
            (
                NXOpen::Diagramming::Port * existingSymbol /** existingsymbol */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the option to lock the aspect ratio. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockAspectRatio
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the option to lock the aspect ratio. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLockAspectRatio
            (
                bool lockAspectRatio /** lockaspectratio */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScale
            (
                double scale /** scale */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the x scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the x scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleX
            (
                double scaleX /** scalex */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the y scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double ScaleY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the y scale value. It is only applicable when @link NXOpen::Schematic::PortBuilder::LockAspectRatio NXOpen::Schematic::PortBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleY
            (
                double scaleY /** scaley */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Schematic::Node * GetNode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNode
            (
                NXOpen::Schematic::Node * schNode /** schnode */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the X percentage of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double RelativePercentX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the X percentage of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRelativePercentX
            (
                double percentX /** percentx */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Y percentage of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double RelativePercentY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Y percentage of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRelativePercentY
            (
                double percentY /** percenty */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the X offset value of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double RelativeValueX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the X offset value of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRelativeValueX
            (
                double valueX /** valuex */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the Y offset value of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double RelativeValueY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the Y offset value of location relative to the node. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRelativeValueY
            (
                double valueY /** valuey */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
