#ifndef NXOpen_ANNOTATIONS_PMILINEWELDDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMILINEWELDDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiLineWeldData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PmiSemanticData.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PmiLineWeldData;
    }
    namespace Annotations
    {
        class PmiSemanticData;
    }
    namespace Annotations
    {
        class PmiLineWeldDataImpl;
        /** Represents PMI Line Weld data. 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PmiLineWeldData : public NXOpen::Annotations::PmiSemanticData
        {
            /** Specifies the PMI Line Weld standard */
            public: enum StandardTypes
            {
                StandardTypesNone/** None */,
                StandardTypesAnsi/** ANSI standard */,
                StandardTypesIso/** ISO standard*/,
                StandardTypesDin/** DIN standard*/,
                StandardTypesJis/** JIS standard*/,
                StandardTypesEskd/** ESKD standard*/,
                StandardTypesGb/** GB standard*/
            };

            /** Specifies the PMI Line Weld symbol type */
            public: enum SymbolTypes
            {
                SymbolTypesNone/** none */ ,
                SymbolTypesEdgeFlange/** edge flange */ ,
                SymbolTypesDoubleFlange/** double flange */ ,
                SymbolTypesFlareSingleVGroove/** flare single vgroove */ ,
                SymbolTypesSquare/** square */ ,
                SymbolTypesSquareGroove/** square groove */ ,
                SymbolTypesSingleV/** single v */ ,
                SymbolTypesSingleVGroove/** single vgroove */ ,
                SymbolTypesSingleBevel/** single bevel */ ,
                SymbolTypesSingleBevelGroove/** single bevel groove */ ,
                SymbolTypesSingleFlange/** single flange */ ,
                SymbolTypesFlareSingleBevelGroove/** flare single bevel groove */ ,
                SymbolTypesSingleVBroadRootFace/** single vbroad root face */ ,
                SymbolTypesSingleBevelBroadRootFace/** single bevel broad root face */ ,
                SymbolTypesSingleU/** single u */ ,
                SymbolTypesSingleUGroove/** single ugroove */ ,
                SymbolTypesSingleJ/** single j */ ,
                SymbolTypesSingleJGroove/** single jgroove */ ,
                SymbolTypesBacking/** backing */ ,
                SymbolTypesBead/** bead */ ,
                SymbolTypesKGroove/** kgroove */ ,
                SymbolTypesFillet/** fillet */ ,
                SymbolTypesJisFillet/** jis fillet */ ,
                SymbolTypesStake/** stake */ ,
                SymbolTypesPlug/** plug */ ,
                SymbolTypesPlugAndSlot/** plug and slot */ ,
                SymbolTypesSeam/** seam */ ,
                SymbolTypesSeam2/** seam2 */ ,
                SymbolTypesJisSeam/** jis seam */ ,
                SymbolTypesSteepFlankedSingleV/** steep flanked single v */ ,
                SymbolTypesSteepFlankedSingleBevel/** steep flanked single bevel */ ,
                SymbolTypesEdge/** edge */ ,
                SymbolTypesEdge2/** edge2 */ ,
                SymbolTypesSurface/** surface */ ,
                SymbolTypesOverlay/** overlay */ ,
                SymbolTypesSurfaceJoint/** surface joint */ ,
                SymbolTypesSolderedJoint/** soldered joint */ ,
                SymbolTypesInclinedJoint/** inclined joint */ ,
                SymbolTypesFoldJoint/** fold joint */ ,
                SymbolTypesSpot/** spot */ ,
                SymbolTypesSpot2/** spot2 */ ,
                SymbolTypesStud/** stud */ ,
                SymbolTypesSpotProjected/** spot projected */ ,
                SymbolTypesPermanentBackingStrip/** permanent backing strip */ ,
                SymbolTypesRemovableBackingStrip/** removable backing strip */ ,
                SymbolTypesJisStaggeredFillet1/** jis staggered fillet1 */ ,
                SymbolTypesJisStaggeredFillet2/** jis staggered fillet2 */ 
            };

            /** Specifies the PMI Line Weld supplemental symbol type */
            public: enum SupplementalSymbolTypes
            {
                SupplementalSymbolTypesNone/** No supplemental weld symbol */,
                SupplementalSymbolTypesFlush/** Flush supplemental weld symbol */,
                SupplementalSymbolTypesConvex/** Convex  supplemental weld symbol */,
                SupplementalSymbolTypesConcave/** Concave supplemental weld symbol */,
                SupplementalSymbolTypesToesBlended/** Blended Toes supplemental weld symbol */,
                SupplementalSymbolTypesPermanentBackingStripSupplemental/** Backing strip permanent weld symbol */,
                SupplementalSymbolTypesRemovableBackingStripSupplemental/** Backing strip removable weld symbol */,
                SupplementalSymbolTypesMeltThrough/** Melt through supplemental weld symbol */
            };

            /** Specifies the PMI Line Weld finish symbol type */
            public: enum FinishSymbolTypes
            {
                FinishSymbolTypesNone/** No finish symbol type specified */,
                FinishSymbolTypesChipping/** Chipping finish */,
                FinishSymbolTypesGrinding/** Grinding finish */,
                FinishSymbolTypesMachining/** Machining finish */,
                FinishSymbolTypesHammering/** Hammering finish */,
                FinishSymbolTypesPeening/** Peening finish */,
                FinishSymbolTypesRolling/** Rolling finish */,
                FinishSymbolTypesFinishing/** Finishing finish */
            };

            /** Specifies the PMI Line Weld along-contour type */
            public: enum AlongContourTypes
            {
                AlongContourTypesNone/** No Weld Along Contour */,
                AlongContourTypesClosed/** Weld Along Contour Closed */,
                AlongContourTypesUnclosed/** Weld Along Contour Unclosed */,
                AlongContourTypesTrilateral/** Weld Along Contour Trilateral */,
                AlongContourTypesAllAround/** Weld Along Contour All Around */
            };

            private: PmiLineWeldDataImpl * m_pmilinewelddata_impl;
            /// \cond NX_NO_DOC 
            public: explicit PmiLineWeldData(void *ptr);
            /// \endcond 
            /**Returns  the weld standard 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::StandardTypes StandardType
            (
            );
            /**Returns  the symbol on the arrow side of weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::SymbolTypes ArrowSideSymbol
            (
            );
            /**Returns  the symbol on the other side of the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::SymbolTypes OtherSideSymbol
            (
            );
            /**Returns  the supplemental symbol on the arrow side of the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::SupplementalSymbolTypes ArrowSideSupplementalSymbol
            (
            );
            /**Returns  the supplemental symbol on the other side of the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::SupplementalSymbolTypes OtheSideSupplementalSymbol
            (
            );
            /**Returns  the finish symbol on the arrow side of the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::FinishSymbolTypes ArrowSideFinishSymbol
            (
            );
            /**Returns  the finish symbol on the other side of the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::FinishSymbolTypes OtherSideFinishSymbol
            (
            );
            /**Returns  the contour along the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::PmiLineWeldData::AlongContourTypes AlongContour
            (
            );
            /**Returns  the all-around flag for line weld data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool AllAround
            (
            );
            /**Returns  the delta flag for line weld data 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Delta
            (
            );
            /**Returns  the flag indicating the weld is applied in the field 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Field
            (
            );
            /**Returns  the flag indicating the weld is centered 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Centered
            (
            );
            /**Returns  the flag indicating that the reference sign is to be included in symbol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool IncludeReferenceSign
            (
            );
            /**Returns  the flag indicating whether the arrow side is a a compound weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool ArrowSideCompound
            (
            );
            /**Returns  the flag indicating whether the other side is a a compound weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool OtherSideCompound
            (
            );
            /**Returns  the staggered flag for the weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: bool Staggered
            (
            );
            /**Returns  the arrow side main size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideMainSize
            (
            );
            /**Returns  the other side main size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideMainSize
            (
            );
            /**Returns  the arrow side longitudinal size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideLongitudinalSize
            (
            );
            /**Returns  the other side longitudinal size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideLongitudinalSize
            (
            );
            /**Returns  the arrow side staggered size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideStaggeredSize
            (
            );
            /**Returns  the other side staggered size of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideStaggeredSize
            (
            );
            /**Returns  the arrow side groove angle of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideGrooveAngle
            (
            );
            /**Returns  the other side groove angle of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideGrooveAngle
            (
            );
            /**Returns  the arrow side groove gap of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideGrooveGap
            (
            );
            /**Returns  the other side groove gap of line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideGrooveGap
            (
            );
            /**Returns  the arrow side compound main size of the line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString ArrowSideCompoundMainSize
            (
            );
            /**Returns  the other side compound main size of the line weld 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: NXString OtherSideCompoundMainSize
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
