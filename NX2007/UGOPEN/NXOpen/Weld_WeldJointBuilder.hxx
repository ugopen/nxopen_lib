#ifndef NXOpen_WELD_WELDJOINTBUILDER_HXX_INCLUDED
#define NXOpen_WELD_WELDJOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldJointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/Weld_StructureWeldBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/Weld_JointItemBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class WeldJointBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Curve;
    namespace Die
    {
        class DieLimitsBuilder;
    }
    namespace Die
    {
        class DieLimitsBuilderList;
    }
    class LineColorFontWidthBuilder;
    class Part;
    namespace Routing
    {
        class Port;
    }
    class ScCollector;
    class SelectCurveList;
    class SelectNXObjectList;
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    namespace Weld
    {
        class JointItemBuilder;
    }
    namespace Weld
    {
        class JointItemBuilderList;
    }
    namespace Weld
    {
        class StructureWeldBuilder;
    }
    namespace Weld
    {
        class _WeldJointBuilderBuilder;
        class WeldJointBuilderImpl;
        /** Used to create or edit a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  <br> To create a new instance of this class, use @link NXOpen::Weld::WeldManager::CreateJointBuilder  NXOpen::Weld::WeldManager::CreateJointBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        NumberSegments </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        SplitAngle </term> <description> 
         
        5.0 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  WeldJointBuilder : public NXOpen::Weld::StructureWeldBuilder
        {
            /** Creation method. */
            public: enum Types
            {
                TypesCreateAutomatic/** Automatic weld joint creation. */,
                TypesCreateManual/** Manual weld joint creation. */,
                TypesCreateMultiple/** Create multiple weld joints from manual input. */,
                TypesCreateAttributes/** Create weld joints from attributed ship structures data. */,
                TypesCreateSingleSided/** Create multiple single sided weld joints from manual input. */
            };

            /** Weld types. */
            public: enum WeldTypes
            {
                WeldTypesAny/** Any Joint type. */,
                WeldTypesGroove/** Groove joint. */,
                WeldTypesFillet/** T-Joint. */,
                WeldTypesCorner/** Corner joint. */,
                WeldTypesLap/** Lap joint. */,
                WeldTypesSocket/** Socket joint for pipe welding. */,
                WeldTypesMechanical/** Mechanical joint for pipe welding. */,
                WeldTypesSleeve/** Sleeve joint for pipe welding. */,
                WeldTypesBoss/** Boss joint for pipe welding. */
            };

            /** Where to create new joints. */
            public: enum DestinationTypes
            {
                DestinationTypesWorkPart/** Create new joints in work part. */,
                DestinationTypesNewComponent/** Create a new componenent for each joint under the work part. */
            };

            /** Joint splitting options. */
            public: enum SplitTypes
            {
                SplitTypesEqualSegments/** Specified number of equal segments. */,
                SplitTypesLimits/** At limits defined by @link NXOpen::Weld::WeldJointBuilder::LimitList NXOpen::Weld::WeldJointBuilder::LimitList@endlink . */,
                SplitTypesAngle/** At specifed angle. */,
                SplitTypesComputedAngle/** At angle computed from geometry and tables. */,
                SplitTypesLength/** At equal arc length. */,
                SplitTypesNone/** No split. */,
                SplitTypesSkip/** Skip joint, defined by segment length and spacing length. */,
                SplitTypesSkipNumberLength/** Skip joint, defined by number of skips and segment length. */,
                SplitTypesSkipLengthPitch/** Skip joint, defined by segment length and minimum ptich. */
            };

             /** Joint evaluation information at the mid point. Results are returned in absolute and ship coordinates */
            public:
            struct JointMidPointData
            {
                public: /** The mid point of the joint in absolute coordinates. */NXOpen::Point3d JointMidPoint;
                public: /** The tangent at the joint mid point in absolute coordinates. */NXOpen::Vector3d JointTangent;
                public: /** The primary body face normal in absolute coordinates at the joint mid point. */NXOpen::Vector3d PrimaryFaceNormal;
                public: /** The secondary body face normal in absolute coordinates at the joint mid point. */NXOpen::Vector3d SecondaryFaceNormal;
                public: /** The direction in absolute coordinates towards the primary faces, and way from secondary faces. */NXOpen::Vector3d GroovePrimaryDirection;
                public: /** Indicates if the primary faces for the groove are farthest along a positive principal axis. */bool GrooveAlignedWithPrimary;
                public: JointMidPointData() :
                    JointMidPoint(),
                    JointTangent(),
                    PrimaryFaceNormal(),
                    SecondaryFaceNormal(),
                    GroovePrimaryDirection(),
                    GrooveAlignedWithPrimary()
                {
                }
                /** Constructor for the JointMidPointData struct. */ 
                public: JointMidPointData(const NXOpen::Point3d &jointMidPointInitial /** The mid point of the joint in absolute coordinates. */, 
                        const NXOpen::Vector3d &jointTangentInitial /** The tangent at the joint mid point in absolute coordinates. */, 
                        const NXOpen::Vector3d &primaryFaceNormalInitial /** The primary body face normal in absolute coordinates at the joint mid point. */, 
                        const NXOpen::Vector3d &secondaryFaceNormalInitial /** The secondary body face normal in absolute coordinates at the joint mid point. */, 
                        const NXOpen::Vector3d &groovePrimaryDirectionInitial /** The direction in absolute coordinates towards the primary faces, and way from secondary faces. */, 
                        bool grooveAlignedWithPrimaryInitial /** Indicates if the primary faces for the groove are farthest along a positive principal axis. */) :
                    JointMidPoint(jointMidPointInitial),
                    JointTangent(jointTangentInitial),
                    PrimaryFaceNormal(primaryFaceNormalInitial),
                    SecondaryFaceNormal(secondaryFaceNormalInitial),
                    GroovePrimaryDirection(groovePrimaryDirectionInitial),
                    GrooveAlignedWithPrimary(grooveAlignedWithPrimaryInitial)
                {
                }
            };

            /** Coordinate system specification. */
            public: enum CoordinateSystem
            {
                CoordinateSystemAbsolute/** Desired points and vectors should be in absolute coordinates.   */,
                CoordinateSystemShip/** Desired points and vectors should be in ship coordinate system. */
            };

            /** Application where joints are created. */
            public: enum Application
            {
                ApplicationStructureWelding/** Structure Welding Application.   */,
                ApplicationRouting/** Routing Application. */,
                ApplicationStructureDesign/** Structure Design Application. */
            };

            private: WeldJointBuilderImpl * m_weldjointbuilder_impl;
            private: friend class  _WeldJointBuilderBuilder;
            protected: WeldJointBuilder();
            public: ~WeldJointBuilder();
            /**Returns  the components on which the welding joints will be created. Used when @link NXOpen::Weld::WeldJointBuilder::Types NXOpen::Weld::WeldJointBuilder::Types@endlink .
                        is set to @link  NXOpen::Weld::WeldJointBuilder::TypesCreateAutomatic   NXOpen::Weld::WeldJointBuilder::TypesCreateAutomatic @endlink  or 
                        @link  NXOpen::Weld::WeldJointBuilder::TypesCreateAttributes   NXOpen::Weld::WeldJointBuilder::TypesCreateAttributes @endlink 
                        After setting the components, @link NXOpen::Weld::WeldJointBuilder::ShowJoints NXOpen::Weld::WeldJointBuilder::ShowJoints@endlink  should be called to create the welding joints. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * ShipComponent
            (
            );
            /**Returns  the collection of welding characteristics defined by attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::CharacteristicsBuilder * WeldingCharacteristics
            (
            );
            /**Returns  the welding joint curves. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectCurveList * Joint
            (
            );
            /**Returns  the master edge of a fillet weld. This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::MasterEdge NXOpen::Weld::JointItemBuilder::MasterEdge@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MasterEdge
            (
            );
            /**Returns  the placement face of a fillet weld. For example, on a profile it is the face that touches the plate. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::PlacementFace NXOpen::Weld::JointItemBuilder::PlacementFace@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PlacementFace
            (
            );
            /**Returns  the target face of a fillet weld.  For example, the plate face that the profile lies on. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::TargetFace NXOpen::Weld::JointItemBuilder::TargetFace@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetFace
            (
            );
            /**Returns  the primary face of a butt weld. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::PrimaryFace NXOpen::Weld::JointItemBuilder::PrimaryFace@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PrimaryFace
            (
            );
            /**Returns  the secondary face of a butt weld. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::SecondaryFace NXOpen::Weld::JointItemBuilder::SecondaryFace@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondaryFace
            (
            );
            /**Returns  the backing face. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::BackingFace NXOpen::Weld::JointItemBuilder::BackingFace@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BackingFace
            (
            );
            /**Returns  the primary edge of a butt weld. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::PrimaryEdge NXOpen::Weld::JointItemBuilder::PrimaryEdge@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PrimaryEdge
            (
            );
            /**Returns  the secondary edge of a butt weld. 
                        This should only be used when creating a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  feature.  
                        When editing a feature the @link NXOpen::Weld::JointItemBuilder::SecondaryEdge NXOpen::Weld::JointItemBuilder::SecondaryEdge@endlink  of the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  should be used
                        to access the data.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondaryEdge
            (
            );
            /**Returns  the prefix used for the welding joint Design Feature name in Collaborative Product Development mode  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString NamePrefix
            (
            );
            /**Sets  the prefix used for the welding joint Design Feature name in Collaborative Product Development mode  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetNamePrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix used for the welding joint Design Feature name in Collaborative Product Development mode  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            void SetNamePrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the prefix for the weld ID attribute, and the prefix for the name of the component if @link NXOpen::Weld::WeldJointBuilder::DestinationTypes NXOpen::Weld::WeldJointBuilder::DestinationTypes@endlink  is @link  NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent   NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent @endlink   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString JointPrefix
            (
            );
            /**Sets  the prefix for the weld ID attribute, and the prefix for the name of the component if @link NXOpen::Weld::WeldJointBuilder::DestinationTypes NXOpen::Weld::WeldJointBuilder::DestinationTypes@endlink  is @link  NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent   NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent @endlink   
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetJointPrefix
            (
                const NXString & prefix /** prefix */ 
            );
            /**Sets  the prefix for the weld ID attribute, and the prefix for the name of the component if @link NXOpen::Weld::WeldJointBuilder::DestinationTypes NXOpen::Weld::WeldJointBuilder::DestinationTypes@endlink  is @link  NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent   NXOpen::Weld::WeldJointBuilder::DestinationTypesNewComponent @endlink   
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            void SetJointPrefix
            (
                const char * prefix /** prefix */ 
            );
            /**Returns  the subset part where Design Control Elements are to be created 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SubsetPart
            (
            );
            /**Sets  the subset part where Design Control Elements are to be created 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetSubsetPart
            (
                NXOpen::Part * part /** part */ 
            );
            /** Deletes all joints set by @link NXOpen::Weld::WeldJointBuilder::Joint NXOpen::Weld::WeldJointBuilder::Joint@endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void Delete
            (
            );
            /**Returns  the saved work part 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * WorkPart
            (
            );
            /**Sets  the saved work part 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetWorkPart
            (
                NXOpen::Part * part /** part */ 
            );
            /**Returns  the list of limit builders. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilderList * LimitList
            (
            );
            /**Returns  the list of @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  objects. 
                        When editing a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  the @link NXOpen::Weld::WeldJointBuilder::Joint NXOpen::Weld::WeldJointBuilder::Joint@endlink  should be used
                        to access the output curves of the feature.  @link NXOpen::Weld::WeldJointBuilder::GetSingleJoint NXOpen::Weld::WeldJointBuilder::GetSingleJoint@endlink  is then used to access the 
                        @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  from the curve.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::JointItemBuilderList * JointList
            (
            );
            /** Splits all joints set by @link NXOpen::Weld::WeldJointBuilder::Joint NXOpen::Weld::WeldJointBuilder::Joint@endlink  defined by @link  NXOpen::Weld::WeldJointBuilder::SplitTypes   NXOpen::Weld::WeldJointBuilder::SplitTypes @endlink .  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void Split
            (
            );
            /** Updates all joints set by @link NXOpen::Weld::WeldJointBuilder::Joint NXOpen::Weld::WeldJointBuilder::Joint@endlink  to have the given type.  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void UpdateJointType
            (
                NXOpen::Weld::WeldJointBuilder::WeldTypes type /** type */ 
            );
            /** Deletes any joints that were not marked with a call to @link NXOpen::Weld::WeldJointBuilder::MarkJointsToKeep NXOpen::Weld::WeldJointBuilder::MarkJointsToKeep@endlink .  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void DeleteAllUnMarkedJoints
            (
            );
            /** Add welding characteristics inheritance information.  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void AddCharacteristicsInheritaceInformation
            (
            );
            /** Delete welding characteristics inheritance information.  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void DeleteCharacteristicsInheritaceInformation
            (
            );
            /** Marks all currently created welding joints so they do not get deleted when @link NXOpen::Weld::WeldJointBuilder::DeleteAllUnMarkedJoints NXOpen::Weld::WeldJointBuilder::DeleteAllUnMarkedJoints@endlink  is called from the dialog.  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void MarkJointsToKeep
            (
            );
            /**Returns  the number of segments to divide a joint when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesEqualSegments   NXOpen::Weld::WeldJointBuilder::SplitTypesEqualSegments @endlink  or
                        @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength @endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberSegments
            (
            );
            /**Sets  the number of segments to divide a joint when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesEqualSegments   NXOpen::Weld::WeldJointBuilder::SplitTypesEqualSegments @endlink  or
                        @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength @endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetNumberSegments
            (
                int numberSegments /** numbersegments */ 
            );
            /**Returns  the split angle to divide a joint when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesAngle   NXOpen::Weld::WeldJointBuilder::SplitTypesAngle @endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SplitAngle
            (
            );
            /**Sets  the split angle to divide a joint when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesAngle   NXOpen::Weld::WeldJointBuilder::SplitTypesAngle @endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetSplitAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the segment length when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkip   NXOpen::Weld::WeldJointBuilder::SplitTypesSkip @endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double SplitLength
            (
            );
            /**Sets  the segment length when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkip   NXOpen::Weld::WeldJointBuilder::SplitTypesSkip @endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetSplitLength
            (
                double length /** length */ 
            );
            /**Returns  the spacing length when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkip   NXOpen::Weld::WeldJointBuilder::SplitTypesSkip @endlink  or
                        the minium pitch when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength @endlink 
                        or @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipLengthPitch   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipLengthPitch @endlink .
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double SpacingLength
            (
            );
            /**Sets  the spacing length when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkip   NXOpen::Weld::WeldJointBuilder::SplitTypesSkip @endlink  or
                        the minium pitch when using @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipNumberLength @endlink 
                        or @link  NXOpen::Weld::WeldJointBuilder::SplitTypesSkipLengthPitch   NXOpen::Weld::WeldJointBuilder::SplitTypesSkipLengthPitch @endlink .
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetSpacingLength
            (
                double length /** length */ 
            );
            /**Returns  the maximum face gap used when determining if two bodies intersect. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumFaceGap
            (
            );
            /**Sets  the maximum face gap used when determining if two bodies intersect. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetMaximumFaceGap
            (
                double gapValue /** gapvalue */ 
            );
            /** Show joints will create joints using the method set by @link  NXOpen::Weld::WeldJointBuilder::Types   NXOpen::Weld::WeldJointBuilder::Types @endlink .
                        For @link  NXOpen::Weld::WeldJointBuilder::TypesCreateAutomatic   NXOpen::Weld::WeldJointBuilder::TypesCreateAutomatic @endlink  and @link  NXOpen::Weld::WeldJointBuilder::TypesCreateAttributes   NXOpen::Weld::WeldJointBuilder::TypesCreateAttributes @endlink 
                        components need to be set using @link NXOpen::Weld::WeldJointBuilder::ShipComponent NXOpen::Weld::WeldJointBuilder::ShipComponent@endlink .  For @link  NXOpen::Weld::WeldJointBuilder::TypesCreateManual   NXOpen::Weld::WeldJointBuilder::TypesCreateManual @endlink ,
                        the following need to be set:
                        When @link NXOpen::Weld::WeldJointBuilder::WeldTypes NXOpen::Weld::WeldJointBuilder::WeldTypes@endlink  is @link  NXOpen::Weld::WeldJointBuilder::WeldTypesFillet   NXOpen::Weld::WeldJointBuilder::WeldTypesFillet @endlink , the following 
                        methods need to be called to set the input data: @link NXOpen::Weld::WeldJointBuilder::MasterEdge NXOpen::Weld::WeldJointBuilder::MasterEdge@endlink , @link NXOpen::Weld::WeldJointBuilder::PlacementFace NXOpen::Weld::WeldJointBuilder::PlacementFace@endlink ,
                        @link  NXOpen::Weld::WeldJointBuilder::TargetFace   NXOpen::Weld::WeldJointBuilder::TargetFace @endlink .  
                        When @link NXOpen::Weld::WeldJointBuilder::WeldTypes NXOpen::Weld::WeldJointBuilder::WeldTypes@endlink  is @link  NXOpen::Weld::WeldJointBuilder::WeldTypesGroove   NXOpen::Weld::WeldJointBuilder::WeldTypesGroove @endlink , the following 
                        methods need to be called to set the input data: @link NXOpen::Weld::WeldJointBuilder::PrimaryFace NXOpen::Weld::WeldJointBuilder::PrimaryFace@endlink , @link NXOpen::Weld::WeldJointBuilder::PrimaryEdge NXOpen::Weld::WeldJointBuilder::PrimaryEdge@endlink ,
                        @link  NXOpen::Weld::WeldJointBuilder::SecondaryFace   NXOpen::Weld::WeldJointBuilder::SecondaryFace @endlink , @link  NXOpen::Weld::WeldJointBuilder::SecondaryEdge   NXOpen::Weld::WeldJointBuilder::SecondaryEdge @endlink . 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void ShowJoints
            (
            );
            /**Returns  the method used to split the joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::SplitTypes SplitOption
            (
            );
            /**Sets  the method used to split the joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetSplitOption
            (
                NXOpen::Weld::WeldJointBuilder::SplitTypes option /** option */ 
            );
            /**Returns  the weld type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::WeldTypes WeldType
            (
            );
            /**Sets  the weld type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetWeldType
            (
                NXOpen::Weld::WeldJointBuilder::WeldTypes type /** type */ 
            );
            /**Returns  the application where joint is created 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::Application CreatedApplication
            (
            );
            /**Sets  the application where joint is created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetCreatedApplication
            (
                NXOpen::Weld::WeldJointBuilder::Application application /** application */ 
            );
            /**Returns  the destination to create new joints 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::DestinationTypes Destination
            (
            );
            /**Sets  the destination to create new joints 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetDestination
            (
                NXOpen::Weld::WeldJointBuilder::DestinationTypes type /** type */ 
            );
            /**Returns  the creation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::Types Type
            (
            );
            /**Sets  the creation type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetType
            (
                NXOpen::Weld::WeldJointBuilder::Types type /** type */ 
            );
            /**Returns  the creation method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldJointBuilder::Types CreateMethod
            (
            );
            /**Sets  the creation method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetCreateMethod
            (
                NXOpen::Weld::WeldJointBuilder::Types type /** type */ 
            );
            /**Returns  the indication to not allow new joints to be created if they are duplicates of exising joints 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool DuplicateCheck
            (
            );
            /**Sets  the indication to not allow new joints to be created if they are duplicates of exising joints 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetDuplicateCheck
            (
                bool status /** status */ 
            );
            /**Returns  whether split joints should be associative 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeSplit
            (
            );
            /**Sets  whether split joints should be associative 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetAssociativeSplit
            (
                bool status /** status */ 
            );
            /**Returns  the indication to combine connected joints if they belong to the same body 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: bool CombineConnectedJoints
            (
            );
            /**Sets  the indication to combine connected joints if they belong to the same body 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetCombineConnectedJoints
            (
                bool status /** status */ 
            );
            /**Returns  the limits of the joint curve span. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * Limits
            (
            );
            /** Get the limits of an individual joint. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * GetJointLimits
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /** Gets the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  object associated to the input curve. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::JointItemBuilder * GetSingleJoint
            (
                NXOpen::Curve * curve /** Joint curve */
            );
            /** Indicates whether joint was changed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetJointChanged
            (
                NXOpen::Curve * curve /** Joint curve to check */
            );
            /** Indicate that joint was changed. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetJointChanged
            (
                NXOpen::Curve * curve /** Joint curve to check */,
                bool changed /** changed */ 
            );
            /** Creates the path to be used for the limits.  @return  Resulting path. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * CreateLimitsPath
            (
                NXOpen::Curve * jointCurve /** Joint curve used to create path. */
            );
            /** Updates the main collectors by copying data from Joint. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateCollectors
            (
                NXOpen::Curve * jointCurve /** Joint curve to use to update collectors */
            );
            /** Updates the joint curve after the limits change. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateJointAfterLimitsChange
            (
            );
            /** Updates the joint curve after the limits change. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateJointAfterLimitsChange
            (
                NXOpen::Die::DieLimitsBuilder * limits /** limits that changed */
            );
            /** Copy input limits to builder limits 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void CopyLimits
            (
                NXOpen::Die::DieLimitsBuilder * limits /** limits to copy */
            );
            /** Creates a joint from a feature. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateSingleJointFromFeature
            (
                NXOpen::Curve * featureCurve /** Weld Joint feature curve */,
                bool updateBuilder /** indicates where builder should be updated with information from the feature */
            );
            /** This method is for use with the variable bevel callback. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVariableBevelAngles
            (
                const std::vector<double> & variableAngles /** the variable angles. */
            );
            /** Gets variable bevel angles.  This method is for use with the variable bevel callback. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void GetVariableBevelAngles
            (
                std::vector<double> & variableAngles /** variableangles */ 
            );
            /** Gets connected parts for joint. Only connected parts that are partially or fully loaded will be returned. Any components that are unloaded will not be returned. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: void GetConnectedParts
            (
                std::vector<NXOpen::Assemblies::Component *> & parts /** parts */ 
            );
            /** Gets ports from the parts. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void FindPortsInParts
            (
                const std::vector<NXOpen::Assemblies::Component *> & parts /** the parts used to find the ports. */,
                std::vector<NXOpen::Routing::Port *> & ports /** the collection of ports in the parts */
            );
            /** Gets the primary thickness for a specified joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GetPrimaryThickness
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /** Gets the primary secondary for a specified joint 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GetSecondaryThickness
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /** Gets the angle between the fillet weld mold faces, and the target faces, or butt weld primary and secondary faces. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GetAngleBetween
            (
            );
            /** Gets the long point status. A long point indicates only trimming and no extension is needed to to meeting the body being welded to. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetIsLongPoint
            (
            );
            /** Returns status value of true if corner joint is an open case which means the placement face only touches the target face at the master edge. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsCornerOpen
            (
            );
            /** Returns status value of true if this is a pipe welding joint. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsPipeJoint
            (
            );
            /** Creates a @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  object. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::JointItemBuilder * NewItem
            (
            );
            /**Gets the @link NXOpen::Weld::JointItemBuilder NXOpen::Weld::JointItemBuilder@endlink  objects and curves which were just created by @link NXOpen::Weld::WeldJointBuilder::ShowJoints NXOpen::Weld::WeldJointBuilder::ShowJoints@endlink .
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void GetNewlyCreatedJoints
            (
                std::vector<NXOpen::Curve *> & curves /** curves */ ,
                std::vector<NXOpen::Weld::JointItemBuilder *> & newItemBuilder /** newitembuilder */ 
            );
            /** Sets a message to display after callback processing ends 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetCallbackMessage
            (
                const NXString & message /** Message to display to user */
            );
            /** Sets a message to display after callback processing ends 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            void SetCallbackMessage
            (
                const char * message /** Message to display to user */
            );
            /** Sets an error message to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: void SetErrorMessage
            (
                const NXString & message /** Message to display to user */
            );
            /** Sets an error message to display 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            void SetErrorMessage
            (
                const char * message /** Message to display to user */
            );
            /** Gets the joint curve mid point, tangent, and face normals at the mid point from the primary and secondary bodies.  @return  Equals true if data was returned. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool GetMidPointInformation
            (
                NXOpen::Weld::WeldJointBuilder::CoordinateSystem desiredCoordinateSystem /** Coordinate system of data returned in jointMidPointData */,
                NXOpen::Weld::WeldJointBuilder::JointMidPointData* jointMidPointData /** The joint mid point, tangent and face normals. */
            );
            /**Returns  the color, font, and width of the butt joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * ButtColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the T-joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * TJointColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the lap joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * LapColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the socket joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * SocketColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the mechanical joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * MechanicalColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the corner joint curves.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * CornerColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the sleeve joint curves.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * SleeveColorFontWidth
            (
            );
            /**Returns  the color, font, and width of the boss joint curves.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * BossColorFontWidth
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
