#ifndef NXOpen_DIAGRAMMING_TABLES_TYPES_HXX_INCLUDED
#define NXOpen_DIAGRAMMING_TABLES_TYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Diagramming_Tables_Types.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class TaggedObject;
    namespace Diagramming
    {
        namespace Tables
        {
            /** Represents the table anchor location. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum AnchorLocation
            {
                AnchorLocationTopLeft/** Top left anchor location */,
                AnchorLocationTopRight/** Top right anchor location */,
                AnchorLocationBottomLeft/** Bottom left anchor location */,
                AnchorLocationBottomRight/** Bottom right anchor location */
            };

            /** Represents the table header location. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum HeaderLocation
            {
                HeaderLocationStart/** Start header location */,
                HeaderLocationEnd/** End header location */
            };

            /** Represents the table header orientation. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum HeaderOrientation
            {
                HeaderOrientationVertical/** Vertical header orientation */,
                HeaderOrientationHorizontal/** Horizontal header orientation */
            };

            /** Represents the cell content alignment. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum ContentAlignment
            {
                ContentAlignmentTopLeft/** Top left content alignment */,
                ContentAlignmentTopCenter/** Top center content alignment */,
                ContentAlignmentTopRight/** Top right content alignment */,
                ContentAlignmentMiddleLeft/** Middle left content alignment */,
                ContentAlignmentMiddleCenter/** Middle center content alignment */,
                ContentAlignmentMiddleRight/** Middle right content alignment */,
                ContentAlignmentBottomLeft/** Bottom left content alignment */,
                ContentAlignmentBottomCenter/** Bottom center content alignment */,
                ContentAlignmentBottomRight/** Bottom right content alignment */
            };

            /** Represents the cell overflow behavior. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum OverflowBehavior
            {
                OverflowBehaviorWrap/** Wrap overflow behavior */,
                OverflowBehaviorTruncate/** Truncate overflow behavior */,
                OverflowBehaviorOverflowBorder/** Overflow border overflow behavior */,
                OverflowBehaviorShrinkToFit/** Shrink to fit overflow behavior */,
                OverflowBehaviorSuffix/** Suffix overflow behavior */
            };

            /** Represents the cell zero display. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum ZeroDisplay
            {
                ZeroDisplayZero/** Zero filled display */,
                ZeroDisplayDash/** Dash filled display */,
                ZeroDisplayEmpty/** Empty zero display */
            };

            /** Represents the column/row sizing method. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum SizingMethod
            {
                SizingMethodAuto/** Auto sizing method */,
                SizingMethodFixed/** Fixed sizing method */
            };

            /** Represents the table continuation location. 
             <br>  Created in NX10.0.0.  <br>  
            */
            enum ContinuationLocation
            {
                ContinuationLocationUp/** Up continuation location */,
                ContinuationLocationDown/** Down continuation location */,
                ContinuationLocationLeft/** Left continuation location */,
                ContinuationLocationRight/** Right continuation location */,
                ContinuationLocationNextSheet/** Next sheet continuation location */
            };

             /** Represents sized symbol information. 
             <br>  Created in NX10.0.0.  <br>  
            */

            struct SizedSymbol
            {
                public: /** Padding from last symbol */double PaddingFromLastSymbol;
                public: /** The symbol */NXOpen::TaggedObject * Symbol;
                public: /** The symbol height */double Height;
                public: /** The symbol width */double Width;
                public: SizedSymbol() :
                    PaddingFromLastSymbol(),
                    Symbol(),
                    Height(),
                    Width()
                {
                }
                /** Constructor for the SizedSymbol struct. */ 
                public: SizedSymbol(double paddingFromLastSymbolInitial /** Padding from last symbol */, 
                        NXOpen::TaggedObject * symbolInitial /** The symbol */, 
                        double heightInitial /** The symbol height */, 
                        double widthInitial /** The symbol width */) :
                    PaddingFromLastSymbol(paddingFromLastSymbolInitial),
                    Symbol(symbolInitial),
                    Height(heightInitial),
                    Width(widthInitial)
                {
                }
            };

            /** Represents the table text direction. 
             <br>  Created in NX1872.0.0.  <br>  
            */
            enum TextDirection
            {
                TextDirectionHorizontal/** Horizontal left-reading text orientation */,
                TextDirectionVerticalRightReading/** Vertical text rotated from horizontal 270 degrees clockwise */,
                TextDirectionVerticalLeftReading/** Vertical text rotated from horizontal 90 degrees clockwise */
            };

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
