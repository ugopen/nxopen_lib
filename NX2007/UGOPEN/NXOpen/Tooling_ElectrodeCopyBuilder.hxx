#ifndef NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ElectrodeCopyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_BooleanToolBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ElectrodeCopyBuilder;
    }
    class Axis;
    class Builder;
    class CoordinateSystem;
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanToolBuilder;
    }
    class NXObject;
    class SelectBodyList;
    class SelectDatumPlaneList;
    class SelectFaceList;
    class TaggedObject;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class _ElectrodeCopyBuilderBuilder;
        class ElectrodeCopyBuilderImpl;
        /** The ElectrodeCopy builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder  NXOpen::Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Angle.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        BooleanTool.ToolOption </term> <description> 
         
        FaceOrPlane </description> </item> 

        <item><term> 
         
        DefNum </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        SelType </term> <description> 
         
        Transform </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ElectrodeCopyBuilder : public NXOpen::Builder
        {
            /** Represents an index to copy type */
            public: enum Copy
            {
                CopyTransform/** the method is transform */,
                CopyMirror/** the method is mirror */
            };

            /** The body motion types */
            public: enum TransformMotionTypes
            {
                TransformMotionTypesFaceToFace/** Face to Face */,
                TransformMotionTypesCSYSToCSYS/** CSYS to CSYS */,
                TransformMotionTypesRotation/** Rotation */,
                TransformMotionTypesDynamic/** Dynamic */
            };

            /** The installation method of create clone object */
            public: enum CloneMethod
            {
                CloneMethodUseLogFile/** the clone action is use log file */,
                CloneMethodInternalClone/** the clone action is internal clone */,
                CloneMethodPartRename/** the clone action is part rename */,
                CloneMethodSaveAs/** the clone action is save as */
            };

            private: ElectrodeCopyBuilderImpl * m_electrodecopybuilder_impl;
            private: friend class  _ElectrodeCopyBuilderBuilder;
            protected: ElectrodeCopyBuilder();
            public: ~ElectrodeCopyBuilder();
            /**Returns  the copy type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ElectrodeCopyBuilder::Copy SelType
            (
            );
            /**Sets  the copy type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelType
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::Copy selType /** seltype */ 
            );
            /**Returns  the selected electrode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectElectrode
            (
            );
            /**Returns  the transform motion type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ElectrodeCopyBuilder::TransformMotionTypes TransformMotionType
            (
            );
            /**Sets  the transform motion type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransformMotionType
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::TransformMotionTypes type /** type */ 
            );
            /**Returns  the selected 'from' face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectFromFace
            (
            );
            /**Returns  the selected 'to' face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelToFace
            (
            );
            /**Returns  the from coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * SelectFromCsys
            (
            );
            /**Sets  the from coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectFromCsys
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the destination coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * SelectToCsys
            (
            );
            /**Sets  the destination coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectToCsys
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the angle of rotation value. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the angular axis of transform motion option. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * AngularAxis
            (
            );
            /**Sets  the angular axis of transform motion option. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetAngularAxis
            (
                NXOpen::Axis * angularAxis /** angularaxis */ 
            );
            /**Returns  the location of the destination component. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d ManipulatorOrigin
            (
            );
            /**Sets  the location of the destination component. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetManipulatorOrigin
            (
                const NXOpen::Point3d & manipulatorOrigin /** manipulatororigin */ 
            );
            /**Returns  the orientation of the destination component. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 ManipulatorMatrix
            (
            );
            /**Sets  the orientation of the destination component. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetManipulatorMatrix
            (
                const NXOpen::Matrix3x3 & manipulatorMatrix /** manipulatormatrix */ 
            );
            /**Returns  the mirror plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDatumPlaneList * MirrorPlane
            (
            );
            /**Returns  the boolean tool 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanToolBuilder * BooleanTool
            (
            );
            /**Returns  the number of transform 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DefNum
            (
            );
            /**Sets  the number of transform 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefNum
            (
                int defNum /** defnum */ 
            );
            /**Returns  the setting indicates the copy is a new part or an instance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CopyInstance
            (
            );
            /**Sets  the setting indicates the copy is a new part or an instance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCopyInstance
            (
                bool copyInstance /** copyinstance */ 
            );
            /**Returns  the new electrode name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the new electrode name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /**Returns  the electrode blank builder. 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * ElectrodeBlankBuilder
            (
            );
            /**Sets  the electrode blank builder. 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetElectrodeBlankBuilder
            (
                NXOpen::TaggedObject * builderTag /** electrode blank builder tag */
            );
            /**Returns  the clone client data. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::CloneObject * CloneObject
            (
            );
            /** The part name of electrode blank. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetBlankPartName
            (
                const NXString & blankPartName /** blank part name */
            );
            /** The part name of electrode blank. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetBlankPartName
            (
                const char * blankPartName /** blank part name */
            );
            /** Copy an electrode blank from one face to another face.  @return  new part tag 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXObject * CopyElectrode
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::Copy copyType /** copy type */,
                NXOpen::NXObject * eleBody /** the electrode blank object that is to be copied */,
                NXOpen::NXObject * fromface /** the 'from' face object used for transform electrode or datum plane object used for mirror electrode */,
                NXOpen::NXObject * toface /** the 'to' face object used for transform electrode */
            );
            /** Update parameter data to electrode blank builder.  @return  model path 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXString UpdateParameterData
            (
                NXOpen::TaggedObject * blankBuilderTag /** electrode blank builder tag*/,
                NXOpen::TaggedObject * partTag /** electrode blank body tag */,
                std::vector<NXString> & paraNames /** parameter name */
            );
            /** Sets the installation method of create clone object. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInstallationMethod
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::CloneMethod installationMethod /** installtation method */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
