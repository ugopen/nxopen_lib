#ifndef NXOpen_AME_EXTERNALOBJECTSTYPEMAPPINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_EXTERNALOBJECTSTYPEMAPPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ExternalObjectsTypeMappingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ManageTypeMappingBuilder.hxx>
#include <NXOpen/AME_MappingSourceBuilder.hxx>
#include <NXOpen/AME_SelectADTypeBuilder.hxx>
#include <NXOpen/AME_SelectExternalObjectBuilder.hxx>
#include <NXOpen/AME_SelectSolutionTemplateBuilder.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ExternalObjectsTypeMappingBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class ManageTypeMappingBuilder;
    }
    namespace AME
    {
        class MappingSourceBuilder;
    }
    namespace AME
    {
        class SelectADTypeBuilder;
    }
    namespace AME
    {
        class SelectExternalObjectBuilder;
    }
    namespace AME
    {
        class SelectSolutionTemplateBuilder;
    }
    class NXObject;
    namespace AME
    {
        class _ExternalObjectsTypeMappingBuilderBuilder;
        class ExternalObjectsTypeMappingBuilderImpl;
        /** This builder class is used to update domain relevancy information on the external objects.
                This is also used to do the type mapping and filter the external objects by its source.
             <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateExternalObjectsTypeMappingBuilder  NXOpen::AME::AMEManager::CreateExternalObjectsTypeMappingBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ExternalObjectsTypeMappingBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            private: ExternalObjectsTypeMappingBuilderImpl * m_externalobjectstypemappingbuilder_impl;
            private: friend class  _ExternalObjectsTypeMappingBuilderBuilder;
            protected: ExternalObjectsTypeMappingBuilder();
            public: ~ExternalObjectsTypeMappingBuilder();
            /**Returns  the builder for the mapping source selection 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MappingSourceBuilder * MappingSource
            (
            );
            /**Returns  the builder for the manage type mapping 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ManageTypeMappingBuilder * ManageTypeMapping
            (
            );
            /**Returns  the builder for the selection of external type object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectExternalObjectBuilder * SelectExternalObject
            (
            );
            /**Returns  the builder for the selection of AD type item 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectADTypeBuilder * SelectADType
            (
            );
            /**Returns  the specifed template variant
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * SpecifiedTemplateVariant
            (
            );
            /**Sets  the specifed template variant
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSpecifiedTemplateVariant
            (
                NXOpen::NXObject * specifiedTemplateVariant /** specifiedtemplatevariant */ 
            );
            /** Add type mapping with an automation designer type for the list of external object types 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapToSelectedObject
            (
                const std::vector<NXOpen::NXObject *> & components /** components */ 
            );
            /**Returns  the builder for the select solution template block
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectSolutionTemplateBuilder * SelectSolutionTemplate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
