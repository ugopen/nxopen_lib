#ifndef NXOpen_CAE_AUTOHEALGEOMETRYBUILDER_HXX_INCLUDED
#define NXOpen_CAE_AUTOHEALGEOMETRYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AutoHealGeometryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AutoHealGeometryBuilder;
    }
    class Builder;
    class Expression;
    class SelectDisplayableObjectList;
    namespace CAE
    {
        class _AutoHealGeometryBuilderBuilder;
        class AutoHealGeometryBuilderImpl;
        /** Builder for creating Auto Heal Geometry  <br> To create a new instance of this class, use @link NXOpen::CAE::AbstractionManager::CreateAutoHealGeometryBuilder  NXOpen::CAE::AbstractionManager::CreateAutoHealGeometryBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CurvatureAbstractionSetting </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MergeEdgeSetting </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        VertexAngle.Value </term> <description> 
         
        15 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AutoHealGeometryBuilder : public NXOpen::Builder
        {
            private: AutoHealGeometryBuilderImpl * m_autohealgeometrybuilder_impl;
            private: friend class  _AutoHealGeometryBuilderBuilder;
            protected: AutoHealGeometryBuilder();
            public: ~AutoHealGeometryBuilder();
            /**Returns  the selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Selection
            (
            );
            /**Returns  the minimum element length tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Tolerance
            (
            );
            /** The autogenerate small feature tolerance button 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SmallFeatureAutoSize
            (
            );
            /**Returns  the curvature abstraction option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CurvatureAbstractionSetting
            (
            );
            /**Sets  the curvature abstraction option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurvatureAbstractionSetting
            (
                bool curvatureAbstractionSetting /** curvatureabstractionsetting */ 
            );
            /**Returns  the suppress hole option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool SuppressHoleSetting
            (
            );
            /**Sets  the suppress hole option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSuppressHoleSetting
            (
                bool suppressHoleSetting /** suppressholesetting */ 
            );
            /**Returns  the hole diameter criterion used in suppress hole 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the point creation criterion used in suppress hole 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int PointCreation
            (
            );
            /**Sets  the point creation criterion used in suppress hole 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointCreation
            (
                int pointCreation /** pointcreation */ 
            );
            /**Returns  the merge edge option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeEdgeSetting
            (
            );
            /**Sets  the merge edge option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMergeEdgeSetting
            (
                bool mergeEdgeSetting /** mergeedgesetting */ 
            );
            /**Returns  the vertex angle criterion used in merging edges 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * VertexAngle
            (
            );
            /**Returns  the target element size 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TargetElementSize
            (
            );
            /** The target element auto size button 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void TargetElementAutoSize
            (
            );
            /**Returns  the minimum element length option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumElementLengthOption
            (
            );
            /**Sets  the minimum element length option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumElementLengthOption
            (
                bool minimumElementLengthOption /** minimumelementlengthoption */ 
            );
            /**Returns  the minimum element length value 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumElementLengthValue
            (
            );
            /**Returns  the move nodes off geometry option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool MoveNodesOffGeometryOption
            (
            );
            /**Sets  the move nodes off geometry option 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMoveNodesOffGeometryOption
            (
                bool moveNodesOffGeometryOption /** movenodesoffgeometryoption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
