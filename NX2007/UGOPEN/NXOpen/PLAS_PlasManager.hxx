#ifndef NXOpen_PLAS_PLASMANAGER_HXX_INCLUDED
#define NXOpen_PLAS_PLASMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PLAS_PlasManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_ElementGroup.hxx>
#include <NXOpen/PLAS_ControlLoopBuilder.hxx>
#include <NXOpen/PLAS_RunBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_plas_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PLAS
    {
        class PlasManager;
    }
    class Part;
    namespace PLAS
    {
        class ControlLoopBuilder;
    }
    namespace PLAS
    {
        class Run;
    }
    namespace PLAS
    {
        class RunBuilder;
    }
    namespace PLAS
    {
        class PlasManagerImpl;
        /** A manager to deal with all objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_PLASEXPORT  PlasManager
        {
            private: PlasManagerImpl * m_plasmanager_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PlasManager(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PlasManager();
            /** Creates a @link PLAS::RunBuilder PLAS::RunBuilder@endlink . 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PLAS::RunBuilder * CreateRunBuilder
            (
                NXOpen::PLAS::Run * run /** @link PLAS::Run PLAS::Run@endlink  to be edited, if NULL then create a new one */
            );
            /**Sets  the active run 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetActiveRun
            (
                NXOpen::PLAS::Run * run /** run */ 
            );
            /**Returns  the active run 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PLAS::Run * ActiveRun
            (
            );
            /** Creates a @link PLAS::ControlLoopBuilder PLAS::ControlLoopBuilder@endlink . 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PLAS::ControlLoopBuilder * CreateControlLoopBuilder
            (
                NXOpen::PLAS::Run * run /** @link PLAS::ControlLoop PLAS::ControlLoop@endlink  to be edited, if NULL then create a new one */
            );
            /**Returns  the active control loop 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PLAS::Run * ActiveControlLoop
            (
            );
            /**Sets  the active control loop 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetActiveControlLoop
            (
                NXOpen::PLAS::Run * controlLoop /** controlloop */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
