#ifndef NXOpen_PREFERENCES_SHADINGVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_SHADINGVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_ShadingViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IShadingViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class ShadingViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class IShadingViewPreferences;
    }
    namespace Preferences
    {
        class ShadingViewPreferencesImpl;
        /** Represents set of Shading View Preferences applicable to drafting views.  <br> To obtain an instance of this class use @link Preferences::ViewPreferences::Shading Preferences::ViewPreferences::Shading@endlink   <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  ShadingViewPreferences: public virtual NXOpen::Preferences::IShadingViewPreferences
        {
            private: ShadingViewPreferencesImpl * m_shadingviewpreferences_impl;
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ShadingViewPreferences(NXOpen::Preferences::ViewPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ShadingViewPreferences();
            /**Sets  the rendering style.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderingStyle
            (
                NXOpen::Preferences::ShadingRenderingStyleOption renderingStyleOption /** rendering style option */ 
            );
            /**Returns  the rendering style.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ShadingRenderingStyleOption RenderingStyle
            (
            );
            /**Sets  the shaded cut face color. The value should be between 1 and 216. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShadedCutFaceColor
            (
                int shadedCutFaceColor /** shaded cut face color */ 
            );
            /**Returns  the shaded cut face color. The value should be between 1 and 216. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int ShadedCutFaceColor
            (
            );
            /**Sets  the visible wireframe override color. The value should be between 1 and 216.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideVisibleWireframeColor
            (
                int overrideVisibleWireframeColor /** overridevisiblewireframecolor */ 
            );
            /**Returns  the visible wireframe override color. The value should be between 1 and 216.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int OverrideVisibleWireframeColor
            (
            );
            /**Sets  the hidden wireframe override color. The value should be between 1 and 216.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideHiddenWireframeColor
            (
                int overrideHiddenWireframeColor /** overridehiddenwireframecolor */ 
            );
            /**Returns  the hidden wireframe override color. The value should be between 1 and 216.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int OverrideHiddenWireframeColor
            (
            );
            /**Sets  the shading tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShadingTolerance
            (
                NXOpen::Preferences::ShadingToleranceOption shadingTolerance /** shading tolerance */ 
            );
            /**Returns  the shading tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ShadingToleranceOption ShadingTolerance
            (
            );
            /**Sets  the custom edge tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomEdgeTolerance
            (
                double customEdgeTolerance /** custom edge tolerance */ 
            );
            /**Returns  the custom edge tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double CustomEdgeTolerance
            (
            );
            /**Sets  the custom face tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomFaceTolerance
            (
                double customFaceTolerance /** custom face tolerance */ 
            );
            /**Returns  the custom face tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double CustomFaceTolerance
            (
            );
            /**Sets  the custom angle tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomAngleTolerance
            (
                double customAngleTolerance /** custom angle tolerance */ 
            );
            /**Returns  the custom angle tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double CustomAngleTolerance
            (
            );
            /**Sets  the shininess tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShininess
            (
                double shininessTolerance /** shininess tolerance */ 
            );
            /**Returns  the shininess tolerance.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Shininess
            (
            );
            /**Sets  the two sided light toggle data.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTwoSidedLight
            (
                bool twoSidedLight /** two sided light */ 
            );
            /**Returns  the two sided light toggle data.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool TwoSidedLight
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
