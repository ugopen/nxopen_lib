#ifndef NXOpen_PDMDEBUGSESSION_HXX_INCLUDED
#define NXOpen_PDMDEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDMDebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttrTypeKey.hxx>
#include <NXOpen/DateItemBuilder.hxx>
#include <NXOpen/PlmObjectNode.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PDMDebugSession;
    class DebugSession;
    class AttrTypeKey;
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class SmartSaveObject;
    }
    class PlmObjectNode;
    class PDMDebugSessionImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX PDM Autotest.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::DebugSession  NXOpen::DebugSession @endlink  <br> 
     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  PDMDebugSession
    {

        /// \cond NX_NO_DOC 
         /** Performance statistics 
         <br>  Created in NX6.0.0.  <br>  
        */
        public:
        struct PerformanceStatistics
        {
            public: /** PDI calls */int NumberPdiCalls;
            public: /** SOA calls */int NumberSoaCalls;
            public: /** SQL calls */int NumberSqlCalls;
            public: /** FCC calls */int NumberFccCalls;
            public: PerformanceStatistics() :
                NumberPdiCalls(),
                NumberSoaCalls(),
                NumberSqlCalls(),
                NumberFccCalls()
            {
            }
            /** Constructor for the PerformanceStatistics struct. */ 
            public: PerformanceStatistics(int numberPdiCallsInitial /** PDI calls */, 
                    int numberSoaCallsInitial /** SOA calls */, 
                    int numberSqlCallsInitial /** SQL calls */, 
                    int numberFccCallsInitial /** FCC calls */) :
                NumberPdiCalls(numberPdiCallsInitial),
                NumberSoaCalls(numberSoaCallsInitial),
                NumberSqlCalls(numberSqlCallsInitial),
                NumberFccCalls(numberFccCallsInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** Structure of flags to enable controlling the printing of NX part info  
         <br>  Created in NX9.0.0.  <br>  
        */
        public:
        struct NxPartInfoFlags
        {
            public: /** File String Valid or not */bool PrintFileString;
            public: /** Dataset Name and Version */bool PrintDataset;
            public: /** Dump the Access Mode */bool PrintAccessMode;
            public: /** Dump the IsNew flag */bool PrintIsNew;
            public: /** Part Revision is Cached or not */bool PrintPartRevIsCached;
            public: /** Decide if NX Attributes Info to be dump or not */bool PrintNxAttributesInfo;
            public: /** Dump the Attributes modified flag */bool PrintAreAttrModified;
            public: /** Dump the lock status */bool PrintLockStatus;
            public: /** Dump the Rep Rev lock status */bool PrintRepRevLockStatus;
            public: /** Latest Datasets Version */bool PrintLatestDatasetVer;
            public: /** Decide if Component Data Info to be dump or not */bool PrintCompDataInfo;
            public: /** Dump the IsNonGeometric flag from table entry. This flag is Legacy flag, As table entry not getting updated on Save we are not getting any value here*/bool PrintIsNgc;
            public: /** Decide if Seed Data to be dump or not */bool PrintSeedData;
            public: /** Decide if udf part to be dump or not */bool PrintUdfPart;
            public: /** Dump the Force Pse Precedence flag */bool PrintForcePsePrecedence;
            public: /** Decide if File Values to be dump or not */bool PrintFileValues;
            public: /** Decide if Configure Revs to be dump or not */bool PrintConfRev;
            public: /** Dump the part type */bool PrintPartType;
            public: /** Decide if DB Attributes to be dump or not */bool PrintDbAttributes;
            public: /** print work part db attributes */ bool PrintWorkPartDbAttributes;
            public: /** Dump the Owning User and Owning Group */bool PrintOwningUserGroup;
            public: /** Foreign Derived, Foreign Part info, Dataset Version */bool PrintForeignInfo;
            public: /** Number of values for array property */bool PrintAltIds;
            public: /** Dump the Transient State */bool PrintTransientState;
            public: /** Dump the Incomplete State */bool PrintIncompleteState;
            public: /** Dump the Precise RepRev State */bool PrintPreciseReprevState;
            public: /** Dump all dates */bool PrintDateValues;
            public: /** Dump the Precise State from PART_part */bool PrintPreciseState;
            public: /** Decide if Component reference only Info to be dump or not */bool PrintCompIsRefOnly;
            public: /** Dump the Non Geometric state from instance */bool PrintNgcState;
            public: /** Dump the used configuration context of the part */bool PrintUsedConfigurationContext;
            public: /** Dump the suppression state from instance */bool PrintCompSuppressionState;
            public: /** Dump the Owning User and Group from TC */bool PrintOwningUserGroupFromTc;
            public: /** Dump the Attributes of Part Attribute Groups */bool PrintPartAttributeGroups;
            public: NxPartInfoFlags() :
                PrintFileString(),
                PrintDataset(),
                PrintAccessMode(),
                PrintIsNew(),
                PrintPartRevIsCached(),
                PrintNxAttributesInfo(),
                PrintAreAttrModified(),
                PrintLockStatus(),
                PrintRepRevLockStatus(),
                PrintLatestDatasetVer(),
                PrintCompDataInfo(),
                PrintIsNgc(),
                PrintSeedData(),
                PrintUdfPart(),
                PrintForcePsePrecedence(),
                PrintFileValues(),
                PrintConfRev(),
                PrintPartType(),
                PrintDbAttributes(),
                PrintWorkPartDbAttributes(),
                PrintOwningUserGroup(),
                PrintForeignInfo(),
                PrintAltIds(),
                PrintTransientState(),
                PrintIncompleteState(),
                PrintPreciseReprevState(),
                PrintDateValues(),
                PrintPreciseState(),
                PrintCompIsRefOnly(),
                PrintNgcState(),
                PrintUsedConfigurationContext(),
                PrintCompSuppressionState(),
                PrintOwningUserGroupFromTc(),
                PrintPartAttributeGroups()
            {
            }
            /** Constructor for the NxPartInfoFlags struct. */ 
            public: NxPartInfoFlags(bool printFileStringInitial /** File String Valid or not */, 
                    bool printDatasetInitial /** Dataset Name and Version */, 
                    bool printAccessModeInitial /** Dump the Access Mode */, 
                    bool printIsNewInitial /** Dump the IsNew flag */, 
                    bool printPartRevIsCachedInitial /** Part Revision is Cached or not */, 
                    bool printNxAttributesInfoInitial /** Decide if NX Attributes Info to be dump or not */, 
                    bool printAreAttrModifiedInitial /** Dump the Attributes modified flag */, 
                    bool printLockStatusInitial /** Dump the lock status */, 
                    bool printRepRevLockStatusInitial /** Dump the Rep Rev lock status */, 
                    bool printLatestDatasetVerInitial /** Latest Datasets Version */, 
                    bool printCompDataInfoInitial /** Decide if Component Data Info to be dump or not */, 
                    bool printIsNgcInitial /** Dump the IsNonGeometric flag from table entry. This flag is Legacy flag, As table entry not getting updated on Save we are not getting any value here*/, 
                    bool printSeedDataInitial /** Decide if Seed Data to be dump or not */, 
                    bool printUdfPartInitial /** Decide if udf part to be dump or not */, 
                    bool printForcePsePrecedenceInitial /** Dump the Force Pse Precedence flag */, 
                    bool printFileValuesInitial /** Decide if File Values to be dump or not */, 
                    bool printConfRevInitial /** Decide if Configure Revs to be dump or not */, 
                    bool printPartTypeInitial /** Dump the part type */, 
                    bool printDbAttributesInitial /** Decide if DB Attributes to be dump or not */, 
                    bool printWorkPartDbAttributesInitial /** print work part db attributes */ , 
                    bool printOwningUserGroupInitial /** Dump the Owning User and Owning Group */, 
                    bool printForeignInfoInitial /** Foreign Derived, Foreign Part info, Dataset Version */, 
                    bool printAltIdsInitial /** Number of values for array property */, 
                    bool printTransientStateInitial /** Dump the Transient State */, 
                    bool printIncompleteStateInitial /** Dump the Incomplete State */, 
                    bool printPreciseReprevStateInitial /** Dump the Precise RepRev State */, 
                    bool printDateValuesInitial /** Dump all dates */, 
                    bool printPreciseStateInitial /** Dump the Precise State from PART_part */, 
                    bool printCompIsRefOnlyInitial /** Decide if Component reference only Info to be dump or not */, 
                    bool printNgcStateInitial /** Dump the Non Geometric state from instance */, 
                    bool printUsedConfigurationContextInitial /** Dump the used configuration context of the part */, 
                    bool printCompSuppressionStateInitial /** Dump the suppression state from instance */, 
                    bool printOwningUserGroupFromTcInitial /** Dump the Owning User and Group from TC */, 
                    bool printPartAttributeGroupsInitial /** Dump the Attributes of Part Attribute Groups */) :
                PrintFileString(printFileStringInitial),
                PrintDataset(printDatasetInitial),
                PrintAccessMode(printAccessModeInitial),
                PrintIsNew(printIsNewInitial),
                PrintPartRevIsCached(printPartRevIsCachedInitial),
                PrintNxAttributesInfo(printNxAttributesInfoInitial),
                PrintAreAttrModified(printAreAttrModifiedInitial),
                PrintLockStatus(printLockStatusInitial),
                PrintRepRevLockStatus(printRepRevLockStatusInitial),
                PrintLatestDatasetVer(printLatestDatasetVerInitial),
                PrintCompDataInfo(printCompDataInfoInitial),
                PrintIsNgc(printIsNgcInitial),
                PrintSeedData(printSeedDataInitial),
                PrintUdfPart(printUdfPartInitial),
                PrintForcePsePrecedence(printForcePsePrecedenceInitial),
                PrintFileValues(printFileValuesInitial),
                PrintConfRev(printConfRevInitial),
                PrintPartType(printPartTypeInitial),
                PrintDbAttributes(printDbAttributesInitial),
                PrintWorkPartDbAttributes(printWorkPartDbAttributesInitial),
                PrintOwningUserGroup(printOwningUserGroupInitial),
                PrintForeignInfo(printForeignInfoInitial),
                PrintAltIds(printAltIdsInitial),
                PrintTransientState(printTransientStateInitial),
                PrintIncompleteState(printIncompleteStateInitial),
                PrintPreciseReprevState(printPreciseReprevStateInitial),
                PrintDateValues(printDateValuesInitial),
                PrintPreciseState(printPreciseStateInitial),
                PrintCompIsRefOnly(printCompIsRefOnlyInitial),
                PrintNgcState(printNgcStateInitial),
                PrintUsedConfigurationContext(printUsedConfigurationContextInitial),
                PrintCompSuppressionState(printCompSuppressionStateInitial),
                PrintOwningUserGroupFromTc(printOwningUserGroupFromTcInitial),
                PrintPartAttributeGroups(printPartAttributeGroupsInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** Structure of flags to enable controlling the printing of TC part info  
         <br>  Created in NX8.5.0.  <br>  
        */
        public:
        struct TcPartInfoFlags
        {
            public: /** JT Dataset */bool PrintJt;
            public: /** CAE Relations */bool PrintCae;
            public: /** PDF Dataset */bool PrintPdf;
            public: /** CGM Dataset */bool PrintCgm;
            public: /** WAVE Relations */bool PrintWave;
            public: /** Expressions */bool PrintExp;
            public: /** Specification Relations */bool PrintSpecification;
            public: /** Manifestation Relations */bool PrintManifestation;
            public: /** Alterps */bool PrintAltrep;
            public: /** Simulation Datasets */bool PrintSimulation;
            public: /** Scenario Datasets */bool PrintScenario;
            public: /** Item Master Form */bool PrintMasterForm;
            public: /** ItemRev Master Form */bool PrintRevMasterForm;
            public: /** UGPart Attribute Form */bool PrintAttrForm;
            public: /** Named References */bool PrintNamedRefs;
            public: /** Booklet Rule */bool PrintBookletRule;
            public: /** Filter source item info */bool PrintFilteredSourceItemInfo;
            public: /** Number of values for array property */bool PrintNumberOfValuesForArrayProperty;
            public: /** Absolute Occurrence Info */bool PrintAbsoluteOccurrenceInfo;
            public: /** Occurrence uid for BOMLine */bool PrintBlOccurrenceUid;
            public: /** Occurrence Type for BOMLine */bool PrintBlOccType;
            public: /** Skip printing bl_sequence_no due to known wobble */bool SkipPrintToPreventBlSeqNoWobble;
            public: /** Dump all dates */bool PrintDateValues;
            public: /** Absolute Transform info */bool PrintAbsoluteTransformInfo;
            public: /** Print size of the ref list vector */bool PrintRefListSize;
            public: /** Print owned (disclosed) model views of the Item-Revision */bool PrintOwnedModelViews;
            public: /** Print Project Information */bool PrintProjectInfo;
            public: /** Zero out all other publishing options */bool ZeroOutPublishFlags;
            public: /** Turn on all other publishing options */bool TurnOnPublishFlags;
            public: /** Print published product interface count */bool PublishProductInterface;
            public: /** Print published jt */bool PublishJt;
            public: /** Print published trueshape named reference */bool PublishTrueshape;
            public: /** Print published weld data feature */bool PublishWeldData;
            public: /** Print published datum feature */bool PublishDatumFeature;
            public: /** Print published jt */bool PublishJtUsingTranslationServices;
            public: /** Print published Drawing Of and Drawing Using relations */bool PublishDrawingRelations;
            public: /** Print published record part data */bool RecordPartData;
            public: /** Print published record altrep notes */bool RecordAltrepNotes;
            public: TcPartInfoFlags() :
                PrintJt(),
                PrintCae(),
                PrintPdf(),
                PrintCgm(),
                PrintWave(),
                PrintExp(),
                PrintSpecification(),
                PrintManifestation(),
                PrintAltrep(),
                PrintSimulation(),
                PrintScenario(),
                PrintMasterForm(),
                PrintRevMasterForm(),
                PrintAttrForm(),
                PrintNamedRefs(),
                PrintBookletRule(),
                PrintFilteredSourceItemInfo(),
                PrintNumberOfValuesForArrayProperty(),
                PrintAbsoluteOccurrenceInfo(),
                PrintBlOccurrenceUid(),
                PrintBlOccType(),
                SkipPrintToPreventBlSeqNoWobble(),
                PrintDateValues(),
                PrintAbsoluteTransformInfo(),
                PrintRefListSize(),
                PrintOwnedModelViews(),
                PrintProjectInfo(),
                ZeroOutPublishFlags(),
                TurnOnPublishFlags(),
                PublishProductInterface(),
                PublishJt(),
                PublishTrueshape(),
                PublishWeldData(),
                PublishDatumFeature(),
                PublishJtUsingTranslationServices(),
                PublishDrawingRelations(),
                RecordPartData(),
                RecordAltrepNotes()
            {
            }
            /** Constructor for the TcPartInfoFlags struct. */ 
            public: TcPartInfoFlags(bool printJtInitial /** JT Dataset */, 
                    bool printCaeInitial /** CAE Relations */, 
                    bool printPdfInitial /** PDF Dataset */, 
                    bool printCgmInitial /** CGM Dataset */, 
                    bool printWaveInitial /** WAVE Relations */, 
                    bool printExpInitial /** Expressions */, 
                    bool printSpecificationInitial /** Specification Relations */, 
                    bool printManifestationInitial /** Manifestation Relations */, 
                    bool printAltrepInitial /** Alterps */, 
                    bool printSimulationInitial /** Simulation Datasets */, 
                    bool printScenarioInitial /** Scenario Datasets */, 
                    bool printMasterFormInitial /** Item Master Form */, 
                    bool printRevMasterFormInitial /** ItemRev Master Form */, 
                    bool printAttrFormInitial /** UGPart Attribute Form */, 
                    bool printNamedRefsInitial /** Named References */, 
                    bool printBookletRuleInitial /** Booklet Rule */, 
                    bool printFilteredSourceItemInfoInitial /** Filter source item info */, 
                    bool printNumberOfValuesForArrayPropertyInitial /** Number of values for array property */, 
                    bool printAbsoluteOccurrenceInfoInitial /** Absolute Occurrence Info */, 
                    bool printBlOccurrenceUidInitial /** Occurrence uid for BOMLine */, 
                    bool printBlOccTypeInitial /** Occurrence Type for BOMLine */, 
                    bool skipPrintToPreventBlSeqNoWobbleInitial /** Skip printing bl_sequence_no due to known wobble */, 
                    bool printDateValuesInitial /** Dump all dates */, 
                    bool printAbsoluteTransformInfoInitial /** Absolute Transform info */, 
                    bool printRefListSizeInitial /** Print size of the ref list vector */, 
                    bool printOwnedModelViewsInitial /** Print owned (disclosed) model views of the Item-Revision */, 
                    bool printProjectInfoInitial /** Print Project Information */, 
                    bool zeroOutPublishFlagsInitial /** Zero out all other publishing options */, 
                    bool turnOnPublishFlagsInitial /** Turn on all other publishing options */, 
                    bool publishProductInterfaceInitial /** Print published product interface count */, 
                    bool publishJtInitial /** Print published jt */, 
                    bool publishTrueshapeInitial /** Print published trueshape named reference */, 
                    bool publishWeldDataInitial /** Print published weld data feature */, 
                    bool publishDatumFeatureInitial /** Print published datum feature */, 
                    bool publishJtUsingTranslationServicesInitial /** Print published jt */, 
                    bool publishDrawingRelationsInitial /** Print published Drawing Of and Drawing Using relations */, 
                    bool recordPartDataInitial /** Print published record part data */, 
                    bool recordAltrepNotesInitial /** Print published record altrep notes */) :
                PrintJt(printJtInitial),
                PrintCae(printCaeInitial),
                PrintPdf(printPdfInitial),
                PrintCgm(printCgmInitial),
                PrintWave(printWaveInitial),
                PrintExp(printExpInitial),
                PrintSpecification(printSpecificationInitial),
                PrintManifestation(printManifestationInitial),
                PrintAltrep(printAltrepInitial),
                PrintSimulation(printSimulationInitial),
                PrintScenario(printScenarioInitial),
                PrintMasterForm(printMasterFormInitial),
                PrintRevMasterForm(printRevMasterFormInitial),
                PrintAttrForm(printAttrFormInitial),
                PrintNamedRefs(printNamedRefsInitial),
                PrintBookletRule(printBookletRuleInitial),
                PrintFilteredSourceItemInfo(printFilteredSourceItemInfoInitial),
                PrintNumberOfValuesForArrayProperty(printNumberOfValuesForArrayPropertyInitial),
                PrintAbsoluteOccurrenceInfo(printAbsoluteOccurrenceInfoInitial),
                PrintBlOccurrenceUid(printBlOccurrenceUidInitial),
                PrintBlOccType(printBlOccTypeInitial),
                SkipPrintToPreventBlSeqNoWobble(skipPrintToPreventBlSeqNoWobbleInitial),
                PrintDateValues(printDateValuesInitial),
                PrintAbsoluteTransformInfo(printAbsoluteTransformInfoInitial),
                PrintRefListSize(printRefListSizeInitial),
                PrintOwnedModelViews(printOwnedModelViewsInitial),
                PrintProjectInfo(printProjectInfoInitial),
                ZeroOutPublishFlags(zeroOutPublishFlagsInitial),
                TurnOnPublishFlags(turnOnPublishFlagsInitial),
                PublishProductInterface(publishProductInterfaceInitial),
                PublishJt(publishJtInitial),
                PublishTrueshape(publishTrueshapeInitial),
                PublishWeldData(publishWeldDataInitial),
                PublishDatumFeature(publishDatumFeatureInitial),
                PublishJtUsingTranslationServices(publishJtUsingTranslationServicesInitial),
                PublishDrawingRelations(publishDrawingRelationsInitial),
                RecordPartData(recordPartDataInitial),
                RecordAltrepNotes(recordAltrepNotesInitial)
            {
            }
        };


        /// \endcond 

        /// \cond NX_NO_DOC 
         /** CPD: Structure of flags to enable printing different workset information 
         <br>  Created in NX8.5.0.  <br>  
        */
        public:
        struct WorksetInformationFlags
        {
            public: /** Number of subsets in the workset. */bool PrintSubsetCount;
            public: /** Number of DEs in the subset. */bool PrintDesignElementCount;
            public: /** Names for the subsets, DEs etc. */bool PrintWorksetNames;
            public: /** Names for the subsets, DEs etc. */bool PrintSubsetNames;
            public: /** Names for the subsets, DEs etc. */bool PrintDesignElementNames;
            public: /** Position of DEs */bool PrintDesignElementPositions;
            public: /** Whole transform of the DE. */bool PrintDesignElementTransforms;
            public: /** The attributes of workset */bool PrintWorksetAttributes;
            public: /** The attributes of DE */bool PrintDesignElementAttributes;
            public: /** The attributes of subset */bool PrintSubsetAttributes;
            public: /** The component level attributes of DE*/bool PrintNxDesignElementComponentAttributes;
            public: /** The checkout status for workset */bool PrintWorksetCicoStatus;
            public: /** The checout status for design element */bool PrintDesignElementCicoStatus;
            public: /** Dump the DE id */bool PrintDesignElementId;
            public: /** Dump the DE display name */bool PrintDesignElementDisplayName;
            public: /** Dump Change Context and Mode for subsets */bool PrintSubsetChangeContext;
            public: /** The recipe with which the subset is populated*/bool PrintSubsetRecipe;
            public: /** Subset Transform */bool PrintSubsetTransform;
            public: /** Dump partition info for DEs*/bool PrintPartitionInfo;
            public: /** NX Structure Information */bool PrintNxStructureInfo;
            public: /** Decide if the source part tc info should be dumped ir not */bool PrintSourcePartTcInfo;
            public: /** Decide if the source part nx info should be dumped ir not */bool PrintSourcePartNxInfo;
            public: /** The target properties that are propogated down to DEs */bool PrintSubsetTargetProperties;
            public: /** Decide if the names of the presented parents should to be dumped or not */bool PrintDesignElementPresentedParents;
            public: /** Print supporting data DE's information seperately */bool PrintSupportingDataSeperately;
            public: /** Print part-master data (BomPart & BomPartUsage) associated to a DE */bool PrintPartMasterData;
            public: /** Print files attached by IMAN_specification of a DE */bool PrintDatasetInfoAttachedByImanSpecification;
            public: /** Source Part Info for the Workset/DE */NXOpen::PDMDebugSession::TcPartInfoFlags TcPartInformationFlags;
            public: /** Source NX Part Info for the Workset/DE */NXOpen::PDMDebugSession::NxPartInfoFlags NxPartInformationFlags;
            public: WorksetInformationFlags() :
                PrintSubsetCount(),
                PrintDesignElementCount(),
                PrintWorksetNames(),
                PrintSubsetNames(),
                PrintDesignElementNames(),
                PrintDesignElementPositions(),
                PrintDesignElementTransforms(),
                PrintWorksetAttributes(),
                PrintDesignElementAttributes(),
                PrintSubsetAttributes(),
                PrintNxDesignElementComponentAttributes(),
                PrintWorksetCicoStatus(),
                PrintDesignElementCicoStatus(),
                PrintDesignElementId(),
                PrintDesignElementDisplayName(),
                PrintSubsetChangeContext(),
                PrintSubsetRecipe(),
                PrintSubsetTransform(),
                PrintPartitionInfo(),
                PrintNxStructureInfo(),
                PrintSourcePartTcInfo(),
                PrintSourcePartNxInfo(),
                PrintSubsetTargetProperties(),
                PrintDesignElementPresentedParents(),
                PrintSupportingDataSeperately(),
                PrintPartMasterData(),
                PrintDatasetInfoAttachedByImanSpecification(),
                TcPartInformationFlags(),
                NxPartInformationFlags()
            {
            }
            /** Constructor for the WorksetInformationFlags struct. */ 
            public: WorksetInformationFlags(bool printSubsetCountInitial /** Number of subsets in the workset. */, 
                    bool printDesignElementCountInitial /** Number of DEs in the subset. */, 
                    bool printWorksetNamesInitial /** Names for the subsets, DEs etc. */, 
                    bool printSubsetNamesInitial /** Names for the subsets, DEs etc. */, 
                    bool printDesignElementNamesInitial /** Names for the subsets, DEs etc. */, 
                    bool printDesignElementPositionsInitial /** Position of DEs */, 
                    bool printDesignElementTransformsInitial /** Whole transform of the DE. */, 
                    bool printWorksetAttributesInitial /** The attributes of workset */, 
                    bool printDesignElementAttributesInitial /** The attributes of DE */, 
                    bool printSubsetAttributesInitial /** The attributes of subset */, 
                    bool printNxDesignElementComponentAttributesInitial /** The component level attributes of DE*/, 
                    bool printWorksetCicoStatusInitial /** The checkout status for workset */, 
                    bool printDesignElementCicoStatusInitial /** The checout status for design element */, 
                    bool printDesignElementIdInitial /** Dump the DE id */, 
                    bool printDesignElementDisplayNameInitial /** Dump the DE display name */, 
                    bool printSubsetChangeContextInitial /** Dump Change Context and Mode for subsets */, 
                    bool printSubsetRecipeInitial /** The recipe with which the subset is populated*/, 
                    bool printSubsetTransformInitial /** Subset Transform */, 
                    bool printPartitionInfoInitial /** Dump partition info for DEs*/, 
                    bool printNxStructureInfoInitial /** NX Structure Information */, 
                    bool printSourcePartTcInfoInitial /** Decide if the source part tc info should be dumped ir not */, 
                    bool printSourcePartNxInfoInitial /** Decide if the source part nx info should be dumped ir not */, 
                    bool printSubsetTargetPropertiesInitial /** The target properties that are propogated down to DEs */, 
                    bool printDesignElementPresentedParentsInitial /** Decide if the names of the presented parents should to be dumped or not */, 
                    bool printSupportingDataSeperatelyInitial /** Print supporting data DE's information seperately */, 
                    bool printPartMasterDataInitial /** Print part-master data (BomPart & BomPartUsage) associated to a DE */, 
                    bool printDatasetInfoAttachedByImanSpecificationInitial /** Print files attached by IMAN_specification of a DE */, 
                    const NXOpen::PDMDebugSession::TcPartInfoFlags &tcPartInformationFlagsInitial /** Source Part Info for the Workset/DE */, 
                    const NXOpen::PDMDebugSession::NxPartInfoFlags &nxPartInformationFlagsInitial /** Source NX Part Info for the Workset/DE */) :
                PrintSubsetCount(printSubsetCountInitial),
                PrintDesignElementCount(printDesignElementCountInitial),
                PrintWorksetNames(printWorksetNamesInitial),
                PrintSubsetNames(printSubsetNamesInitial),
                PrintDesignElementNames(printDesignElementNamesInitial),
                PrintDesignElementPositions(printDesignElementPositionsInitial),
                PrintDesignElementTransforms(printDesignElementTransformsInitial),
                PrintWorksetAttributes(printWorksetAttributesInitial),
                PrintDesignElementAttributes(printDesignElementAttributesInitial),
                PrintSubsetAttributes(printSubsetAttributesInitial),
                PrintNxDesignElementComponentAttributes(printNxDesignElementComponentAttributesInitial),
                PrintWorksetCicoStatus(printWorksetCicoStatusInitial),
                PrintDesignElementCicoStatus(printDesignElementCicoStatusInitial),
                PrintDesignElementId(printDesignElementIdInitial),
                PrintDesignElementDisplayName(printDesignElementDisplayNameInitial),
                PrintSubsetChangeContext(printSubsetChangeContextInitial),
                PrintSubsetRecipe(printSubsetRecipeInitial),
                PrintSubsetTransform(printSubsetTransformInitial),
                PrintPartitionInfo(printPartitionInfoInitial),
                PrintNxStructureInfo(printNxStructureInfoInitial),
                PrintSourcePartTcInfo(printSourcePartTcInfoInitial),
                PrintSourcePartNxInfo(printSourcePartNxInfoInitial),
                PrintSubsetTargetProperties(printSubsetTargetPropertiesInitial),
                PrintDesignElementPresentedParents(printDesignElementPresentedParentsInitial),
                PrintSupportingDataSeperately(printSupportingDataSeperatelyInitial),
                PrintPartMasterData(printPartMasterDataInitial),
                PrintDatasetInfoAttachedByImanSpecification(printDatasetInfoAttachedByImanSpecificationInitial),
                TcPartInformationFlags(tcPartInformationFlagsInitial),
                NxPartInformationFlags(nxPartInformationFlagsInitial)
            {
            }
        };


        /// \endcond 
        private: PDMDebugSessionImpl * m_pdmdebugsession_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit PDMDebugSession(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~PDMDebugSession();

        /// \cond NX_NO_DOC 
        /** Dump all table entries 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpAllTableEntries
        (
            const NXString & operation /** Current operation such as Load/Save, etc. */
        );
        /** Dump all table entries 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void DumpAllTableEntries
        (
            const char * operation /** Current operation such as Load/Save, etc. */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the table entry for a part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpTableEntry
        (
            const NXString & operation /** Current operation such as Load/Save, etc. */,
            const NXString & partFilename /** Part file name cli format @DB/itemid/revid */,
            int levels /** How many levels to dump: 0-Self, -1-All levels */
        );
        /** Dump the table entry for a part 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void DumpTableEntry
        (
            const char * operation /** Current operation such as Load/Save, etc. */,
            const char * partFilename /** Part file name cli format @DB/itemid/revid */,
            int levels /** How many levels to dump: 0-Self, -1-All levels */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Add additional properties for CDM dump 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void AddPropertyForCdmDump
        (
            const NXString & objectType /** The type of object these properties belong to */,
            const NXString & propertyName /** Property name */
        );
        /** Add additional properties for CDM dump 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        void AddPropertyForCdmDump
        (
            const char * objectType /** The type of object these properties belong to */,
            const char * propertyName /** Property name */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump SOA ClientSide Data Model from Teamcenter
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpCdm
        (
            const NXString & operation /** User defined operation label */,
            const NXString & partFilename /** Part file name in cli format @DB/itemid/revid */,
            int nestLevel /** Traverse assembly levels e.g. -1=all, 0=none, 1=first level */,
            bool browseRelations /** Browse GRM relations e.g.for Wave, PI, KF, etc */,
            bool dumpRawXml /** Dump raw xml to file instead of using JAM_test_print */,
            bool refreshCdm /** Refresh CDM objects from DB before printing */
        );
        /** Dump SOA ClientSide Data Model from Teamcenter
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void DumpCdm
        (
            const char * operation /** User defined operation label */,
            const char * partFilename /** Part file name in cli format @DB/itemid/revid */,
            int nestLevel /** Traverse assembly levels e.g. -1=all, 0=none, 1=first level */,
            bool browseRelations /** Browse GRM relations e.g.for Wave, PI, KF, etc */,
            bool dumpRawXml /** Dump raw xml to file instead of using JAM_test_print */,
            bool refreshCdm /** Refresh CDM objects from DB before printing */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Set Flags on TcDump Utility 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetTcPartInfoFlags
        (
            const NXOpen::PDMDebugSession::TcPartInfoFlags & tcFlags /** tc flags */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Start collecting Teamcenter performance statistics 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void StartPerformanceMonitor
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Stop collecting Teamcenter performance statistics 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void EndPerformanceMonitor
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Report Teamcenter performance statistics 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void ReportPerformanceStatistics
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Get Teamcenter performance statistics  @return  Return performance metrics 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::PerformanceStatistics AskPerformanceStatistics
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Add PLMXML to Doc for a part. The PLMXML doc object will be initialized the first time it's called 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void AddPlmxmlDoc
        (
            const NXString & partFilename /** Part file name cli format @DB/itemid/revid */
        );
        /** Add PLMXML to Doc for a part. The PLMXML doc object will be initialized the first time it's called 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void AddPlmxmlDoc
        (
            const char * partFilename /** Part file name cli format @DB/itemid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the PLMXML Doc accumulated so far to a file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpPlmxmlDoc
        (
            const NXString & xmlFilename /** PLMXML file name */
        );
        /** Dump the PLMXML Doc accumulated so far to a file 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void DumpPlmxmlDoc
        (
            const char * xmlFilename /** PLMXML file name */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Compare the PLMXML Doc accumulated so far to a baseline (master) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void ComparePlmxmlDoc
        (
            const NXString & xmlFilename /** PLMXML file name */
        );
        /** Compare the PLMXML Doc accumulated so far to a baseline (master) 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void ComparePlmxmlDoc
        (
            const char * xmlFilename /** PLMXML file name */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Close the PLMXML Doc accumulated so far 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void ClosePlmxmlDoc
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Get the the version of PDM currently using  @return  the current PDM version we are using 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AskPdmVersion
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Manual check out a part  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int ManualCheckOutPart
        (
            const NXString & partFilename /** Part file name cli format @DB/itemid/revid */,
            bool multiSite /** multi site flag */
        );
        /** Manual check out a part  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        int ManualCheckOutPart
        (
            const char * partFilename /** Part file name cli format @DB/itemid/revid */,
            bool multiSite /** multi site flag */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Manual check in a part  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void ManualCheckInPart
        (
            const NXString & partFilename /** Part file name cli format @DB/itemid/revid */,
            bool multiSite /** multi site flag */
        );
        /** Manual check in a part  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void ManualCheckInPart
        (
            const char * partFilename /** Part file name cli format @DB/itemid/revid */,
            bool multiSite /** multi site flag */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dumps projects string assigned to item, item revision and datasets underneath  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpProjectsData
        (
            const NXString & partFilename /** Part file name cli format @DB/itemid/revid */
        );
        /** Dumps projects string assigned to item, item revision and datasets underneath  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void DumpProjectsData
        (
            const char * partFilename /** Part file name cli format @DB/itemid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dumps query information  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpQueryInformation
        (
            std::vector<NXString> & queryNames /** Query names */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Performs the structure search depending upon input and dumps the results  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: void ExecuteStructureSearch
        (
            const NXString & contextPart /** Context Part file name cli format @DB/itemid/revid */,
            const NXString & inputXml /** Path to the input xml file for search criteria */
        );
        /** Performs the structure search depending upon input and dumps the results  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        void ExecuteStructureSearch
        (
            const char * contextPart /** Context Part file name cli format @DB/itemid/revid */,
            const char * inputXml /** Path to the input xml file for search criteria */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Does structure compare between NX and TC 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void DoStructureCompare
        (
            std::vector<NXString> & partFilenames /** Part file names in cli format @DB/itemid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump Teamcenter specific TC part Information validation constraints 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void TcPartDump
        (
            const NXOpen::PDMDebugSession::TcPartInfoFlags & tcFlags /**TC part information constraints toggle status*/
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump Teamcenter specific NX part Information validation constraints 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void NxPartDump
        (
            const NXOpen::PDMDebugSession::NxPartInfoFlags & nxFlags /**NX part information constraints toggle status*/
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the workset information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpNxWorksetInfo
        (
            const NXString & worksetFilename /** workset file name in cli format @DB/worksetid/revid string */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );
        /** Dump the workset information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpNxWorksetInfo
        (
            const char * worksetFilename /** workset file name in cli format @DB/worksetid/revid string */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design element information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpNxDesignElementInfo
        (
            const NXString & designElementId /** design element id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design element related info to be printed */
        );
        /** Dump the design element information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpNxDesignElementInfo
        (
            const char * designElementId /** design element id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design element related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design control element information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpNxDesignControlElementInfo
        (
            const NXString & designControlElementId /** design control element id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design control element related info to be printed */
        );
        /** Dump the design control element information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpNxDesignControlElementInfo
        (
            const char * designControlElementId /** design control element id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design control element related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design feature information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpNxDesignFeatureInfo
        (
            const NXString & designFeatureId /** design feature id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design feature related info to be printed */
        );
        /** Dump the design feature information in NX 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpNxDesignFeatureInfo
        (
            const char * designFeatureId /** design feature id*/,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the design feature related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the workset information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcWorksetInfo
        (
            const NXString & worksetFilename /** Workset file name in cli format @DB/worksetid/revid */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );
        /** Dump the workset information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcWorksetInfo
        (
            const char * worksetFilename /** Workset file name in cli format @DB/worksetid/revid */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Compare workset information between NX and TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DoCompareWorksetInfo
        (
            std::vector<NXString> & worksetFilenames /** Workset filenames in cli format @DB/worksetid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design element information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcDesignElementInfo
        (
            const std::vector<NXOpen::PlmObjectNode *> & plmObjects /** Design elements */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the Collaborative Design information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcCollaborativeDesignInfo
        (
            const NXString & cdId /** collaborative design id i.e. model Id */
        );
        /** Dump the Collaborative Design information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcCollaborativeDesignInfo
        (
            const char * cdId /** collaborative design id i.e. model Id */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the Collaborative Design information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcPartitionInfo
        (
            const NXString & partitionId /** partition Id */
        );
        /** Dump the Collaborative Design information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcPartitionInfo
        (
            const char * partitionId /** partition Id */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Initialize the tcdump info flags  @return  Workset Information Dump flags with default values
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::TcPartInfoFlags GetDefaultTcPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design control element information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcDesignControlElementInfo
        (
            const NXString & designControlElementName /** design control element Name */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );
        /** Dump the design control element information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcDesignControlElementInfo
        (
            const char * designControlElementName /** design control element Name */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the design feature information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcDesignFeatureInfo
        (
            const NXString & designFeatureName /** design feature Name */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );
        /** Dump the design feature information queried from TC 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcDesignFeatureInfo
        (
            const char * designFeatureName /** design feature Name */,
            const NXOpen::PDMDebugSession::WorksetInformationFlags & flags /** Flags specifying the workset related info to be printed */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Initialize the dump info flags to default values  @return  Workset Information Dump flags with default values
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::WorksetInformationFlags GetDefaultWorksetInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump TcNav Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavPartItemInfo
        (
            const NXString & itemId /** Item ID */,
            bool expand /** Expand Item Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump TcNav Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavPartItemInfo
        (
            const char * itemId /** Item ID */,
            bool expand /** Expand Item Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump TcNav Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavPartItemRevInfo
        (
            const NXString & itemRevId /** ItemRev ID */,
            bool expand /** Expand ItemRev Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump TcNav Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavPartItemRevInfo
        (
            const char * itemRevId /** ItemRev ID */,
            bool expand /** Expand ItemRev Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump TcNav Workset Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavWorksetItemInfo
        (
            const NXString & itemId /** Item ID */,
            bool expand /** Expand Item Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump TcNav Workset Item Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavWorksetItemInfo
        (
            const char * itemId /** Item ID */,
            bool expand /** Expand Item Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump TcNav Workset ItemRev Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavWorksetItemRevInfo
        (
            const NXString & itemRevId /** ItemRev ID */,
            bool expand /** Expand ItemRev Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump TcNav Workset ItemRev Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavWorksetItemRevInfo
        (
            const char * itemRevId /** ItemRev ID */,
            bool expand /** Expand ItemRev Flag */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump TcNav Collaborative Design Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavCdInfo
        (
            const NXString & cdId /** Collaborative Design ID */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump TcNav Collaborative Design Node info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavCdInfo
        (
            const char * cdId /** Collaborative Design ID */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump Tc Nav Folder info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavFolderInfo
        (
            const NXString & folderPath /** Folder Path */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump Tc Nav Folder info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavFolderInfo
        (
            const char * folderPath /** Folder Path */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump Tc Nav Folder Contents info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcNavFolderContentsInfo
        (
            const NXString & folderPath /** Folder Path */,
            const NXString & detailLevel /** Browse Filter -> Detail Level */,
            const NXString & revisionOption /** Browse Filter -> Revision Option */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );
        /** Dump Tc Nav Folder Contents info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void DumpTcNavFolderContentsInfo
        (
            const char * folderPath /** Folder Path */,
            const char * detailLevel /** Browse Filter -> Detail Level */,
            const char * revisionOption /** Browse Filter -> Revision Option */,
            std::vector<NXString> & propertiesToDump /** List of Properties to Dump */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the Attribute Description info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void DumpAttributeDescriptions
        (
            const std::vector<NXOpen::AttrTypeKey *> & typekey /** Typekeys*/,
            int customizationKey /** customization key*/,
            int descriptorSource /** descriptor source key*/
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Execute Rescue Session Data and Dump the rescued data info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void RescueSessionData
        (
            const NXString & recoveryDir /** Folder Path */
        );
        /** Execute Rescue Session Data and Dump the rescued data info 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void RescueSessionData
        (
            const char * recoveryDir /** Folder Path */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Load Parts in NX from plmxml bookmarks 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void LoadFromBkmplm
        (
            const NXString & fileName /** XML Filename */,
            bool hasStructure /** Product Structure Info Flag */
        );
        /** Load Parts in NX from plmxml bookmarks 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void LoadFromBkmplm
        (
            const char * fileName /** XML Filename */,
            bool hasStructure /** Product Structure Info Flag */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Release the item revision 
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        public: void ReleaseItemrevs
        (
            std::vector<NXString> & itemIDs /**Item IDs */,
            std::vector<NXString> & revisions /**Revisions */,
            const NXString & releaseProcessName /**Name of release process */
        );
        /** Release the item revision 
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        void ReleaseItemrevs
        (
            std::vector<NXString> & itemIDs /**Item IDs */,
            std::vector<NXString> & revisions /**Revisions */,
            const char * releaseProcessName /**Name of release process */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Release the item  
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        public: void ReleaseItems
        (
            std::vector<NXString> & itemIDs /**Item ID */,
            const NXString & releaseProcessName /**Name of release process */
        );
        /** Release the item  
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        void ReleaseItems
        (
            std::vector<NXString> & itemIDs /**Item ID */,
            const char * releaseProcessName /**Name of release process */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Get the temporary export directory for input item    @return Temporary export directory 
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        public: NXString GetTempExportDir
        (
            const NXString & partSpec /**Part spec */
        );
        /** Get the temporary export directory for input item    @return Temporary export directory 
         <br>  Created in NX8.5.1.  <br>  
         <br> License requirements : None */
        NXString GetTempExportDir
        (
            const char * partSpec /**Part spec */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Set Flags on NxDump Utility 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNxPartInfoFlags
        (
            const NXOpen::PDMDebugSession::NxPartInfoFlags & nxFlags /** NX Part Information Dump flags */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Initialize the nxdump info flags  @return  NX Part Information Dump flags with default values 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::NxPartInfoFlags GetDefaultNxPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the MFK related Attribute information 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpMfkAttributeInformation
        (
            const NXString & partName /** Part file name cli format @DB/itemid/revid */
        );
        /** Dump the MFK related Attribute information 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void DumpMfkAttributeInformation
        (
            const char * partName /** Part file name cli format @DB/itemid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the MFK related Attribute information for input logical objects 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpLogicalObjectMfkAttributeInfo
        (
            const std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Print the file name mappings  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintFileNameMappings
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Print the pending components  
         <br>  Created in NX10.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintPendingComponents
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the delta information for parts that are linked 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpAllDeltaInfos
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the Aspect and AspectScheme information queried from TC 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpTcAspectInfo
        (
            const NXString & collaborativeDesignId /** Collaborative design Id */
        );
        /** Dump the Aspect and AspectScheme information queried from TC 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void DumpTcAspectInfo
        (
            const char * collaborativeDesignId /** Collaborative design Id */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Promote the Design Elements to History (Workflow Process)
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void PromoteDesignElementsToHistory
        (
            std::vector<NXString> & designElementsIDs /** designelementsids */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the attribute information for input smart save objects 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpSmartSaveObjectAttributeInfo
        (
            const std::vector<NXOpen::PDM::SmartSaveObject *> & smartSaveObjects /** the objects for which to dump attr info */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Reset Flags To Defaults on TcDump Utility 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ResetTcPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Reset Flags on NxDump Utility 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ResetNxPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Get the control flags after they have been reset on TcDump Utility  @return  TC Part Information Dump flags with reset values 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::TcPartInfoFlags GetCurrentTcPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /**Get the control flags after they have been reset on NxDump Utility  @return  NX Part Information Dump flags with reset values 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::PDMDebugSession::NxPartInfoFlags GetCurrentNxPartInfoFlags
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Dump the Change Notice information queried from TC 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void DumpChangeNoticeInfo
        (
            std::vector<NXString> & changeNoticeNames /** Change Notice name in cli format @DB/change_noticeid/revid */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Create Change Notice outputs name in cli spec if created successful otherwise outputs empty @return  Change Notice name in cli format @DB/change_noticeid/revid 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXString CreateChangeNotice
        (
            const NXString & changeNoticeId /** Change Notice ID */,
            const NXString & changeNoticerevId /** Change Notice Revision ID */,
            const NXString & changeNoticeSynopsys /** Change Notice Synopsis */,
            const NXString & changeNoticeDescription /** Change Notice Description */
        );
        /** Create Change Notice outputs name in cli spec if created successful otherwise outputs empty @return  Change Notice name in cli format @DB/change_noticeid/revid 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        NXString CreateChangeNotice
        (
            const char * changeNoticeId /** Change Notice ID */,
            const char * changeNoticerevId /** Change Notice Revision ID */,
            const char * changeNoticeSynopsys /** Change Notice Synopsis */,
            const char * changeNoticeDescription /** Change Notice Description */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Function returns a formatted output date which will be in system locale
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: NXString FormatDateTimeToLocale
        (
            const NXString & dateToFormat /** datetoformat */ 
        );
        /** Function returns a formatted output date which will be in system locale
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        NXString FormatDateTimeToLocale
        (
            const char * dateToFormat /** datetoformat */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Given a date string in "%d-%b-%Y %H:%M:%S" format, returns the time string, day, month and year.
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void GetTimeString
        (
            const NXString & formattedDate /** formatteddate */ ,
            NXString* timeString /** time string */ ,
            NXOpen::DateItemBuilder::DayOfMonth* day /** day */ ,
            NXOpen::DateItemBuilder::MonthOfYear* month /** month */ ,
            NXString* year /** year */ 
        );
        /** Given a date string in "%d-%b-%Y %H:%M:%S" format, returns the time string, day, month and year.
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void GetTimeString
        (
            const char * formattedDate /** formatteddate */ ,
            NXString* timeString /** time string */ ,
            NXOpen::DateItemBuilder::DayOfMonth* day /** day */ ,
            NXOpen::DateItemBuilder::MonthOfYear* month /** month */ ,
            NXString* year /** year */ 
        );

        /// \endcond 
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
