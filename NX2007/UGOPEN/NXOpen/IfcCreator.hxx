#ifndef NXOpen_IFCCREATOR_HXX_INCLUDED
#define NXOpen_IFCCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     IfcCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BaseCreator.hxx>
#include <NXOpen/ObjectSelector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class IfcCreator;
    class BaseCreator;
    class ObjectSelector;
    class _IfcCreatorBuilder;
    class IfcCreatorImpl;
    /**
        Represents a @link NXOpen::IfcCreator NXOpen::IfcCreator@endlink  to be used when exporting the IFC Data
        This class is created using @link NXOpen::DexManager NXOpen::DexManager@endlink .
        NULL object will be returned from Commit().  <br> To create a new instance of this class, use @link NXOpen::DexManager::CreateIfcCreator  NXOpen::DexManager::CreateIfcCreator @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    AngularTolerance </term> <description> 
     
    18.0 </description> </item> 

    <item><term> 
     
    ChordalTolerance </term> <description> 
     
    0.08 (millimeters part), 0.0031496 (inches part) </description> </item> 

    <item><term> 
     
    ChordalToleranceMethodOption </term> <description> 
     
    Relative </description> </item> 

    <item><term> 
     
    ExportUnits </term> <description> 
     
    Millimeters </description> </item> 

    <item><term> 
     
    IfcFileFormat </term> <description> 
     
    IFC2x3 </description> </item> 

    <item><term> 
     
    IncludeOrExcludeAttributeCategories </term> <description> 
     
    Exclude </description> </item> 

    <item><term> 
     
    IncludeOrExcludeAttributes </term> <description> 
     
    Exclude </description> </item> 

    <item><term> 
     
    RelativeChordalTolerance </term> <description> 
     
    0.4 </description> </item> 

    <item><term> 
     
    TessellationMethodOption </term> <description> 
     
    LightWeightRepresentation </description> </item> 

    </list> 

     <br>  Created in NX1899.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  IfcCreator : public NXOpen::BaseCreator
    {
        /** Export from options */
        public: enum ExportFromOption
        {
            ExportFromOptionDisplayPart/**  export data from displayed part */,
            ExportFromOptionExistingPart/**  export data from existing part which is on disk */
        };

        /** Ifc file format */
        public: enum IfcFormatEnum
        {
            IfcFormatEnumIFC2x3/** ifc2x3 */ ,
            IfcFormatEnumIfc4/** ifc4 */ 
        };

        /** Units of the the IFC file. */
        public: enum UnitsEnum
        {
            UnitsEnumMillimeters/** millimeters */ ,
            UnitsEnumInches/** inches */ 
        };

        /** Attribute category names that are to be excluded or included */
        public: enum IncludeOrExcludeAttributeCategoriesEnum
        {
            IncludeOrExcludeAttributeCategoriesEnumInclude/** include */ ,
            IncludeOrExcludeAttributeCategoriesEnumExclude/** exclude */ 
        };

        /** Attribute names that are to be excluded or included */
        public: enum IncludeOrExcludeAttributesEnum
        {
            IncludeOrExcludeAttributesEnumInclude/** include */ ,
            IncludeOrExcludeAttributesEnumExclude/** exclude */ 
        };

        /** Tessellation method */
        public: enum TessellationMethodOptionEnum
        {
            TessellationMethodOptionEnumLightWeightRepresentation/** light weight representation */ ,
            TessellationMethodOptionEnumSpecifyTolerances/** specify tolerances */ 
        };

        /** Chordal Tolerance method */
        public: enum ChordalToleranceMethodOptionEnum
        {
            ChordalToleranceMethodOptionEnumRelative/** relative */ ,
            ChordalToleranceMethodOptionEnumAbsolute/** absolute */ 
        };

        private: IfcCreatorImpl * m_ifccreator_impl;
        private: friend class  _IfcCreatorBuilder;
        protected: IfcCreator();
        public: ~IfcCreator();
        /**Returns  the export from option - will determine if data from display part or existing part is exported 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::ExportFromOption ExportFrom
        (
        );
        /**Sets  the export from option - will determine if data from display part or existing part is exported 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportFrom
        (
            NXOpen::IfcCreator::ExportFromOption exportFrom /** exportfrom */ 
        );
        /** The save settings - this will save the settings to a file sepcified 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /** filename */ 
        );
        /** The save settings - this will save the settings to a file sepcified 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        void SaveSettings
        (
            const char * filename /** filename */ 
        );
        /**Returns  the Settings File to read the default settings  
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the Settings File to read the default settings  
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the Settings File to read the default settings  
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingsFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the inputFile - the data to be exported will be read from this file 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the inputFile - the data to be exported will be read from this file 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & inputFile /** inputfile */ 
        );
        /**Sets  the inputFile - the data to be exported will be read from this file 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        void SetInputFile
        (
            const char * inputFile /** inputfile */ 
        );
        /**Returns  the export selection block - the object selection will be done by this block. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ObjectSelector * ExportSelectionBlock
        (
        );
        /**Returns  the ifc file format 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::IfcFormatEnum IfcFileFormat
        (
        );
        /**Sets  the ifc file format 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIfcFileFormat
        (
            NXOpen::IfcCreator::IfcFormatEnum ifcFileFormat /** ifcfileformat */ 
        );
        /**Returns  the Tessellation Method - indicates whether NX LightWeight Representation or specifying tolerances is used 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::TessellationMethodOptionEnum TessellationMethodOption
        (
        );
        /**Sets  the Tessellation Method - indicates whether NX LightWeight Representation or specifying tolerances is used 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTessellationMethodOption
        (
            NXOpen::IfcCreator::TessellationMethodOptionEnum tessellationMethodOption /** tessellationmethodoption */ 
        );
        /**Returns  the Chordal Tolerance Method - indicates whether relative or absolute chordal tolerance is used 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::ChordalToleranceMethodOptionEnum ChordalToleranceMethodOption
        (
        );
        /**Sets  the Chordal Tolerance Method - indicates whether relative or absolute chordal tolerance is used 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetChordalToleranceMethodOption
        (
            NXOpen::IfcCreator::ChordalToleranceMethodOptionEnum chordalToleranceMethodOption /** chordaltolerancemethodoption */ 
        );
        /**Returns  the chordal tolerance 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: double ChordalTolerance
        (
        );
        /**Sets  the chordal tolerance 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetChordalTolerance
        (
            double chordalTolerance /** chordaltolerance */ 
        );
        /**Returns  the relative chordal tolerance 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: double RelativeChordalTolerance
        (
        );
        /**Sets  the relative chordal tolerance 
         <br>  Created in NX2007.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRelativeChordalTolerance
        (
            double relativeChordalTolerance /** relativechordaltolerance */ 
        );
        /**Returns  the angular tolerance 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: double AngularTolerance
        (
        );
        /**Sets  the angular tolerance 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAngularTolerance
        (
            double angularTolerance /** angulartolerance */ 
        );
        /**Returns  the units to convert to when exporting IFC files 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::UnitsEnum ExportUnits
        (
        );
        /**Sets  the units to convert to when exporting IFC files 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportUnits
        (
            NXOpen::IfcCreator::UnitsEnum exportUnits /** exportunits */ 
        );
        /**Returns  the ExportUserDefinedAttributes - indicates whether user defined attributes are to be exported
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: bool ExportUserDefinedAttributes
        (
        );
        /**Sets  the ExportUserDefinedAttributes - indicates whether user defined attributes are to be exported
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportUserDefinedAttributes
        (
            bool exportUserDefinedAttributes /** exportuserdefinedattributes */ 
        );
        /**Returns  the includeOrExcludeAttributeCategories - whether list of attribute category names are to be included or excluded 
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::IncludeOrExcludeAttributeCategoriesEnum IncludeOrExcludeAttributeCategories
        (
        );
        /**Sets  the includeOrExcludeAttributeCategories - whether list of attribute category names are to be included or excluded 
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOrExcludeAttributeCategories
        (
            NXOpen::IfcCreator::IncludeOrExcludeAttributeCategoriesEnum includeOrExcludeAttributeCategories /** includeorexcludeattributecategories */ 
        );
        /**Returns  the attributeCategories - attribute category names are to be included or excluded 
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: NXString AttributeCategories
        (
        );
        /**Sets  the attributeCategories - attribute category names are to be included or excluded 
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributeCategories
        (
            const NXString & attributeCategories /** attributecategories */ 
        );
        /**Sets  the attributeCategories - attribute category names are to be included or excluded 
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        void SetAttributeCategories
        (
            const char * attributeCategories /** attributecategories */ 
        );
        /**Returns  the includeOrExcludeAttributes - whether list of attributes set by method SetAttributes to be included or excluded 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::IfcCreator::IncludeOrExcludeAttributesEnum IncludeOrExcludeAttributes
        (
        );
        /**Sets  the includeOrExcludeAttributes - whether list of attributes set by method SetAttributes to be included or excluded 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetIncludeOrExcludeAttributes
        (
            NXOpen::IfcCreator::IncludeOrExcludeAttributesEnum includeOrExcludeAttributes /** includeorexcludeattributes */ 
        );
        /**Returns  the attributes - attribute names are to be included or excluded 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Attributes
        (
        );
        /**Sets  the attributes - attribute names are to be included or excluded 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAttributes
        (
            const NXString & attributes /** attributes */ 
        );
        /**Sets  the attributes - attribute names are to be included or excluded 
         <br>  Created in NX1980.0.0.  <br>  
         <br> License requirements : None */
        void SetAttributes
        (
            const char * attributes /** attributes */ 
        );
        /**Returns  the FileSaveAs - indicates whether file is being exported via File->Save As 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool FileSaveFlag
        (
        );
        /**Sets  the FileSaveAs - indicates whether file is being exported via File->Save As 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFileSaveFlag
        (
            bool fileSaveAs /** filesaveas */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
