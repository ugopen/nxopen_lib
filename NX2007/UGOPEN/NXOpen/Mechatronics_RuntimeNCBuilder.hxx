#ifndef NXOpen_MECHATRONICS_RUNTIMENCBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_RUNTIMENCBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_RuntimeNCBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class RuntimeNCBuilder;
    }
    class Builder;
    class TaggedObject;
    namespace Mechatronics
    {
        class _RuntimeNCBuilderBuilder;
        class RuntimeNCBuilderImpl;
        /**
            Represents a @link NXOpen::Mechatronics::RuntimeNCBuilder NXOpen::Mechatronics::RuntimeNCBuilder@endlink .
             <br> To create a new instance of this class, use @link NXOpen::Mechatronics::RuntimeNCCollection::CreateRuntimeNcBuilder  NXOpen::Mechatronics::RuntimeNCCollection::CreateRuntimeNcBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  RuntimeNCBuilder : public NXOpen::Builder
        {
            /**  @brief  the gripper types  

              */
            public: enum AxisTypes
            {
                AxisTypesInvalid/** Invalid  */ = -1,
                AxisTypesLinear/** linear  */,
                AxisTypesRotary/** rotary  */
            };

            private: RuntimeNCBuilderImpl * m_runtimencbuilder_impl;
            private: friend class  _RuntimeNCBuilderBuilder;
            protected: RuntimeNCBuilder();
            public: ~RuntimeNCBuilder();
            /**Returns  the flag which indicates whether use the specified MCF or not. 
                        True means use user specified MCF file for running CSE, or use the Standard MCF file in MCD kits.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool FlagOfUsingSpecifiedMCF
            (
            );
            /**Sets  the flag which indicates whether use the specified MCF or not. 
                        True means use user specified MCF file for running CSE, or use the Standard MCF file in MCD kits.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetFlagOfUsingSpecifiedMCF
            (
                bool flagOfUsingSpecifiedMCF /** flagofusingspecifiedmcf */ 
            );
            /**Returns  the user specified MCF File. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifiedMCF
            (
            );
            /**Sets  the user specified MCF File. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSpecifiedMCF
            (
                const NXString & specifiedMCF /** specifiedmcf */ 
            );
            /**Sets  the user specified MCF File. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSpecifiedMCF
            (
                const char * specifiedMCF /** specifiedmcf */ 
            );
            /** This method is used to load NC file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void LoadNCFile
            (
                const NXString & ncFile /** ncfile */ 
            );
            /** This method is used to load NC file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void LoadNCFile
            (
                const char * ncFile /** ncfile */ 
            );
            /** This method is used to update NC code. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void UpdateNCCode
            (
                std::vector<NXString> & ncCodeLines /** nccodelines */ 
            );
            /** This method is used to export current loaded NC Code to disk file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void ExportNCCode
            (
                const NXString & ncFile /** ncfile */ 
            );
            /** This method is used to export current loaded NC Code to disk file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void ExportNCCode
            (
                const char * ncFile /** ncfile */ 
            );
            /** This method is used to run NC Code via CSE in order to get output events 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void RunCSE
            (
                bool* isRunningOK /** True means CSE returns succeed result, or failure. */,
                NXString* errMsg /** Error message if CSE return false. */,
                int* lineNum /** The NC line number at which CSE failed. */,
                NXString* ncLine /** The NC Code for which CSE failed. */
            );
            /** This method is used to get the axes that involved the motion of CSE output event, and 
                        the machine event (e.g. ToolChange) that fired by CSE.
                        These axes and machine events are used to connect with MCD objects, so in the MCD simulation stage,
                        the CSE will know which MCD runtime object will be driven.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetAxesAndMachineEvents
            (
                std::vector<NXString> & axisNames /** The axis names which involved in CSE motion. */,
                std::vector<NXString> & machineEventNames /** The name of events fired by CSE. */
            );
            /** This method is used to get the MCD connected object to the specified axis or machine event  @return  MCD connected object. 
                                                                                        The object type can be Mechatronics.PositionControl for the motion axis;
                                                                                        or Mechatronics.SpeedControl for the spinde axis;
                                                                                        or Mechatronics.GanttOperationObject for the machine event. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::TaggedObject * GetMCDConnection
            (
                bool isAxis /** Flag indicates whether the MCD object is set to connect with axis or machine event. */,
                const NXString & axisOrEventName /** Axis or machine event name. */
            );
            /** This method is used to get the MCD connected object to the specified axis or machine event  @return  MCD connected object. 
                                                                                        The object type can be Mechatronics.PositionControl for the motion axis;
                                                                                        or Mechatronics.SpeedControl for the spinde axis;
                                                                                        or Mechatronics.GanttOperationObject for the machine event. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            NXOpen::TaggedObject * GetMCDConnection
            (
                bool isAxis /** Flag indicates whether the MCD object is set to connect with axis or machine event. */,
                const char * axisOrEventName /** Axis or machine event name. */
            );
            /** This method is used to set the MCD connected object to the specified axis or machine event 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetMCDConnection
            (
                bool isAxis /** Flag indicates whether the MCD object is set to connect with axis or machine event. */,
                const NXString & axisOrEventName /** Axis or machine event name. */,
                NXOpen::TaggedObject * mcdConnectedTag /** MCD connected object. 
                                                                                            The object type can be Mechatronics.PositionControl for the motion axis;
                                                                                            or Mechatronics.SpeedControl for the spinde axis;
                                                                                            or Mechatronics.GanttOperationObject for the machine event. */
            );
            /** This method is used to set the MCD connected object to the specified axis or machine event 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetMCDConnection
            (
                bool isAxis /** Flag indicates whether the MCD object is set to connect with axis or machine event. */,
                const char * axisOrEventName /** Axis or machine event name. */,
                NXOpen::TaggedObject * mcdConnectedTag /** MCD connected object. 
                                                                                            The object type can be Mechatronics.PositionControl for the motion axis;
                                                                                            or Mechatronics.SpeedControl for the spinde axis;
                                                                                            or Mechatronics.GanttOperationObject for the machine event. */
            );
            /** This method is used to get axis type  @return  Axis type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::RuntimeNCBuilder::AxisTypes GetAxisType
            (
                const NXString & axisName /** Axis name. */
            );
            /** This method is used to get axis type  @return  Axis type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            NXOpen::Mechatronics::RuntimeNCBuilder::AxisTypes GetAxisType
            (
                const char * axisName /** Axis name. */
            );
            /** This method is used to set axis type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAxisType
            (
                const NXString & axisName /** Axis name. */,
                NXOpen::Mechatronics::RuntimeNCBuilder::AxisTypes axisType /** Axis type */
            );
            /** This method is used to set axis type 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetAxisType
            (
                const char * axisName /** Axis name. */,
                NXOpen::Mechatronics::RuntimeNCBuilder::AxisTypes axisType /** Axis type */
            );
            /**Returns  the flag which indicates whether to put the MCD connected objects to the specific 'Runtime NC' container or not.
                        true means put the MCD connected objects to the specific container (creates the container if it is not exist);
                        false means restore the MCD connected objects to the original default folder, and remove the 'Runtime NC' container.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool FlagOfUsingContainer
            (
            );
            /**Sets  the flag which indicates whether to put the MCD connected objects to the specific 'Runtime NC' container or not.
                        true means put the MCD connected objects to the specific container (creates the container if it is not exist);
                        false means restore the MCD connected objects to the original default folder, and remove the 'Runtime NC' container.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetFlagOfUsingContainer
            (
                bool flagOfUsingContainer /** flagofusingcontainer */ 
            );
            /**Returns  the name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
