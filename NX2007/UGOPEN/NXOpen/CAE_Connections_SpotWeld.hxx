#ifndef NXOpen_CAE_CONNECTIONS_SPOTWELD_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_SPOTWELD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_SpotWeld.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_CoordinatesLocation.hxx>
#include <NXOpen/CAE_Connections_CoordinatesSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_CurveLocation.hxx>
#include <NXOpen/CAE_Connections_FeEdgesLocation.hxx>
#include <NXOpen/CAE_Connections_GroupLocation.hxx>
#include <NXOpen/CAE_Connections_Location.hxx>
#include <NXOpen/CAE_Connections_NodeLocation.hxx>
#include <NXOpen/CAE_Connections_NodeSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_PointLocation.hxx>
#include <NXOpen/CAE_Connections_PointSeriesLocation.hxx>
#include <NXOpen/CAE_Connections_SelectionRecipeLocation.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/CAE_FEElemEdge.hxx>
#include <NXOpen/CAE_FENode.hxx>
#include <NXOpen/CAE_SelectionRecipe.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Connections_IConnection.hxx>
#include <NXOpen/CAE_Connections_IDiameter.hxx>
#include <NXOpen/CAE_Connections_IFlangesContainer.hxx>
#include <NXOpen/CAE_Connections_IHeight.hxx>
#include <NXOpen/CAE_Connections_ILineDiscretization.hxx>
#include <NXOpen/CAE_Connections_ILineOffset.hxx>
#include <NXOpen/CAE_Connections_ILocationsContainer.hxx>
#include <NXOpen/CAE_Connections_ILocationsMultiPointContainer.hxx>
#include <NXOpen/CAE_Connections_ILocationsSinglePointContainer.hxx>
#include <NXOpen/CAE_Connections_ILocationsWithDiscretizationContainer.hxx>
#include <NXOpen/CAE_Connections_IMaterial.hxx>
#include <NXOpen/CAE_Connections_ITolerance.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class SpotWeld;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        namespace Connections
        {
            class CoordinatesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class CoordinatesSeriesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class CurveLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class FeEdgesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class GroupLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IConnection;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IDiameter;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IFlangesContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IHeight;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILineDiscretization;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILineOffset;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsMultiPointContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsSinglePointContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ILocationsWithDiscretizationContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMaterial;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ITolerance;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class Location;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodeLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodeSeriesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class PointLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class PointSeriesLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class SelectionRecipeLocation;
        }
    }
    namespace CAE
    {
        class FEElemEdge;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    class Direction;
    class Expression;
    class IBaseCurve;
    class INXObject;
    class PhysicalMaterial;
    class Point;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _SpotWeldBuilder;
            class SpotWeldImpl;
            /** Spot Weld connection. Use this interface to set/get properties and parameters of the spot weld connection.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  SpotWeld : public NXOpen::CAE::Connections::IConnection, public virtual NXOpen::CAE::Connections::IMaterial, public virtual NXOpen::CAE::Connections::ITolerance, public virtual NXOpen::CAE::Connections::IDiameter, public virtual NXOpen::CAE::Connections::IHeight, public virtual NXOpen::CAE::Connections::IFlangesContainer, public virtual NXOpen::CAE::Connections::ILocationsContainer, public virtual NXOpen::CAE::Connections::ILocationsSinglePointContainer, public virtual NXOpen::CAE::Connections::ILocationsMultiPointContainer, public virtual NXOpen::CAE::Connections::ILocationsWithDiscretizationContainer, public virtual NXOpen::CAE::Connections::ILineOffset, public virtual NXOpen::CAE::Connections::ILineDiscretization
            {
                private: SpotWeldImpl * m_spotweld_impl;
                private: friend class  _SpotWeldBuilder;
                protected: SpotWeld();
                public: ~SpotWeld();
                /**Returns  the connection material 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::PhysicalMaterial * Material
                (
                );
                /**Sets  the connection material 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMaterial
                (
                    NXOpen::PhysicalMaterial * material /** The connection material */
                );
                /** Use this function to check if the connection inherits material from flanges 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool IsInheritedMaterial
                (
                );
                /** Use this function to set inherited material to connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetInheritedMaterial
                (
                );
                /** Use this function to check if the connection supports inherited material 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool CanInheritMaterial
                (
                );
                /** Use this function to check if the connection supports having no material 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool CanHaveNoMaterial
                (
                );
                /**Returns  the maximum distance from definition point to center of support element 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxDistCGToElemCG
                (
                );
                /**Returns  the maximum normal distance from definition point to center of element 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxNormalDistCGToFlanges
                (
                );
                /**Returns  the maximum angle of normals with the projection surface 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxAngleBetweenNormals
                (
                );
                /**Returns  the projection tolerance 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ProjectTolerance
                (
                );
                /**Returns  the connection diameter type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::DiameterType DiameterType
                (
                );
                /**Sets  the connection diameter type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetDiameterType
                (
                    NXOpen::CAE::Connections::DiameterType diameterType /** diametertype */ 
                );
                /**Returns  the connection diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Diameter
                (
                );
                /**Returns  the coefficient for formula defined diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Coefficient
                (
                );
                /**Returns  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXString TableFile
                (
                );
                /**Sets  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetTableFile
                (
                    const NXString & tableFile /** Full path to the diameter table file. */
                );
                /**Sets  the table file used to compute the diameter 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                virtual void SetTableFile
                (
                    const char * tableFile /** Full path to the diameter table file. */
                );
                /** Gets supported diameter types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::DiameterType> GetSupportedDiameterTypes
                (
                );
                /** Sets manual adjustent state. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual void SetManualAdjustment
                (
                    bool state /** state */ 
                );
                /** Gets manual adjustent state. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool GetManualAdjustment
                (
                );
                /** Gets manual adjustent factor. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * GetManualAdjustmentFactor
                (
                );
                /**Returns  the connection height type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::HeightType HeightType
                (
                );
                /**Sets  the connection height type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetHeightType
                (
                    NXOpen::CAE::Connections::HeightType heightType /** Diameter type */
                );
                /**Returns  the height value 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Height
                (
                );
                /** Gets supported height types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::HeightType> GetSupportedHeightTypes
                (
                );
                /** Gets entities from flange. These can be meshes, elements, groups.  @return  Flange entities 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetFlangeEntities
                (
                    int flangeIndex /** flangeindex */ 
                );
                /** Add entities to flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                );
                /** Remove entities from flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                );
                /**Returns  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int NumberOfFlanges
                (
                );
                /**Sets  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetNumberOfFlanges
                (
                    int numberOfFlanges /** numberofflanges */ 
                );
                /** Retrieve the max number of flanges supported by this connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual int GetMaxNumberOfFlanges
                (
                );
                /** Retrieve the minimum number of flanges supported by this connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual int GetMinNumberOfFlanges
                (
                );
                /** Get a node location to connection location list  @return  The location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::Location * GetLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The location index */
                );
                /** Remove a location from connection location list 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The location index */
                );
                /** Get a node location to connection location list  @return  The number of locations 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int GetNumberOfLocations
                (
                    int indexOfDefinition /** The index of definition  */
                );
                /** Convert a location to coordinates. The location is given by its index  @return  The created coordinates type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::Location * ConvertLocationToCoordinatesType
                (
                    int indexOfDefinition /** The index of definition  */,
                    int index /** The location index */
                );
                /** Gets the number of line offset definitions  @return  The number of definitions 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int GetNumberOfDefinitions
                (
                );
                /** Move the location by number of positions  @return  The operation result 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool MoveLocation
                (
                    int indexOfDefinition /** The index of definition  */,
                    int indexOfLocation /** The index of location */,
                    int numberOfPositions /** The number of positions to move the location */
                );
                /** Adds a node location to connection location list  @return  The node type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::NodeLocation * AddLocationNode
                (
                    int indexOfDefinition /** The index of definition  */,
                    NXOpen::CAE::FENode * node /** Node used for location */
                );
                /** Adds a coordinates location to connection location list  @return  The created coordinates type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::CoordinatesLocation * AddLocationCoordinates
                (
                    int indexOfDefinition /** The index of definition  */,
                    const NXOpen::Point3d & coordinates /** Coordinates */
                );
                /** Adds a point location to connection location list  @return  The created point type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::PointLocation * AddLocationPoint
                (
                    int indexOfDefinition /** The index of definition  */,
                    NXOpen::Point * point /** Point used for location creation */
                );
                /** Adds a Selection Recipe to connection location list  @return  The created selection recipe type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::SelectionRecipeLocation * AddLocationSelectionRecipe
                (
                    int indexOfDefinition /** The index of definition  */,
                    NXOpen::CAE::SelectionRecipe * selectionRecipe /** Selection Recipe used for location creation */
                );
                /** Adds a series of nodes location to connection location list  @return  The node series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::NodeSeriesLocation * AddLocationSeriesOfNodes
                (
                    int indexOfDefinition /** The index of definition  */,
                    const std::vector<NXOpen::CAE::FENode *> & nodes /** Nodes used for location */
                );
                /** Adds a series of points location to connection location list  @return  The point series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::PointSeriesLocation * AddLocationSeriesOfPoints
                (
                    int indexOfDefinition /** The index of definition  */,
                    const std::vector<NXOpen::Point *> & points /** Points used for location */
                );
                /** Adds a series of coordinates location to connection location list  @return  The coordinates series type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::CoordinatesSeriesLocation * AddLocationSeriesOfCoordinates
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    const std::vector<NXOpen::Point3d> & coordinates /** The location coordinates */
                );
                /** Adds a curve location to connection location list  @return  The created curve type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::CurveLocation * AddLocationCurve
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    NXOpen::IBaseCurve * curve /** Curve used for location creation */
                );
                /** Adds Fe Edges to connection location list  @return  The created edge group type location 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::FeEdgesLocation * AddLocationFeEdges
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    const std::vector<NXOpen::CAE::FEElemEdge *> & edges /** Edges used for location */
                );
                /** Adds a group location to connection location list  @return  The created group type location 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::GroupLocation * AddLocationGroup
                (
                    int indexOfDefinition /** indexofdefinition */ ,
                    NXOpen::CAE::CaeGroup * group /** Group used for location creation */
                );
                /** Gets the line offset vector 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Direction * GetOffsetVector
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ 
                );
                /** Sets the line offset vector 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetOffsetVector
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ ,
                    NXOpen::Direction * offsetvector /** offsetvector */ 
                );
                /** Gets the line offset distance 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * GetOffsetDistance
                (
                    int lindeDefinitionIndex /** lindedefinitionindex */ 
                );
                /**Returns  the usage of original nodes of connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseOriginalNodesOfConnection
                (
                );
                /**Sets  the usage of original nodes of connection 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseOriginalNodesOfConnection
                (
                    bool use /** use */ 
                );
                /**Returns  the usage of max length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseMaxLengthStep
                (
                );
                /**Sets  the usage of max length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseMaxLengthStep
                (
                    bool use /** use */ 
                );
                /**Returns  the line Discretization distance from start 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * DistanceFromStart
                (
                );
                /**Returns  the line Discretization distance to end 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * DistanceToEnd
                (
                );
                /**Returns  the line Discretization length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * LengthStep
                (
                );
                /**Returns  the line Discretization max length step 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxLengthStep
                (
                );
                /**Returns  the number of connections 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int NumberOfDiscretizationPoints
                (
                );
                /**Sets  the number of connections 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetNumberOfDiscretizationPoints
                (
                    int num /** num */ 
                );
                /**Returns  the discretization method 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::DiscretizationMethod DiscretizationMethod
                (
                );
                /**Sets  the discretization method 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetDiscretizationMethod
                (
                    NXOpen::CAE::Connections::DiscretizationMethod method /** method */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
