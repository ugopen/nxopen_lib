#ifndef NXOpen_PDM_ICLONEOPERATION_HXX_INCLUDED
#define NXOpen_PDM_ICLONEOPERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_ICloneOperation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AssyCloneLogFileFailures.hxx>
#include <NXOpen/AssyCloneNamingFailures.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/LoadOptions.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class ICloneOperation;
    }
    class AssyCloneLogFileFailures;
    class AssyCloneNamingFailures;
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class AssyCloneCompDisp;
    }
    class PartLoadStatus;
    namespace PDM
    {
        /** This enum is used to specify the existing part action that will be applied to operation candidates. */
        enum ExistingPartAction
        {
            ExistingPartActionOverwrite/** overwrite */ ,
            ExistingPartActionUseExisting/** use existing */ ,
            ExistingPartActionExclude/** exclude */ ,
            ExistingPartActionClone/** clone */ ,
            ExistingPartActionRetain/** retain */ ,
            ExistingPartActionDefault/** default */ 
        };

        /** This enum is used to specify the naming technique. */
        enum NamingTechniqueOption
        {
            NamingTechniqueOptionAutoTranslate/** auto translate */ ,
            NamingTechniqueOptionNamingRule/** naming rule */ ,
            NamingTechniqueOptionAutoTranslateWithAlternateID/** auto translate with alternate id */ ,
            NamingTechniqueOptionUserName/** user name */ ,
            NamingTechniqueOptionAutoGenerate/** auto generate */ ,
            NamingTechniqueOptionDefault/** default */ 
        };

        /** This enum is used to specify the name conversion rule for generating name/number for the operation candidates. */
        enum ConversionRule
        {
            ConversionRuleWithPrefix/** with prefix */ ,
            ConversionRuleWithSuffix/** with suffix */ ,
            ConversionRuleWithReplaceString/** with replace string */ ,
            ConversionRuleWithRename/** with rename */ 
        };

        /** This enum is used to specify the CAE types related to the component that should be pulled into the operation. */
        enum CloneRelatedCae
        {
            CloneRelatedCaeSimFemIdeal/** sim fem ideal */ ,
            CloneRelatedCaeFemIdeal/** fem ideal */ ,
            CloneRelatedCaeIdeal/** ideal */ ,
            CloneRelatedCaeNone/** none */ 
        };

        /** This enum is used to specify the treatment to be used for Part Family Members.
                JA_ICLONE_OPERATION_PartFamilyTreatment_TreatAsLostPart - Any Part Family Members taking part in the export operation
                will be treated as lost parts by setting their state to 'Lost', and will not be exported.
                JA_ICLONE_OPERATION_PartFamilyTreatment_TurnIntoNormalPart - Any Part Family Members taking part in the export operation
                will be turned into normal parts by setting their state to 'Present' and individually adding them in the export operation,
                and will be exported.
            */
        enum PartFamilyTreatment
        {
            PartFamilyTreatmentTreatAsLostPart/** treat as lost part */ ,
            PartFamilyTreatmentTurnIntoNormalPart/** turn into normal part */ 
        };

    }
    namespace PDM
    {
        class _ICloneOperationBuilder;
        class ICloneOperationImpl;
        /** An interface to perform clone operations  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  ICloneOperation : public NXOpen::TaggedObject, public virtual NXOpen::IAttributeSourceObjectBuilder
        {
            private: ICloneOperationImpl * m_icloneoperation_impl;
            private: friend class  _ICloneOperationBuilder;
            protected: ICloneOperation();
            public: ~ICloneOperation();
            /** This API adds a part to the operation. If the part is an assembly part, any components
                        of the assembly, not already in the operation, will be added as name-only references. 
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddPart
            (
                const NXString & partName /** partname */ 
            );
            /** This API adds a part to the operation. If the part is an assembly part, any components
                        of the assembly, not already in the operation, will be added as name-only references. 
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void AddPart
            (
                const char * partName /** partname */ 
            );
            /** This API adds an assembly to the operation. Any load errors will be placed in the loadStatus argument. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PartLoadStatus * AddAssembly
            (
                const NXString & assemblyName /** assemblyname */ 
            );
            /** This API adds an assembly to the operation. Any load errors will be placed in the loadStatus argument. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PartLoadStatus * AddAssembly
            (
                const char * assemblyName /** assemblyname */ 
            );
            /** This API reads the specified log file and applies the data in it to the current export/clone operation.
                        If any naming failures occur during loading the log file, these will be reported via the namingFailures  
                        argument and any errors related to log file will be reported through logFileFailures argument.

                        If processing the log file causes new assemblies to be loaded, then any errors
                        while loading the assembly will be reported through the loadStatus argument.

                        If both naming failures and load failures occur, it is not defined which error
                        code the return value of the function will be - if you wish to report both
                        you should check the n_failures member of the namingFailures structure and
                        the failed member of the loadStatus structure to see if errors have occurred.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void LoadFromLogFile
            (
                const NXString & logFileName /** logfilename */ ,
                NXOpen::AssyCloneNamingFailures ** namingFailures /** namingfailures */ ,
                NXOpen::AssyCloneLogFileFailures ** logFileFailures /** logfilefailures */ ,
                NXOpen::PartLoadStatus ** loadStatus /** loadstatus */ 
            );
            /** This API reads the specified log file and applies the data in it to the current export/clone operation.
                        If any naming failures occur during loading the log file, these will be reported via the namingFailures  
                        argument and any errors related to log file will be reported through logFileFailures argument.

                        If processing the log file causes new assemblies to be loaded, then any errors
                        while loading the assembly will be reported through the loadStatus argument.

                        If both naming failures and load failures occur, it is not defined which error
                        code the return value of the function will be - if you wish to report both
                        you should check the n_failures member of the namingFailures structure and
                        the failed member of the loadStatus structure to see if errors have occurred.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void LoadFromLogFile
            (
                const char * logFileName /** logfilename */ ,
                NXOpen::AssyCloneNamingFailures ** namingFailures /** namingfailures */ ,
                NXOpen::AssyCloneLogFileFailures ** logFileFailures /** logfilefailures */ ,
                NXOpen::PartLoadStatus ** loadStatus /** loadstatus */ 
            );
            /** This API allows the destruction of an instance of the ICloneOpertion. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void Destroy
            (
            );
            /** This API performs the export/clone operation, if any naming failures generated during the operation will be
                        reported through the namingFailures argument and naming warnings through namingWarnings argument.
                        In case of naming failures the operation will not be performed. 
                        If skipExecute is true, then only the default values will be populated on objects, but export operation will not be performed(just like dry run).
                        If skipExecute is false, then first default values will be populated on objects and then export will be performed.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ApplyDefaultsAndExecute
            (
                bool skipExecute /** skipexecute */ ,
                NXOpen::AssyCloneNamingFailures ** namingFailures /** namingfailures */ ,
                NXOpen::AssyCloneNamingFailures ** namingWarnings /** namingwarnings */ 
            );
            /** This API is used to terminate the running export/clone operation. Error is returned if the terminate operation encounters an error. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void TerminateOperation
            (
            );
            /** This API is used to set the naming technique, that will be used to generate final name for all the components being exported/cloned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNamingTechnique
            (
                NXOpen::PDM::NamingTechniqueOption namingTechnique /** namingtechnique */ 
            );
            /** This API sets the default action for the current export/clone operation. Any action inappropriate to the current operation will return an error. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultAction
            (
                NXOpen::PDM::ExistingPartAction defaultAction /** defaultaction */ 
            );
            /** This API is used to set the prefix string that will be prepended to generate final name for parts being exported/cloned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrefixString
            (
                const NXString & prefixStr /** prefixstr */ 
            );
            /** This API is used to set the prefix string that will be prepended to generate final name for parts being exported/cloned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPrefixString
            (
                const char * prefixStr /** prefixstr */ 
            );
            /** This API is used to set the sufffix string that will be appended to generate final name for parts being exported/cloned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSuffixString
            (
                const NXString & suffixStr /** suffixstr */ 
            );
            /** This API is used to set the sufffix string that will be appended to generate final name for parts being exported/cloned. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetSuffixString
            (
                const char * suffixStr /** suffixstr */ 
            );
            /** This API is used to generate final name for parts being exported/cloned, by replacing baseString with newString. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ReplaceString
            (
                const NXString & baseString /** basestring */ ,
                const NXString & newString /** newstring */ 
            );
            /** This API is used to generate final name for parts being exported/cloned, by replacing baseString with newString. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void ReplaceString
            (
                const char * baseString /** basestring */ ,
                const char * newString /** newstring */ 
            );
            /** This API is used to generate final name for parts being exported/cloned using renameStr. 
                        Here 'renameStr' will be used as final name for the first part,
                        For the remaining parts to have unique names, _number(where number will be 1,2,3....) will be appended to renameStr to generate unique final names.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void RenameString
            (
                const NXString & renameStr /** renamestr */ 
            );
            /** This API is used to generate final name for parts being exported/cloned using renameStr. 
                        Here 'renameStr' will be used as final name for the first part,
                        For the remaining parts to have unique names, _number(where number will be 1,2,3....) will be appended to renameStr to generate unique final names.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void RenameString
            (
                const char * renameStr /** renamestr */ 
            );
            /** This API is used to specify the absolute path name of the log-file to be used to record export/clone operation,
                        If the value specified is NULL, no logfile will be written.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOutputLogFile
            (
                const NXString & logFileName /** logfilename */ 
            );
            /** This API is used to specify the absolute path name of the log-file to be used to record export/clone operation,
                        If the value specified is NULL, no logfile will be written.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetOutputLogFile
            (
                const char * logFileName /** logfilename */ 
            );
            /** This API is used to specify whether to attach the clone log file as a associated file to root parts in export/clone operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AttachLogFileToAssociatedFiles
            (
                bool attachLogFileToAssociatedFiles /** attachlogfiletoassociatedfiles */ 
            );
            /** This API sets the option to export/clone the related CAE parts when cloning any CAD parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneRelatedCae
            (
                NXOpen::PDM::CloneRelatedCae cloneRelatedCae /** clonerelatedcae */ 
            );
            /** This API sets the option to export/clone the related drawings when cloning any CAD parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneRelatedDrawings
            (
                bool cloneRelatedDrawings /** clonerelateddrawings */ 
            );
            /** This API sets the option in the current export/clone operation indicating whether associated files 
                        should by default be exported/cloned in the current operation. Associated files will be exported/cloned to the 
                        associated files root directory set by the user. If the associated files root directory is not set
                        then it will be exported/cloned to the directory of the exported/cloned parts.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CopyAssociatedFiles
            (
                bool copyAssociatedFiles /** copyassociatedfiles */ 
            );
            /** This API specifies whether the objects with the specified relation type to be exported/cloned when the component they are related to gets exported/cloned.
                        Relation types are strings containing the name of a nonmaster type defined in the database, such as 'manifestation', 'specification', and 'altrep'. 
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CopyRelations
            (
                std::vector<NXString> & relationTypes /** relationtypes */ ,
                bool copyRelations /** copyrelations */ 
            );
            /** This API assigns an explicit disposition to the specified object undergoing clone (which represents a component part referenced in the input assembly).
                        Specifying an explicit disposition assignment means the component will not take advantage of the default disposition value (even if the explicit
                        disposition assigned was equal to the current default disposition value).

                        Disposition assignments in a export/clone operation can trigger disposition cascading. Disposition cascading is the automatic assignment of
                        dispositions made to related components in order to protect the seed assembly from modification. If disposition cascading occurs as a result
                        of a disposition assignment, the 'cascadeDispositions' argument will be true. The 'cascadedComponentDispositions' argument will contain the list of objects
                        to which the cascaded disposition was assigned and 'numCascadedComponents' will indicate the number of objects in that list.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AssignCompDisposition
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                NXOpen::PDM::ExistingPartAction action /** action */ ,
                bool* cascadeDispositions /** cascadedispositions */ ,
                std::vector<NXOpen::PDM::AssyCloneCompDisp *> & cascadedComponentDispositions /** cascadedcomponentdispositions */ ,
                std::vector<NXOpen::PDM::AssyCloneCompDisp *> & conflictingComponentDispositions /** conflictingcomponentdispositions */ 
            );
            /** This API assigns the final name for the cloned component using the specified naming technique option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int AssignCloneNaming
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                NXOpen::PDM::NamingTechniqueOption namingTechnique /** namingtechnique */ ,
                const NXString & finalName /** finalname */ 
            );
            /** This API assigns the final name for the cloned component using the specified naming technique option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            int AssignCloneNaming
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                NXOpen::PDM::NamingTechniqueOption namingTechnique /** namingtechnique */ ,
                const char * finalName /** finalname */ 
            );
            /** This API fetches the tags of all the components(objects to be cloned) that are added in current export/clone operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void FetchObjects
            (
                std::vector<NXOpen::PDM::AssyCloneCompDisp *> & objectsToBeCloned /** objectstobecloned */ 
            );
            /** This API sets the dry run flag for the current export/clone operation. If this flag is true and JA_ICLONE_OPERATION_ApplyDefaultsAndExecute is called, 
                        the operation will actually not be performed. Please set JA_ICLONE_OPERATION_SetOutputLogFile for the log file to be generated.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDryRun
            (
                bool isDryRun /** isdryrun */ 
            );
            /** This API sets the final name on specified component. If duplicate names are identifed and allowDuplicates flag is true then
                        new name is generated for one of the component to avoid conflicts, if allowDuplicates flag is false then it will return
                        with appropriate error code. 
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFinalName
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const NXString & finalName /** finalname */ ,
                bool allowDuplicates /** allowduplicates */ 
            );
            /** This API sets the final name on specified component. If duplicate names are identifed and allowDuplicates flag is true then
                        new name is generated for one of the component to avoid conflicts, if allowDuplicates flag is false then it will return
                        with appropriate error code. 
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetFinalName
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const char * finalName /** finalname */ ,
                bool allowDuplicates /** allowduplicates */ 
            );
            /** This API sets the configuration context using the Revision Rule Name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int SetConfigurationContextUsingRevRule
            (
                bool setDefault /** setdefault */ ,
                const NXString & revisionRuleName /** revisionrulename */ 
            );
            /** This API sets the configuration context using the Revision Rule Name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            int SetConfigurationContextUsingRevRule
            (
                bool setDefault /** setdefault */ ,
                const char * revisionRuleName /** revisionrulename */ 
            );
            /** This API sets the value of the assembly load option for managed mode. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLoadOption
            (
                NXOpen::LoadOptions::ManagedModeLoadMethod loadOption /** loadoption */ 
            );
            /** This API will open a log file for writing. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void InitCloneLog
            (
                const NXString & logFileName /** logfilename */ 
            );
            /** This API will open a log file for writing. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void InitCloneLog
            (
                const char * logFileName /** logfilename */ 
            );
            /** This API will reprocess the non-component refs for objects to be exported/cloned which were not resolved first time. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ReprocessNonComponentReferences
            (
            );
            /** This API applies checkin/checkout flags as appropriate for the export operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::AssyCloneNamingFailures * ApplyCICODefaults
            (
            );
            /** This API will perform application specific pre-commit tasks. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void PerformPreCommit
            (
            );
            /** This API will perform application specific post-commit tasks. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void PerformPostCommit
            (
            );
            /** This API could be used by application to add related parts in export/clone operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddApplicationRelatedParts
            (
            );
            /** This API will decide how to treat the Part Family members present in export operation depending on 
                        the partFamilyTreatment input value.

                        This API should be used only after assembly has been added for export operation as it will
                        iterate over all the Part Family Members added in export operation and set their behavior specified by
                        the partFamilyTreatment input value.

                        Note 1: If 'UGMGR_CloneImportExportAutoRemovePFM' customer default is enabled then it will always treat
                        Part Family Members as 'Lost' in export, So please do not use this API if this customer default is enabled,
                        since using this API to change the behavior of Part Family Members will not work in that case. 
                        Note 2: If 'UGMGR_CloneImportExportAutoRemovePFM' customer default is disabled then the user must use this API
                        to set the desired behavior of Part Family Members. If the desired behavior is not set using this API then 
                        Part Family Members will not participate anymore in export operation.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartFamilyTreatment
            (
                NXOpen::PDM::PartFamilyTreatment partFamilyTreatment /** partfamilytreatment */ 
            );
            /** This API sets the option to exclude the reference only components from Export. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneExcludeReferenceOnly
            (
                bool excludeReferenceOnly /** excludereferenceonly */ 
            );
            /** This API sets the option to exclude the Non Geometric components from Export. 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneExcludeNGC
            (
                bool excludeNGC /** excludengc */ 
            );
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
               
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                    properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
               
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /** Creates a map object of attribute titles to their corresponding naming pattern 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
            (
                std::vector<NXString> & attributeTitles /** attributetitles */ ,
                std::vector<NXString> & titlePatterns /** titlepatterns */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
