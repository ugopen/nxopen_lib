#ifndef NXOpen_IMPLICIT_CYLINDRICALPATTERNBUILDER_HXX_INCLUDED
#define NXOpen_IMPLICIT_CYLINDRICALPATTERNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Implicit_CylindricalPatternBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Implicit_OperationBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_implicit_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Implicit
    {
        class CylindricalPatternBuilder;
    }
    class CartesianCoordinateSystem;
    class Expression;
    namespace Implicit
    {
        class OperationBuilder;
    }
    class ScCollector;
    namespace Implicit
    {
        class _CylindricalPatternBuilderBuilder;
        class CylindricalPatternBuilderImpl;
        /**
            Represents a Implicit.CylindricalPatternBuilder.
            The Unit cell will be patterned around the cylinder circumference in unit cell x direction, 
            along cylinder axis in unit cell y direction and 
            stacked up radial with the specified number of layers in unit cell z direction.
             <br> To create a new instance of this class, use @link NXOpen::Implicit::ImplicitOperationCollection::CreateCylindricalPatternBuilder  NXOpen::Implicit::ImplicitOperationCollection::CreateCylindricalPatternBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Diameter.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        Height.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        NumberOfCellsAroundCircumference </term> <description> 
         
        10 </description> </item> 

        <item><term> 
         
        NumberOfRadialLayers </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_IMPLICITEXPORT  CylindricalPatternBuilder : public NXOpen::Implicit::OperationBuilder
        {
            private: CylindricalPatternBuilderImpl * m_cylindricalpatternbuilder_impl;
            private: friend class  _CylindricalPatternBuilderBuilder;
            protected: CylindricalPatternBuilder();
            public: ~CylindricalPatternBuilder();
            /**Returns  the unit cell body.
                    The unit cell body will be scaled uniform so that cell size is around circumference divided by cell count.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * UnitCellBody
            (
            );
            /**Returns  the specified Point 
                    Allows you to locate and orient the cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CartesianCoordinateSystem * CenterAndOrientation
            (
            );
            /**Sets  the specified Point 
                    Allows you to locate and orient the cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetCenterAndOrientation
            (
                NXOpen::CartesianCoordinateSystem * csys /** csys */ 
            );
            /**Returns  the cylinder diameter 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Diameter
            (
            );
            /**Returns  the cylinder height 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the cell count around circumference 
                    the number of cells around the circumference of the specified inner cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCellsAroundCircumference
            (
            );
            /**Sets  the cell count around circumference 
                    the number of cells around the circumference of the specified inner cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetNumberOfCellsAroundCircumference
            (
                int numCellsAroundCircumference /** numcellsaroundcircumference */ 
            );
            /**Returns  the radial layers 
                    the layers to be stacked up on the outside of the specified inner cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfRadialLayers
            (
            );
            /**Sets  the radial layers 
                    the layers to be stacked up on the outside of the specified inner cylinder.
                    
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : nx_implicit (" NX Implicit Modeling") */
            public: void SetNumberOfRadialLayers
            (
                int numRadialLayers /** numradiallayers */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
