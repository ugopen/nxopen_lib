#ifndef NXOpen_FIELDS_FIELDEXPRESSION_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDEXPRESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldExpression.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    class Unit;
    namespace Fields
    {
        class _FieldExpressionBuilder;
        class FieldExpressionImpl;
        /**  @brief  Represents the Field Expression class. 

         
             <br> A field (see @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink ) which has <b><tt>exactly one</tt></b> dependent
            variable (see @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink ), where the field function defintions
            is implemented using the NX Expression sub-system @link NXOpen::Expression NXOpen::Expression@endlink . <br>  
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldExpression : public NXOpen::Fields::Field
        {
            /** This option specifies how sampling is handled when combining table fields via an expression or an unbounded formula.
                        It is not applicable for table fields which have the "Values outside Table" option set to anything other than Constant or Extrapolate, 
                        or when other field types are included in the expression. For those cases the Intersection setting will always be used.
                        */
            public: enum CombineTableOption
            {
                CombineTableOptionIntersection/** The Intersection option will yield only points (e.g.: time points) which are common among the tables. */,
                CombineTableOptionUnion/** The Union option will include all points from all tables in the expression. */
            };

            private: FieldExpressionImpl * m_fieldexpression_impl;
            private: friend class  _FieldExpressionBuilder;
            protected: FieldExpression();
            public: ~FieldExpression();
            /** Edit the expression field.  Specifies the new expression string and the array of variables used
                        in the expression string.  Field expressions are children of
                        @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink .
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void EditFieldExpression
            (
                const NXString & fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                bool updateFlag /** update flag */
            );
            /** Edit the expression field.  Specifies the new expression string and the array of variables used
                        in the expression string.  Field expressions are children of
                        @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink .
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void EditFieldExpression
            (
                const char * fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                bool updateFlag /** update flag */
            );
            /** Gets the expression string of the expression field  @return  expression string associated with the field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetFieldExpressionString
            (
            );
            /** Sets the new expression string to the expression field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFieldExpressionString
            (
                const NXString & fieldExpString /** expression string to be associated with the field */,
                bool updateFlag /** update flag */
            );
            /** Sets the new expression string to the expression field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetFieldExpressionString
            (
                const char * fieldExpString /** expression string to be associated with the field */,
                bool updateFlag /** update flag */
            );
            /**Returns  the units of the field expression 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Unit * FieldExpressionUnits
            (
            );
            /**Returns  the table combine option 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression::CombineTableOption CombineTable
            (
            );
            /**Sets  the table combine option 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCombineTable
            (
                NXOpen::Fields::FieldExpression::CombineTableOption tableOption /** the table combine option */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
