#ifndef NXOpen_FALCON_EQUIPMENTBUILDER_HXX_INCLUDED
#define NXOpen_FALCON_EQUIPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Falcon_EquipmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_LayerSettingsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_falcon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Falcon
    {
        class EquipmentBuilder;
    }
    class Builder;
    namespace Display
    {
        class LayerSettingsBuilder;
    }
    namespace Falcon
    {
        class SelectDBBaseDisplayableNode;
    }
    class NXColor;
    namespace Falcon
    {
        class _EquipmentBuilderBuilder;
        class EquipmentBuilderImpl;
        /** the class for creating Falcon equipment  <br> To create a new instance of this class, use @link NXOpen::Falcon::FalconManager::CreateEquipmentBuilder  NXOpen::Falcon::FalconManager::CreateEquipmentBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AisleLayerSettings.LayerOption </term> <description> 
         
        Work </description> </item> 

        <item><term> 
         
        AvailableTimeUnit </term> <description> 
         
        Min </description> </item> 

        <item><term> 
         
        Effectiveness </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EquipmentType </term> <description> 
         
        Automatic Guided Vehicle </description> </item> 

        <item><term> 
         
        MaxAllowedUtilization </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Quantity </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX2007.0.0.  <br>  
        */
        class NXOPENCPP_FALCONEXPORT  EquipmentBuilder : public NXOpen::Builder
        {
            /** Enum for Avaialble Time Unit*/
            public: enum AvaialbleTimeUnit
            {
                AvaialbleTimeUnitMin/** min */ ,
                AvaialbleTimeUnitHr/** hr */ 
            };

            private: EquipmentBuilderImpl * m_equipmentbuilder_impl;
            private: friend class  _EquipmentBuilderBuilder;
            protected: EquipmentBuilder();
            public: ~EquipmentBuilder();
            /**Returns  the equipment type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EquipmentType
            (
            );
            /**Sets  the equipment type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetEquipmentType
            (
                const NXString & type /** type */ 
            );
            /**Sets  the equipment type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetEquipmentType
            (
                const char * type /** type */ 
            );
            /**Returns  the name of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EquipmentName
            (
            );
            /**Sets  the name of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetEquipmentName
            (
                const NXString & equipmentName /** equipmentname */ 
            );
            /**Sets  the name of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetEquipmentName
            (
                const char * equipmentName /** equipmentname */ 
            );
            /**Returns  the quantity of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: int Quantity
            (
            );
            /**Sets  the quantity of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetQuantity
            (
                int quantity /** quantity */ 
            );
            /**Returns  the color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the color 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the maxium allowed utilization of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxAllowedUtilization
            (
            );
            /**Sets  the maxium allowed utilization of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetMaxAllowedUtilization
            (
                double maxAllowedUtilization /** maxallowedutilization */ 
            );
            /**Returns  the effectiveness of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double Effectiveness
            (
            );
            /**Sets  the effectiveness of equipment is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetEffectiveness
            (
                double effectiveness /** effectiveness */ 
            );
            /**Returns  the sensitivity of Quantity field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsQuantityEnabled
            (
            );
            /**Sets  the sensitivity of Quantity field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetQuantityEnabled
            (
                bool isQuantityEnabled /** isquantityenabled */ 
            );
            /**Returns  the sensitivity of Max Allowable Utilization field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsMaxAllowedUtilizationEnabled
            (
            );
            /**Sets  the sensitivity of Max Allowable Utilization field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetMaxAllowedUtilizationEnabled
            (
                bool isMaxAllowedUtilizationEnabled /** ismaxallowedutilizationenabled */ 
            );
            /**Returns  the sensitivity of Effectiveness field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEffectivenessEnabled
            (
            );
            /**Sets  the sensitivity of Effectiveness field of equipment for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetEffectivenessEnabled
            (
                bool isEffectivenessEnabled /** iseffectivenessenabled */ 
            );
            /**Returns  the max available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxAvailableTime
            (
            );
            /**Sets  the max available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetMaxAvailableTime
            (
                double maxAvailableTime /** maxavailabletime */ 
            );
            /**Returns  the available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double AvailableTime
            (
            );
            /**Sets  the available time 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAvailableTime
            (
                double availableTime /** availabletime */ 
            );
            /**Returns  the available time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::EquipmentBuilder::AvaialbleTimeUnit AvailableTimeUnit
            (
            );
            /**Sets  the available time unit 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAvailableTimeUnit
            (
                NXOpen::Falcon::EquipmentBuilder::AvaialbleTimeUnit availableTimeUnit /** availabletimeunit */ 
            );
            /**Returns  the sensitivity of all avaialble times for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAvailableTimesEnabled
            (
            );
            /**Sets  the sensitivity of all avaialble times for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAvailableTimesEnabled
            (
                bool isAvailableTimesEnabled /** isavailabletimesenabled */ 
            );
            /**Returns  the lightboardt toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool LightboardToggle
            (
            );
            /**Sets  the lightboardt toggle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetLightboardToggle
            (
                bool lightboardToggle /** lightboardtoggle */ 
            );
            /**Returns  the select activity point 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Falcon::SelectDBBaseDisplayableNode * SelectActivityPoint
            (
            );
            /**Returns  the sensitivity of Templates Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsTemplatesGroupEnabled
            (
            );
            /**Sets  the sensitivity of Templates Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetTemplatesGroupEnabled
            (
                bool isTemplatesGroupEnabled /** istemplatesgroupenabled */ 
            );
            /**Returns  the load 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Load
            (
            );
            /**Sets  the load 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetLoad
            (
                const NXString & load /** load */ 
            );
            /**Sets  the load 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetLoad
            (
                const char * load /** load */ 
            );
            /**Returns  the unload 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Unload
            (
            );
            /**Sets  the unload 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetUnload
            (
                const NXString & unload /** unload */ 
            );
            /**Sets  the unload 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetUnload
            (
                const char * unload /** unload */ 
            );
            /**Returns  the material handling 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaterialHandling
            (
            );
            /**Sets  the material handling 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetMaterialHandling
            (
                const NXString & materialHandling /** materialhandling */ 
            );
            /**Sets  the material handling 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetMaterialHandling
            (
                const char * materialHandling /** materialhandling */ 
            );
            /**Returns  the sensitivity of Costs Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsCostsGroupEnabled
            (
            );
            /**Sets  the sensitivity of Costs Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetCostsGroupEnabled
            (
                bool isCostsGroupEnabled /** iscostsgroupenabled */ 
            );
            /**Returns  the fixed cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double FixedCost
            (
            );
            /**Sets  the fixed cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetFixedCost
            (
                double fixedCost /** fixedcost */ 
            );
            /**Returns  the Fuel Power Maintenance cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double FuelPowerMaintenanceCost
            (
            );
            /**Sets  the Fuel Power Maintenance cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetFuelPowerMaintenanceCost
            (
                double fpmCost /** fpmcost */ 
            );
            /**Returns  the labor cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double LaborCost
            (
            );
            /**Sets  the labor cost 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetLaborCost
            (
                double laborCost /** laborcost */ 
            );
            /**Returns  the sensitivity of Speeds Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSpeedsGroupEnabled
            (
            );
            /**Sets  the sensitivity of Speeds Group for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSpeedsGroupEnabled
            (
                bool isSpeedsGroupEnabled /** isspeedsgroupenabled */ 
            );
            /**Returns  the forward speed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double ForwardSpeed
            (
            );
            /**Sets  the forward speed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetForwardSpeed
            (
                double forwardSpeed /** forwardspeed */ 
            );
            /**Returns  the vertical speed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double VerticalSpeed
            (
            );
            /**Sets  the vertical speed 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetVerticalSpeed
            (
                double verticalSpeed /** verticalspeed */ 
            );
            /**Returns  the sensitivity of Vertical speed for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsVerticalSpeedEnabled
            (
            );
            /**Sets  the sensitivity of Vertical speed for the selected type is returned
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetVerticalSpeedEnabled
            (
                bool isVerticalSpeedEnabled /** isverticalspeedenabled */ 
            );
            /**Returns  the acceleration 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double Acceleration
            (
            );
            /**Sets  the acceleration 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAcceleration
            (
                double acceleration /** acceleration */ 
            );
            /**Returns  the deceleration 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double Deceleration
            (
            );
            /**Sets  the deceleration 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetDeceleration
            (
                double deceleration /** deceleration */ 
            );
            /**Returns  the transfer angle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: double TransferAngle
            (
            );
            /**Sets  the transfer angle 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetTransferAngle
            (
                double transferAngle /** transferangle */ 
            );
            /**Returns  the aisle layer setting builder 
             <br>  Created in NX2007.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::LayerSettingsBuilder * AisleLayerSettings
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
